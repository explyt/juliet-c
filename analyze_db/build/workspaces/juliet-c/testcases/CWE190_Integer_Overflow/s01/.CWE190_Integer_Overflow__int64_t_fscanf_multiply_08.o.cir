!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc203)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc204)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%ld\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc205)
  cir.func private @printLongLongLine(!s64i) loc(#loc206)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_multiply_08_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc208)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc13)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc209)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc211)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc17)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc17)
      cir.if %4 {
        %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc20)
        %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc204)
        %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc21)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc205)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc205)
        %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc20)
      } loc(#loc212)
    } loc(#loc210)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc214)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc24)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc24)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc29)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc30)
          %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc30)
          %8 = cir.cmp(gt, %5, %7) : !s64i, !cir.bool loc(#loc217)
          cir.if %8 {
            %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc219)
            %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc34)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc33)
            %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc33)
            %13 = cir.binop(mul, %10, %12) nsw : !s64i loc(#loc34)
            cir.store %13, %9 : !s64i, !cir.ptr<!s64i> loc(#loc219)
            %14 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc35)
            cir.call @printLongLongLine(%14) : (!s64i) -> () loc(#loc36)
          } loc(#loc218)
        } loc(#loc216)
      } loc(#loc215)
    } loc(#loc213)
    cir.return loc(#loc10)
  } loc(#loc207)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_multiply_08_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc221)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc222)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc41)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc223)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc43)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc224)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc45)
    cir.return loc(#loc38)
  } loc(#loc220)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc48)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc49)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc226)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc226)
    cir.return %2 : !s32i loc(#loc226)
  } loc(#loc225)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc227)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc54)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc229)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc59)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc230)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc232)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc63)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc63)
      cir.if %4 {
        %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc66)
        %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc204)
        %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc67)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc234)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc234)
        %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc66)
      } loc(#loc233)
    } loc(#loc231)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc236)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc72)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc72)
      cir.if %4 {
        %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc53)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc53)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc77)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc80)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc81)
          %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc81)
          %8 = cir.cmp(gt, %5, %7) : !s64i, !cir.bool loc(#loc239)
          cir.if %8 {
            cir.scope {
              %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc85)
              %10 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc86)
              %11 = cir.const #cir.int<2> : !s32i loc(#loc87)
              %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc87)
              %13 = cir.binop(div, %10, %12) : !s64i loc(#loc242)
              %14 = cir.cmp(lt, %9, %13) : !s64i, !cir.bool loc(#loc243)
              cir.if %14 {
                %15 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc245)
                %16 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc94)
                %17 = cir.const #cir.int<2> : !s32i loc(#loc93)
                %18 = cir.cast(integral, %17 : !s32i), !s64i loc(#loc93)
                %19 = cir.binop(mul, %16, %18) nsw : !s64i loc(#loc94)
                cir.store %19, %15 : !s64i, !cir.ptr<!s64i> loc(#loc245)
                %20 = cir.load %15 : !cir.ptr<!s64i>, !s64i loc(#loc95)
                cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc96)
              } else {
                %15 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc54)
                %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc54)
                cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc97)
              } loc(#loc244)
            } loc(#loc241)
          } loc(#loc240)
        } loc(#loc238)
      } loc(#loc237)
    } loc(#loc235)
    cir.return loc(#loc56)
  } loc(#loc228)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc99)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc100)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc247)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc247)
    cir.return %2 : !s32i loc(#loc247)
  } loc(#loc246)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc249)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc106)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc250)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc252)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc110)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc110)
      cir.if %4 {
        %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc113)
        %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc204)
        %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc114)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc254)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc254)
        %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc113)
      } loc(#loc253)
    } loc(#loc251)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc256)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc119)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc119)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc124)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc125)
          %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc125)
          %8 = cir.cmp(gt, %5, %7) : !s64i, !cir.bool loc(#loc259)
          cir.if %8 {
            cir.scope {
              %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc129)
              %10 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc130)
              %11 = cir.const #cir.int<2> : !s32i loc(#loc131)
              %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc131)
              %13 = cir.binop(div, %10, %12) : !s64i loc(#loc262)
              %14 = cir.cmp(lt, %9, %13) : !s64i, !cir.bool loc(#loc263)
              cir.if %14 {
                %15 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc265)
                %16 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc138)
                %17 = cir.const #cir.int<2> : !s32i loc(#loc137)
                %18 = cir.cast(integral, %17 : !s32i), !s64i loc(#loc137)
                %19 = cir.binop(mul, %16, %18) nsw : !s64i loc(#loc138)
                cir.store %19, %15 : !s64i, !cir.ptr<!s64i> loc(#loc265)
                %20 = cir.load %15 : !cir.ptr<!s64i>, !s64i loc(#loc139)
                cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc140)
              } else {
                %15 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc141)
                %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc141)
                cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc142)
              } loc(#loc264)
            } loc(#loc261)
          } loc(#loc260)
        } loc(#loc258)
      } loc(#loc257)
    } loc(#loc255)
    cir.return loc(#loc103)
  } loc(#loc248)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc267)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc147)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc268)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc270)
      %3 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc151)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc151)
      cir.if %4 {
        %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc156)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc156)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc157)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc158)
        %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc158)
        cir.store %6, %0 : !s64i, !cir.ptr<!s64i> loc(#loc272)
      } loc(#loc271)
    } loc(#loc269)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc274)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc162)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc162)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc167)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc168)
          %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc168)
          %8 = cir.cmp(gt, %5, %7) : !s64i, !cir.bool loc(#loc277)
          cir.if %8 {
            %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc279)
            %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc172)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc171)
            %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc171)
            %13 = cir.binop(mul, %10, %12) nsw : !s64i loc(#loc172)
            cir.store %13, %9 : !s64i, !cir.ptr<!s64i> loc(#loc279)
            %14 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc173)
            cir.call @printLongLongLine(%14) : (!s64i) -> () loc(#loc174)
          } loc(#loc278)
        } loc(#loc276)
      } loc(#loc275)
    } loc(#loc273)
    cir.return loc(#loc144)
  } loc(#loc266)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc281)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc179)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc282)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc284)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc183)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc183)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc186)
        %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc186)
        cir.store %6, %0 : !s64i, !cir.ptr<!s64i> loc(#loc286)
      } loc(#loc285)
    } loc(#loc283)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc288)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc190)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc190)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc195)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc196)
          %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc196)
          %8 = cir.cmp(gt, %5, %7) : !s64i, !cir.bool loc(#loc291)
          cir.if %8 {
            %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc293)
            %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc200)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc199)
            %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc199)
            %13 = cir.binop(mul, %10, %12) nsw : !s64i loc(#loc200)
            cir.store %13, %9 : !s64i, !cir.ptr<!s64i> loc(#loc293)
            %14 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc201)
            cir.call @printLongLongLine(%14) : (!s64i) -> () loc(#loc202)
          } loc(#loc292)
        } loc(#loc290)
      } loc(#loc289)
    } loc(#loc287)
    cir.return loc(#loc176)
  } loc(#loc280)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":43:24)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":43:28)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":36:1)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":54:1)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":38:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":38:13)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":39:12)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":39:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":40:5)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":44:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":40:8)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":40:26)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":41:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":43:9)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":43:17)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":45:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":53:5)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":45:8)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":45:26)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":46:5)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":47:9)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":52:9)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":47:12)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":47:19)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":48:9)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":50:13)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":50:37)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":50:30)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":51:31)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":51:13)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":168:1)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":174:1)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":170:5)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":170:14)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":171:5)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":171:14)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":172:5)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":172:14)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":173:5)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":173:14)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":24:1)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":27:1)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":26:12)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":26:5)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":73:19)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":87:27)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":61:1)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":91:1)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":63:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":63:13)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":64:12)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":64:5)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":65:5)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":69:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":65:8)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":65:26)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":66:5)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":68:9)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":68:17)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":68:24)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":68:28)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":70:5)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":90:5)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":70:8)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":70:27)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":71:5)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":74:5)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":76:5)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":73:9)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":77:9)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":89:9)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":77:12)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":77:19)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":78:9)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":80:13)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":88:13)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":80:17)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":80:25)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":80:35)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":80:36)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":81:13)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":84:13)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":86:13)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":82:17)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":82:41)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":82:34)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":83:35)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":83:17)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":87:17)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":29:1)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":32:1)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":31:12)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":31:5)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":94:1)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":119:1)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":96:5)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":96:13)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":97:12)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":97:5)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":98:5)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":102:5)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":98:8)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":98:26)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":99:5)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":101:9)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":101:17)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":101:24)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":101:28)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":103:5)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":118:5)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":103:8)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":103:26)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":104:5)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":105:9)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":117:9)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":105:12)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":105:19)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":106:9)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":108:13)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":116:13)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":108:17)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":108:25)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":108:35)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":108:36)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":109:13)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":112:13)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":114:13)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":110:17)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":110:41)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":110:34)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":111:35)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":111:17)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":115:27)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":115:17)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":122:1)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":145:1)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":124:5)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":124:13)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":125:12)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":125:5)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":126:5)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":135:5)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":126:8)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":126:27)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":127:5)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":130:5)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":132:5)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":129:19)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":129:9)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":134:16)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":134:9)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":136:5)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":144:5)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":136:8)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":136:26)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":137:5)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":138:9)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":143:9)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":138:12)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":138:19)
#loc169 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":139:9)
#loc170 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":141:13)
#loc171 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":141:37)
#loc172 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":141:30)
#loc173 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":142:31)
#loc174 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":142:13)
#loc175 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":148:1)
#loc176 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":166:1)
#loc177 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":150:5)
#loc178 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":150:13)
#loc179 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":151:12)
#loc180 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":151:5)
#loc181 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":152:5)
#loc182 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":156:5)
#loc183 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":152:8)
#loc184 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":152:26)
#loc185 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":153:5)
#loc186 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":155:16)
#loc187 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":155:9)
#loc188 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":157:5)
#loc189 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":165:5)
#loc190 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":157:8)
#loc191 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":157:26)
#loc192 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":158:5)
#loc193 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":159:9)
#loc194 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":164:9)
#loc195 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":159:12)
#loc196 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":159:19)
#loc197 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":160:9)
#loc198 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":162:13)
#loc199 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":162:37)
#loc200 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":162:30)
#loc201 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":163:31)
#loc202 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_08.c":163:13)
#loc203 = loc(fused[#loc1, #loc2])
#loc204 = loc(fused[#loc3, #loc4])
#loc205 = loc(fused[#loc5, #loc6])
#loc206 = loc(fused[#loc7, #loc8])
#loc207 = loc(fused[#loc9, #loc10])
#loc208 = loc(fused[#loc11, #loc12])
#loc209 = loc(fused[#loc14, #loc13])
#loc210 = loc(fused[#loc15, #loc16])
#loc211 = loc(fused[#loc17, #loc18])
#loc212 = loc(fused[#loc19, #loc16])
#loc213 = loc(fused[#loc22, #loc23])
#loc214 = loc(fused[#loc24, #loc25])
#loc215 = loc(fused[#loc26, #loc23])
#loc216 = loc(fused[#loc27, #loc28])
#loc217 = loc(fused[#loc29, #loc30])
#loc218 = loc(fused[#loc31, #loc28])
#loc219 = loc(fused[#loc32, #loc33])
#loc220 = loc(fused[#loc37, #loc38])
#loc221 = loc(fused[#loc39, #loc40])
#loc222 = loc(fused[#loc41, #loc42])
#loc223 = loc(fused[#loc43, #loc44])
#loc224 = loc(fused[#loc45, #loc46])
#loc225 = loc(fused[#loc47, #loc48])
#loc226 = loc(fused[#loc50, #loc49])
#loc227 = loc(fused[#loc51, #loc52])
#loc228 = loc(fused[#loc55, #loc56])
#loc229 = loc(fused[#loc57, #loc58])
#loc230 = loc(fused[#loc60, #loc59])
#loc231 = loc(fused[#loc61, #loc62])
#loc232 = loc(fused[#loc63, #loc64])
#loc233 = loc(fused[#loc65, #loc62])
#loc234 = loc(fused[#loc68, #loc69])
#loc235 = loc(fused[#loc70, #loc71])
#loc236 = loc(fused[#loc72, #loc73])
#loc237 = loc(fused[#loc74, #loc75, #loc76, #loc71])
#loc238 = loc(fused[#loc78, #loc79])
#loc239 = loc(fused[#loc80, #loc81])
#loc240 = loc(fused[#loc82, #loc79])
#loc241 = loc(fused[#loc83, #loc84])
#loc242 = loc(fused[#loc86, #loc87])
#loc243 = loc(fused[#loc85, #loc88])
#loc244 = loc(fused[#loc89, #loc90, #loc91, #loc84])
#loc245 = loc(fused[#loc92, #loc93])
#loc246 = loc(fused[#loc98, #loc99])
#loc247 = loc(fused[#loc101, #loc100])
#loc248 = loc(fused[#loc102, #loc103])
#loc249 = loc(fused[#loc104, #loc105])
#loc250 = loc(fused[#loc107, #loc106])
#loc251 = loc(fused[#loc108, #loc109])
#loc252 = loc(fused[#loc110, #loc111])
#loc253 = loc(fused[#loc112, #loc109])
#loc254 = loc(fused[#loc115, #loc116])
#loc255 = loc(fused[#loc117, #loc118])
#loc256 = loc(fused[#loc119, #loc120])
#loc257 = loc(fused[#loc121, #loc118])
#loc258 = loc(fused[#loc122, #loc123])
#loc259 = loc(fused[#loc124, #loc125])
#loc260 = loc(fused[#loc126, #loc123])
#loc261 = loc(fused[#loc127, #loc128])
#loc262 = loc(fused[#loc130, #loc131])
#loc263 = loc(fused[#loc129, #loc132])
#loc264 = loc(fused[#loc133, #loc134, #loc135, #loc128])
#loc265 = loc(fused[#loc136, #loc137])
#loc266 = loc(fused[#loc143, #loc144])
#loc267 = loc(fused[#loc145, #loc146])
#loc268 = loc(fused[#loc148, #loc147])
#loc269 = loc(fused[#loc149, #loc150])
#loc270 = loc(fused[#loc151, #loc152])
#loc271 = loc(fused[#loc153, #loc154, #loc155, #loc150])
#loc272 = loc(fused[#loc159, #loc158])
#loc273 = loc(fused[#loc160, #loc161])
#loc274 = loc(fused[#loc162, #loc163])
#loc275 = loc(fused[#loc164, #loc161])
#loc276 = loc(fused[#loc165, #loc166])
#loc277 = loc(fused[#loc167, #loc168])
#loc278 = loc(fused[#loc169, #loc166])
#loc279 = loc(fused[#loc170, #loc171])
#loc280 = loc(fused[#loc175, #loc176])
#loc281 = loc(fused[#loc177, #loc178])
#loc282 = loc(fused[#loc180, #loc179])
#loc283 = loc(fused[#loc181, #loc182])
#loc284 = loc(fused[#loc183, #loc184])
#loc285 = loc(fused[#loc185, #loc182])
#loc286 = loc(fused[#loc187, #loc186])
#loc287 = loc(fused[#loc188, #loc189])
#loc288 = loc(fused[#loc190, #loc191])
#loc289 = loc(fused[#loc192, #loc189])
#loc290 = loc(fused[#loc193, #loc194])
#loc291 = loc(fused[#loc195, #loc196])
#loc292 = loc(fused[#loc197, #loc194])
#loc293 = loc(fused[#loc198, #loc199])
