!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @_Znam(!u64i) -> !cir.ptr<!void> loc(#loc108)
  cir.func private @printIntLine(!s32i) loc(#loc109)
  cir.func @_ZN56CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_333badEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc111)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc112)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc10)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc12)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc14)
    %5 = cir.const #cir.int<2> : !s32i loc(#loc15)
    %6 = cir.binop(div, %4, %5) : !s32i loc(#loc114)
    %7 = cir.const #cir.int<2> : !s32i loc(#loc16)
    %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc114)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc115)
    cir.scope {
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc117)
      %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc21)
      %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc21)
      cir.store %11, %9 : !s32i, !cir.ptr<!s32i> loc(#loc117)
      cir.scope {
        %12 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc119)
        %13 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc120)
        %14 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc121)
        %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc29)
        %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc29)
        %17 = cir.const #cir.int<4> : !u64i loc(#loc122)
        %18 = cir.binop(mul, %16, %17) : !u64i loc(#loc123)
        cir.store %18, %12 : !u64i, !cir.ptr<!u64i> loc(#loc124)
        %19 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc33)
        %20 = cir.call @_Znam(%19) : (!u64i) -> !cir.ptr<!void> loc(#loc34)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc125)
        %22 = cir.cast(bitcast, %21 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc125)
        cir.store %22, %14 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc126)
        cir.scope {
          %28 = cir.const #cir.int<0> : !s32i loc(#loc40)
          %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc40)
          cir.store %29, %13 : !u64i, !cir.ptr<!u64i> loc(#loc128)
          cir.for : cond {
            %30 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc42)
            %31 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc43)
            %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc43)
            %33 = cir.cmp(lt, %30, %32) : !u64i, !cir.bool loc(#loc129)
            cir.condition(%33) loc(#loc129)
          } body {
            cir.scope {
              %30 = cir.const #cir.int<0> : !s32i loc(#loc45)
              %31 = cir.load %14 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc46)
              %32 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc47)
              %33 = cir.ptr_stride(%31 : !cir.ptr<!s32i>, %32 : !u64i), !cir.ptr<!s32i> loc(#loc48)
              cir.store %30, %33 : !s32i, !cir.ptr<!s32i> loc(#loc131)
            } loc(#loc130)
            cir.yield loc(#loc39)
          } step {
            %30 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc49)
            %31 = cir.unary(inc, %30) : !u64i, !u64i loc(#loc50)
            cir.store %31, %13 : !u64i, !cir.ptr<!u64i> loc(#loc132)
            cir.yield loc(#loc127)
          } loc(#loc127)
        } loc(#loc127)
        %23 = cir.load %14 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc51)
        %24 = cir.const #cir.int<0> : !s32i loc(#loc52)
        %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc53)
        %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc51)
        cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc54)
        %27 = cir.load %14 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc55)
        cir.delete.array %27 : <!s32i> loc(#loc55)
      } loc(#loc118)
    } loc(#loc116)
    cir.return loc(#loc6)
  } loc(#loc110)
  cir.func internal private @_ZN56CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc134)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc135)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc61)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc63)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc136)
    %4 = cir.const #cir.int<20> : !s32i loc(#loc65)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc137)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc139)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc70)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc70)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc139)
      cir.scope {
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc141)
        %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc142)
        %10 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc143)
        %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc78)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc78)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc144)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc145)
        cir.store %14, %8 : !u64i, !cir.ptr<!u64i> loc(#loc146)
        %15 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc82)
        %16 = cir.call @_Znam(%15) : (!u64i) -> !cir.ptr<!void> loc(#loc83)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc147)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc147)
        cir.store %18, %10 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc148)
        cir.scope {
          %24 = cir.const #cir.int<0> : !s32i loc(#loc89)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc89)
          cir.store %25, %9 : !u64i, !cir.ptr<!u64i> loc(#loc150)
          cir.for : cond {
            %26 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc91)
            %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc92)
            %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc92)
            %29 = cir.cmp(lt, %26, %28) : !u64i, !cir.bool loc(#loc151)
            cir.condition(%29) loc(#loc151)
          } body {
            cir.scope {
              %26 = cir.const #cir.int<0> : !s32i loc(#loc94)
              %27 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc95)
              %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc96)
              %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !u64i), !cir.ptr<!s32i> loc(#loc97)
              cir.store %26, %29 : !s32i, !cir.ptr<!s32i> loc(#loc153)
            } loc(#loc152)
            cir.yield loc(#loc88)
          } step {
            %26 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc98)
            %27 = cir.unary(inc, %26) : !u64i, !u64i loc(#loc99)
            cir.store %27, %9 : !u64i, !cir.ptr<!u64i> loc(#loc154)
            cir.yield loc(#loc149)
          } loc(#loc149)
        } loc(#loc149)
        %19 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc100)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc101)
        %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc102)
        %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc100)
        cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc103)
        %23 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc104)
        cir.delete.array %23 : <!s32i> loc(#loc104)
      } loc(#loc140)
    } loc(#loc138)
    cir.return loc(#loc57)
  } loc(#loc133)
  cir.func @_ZN56CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_334goodEv() extra(#fn_attr) {
    cir.call @_ZN56CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33L7goodG2BEv() : () -> () loc(#loc107)
    cir.return loc(#loc106)
  } loc(#loc155)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":0:0)
#loc1 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":128:20)
#loc2 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":129:41)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":24:1)
#loc6 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":50:1)
#loc7 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":26:5)
#loc8 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":26:9)
#loc9 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":27:5)
#loc10 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":27:20)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":29:13)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":29:12)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":29:5)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":31:12)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":31:22)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":31:26)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":31:5)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":34:5)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":49:5)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":35:9)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":35:20)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":36:9)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":48:9)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":37:13)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":37:20)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":37:30)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":38:13)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":38:18)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":40:25)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":40:32)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":40:42)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":40:13)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":41:41)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":24:6)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":41:32)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":41:50)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":41:13)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":42:13)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":45:13)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":42:22)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":42:18)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":42:25)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":42:37)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":43:13)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":44:33)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":44:17)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":44:28)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":44:29)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":42:44)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":42:43)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":46:26)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":46:37)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":46:38)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":46:13)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":47:23)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":57:1)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":81:1)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":59:5)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":59:9)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":60:5)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":60:20)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":62:13)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":62:12)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":62:5)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":64:12)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":64:5)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":65:5)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":80:5)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":66:9)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":66:20)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":67:9)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":79:9)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":68:13)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":68:20)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":68:30)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":69:13)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":69:18)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":71:25)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":71:32)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":71:42)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":71:13)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":72:41)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":57:13)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":72:32)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":72:50)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":72:13)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":73:13)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":76:13)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":73:22)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":73:18)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":73:25)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":73:37)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":74:13)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":75:33)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":75:17)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":75:28)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":75:29)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":73:44)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":73:43)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":77:26)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":77:37)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":77:38)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":77:13)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":78:23)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":83:1)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":86:1)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_33.cpp":85:5)
#loc108 = loc(fused[#loc1, #loc2])
#loc109 = loc(fused[#loc3, #loc4])
#loc110 = loc(fused[#loc5, #loc6])
#loc111 = loc(fused[#loc7, #loc8])
#loc112 = loc(fused[#loc9, #loc10])
#loc113 = loc(fused[#loc13, #loc11])
#loc114 = loc(fused[#loc14, #loc15])
#loc115 = loc(fused[#loc17, #loc16])
#loc116 = loc(fused[#loc18, #loc19])
#loc117 = loc(fused[#loc20, #loc21])
#loc118 = loc(fused[#loc22, #loc23])
#loc119 = loc(fused[#loc24, #loc25])
#loc120 = loc(fused[#loc24, #loc26])
#loc121 = loc(fused[#loc27, #loc28])
#loc122 = loc(fused[#loc30, #loc31])
#loc123 = loc(fused[#loc29, #loc31])
#loc124 = loc(fused[#loc32, #loc31])
#loc125 = loc(fused[#loc35, #loc36])
#loc126 = loc(fused[#loc37, #loc36])
#loc127 = loc(fused[#loc38, #loc39])
#loc128 = loc(fused[#loc41, #loc40])
#loc129 = loc(fused[#loc42, #loc43])
#loc130 = loc(fused[#loc44, #loc39])
#loc131 = loc(fused[#loc46, #loc45])
#loc132 = loc(fused[#loc50, #loc49])
#loc133 = loc(fused[#loc56, #loc57])
#loc134 = loc(fused[#loc58, #loc59])
#loc135 = loc(fused[#loc60, #loc61])
#loc136 = loc(fused[#loc64, #loc62])
#loc137 = loc(fused[#loc66, #loc65])
#loc138 = loc(fused[#loc67, #loc68])
#loc139 = loc(fused[#loc69, #loc70])
#loc140 = loc(fused[#loc71, #loc72])
#loc141 = loc(fused[#loc73, #loc74])
#loc142 = loc(fused[#loc73, #loc75])
#loc143 = loc(fused[#loc76, #loc77])
#loc144 = loc(fused[#loc79, #loc80])
#loc145 = loc(fused[#loc78, #loc80])
#loc146 = loc(fused[#loc81, #loc80])
#loc147 = loc(fused[#loc84, #loc85])
#loc148 = loc(fused[#loc86, #loc85])
#loc149 = loc(fused[#loc87, #loc88])
#loc150 = loc(fused[#loc90, #loc89])
#loc151 = loc(fused[#loc91, #loc92])
#loc152 = loc(fused[#loc93, #loc88])
#loc153 = loc(fused[#loc95, #loc94])
#loc154 = loc(fused[#loc99, #loc98])
#loc155 = loc(fused[#loc105, #loc106])
