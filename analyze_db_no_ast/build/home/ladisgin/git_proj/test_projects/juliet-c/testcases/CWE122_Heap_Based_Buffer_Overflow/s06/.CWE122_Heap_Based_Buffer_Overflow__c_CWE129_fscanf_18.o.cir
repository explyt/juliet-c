!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc256)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc257)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc258)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc259)
  cir.func private  @printIntLine(!s32i) loc(#loc260)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc261)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc14)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc262)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc264)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc265)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc266)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc26)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc267)
    cir.goto "source" loc(#loc268)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc30)
    %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc31)
    %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc257)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc32)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc31)
    cir.goto "sink" loc(#loc269)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc35)
    %11 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc36)
    %12 = cir.const #cir.int<10> : !s32i loc(#loc37)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc37)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc270)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc271)
    %16 = cir.call @malloc(%15) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc36)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc272)
    cir.store %17, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc266)
    cir.scope {
      %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc42)
      %22 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc43)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc43)
      %24 = cir.cmp(eq, %21, %23) : !cir.ptr<!s32i>, !s32i loc(#loc274)
      %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc44)
      cir.if %25 {
        %26 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc46)
        %27 = cir.const #cir.int<1> : !s32i loc(#loc47)
        %28 = cir.unary(minus, %27) : !s32i, !s32i loc(#loc48)
        cir.call @exit(%28) : (!s32i) -> () extra(#fn_attr) loc(#loc46)
      } loc(#loc275)
    } loc(#loc273)
    cir.scope {
      %21 = cir.const #cir.int<0> : !s32i loc(#loc51)
      cir.store %21, %1 : !s32i, !cir.ptr<!s32i> loc(#loc277)
      cir.for : cond {
        %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc53)
        %23 = cir.const #cir.int<10> : !s32i loc(#loc54)
        %24 = cir.cmp(lt, %22, %23) : !s32i, !s32i loc(#loc278)
        %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc55)
        cir.condition(%25) loc(#loc55)
      } body {
        cir.scope {
          %22 = cir.const #cir.int<0> : !s32i loc(#loc57)
          %23 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc58)
          %24 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc59)
          %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc60)
          cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc280)
        } loc(#loc279)
        cir.yield loc(#loc50)
      } step {
        %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc61)
        %23 = cir.unary(inc, %22) : !s32i, !s32i loc(#loc62)
        cir.store %23, %1 : !s32i, !cir.ptr<!s32i> loc(#loc281)
        cir.yield loc(#loc276)
      } loc(#loc276)
    } loc(#loc276)
    cir.scope {
      %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
      %22 = cir.const #cir.int<0> : !s32i loc(#loc66)
      %23 = cir.cmp(ge, %21, %22) : !s32i, !s32i loc(#loc283)
      %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc67)
      cir.if %24 {
        %25 = cir.const #cir.int<1> : !s32i loc(#loc71)
        %26 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc72)
        %27 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
        %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc74)
        cir.store %25, %28 : !s32i, !cir.ptr<!s32i> loc(#loc285)
        cir.scope {
          %29 = cir.const #cir.int<0> : !s32i loc(#loc77)
          cir.store %29, %1 : !s32i, !cir.ptr<!s32i> loc(#loc287)
          cir.for : cond {
            %30 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc79)
            %31 = cir.const #cir.int<10> : !s32i loc(#loc80)
            %32 = cir.cmp(lt, %30, %31) : !s32i, !s32i loc(#loc288)
            %33 = cir.cast(int_to_bool, %32 : !s32i), !cir.bool loc(#loc81)
            cir.condition(%33) loc(#loc81)
          } body {
            cir.scope {
              %30 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc83)
              %31 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc84)
              %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !s32i), !cir.ptr<!s32i> loc(#loc85)
              %33 = cir.load %32 : !cir.ptr<!s32i>, !s32i loc(#loc83)
              cir.call @printIntLine(%33) : (!s32i) -> () loc(#loc86)
            } loc(#loc289)
            cir.yield loc(#loc76)
          } step {
            %30 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc87)
            %31 = cir.unary(inc, %30) : !s32i, !s32i loc(#loc88)
            cir.store %31, %1 : !s32i, !cir.ptr<!s32i> loc(#loc290)
            cir.yield loc(#loc286)
          } loc(#loc286)
        } loc(#loc286)
      } else {
        %25 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc14)
        %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc14)
        cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc89)
      } loc(#loc284)
    } loc(#loc282)
    %18 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc90)
    %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc91)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc91)
    cir.call @free(%20) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc90)
    cir.return loc(#loc18)
  } loc(#loc263)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc292)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc94)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc293)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc96)
    cir.return loc(#loc93)
  } loc(#loc291)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc98)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc295)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc296)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc297)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc107)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc108)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc298)
    cir.goto "source" loc(#loc299)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc112)
    %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc113)
    %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc257)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc114)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc115)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc115)
    %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc113)
    cir.goto "sink" loc(#loc300)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc118)
    %11 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc119)
    %12 = cir.const #cir.int<10> : !s32i loc(#loc120)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc120)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc301)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc302)
    %16 = cir.call @malloc(%15) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc119)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc303)
    cir.store %17, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc297)
    cir.scope {
      %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc125)
      %22 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc126)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc126)
      %24 = cir.cmp(eq, %21, %23) : !cir.ptr<!s32i>, !s32i loc(#loc305)
      %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc127)
      cir.if %25 {
        %26 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc129)
        %27 = cir.const #cir.int<1> : !s32i loc(#loc130)
        %28 = cir.unary(minus, %27) : !s32i, !s32i loc(#loc131)
        cir.call @exit(%28) : (!s32i) -> () extra(#fn_attr) loc(#loc129)
      } loc(#loc306)
    } loc(#loc304)
    cir.scope {
      %21 = cir.const #cir.int<0> : !s32i loc(#loc134)
      cir.store %21, %1 : !s32i, !cir.ptr<!s32i> loc(#loc308)
      cir.for : cond {
        %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc136)
        %23 = cir.const #cir.int<10> : !s32i loc(#loc137)
        %24 = cir.cmp(lt, %22, %23) : !s32i, !s32i loc(#loc309)
        %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc138)
        cir.condition(%25) loc(#loc138)
      } body {
        cir.scope {
          %22 = cir.const #cir.int<0> : !s32i loc(#loc140)
          %23 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc141)
          %24 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc142)
          %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc143)
          cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc311)
        } loc(#loc310)
        cir.yield loc(#loc133)
      } step {
        %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc144)
        %23 = cir.unary(inc, %22) : !s32i, !s32i loc(#loc145)
        cir.store %23, %1 : !s32i, !cir.ptr<!s32i> loc(#loc312)
        cir.yield loc(#loc307)
      } loc(#loc307)
    } loc(#loc307)
    cir.scope {
      %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc148)
      %22 = cir.const #cir.int<0> : !s32i loc(#loc149)
      %23 = cir.cmp(ge, %21, %22) : !s32i, !s32i loc(#loc314)
      %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc150)
      %25 = cir.ternary(%24, true {
        %26 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc152)
        %27 = cir.const #cir.int<10> : !s32i loc(#loc153)
        %28 = cir.cmp(lt, %26, %27) : !s32i, !s32i loc(#loc315)
        %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc155)
        %30 = cir.ternary(%29, true {
          %31 = cir.const #true loc(#loc151)
          cir.yield %31 : !cir.bool loc(#loc151)
        }, false {
          %31 = cir.const #false loc(#loc151)
          cir.yield %31 : !cir.bool loc(#loc151)
        }) : (!cir.bool) -> !cir.bool loc(#loc151)
        cir.yield %30 : !cir.bool loc(#loc151)
      }, false {
        %26 = cir.const #false loc(#loc151)
        cir.yield %26 : !cir.bool loc(#loc151)
      }) : (!cir.bool) -> !cir.bool loc(#loc151)
      cir.if %25 {
        %26 = cir.const #cir.int<1> : !s32i loc(#loc159)
        %27 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc160)
        %28 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc161)
        %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc162)
        cir.store %26, %29 : !s32i, !cir.ptr<!s32i> loc(#loc317)
        cir.scope {
          %30 = cir.const #cir.int<0> : !s32i loc(#loc165)
          cir.store %30, %1 : !s32i, !cir.ptr<!s32i> loc(#loc319)
          cir.for : cond {
            %31 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc167)
            %32 = cir.const #cir.int<10> : !s32i loc(#loc168)
            %33 = cir.cmp(lt, %31, %32) : !s32i, !s32i loc(#loc320)
            %34 = cir.cast(int_to_bool, %33 : !s32i), !cir.bool loc(#loc169)
            cir.condition(%34) loc(#loc169)
          } body {
            cir.scope {
              %31 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc171)
              %32 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc172)
              %33 = cir.ptr_stride(%31 : !cir.ptr<!s32i>, %32 : !s32i), !cir.ptr<!s32i> loc(#loc173)
              %34 = cir.load %33 : !cir.ptr<!s32i>, !s32i loc(#loc171)
              cir.call @printIntLine(%34) : (!s32i) -> () loc(#loc174)
            } loc(#loc321)
            cir.yield loc(#loc164)
          } step {
            %31 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc175)
            %32 = cir.unary(inc, %31) : !s32i, !s32i loc(#loc176)
            cir.store %32, %1 : !s32i, !cir.ptr<!s32i> loc(#loc322)
            cir.yield loc(#loc318)
          } loc(#loc318)
        } loc(#loc318)
      } else {
        %26 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc98)
        %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc98)
        cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc177)
      } loc(#loc316)
    } loc(#loc313)
    %18 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc178)
    %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc179)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc179)
    cir.call @free(%20) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc178)
    cir.return loc(#loc100)
  } loc(#loc294)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc324)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc325)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc326)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc188)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc189)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc327)
    cir.goto "source" loc(#loc328)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc193)
    %5 = cir.const #cir.int<7> : !s32i loc(#loc194)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc329)
    cir.goto "sink" loc(#loc330)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc198)
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc199)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc200)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc200)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc331)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc332)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc199)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc333)
    cir.store %12, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc326)
    cir.scope {
      %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc205)
      %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc206)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc206)
      %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !s32i loc(#loc335)
      %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc207)
      cir.if %20 {
        %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc209)
        %22 = cir.const #cir.int<1> : !s32i loc(#loc210)
        %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc211)
        cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc209)
      } loc(#loc336)
    } loc(#loc334)
    cir.scope {
      %16 = cir.const #cir.int<0> : !s32i loc(#loc214)
      cir.store %16, %1 : !s32i, !cir.ptr<!s32i> loc(#loc338)
      cir.for : cond {
        %17 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc216)
        %18 = cir.const #cir.int<10> : !s32i loc(#loc217)
        %19 = cir.cmp(lt, %17, %18) : !s32i, !s32i loc(#loc339)
        %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc218)
        cir.condition(%20) loc(#loc218)
      } body {
        cir.scope {
          %17 = cir.const #cir.int<0> : !s32i loc(#loc220)
          %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc221)
          %19 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc222)
          %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc223)
          cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc341)
        } loc(#loc340)
        cir.yield loc(#loc213)
      } step {
        %17 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc224)
        %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc225)
        cir.store %18, %1 : !s32i, !cir.ptr<!s32i> loc(#loc342)
        cir.yield loc(#loc337)
      } loc(#loc337)
    } loc(#loc337)
    cir.scope {
      %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc228)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc229)
      %18 = cir.cmp(ge, %16, %17) : !s32i, !s32i loc(#loc344)
      %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc230)
      cir.if %19 {
        %20 = cir.const #cir.int<1> : !s32i loc(#loc234)
        %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc235)
        %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc236)
        %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc237)
        cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc346)
        cir.scope {
          %24 = cir.const #cir.int<0> : !s32i loc(#loc240)
          cir.store %24, %1 : !s32i, !cir.ptr<!s32i> loc(#loc348)
          cir.for : cond {
            %25 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc242)
            %26 = cir.const #cir.int<10> : !s32i loc(#loc243)
            %27 = cir.cmp(lt, %25, %26) : !s32i, !s32i loc(#loc349)
            %28 = cir.cast(int_to_bool, %27 : !s32i), !cir.bool loc(#loc244)
            cir.condition(%28) loc(#loc244)
          } body {
            cir.scope {
              %25 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc246)
              %26 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc247)
              %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc248)
              %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc246)
              cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc249)
            } loc(#loc350)
            cir.yield loc(#loc239)
          } step {
            %25 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc250)
            %26 = cir.unary(inc, %25) : !s32i, !s32i loc(#loc251)
            cir.store %26, %1 : !s32i, !cir.ptr<!s32i> loc(#loc351)
            cir.yield loc(#loc347)
          } loc(#loc347)
        } loc(#loc347)
      } else {
        %20 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc252)
        %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc252)
        cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc253)
      } loc(#loc345)
    } loc(#loc343)
    %13 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc254)
    %14 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc255)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc255)
    cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc254)
    cir.return loc(#loc181)
  } loc(#loc323)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":30:19)
#loc6 = loc("/usr/include/stdlib.h":672:1)
#loc7 = loc("/usr/include/stdlib.h":672:45)
#loc8 = loc("/usr/include/stdlib.h":756:1)
#loc9 = loc("/usr/include/stdlib.h":756:70)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":55:23)
#loc15 = loc("/usr/include/stdlib.h":687:1)
#loc16 = loc("/usr/include/stdlib.h":687:32)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":22:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":59:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":24:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":24:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":34:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":34:13)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":35:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":35:54)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":26:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":26:12)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":26:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":27:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":27:10)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":28:1)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":30:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":30:12)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":31:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":31:10)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":32:1)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":35:31)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":35:38)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":35:43)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":35:53)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":36:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":36:39)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":36:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":36:23)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":36:20)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":36:29)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":36:30)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":36:36)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":36:35)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":38:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":41:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":38:18)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":38:14)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":38:21)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":38:25)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":38:23)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":39:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":40:25)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":40:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":40:20)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":40:21)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":38:30)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":38:29)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":44:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":56:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":44:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":44:21)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":44:18)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":45:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":52:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":54:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":46:28)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":46:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":46:20)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":46:24)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":48:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":51:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":48:21)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":48:17)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":48:24)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":48:28)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":48:26)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":49:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":50:30)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":50:37)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":50:38)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":50:17)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":48:33)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":48:32)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":55:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":57:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":57:14)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":145:1)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":149:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":147:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":147:13)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":148:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":148:13)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":98:23)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":66:1)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":102:1)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":68:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":68:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":78:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":78:13)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":79:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":79:54)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":70:13)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":70:12)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":70:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":71:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":71:10)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":72:1)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":74:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":74:12)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":74:19)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":75:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":75:10)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":76:1)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":79:31)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":79:38)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":79:43)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":79:53)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":80:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":80:39)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":80:13)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":80:23)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":80:20)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":80:29)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":80:30)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":80:36)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":80:35)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":82:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":85:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":82:18)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":82:14)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":82:21)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":82:25)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":82:23)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":83:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":84:25)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":84:13)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":84:20)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":84:21)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":82:30)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":82:29)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":87:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":99:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":87:13)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":87:21)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":87:18)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":87:23)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":87:26)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":87:34)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":87:36)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":87:31)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":88:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":95:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":97:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":89:28)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":89:13)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":89:20)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":89:24)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":91:13)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":94:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":91:21)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":91:17)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":91:24)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":91:28)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":91:26)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":92:13)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":93:30)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":93:37)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":93:38)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":93:17)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":91:33)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":91:32)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":98:13)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":100:9)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":100:14)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":105:1)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":143:1)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":107:5)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":107:9)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":118:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":118:13)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":119:9)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":119:54)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":109:13)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":109:12)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":109:5)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":110:5)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":110:10)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":111:1)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":114:12)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":114:5)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":115:5)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":115:10)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":116:1)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":119:31)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":119:38)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":119:43)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":119:53)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":120:9)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":120:39)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":120:13)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":120:23)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":120:20)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":120:29)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":120:30)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":120:36)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":120:35)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":122:9)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":125:9)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":122:18)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":122:14)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":122:21)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":122:25)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":122:23)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":123:9)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":124:25)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":124:13)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":124:20)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":124:21)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":122:30)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":122:29)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":128:9)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":140:9)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":128:13)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":128:21)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":128:18)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":129:9)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":136:9)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":138:9)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":130:28)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":130:13)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":130:20)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":130:24)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":132:13)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":135:13)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":132:21)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":132:17)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":132:24)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":132:28)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":132:26)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":133:13)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":134:30)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":134:37)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":134:38)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":134:17)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":132:33)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":132:32)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":139:23)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":139:13)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":141:9)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c":141:14)
#loc256 = loc(fused[#loc1, #loc2])
#loc257 = loc(fused[#loc3, #loc4])
#loc258 = loc(fused[#loc6, #loc7])
#loc259 = loc(fused[#loc8, #loc9])
#loc260 = loc(fused[#loc10, #loc11])
#loc261 = loc(fused[#loc12, #loc13])
#loc262 = loc(fused[#loc15, #loc16])
#loc263 = loc(fused[#loc17, #loc18])
#loc264 = loc(fused[#loc19, #loc20])
#loc265 = loc(fused[#loc21, #loc22])
#loc266 = loc(fused[#loc23, #loc24])
#loc267 = loc(fused[#loc27, #loc25])
#loc268 = loc(fused[#loc28, #loc29])
#loc269 = loc(fused[#loc33, #loc34])
#loc270 = loc(fused[#loc38, #loc39])
#loc271 = loc(fused[#loc37, #loc39])
#loc272 = loc(fused[#loc36, #loc24])
#loc273 = loc(fused[#loc40, #loc41])
#loc274 = loc(fused[#loc42, #loc43])
#loc275 = loc(fused[#loc45, #loc41])
#loc276 = loc(fused[#loc49, #loc50])
#loc277 = loc(fused[#loc52, #loc51])
#loc278 = loc(fused[#loc53, #loc54])
#loc279 = loc(fused[#loc56, #loc50])
#loc280 = loc(fused[#loc58, #loc57])
#loc281 = loc(fused[#loc62, #loc61])
#loc282 = loc(fused[#loc63, #loc64])
#loc283 = loc(fused[#loc65, #loc66])
#loc284 = loc(fused[#loc68, #loc69, #loc70, #loc64])
#loc285 = loc(fused[#loc72, #loc71])
#loc286 = loc(fused[#loc75, #loc76])
#loc287 = loc(fused[#loc78, #loc77])
#loc288 = loc(fused[#loc79, #loc80])
#loc289 = loc(fused[#loc82, #loc76])
#loc290 = loc(fused[#loc88, #loc87])
#loc291 = loc(fused[#loc92, #loc93])
#loc292 = loc(fused[#loc94, #loc95])
#loc293 = loc(fused[#loc96, #loc97])
#loc294 = loc(fused[#loc99, #loc100])
#loc295 = loc(fused[#loc101, #loc102])
#loc296 = loc(fused[#loc103, #loc104])
#loc297 = loc(fused[#loc105, #loc106])
#loc298 = loc(fused[#loc109, #loc107])
#loc299 = loc(fused[#loc110, #loc111])
#loc300 = loc(fused[#loc116, #loc117])
#loc301 = loc(fused[#loc121, #loc122])
#loc302 = loc(fused[#loc120, #loc122])
#loc303 = loc(fused[#loc119, #loc106])
#loc304 = loc(fused[#loc123, #loc124])
#loc305 = loc(fused[#loc125, #loc126])
#loc306 = loc(fused[#loc128, #loc124])
#loc307 = loc(fused[#loc132, #loc133])
#loc308 = loc(fused[#loc135, #loc134])
#loc309 = loc(fused[#loc136, #loc137])
#loc310 = loc(fused[#loc139, #loc133])
#loc311 = loc(fused[#loc141, #loc140])
#loc312 = loc(fused[#loc145, #loc144])
#loc313 = loc(fused[#loc146, #loc147])
#loc314 = loc(fused[#loc148, #loc149])
#loc315 = loc(fused[#loc152, #loc154])
#loc316 = loc(fused[#loc156, #loc157, #loc158, #loc147])
#loc317 = loc(fused[#loc160, #loc159])
#loc318 = loc(fused[#loc163, #loc164])
#loc319 = loc(fused[#loc166, #loc165])
#loc320 = loc(fused[#loc167, #loc168])
#loc321 = loc(fused[#loc170, #loc164])
#loc322 = loc(fused[#loc176, #loc175])
#loc323 = loc(fused[#loc180, #loc181])
#loc324 = loc(fused[#loc182, #loc183])
#loc325 = loc(fused[#loc184, #loc185])
#loc326 = loc(fused[#loc186, #loc187])
#loc327 = loc(fused[#loc190, #loc188])
#loc328 = loc(fused[#loc191, #loc192])
#loc329 = loc(fused[#loc195, #loc194])
#loc330 = loc(fused[#loc196, #loc197])
#loc331 = loc(fused[#loc201, #loc202])
#loc332 = loc(fused[#loc200, #loc202])
#loc333 = loc(fused[#loc199, #loc187])
#loc334 = loc(fused[#loc203, #loc204])
#loc335 = loc(fused[#loc205, #loc206])
#loc336 = loc(fused[#loc208, #loc204])
#loc337 = loc(fused[#loc212, #loc213])
#loc338 = loc(fused[#loc215, #loc214])
#loc339 = loc(fused[#loc216, #loc217])
#loc340 = loc(fused[#loc219, #loc213])
#loc341 = loc(fused[#loc221, #loc220])
#loc342 = loc(fused[#loc225, #loc224])
#loc343 = loc(fused[#loc226, #loc227])
#loc344 = loc(fused[#loc228, #loc229])
#loc345 = loc(fused[#loc231, #loc232, #loc233, #loc227])
#loc346 = loc(fused[#loc235, #loc234])
#loc347 = loc(fused[#loc238, #loc239])
#loc348 = loc(fused[#loc241, #loc240])
#loc349 = loc(fused[#loc242, #loc243])
#loc350 = loc(fused[#loc245, #loc239])
#loc351 = loc(fused[#loc251, #loc250])
