!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":128:10)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":128:14)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":128:20)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":128:32)
#loc237 = loc(fused[#loc81, #loc82])
#loc238 = loc(fused[#loc83, #loc84])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc207)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc208)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc209)
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc210)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc211)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc212)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc214)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc18)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc215)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc207)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc22)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc23)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc217)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc25)
        %7 = cir.const #cir.int<50> : !s32i loc(#loc26)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc26)
        %9 = cir.const #cir.int<1> : !u64i loc(#loc219)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc220)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc25)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc221)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc222)
        cir.scope {
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
          %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc34)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc34)
          %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc224)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc36)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc37)
            %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc38)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc36)
          } loc(#loc225)
        } loc(#loc223)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc39)
        %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc39)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc41)
        %17 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc42)
        cir.store %14, %17 : !s8i, !cir.ptr<!s8i> loc(#loc226)
      } loc(#loc218)
    } loc(#loc216)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc228)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc47)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc47)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc48)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc49)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc50)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc49)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc49)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc229)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc53)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc53)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc54)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc55)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc54)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc56)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc56)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc230)
      %17 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc57)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc58)
      %19 = cir.const #cir.int<100> : !s32i loc(#loc59)
      %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc59)
      %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc9)
      %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc9)
      %23 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc60)
      %24 = cir.call @snprintf(%18, %20, %22, %23) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc57)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc62)
      %26 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc63)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc64)
      cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc63)
    } loc(#loc227)
    cir.return loc(#loc15)
  } loc(#loc213)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc232)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc67)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc233)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc69)
    cir.return loc(#loc66)
  } loc(#loc231)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc234)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc235)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc76)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc78)
  cir.func @main(%arg0: !s32i loc(fused[#loc81, #loc82]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc83, #loc84])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc237)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc238)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc80)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc85)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc86)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc87)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc87)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc88)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc75)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07_good : !cir.ptr<!cir.func<!void ()>> loc(#loc239)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07_good() : () -> () loc(#loc90)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc76)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc77)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc240)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07_bad() : () -> () loc(#loc94)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc78)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc97)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc241)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc241)
    cir.return %17 : !s32i loc(#loc241)
  } loc(#loc236)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc99)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc243)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc104)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc244)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc207)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc108)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc109)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc246)
      cir.if %5 {
        %6 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc99)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc99)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc113)
      } else {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc114)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc115)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc115)
        %9 = cir.const #cir.int<1> : !u64i loc(#loc248)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc249)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc114)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc250)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc251)
        cir.scope {
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc122)
          %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc123)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc123)
          %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc253)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc125)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc126)
            %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc127)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc125)
          } loc(#loc254)
        } loc(#loc252)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc128)
        %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc128)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc130)
        %17 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc131)
        cir.store %14, %17 : !s8i, !cir.ptr<!s8i> loc(#loc255)
      } loc(#loc247)
    } loc(#loc245)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc257)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc136)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc136)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc137)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc138)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc139)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc138)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc138)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc258)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc142)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc142)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc143)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc144)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc143)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc145)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc145)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc259)
      %17 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc146)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc147)
      %19 = cir.const #cir.int<100> : !s32i loc(#loc148)
      %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc148)
      %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc149)
      %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc149)
      %23 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc150)
      %24 = cir.call @snprintf(%18, %20, %22, %23) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc146)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc151)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc152)
      %26 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc153)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc154)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc154)
      cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc153)
    } loc(#loc256)
    cir.return loc(#loc101)
  } loc(#loc242)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc261)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc159)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc262)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc207)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc163)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc164)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc264)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc166)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc167)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc167)
        %9 = cir.const #cir.int<1> : !u64i loc(#loc266)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc267)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc166)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc268)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc269)
        cir.scope {
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc174)
          %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc175)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc175)
          %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc271)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc177)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc178)
            %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc179)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc177)
          } loc(#loc272)
        } loc(#loc270)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc180)
        %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc180)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc181)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc182)
        %17 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc183)
        cir.store %14, %17 : !s8i, !cir.ptr<!s8i> loc(#loc273)
      } loc(#loc265)
    } loc(#loc263)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc275)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc188)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc188)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc189)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc190)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc191)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc190)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc190)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc276)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc194)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc194)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc195)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc196)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc195)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc197)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc197)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc277)
      %17 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc198)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc199)
      %19 = cir.const #cir.int<100> : !s32i loc(#loc200)
      %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc200)
      %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc201)
      %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc201)
      %23 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc202)
      %24 = cir.call @snprintf(%18, %20, %22, %23) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc198)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc203)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc204)
      %26 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc205)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc206)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc206)
      cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc205)
    } loc(#loc274)
    cir.return loc(#loc156)
  } loc(#loc260)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":31:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":31:25)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("/usr/include/stdio.h":385:1)
#loc8 = loc("/usr/include/stdio.h":387:62)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":51:29)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc12 = loc("/usr/include/stdlib.h":687:1)
#loc13 = loc("/usr/include/stdlib.h":687:32)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":35:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":55:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":37:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":37:12)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":38:12)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":38:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":39:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":45:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":39:8)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":39:20)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":40:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":42:24)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":42:31)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":42:34)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":42:45)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":42:46)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":42:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":43:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":43:37)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":43:13)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":43:21)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":43:27)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":43:28)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":43:34)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":43:33)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":44:19)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":44:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":44:14)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":44:15)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":46:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":54:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":47:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":47:24)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":48:16)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":48:24)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":48:29)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":48:33)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":48:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":48:34)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":49:25)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":49:16)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":49:20)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":49:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":51:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":51:18)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":51:24)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":51:35)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":52:19)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":52:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":53:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":53:14)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":112:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":116:1)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":114:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":114:14)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":115:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":115:14)
#loc71 = loc("/usr/include/stdlib.h":575:1)
#loc72 = loc("/usr/include/stdlib.h":575:41)
#loc73 = loc("/usr/include/time.h":76:1)
#loc74 = loc("/usr/include/time.h":76:38)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":133:15)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":135:15)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":138:15)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":140:15)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":128:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":143:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":129:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":131:27)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":131:22)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":131:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":133:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":134:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":134:71)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":135:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":138:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":139:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":139:70)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":140:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":142:12)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":142:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":69:19)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":62:1)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":87:1)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":64:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":64:12)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":65:12)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":65:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":66:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":77:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":66:8)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":66:20)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":67:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":70:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":72:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":69:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":74:24)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":74:31)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":74:35)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":74:46)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":74:47)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":74:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":75:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":75:37)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":75:13)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":75:21)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":75:27)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":75:28)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":75:34)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":75:33)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":76:19)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":76:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":76:14)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":76:15)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":78:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":86:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":79:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":79:24)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":80:16)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":80:24)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":80:29)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":80:33)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":80:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":80:34)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":81:25)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":81:16)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":81:20)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":81:9)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":83:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":83:18)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":83:24)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":83:29)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":83:35)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":84:19)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":84:9)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":85:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":85:14)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":90:1)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":110:1)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":92:5)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":92:12)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":93:12)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":93:5)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":94:5)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":100:5)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":94:8)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":94:20)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":95:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":97:24)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":97:31)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":97:35)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":97:46)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":97:47)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":97:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":98:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":98:37)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":98:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":98:21)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":98:27)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":98:28)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":98:34)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":98:33)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":99:19)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":99:9)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":99:14)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":99:15)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":101:5)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":109:5)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":102:9)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":102:24)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":103:16)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":103:24)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":103:29)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":103:33)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":103:9)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":103:34)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":104:25)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":104:16)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":104:20)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":104:9)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":106:9)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":106:18)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":106:24)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":106:29)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":106:35)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":107:19)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":107:9)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":108:9)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c":108:14)
#loc207 = loc(fused[#loc1, #loc2])
#loc208 = loc(fused[#loc3, #loc4])
#loc209 = loc(fused[#loc5, #loc6])
#loc210 = loc(fused[#loc7, #loc8])
#loc211 = loc(fused[#loc10, #loc11])
#loc212 = loc(fused[#loc12, #loc13])
#loc213 = loc(fused[#loc14, #loc15])
#loc214 = loc(fused[#loc16, #loc17])
#loc215 = loc(fused[#loc19, #loc18])
#loc216 = loc(fused[#loc20, #loc21])
#loc217 = loc(fused[#loc22, #loc23])
#loc218 = loc(fused[#loc24, #loc21])
#loc219 = loc(fused[#loc27, #loc28])
#loc220 = loc(fused[#loc26, #loc28])
#loc221 = loc(fused[#loc25, #loc29])
#loc222 = loc(fused[#loc30, #loc29])
#loc223 = loc(fused[#loc31, #loc32])
#loc224 = loc(fused[#loc33, #loc34])
#loc225 = loc(fused[#loc35, #loc32])
#loc226 = loc(fused[#loc40, #loc39])
#loc227 = loc(fused[#loc43, #loc44])
#loc228 = loc(fused[#loc45, #loc46])
#loc229 = loc(fused[#loc51, #loc52])
#loc230 = loc(fused[#loc56, #loc53])
#loc231 = loc(fused[#loc65, #loc66])
#loc232 = loc(fused[#loc67, #loc68])
#loc233 = loc(fused[#loc69, #loc70])
#loc234 = loc(fused[#loc71, #loc72])
#loc235 = loc(fused[#loc73, #loc74])
#loc236 = loc(fused[#loc79, #loc80])
#loc239 = loc(fused[#loc90, #loc91])
#loc240 = loc(fused[#loc94, #loc95])
#loc241 = loc(fused[#loc98, #loc97])
#loc242 = loc(fused[#loc100, #loc101])
#loc243 = loc(fused[#loc102, #loc103])
#loc244 = loc(fused[#loc105, #loc104])
#loc245 = loc(fused[#loc106, #loc107])
#loc246 = loc(fused[#loc108, #loc109])
#loc247 = loc(fused[#loc110, #loc111, #loc112, #loc107])
#loc248 = loc(fused[#loc116, #loc117])
#loc249 = loc(fused[#loc115, #loc117])
#loc250 = loc(fused[#loc114, #loc118])
#loc251 = loc(fused[#loc119, #loc118])
#loc252 = loc(fused[#loc120, #loc121])
#loc253 = loc(fused[#loc122, #loc123])
#loc254 = loc(fused[#loc124, #loc121])
#loc255 = loc(fused[#loc129, #loc128])
#loc256 = loc(fused[#loc132, #loc133])
#loc257 = loc(fused[#loc134, #loc135])
#loc258 = loc(fused[#loc140, #loc141])
#loc259 = loc(fused[#loc145, #loc142])
#loc260 = loc(fused[#loc155, #loc156])
#loc261 = loc(fused[#loc157, #loc158])
#loc262 = loc(fused[#loc160, #loc159])
#loc263 = loc(fused[#loc161, #loc162])
#loc264 = loc(fused[#loc163, #loc164])
#loc265 = loc(fused[#loc165, #loc162])
#loc266 = loc(fused[#loc168, #loc169])
#loc267 = loc(fused[#loc167, #loc169])
#loc268 = loc(fused[#loc166, #loc170])
#loc269 = loc(fused[#loc171, #loc170])
#loc270 = loc(fused[#loc172, #loc173])
#loc271 = loc(fused[#loc174, #loc175])
#loc272 = loc(fused[#loc176, #loc173])
#loc273 = loc(fused[#loc181, #loc180])
#loc274 = loc(fused[#loc184, #loc185])
#loc275 = loc(fused[#loc186, #loc187])
#loc276 = loc(fused[#loc192, #loc193])
#loc277 = loc(fused[#loc197, #loc194])
