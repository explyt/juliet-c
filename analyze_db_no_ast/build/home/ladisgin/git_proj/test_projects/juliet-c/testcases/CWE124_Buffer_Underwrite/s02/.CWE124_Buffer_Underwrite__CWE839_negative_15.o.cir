!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_negative_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc303)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc3)
  cir.func private  @printIntLine(!s32i) loc(#loc304)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto  @CWE124_Buffer_Underwrite__CWE839_negative_15_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc306)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc12)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc307)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc16)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.const #cir.int<5> : !s32i loc(#loc17)
        %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc18)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc309)
        cir.break loc(#loc20)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc3)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc3)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc21)
        cir.break loc(#loc22)
      }
      ] loc(#loc14)
    } loc(#loc308)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc25)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc312)
          %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc313)
          %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc313)
          cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc313)
          cir.scope {
            %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc34)
            %8 = cir.const #cir.int<10> : !s32i loc(#loc35)
            %9 = cir.cmp(lt, %7, %8) : !s32i, !s32i loc(#loc315)
            %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc36)
            cir.if %10 {
              %11 = cir.const #cir.int<1> : !s32i loc(#loc40)
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc41)
              %13 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc42)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc42)
              cir.store %11, %14 : !s32i, !cir.ptr<!s32i> loc(#loc317)
              cir.scope {
                %15 = cir.const #cir.int<0> : !s32i loc(#loc45)
                cir.store %15, %4 : !s32i, !cir.ptr<!s32i> loc(#loc319)
                cir.for : cond {
                  %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc47)
                  %17 = cir.const #cir.int<10> : !s32i loc(#loc48)
                  %18 = cir.cmp(lt, %16, %17) : !s32i, !s32i loc(#loc320)
                  %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc49)
                  cir.condition(%19) loc(#loc49)
                } body {
                  cir.scope {
                    %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc51)
                    %17 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc52)
                    %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc52)
                    %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc52)
                    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc53)
                  } loc(#loc321)
                  cir.yield loc(#loc44)
                } step {
                  %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc54)
                  %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc55)
                  cir.store %17, %4 : !s32i, !cir.ptr<!s32i> loc(#loc322)
                  cir.yield loc(#loc318)
                } loc(#loc318)
              } loc(#loc318)
            } else {
              %11 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc6)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc6)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc56)
            } loc(#loc316)
          } loc(#loc314)
        } loc(#loc311)
        cir.break loc(#loc57)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc58)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc58)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc59)
        cir.break loc(#loc60)
      }
      ] loc(#loc23)
    } loc(#loc310)
    cir.return loc(#loc8)
  } loc(#loc305)
  cir.func no_proto  @CWE124_Buffer_Underwrite__CWE839_negative_15_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc324)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc63)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc325)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc65)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc326)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc67)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc327)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc69)
    cir.return loc(#loc62)
  } loc(#loc323)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc71)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc329)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc76)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc77)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc330)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc81)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.const #cir.int<5> : !s32i loc(#loc82)
        %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc83)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc332)
        cir.break loc(#loc85)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc86)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc86)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc87)
        cir.break loc(#loc88)
      }
      ] loc(#loc79)
    } loc(#loc331)
    cir.scope {
      %3 = cir.const #cir.int<8> : !s32i loc(#loc91)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc92)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc92)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc93)
        cir.break loc(#loc94)
      },
      case (default) {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc335)
          %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc336)
          %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc336)
          cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc336)
          cir.scope {
            %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
            %8 = cir.const #cir.int<0> : !s32i loc(#loc104)
            %9 = cir.cmp(ge, %7, %8) : !s32i, !s32i loc(#loc338)
            %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc105)
            %11 = cir.ternary(%10, true {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc107)
              %13 = cir.const #cir.int<10> : !s32i loc(#loc108)
              %14 = cir.cmp(lt, %12, %13) : !s32i, !s32i loc(#loc339)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc110)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc106)
                cir.yield %17 : !cir.bool loc(#loc106)
              }, false {
                %17 = cir.const #false loc(#loc106)
                cir.yield %17 : !cir.bool loc(#loc106)
              }) : (!cir.bool) -> !cir.bool loc(#loc106)
              cir.yield %16 : !cir.bool loc(#loc106)
            }, false {
              %12 = cir.const #false loc(#loc106)
              cir.yield %12 : !cir.bool loc(#loc106)
            }) : (!cir.bool) -> !cir.bool loc(#loc106)
            cir.if %11 {
              %12 = cir.const #cir.int<1> : !s32i loc(#loc114)
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc115)
              %14 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc116)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc116)
              cir.store %12, %15 : !s32i, !cir.ptr<!s32i> loc(#loc341)
              cir.scope {
                %16 = cir.const #cir.int<0> : !s32i loc(#loc119)
                cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc343)
                cir.for : cond {
                  %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc121)
                  %18 = cir.const #cir.int<10> : !s32i loc(#loc122)
                  %19 = cir.cmp(lt, %17, %18) : !s32i, !s32i loc(#loc344)
                  %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc123)
                  cir.condition(%20) loc(#loc123)
                } body {
                  cir.scope {
                    %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc125)
                    %18 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc126)
                    %19 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc126)
                    %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc126)
                    cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc127)
                  } loc(#loc345)
                  cir.yield loc(#loc118)
                } step {
                  %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc128)
                  %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc129)
                  cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc346)
                  cir.yield loc(#loc342)
                } loc(#loc342)
              } loc(#loc342)
            } else {
              %12 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc71)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc71)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc130)
            } loc(#loc340)
          } loc(#loc337)
        } loc(#loc334)
        cir.break loc(#loc131)
      }
      ] loc(#loc89)
    } loc(#loc333)
    cir.return loc(#loc73)
  } loc(#loc328)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc348)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc136)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc137)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc349)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc141)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.const #cir.int<5> : !s32i loc(#loc142)
        %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc143)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc351)
        cir.break loc(#loc145)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc146)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc146)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc147)
        cir.break loc(#loc148)
      }
      ] loc(#loc139)
    } loc(#loc350)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc151)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc354)
          %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc355)
          %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc355)
          cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc355)
          cir.scope {
            %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc160)
            %8 = cir.const #cir.int<0> : !s32i loc(#loc161)
            %9 = cir.cmp(ge, %7, %8) : !s32i, !s32i loc(#loc357)
            %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc162)
            %11 = cir.ternary(%10, true {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc164)
              %13 = cir.const #cir.int<10> : !s32i loc(#loc165)
              %14 = cir.cmp(lt, %12, %13) : !s32i, !s32i loc(#loc358)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc167)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc163)
                cir.yield %17 : !cir.bool loc(#loc163)
              }, false {
                %17 = cir.const #false loc(#loc163)
                cir.yield %17 : !cir.bool loc(#loc163)
              }) : (!cir.bool) -> !cir.bool loc(#loc163)
              cir.yield %16 : !cir.bool loc(#loc163)
            }, false {
              %12 = cir.const #false loc(#loc163)
              cir.yield %12 : !cir.bool loc(#loc163)
            }) : (!cir.bool) -> !cir.bool loc(#loc163)
            cir.if %11 {
              %12 = cir.const #cir.int<1> : !s32i loc(#loc171)
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc172)
              %14 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc173)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc173)
              cir.store %12, %15 : !s32i, !cir.ptr<!s32i> loc(#loc360)
              cir.scope {
                %16 = cir.const #cir.int<0> : !s32i loc(#loc176)
                cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc362)
                cir.for : cond {
                  %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc178)
                  %18 = cir.const #cir.int<10> : !s32i loc(#loc179)
                  %19 = cir.cmp(lt, %17, %18) : !s32i, !s32i loc(#loc363)
                  %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc180)
                  cir.condition(%20) loc(#loc180)
                } body {
                  cir.scope {
                    %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc182)
                    %18 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc183)
                    %19 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc183)
                    %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc183)
                    cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc184)
                  } loc(#loc364)
                  cir.yield loc(#loc175)
                } step {
                  %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc185)
                  %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc186)
                  cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc365)
                  cir.yield loc(#loc361)
                } loc(#loc361)
              } loc(#loc361)
            } else {
              %12 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc187)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc187)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc188)
            } loc(#loc359)
          } loc(#loc356)
        } loc(#loc353)
        cir.break loc(#loc189)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc190)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc190)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc191)
        cir.break loc(#loc192)
      }
      ] loc(#loc149)
    } loc(#loc352)
    cir.return loc(#loc133)
  } loc(#loc347)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc367)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc197)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc198)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc368)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc202)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc203)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc203)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc204)
        cir.break loc(#loc205)
      },
      case (default) {
        %4 = cir.const #cir.int<7> : !s32i loc(#loc206)
        cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc370)
        cir.break loc(#loc208)
      }
      ] loc(#loc200)
    } loc(#loc369)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc211)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc373)
          %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc374)
          %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc374)
          cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc374)
          cir.scope {
            %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc220)
            %8 = cir.const #cir.int<10> : !s32i loc(#loc221)
            %9 = cir.cmp(lt, %7, %8) : !s32i, !s32i loc(#loc376)
            %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc222)
            cir.if %10 {
              %11 = cir.const #cir.int<1> : !s32i loc(#loc226)
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc227)
              %13 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc228)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc228)
              cir.store %11, %14 : !s32i, !cir.ptr<!s32i> loc(#loc378)
              cir.scope {
                %15 = cir.const #cir.int<0> : !s32i loc(#loc231)
                cir.store %15, %4 : !s32i, !cir.ptr<!s32i> loc(#loc380)
                cir.for : cond {
                  %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc233)
                  %17 = cir.const #cir.int<10> : !s32i loc(#loc234)
                  %18 = cir.cmp(lt, %16, %17) : !s32i, !s32i loc(#loc381)
                  %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc235)
                  cir.condition(%19) loc(#loc235)
                } body {
                  cir.scope {
                    %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc237)
                    %17 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc238)
                    %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc238)
                    %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc238)
                    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc239)
                  } loc(#loc382)
                  cir.yield loc(#loc230)
                } step {
                  %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc240)
                  %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc241)
                  cir.store %17, %4 : !s32i, !cir.ptr<!s32i> loc(#loc383)
                  cir.yield loc(#loc379)
                } loc(#loc379)
              } loc(#loc379)
            } else {
              %11 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc242)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc242)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc243)
            } loc(#loc377)
          } loc(#loc375)
        } loc(#loc372)
        cir.break loc(#loc244)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc245)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc245)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc246)
        cir.break loc(#loc247)
      }
      ] loc(#loc209)
    } loc(#loc371)
    cir.return loc(#loc194)
  } loc(#loc366)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc385)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc252)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc253)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc386)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc257)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.const #cir.int<7> : !s32i loc(#loc258)
        cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc388)
        cir.break loc(#loc260)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc261)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc261)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc262)
        cir.break loc(#loc263)
      }
      ] loc(#loc255)
    } loc(#loc387)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc266)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc391)
          %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc392)
          %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc392)
          cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc392)
          cir.scope {
            %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc275)
            %8 = cir.const #cir.int<10> : !s32i loc(#loc276)
            %9 = cir.cmp(lt, %7, %8) : !s32i, !s32i loc(#loc394)
            %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc277)
            cir.if %10 {
              %11 = cir.const #cir.int<1> : !s32i loc(#loc281)
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc282)
              %13 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc283)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc283)
              cir.store %11, %14 : !s32i, !cir.ptr<!s32i> loc(#loc396)
              cir.scope {
                %15 = cir.const #cir.int<0> : !s32i loc(#loc286)
                cir.store %15, %4 : !s32i, !cir.ptr<!s32i> loc(#loc398)
                cir.for : cond {
                  %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc288)
                  %17 = cir.const #cir.int<10> : !s32i loc(#loc289)
                  %18 = cir.cmp(lt, %16, %17) : !s32i, !s32i loc(#loc399)
                  %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc290)
                  cir.condition(%19) loc(#loc290)
                } body {
                  cir.scope {
                    %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc292)
                    %17 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc293)
                    %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc293)
                    %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc293)
                    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc294)
                  } loc(#loc400)
                  cir.yield loc(#loc285)
                } step {
                  %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc295)
                  %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc296)
                  cir.store %17, %4 : !s32i, !cir.ptr<!s32i> loc(#loc401)
                  cir.yield loc(#loc397)
                } loc(#loc397)
              } loc(#loc397)
            } else {
              %11 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc297)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc297)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc298)
            } loc(#loc395)
          } loc(#loc393)
        } loc(#loc390)
        cir.break loc(#loc299)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc300)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc300)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc301)
        cir.break loc(#loc302)
      }
      ] loc(#loc264)
    } loc(#loc389)
    cir.return loc(#loc249)
  } loc(#loc384)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_negative_15.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":35:19)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc6 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":57:23)
#loc7 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":22:1)
#loc8 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":66:1)
#loc9 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":24:5)
#loc10 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":24:9)
#loc11 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":26:13)
#loc12 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":26:12)
#loc13 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":26:5)
#loc14 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":27:5)
#loc15 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":37:5)
#loc16 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":27:12)
#loc17 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":31:17)
#loc18 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":31:16)
#loc19 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":31:9)
#loc20 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":32:9)
#loc21 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":35:9)
#loc22 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":36:9)
#loc23 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":38:5)
#loc24 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":65:5)
#loc25 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":38:12)
#loc26 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":41:5)
#loc27 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":59:5)
#loc28 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":42:9)
#loc29 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":42:13)
#loc30 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":43:9)
#loc31 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":43:30)
#loc32 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":46:9)
#loc33 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":58:9)
#loc34 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":46:13)
#loc35 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":46:20)
#loc36 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":46:18)
#loc37 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":47:9)
#loc38 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":54:9)
#loc39 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":56:9)
#loc40 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":48:28)
#loc41 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":48:20)
#loc42 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":48:13)
#loc43 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":50:13)
#loc44 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":53:13)
#loc45 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":50:21)
#loc46 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":50:17)
#loc47 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":50:24)
#loc48 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":50:28)
#loc49 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":50:26)
#loc50 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":51:13)
#loc51 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":52:37)
#loc52 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":52:30)
#loc53 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":52:17)
#loc54 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":50:33)
#loc55 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":50:32)
#loc56 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":57:13)
#loc57 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":60:5)
#loc58 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":63:19)
#loc59 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":63:9)
#loc60 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":64:9)
#loc61 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":260:1)
#loc62 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":266:1)
#loc63 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":262:5)
#loc64 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":262:14)
#loc65 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":263:5)
#loc66 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":263:14)
#loc67 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":264:5)
#loc68 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":264:14)
#loc69 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":265:5)
#loc70 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":265:14)
#loc71 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":111:23)
#loc72 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":73:1)
#loc73 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":116:1)
#loc74 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":75:5)
#loc75 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":75:9)
#loc76 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":77:13)
#loc77 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":77:12)
#loc78 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":77:5)
#loc79 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":78:5)
#loc80 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":88:5)
#loc81 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":78:12)
#loc82 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":82:17)
#loc83 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":82:16)
#loc84 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":82:9)
#loc85 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":83:9)
#loc86 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":86:19)
#loc87 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":86:9)
#loc88 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":87:9)
#loc89 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":89:5)
#loc90 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":115:5)
#loc91 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":89:12)
#loc92 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":93:19)
#loc93 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":93:9)
#loc94 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":94:9)
#loc95 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":96:5)
#loc96 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":113:5)
#loc97 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":97:9)
#loc98 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":97:13)
#loc99 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":98:9)
#loc100 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":98:30)
#loc101 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":100:9)
#loc102 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":112:9)
#loc103 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":100:13)
#loc104 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":100:21)
#loc105 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":100:18)
#loc106 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":100:23)
#loc107 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":100:26)
#loc108 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":100:34)
#loc109 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":100:36)
#loc110 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":100:31)
#loc111 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":101:9)
#loc112 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":108:9)
#loc113 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":110:9)
#loc114 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":102:28)
#loc115 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":102:20)
#loc116 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":102:13)
#loc117 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":104:13)
#loc118 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":107:13)
#loc119 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":104:21)
#loc120 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":104:17)
#loc121 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":104:24)
#loc122 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":104:28)
#loc123 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":104:26)
#loc124 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":105:13)
#loc125 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":106:37)
#loc126 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":106:30)
#loc127 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":106:17)
#loc128 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":104:33)
#loc129 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":104:32)
#loc130 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":111:13)
#loc131 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":114:5)
#loc132 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":119:1)
#loc133 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":162:1)
#loc134 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":121:5)
#loc135 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":121:9)
#loc136 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":123:13)
#loc137 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":123:12)
#loc138 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":123:5)
#loc139 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":124:5)
#loc140 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":134:5)
#loc141 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":124:12)
#loc142 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":128:17)
#loc143 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":128:16)
#loc144 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":128:9)
#loc145 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":129:9)
#loc146 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":132:19)
#loc147 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":132:9)
#loc148 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":133:9)
#loc149 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":135:5)
#loc150 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":161:5)
#loc151 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":135:12)
#loc152 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":138:5)
#loc153 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":155:5)
#loc154 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":139:9)
#loc155 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":139:13)
#loc156 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":140:9)
#loc157 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":140:30)
#loc158 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":142:9)
#loc159 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":154:9)
#loc160 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":142:13)
#loc161 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":142:21)
#loc162 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":142:18)
#loc163 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":142:23)
#loc164 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":142:26)
#loc165 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":142:34)
#loc166 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":142:36)
#loc167 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":142:31)
#loc168 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":143:9)
#loc169 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":150:9)
#loc170 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":152:9)
#loc171 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":144:28)
#loc172 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":144:20)
#loc173 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":144:13)
#loc174 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":146:13)
#loc175 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":149:13)
#loc176 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":146:21)
#loc177 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":146:17)
#loc178 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":146:24)
#loc179 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":146:28)
#loc180 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":146:26)
#loc181 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":147:13)
#loc182 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":148:37)
#loc183 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":148:30)
#loc184 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":148:17)
#loc185 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":146:33)
#loc186 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":146:32)
#loc187 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":153:23)
#loc188 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":153:13)
#loc189 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":156:5)
#loc190 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":159:19)
#loc191 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":159:9)
#loc192 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":160:9)
#loc193 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":165:1)
#loc194 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":210:1)
#loc195 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":167:5)
#loc196 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":167:9)
#loc197 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":169:13)
#loc198 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":169:12)
#loc199 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":169:5)
#loc200 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":170:5)
#loc201 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":181:5)
#loc202 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":170:12)
#loc203 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":174:19)
#loc204 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":174:9)
#loc205 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":175:9)
#loc206 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":179:16)
#loc207 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":179:9)
#loc208 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":180:9)
#loc209 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":182:5)
#loc210 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":209:5)
#loc211 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":182:12)
#loc212 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":185:5)
#loc213 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":203:5)
#loc214 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":186:9)
#loc215 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":186:13)
#loc216 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":187:9)
#loc217 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":187:30)
#loc218 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":190:9)
#loc219 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":202:9)
#loc220 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":190:13)
#loc221 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":190:20)
#loc222 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":190:18)
#loc223 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":191:9)
#loc224 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":198:9)
#loc225 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":200:9)
#loc226 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":192:28)
#loc227 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":192:20)
#loc228 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":192:13)
#loc229 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":194:13)
#loc230 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":197:13)
#loc231 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":194:21)
#loc232 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":194:17)
#loc233 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":194:24)
#loc234 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":194:28)
#loc235 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":194:26)
#loc236 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":195:13)
#loc237 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":196:37)
#loc238 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":196:30)
#loc239 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":196:17)
#loc240 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":194:33)
#loc241 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":194:32)
#loc242 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":201:23)
#loc243 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":201:13)
#loc244 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":204:5)
#loc245 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":207:19)
#loc246 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":207:9)
#loc247 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":208:9)
#loc248 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":213:1)
#loc249 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":258:1)
#loc250 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":215:5)
#loc251 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":215:9)
#loc252 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":217:13)
#loc253 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":217:12)
#loc254 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":217:5)
#loc255 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":218:5)
#loc256 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":229:5)
#loc257 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":218:12)
#loc258 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":223:16)
#loc259 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":223:9)
#loc260 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":224:9)
#loc261 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":227:19)
#loc262 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":227:9)
#loc263 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":228:9)
#loc264 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":230:5)
#loc265 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":257:5)
#loc266 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":230:12)
#loc267 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":233:5)
#loc268 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":251:5)
#loc269 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":234:9)
#loc270 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":234:13)
#loc271 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":235:9)
#loc272 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":235:30)
#loc273 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":238:9)
#loc274 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":250:9)
#loc275 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":238:13)
#loc276 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":238:20)
#loc277 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":238:18)
#loc278 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":239:9)
#loc279 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":246:9)
#loc280 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":248:9)
#loc281 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":240:28)
#loc282 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":240:20)
#loc283 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":240:13)
#loc284 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":242:13)
#loc285 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":245:13)
#loc286 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":242:21)
#loc287 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":242:17)
#loc288 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":242:24)
#loc289 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":242:28)
#loc290 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":242:26)
#loc291 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":243:13)
#loc292 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":244:37)
#loc293 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":244:30)
#loc294 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":244:17)
#loc295 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":242:33)
#loc296 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":242:32)
#loc297 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":249:23)
#loc298 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":249:13)
#loc299 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":252:5)
#loc300 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":255:19)
#loc301 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":255:9)
#loc302 = loc("CWE124_Buffer_Underwrite__CWE839_negative_15.c":256:9)
#loc303 = loc(fused[#loc1, #loc2])
#loc304 = loc(fused[#loc4, #loc5])
#loc305 = loc(fused[#loc7, #loc8])
#loc306 = loc(fused[#loc9, #loc10])
#loc307 = loc(fused[#loc13, #loc11])
#loc308 = loc(fused[#loc14, #loc15])
#loc309 = loc(fused[#loc19, #loc17])
#loc310 = loc(fused[#loc23, #loc24])
#loc311 = loc(fused[#loc26, #loc27])
#loc312 = loc(fused[#loc28, #loc29])
#loc313 = loc(fused[#loc30, #loc31])
#loc314 = loc(fused[#loc32, #loc33])
#loc315 = loc(fused[#loc34, #loc35])
#loc316 = loc(fused[#loc37, #loc38, #loc39, #loc33])
#loc317 = loc(fused[#loc42, #loc40])
#loc318 = loc(fused[#loc43, #loc44])
#loc319 = loc(fused[#loc46, #loc45])
#loc320 = loc(fused[#loc47, #loc48])
#loc321 = loc(fused[#loc50, #loc44])
#loc322 = loc(fused[#loc55, #loc54])
#loc323 = loc(fused[#loc61, #loc62])
#loc324 = loc(fused[#loc63, #loc64])
#loc325 = loc(fused[#loc65, #loc66])
#loc326 = loc(fused[#loc67, #loc68])
#loc327 = loc(fused[#loc69, #loc70])
#loc328 = loc(fused[#loc72, #loc73])
#loc329 = loc(fused[#loc74, #loc75])
#loc330 = loc(fused[#loc78, #loc76])
#loc331 = loc(fused[#loc79, #loc80])
#loc332 = loc(fused[#loc84, #loc82])
#loc333 = loc(fused[#loc89, #loc90])
#loc334 = loc(fused[#loc95, #loc96])
#loc335 = loc(fused[#loc97, #loc98])
#loc336 = loc(fused[#loc99, #loc100])
#loc337 = loc(fused[#loc101, #loc102])
#loc338 = loc(fused[#loc103, #loc104])
#loc339 = loc(fused[#loc107, #loc109])
#loc340 = loc(fused[#loc111, #loc112, #loc113, #loc102])
#loc341 = loc(fused[#loc116, #loc114])
#loc342 = loc(fused[#loc117, #loc118])
#loc343 = loc(fused[#loc120, #loc119])
#loc344 = loc(fused[#loc121, #loc122])
#loc345 = loc(fused[#loc124, #loc118])
#loc346 = loc(fused[#loc129, #loc128])
#loc347 = loc(fused[#loc132, #loc133])
#loc348 = loc(fused[#loc134, #loc135])
#loc349 = loc(fused[#loc138, #loc136])
#loc350 = loc(fused[#loc139, #loc140])
#loc351 = loc(fused[#loc144, #loc142])
#loc352 = loc(fused[#loc149, #loc150])
#loc353 = loc(fused[#loc152, #loc153])
#loc354 = loc(fused[#loc154, #loc155])
#loc355 = loc(fused[#loc156, #loc157])
#loc356 = loc(fused[#loc158, #loc159])
#loc357 = loc(fused[#loc160, #loc161])
#loc358 = loc(fused[#loc164, #loc166])
#loc359 = loc(fused[#loc168, #loc169, #loc170, #loc159])
#loc360 = loc(fused[#loc173, #loc171])
#loc361 = loc(fused[#loc174, #loc175])
#loc362 = loc(fused[#loc177, #loc176])
#loc363 = loc(fused[#loc178, #loc179])
#loc364 = loc(fused[#loc181, #loc175])
#loc365 = loc(fused[#loc186, #loc185])
#loc366 = loc(fused[#loc193, #loc194])
#loc367 = loc(fused[#loc195, #loc196])
#loc368 = loc(fused[#loc199, #loc197])
#loc369 = loc(fused[#loc200, #loc201])
#loc370 = loc(fused[#loc207, #loc206])
#loc371 = loc(fused[#loc209, #loc210])
#loc372 = loc(fused[#loc212, #loc213])
#loc373 = loc(fused[#loc214, #loc215])
#loc374 = loc(fused[#loc216, #loc217])
#loc375 = loc(fused[#loc218, #loc219])
#loc376 = loc(fused[#loc220, #loc221])
#loc377 = loc(fused[#loc223, #loc224, #loc225, #loc219])
#loc378 = loc(fused[#loc228, #loc226])
#loc379 = loc(fused[#loc229, #loc230])
#loc380 = loc(fused[#loc232, #loc231])
#loc381 = loc(fused[#loc233, #loc234])
#loc382 = loc(fused[#loc236, #loc230])
#loc383 = loc(fused[#loc241, #loc240])
#loc384 = loc(fused[#loc248, #loc249])
#loc385 = loc(fused[#loc250, #loc251])
#loc386 = loc(fused[#loc254, #loc252])
#loc387 = loc(fused[#loc255, #loc256])
#loc388 = loc(fused[#loc259, #loc258])
#loc389 = loc(fused[#loc264, #loc265])
#loc390 = loc(fused[#loc267, #loc268])
#loc391 = loc(fused[#loc269, #loc270])
#loc392 = loc(fused[#loc271, #loc272])
#loc393 = loc(fused[#loc273, #loc274])
#loc394 = loc(fused[#loc275, #loc276])
#loc395 = loc(fused[#loc278, #loc279, #loc280, #loc274])
#loc396 = loc(fused[#loc283, #loc281])
#loc397 = loc(fused[#loc284, #loc285])
#loc398 = loc(fused[#loc287, #loc286])
#loc399 = loc(fused[#loc288, #loc289])
#loc400 = loc(fused[#loc291, #loc285])
#loc401 = loc(fused[#loc296, #loc295])
