!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":24:22)
#loc6 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":24:26)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":156:10)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":156:14)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":156:20)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":156:32)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":68:27)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":68:31)
#loc191 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":107:27)
#loc192 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":107:31)
#loc257 = loc(fused[#loc5, #loc6])
#loc295 = loc(fused[#loc97, #loc98])
#loc296 = loc(fused[#loc99, #loc100])
#loc302 = loc(fused[#loc120, #loc121])
#loc330 = loc(fused[#loc191, #loc192])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc255)
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc5, #loc6])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc257)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc4)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    cir.scope {
      %4 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc255)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc10)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc10)
      cir.if %6 {
        %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc12)
        %8 = cir.const #cir.int<2> : !s32i loc(#loc13)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc260)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc14)
        %11 = cir.binop(add, %9, %10) nsw : !s32i loc(#loc260)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc261)
      } loc(#loc259)
    } loc(#loc258)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc262)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc262)
    cir.return %3 : !s32i loc(#loc262)
  } loc(#loc256)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc263)
  cir.func private @exit(!s32i) extra(#fn_attr1) loc(#loc264)
  cir.func private @printIntLine(!s32i) loc(#loc265)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr1) loc(#loc266)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc268)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc30)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc31)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc269)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %4 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc255)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc270)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc35)
    %6 = cir.call @badSource(%5) : (!s32i) -> !s32i loc(#loc36)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc271)
    cir.scope {
      %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc273)
      %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc274)
      %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc45)
      %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc46)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc46)
      %12 = cir.const #cir.int<4> : !u64i loc(#loc275)
      %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc276)
      %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc45)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc277)
      cir.store %15, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc278)
      cir.scope {
        %23 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc53)
        %24 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc54)
        %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc54)
        %26 = cir.cmp(eq, %23, %25) : !cir.ptr<!s32i>, !cir.bool loc(#loc280)
        cir.if %26 {
          %27 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc56)
          %28 = cir.const #cir.int<1> : !s32i loc(#loc57)
          %29 = cir.unary(minus, %28) : !s32i, !s32i loc(#loc58)
          cir.call @exit(%29) : (!s32i) -> () extra(#fn_attr1) loc(#loc56)
        } loc(#loc281)
      } loc(#loc279)
      cir.scope {
        %23 = cir.const #cir.int<0> : !s32i loc(#loc61)
        %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc61)
        cir.store %24, %7 : !u64i, !cir.ptr<!u64i> loc(#loc283)
        cir.for : cond {
          %25 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc63)
          %26 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc64)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc64)
          %28 = cir.cmp(lt, %25, %27) : !u64i, !cir.bool loc(#loc284)
          cir.condition(%28) loc(#loc65)
        } body {
          cir.scope {
            %25 = cir.const #cir.int<0> : !s32i loc(#loc67)
            %26 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc68)
            %27 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc69)
            %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !u64i), !cir.ptr<!s32i> loc(#loc70)
            cir.store %25, %28 : !s32i, !cir.ptr<!s32i> loc(#loc286)
          } loc(#loc285)
          cir.yield loc(#loc60)
        } step {
          %25 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc71)
          %26 = cir.unary(inc, %25) : !u64i, !u64i loc(#loc72)
          cir.store %26, %7 : !u64i, !cir.ptr<!u64i> loc(#loc287)
          cir.yield loc(#loc282)
        } loc(#loc282)
      } loc(#loc282)
      %16 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc73)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc74)
      %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc75)
      %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc73)
      cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc76)
      %20 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc77)
      %21 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc78)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc78)
      cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc77)
    } loc(#loc272)
    cir.return loc(#loc27)
  } loc(#loc267)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc289)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc81)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc290)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc83)
    cir.return loc(#loc80)
  } loc(#loc288)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc291)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc292)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc293)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc91)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc92)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc93)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc94)
  cir.func @main(%arg0: !s32i loc(fused[#loc97, #loc98]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc99, #loc100])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc295)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc296)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc96)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc101)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc102)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc103)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc103)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc104)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc91)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc91)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc105)
    %8 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21_good : !cir.ptr<!cir.func<!void ()>> loc(#loc297)
    cir.call @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21_good() : () -> () loc(#loc106)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc92)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc92)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc108)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc93)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc93)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc109)
    %13 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc298)
    cir.call @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21_bad() : () -> () loc(#loc110)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc94)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc94)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc112)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc113)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc299)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc299)
    cir.return %17 : !s32i loc(#loc299)
  } loc(#loc294)
  cir.global "private" internal dsolocal @goodG2B1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc300)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc117)
  cir.func internal private @goodG2B1Source(%arg0: !s32i loc(fused[#loc120, #loc121])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc302)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc119)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc122)
    cir.scope {
      %4 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc300)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc125)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc125)
      cir.if %6 {
        %7 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc117)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc117)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc129)
      } else {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc130)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc305)
      } loc(#loc304)
    } loc(#loc303)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc132)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc306)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc306)
    cir.return %3 : !s32i loc(#loc306)
  } loc(#loc301)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc308)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc138)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc139)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc309)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc141)
    %4 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc300)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc310)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc143)
    %6 = cir.call @goodG2B1Source(%5) : (!s32i) -> !s32i loc(#loc144)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc311)
    cir.scope {
      %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc313)
      %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc314)
      %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc153)
      %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc154)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc154)
      %12 = cir.const #cir.int<4> : !u64i loc(#loc315)
      %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc316)
      %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc153)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc317)
      cir.store %15, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc318)
      cir.scope {
        %23 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc161)
        %24 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc162)
        %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc162)
        %26 = cir.cmp(eq, %23, %25) : !cir.ptr<!s32i>, !cir.bool loc(#loc320)
        cir.if %26 {
          %27 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc164)
          %28 = cir.const #cir.int<1> : !s32i loc(#loc165)
          %29 = cir.unary(minus, %28) : !s32i, !s32i loc(#loc166)
          cir.call @exit(%29) : (!s32i) -> () extra(#fn_attr1) loc(#loc164)
        } loc(#loc321)
      } loc(#loc319)
      cir.scope {
        %23 = cir.const #cir.int<0> : !s32i loc(#loc169)
        %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc169)
        cir.store %24, %7 : !u64i, !cir.ptr<!u64i> loc(#loc323)
        cir.for : cond {
          %25 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc171)
          %26 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc172)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc172)
          %28 = cir.cmp(lt, %25, %27) : !u64i, !cir.bool loc(#loc324)
          cir.condition(%28) loc(#loc173)
        } body {
          cir.scope {
            %25 = cir.const #cir.int<0> : !s32i loc(#loc175)
            %26 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc176)
            %27 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc177)
            %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !u64i), !cir.ptr<!s32i> loc(#loc178)
            cir.store %25, %28 : !s32i, !cir.ptr<!s32i> loc(#loc326)
          } loc(#loc325)
          cir.yield loc(#loc168)
        } step {
          %25 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc179)
          %26 = cir.unary(inc, %25) : !u64i, !u64i loc(#loc180)
          cir.store %26, %7 : !u64i, !cir.ptr<!u64i> loc(#loc327)
          cir.yield loc(#loc322)
        } loc(#loc322)
      } loc(#loc322)
      %16 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc181)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc182)
      %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc183)
      %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc181)
      cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc184)
      %20 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc185)
      %21 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc186)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc186)
      cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc185)
    } loc(#loc312)
    cir.return loc(#loc135)
  } loc(#loc307)
  cir.global "private" internal dsolocal @goodG2B2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc328)
  cir.func internal private @goodG2B2Source(%arg0: !s32i loc(fused[#loc191, #loc192])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc330)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc190)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc193)
    cir.scope {
      %4 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc328)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc196)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc196)
      cir.if %6 {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc198)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc333)
      } loc(#loc332)
    } loc(#loc331)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc200)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc334)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc334)
    cir.return %3 : !s32i loc(#loc334)
  } loc(#loc329)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc336)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc206)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc207)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc337)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc209)
    %4 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc328)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc338)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc211)
    %6 = cir.call @goodG2B2Source(%5) : (!s32i) -> !s32i loc(#loc212)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc339)
    cir.scope {
      %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc341)
      %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc342)
      %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc221)
      %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc222)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc222)
      %12 = cir.const #cir.int<4> : !u64i loc(#loc343)
      %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc344)
      %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc221)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc345)
      cir.store %15, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc346)
      cir.scope {
        %23 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc229)
        %24 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc230)
        %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc230)
        %26 = cir.cmp(eq, %23, %25) : !cir.ptr<!s32i>, !cir.bool loc(#loc348)
        cir.if %26 {
          %27 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc232)
          %28 = cir.const #cir.int<1> : !s32i loc(#loc233)
          %29 = cir.unary(minus, %28) : !s32i, !s32i loc(#loc234)
          cir.call @exit(%29) : (!s32i) -> () extra(#fn_attr1) loc(#loc232)
        } loc(#loc349)
      } loc(#loc347)
      cir.scope {
        %23 = cir.const #cir.int<0> : !s32i loc(#loc237)
        %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc237)
        cir.store %24, %7 : !u64i, !cir.ptr<!u64i> loc(#loc351)
        cir.for : cond {
          %25 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc239)
          %26 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc240)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc240)
          %28 = cir.cmp(lt, %25, %27) : !u64i, !cir.bool loc(#loc352)
          cir.condition(%28) loc(#loc241)
        } body {
          cir.scope {
            %25 = cir.const #cir.int<0> : !s32i loc(#loc243)
            %26 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc244)
            %27 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc245)
            %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !u64i), !cir.ptr<!s32i> loc(#loc246)
            cir.store %25, %28 : !s32i, !cir.ptr<!s32i> loc(#loc354)
          } loc(#loc353)
          cir.yield loc(#loc236)
        } step {
          %25 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc247)
          %26 = cir.unary(inc, %25) : !u64i, !u64i loc(#loc248)
          cir.store %26, %7 : !u64i, !cir.ptr<!u64i> loc(#loc355)
          cir.yield loc(#loc350)
        } loc(#loc350)
      } loc(#loc350)
      %16 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc249)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc250)
      %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc251)
      %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc249)
      cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc252)
      %20 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc253)
      %21 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc254)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc254)
      cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc253)
    } loc(#loc340)
    cir.return loc(#loc203)
  } loc(#loc335)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":0:0)
#loc1 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":22:1)
#loc2 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":22:24)
#loc3 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":24:1)
#loc4 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":34:1)
#loc7 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":25:1)
#loc8 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":26:5)
#loc9 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":32:5)
#loc10 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":26:8)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":27:5)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":29:16)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":29:26)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":29:30)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":29:9)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":33:12)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":33:5)
#loc18 = loc("/usr/include/stdlib.h":672:1)
#loc19 = loc("/usr/include/stdlib.h":672:45)
#loc20 = loc("/usr/include/stdlib.h":756:1)
#loc21 = loc("/usr/include/stdlib.h":756:70)
#loc22 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc23 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc24 = loc("/usr/include/stdlib.h":687:1)
#loc25 = loc("/usr/include/stdlib.h":687:32)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":36:1)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":57:1)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":38:5)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":38:9)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":40:13)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":40:12)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":40:5)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":41:17)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":41:5)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":42:22)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":42:12)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":42:5)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":42:26)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":43:5)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":56:5)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":44:9)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":44:16)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":45:9)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":45:14)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":48:28)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":48:35)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":48:42)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":48:52)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":48:53)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":48:9)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":49:9)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":49:43)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":49:13)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":49:27)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":49:33)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":49:34)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":49:40)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":49:39)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":50:9)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":53:9)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":50:18)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":50:14)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":50:21)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":50:33)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":50:23)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":51:9)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":52:29)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":52:13)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":52:24)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":52:25)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":50:40)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":50:39)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":54:22)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":54:33)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":54:34)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":54:9)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":55:9)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":55:14)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":140:1)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":144:1)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":142:5)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":142:14)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":143:5)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":143:14)
#loc85 = loc("/usr/include/stdlib.h":575:1)
#loc86 = loc("/usr/include/stdlib.h":575:41)
#loc87 = loc("/usr/include/time.h":76:1)
#loc88 = loc("/usr/include/time.h":76:38)
#loc89 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc90 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":161:15)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":163:15)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":166:15)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":168:15)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":156:1)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":171:1)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":157:1)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":159:27)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":159:22)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":159:5)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":161:5)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":162:5)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":162:70)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":163:5)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":166:5)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":167:5)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":167:69)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":168:5)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":170:12)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":170:5)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":64:1)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":64:29)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":73:19)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":68:1)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":81:1)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":69:1)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":70:5)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":79:5)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":70:8)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":71:5)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":74:5)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":76:5)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":73:9)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":78:16)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":78:9)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":80:12)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":80:5)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":83:1)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":104:1)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":85:5)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":85:9)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":87:13)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":87:12)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":87:5)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":88:22)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":88:5)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":89:27)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":89:12)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":89:5)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":89:31)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":90:5)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":103:5)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":91:9)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":91:16)
#loc151 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":92:9)
#loc152 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":92:14)
#loc153 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":95:28)
#loc154 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":95:35)
#loc155 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":95:42)
#loc156 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":95:52)
#loc157 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":95:53)
#loc158 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":95:9)
#loc159 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":96:9)
#loc160 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":96:43)
#loc161 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":96:13)
#loc162 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":96:27)
#loc163 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":96:33)
#loc164 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":96:34)
#loc165 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":96:40)
#loc166 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":96:39)
#loc167 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":97:9)
#loc168 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":100:9)
#loc169 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":97:18)
#loc170 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":97:14)
#loc171 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":97:21)
#loc172 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":97:33)
#loc173 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":97:23)
#loc174 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":98:9)
#loc175 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":99:29)
#loc176 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":99:13)
#loc177 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":99:24)
#loc178 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":99:25)
#loc179 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":97:40)
#loc180 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":97:39)
#loc181 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":101:22)
#loc182 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":101:33)
#loc183 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":101:34)
#loc184 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":101:9)
#loc185 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":102:9)
#loc186 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":102:14)
#loc187 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":65:1)
#loc188 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":65:29)
#loc189 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":107:1)
#loc190 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":115:1)
#loc193 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":108:1)
#loc194 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":109:5)
#loc195 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":113:5)
#loc196 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":109:8)
#loc197 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":110:5)
#loc198 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":112:16)
#loc199 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":112:9)
#loc200 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":114:12)
#loc201 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":114:5)
#loc202 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":117:1)
#loc203 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":138:1)
#loc204 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":119:5)
#loc205 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":119:9)
#loc206 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":121:13)
#loc207 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":121:12)
#loc208 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":121:5)
#loc209 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":122:22)
#loc210 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":122:5)
#loc211 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":123:27)
#loc212 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":123:12)
#loc213 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":123:5)
#loc214 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":123:31)
#loc215 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":124:5)
#loc216 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":137:5)
#loc217 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":125:9)
#loc218 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":125:16)
#loc219 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":126:9)
#loc220 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":126:14)
#loc221 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":129:28)
#loc222 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":129:35)
#loc223 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":129:42)
#loc224 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":129:52)
#loc225 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":129:53)
#loc226 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":129:9)
#loc227 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":130:9)
#loc228 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":130:43)
#loc229 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":130:13)
#loc230 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":130:27)
#loc231 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":130:33)
#loc232 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":130:34)
#loc233 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":130:40)
#loc234 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":130:39)
#loc235 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":131:9)
#loc236 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":134:9)
#loc237 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":131:18)
#loc238 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":131:14)
#loc239 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":131:21)
#loc240 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":131:33)
#loc241 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":131:23)
#loc242 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":132:9)
#loc243 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":133:29)
#loc244 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":133:13)
#loc245 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":133:24)
#loc246 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":133:25)
#loc247 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":131:40)
#loc248 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":131:39)
#loc249 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":135:22)
#loc250 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":135:33)
#loc251 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":135:34)
#loc252 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":135:9)
#loc253 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":136:9)
#loc254 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_21.c":136:14)
#loc255 = loc(fused[#loc1, #loc2])
#loc256 = loc(fused[#loc3, #loc4])
#loc258 = loc(fused[#loc8, #loc9])
#loc259 = loc(fused[#loc11, #loc9])
#loc260 = loc(fused[#loc12, #loc13])
#loc261 = loc(fused[#loc15, #loc14])
#loc262 = loc(fused[#loc17, #loc16])
#loc263 = loc(fused[#loc18, #loc19])
#loc264 = loc(fused[#loc20, #loc21])
#loc265 = loc(fused[#loc22, #loc23])
#loc266 = loc(fused[#loc24, #loc25])
#loc267 = loc(fused[#loc26, #loc27])
#loc268 = loc(fused[#loc28, #loc29])
#loc269 = loc(fused[#loc32, #loc30])
#loc270 = loc(fused[#loc34, #loc33])
#loc271 = loc(fused[#loc37, #loc38])
#loc272 = loc(fused[#loc39, #loc40])
#loc273 = loc(fused[#loc41, #loc42])
#loc274 = loc(fused[#loc43, #loc44])
#loc275 = loc(fused[#loc47, #loc48])
#loc276 = loc(fused[#loc46, #loc48])
#loc277 = loc(fused[#loc45, #loc49])
#loc278 = loc(fused[#loc50, #loc49])
#loc279 = loc(fused[#loc51, #loc52])
#loc280 = loc(fused[#loc53, #loc54])
#loc281 = loc(fused[#loc55, #loc52])
#loc282 = loc(fused[#loc59, #loc60])
#loc283 = loc(fused[#loc62, #loc61])
#loc284 = loc(fused[#loc63, #loc64])
#loc285 = loc(fused[#loc66, #loc60])
#loc286 = loc(fused[#loc68, #loc67])
#loc287 = loc(fused[#loc72, #loc71])
#loc288 = loc(fused[#loc79, #loc80])
#loc289 = loc(fused[#loc81, #loc82])
#loc290 = loc(fused[#loc83, #loc84])
#loc291 = loc(fused[#loc85, #loc86])
#loc292 = loc(fused[#loc87, #loc88])
#loc293 = loc(fused[#loc89, #loc90])
#loc294 = loc(fused[#loc95, #loc96])
#loc297 = loc(fused[#loc106, #loc107])
#loc298 = loc(fused[#loc110, #loc111])
#loc299 = loc(fused[#loc114, #loc113])
#loc300 = loc(fused[#loc115, #loc116])
#loc301 = loc(fused[#loc118, #loc119])
#loc303 = loc(fused[#loc123, #loc124])
#loc304 = loc(fused[#loc126, #loc127, #loc128, #loc124])
#loc305 = loc(fused[#loc131, #loc130])
#loc306 = loc(fused[#loc133, #loc132])
#loc307 = loc(fused[#loc134, #loc135])
#loc308 = loc(fused[#loc136, #loc137])
#loc309 = loc(fused[#loc140, #loc138])
#loc310 = loc(fused[#loc142, #loc141])
#loc311 = loc(fused[#loc145, #loc146])
#loc312 = loc(fused[#loc147, #loc148])
#loc313 = loc(fused[#loc149, #loc150])
#loc314 = loc(fused[#loc151, #loc152])
#loc315 = loc(fused[#loc155, #loc156])
#loc316 = loc(fused[#loc154, #loc156])
#loc317 = loc(fused[#loc153, #loc157])
#loc318 = loc(fused[#loc158, #loc157])
#loc319 = loc(fused[#loc159, #loc160])
#loc320 = loc(fused[#loc161, #loc162])
#loc321 = loc(fused[#loc163, #loc160])
#loc322 = loc(fused[#loc167, #loc168])
#loc323 = loc(fused[#loc170, #loc169])
#loc324 = loc(fused[#loc171, #loc172])
#loc325 = loc(fused[#loc174, #loc168])
#loc326 = loc(fused[#loc176, #loc175])
#loc327 = loc(fused[#loc180, #loc179])
#loc328 = loc(fused[#loc187, #loc188])
#loc329 = loc(fused[#loc189, #loc190])
#loc331 = loc(fused[#loc194, #loc195])
#loc332 = loc(fused[#loc197, #loc195])
#loc333 = loc(fused[#loc199, #loc198])
#loc334 = loc(fused[#loc201, #loc200])
#loc335 = loc(fused[#loc202, #loc203])
#loc336 = loc(fused[#loc204, #loc205])
#loc337 = loc(fused[#loc208, #loc206])
#loc338 = loc(fused[#loc210, #loc209])
#loc339 = loc(fused[#loc213, #loc214])
#loc340 = loc(fused[#loc215, #loc216])
#loc341 = loc(fused[#loc217, #loc218])
#loc342 = loc(fused[#loc219, #loc220])
#loc343 = loc(fused[#loc223, #loc224])
#loc344 = loc(fused[#loc222, #loc224])
#loc345 = loc(fused[#loc221, #loc225])
#loc346 = loc(fused[#loc226, #loc225])
#loc347 = loc(fused[#loc227, #loc228])
#loc348 = loc(fused[#loc229, #loc230])
#loc349 = loc(fused[#loc231, #loc228])
#loc350 = loc(fused[#loc235, #loc236])
#loc351 = loc(fused[#loc238, #loc237])
#loc352 = loc(fused[#loc239, #loc240])
#loc353 = loc(fused[#loc242, #loc236])
#loc354 = loc(fused[#loc244, #loc243])
#loc355 = loc(fused[#loc248, #loc247])
