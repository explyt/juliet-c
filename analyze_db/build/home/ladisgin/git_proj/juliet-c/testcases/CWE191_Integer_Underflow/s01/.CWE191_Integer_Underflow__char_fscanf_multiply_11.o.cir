!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_fscanf_multiply_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc198)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc199)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc200)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printHexCharLine(!s8i) loc(#loc201)
  cir.func no_proto @CWE191_Integer_Underflow__char_fscanf_multiply_11_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc203)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc204)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc16)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc16)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc205)
    cir.br ^bb1 loc(#loc206)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc207)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc207)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc20)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc208)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc23)
    %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc200)
    %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc24)
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc7)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc7)
    %13 = cir.call @__isoc99_fscanf(%10, %12, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc23)
    cir.br ^bb3 loc(#loc19)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc209)
  ^bb5:  // pred: ^bb4
    %14 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc210)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc210)
    %16 = cir.call %15() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc27)
    %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc27)
    cir.brcond %17 ^bb6, ^bb11 loc(#loc211)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc212)
  ^bb7:  // pred: ^bb6
    %18 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc32)
    %19 = cir.cast(integral, %18 : !s8i), !s32i loc(#loc32)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc33)
    %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc213)
    cir.brcond %21 ^bb8, ^bb9 loc(#loc214)
  ^bb8:  // pred: ^bb7
    %22 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc35)
    %23 = cir.cast(integral, %22 : !s8i), !s32i loc(#loc35)
    %24 = cir.const #cir.int<2> : !s32i loc(#loc13)
    %25 = cir.binop(mul, %23, %24) nsw : !s32i loc(#loc35)
    %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc35)
    cir.store %26, %0 : !s8i, !cir.ptr<!s8i> loc(#loc203)
    %27 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc36)
    cir.call @printHexCharLine(%27) : (!s8i) -> () loc(#loc37)
    cir.br ^bb9 loc(#loc31)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc31)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc26)
  ^bb11:  // 2 preds: ^bb5, ^bb10
    cir.br ^bb12 loc(#loc26)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc11)
  } loc(#loc202)
  cir.func no_proto @CWE191_Integer_Underflow__char_fscanf_multiply_11_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc216)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc217)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc219)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    cir.return loc(#loc39)
  } loc(#loc215)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc220)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc221)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc53)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc223)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc224)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc60)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc60)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc225)
    cir.br ^bb1 loc(#loc226)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc227)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc227)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc64)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc64)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc228)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc67)
    %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc200)
    %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc68)
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc69)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc69)
    %13 = cir.call @__isoc99_fscanf(%10, %12, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc67)
    cir.br ^bb3 loc(#loc63)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc63)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc229)
  ^bb5:  // pred: ^bb4
    %14 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc230)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc230)
    %16 = cir.call %15() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc72)
    %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc72)
    cir.brcond %17 ^bb6, ^bb7 loc(#loc231)
  ^bb6:  // pred: ^bb5
    %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc52)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    cir.br ^bb17 loc(#loc75)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc232)
  ^bb8:  // pred: ^bb7
    %20 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc80)
    %21 = cir.cast(integral, %20 : !s8i), !s32i loc(#loc80)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc81)
    %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc233)
    cir.brcond %23 ^bb9, ^bb15 loc(#loc234)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc235)
  ^bb10:  // pred: ^bb9
    %24 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc85)
    %25 = cir.cast(integral, %24 : !s8i), !s32i loc(#loc85)
    %26 = cir.const #cir.int<127> : !s32i loc(#loc86)
    %27 = cir.unary(minus, %26) : !s32i, !s32i loc(#loc86)
    %28 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc86)
    %30 = cir.const #cir.int<2> : !s32i loc(#loc87)
    %31 = cir.binop(div, %29, %30) : !s32i loc(#loc236)
    %32 = cir.cmp(gt, %25, %31) : !s32i, !cir.bool loc(#loc237)
    cir.brcond %32 ^bb11, ^bb12 loc(#loc238)
  ^bb11:  // pred: ^bb10
    %33 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc92)
    %34 = cir.cast(integral, %33 : !s8i), !s32i loc(#loc92)
    %35 = cir.const #cir.int<2> : !s32i loc(#loc57)
    %36 = cir.binop(mul, %34, %35) nsw : !s32i loc(#loc92)
    %37 = cir.cast(integral, %36 : !s32i), !s8i loc(#loc92)
    cir.store %37, %0 : !s8i, !cir.ptr<!s8i> loc(#loc223)
    %38 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc93)
    cir.call @printHexCharLine(%38) : (!s8i) -> () loc(#loc94)
    cir.br ^bb13 loc(#loc90)
  ^bb12:  // pred: ^bb10
    %39 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc53)
    %40 = cir.cast(array_to_ptrdecay, %39 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    cir.br ^bb13 loc(#loc84)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc84)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc79)
  ^bb15:  // 2 preds: ^bb8, ^bb14
    cir.br ^bb16 loc(#loc79)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc71)
  ^bb17:  // 2 preds: ^bb6, ^bb16
    cir.br ^bb18 loc(#loc71)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc55)
  } loc(#loc222)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc240)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc241)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc102)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc102)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc242)
    cir.br ^bb1 loc(#loc243)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc244)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc244)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc106)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc106)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc245)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc109)
    %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc200)
    %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc110)
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc111)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc111)
    %13 = cir.call @__isoc99_fscanf(%10, %12, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc109)
    cir.br ^bb3 loc(#loc105)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc105)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc246)
  ^bb5:  // pred: ^bb4
    %14 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc247)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc247)
    %16 = cir.call %15() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc114)
    %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc114)
    cir.brcond %17 ^bb6, ^bb16 loc(#loc248)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc249)
  ^bb7:  // pred: ^bb6
    %18 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc119)
    %19 = cir.cast(integral, %18 : !s8i), !s32i loc(#loc119)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc120)
    %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc250)
    cir.brcond %21 ^bb8, ^bb14 loc(#loc251)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc252)
  ^bb9:  // pred: ^bb8
    %22 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc124)
    %23 = cir.cast(integral, %22 : !s8i), !s32i loc(#loc124)
    %24 = cir.const #cir.int<127> : !s32i loc(#loc125)
    %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc125)
    %26 = cir.const #cir.int<1> : !s32i loc(#loc125)
    %27 = cir.binop(sub, %25, %26) nsw : !s32i loc(#loc125)
    %28 = cir.const #cir.int<2> : !s32i loc(#loc126)
    %29 = cir.binop(div, %27, %28) : !s32i loc(#loc253)
    %30 = cir.cmp(gt, %23, %29) : !s32i, !cir.bool loc(#loc254)
    cir.brcond %30 ^bb10, ^bb11 loc(#loc255)
  ^bb10:  // pred: ^bb9
    %31 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc131)
    %32 = cir.cast(integral, %31 : !s8i), !s32i loc(#loc131)
    %33 = cir.const #cir.int<2> : !s32i loc(#loc99)
    %34 = cir.binop(mul, %32, %33) nsw : !s32i loc(#loc131)
    %35 = cir.cast(integral, %34 : !s32i), !s8i loc(#loc131)
    cir.store %35, %0 : !s8i, !cir.ptr<!s8i> loc(#loc240)
    %36 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc132)
    cir.call @printHexCharLine(%36) : (!s8i) -> () loc(#loc133)
    cir.br ^bb12 loc(#loc129)
  ^bb11:  // pred: ^bb9
    %37 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc134)
    %38 = cir.cast(array_to_ptrdecay, %37 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc134)
    cir.call @printLine(%38) : (!cir.ptr<!s8i>) -> () loc(#loc135)
    cir.br ^bb12 loc(#loc123)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc123)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc118)
  ^bb14:  // 2 preds: ^bb7, ^bb13
    cir.br ^bb15 loc(#loc118)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc113)
  ^bb16:  // 2 preds: ^bb5, ^bb15
    cir.br ^bb17 loc(#loc113)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc97)
  } loc(#loc239)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc257)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc258)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc142)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc142)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc259)
    cir.br ^bb1 loc(#loc260)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc261)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc261)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc146)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc146)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc262)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc151)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc151)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc152)
    cir.br ^bb4 loc(#loc149)
  ^bb3:  // pred: ^bb1
    %10 = cir.const #cir.int<2> : !s32i loc(#loc153)
    %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc154)
    %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc154)
    cir.store %12, %1 : !s8i, !cir.ptr<!s8i> loc(#loc263)
    cir.br ^bb4 loc(#loc145)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc145)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc264)
  ^bb6:  // pred: ^bb5
    %13 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc265)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc265)
    %15 = cir.call %14() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc158)
    %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc158)
    cir.brcond %16 ^bb7, ^bb12 loc(#loc266)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc267)
  ^bb8:  // pred: ^bb7
    %17 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc163)
    %18 = cir.cast(integral, %17 : !s8i), !s32i loc(#loc163)
    %19 = cir.const #cir.int<0> : !s32i loc(#loc164)
    %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc268)
    cir.brcond %20 ^bb9, ^bb10 loc(#loc269)
  ^bb9:  // pred: ^bb8
    %21 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc166)
    %22 = cir.cast(integral, %21 : !s8i), !s32i loc(#loc166)
    %23 = cir.const #cir.int<2> : !s32i loc(#loc139)
    %24 = cir.binop(mul, %22, %23) nsw : !s32i loc(#loc166)
    %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc166)
    cir.store %25, %0 : !s8i, !cir.ptr<!s8i> loc(#loc257)
    %26 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc167)
    cir.call @printHexCharLine(%26) : (!s8i) -> () loc(#loc168)
    cir.br ^bb10 loc(#loc162)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc162)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc157)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc157)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc137)
  } loc(#loc256)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc271)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc272)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc175)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc175)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc273)
    cir.br ^bb1 loc(#loc274)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc275)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc275)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc179)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc179)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc276)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc182)
    %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc183)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc183)
    cir.store %10, %1 : !s8i, !cir.ptr<!s8i> loc(#loc277)
    cir.br ^bb3 loc(#loc178)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc178)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc278)
  ^bb5:  // pred: ^bb4
    %11 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc279)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc279)
    %13 = cir.call %12() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc187)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc187)
    cir.brcond %14 ^bb6, ^bb11 loc(#loc280)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc281)
  ^bb7:  // pred: ^bb6
    %15 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc192)
    %16 = cir.cast(integral, %15 : !s8i), !s32i loc(#loc192)
    %17 = cir.const #cir.int<0> : !s32i loc(#loc193)
    %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc282)
    cir.brcond %18 ^bb8, ^bb9 loc(#loc283)
  ^bb8:  // pred: ^bb7
    %19 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc195)
    %20 = cir.cast(integral, %19 : !s8i), !s32i loc(#loc195)
    %21 = cir.const #cir.int<2> : !s32i loc(#loc172)
    %22 = cir.binop(mul, %20, %21) nsw : !s32i loc(#loc195)
    %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc195)
    cir.store %23, %0 : !s8i, !cir.ptr<!s8i> loc(#loc271)
    %24 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc196)
    cir.call @printHexCharLine(%24) : (!s8i) -> () loc(#loc197)
    cir.br ^bb9 loc(#loc191)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc191)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc186)
  ^bb11:  // 2 preds: ^bb5, ^bb10
    cir.br ^bb12 loc(#loc186)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc170)
  } loc(#loc270)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_fscanf_multiply_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":29:24)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc10 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":22:1)
#loc11 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":40:1)
#loc12 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":36:13)
#loc13 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":36:34)
#loc14 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":24:5)
#loc15 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":24:10)
#loc16 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":25:12)
#loc17 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":25:5)
#loc18 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":26:5)
#loc19 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":30:5)
#loc20 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":26:8)
#loc21 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":26:26)
#loc22 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":27:5)
#loc23 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":29:9)
#loc24 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":29:17)
#loc25 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":31:5)
#loc26 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":39:5)
#loc27 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":31:8)
#loc28 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":31:26)
#loc29 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":32:5)
#loc30 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":33:9)
#loc31 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":38:9)
#loc32 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":33:12)
#loc33 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":33:19)
#loc34 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":34:9)
#loc35 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":36:27)
#loc36 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":37:30)
#loc37 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":37:13)
#loc38 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":154:1)
#loc39 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":160:1)
#loc40 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":156:5)
#loc41 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":156:14)
#loc42 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":157:5)
#loc43 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":157:14)
#loc44 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":158:5)
#loc45 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":158:14)
#loc46 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":159:5)
#loc47 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":159:14)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc52 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":59:19)
#loc53 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":73:27)
#loc54 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":47:1)
#loc55 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":77:1)
#loc56 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":68:17)
#loc57 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":68:38)
#loc58 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":49:5)
#loc59 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":49:10)
#loc60 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":50:12)
#loc61 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":50:5)
#loc62 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":51:5)
#loc63 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":55:5)
#loc64 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":51:8)
#loc65 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":51:26)
#loc66 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":52:5)
#loc67 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":54:9)
#loc68 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":54:17)
#loc69 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":54:24)
#loc70 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":56:5)
#loc71 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":76:5)
#loc72 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":56:8)
#loc73 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":56:27)
#loc74 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":57:5)
#loc75 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":60:5)
#loc76 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":62:5)
#loc77 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":59:9)
#loc78 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":63:9)
#loc79 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":75:9)
#loc80 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":63:12)
#loc81 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":63:19)
#loc82 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":64:9)
#loc83 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":66:13)
#loc84 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":74:13)
#loc85 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":66:17)
#loc86 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":66:25)
#loc87 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":66:34)
#loc88 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":66:35)
#loc89 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":67:13)
#loc90 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":70:13)
#loc91 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":72:13)
#loc92 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":68:31)
#loc93 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":69:34)
#loc94 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":69:17)
#loc95 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":73:17)
#loc96 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":80:1)
#loc97 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":105:1)
#loc98 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":96:17)
#loc99 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":96:38)
#loc100 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":82:5)
#loc101 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":82:10)
#loc102 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":83:12)
#loc103 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":83:5)
#loc104 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":84:5)
#loc105 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":88:5)
#loc106 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":84:8)
#loc107 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":84:26)
#loc108 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":85:5)
#loc109 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":87:9)
#loc110 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":87:17)
#loc111 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":87:24)
#loc112 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":89:5)
#loc113 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":104:5)
#loc114 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":89:8)
#loc115 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":89:26)
#loc116 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":90:5)
#loc117 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":91:9)
#loc118 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":103:9)
#loc119 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":91:12)
#loc120 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":91:19)
#loc121 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":92:9)
#loc122 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":94:13)
#loc123 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":102:13)
#loc124 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":94:17)
#loc125 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":94:25)
#loc126 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":94:34)
#loc127 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":94:35)
#loc128 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":95:13)
#loc129 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":98:13)
#loc130 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":100:13)
#loc131 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":96:31)
#loc132 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":97:34)
#loc133 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":97:17)
#loc134 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":101:27)
#loc135 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":101:17)
#loc136 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":108:1)
#loc137 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":131:1)
#loc138 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":127:13)
#loc139 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":127:34)
#loc140 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":110:5)
#loc141 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":110:10)
#loc142 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":111:12)
#loc143 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":111:5)
#loc144 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":112:5)
#loc145 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":121:5)
#loc146 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":112:8)
#loc147 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":112:27)
#loc148 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":113:5)
#loc149 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":116:5)
#loc150 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":118:5)
#loc151 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":115:19)
#loc152 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":115:9)
#loc153 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":120:17)
#loc154 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":120:16)
#loc155 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":120:9)
#loc156 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":122:5)
#loc157 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":130:5)
#loc158 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":122:8)
#loc159 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":122:26)
#loc160 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":123:5)
#loc161 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":124:9)
#loc162 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":129:9)
#loc163 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":124:12)
#loc164 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":124:19)
#loc165 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":125:9)
#loc166 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":127:27)
#loc167 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":128:30)
#loc168 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":128:13)
#loc169 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":134:1)
#loc170 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":152:1)
#loc171 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":148:13)
#loc172 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":148:34)
#loc173 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":136:5)
#loc174 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":136:10)
#loc175 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":137:12)
#loc176 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":137:5)
#loc177 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":138:5)
#loc178 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":142:5)
#loc179 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":138:8)
#loc180 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":138:26)
#loc181 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":139:5)
#loc182 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":141:17)
#loc183 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":141:16)
#loc184 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":141:9)
#loc185 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":143:5)
#loc186 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":151:5)
#loc187 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":143:8)
#loc188 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":143:26)
#loc189 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":144:5)
#loc190 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":145:9)
#loc191 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":150:9)
#loc192 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":145:12)
#loc193 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":145:19)
#loc194 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":146:9)
#loc195 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":148:27)
#loc196 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":149:30)
#loc197 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_11.c":149:13)
#loc198 = loc(fused[#loc1, #loc2])
#loc199 = loc(fused[#loc3, #loc4])
#loc200 = loc(fused[#loc5, #loc6])
#loc201 = loc(fused[#loc8, #loc9])
#loc202 = loc(fused[#loc10, #loc11])
#loc203 = loc(fused[#loc12, #loc13])
#loc204 = loc(fused[#loc14, #loc15])
#loc205 = loc(fused[#loc17, #loc16])
#loc206 = loc(fused[#loc18, #loc19])
#loc207 = loc(fused[#loc20, #loc21])
#loc208 = loc(fused[#loc22, #loc19])
#loc209 = loc(fused[#loc25, #loc26])
#loc210 = loc(fused[#loc27, #loc28])
#loc211 = loc(fused[#loc29, #loc26])
#loc212 = loc(fused[#loc30, #loc31])
#loc213 = loc(fused[#loc32, #loc33])
#loc214 = loc(fused[#loc34, #loc31])
#loc215 = loc(fused[#loc38, #loc39])
#loc216 = loc(fused[#loc40, #loc41])
#loc217 = loc(fused[#loc42, #loc43])
#loc218 = loc(fused[#loc44, #loc45])
#loc219 = loc(fused[#loc46, #loc47])
#loc220 = loc(fused[#loc48, #loc49])
#loc221 = loc(fused[#loc50, #loc51])
#loc222 = loc(fused[#loc54, #loc55])
#loc223 = loc(fused[#loc56, #loc57])
#loc224 = loc(fused[#loc58, #loc59])
#loc225 = loc(fused[#loc61, #loc60])
#loc226 = loc(fused[#loc62, #loc63])
#loc227 = loc(fused[#loc64, #loc65])
#loc228 = loc(fused[#loc66, #loc63])
#loc229 = loc(fused[#loc70, #loc71])
#loc230 = loc(fused[#loc72, #loc73])
#loc231 = loc(fused[#loc74, #loc75, #loc76, #loc71])
#loc232 = loc(fused[#loc78, #loc79])
#loc233 = loc(fused[#loc80, #loc81])
#loc234 = loc(fused[#loc82, #loc79])
#loc235 = loc(fused[#loc83, #loc84])
#loc236 = loc(fused[#loc86, #loc87])
#loc237 = loc(fused[#loc85, #loc88])
#loc238 = loc(fused[#loc89, #loc90, #loc91, #loc84])
#loc239 = loc(fused[#loc96, #loc97])
#loc240 = loc(fused[#loc98, #loc99])
#loc241 = loc(fused[#loc100, #loc101])
#loc242 = loc(fused[#loc103, #loc102])
#loc243 = loc(fused[#loc104, #loc105])
#loc244 = loc(fused[#loc106, #loc107])
#loc245 = loc(fused[#loc108, #loc105])
#loc246 = loc(fused[#loc112, #loc113])
#loc247 = loc(fused[#loc114, #loc115])
#loc248 = loc(fused[#loc116, #loc113])
#loc249 = loc(fused[#loc117, #loc118])
#loc250 = loc(fused[#loc119, #loc120])
#loc251 = loc(fused[#loc121, #loc118])
#loc252 = loc(fused[#loc122, #loc123])
#loc253 = loc(fused[#loc125, #loc126])
#loc254 = loc(fused[#loc124, #loc127])
#loc255 = loc(fused[#loc128, #loc129, #loc130, #loc123])
#loc256 = loc(fused[#loc136, #loc137])
#loc257 = loc(fused[#loc138, #loc139])
#loc258 = loc(fused[#loc140, #loc141])
#loc259 = loc(fused[#loc143, #loc142])
#loc260 = loc(fused[#loc144, #loc145])
#loc261 = loc(fused[#loc146, #loc147])
#loc262 = loc(fused[#loc148, #loc149, #loc150, #loc145])
#loc263 = loc(fused[#loc155, #loc153])
#loc264 = loc(fused[#loc156, #loc157])
#loc265 = loc(fused[#loc158, #loc159])
#loc266 = loc(fused[#loc160, #loc157])
#loc267 = loc(fused[#loc161, #loc162])
#loc268 = loc(fused[#loc163, #loc164])
#loc269 = loc(fused[#loc165, #loc162])
#loc270 = loc(fused[#loc169, #loc170])
#loc271 = loc(fused[#loc171, #loc172])
#loc272 = loc(fused[#loc173, #loc174])
#loc273 = loc(fused[#loc176, #loc175])
#loc274 = loc(fused[#loc177, #loc178])
#loc275 = loc(fused[#loc179, #loc180])
#loc276 = loc(fused[#loc181, #loc178])
#loc277 = loc(fused[#loc184, #loc182])
#loc278 = loc(fused[#loc185, #loc186])
#loc279 = loc(fused[#loc187, #loc188])
#loc280 = loc(fused[#loc189, #loc186])
#loc281 = loc(fused[#loc190, #loc191])
#loc282 = loc(fused[#loc192, #loc193])
#loc283 = loc(fused[#loc194, #loc191])
