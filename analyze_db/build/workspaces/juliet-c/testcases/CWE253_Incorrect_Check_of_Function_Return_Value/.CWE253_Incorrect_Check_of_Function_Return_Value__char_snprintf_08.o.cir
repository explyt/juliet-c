!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\0A\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"string\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc4)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc105)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"snprintf failed!\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc108)
      %1 = cir.call %0() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc12)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc12)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc111)
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc112)
          %5 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc111)
          cir.store %5, %3 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc111)
          %6 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc20)
          cir.store %6, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc112)
          cir.scope {
            %7 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc23)
            %8 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc24)
            %9 = cir.const #cir.int<100> : !s32i loc(#loc25)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc25)
            %11 = cir.const #cir.int<6> : !u64i loc(#loc114)
            %12 = cir.binop(sub, %10, %11) : !u64i loc(#loc115)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc28)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc28)
            %15 = cir.binop(sub, %12, %14) : !u64i loc(#loc116)
            %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc3)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc3)
            %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc4)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc4)
            %20 = cir.call @snprintf(%8, %15, %17, %19) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc23)
            %21 = cir.const #cir.int<0> : !s32i loc(#loc29)
            %22 = cir.cmp(eq, %20, %21) : !s32i, !cir.bool loc(#loc117)
            cir.if %22 {
              %23 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc7)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc7)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc31)
            } loc(#loc118)
          } loc(#loc113)
        } loc(#loc110)
      } loc(#loc109)
    } loc(#loc107)
    cir.return loc(#loc9)
  } loc(#loc106)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc120)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc121)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    cir.return loc(#loc33)
  } loc(#loc119)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc39)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc40)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc123)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc123)
    cir.return %2 : !s32i loc(#loc123)
  } loc(#loc122)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc42)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc126)
      %1 = cir.call %0() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc47)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc47)
      cir.if %2 {
        %3 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc42)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc42)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc52)
      } else {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc129)
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc130)
          %5 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc129)
          cir.store %5, %3 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc129)
          %6 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc58)
          cir.store %6, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc130)
          cir.scope {
            %7 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc61)
            %8 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
            %9 = cir.const #cir.int<100> : !s32i loc(#loc63)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc63)
            %11 = cir.const #cir.int<6> : !u64i loc(#loc132)
            %12 = cir.binop(sub, %10, %11) : !u64i loc(#loc133)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc66)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc66)
            %15 = cir.binop(sub, %12, %14) : !u64i loc(#loc134)
            %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc67)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc67)
            %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc68)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc68)
            %20 = cir.call @snprintf(%8, %15, %17, %19) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc61)
            %21 = cir.const #cir.int<0> : !s32i loc(#loc69)
            %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc135)
            cir.if %22 {
              %23 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc71)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc71)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc72)
            } loc(#loc136)
          } loc(#loc131)
        } loc(#loc128)
      } loc(#loc127)
    } loc(#loc125)
    cir.return loc(#loc44)
  } loc(#loc124)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc74)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc75)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc138)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc138)
    cir.return %2 : !s32i loc(#loc138)
  } loc(#loc137)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc141)
      %1 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc81)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc81)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc144)
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc145)
          %5 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc144)
          cir.store %5, %3 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc144)
          %6 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc89)
          cir.store %6, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc145)
          cir.scope {
            %7 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc92)
            %8 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc93)
            %9 = cir.const #cir.int<100> : !s32i loc(#loc94)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc94)
            %11 = cir.const #cir.int<6> : !u64i loc(#loc147)
            %12 = cir.binop(sub, %10, %11) : !u64i loc(#loc148)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc97)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc97)
            %15 = cir.binop(sub, %12, %14) : !u64i loc(#loc149)
            %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc98)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc98)
            %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc99)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc99)
            %20 = cir.call @snprintf(%8, %15, %17, %19) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc92)
            %21 = cir.const #cir.int<0> : !s32i loc(#loc100)
            %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc150)
            cir.if %22 {
              %23 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc102)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc102)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc103)
            } loc(#loc151)
          } loc(#loc146)
        } loc(#loc143)
      } loc(#loc142)
    } loc(#loc140)
    cir.return loc(#loc78)
  } loc(#loc139)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":0:0)
#loc1 = loc("/usr/include/stdio.h":385:1)
#loc2 = loc("/usr/include/stdio.h":387:62)
#loc3 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":56:57)
#loc4 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":56:65)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":58:27)
#loc8 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":45:1)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":62:1)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":47:5)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":61:5)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":47:8)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":47:26)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":48:5)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":49:9)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":60:9)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":52:13)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":52:36)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":53:13)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":53:27)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":56:13)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":59:13)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":56:17)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":56:26)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":56:31)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":56:35)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":56:52)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":56:54)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":56:80)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":57:13)
#loc31 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":58:17)
#loc32 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":111:1)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":115:1)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":113:5)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":113:11)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":114:5)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":114:11)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":33:1)
#loc39 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":36:1)
#loc40 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":35:12)
#loc41 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":35:5)
#loc42 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":74:19)
#loc43 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":69:1)
#loc44 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":90:1)
#loc45 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":71:5)
#loc46 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":89:5)
#loc47 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":71:8)
#loc48 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":71:27)
#loc49 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":72:5)
#loc50 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":75:5)
#loc51 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":77:5)
#loc52 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":74:9)
#loc53 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":78:9)
#loc54 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":88:9)
#loc55 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":81:13)
#loc56 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":81:36)
#loc57 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":82:13)
#loc58 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":82:27)
#loc59 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":84:13)
#loc60 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":87:13)
#loc61 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":84:17)
#loc62 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":84:26)
#loc63 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":84:31)
#loc64 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":84:35)
#loc65 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":84:52)
#loc66 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":84:54)
#loc67 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":84:57)
#loc68 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":84:65)
#loc69 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":84:79)
#loc70 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":85:13)
#loc71 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":86:27)
#loc72 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":86:17)
#loc73 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":38:1)
#loc74 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":41:1)
#loc75 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":40:12)
#loc76 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":40:5)
#loc77 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":93:1)
#loc78 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":109:1)
#loc79 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":95:5)
#loc80 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":108:5)
#loc81 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":95:8)
#loc82 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":95:26)
#loc83 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":96:5)
#loc84 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":97:9)
#loc85 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":107:9)
#loc86 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":100:13)
#loc87 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":100:36)
#loc88 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":101:13)
#loc89 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":101:27)
#loc90 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":103:13)
#loc91 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":106:13)
#loc92 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":103:17)
#loc93 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":103:26)
#loc94 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":103:31)
#loc95 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":103:35)
#loc96 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":103:52)
#loc97 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":103:54)
#loc98 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":103:57)
#loc99 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":103:65)
#loc100 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":103:79)
#loc101 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":104:13)
#loc102 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":105:27)
#loc103 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_08.c":105:17)
#loc104 = loc(fused[#loc1, #loc2])
#loc105 = loc(fused[#loc5, #loc6])
#loc106 = loc(fused[#loc8, #loc9])
#loc107 = loc(fused[#loc10, #loc11])
#loc108 = loc(fused[#loc12, #loc13])
#loc109 = loc(fused[#loc14, #loc11])
#loc110 = loc(fused[#loc15, #loc16])
#loc111 = loc(fused[#loc17, #loc18])
#loc112 = loc(fused[#loc19, #loc20])
#loc113 = loc(fused[#loc21, #loc22])
#loc114 = loc(fused[#loc26, #loc27])
#loc115 = loc(fused[#loc25, #loc27])
#loc116 = loc(fused[#loc25, #loc28])
#loc117 = loc(fused[#loc23, #loc29])
#loc118 = loc(fused[#loc30, #loc22])
#loc119 = loc(fused[#loc32, #loc33])
#loc120 = loc(fused[#loc34, #loc35])
#loc121 = loc(fused[#loc36, #loc37])
#loc122 = loc(fused[#loc38, #loc39])
#loc123 = loc(fused[#loc41, #loc40])
#loc124 = loc(fused[#loc43, #loc44])
#loc125 = loc(fused[#loc45, #loc46])
#loc126 = loc(fused[#loc47, #loc48])
#loc127 = loc(fused[#loc49, #loc50, #loc51, #loc46])
#loc128 = loc(fused[#loc53, #loc54])
#loc129 = loc(fused[#loc55, #loc56])
#loc130 = loc(fused[#loc57, #loc58])
#loc131 = loc(fused[#loc59, #loc60])
#loc132 = loc(fused[#loc64, #loc65])
#loc133 = loc(fused[#loc63, #loc65])
#loc134 = loc(fused[#loc63, #loc66])
#loc135 = loc(fused[#loc61, #loc69])
#loc136 = loc(fused[#loc70, #loc60])
#loc137 = loc(fused[#loc73, #loc74])
#loc138 = loc(fused[#loc76, #loc75])
#loc139 = loc(fused[#loc77, #loc78])
#loc140 = loc(fused[#loc79, #loc80])
#loc141 = loc(fused[#loc81, #loc82])
#loc142 = loc(fused[#loc83, #loc80])
#loc143 = loc(fused[#loc84, #loc85])
#loc144 = loc(fused[#loc86, #loc87])
#loc145 = loc(fused[#loc88, #loc89])
#loc146 = loc(fused[#loc90, #loc91])
#loc147 = loc(fused[#loc95, #loc96])
#loc148 = loc(fused[#loc94, #loc96])
#loc149 = loc(fused[#loc94, #loc97])
#loc150 = loc(fused[#loc92, #loc100])
#loc151 = loc(fused[#loc101, #loc91])
