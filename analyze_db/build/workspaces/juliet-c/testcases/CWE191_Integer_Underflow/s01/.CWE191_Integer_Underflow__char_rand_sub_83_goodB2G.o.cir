!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":24:53)
#loc6 = loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":24:104)
#loc7 = loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":24:109)
#loc21 = loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":31:53)
!ty_CWE191_Integer_Underflow__char_rand_sub_833A3ACWE191_Integer_Underflow__char_rand_sub_83_goodB2G = !cir.record<class "CWE191_Integer_Underflow__char_rand_sub_83::CWE191_Integer_Underflow__char_rand_sub_83_goodB2G" {!s8i} #cir.record.decl.ast>
#loc38 = loc(fused[#loc6, #loc7])
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc36)
  cir.func @_ZN42CWE191_Integer_Underflow__char_rand_sub_8350CWE191_Integer_Underflow__char_rand_sub_83_goodB2GC2Ec(%arg0: !cir.ptr<!ty_CWE191_Integer_Underflow__char_rand_sub_833A3ACWE191_Integer_Underflow__char_rand_sub_83_goodB2G> loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":24:53), %arg1: !s8i loc(fused[#loc6, #loc7])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_CWE191_Integer_Underflow__char_rand_sub_833A3ACWE191_Integer_Underflow__char_rand_sub_83_goodB2G>, !cir.ptr<!cir.ptr<!ty_CWE191_Integer_Underflow__char_rand_sub_833A3ACWE191_Integer_Underflow__char_rand_sub_83_goodB2G>>, ["this", init] {alignment = 8 : i64} loc(#loc5)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["dataCopy", init] {alignment = 1 : i64} loc(#loc38)
    cir.store %arg0, %0 : !cir.ptr<!ty_CWE191_Integer_Underflow__char_rand_sub_833A3ACWE191_Integer_Underflow__char_rand_sub_83_goodB2G>, !cir.ptr<!cir.ptr<!ty_CWE191_Integer_Underflow__char_rand_sub_833A3ACWE191_Integer_Underflow__char_rand_sub_83_goodB2G>> loc(#loc8)
    cir.store %arg1, %1 : !s8i, !cir.ptr<!s8i> loc(#loc8)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_CWE191_Integer_Underflow__char_rand_sub_833A3ACWE191_Integer_Underflow__char_rand_sub_83_goodB2G>>, !cir.ptr<!ty_CWE191_Integer_Underflow__char_rand_sub_833A3ACWE191_Integer_Underflow__char_rand_sub_83_goodB2G> loc(#loc5)
    %3 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc9)
    %4 = cir.get_member %2[0] {name = "data"} : !cir.ptr<!ty_CWE191_Integer_Underflow__char_rand_sub_833A3ACWE191_Integer_Underflow__char_rand_sub_83_goodB2G> -> !cir.ptr<!s8i> loc(#loc10)
    cir.store %3, %4 : !s8i, !cir.ptr<!s8i> loc(#loc39)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc12)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc12)
    %9 = cir.ternary(%8, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc12)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc12)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc12)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc12)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc12)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc12)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc12)
      cir.yield %24 : !u32i loc(#loc12)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc12)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc12)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc12)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc12)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc12)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc12)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc12)
      %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc12)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc12)
      %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc12)
      %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc12)
      cir.yield %28 : !u32i loc(#loc12)
    }) : (!cir.bool) -> !u32i loc(#loc12)
    %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc12)
    %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc12)
    %12 = cir.get_member %2[0] {name = "data"} : !cir.ptr<!ty_CWE191_Integer_Underflow__char_rand_sub_833A3ACWE191_Integer_Underflow__char_rand_sub_83_goodB2G> -> !cir.ptr<!s8i> loc(#loc10)
    cir.store %11, %12 : !s8i, !cir.ptr<!s8i> loc(#loc40)
    cir.return loc(#loc4)
  } loc(#loc37)
  cir.func private @_ZN42CWE191_Integer_Underflow__char_rand_sub_8350CWE191_Integer_Underflow__char_rand_sub_83_goodB2GC1Ec(!cir.ptr<!ty_CWE191_Integer_Underflow__char_rand_sub_833A3ACWE191_Integer_Underflow__char_rand_sub_83_goodB2G>, !s8i) alias(@_ZN42CWE191_Integer_Underflow__char_rand_sub_8350CWE191_Integer_Underflow__char_rand_sub_83_goodB2GC2Ec) loc(#loc37)
  cir.func private @printHexCharLine(!s8i) loc(#loc41)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc18)
  cir.func @_ZN42CWE191_Integer_Underflow__char_rand_sub_8350CWE191_Integer_Underflow__char_rand_sub_83_goodB2GD2Ev(%arg0: !cir.ptr<!ty_CWE191_Integer_Underflow__char_rand_sub_833A3ACWE191_Integer_Underflow__char_rand_sub_83_goodB2G> loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":31:53)) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_CWE191_Integer_Underflow__char_rand_sub_833A3ACWE191_Integer_Underflow__char_rand_sub_83_goodB2G>, !cir.ptr<!cir.ptr<!ty_CWE191_Integer_Underflow__char_rand_sub_833A3ACWE191_Integer_Underflow__char_rand_sub_83_goodB2G>>, ["this", init] {alignment = 8 : i64} loc(#loc21)
    cir.store %arg0, %0 : !cir.ptr<!ty_CWE191_Integer_Underflow__char_rand_sub_833A3ACWE191_Integer_Underflow__char_rand_sub_83_goodB2G>, !cir.ptr<!cir.ptr<!ty_CWE191_Integer_Underflow__char_rand_sub_833A3ACWE191_Integer_Underflow__char_rand_sub_83_goodB2G>> loc(#loc22)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_CWE191_Integer_Underflow__char_rand_sub_833A3ACWE191_Integer_Underflow__char_rand_sub_83_goodB2G>>, !cir.ptr<!ty_CWE191_Integer_Underflow__char_rand_sub_833A3ACWE191_Integer_Underflow__char_rand_sub_83_goodB2G> loc(#loc21)
    cir.scope {
      %2 = cir.get_member %1[0] {name = "data"} : !cir.ptr<!ty_CWE191_Integer_Underflow__char_rand_sub_833A3ACWE191_Integer_Underflow__char_rand_sub_83_goodB2G> -> !cir.ptr<!s8i> loc(#loc10)
      %3 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc25)
      %4 = cir.cast(integral, %3 : !s8i), !s32i loc(#loc25)
      %5 = cir.const #cir.int<127> : !s32i loc(#loc26)
      %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc26)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc26)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc26)
      %9 = cir.cmp(gt, %4, %8) : !s32i, !cir.bool loc(#loc45)
      cir.if %9 {
        %10 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc47)
        %11 = cir.get_member %1[0] {name = "data"} : !cir.ptr<!ty_CWE191_Integer_Underflow__char_rand_sub_833A3ACWE191_Integer_Underflow__char_rand_sub_83_goodB2G> -> !cir.ptr<!s8i> loc(#loc10)
        %12 = cir.load %11 : !cir.ptr<!s8i>, !s8i loc(#loc32)
        %13 = cir.cast(integral, %12 : !s8i), !s32i loc(#loc32)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc31)
        %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc32)
        %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc32)
        cir.store %16, %10 : !s8i, !cir.ptr<!s8i> loc(#loc47)
        %17 = cir.load %10 : !cir.ptr<!s8i>, !s8i loc(#loc33)
        cir.call @printHexCharLine(%17) : (!s8i) -> () loc(#loc34)
      } else {
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc18)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc18)
        cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc35)
      } loc(#loc46)
    } loc(#loc44)
    cir.return loc(#loc20)
  } loc(#loc43)
  cir.func private @_ZN42CWE191_Integer_Underflow__char_rand_sub_8350CWE191_Integer_Underflow__char_rand_sub_83_goodB2GD1Ev(!cir.ptr<!ty_CWE191_Integer_Underflow__char_rand_sub_833A3ACWE191_Integer_Underflow__char_rand_sub_83_goodB2G>) alias(@_ZN42CWE191_Integer_Underflow__char_rand_sub_8350CWE191_Integer_Underflow__char_rand_sub_83_goodB2GD2Ev) loc(#loc43)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":24:1)
#loc4 = loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":29:1)
#loc8 = loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":25:1)
#loc9 = loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":26:12)
#loc10 = loc("./CWE191_Integer_Underflow__char_rand_sub_83.h":56:10)
#loc11 = loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":26:5)
#loc12 = loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":28:18)
#loc13 = loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":28:5)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc18 = loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":41:19)
#loc19 = loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":31:1)
#loc20 = loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":43:1)
#loc22 = loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":32:1)
#loc23 = loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":34:5)
#loc24 = loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":42:5)
#loc25 = loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":34:9)
#loc26 = loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":34:16)
#loc27 = loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":35:5)
#loc28 = loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":38:5)
#loc29 = loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":40:5)
#loc30 = loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":36:9)
#loc31 = loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":36:30)
#loc32 = loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":36:23)
#loc33 = loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":37:26)
#loc34 = loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":37:9)
#loc35 = loc("CWE191_Integer_Underflow__char_rand_sub_83_goodB2G.cpp":41:9)
#loc36 = loc(fused[#loc1, #loc2])
#loc37 = loc(fused[#loc3, #loc4])
#loc39 = loc(fused[#loc11, #loc9])
#loc40 = loc(fused[#loc13, #loc12])
#loc41 = loc(fused[#loc14, #loc15])
#loc42 = loc(fused[#loc16, #loc17])
#loc43 = loc(fused[#loc19, #loc20])
#loc44 = loc(fused[#loc23, #loc24])
#loc45 = loc(fused[#loc25, #loc26])
#loc46 = loc(fused[#loc27, #loc28, #loc29, #loc24])
#loc47 = loc(fused[#loc30, #loc31])
