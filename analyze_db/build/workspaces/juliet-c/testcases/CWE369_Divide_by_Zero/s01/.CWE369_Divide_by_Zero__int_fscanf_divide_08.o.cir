!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fscanf_divide_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc166)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc167)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc168)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fscanf_divide_08_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc170)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc171)
    cir.br ^bb1 loc(#loc172)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc173)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc17)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc174)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc20)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc167)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc21)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc20)
    cir.br ^bb3 loc(#loc16)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc16)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc175)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc176)
    %13 = cir.call %12() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc24)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc24)
    cir.brcond %14 ^bb6, ^bb7 loc(#loc177)
  ^bb6:  // pred: ^bb5
    %15 = cir.const #cir.int<100> : !s32i loc(#loc27)
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    %17 = cir.binop(div, %15, %16) : !s32i loc(#loc178)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc29)
    cir.br ^bb7 loc(#loc23)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc23)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc9)
  } loc(#loc169)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fscanf_divide_08_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc180)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc181)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc182)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc183)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    cir.return loc(#loc31)
  } loc(#loc179)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc41)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc42)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc185)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc185)
    cir.return %2 : !s32i loc(#loc185)
  } loc(#loc184)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc186)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc47)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc188)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc53)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc189)
    cir.br ^bb1 loc(#loc190)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc191)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc57)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc57)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc192)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc60)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc167)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc61)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc62)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc62)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc60)
    cir.br ^bb3 loc(#loc56)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc56)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc193)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc194)
    %13 = cir.call %12() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc65)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc65)
    cir.brcond %14 ^bb6, ^bb7 loc(#loc195)
  ^bb6:  // pred: ^bb5
    %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc46)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    cir.br ^bb13 loc(#loc68)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc196)
  ^bb8:  // pred: ^bb7
    %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
    %18 = cir.const #cir.int<0> : !s32i loc(#loc74)
    %19 = cir.cmp(ne, %17, %18) : !s32i, !cir.bool loc(#loc197)
    cir.brcond %19 ^bb9, ^bb10 loc(#loc198)
  ^bb9:  // pred: ^bb8
    %20 = cir.const #cir.int<100> : !s32i loc(#loc78)
    %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
    %22 = cir.binop(div, %20, %21) : !s32i loc(#loc199)
    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc80)
    cir.br ^bb11 loc(#loc76)
  ^bb10:  // pred: ^bb8
    %23 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc47)
    %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    cir.br ^bb11 loc(#loc72)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc72)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc64)
  ^bb13:  // 2 preds: ^bb6, ^bb12
    cir.br ^bb14 loc(#loc64)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc49)
  } loc(#loc187)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc83)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc84)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc201)
    cir.return %2 : !s32i loc(#loc201)
  } loc(#loc200)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc203)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc91)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    cir.br ^bb1 loc(#loc205)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc206)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc95)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc95)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc207)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc98)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc167)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc99)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc100)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc100)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc98)
    cir.br ^bb3 loc(#loc94)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc94)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc208)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc209)
    %13 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc103)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc103)
    cir.brcond %14 ^bb6, ^bb12 loc(#loc210)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc211)
  ^bb7:  // pred: ^bb6
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc108)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc109)
    %17 = cir.cmp(ne, %15, %16) : !s32i, !cir.bool loc(#loc212)
    cir.brcond %17 ^bb8, ^bb9 loc(#loc213)
  ^bb8:  // pred: ^bb7
    %18 = cir.const #cir.int<100> : !s32i loc(#loc113)
    %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc114)
    %20 = cir.binop(div, %18, %19) : !s32i loc(#loc214)
    cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc115)
    cir.br ^bb10 loc(#loc111)
  ^bb9:  // pred: ^bb7
    %21 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc116)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc116)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc117)
    cir.br ^bb10 loc(#loc107)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc107)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc102)
  ^bb12:  // 2 preds: ^bb5, ^bb11
    cir.br ^bb13 loc(#loc102)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc87)
  } loc(#loc202)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc216)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc122)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc123)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc217)
    cir.br ^bb1 loc(#loc218)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc219)
    %4 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc127)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc127)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc220)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc132)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc132)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc133)
    cir.br ^bb4 loc(#loc130)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<7> : !s32i loc(#loc134)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc221)
    cir.br ^bb4 loc(#loc126)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc126)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc222)
  ^bb6:  // pred: ^bb5
    %9 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc223)
    %10 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc138)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc138)
    cir.brcond %11 ^bb7, ^bb8 loc(#loc224)
  ^bb7:  // pred: ^bb6
    %12 = cir.const #cir.int<100> : !s32i loc(#loc141)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc142)
    %14 = cir.binop(div, %12, %13) : !s32i loc(#loc225)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc143)
    cir.br ^bb8 loc(#loc137)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc137)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc119)
  } loc(#loc215)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc227)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc148)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc149)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc228)
    cir.br ^bb1 loc(#loc229)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc230)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc153)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc153)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc231)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<7> : !s32i loc(#loc156)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc232)
    cir.br ^bb3 loc(#loc152)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc152)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc233)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc234)
    %8 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc160)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc160)
    cir.brcond %9 ^bb6, ^bb7 loc(#loc235)
  ^bb6:  // pred: ^bb5
    %10 = cir.const #cir.int<100> : !s32i loc(#loc163)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc164)
    %12 = cir.binop(div, %10, %11) : !s32i loc(#loc236)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc165)
    cir.br ^bb7 loc(#loc159)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc159)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc145)
  } loc(#loc226)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fscanf_divide_08.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":43:23)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":35:1)
#loc9 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":50:1)
#loc10 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":37:5)
#loc11 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":37:9)
#loc12 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":39:13)
#loc13 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":39:12)
#loc14 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":39:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":40:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":44:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":40:8)
#loc18 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":40:26)
#loc19 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":41:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":43:9)
#loc21 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":43:16)
#loc22 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":45:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":49:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":45:8)
#loc25 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":45:26)
#loc26 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":46:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":48:22)
#loc28 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":48:28)
#loc29 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":48:9)
#loc30 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":152:1)
#loc31 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":158:1)
#loc32 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":154:5)
#loc33 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":154:14)
#loc34 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":155:5)
#loc35 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":155:14)
#loc36 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":156:5)
#loc37 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":156:14)
#loc38 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":157:5)
#loc39 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":157:14)
#loc40 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":23:1)
#loc41 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":26:1)
#loc42 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":25:12)
#loc43 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":25:5)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":70:19)
#loc47 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":81:23)
#loc48 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":57:1)
#loc49 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":84:1)
#loc50 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":59:5)
#loc51 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":59:9)
#loc52 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":61:13)
#loc53 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":61:12)
#loc54 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":61:5)
#loc55 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":62:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":66:5)
#loc57 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":62:8)
#loc58 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":62:26)
#loc59 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":63:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":65:9)
#loc61 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":65:16)
#loc62 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":65:23)
#loc63 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":67:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":83:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":67:8)
#loc66 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":67:27)
#loc67 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":68:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":71:5)
#loc69 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":73:5)
#loc70 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":70:9)
#loc71 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":75:9)
#loc72 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":82:9)
#loc73 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":75:13)
#loc74 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":75:21)
#loc75 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":76:9)
#loc76 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":78:9)
#loc77 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":80:9)
#loc78 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":77:26)
#loc79 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":77:32)
#loc80 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":77:13)
#loc81 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":81:13)
#loc82 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":28:1)
#loc83 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":31:1)
#loc84 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":30:12)
#loc85 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":30:5)
#loc86 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":87:1)
#loc87 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":109:1)
#loc88 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":89:5)
#loc89 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":89:9)
#loc90 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":91:13)
#loc91 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":91:12)
#loc92 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":91:5)
#loc93 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":92:5)
#loc94 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":96:5)
#loc95 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":92:8)
#loc96 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":92:26)
#loc97 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":93:5)
#loc98 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":95:9)
#loc99 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":95:16)
#loc100 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":95:23)
#loc101 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":97:5)
#loc102 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":108:5)
#loc103 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":97:8)
#loc104 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":97:26)
#loc105 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":98:5)
#loc106 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":100:9)
#loc107 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":107:9)
#loc108 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":100:13)
#loc109 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":100:21)
#loc110 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":101:9)
#loc111 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":103:9)
#loc112 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":105:9)
#loc113 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":102:26)
#loc114 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":102:32)
#loc115 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":102:13)
#loc116 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":106:23)
#loc117 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":106:13)
#loc118 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":112:1)
#loc119 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":132:1)
#loc120 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":114:5)
#loc121 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":114:9)
#loc122 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":116:13)
#loc123 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":116:12)
#loc124 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":116:5)
#loc125 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":117:5)
#loc126 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":126:5)
#loc127 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":117:8)
#loc128 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":117:27)
#loc129 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":118:5)
#loc130 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":121:5)
#loc131 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":123:5)
#loc132 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":120:19)
#loc133 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":120:9)
#loc134 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":125:16)
#loc135 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":125:9)
#loc136 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":127:5)
#loc137 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":131:5)
#loc138 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":127:8)
#loc139 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":127:26)
#loc140 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":128:5)
#loc141 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":130:22)
#loc142 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":130:28)
#loc143 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":130:9)
#loc144 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":135:1)
#loc145 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":150:1)
#loc146 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":137:5)
#loc147 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":137:9)
#loc148 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":139:13)
#loc149 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":139:12)
#loc150 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":139:5)
#loc151 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":140:5)
#loc152 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":144:5)
#loc153 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":140:8)
#loc154 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":140:26)
#loc155 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":141:5)
#loc156 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":143:16)
#loc157 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":143:9)
#loc158 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":145:5)
#loc159 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":149:5)
#loc160 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":145:8)
#loc161 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":145:26)
#loc162 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":146:5)
#loc163 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":148:22)
#loc164 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":148:28)
#loc165 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_08.c":148:9)
#loc166 = loc(fused[#loc1, #loc2])
#loc167 = loc(fused[#loc3, #loc4])
#loc168 = loc(fused[#loc6, #loc7])
#loc169 = loc(fused[#loc8, #loc9])
#loc170 = loc(fused[#loc10, #loc11])
#loc171 = loc(fused[#loc14, #loc12])
#loc172 = loc(fused[#loc15, #loc16])
#loc173 = loc(fused[#loc17, #loc18])
#loc174 = loc(fused[#loc19, #loc16])
#loc175 = loc(fused[#loc22, #loc23])
#loc176 = loc(fused[#loc24, #loc25])
#loc177 = loc(fused[#loc26, #loc23])
#loc178 = loc(fused[#loc27, #loc28])
#loc179 = loc(fused[#loc30, #loc31])
#loc180 = loc(fused[#loc32, #loc33])
#loc181 = loc(fused[#loc34, #loc35])
#loc182 = loc(fused[#loc36, #loc37])
#loc183 = loc(fused[#loc38, #loc39])
#loc184 = loc(fused[#loc40, #loc41])
#loc185 = loc(fused[#loc43, #loc42])
#loc186 = loc(fused[#loc44, #loc45])
#loc187 = loc(fused[#loc48, #loc49])
#loc188 = loc(fused[#loc50, #loc51])
#loc189 = loc(fused[#loc54, #loc52])
#loc190 = loc(fused[#loc55, #loc56])
#loc191 = loc(fused[#loc57, #loc58])
#loc192 = loc(fused[#loc59, #loc56])
#loc193 = loc(fused[#loc63, #loc64])
#loc194 = loc(fused[#loc65, #loc66])
#loc195 = loc(fused[#loc67, #loc68, #loc69, #loc64])
#loc196 = loc(fused[#loc71, #loc72])
#loc197 = loc(fused[#loc73, #loc74])
#loc198 = loc(fused[#loc75, #loc76, #loc77, #loc72])
#loc199 = loc(fused[#loc78, #loc79])
#loc200 = loc(fused[#loc82, #loc83])
#loc201 = loc(fused[#loc85, #loc84])
#loc202 = loc(fused[#loc86, #loc87])
#loc203 = loc(fused[#loc88, #loc89])
#loc204 = loc(fused[#loc92, #loc90])
#loc205 = loc(fused[#loc93, #loc94])
#loc206 = loc(fused[#loc95, #loc96])
#loc207 = loc(fused[#loc97, #loc94])
#loc208 = loc(fused[#loc101, #loc102])
#loc209 = loc(fused[#loc103, #loc104])
#loc210 = loc(fused[#loc105, #loc102])
#loc211 = loc(fused[#loc106, #loc107])
#loc212 = loc(fused[#loc108, #loc109])
#loc213 = loc(fused[#loc110, #loc111, #loc112, #loc107])
#loc214 = loc(fused[#loc113, #loc114])
#loc215 = loc(fused[#loc118, #loc119])
#loc216 = loc(fused[#loc120, #loc121])
#loc217 = loc(fused[#loc124, #loc122])
#loc218 = loc(fused[#loc125, #loc126])
#loc219 = loc(fused[#loc127, #loc128])
#loc220 = loc(fused[#loc129, #loc130, #loc131, #loc126])
#loc221 = loc(fused[#loc135, #loc134])
#loc222 = loc(fused[#loc136, #loc137])
#loc223 = loc(fused[#loc138, #loc139])
#loc224 = loc(fused[#loc140, #loc137])
#loc225 = loc(fused[#loc141, #loc142])
#loc226 = loc(fused[#loc144, #loc145])
#loc227 = loc(fused[#loc146, #loc147])
#loc228 = loc(fused[#loc150, #loc148])
#loc229 = loc(fused[#loc151, #loc152])
#loc230 = loc(fused[#loc153, #loc154])
#loc231 = loc(fused[#loc155, #loc152])
#loc232 = loc(fused[#loc157, #loc156])
#loc233 = loc(fused[#loc158, #loc159])
#loc234 = loc(fused[#loc160, #loc161])
#loc235 = loc(fused[#loc162, #loc159])
#loc236 = loc(fused[#loc163, #loc164])
