!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int64_t_calloc_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc214)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc215)
  cir.func private  @printLongLongLine(!s64i) loc(#loc216)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc217)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto  @CWE401_Memory_Leak__int64_t_calloc_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc219)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc14)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc220)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc18)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc19)
        %4 = cir.const #cir.int<100> : !s32i loc(#loc20)
        %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc20)
        %6 = cir.const #cir.int<8> : !u64i loc(#loc222)
        %7 = cir.call @calloc(%5, %6) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc19)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc223)
        cir.store %8, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc224)
        cir.scope {
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc27)
          %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc28)
          %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s64i>, !s32i loc(#loc226)
          %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc29)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc31)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc32)
            %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc33)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc31)
          } loc(#loc227)
        } loc(#loc225)
        %9 = cir.const #cir.int<5> : !s64i loc(#loc34)
        %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc35)
        %11 = cir.const #cir.int<0> : !s32i loc(#loc36)
        %12 = cir.ptr_stride(%10 : !cir.ptr<!s64i>, %11 : !s32i), !cir.ptr<!s64i> loc(#loc37)
        cir.store %9, %12 : !s64i, !cir.ptr<!s64i> loc(#loc228)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc38)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc39)
        %15 = cir.ptr_stride(%13 : !cir.ptr<!s64i>, %14 : !s32i), !cir.ptr<!s64i> loc(#loc40)
        %16 = cir.load %15 : !cir.ptr<!s64i>, !s64i loc(#loc38)
        cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc41)
        cir.break loc(#loc42)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc9)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc9)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc43)
        cir.break loc(#loc44)
      }
      ] loc(#loc16)
    } loc(#loc221)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc47)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.break loc(#loc48)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc49)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc49)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc50)
        cir.break loc(#loc51)
      }
      ] loc(#loc45)
    } loc(#loc229)
    cir.return loc(#loc11)
  } loc(#loc218)
  cir.func no_proto  @CWE401_Memory_Leak__int64_t_calloc_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc231)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc54)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc232)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc56)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc233)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc234)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc60)
    cir.return loc(#loc53)
  } loc(#loc230)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc235)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc237)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc68)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc238)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc72)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc73)
        %4 = cir.const #cir.int<100> : !s32i loc(#loc74)
        %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc74)
        %6 = cir.const #cir.int<8> : !u64i loc(#loc240)
        %7 = cir.call @calloc(%5, %6) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc73)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc241)
        cir.store %8, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc242)
        cir.scope {
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc81)
          %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc82)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc82)
          %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s64i>, !s32i loc(#loc244)
          %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc83)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc85)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc86)
            %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc87)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc85)
          } loc(#loc245)
        } loc(#loc243)
        %9 = cir.const #cir.int<5> : !s64i loc(#loc88)
        %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc89)
        %11 = cir.const #cir.int<0> : !s32i loc(#loc90)
        %12 = cir.ptr_stride(%10 : !cir.ptr<!s64i>, %11 : !s32i), !cir.ptr<!s64i> loc(#loc91)
        cir.store %9, %12 : !s64i, !cir.ptr<!s64i> loc(#loc246)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc92)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc93)
        %15 = cir.ptr_stride(%13 : !cir.ptr<!s64i>, %14 : !s32i), !cir.ptr<!s64i> loc(#loc94)
        %16 = cir.load %15 : !cir.ptr<!s64i>, !s64i loc(#loc92)
        cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc95)
        cir.break loc(#loc96)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc97)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc97)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc98)
        cir.break loc(#loc99)
      }
      ] loc(#loc70)
    } loc(#loc239)
    cir.scope {
      %2 = cir.const #cir.int<8> : !s32i loc(#loc102)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc103)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc103)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc104)
        cir.break loc(#loc105)
      },
      case (default) {
        %3 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc106)
        %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc107)
        %5 = cir.cast(bitcast, %4 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc107)
        cir.call @free(%5) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc106)
        cir.break loc(#loc108)
      }
      ] loc(#loc100)
    } loc(#loc247)
    cir.return loc(#loc65)
  } loc(#loc236)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc249)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc113)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc250)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc117)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc118)
        %4 = cir.const #cir.int<100> : !s32i loc(#loc119)
        %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc119)
        %6 = cir.const #cir.int<8> : !u64i loc(#loc252)
        %7 = cir.call @calloc(%5, %6) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc118)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc253)
        cir.store %8, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc254)
        cir.scope {
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc126)
          %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc127)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc127)
          %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s64i>, !s32i loc(#loc256)
          %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc128)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc130)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc131)
            %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc132)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc130)
          } loc(#loc257)
        } loc(#loc255)
        %9 = cir.const #cir.int<5> : !s64i loc(#loc133)
        %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc134)
        %11 = cir.const #cir.int<0> : !s32i loc(#loc135)
        %12 = cir.ptr_stride(%10 : !cir.ptr<!s64i>, %11 : !s32i), !cir.ptr<!s64i> loc(#loc136)
        cir.store %9, %12 : !s64i, !cir.ptr<!s64i> loc(#loc258)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc137)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc138)
        %15 = cir.ptr_stride(%13 : !cir.ptr<!s64i>, %14 : !s32i), !cir.ptr<!s64i> loc(#loc139)
        %16 = cir.load %15 : !cir.ptr<!s64i>, !s64i loc(#loc137)
        cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc140)
        cir.break loc(#loc141)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc142)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc142)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc143)
        cir.break loc(#loc144)
      }
      ] loc(#loc115)
    } loc(#loc251)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc147)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        %3 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc148)
        %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc149)
        %5 = cir.cast(bitcast, %4 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc149)
        cir.call @free(%5) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc148)
        cir.break loc(#loc150)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc151)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc151)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc152)
        cir.break loc(#loc153)
      }
      ] loc(#loc145)
    } loc(#loc259)
    cir.return loc(#loc110)
  } loc(#loc248)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc261)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc158)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc262)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc162)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc163)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc163)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc164)
        cir.break loc(#loc165)
      },
      case (default) {
        %3 = cir.const #cir.int<100> : !s32i loc(#loc166)
        %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc166)
        %5 = cir.const #cir.int<8> : !u64i loc(#loc166)
        %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc166)
        %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc166)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc166)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc166)
        cir.store %9, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc264)
        %10 = cir.const #cir.int<5> : !s64i loc(#loc168)
        %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc169)
        %12 = cir.const #cir.int<0> : !s32i loc(#loc170)
        %13 = cir.ptr_stride(%11 : !cir.ptr<!s64i>, %12 : !s32i), !cir.ptr<!s64i> loc(#loc171)
        cir.store %10, %13 : !s64i, !cir.ptr<!s64i> loc(#loc265)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc172)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc173)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s64i>, %15 : !s32i), !cir.ptr<!s64i> loc(#loc174)
        %17 = cir.load %16 : !cir.ptr<!s64i>, !s64i loc(#loc172)
        cir.call @printLongLongLine(%17) : (!s64i) -> () loc(#loc175)
        cir.break loc(#loc176)
      }
      ] loc(#loc160)
    } loc(#loc263)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc179)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.break loc(#loc180)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc181)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc181)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc182)
        cir.break loc(#loc183)
      }
      ] loc(#loc177)
    } loc(#loc266)
    cir.return loc(#loc155)
  } loc(#loc260)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc268)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc188)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc269)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc192)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.const #cir.int<100> : !s32i loc(#loc193)
        %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc193)
        %5 = cir.const #cir.int<8> : !u64i loc(#loc193)
        %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc193)
        %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc193)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc193)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc193)
        cir.store %9, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc271)
        %10 = cir.const #cir.int<5> : !s64i loc(#loc195)
        %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc196)
        %12 = cir.const #cir.int<0> : !s32i loc(#loc197)
        %13 = cir.ptr_stride(%11 : !cir.ptr<!s64i>, %12 : !s32i), !cir.ptr<!s64i> loc(#loc198)
        cir.store %10, %13 : !s64i, !cir.ptr<!s64i> loc(#loc272)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc199)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc200)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s64i>, %15 : !s32i), !cir.ptr<!s64i> loc(#loc201)
        %17 = cir.load %16 : !cir.ptr<!s64i>, !s64i loc(#loc199)
        cir.call @printLongLongLine(%17) : (!s64i) -> () loc(#loc202)
        cir.break loc(#loc203)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc204)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc204)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc205)
        cir.break loc(#loc206)
      }
      ] loc(#loc190)
    } loc(#loc270)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc209)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.break loc(#loc210)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc211)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc211)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc212)
        cir.break loc(#loc213)
      }
      ] loc(#loc207)
    } loc(#loc273)
    cir.return loc(#loc185)
  } loc(#loc267)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int64_t_calloc_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":675:1)
#loc2 = loc("/usr/include/stdlib.h":676:14)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":40:19)
#loc10 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":24:1)
#loc11 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":54:1)
#loc12 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":26:5)
#loc13 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":26:15)
#loc14 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":27:12)
#loc15 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":27:5)
#loc16 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":28:5)
#loc17 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":42:5)
#loc18 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":28:12)
#loc19 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":32:27)
#loc20 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":32:34)
#loc21 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":32:39)
#loc22 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":32:53)
#loc23 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":32:54)
#loc24 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":32:9)
#loc25 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":33:9)
#loc26 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":33:37)
#loc27 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":33:13)
#loc28 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":33:21)
#loc29 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":33:18)
#loc30 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":33:27)
#loc31 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":33:28)
#loc32 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":33:34)
#loc33 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":33:33)
#loc34 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":35:19)
#loc35 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":35:9)
#loc36 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":35:14)
#loc37 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":35:15)
#loc38 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":36:27)
#loc39 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":36:32)
#loc40 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":36:33)
#loc41 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":36:9)
#loc42 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":37:9)
#loc43 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":40:9)
#loc44 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":41:9)
#loc45 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":43:5)
#loc46 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":53:5)
#loc47 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":43:12)
#loc48 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":48:9)
#loc49 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":51:19)
#loc50 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":51:9)
#loc51 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":52:9)
#loc52 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":190:1)
#loc53 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":196:1)
#loc54 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":192:5)
#loc55 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":192:14)
#loc56 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":193:5)
#loc57 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":193:14)
#loc58 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":194:5)
#loc59 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":194:14)
#loc60 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":195:5)
#loc61 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":195:14)
#loc62 = loc("/usr/include/stdlib.h":687:1)
#loc63 = loc("/usr/include/stdlib.h":687:32)
#loc64 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":61:1)
#loc65 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":91:1)
#loc66 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":63:5)
#loc67 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":63:15)
#loc68 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":64:12)
#loc69 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":64:5)
#loc70 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":65:5)
#loc71 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":79:5)
#loc72 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":65:12)
#loc73 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":69:27)
#loc74 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":69:34)
#loc75 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":69:39)
#loc76 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":69:53)
#loc77 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":69:54)
#loc78 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":69:9)
#loc79 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":70:9)
#loc80 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":70:37)
#loc81 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":70:13)
#loc82 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":70:21)
#loc83 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":70:18)
#loc84 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":70:27)
#loc85 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":70:28)
#loc86 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":70:34)
#loc87 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":70:33)
#loc88 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":72:19)
#loc89 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":72:9)
#loc90 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":72:14)
#loc91 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":72:15)
#loc92 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":73:27)
#loc93 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":73:32)
#loc94 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":73:33)
#loc95 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":73:9)
#loc96 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":74:9)
#loc97 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":77:19)
#loc98 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":77:9)
#loc99 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":78:9)
#loc100 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":80:5)
#loc101 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":90:5)
#loc102 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":80:12)
#loc103 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":84:19)
#loc104 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":84:9)
#loc105 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":85:9)
#loc106 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":88:9)
#loc107 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":88:14)
#loc108 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":89:9)
#loc109 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":94:1)
#loc110 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":124:1)
#loc111 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":96:5)
#loc112 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":96:15)
#loc113 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":97:12)
#loc114 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":97:5)
#loc115 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":98:5)
#loc116 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":112:5)
#loc117 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":98:12)
#loc118 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":102:27)
#loc119 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":102:34)
#loc120 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":102:39)
#loc121 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":102:53)
#loc122 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":102:54)
#loc123 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":102:9)
#loc124 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":103:9)
#loc125 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":103:37)
#loc126 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":103:13)
#loc127 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":103:21)
#loc128 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":103:18)
#loc129 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":103:27)
#loc130 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":103:28)
#loc131 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":103:34)
#loc132 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":103:33)
#loc133 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":105:19)
#loc134 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":105:9)
#loc135 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":105:14)
#loc136 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":105:15)
#loc137 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":106:27)
#loc138 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":106:32)
#loc139 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":106:33)
#loc140 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":106:9)
#loc141 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":107:9)
#loc142 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":110:19)
#loc143 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":110:9)
#loc144 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":111:9)
#loc145 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":113:5)
#loc146 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":123:5)
#loc147 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":113:12)
#loc148 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":117:9)
#loc149 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":117:14)
#loc150 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":118:9)
#loc151 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":121:19)
#loc152 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":121:9)
#loc153 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":122:9)
#loc154 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":127:1)
#loc155 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":156:1)
#loc156 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":129:5)
#loc157 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":129:15)
#loc158 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":130:12)
#loc159 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":130:5)
#loc160 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":131:5)
#loc161 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":144:5)
#loc162 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":131:12)
#loc163 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":135:19)
#loc164 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":135:9)
#loc165 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":136:9)
#loc166 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":139:27)
#loc167 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":139:9)
#loc168 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":141:19)
#loc169 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":141:9)
#loc170 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":141:14)
#loc171 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":141:15)
#loc172 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":142:27)
#loc173 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":142:32)
#loc174 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":142:33)
#loc175 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":142:9)
#loc176 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":143:9)
#loc177 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":145:5)
#loc178 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":155:5)
#loc179 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":145:12)
#loc180 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":150:9)
#loc181 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":153:19)
#loc182 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":153:9)
#loc183 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":154:9)
#loc184 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":159:1)
#loc185 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":188:1)
#loc186 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":161:5)
#loc187 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":161:15)
#loc188 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":162:12)
#loc189 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":162:5)
#loc190 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":163:5)
#loc191 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":176:5)
#loc192 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":163:12)
#loc193 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":167:27)
#loc194 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":167:9)
#loc195 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":169:19)
#loc196 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":169:9)
#loc197 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":169:14)
#loc198 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":169:15)
#loc199 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":170:27)
#loc200 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":170:32)
#loc201 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":170:33)
#loc202 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":170:9)
#loc203 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":171:9)
#loc204 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":174:19)
#loc205 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":174:9)
#loc206 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":175:9)
#loc207 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":177:5)
#loc208 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":187:5)
#loc209 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":177:12)
#loc210 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":182:9)
#loc211 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":185:19)
#loc212 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":185:9)
#loc213 = loc("CWE401_Memory_Leak__int64_t_calloc_15.c":186:9)
#loc214 = loc(fused[#loc1, #loc2])
#loc215 = loc(fused[#loc3, #loc4])
#loc216 = loc(fused[#loc5, #loc6])
#loc217 = loc(fused[#loc7, #loc8])
#loc218 = loc(fused[#loc10, #loc11])
#loc219 = loc(fused[#loc12, #loc13])
#loc220 = loc(fused[#loc15, #loc14])
#loc221 = loc(fused[#loc16, #loc17])
#loc222 = loc(fused[#loc21, #loc22])
#loc223 = loc(fused[#loc19, #loc23])
#loc224 = loc(fused[#loc24, #loc23])
#loc225 = loc(fused[#loc25, #loc26])
#loc226 = loc(fused[#loc27, #loc28])
#loc227 = loc(fused[#loc30, #loc26])
#loc228 = loc(fused[#loc35, #loc34])
#loc229 = loc(fused[#loc45, #loc46])
#loc230 = loc(fused[#loc52, #loc53])
#loc231 = loc(fused[#loc54, #loc55])
#loc232 = loc(fused[#loc56, #loc57])
#loc233 = loc(fused[#loc58, #loc59])
#loc234 = loc(fused[#loc60, #loc61])
#loc235 = loc(fused[#loc62, #loc63])
#loc236 = loc(fused[#loc64, #loc65])
#loc237 = loc(fused[#loc66, #loc67])
#loc238 = loc(fused[#loc69, #loc68])
#loc239 = loc(fused[#loc70, #loc71])
#loc240 = loc(fused[#loc75, #loc76])
#loc241 = loc(fused[#loc73, #loc77])
#loc242 = loc(fused[#loc78, #loc77])
#loc243 = loc(fused[#loc79, #loc80])
#loc244 = loc(fused[#loc81, #loc82])
#loc245 = loc(fused[#loc84, #loc80])
#loc246 = loc(fused[#loc89, #loc88])
#loc247 = loc(fused[#loc100, #loc101])
#loc248 = loc(fused[#loc109, #loc110])
#loc249 = loc(fused[#loc111, #loc112])
#loc250 = loc(fused[#loc114, #loc113])
#loc251 = loc(fused[#loc115, #loc116])
#loc252 = loc(fused[#loc120, #loc121])
#loc253 = loc(fused[#loc118, #loc122])
#loc254 = loc(fused[#loc123, #loc122])
#loc255 = loc(fused[#loc124, #loc125])
#loc256 = loc(fused[#loc126, #loc127])
#loc257 = loc(fused[#loc129, #loc125])
#loc258 = loc(fused[#loc134, #loc133])
#loc259 = loc(fused[#loc145, #loc146])
#loc260 = loc(fused[#loc154, #loc155])
#loc261 = loc(fused[#loc156, #loc157])
#loc262 = loc(fused[#loc159, #loc158])
#loc263 = loc(fused[#loc160, #loc161])
#loc264 = loc(fused[#loc167, #loc166])
#loc265 = loc(fused[#loc169, #loc168])
#loc266 = loc(fused[#loc177, #loc178])
#loc267 = loc(fused[#loc184, #loc185])
#loc268 = loc(fused[#loc186, #loc187])
#loc269 = loc(fused[#loc189, #loc188])
#loc270 = loc(fused[#loc190, #loc191])
#loc271 = loc(fused[#loc194, #loc193])
#loc272 = loc(fused[#loc196, #loc195])
#loc273 = loc(fused[#loc207, #loc208])
