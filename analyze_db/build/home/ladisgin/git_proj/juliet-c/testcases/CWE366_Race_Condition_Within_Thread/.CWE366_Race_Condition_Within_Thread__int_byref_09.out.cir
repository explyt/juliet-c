!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__stdThread = !cir.struct<struct "_stdThread" incomplete>
!ty__stdThreadLock = !cir.struct<struct "_stdThreadLock" incomplete>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc7 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":24:23)
#loc8 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":24:29)
#loc107 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":181:10)
#loc108 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":181:14)
#loc109 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":181:20)
#loc110 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":181:32)
#loc138 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":38:24)
#loc139 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":38:30)
#true = #cir.bool<true> : !cir.bool
#loc294 = loc(fused[#loc7, #loc8])
#loc333 = loc(fused[#loc107, #loc108])
#loc334 = loc(fused[#loc109, #loc110])
#loc344 = loc(fused[#loc138, #loc139])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE366_Race_Condition_Within_Thread/CWE366_Race_Condition_Within_Thread__int_byref_09.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant external @GLOBAL_CONST_TRUE : !s32i {alignment = 4 : i64} loc(#loc291)
  cir.func private @stdThreadCreate(!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc292)
  cir.func internal private @helperBad(%arg0: !cir.ptr<!void> loc(fused[#loc7, #loc8])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["args", init] {alignment = 8 : i64} loc(#loc294)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["pIntArgs", init] {alignment = 8 : i64} loc(#loc295)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc296)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc13)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc10)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc10)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc295)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc16)
      cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc298)
      cir.for : cond {
        %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc18)
        %7 = cir.const #cir.int<1000000> : !s32i loc(#loc19)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc299)
        cir.condition(%8) loc(#loc20)
      } body {
        cir.scope {
          %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc22)
          %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc23)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc24)
          %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc23)
          %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc25)
          cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc301)
        } loc(#loc300)
        cir.yield loc(#loc15)
      } step {
        %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc27)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc28)
        cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc302)
        cir.yield loc(#loc297)
      } loc(#loc297)
    } loc(#loc297)
    cir.return loc(#loc6)
  } loc(#loc293)
  cir.func private @stdThreadJoin(!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc303)
  cir.func private @stdThreadDestroy(!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc304)
  cir.func private @printIntLine(!s32i) loc(#loc305)
  cir.func no_proto @CWE366_Race_Condition_Within_Thread__int_byref_09_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc291)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc39)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc39)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc310)
          %4 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc311)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["valBadSink"] {alignment = 4 : i64} loc(#loc312)
          %6 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc44)
          cir.store %6, %3 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc310)
          %7 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc46)
          cir.store %7, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc311)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc49)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc313)
          cir.scope {
            %10 = cir.get_global @helperBad : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc53)
            %11 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc315)
            %12 = cir.call @stdThreadCreate(%10, %11, %3) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc56)
            %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc56)
            %14 = cir.unary(not, %13) : !cir.bool, !cir.bool loc(#loc56)
            cir.if %14 {
              %15 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc58)
              cir.store %15, %3 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc317)
            } loc(#loc316)
          } loc(#loc314)
          cir.scope {
            %10 = cir.get_global @helperBad : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc62)
            %11 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc319)
            %12 = cir.call @stdThreadCreate(%10, %11, %4) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc65)
            %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc65)
            %14 = cir.unary(not, %13) : !cir.bool, !cir.bool loc(#loc65)
            cir.if %14 {
              %15 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc67)
              cir.store %15, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc321)
            } loc(#loc320)
          } loc(#loc318)
          cir.scope {
            %10 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc71)
            %11 = cir.cast(ptr_to_bool, %10 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc71)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc73)
              %14 = cir.call @stdThreadJoin(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc74)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc74)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc72)
                cir.yield %17 : !cir.bool loc(#loc72)
              }, false {
                %17 = cir.const #false loc(#loc72)
                cir.yield %17 : !cir.bool loc(#loc72)
              }) : (!cir.bool) -> !cir.bool loc(#loc72)
              cir.yield %16 : !cir.bool loc(#loc72)
            }, false {
              %13 = cir.const #false loc(#loc72)
              cir.yield %13 : !cir.bool loc(#loc72)
            }) : (!cir.bool) -> !cir.bool loc(#loc72)
            cir.if %12 {
              %13 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc76)
              %14 = cir.call @stdThreadDestroy(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc77)
            } loc(#loc323)
          } loc(#loc322)
          cir.scope {
            %10 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc80)
            %11 = cir.cast(ptr_to_bool, %10 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc80)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc82)
              %14 = cir.call @stdThreadJoin(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc83)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc83)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc81)
                cir.yield %17 : !cir.bool loc(#loc81)
              }, false {
                %17 = cir.const #false loc(#loc81)
                cir.yield %17 : !cir.bool loc(#loc81)
              }) : (!cir.bool) -> !cir.bool loc(#loc81)
              cir.yield %16 : !cir.bool loc(#loc81)
            }, false {
              %13 = cir.const #false loc(#loc81)
              cir.yield %13 : !cir.bool loc(#loc81)
            }) : (!cir.bool) -> !cir.bool loc(#loc81)
            cir.if %12 {
              %13 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc85)
              %14 = cir.call @stdThreadDestroy(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc86)
            } loc(#loc325)
          } loc(#loc324)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc87)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc88)
        } loc(#loc309)
      } loc(#loc308)
    } loc(#loc307)
    cir.return loc(#loc36)
  } loc(#loc306)
  cir.func no_proto @CWE366_Race_Condition_Within_Thread__int_byref_09_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc327)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc91)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc328)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc93)
    cir.return loc(#loc90)
  } loc(#loc326)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc329)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc330)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc331)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc101)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc102)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc103)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc104)
  cir.func @main(%arg0: !s32i loc(fused[#loc107, #loc108]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc109, #loc110])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc333)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc334)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc106)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc111)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc112)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc113)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc113)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc114)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc101)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc101)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc115)
    %8 = cir.get_global @CWE366_Race_Condition_Within_Thread__int_byref_09_good : !cir.ptr<!cir.func<!void ()>> loc(#loc335)
    cir.call @CWE366_Race_Condition_Within_Thread__int_byref_09_good() : () -> () loc(#loc116)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc102)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc102)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc118)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc103)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc103)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc119)
    %13 = cir.get_global @CWE366_Race_Condition_Within_Thread__int_byref_09_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc336)
    cir.call @CWE366_Race_Condition_Within_Thread__int_byref_09_bad() : () -> () loc(#loc120)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc104)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc104)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc122)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc123)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc337)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc337)
    cir.return %17 : !s32i loc(#loc337)
  } loc(#loc332)
  cir.global "private" constant external @GLOBAL_CONST_FALSE : !s32i {alignment = 4 : i64} loc(#loc338)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc127)
  cir.func private @stdThreadLockCreate(!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc339)
  cir.global "private" internal dsolocal @gGoodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc340)
  cir.func private @stdThreadLockAcquire(!cir.ptr<!ty__stdThreadLock>) loc(#loc341)
  cir.func private @stdThreadLockRelease(!cir.ptr<!ty__stdThreadLock>) loc(#loc342)
  cir.func internal private @helperGood(%arg0: !cir.ptr<!void> loc(fused[#loc138, #loc139])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["args", init] {alignment = 8 : i64} loc(#loc344)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["pIntArgs", init] {alignment = 8 : i64} loc(#loc345)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc346)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc144)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc141)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc141)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc345)
    %5 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc340)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc145)
    cir.call @stdThreadLockAcquire(%6) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc146)
    cir.scope {
      %9 = cir.const #cir.int<0> : !s32i loc(#loc149)
      cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc348)
      cir.for : cond {
        %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc151)
        %11 = cir.const #cir.int<1000000> : !s32i loc(#loc152)
        %12 = cir.cmp(lt, %10, %11) : !s32i, !cir.bool loc(#loc349)
        cir.condition(%12) loc(#loc153)
      } body {
        cir.scope {
          %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc155)
          %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc156)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc157)
          %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc156)
          %14 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc158)
          cir.store %13, %14 : !s32i, !cir.ptr<!s32i> loc(#loc351)
        } loc(#loc350)
        cir.yield loc(#loc148)
      } step {
        %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc160)
        %11 = cir.unary(inc, %10) : !s32i, !s32i loc(#loc161)
        cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc352)
        cir.yield loc(#loc347)
      } loc(#loc347)
    } loc(#loc347)
    %7 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc340)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc162)
    cir.call @stdThreadLockRelease(%8) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc163)
    cir.return loc(#loc137)
  } loc(#loc343)
  cir.func private @stdThreadLockDestroy(!cir.ptr<!ty__stdThreadLock>) loc(#loc353)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc338)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc170)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc170)
      cir.if %2 {
        %3 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc127)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc127)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc174)
      } else {
        cir.scope {
          %3 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc358)
          %4 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc359)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["valGoodSink"] {alignment = 4 : i64} loc(#loc360)
          %6 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc178)
          cir.store %6, %3 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc358)
          %7 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc180)
          cir.store %7, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc359)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc183)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc361)
          cir.scope {
            %12 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc340)
            %13 = cir.call @stdThreadLockCreate(%12) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc187)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc187)
            %15 = cir.unary(not, %14) : !cir.bool, !cir.bool loc(#loc187)
            cir.if %15 {
              cir.return loc(#loc189)
            } loc(#loc363)
          } loc(#loc362)
          cir.scope {
            %12 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc192)
            %13 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc365)
            %14 = cir.call @stdThreadCreate(%12, %13, %3) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc195)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc195)
            %16 = cir.unary(not, %15) : !cir.bool, !cir.bool loc(#loc195)
            cir.if %16 {
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc197)
              cir.store %17, %3 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc367)
            } loc(#loc366)
          } loc(#loc364)
          cir.scope {
            %12 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc201)
            %13 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc369)
            %14 = cir.call @stdThreadCreate(%12, %13, %4) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc204)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc204)
            %16 = cir.unary(not, %15) : !cir.bool, !cir.bool loc(#loc204)
            cir.if %16 {
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc206)
              cir.store %17, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc371)
            } loc(#loc370)
          } loc(#loc368)
          cir.scope {
            %12 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc210)
            %13 = cir.cast(ptr_to_bool, %12 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc210)
            %14 = cir.ternary(%13, true {
              %15 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc212)
              %16 = cir.call @stdThreadJoin(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc213)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc213)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc211)
                cir.yield %19 : !cir.bool loc(#loc211)
              }, false {
                %19 = cir.const #false loc(#loc211)
                cir.yield %19 : !cir.bool loc(#loc211)
              }) : (!cir.bool) -> !cir.bool loc(#loc211)
              cir.yield %18 : !cir.bool loc(#loc211)
            }, false {
              %15 = cir.const #false loc(#loc211)
              cir.yield %15 : !cir.bool loc(#loc211)
            }) : (!cir.bool) -> !cir.bool loc(#loc211)
            cir.if %14 {
              %15 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc215)
              %16 = cir.call @stdThreadDestroy(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc216)
            } loc(#loc373)
          } loc(#loc372)
          cir.scope {
            %12 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc219)
            %13 = cir.cast(ptr_to_bool, %12 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc219)
            %14 = cir.ternary(%13, true {
              %15 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc221)
              %16 = cir.call @stdThreadJoin(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc222)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc222)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc220)
                cir.yield %19 : !cir.bool loc(#loc220)
              }, false {
                %19 = cir.const #false loc(#loc220)
                cir.yield %19 : !cir.bool loc(#loc220)
              }) : (!cir.bool) -> !cir.bool loc(#loc220)
              cir.yield %18 : !cir.bool loc(#loc220)
            }, false {
              %15 = cir.const #false loc(#loc220)
              cir.yield %15 : !cir.bool loc(#loc220)
            }) : (!cir.bool) -> !cir.bool loc(#loc220)
            cir.if %14 {
              %15 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc224)
              %16 = cir.call @stdThreadDestroy(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc225)
            } loc(#loc375)
          } loc(#loc374)
          %9 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc340)
          %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc226)
          cir.call @stdThreadLockDestroy(%10) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc227)
          %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc228)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc229)
        } loc(#loc357)
      } loc(#loc356)
    } loc(#loc355)
    cir.return loc(#loc167)
  } loc(#loc354)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc291)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc234)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc234)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc380)
          %4 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc381)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["valGoodSink"] {alignment = 4 : i64} loc(#loc382)
          %6 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc239)
          cir.store %6, %3 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc380)
          %7 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc241)
          cir.store %7, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc381)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc244)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc383)
          cir.scope {
            %12 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc340)
            %13 = cir.call @stdThreadLockCreate(%12) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc248)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc248)
            %15 = cir.unary(not, %14) : !cir.bool, !cir.bool loc(#loc248)
            cir.if %15 {
              cir.return loc(#loc250)
            } loc(#loc385)
          } loc(#loc384)
          cir.scope {
            %12 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc253)
            %13 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc387)
            %14 = cir.call @stdThreadCreate(%12, %13, %3) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc256)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc256)
            %16 = cir.unary(not, %15) : !cir.bool, !cir.bool loc(#loc256)
            cir.if %16 {
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc258)
              cir.store %17, %3 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc389)
            } loc(#loc388)
          } loc(#loc386)
          cir.scope {
            %12 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc262)
            %13 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc391)
            %14 = cir.call @stdThreadCreate(%12, %13, %4) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc265)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc265)
            %16 = cir.unary(not, %15) : !cir.bool, !cir.bool loc(#loc265)
            cir.if %16 {
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc267)
              cir.store %17, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc393)
            } loc(#loc392)
          } loc(#loc390)
          cir.scope {
            %12 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc271)
            %13 = cir.cast(ptr_to_bool, %12 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc271)
            %14 = cir.ternary(%13, true {
              %15 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc273)
              %16 = cir.call @stdThreadJoin(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc274)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc274)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc272)
                cir.yield %19 : !cir.bool loc(#loc272)
              }, false {
                %19 = cir.const #false loc(#loc272)
                cir.yield %19 : !cir.bool loc(#loc272)
              }) : (!cir.bool) -> !cir.bool loc(#loc272)
              cir.yield %18 : !cir.bool loc(#loc272)
            }, false {
              %15 = cir.const #false loc(#loc272)
              cir.yield %15 : !cir.bool loc(#loc272)
            }) : (!cir.bool) -> !cir.bool loc(#loc272)
            cir.if %14 {
              %15 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc276)
              %16 = cir.call @stdThreadDestroy(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc277)
            } loc(#loc395)
          } loc(#loc394)
          cir.scope {
            %12 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc280)
            %13 = cir.cast(ptr_to_bool, %12 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc280)
            %14 = cir.ternary(%13, true {
              %15 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc282)
              %16 = cir.call @stdThreadJoin(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc283)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc283)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc281)
                cir.yield %19 : !cir.bool loc(#loc281)
              }, false {
                %19 = cir.const #false loc(#loc281)
                cir.yield %19 : !cir.bool loc(#loc281)
              }) : (!cir.bool) -> !cir.bool loc(#loc281)
              cir.yield %18 : !cir.bool loc(#loc281)
            }, false {
              %15 = cir.const #false loc(#loc281)
              cir.yield %15 : !cir.bool loc(#loc281)
            }) : (!cir.bool) -> !cir.bool loc(#loc281)
            cir.if %14 {
              %15 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc285)
              %16 = cir.call @stdThreadDestroy(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc286)
            } loc(#loc397)
          } loc(#loc396)
          %9 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc340)
          %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc287)
          cir.call @stdThreadLockDestroy(%10) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc288)
          %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc289)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc290)
        } loc(#loc379)
      } loc(#loc378)
    } loc(#loc377)
    cir.return loc(#loc231)
  } loc(#loc376)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE366_Race_Condition_Within_Thread/CWE366_Race_Condition_Within_Thread__int_byref_09.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":109:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":109:18)
#loc3 = loc("../../testcasesupport/std_thread.h":14:1)
#loc4 = loc("../../testcasesupport/std_thread.h":14:74)
#loc5 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":24:1)
#loc6 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":36:1)
#loc9 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":26:5)
#loc10 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":26:27)
#loc11 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":27:5)
#loc12 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":27:9)
#loc13 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":25:1)
#loc14 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":32:5)
#loc15 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":35:5)
#loc16 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":32:14)
#loc17 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":32:10)
#loc18 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":32:17)
#loc19 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":32:21)
#loc20 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":32:19)
#loc21 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":33:5)
#loc22 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":34:22)
#loc23 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":34:21)
#loc24 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":34:33)
#loc25 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":34:10)
#loc26 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":34:9)
#loc27 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":32:31)
#loc28 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":32:30)
#loc29 = loc("../../testcasesupport/std_thread.h":15:1)
#loc30 = loc("../../testcasesupport/std_thread.h":15:35)
#loc31 = loc("../../testcasesupport/std_thread.h":16:1)
#loc32 = loc("../../testcasesupport/std_thread.h":16:38)
#loc33 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc34 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc35 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":55:1)
#loc36 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":83:1)
#loc37 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":57:5)
#loc38 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":82:5)
#loc39 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":57:8)
#loc40 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":58:5)
#loc41 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":59:9)
#loc42 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":81:9)
#loc43 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":60:13)
#loc44 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":60:33)
#loc45 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":61:13)
#loc46 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":61:33)
#loc47 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":62:13)
#loc48 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":62:17)
#loc49 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":63:26)
#loc50 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":63:13)
#loc51 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":64:13)
#loc52 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":67:13)
#loc53 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":64:34)
#loc54 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":64:52)
#loc55 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":64:53)
#loc56 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":64:18)
#loc57 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":65:13)
#loc58 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":66:27)
#loc59 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":66:17)
#loc60 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":68:13)
#loc61 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":71:13)
#loc62 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":68:34)
#loc63 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":68:52)
#loc64 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":68:53)
#loc65 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":68:18)
#loc66 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":69:13)
#loc67 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":70:27)
#loc68 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":70:17)
#loc69 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":72:13)
#loc70 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":75:13)
#loc71 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":72:17)
#loc72 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":72:25)
#loc73 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":72:42)
#loc74 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":72:28)
#loc75 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":73:13)
#loc76 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":74:34)
#loc77 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":74:17)
#loc78 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":76:13)
#loc79 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":79:13)
#loc80 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":76:17)
#loc81 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":76:25)
#loc82 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":76:42)
#loc83 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":76:28)
#loc84 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":77:13)
#loc85 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":78:34)
#loc86 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":78:17)
#loc87 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":80:26)
#loc88 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":80:13)
#loc89 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":166:1)
#loc90 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":170:1)
#loc91 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":168:5)
#loc92 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":168:11)
#loc93 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":169:5)
#loc94 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":169:11)
#loc95 = loc("/usr/include/stdlib.h":575:1)
#loc96 = loc("/usr/include/stdlib.h":575:41)
#loc97 = loc("/usr/include/time.h":76:1)
#loc98 = loc("/usr/include/time.h":76:38)
#loc99 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc100 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc101 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":186:15)
#loc102 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":188:15)
#loc103 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":191:15)
#loc104 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":193:15)
#loc105 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":181:1)
#loc106 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":196:1)
#loc111 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":182:1)
#loc112 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":184:27)
#loc113 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":184:22)
#loc114 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":184:5)
#loc115 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":186:5)
#loc116 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":187:5)
#loc117 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":187:60)
#loc118 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":188:5)
#loc119 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":191:5)
#loc120 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":192:5)
#loc121 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":192:59)
#loc122 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":193:5)
#loc123 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":195:12)
#loc124 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":195:5)
#loc125 = loc("../../testcasesupport/std_testcase.h":110:1)
#loc126 = loc("../../testcasesupport/std_testcase.h":110:18)
#loc127 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":95:19)
#loc128 = loc("../../testcasesupport/std_thread.h":18:1)
#loc129 = loc("../../testcasesupport/std_thread.h":18:44)
#loc130 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":22:1)
#loc131 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":22:34)
#loc132 = loc("../../testcasesupport/std_thread.h":19:1)
#loc133 = loc("../../testcasesupport/std_thread.h":19:45)
#loc134 = loc("../../testcasesupport/std_thread.h":20:1)
#loc135 = loc("../../testcasesupport/std_thread.h":20:45)
#loc136 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":38:1)
#loc137 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":51:1)
#loc140 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":40:5)
#loc141 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":40:28)
#loc142 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":41:5)
#loc143 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":41:9)
#loc144 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":39:1)
#loc145 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":45:26)
#loc146 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":45:5)
#loc147 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":46:5)
#loc148 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":49:5)
#loc149 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":46:14)
#loc150 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":46:10)
#loc151 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":46:17)
#loc152 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":46:21)
#loc153 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":46:19)
#loc154 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":47:5)
#loc155 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":48:22)
#loc156 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":48:21)
#loc157 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":48:33)
#loc158 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":48:10)
#loc159 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":48:9)
#loc160 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":46:31)
#loc161 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":46:30)
#loc162 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":50:26)
#loc163 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":50:5)
#loc164 = loc("../../testcasesupport/std_thread.h":21:1)
#loc165 = loc("../../testcasesupport/std_thread.h":21:45)
#loc166 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":90:1)
#loc167 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":128:1)
#loc168 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":92:5)
#loc169 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":127:5)
#loc170 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":92:8)
#loc171 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":93:5)
#loc172 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":96:5)
#loc173 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":98:5)
#loc174 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":95:9)
#loc175 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":99:9)
#loc176 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":126:9)
#loc177 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":100:13)
#loc178 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":100:33)
#loc179 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":101:13)
#loc180 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":101:33)
#loc181 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":102:13)
#loc182 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":102:17)
#loc183 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":103:27)
#loc184 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":103:13)
#loc185 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":104:13)
#loc186 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":107:13)
#loc187 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":104:18)
#loc188 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":105:13)
#loc189 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":106:17)
#loc190 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":108:13)
#loc191 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":111:13)
#loc192 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":108:34)
#loc193 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":108:53)
#loc194 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":108:54)
#loc195 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":108:18)
#loc196 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":109:13)
#loc197 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":110:27)
#loc198 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":110:17)
#loc199 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":112:13)
#loc200 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":115:13)
#loc201 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":112:34)
#loc202 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":112:53)
#loc203 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":112:54)
#loc204 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":112:18)
#loc205 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":113:13)
#loc206 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":114:27)
#loc207 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":114:17)
#loc208 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":116:13)
#loc209 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":119:13)
#loc210 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":116:17)
#loc211 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":116:25)
#loc212 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":116:42)
#loc213 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":116:28)
#loc214 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":117:13)
#loc215 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":118:34)
#loc216 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":118:17)
#loc217 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":120:13)
#loc218 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":123:13)
#loc219 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":120:17)
#loc220 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":120:25)
#loc221 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":120:42)
#loc222 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":120:28)
#loc223 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":121:13)
#loc224 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":122:34)
#loc225 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":122:17)
#loc226 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":124:34)
#loc227 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":124:13)
#loc228 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":125:26)
#loc229 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":125:13)
#loc230 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":131:1)
#loc231 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":164:1)
#loc232 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":133:5)
#loc233 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":163:5)
#loc234 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":133:8)
#loc235 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":134:5)
#loc236 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":135:9)
#loc237 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":162:9)
#loc238 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":136:13)
#loc239 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":136:33)
#loc240 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":137:13)
#loc241 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":137:33)
#loc242 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":138:13)
#loc243 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":138:17)
#loc244 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":139:27)
#loc245 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":139:13)
#loc246 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":140:13)
#loc247 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":143:13)
#loc248 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":140:18)
#loc249 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":141:13)
#loc250 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":142:17)
#loc251 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":144:13)
#loc252 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":147:13)
#loc253 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":144:34)
#loc254 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":144:53)
#loc255 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":144:54)
#loc256 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":144:18)
#loc257 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":145:13)
#loc258 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":146:27)
#loc259 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":146:17)
#loc260 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":148:13)
#loc261 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":151:13)
#loc262 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":148:34)
#loc263 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":148:53)
#loc264 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":148:54)
#loc265 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":148:18)
#loc266 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":149:13)
#loc267 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":150:27)
#loc268 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":150:17)
#loc269 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":152:13)
#loc270 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":155:13)
#loc271 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":152:17)
#loc272 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":152:25)
#loc273 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":152:42)
#loc274 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":152:28)
#loc275 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":153:13)
#loc276 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":154:34)
#loc277 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":154:17)
#loc278 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":156:13)
#loc279 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":159:13)
#loc280 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":156:17)
#loc281 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":156:25)
#loc282 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":156:42)
#loc283 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":156:28)
#loc284 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":157:13)
#loc285 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":158:34)
#loc286 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":158:17)
#loc287 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":160:34)
#loc288 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":160:13)
#loc289 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":161:26)
#loc290 = loc("CWE366_Race_Condition_Within_Thread__int_byref_09.c":161:13)
#loc291 = loc(fused[#loc1, #loc2])
#loc292 = loc(fused[#loc3, #loc4])
#loc293 = loc(fused[#loc5, #loc6])
#loc295 = loc(fused[#loc9, #loc10])
#loc296 = loc(fused[#loc11, #loc12])
#loc297 = loc(fused[#loc14, #loc15])
#loc298 = loc(fused[#loc17, #loc16])
#loc299 = loc(fused[#loc18, #loc19])
#loc300 = loc(fused[#loc21, #loc15])
#loc301 = loc(fused[#loc26, #loc24])
#loc302 = loc(fused[#loc28, #loc27])
#loc303 = loc(fused[#loc29, #loc30])
#loc304 = loc(fused[#loc31, #loc32])
#loc305 = loc(fused[#loc33, #loc34])
#loc306 = loc(fused[#loc35, #loc36])
#loc307 = loc(fused[#loc37, #loc38])
#loc308 = loc(fused[#loc40, #loc38])
#loc309 = loc(fused[#loc41, #loc42])
#loc310 = loc(fused[#loc43, #loc44])
#loc311 = loc(fused[#loc45, #loc46])
#loc312 = loc(fused[#loc47, #loc48])
#loc313 = loc(fused[#loc50, #loc49])
#loc314 = loc(fused[#loc51, #loc52])
#loc315 = loc(fused[#loc54, #loc55])
#loc316 = loc(fused[#loc57, #loc52])
#loc317 = loc(fused[#loc59, #loc58])
#loc318 = loc(fused[#loc60, #loc61])
#loc319 = loc(fused[#loc63, #loc64])
#loc320 = loc(fused[#loc66, #loc61])
#loc321 = loc(fused[#loc68, #loc67])
#loc322 = loc(fused[#loc69, #loc70])
#loc323 = loc(fused[#loc75, #loc70])
#loc324 = loc(fused[#loc78, #loc79])
#loc325 = loc(fused[#loc84, #loc79])
#loc326 = loc(fused[#loc89, #loc90])
#loc327 = loc(fused[#loc91, #loc92])
#loc328 = loc(fused[#loc93, #loc94])
#loc329 = loc(fused[#loc95, #loc96])
#loc330 = loc(fused[#loc97, #loc98])
#loc331 = loc(fused[#loc99, #loc100])
#loc332 = loc(fused[#loc105, #loc106])
#loc335 = loc(fused[#loc116, #loc117])
#loc336 = loc(fused[#loc120, #loc121])
#loc337 = loc(fused[#loc124, #loc123])
#loc338 = loc(fused[#loc125, #loc126])
#loc339 = loc(fused[#loc128, #loc129])
#loc340 = loc(fused[#loc130, #loc131])
#loc341 = loc(fused[#loc132, #loc133])
#loc342 = loc(fused[#loc134, #loc135])
#loc343 = loc(fused[#loc136, #loc137])
#loc345 = loc(fused[#loc140, #loc141])
#loc346 = loc(fused[#loc142, #loc143])
#loc347 = loc(fused[#loc147, #loc148])
#loc348 = loc(fused[#loc150, #loc149])
#loc349 = loc(fused[#loc151, #loc152])
#loc350 = loc(fused[#loc154, #loc148])
#loc351 = loc(fused[#loc159, #loc157])
#loc352 = loc(fused[#loc161, #loc160])
#loc353 = loc(fused[#loc164, #loc165])
#loc354 = loc(fused[#loc166, #loc167])
#loc355 = loc(fused[#loc168, #loc169])
#loc356 = loc(fused[#loc171, #loc172, #loc173, #loc169])
#loc357 = loc(fused[#loc175, #loc176])
#loc358 = loc(fused[#loc177, #loc178])
#loc359 = loc(fused[#loc179, #loc180])
#loc360 = loc(fused[#loc181, #loc182])
#loc361 = loc(fused[#loc184, #loc183])
#loc362 = loc(fused[#loc185, #loc186])
#loc363 = loc(fused[#loc188, #loc186])
#loc364 = loc(fused[#loc190, #loc191])
#loc365 = loc(fused[#loc193, #loc194])
#loc366 = loc(fused[#loc196, #loc191])
#loc367 = loc(fused[#loc198, #loc197])
#loc368 = loc(fused[#loc199, #loc200])
#loc369 = loc(fused[#loc202, #loc203])
#loc370 = loc(fused[#loc205, #loc200])
#loc371 = loc(fused[#loc207, #loc206])
#loc372 = loc(fused[#loc208, #loc209])
#loc373 = loc(fused[#loc214, #loc209])
#loc374 = loc(fused[#loc217, #loc218])
#loc375 = loc(fused[#loc223, #loc218])
#loc376 = loc(fused[#loc230, #loc231])
#loc377 = loc(fused[#loc232, #loc233])
#loc378 = loc(fused[#loc235, #loc233])
#loc379 = loc(fused[#loc236, #loc237])
#loc380 = loc(fused[#loc238, #loc239])
#loc381 = loc(fused[#loc240, #loc241])
#loc382 = loc(fused[#loc242, #loc243])
#loc383 = loc(fused[#loc245, #loc244])
#loc384 = loc(fused[#loc246, #loc247])
#loc385 = loc(fused[#loc249, #loc247])
#loc386 = loc(fused[#loc251, #loc252])
#loc387 = loc(fused[#loc254, #loc255])
#loc388 = loc(fused[#loc257, #loc252])
#loc389 = loc(fused[#loc259, #loc258])
#loc390 = loc(fused[#loc260, #loc261])
#loc391 = loc(fused[#loc263, #loc264])
#loc392 = loc(fused[#loc266, #loc261])
#loc393 = loc(fused[#loc268, #loc267])
#loc394 = loc(fused[#loc269, #loc270])
#loc395 = loc(fused[#loc275, #loc270])
#loc396 = loc(fused[#loc278, #loc279])
#loc397 = loc(fused[#loc284, #loc279])
