!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_popen_13.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.global "private" constant cir_private @__const.goodG2B2.data_buf = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc256)
  cir.global "private" constant cir_private @__const.goodG2B1.data_buf = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc257)
  cir.global "private" constant cir_private @__const.CWE78_OS_Command_Injection__char_connect_socket_popen_13_bad.data_buf = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc258)
  cir.global "private" constant external @GLOBAL_CONST_FIVE : !s32i {alignment = 4 : i64} loc(#loc259)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc260)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc261)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc262)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc15)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc263)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc264)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc265)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc266)
  cir.func private @close(!s32i) -> !s32i loc(#loc267)
  cir.func private @popen(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> loc(#loc268)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"w\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc28)
  cir.func private @pclose(!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc269)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_popen_13_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc271)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["data_buf"] {alignment = 16 : i64} loc(#loc258)
    %2 = cir.get_global @__const.CWE78_OS_Command_Injection__char_connect_socket_popen_13_bad.data_buf : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc258)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc258)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc35)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc272)
    cir.scope {
      %4 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc259)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc39)
      %6 = cir.const #cir.int<5> : !s32i loc(#loc40)
      %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc274)
      cir.if %7 {
        cir.scope {
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc277)
          %9 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc278)
          %10 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc279)
          %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc280)
          %12 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc281)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc51)
          %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc51)
          cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc280)
          %15 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc54)
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc55)
          %17 = cir.call @strlen(%16) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc54)
          cir.store %17, %12 : !u64i, !cir.ptr<!u64i> loc(#loc281)
          cir.scope {
            cir.do {
              cir.scope {
                %18 = cir.const #cir.int<2> : !s32i loc(#loc60)
                %19 = cir.const #cir.int<1> : !s32i loc(#loc61)
                %20 = cir.const #cir.int<6> : !s32i loc(#loc62)
                %21 = cir.call @socket(%18, %19, %20) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc63)
                cir.store %21, %11 : !s32i, !cir.ptr<!s32i> loc(#loc284)
                cir.scope {
                  %72 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc68)
                  %73 = cir.const #cir.int<1> : !s32i loc(#loc69)
                  %74 = cir.unary(minus, %73) nsw : !s32i, !s32i loc(#loc69)
                  %75 = cir.cmp(eq, %72, %74) : !s32i, !cir.bool loc(#loc286)
                  cir.if %75 {
                    cir.break loc(#loc71)
                  } loc(#loc287)
                } loc(#loc285)
                %22 = cir.cast(bitcast, %9 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc288)
                %23 = cir.const #cir.int<0> : !s32i loc(#loc74)
                %24 = cir.const #cir.int<16> : !u64i loc(#loc289)
                cir.libc.memset %24 bytes from %22 set to %23 : !cir.ptr<!void>, !s32i, !u64i loc(#loc290)
                %25 = cir.const #cir.int<2> : !s32i loc(#loc79)
                %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc79)
                %27 = cir.get_member %9[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
                cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc291)
                %28 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc15)
                %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc15)
                %30 = cir.call @inet_addr(%29) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc82)
                %31 = cir.get_member %9[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc83)
                %32 = cir.get_member %31[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc84)
                cir.store %30, %32 : !u32i, !cir.ptr<!u32i> loc(#loc292)
                %33 = cir.const #cir.int<27015> : !s32i loc(#loc87)
                %34 = cir.cast(integral, %33 : !s32i), !u16i loc(#loc87)
                %35 = cir.call @htons(%34) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc88)
                %36 = cir.get_member %9[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc89)
                cir.store %35, %36 : !u16i, !cir.ptr<!u16i> loc(#loc293)
                cir.scope {
                  %72 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc94)
                  %73 = cir.cast(bitcast, %9 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc295)
                  %74 = cir.const #cir.int<16> : !u64i loc(#loc296)
                  %75 = cir.cast(integral, %74 : !u64i), !u32i loc(#loc296)
                  %76 = cir.call @connect(%72, %73, %75) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc99)
                  %77 = cir.const #cir.int<1> : !s32i loc(#loc100)
                  %78 = cir.unary(minus, %77) nsw : !s32i, !s32i loc(#loc100)
                  %79 = cir.cmp(eq, %76, %78) : !s32i, !cir.bool loc(#loc297)
                  cir.if %79 {
                    cir.break loc(#loc102)
                  } loc(#loc298)
                } loc(#loc294)
                %37 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc103)
                %38 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc104)
                %39 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc105)
                %40 = cir.ptr_stride(%38 : !cir.ptr<!s8i>, %39 : !u64i), !cir.ptr<!s8i> loc(#loc106)
                %41 = cir.cast(bitcast, %40 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc299)
                %42 = cir.const #cir.int<1> : !u64i loc(#loc300)
                %43 = cir.const #cir.int<100> : !s32i loc(#loc111)
                %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc111)
                %45 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc112)
                %46 = cir.binop(sub, %44, %45) : !u64i loc(#loc301)
                %47 = cir.const #cir.int<1> : !s32i loc(#loc113)
                %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc113)
                %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc302)
                %50 = cir.binop(mul, %42, %49) : !u64i loc(#loc303)
                %51 = cir.const #cir.int<0> : !s32i loc(#loc115)
                %52 = cir.call @recv(%37, %41, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc116)
                %53 = cir.cast(integral, %52 : !s64i), !s32i loc(#loc116)
                cir.store %53, %8 : !s32i, !cir.ptr<!s32i> loc(#loc304)
                cir.scope {
                  %72 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc121)
                  %73 = cir.const #cir.int<1> : !s32i loc(#loc122)
                  %74 = cir.unary(minus, %73) nsw : !s32i, !s32i loc(#loc122)
                  %75 = cir.cmp(eq, %72, %74) : !s32i, !cir.bool loc(#loc306)
                  %76 = cir.ternary(%75, true {
                    %77 = cir.const #true loc(#loc123)
                    cir.yield %77 : !cir.bool loc(#loc123)
                  }, false {
                    %77 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc124)
                    %78 = cir.const #cir.int<0> : !s32i loc(#loc125)
                    %79 = cir.cmp(eq, %77, %78) : !s32i, !cir.bool loc(#loc307)
                    %80 = cir.ternary(%79, true {
                      %81 = cir.const #true loc(#loc123)
                      cir.yield %81 : !cir.bool loc(#loc123)
                    }, false {
                      %81 = cir.const #false loc(#loc123)
                      cir.yield %81 : !cir.bool loc(#loc123)
                    }) : (!cir.bool) -> !cir.bool loc(#loc123)
                    cir.yield %80 : !cir.bool loc(#loc123)
                  }) : (!cir.bool) -> !cir.bool loc(#loc123)
                  cir.if %76 {
                    cir.break loc(#loc127)
                  } loc(#loc308)
                } loc(#loc305)
                %54 = cir.const #cir.int<0> : !s32i loc(#loc128)
                %55 = cir.cast(integral, %54 : !s32i), !s8i loc(#loc128)
                %56 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
                %57 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc130)
                %58 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc131)
                %59 = cir.cast(integral, %58 : !s32i), !u64i loc(#loc131)
                %60 = cir.const #cir.int<1> : !u64i loc(#loc309)
                %61 = cir.binop(div, %59, %60) : !u64i loc(#loc310)
                %62 = cir.binop(add, %57, %61) : !u64i loc(#loc311)
                %63 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %62 : !u64i), !cir.ptr<!s8i> loc(#loc134)
                cir.store %55, %63 : !s8i, !cir.ptr<!s8i> loc(#loc312)
                %64 = cir.get_global @strchr : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i>>> loc(#loc135)
                %65 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc136)
                %66 = cir.const #cir.int<13> : !s32i loc(#loc137)
                %67 = cir.call @strchr(%65, %66) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc135)
                cir.store %67, %10 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc313)
                cir.scope {
                  %72 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc142)
                  %73 = cir.cast(ptr_to_bool, %72 : !cir.ptr<!s8i>), !cir.bool loc(#loc142)
                  cir.if %73 {
                    %74 = cir.const #cir.int<0> : !s32i loc(#loc144)
                    %75 = cir.cast(integral, %74 : !s32i), !s8i loc(#loc144)
                    %76 = cir.load deref %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
                    cir.store %75, %76 : !s8i, !cir.ptr<!s8i> loc(#loc316)
                  } loc(#loc315)
                } loc(#loc314)
                %68 = cir.get_global @strchr : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i>>> loc(#loc147)
                %69 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc148)
                %70 = cir.const #cir.int<10> : !s32i loc(#loc149)
                %71 = cir.call @strchr(%69, %70) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc147)
                cir.store %71, %10 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc317)
                cir.scope {
                  %72 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc154)
                  %73 = cir.cast(ptr_to_bool, %72 : !cir.ptr<!s8i>), !cir.bool loc(#loc154)
                  cir.if %73 {
                    %74 = cir.const #cir.int<0> : !s32i loc(#loc156)
                    %75 = cir.cast(integral, %74 : !s32i), !s8i loc(#loc156)
                    %76 = cir.load deref %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc157)
                    cir.store %75, %76 : !s8i, !cir.ptr<!s8i> loc(#loc320)
                  } loc(#loc319)
                } loc(#loc318)
              } loc(#loc283)
              cir.yield loc(#loc57)
            } while {
              %18 = cir.const #cir.int<0> : !s32i loc(#loc159)
              %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc159)
              cir.condition(%19) loc(#loc159)
            } loc(#loc282)
          } loc(#loc282)
          cir.scope {
            %18 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc162)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc163)
            %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc163)
            %21 = cir.cmp(ne, %18, %20) : !s32i, !cir.bool loc(#loc322)
            cir.if %21 {
              %22 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc165)
              %23 = cir.call @close(%22) : (!s32i) -> !s32i loc(#loc166)
            } loc(#loc323)
          } loc(#loc321)
        } loc(#loc276)
      } loc(#loc275)
    } loc(#loc273)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>>, ["pipe"] {alignment = 8 : i64} loc(#loc325)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc171)
      %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc28)
      %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc28)
      %8 = cir.call @popen(%5, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> loc(#loc172)
      cir.store %8, %4 : !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc326)
      cir.scope {
        %9 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc177)
        %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc178)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__IO_FILE> loc(#loc178)
        %12 = cir.cmp(ne, %9, %11) : !cir.ptr<!ty__IO_FILE>, !cir.bool loc(#loc328)
        cir.if %12 {
          %13 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc180)
          %14 = cir.call @pclose(%13) : (!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc181)
        } loc(#loc329)
      } loc(#loc327)
    } loc(#loc324)
    cir.return loc(#loc32)
  } loc(#loc270)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_popen_13_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc331)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc184)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc332)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc186)
    cir.return loc(#loc183)
  } loc(#loc330)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc333)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc190)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc334)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc193)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc336)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["data_buf"] {alignment = 16 : i64} loc(#loc257)
    %2 = cir.get_global @__const.goodG2B1.data_buf : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc257)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc257)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc198)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc337)
    cir.scope {
      %4 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc259)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc202)
      %6 = cir.const #cir.int<5> : !s32i loc(#loc203)
      %7 = cir.cmp(ne, %5, %6) : !s32i, !cir.bool loc(#loc339)
      cir.if %7 {
        %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc190)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc190)
        cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc207)
      } else {
        %8 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc208)
        %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc209)
        %10 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc193)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc193)
        %12 = cir.call @strcat(%9, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc208)
      } loc(#loc340)
    } loc(#loc338)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>>, ["pipe"] {alignment = 8 : i64} loc(#loc342)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc214)
      %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc215)
      %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc215)
      %8 = cir.call @popen(%5, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> loc(#loc216)
      cir.store %8, %4 : !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc343)
      cir.scope {
        %9 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc221)
        %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc222)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__IO_FILE> loc(#loc222)
        %12 = cir.cmp(ne, %9, %11) : !cir.ptr<!ty__IO_FILE>, !cir.bool loc(#loc345)
        cir.if %12 {
          %13 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc224)
          %14 = cir.call @pclose(%13) : (!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc225)
        } loc(#loc346)
      } loc(#loc344)
    } loc(#loc341)
    cir.return loc(#loc195)
  } loc(#loc335)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc348)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["data_buf"] {alignment = 16 : i64} loc(#loc256)
    %2 = cir.get_global @__const.goodG2B2.data_buf : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc256)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc256)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc230)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc349)
    cir.scope {
      %4 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc259)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc234)
      %6 = cir.const #cir.int<5> : !s32i loc(#loc235)
      %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc351)
      cir.if %7 {
        %8 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc237)
        %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc238)
        %10 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc239)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc239)
        %12 = cir.call @strcat(%9, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc237)
      } loc(#loc352)
    } loc(#loc350)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>>, ["pipe"] {alignment = 8 : i64} loc(#loc354)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc244)
      %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc245)
      %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc245)
      %8 = cir.call @popen(%5, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> loc(#loc246)
      cir.store %8, %4 : !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc355)
      cir.scope {
        %9 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc251)
        %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc252)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__IO_FILE> loc(#loc252)
        %12 = cir.cmp(ne, %9, %11) : !cir.ptr<!ty__IO_FILE>, !cir.bool loc(#loc357)
        cir.if %12 {
          %13 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc254)
          %14 = cir.call @pclose(%13) : (!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc255)
        } loc(#loc358)
      } loc(#loc356)
    } loc(#loc353)
    cir.return loc(#loc227)
  } loc(#loc347)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":0:0)
#loc1 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":180:5)
#loc2 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":180:26)
#loc3 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":153:5)
#loc4 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":153:26)
#loc5 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":62:5)
#loc6 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":62:26)
#loc7 = loc("../../../testcasesupport/std_testcase.h":111:1)
#loc8 = loc("../../../testcasesupport/std_testcase.h":111:18)
#loc9 = loc("/usr/include/string.h":407:1)
#loc10 = loc("/usr/include/string.h":408:33)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc13 = loc("/usr/include/arpa/inet.h":34:1)
#loc14 = loc("/usr/include/arpa/inet.h":34:47)
#loc15 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":93:53)
#loc16 = loc("/usr/include/netinet/in.h":402:1)
#loc17 = loc("/usr/include/netinet/in.h":403:40)
#loc18 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc19 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc20 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc21 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc22 = loc("/usr/include/string.h":246:1)
#loc23 = loc("/usr/include/string.h":247:33)
#loc24 = loc("/usr/include/unistd.h":358:1)
#loc25 = loc("/usr/include/unistd.h":358:27)
#loc26 = loc("/usr/include/stdio.h":903:1)
#loc27 = loc("/usr/include/stdio.h":904:3)
#loc28 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":137:28)
#loc29 = loc("/usr/include/stdio.h":897:1)
#loc30 = loc("/usr/include/stdio.h":897:36)
#loc31 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":59:1)
#loc32 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":143:1)
#loc33 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":61:5)
#loc34 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":61:12)
#loc35 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":63:12)
#loc36 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":63:5)
#loc37 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":64:5)
#loc38 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":133:5)
#loc39 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":64:8)
#loc40 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":64:27)
#loc41 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":65:5)
#loc42 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":66:9)
#loc43 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":132:9)
#loc44 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":71:13)
#loc45 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":71:17)
#loc46 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":72:13)
#loc47 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":72:32)
#loc48 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":73:13)
#loc49 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":73:19)
#loc50 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":74:13)
#loc51 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":74:36)
#loc52 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":75:13)
#loc53 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":75:41)
#loc54 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":75:30)
#loc55 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":75:37)
#loc56 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":76:13)
#loc57 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":121:21)
#loc58 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":77:13)
#loc59 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":120:13)
#loc60 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":86:40)
#loc61 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":86:49)
#loc62 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":86:62)
#loc63 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":86:33)
#loc64 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":86:17)
#loc65 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":86:73)
#loc66 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":87:17)
#loc67 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":90:17)
#loc68 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":87:21)
#loc69 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":87:38)
#loc70 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":88:17)
#loc71 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":89:21)
#loc72 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":91:24)
#loc73 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":91:25)
#loc74 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":91:34)
#loc75 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":91:37)
#loc76 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":91:51)
#loc77 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":91:17)
#loc78 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":91:52)
#loc79 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":92:38)
#loc80 = loc("/usr/include/netinet/in.h":249:5)
#loc81 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":92:17)
#loc82 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":93:43)
#loc83 = loc("/usr/include/netinet/in.h":251:20)
#loc84 = loc("/usr/include/netinet/in.h":33:15)
#loc85 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":93:17)
#loc86 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":93:63)
#loc87 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":94:42)
#loc88 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":94:36)
#loc89 = loc("/usr/include/netinet/in.h":250:15)
#loc90 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":94:17)
#loc91 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":94:50)
#loc92 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":95:17)
#loc93 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":98:17)
#loc94 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":95:29)
#loc95 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":95:62)
#loc96 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":95:63)
#loc97 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":95:72)
#loc98 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":95:86)
#loc99 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":95:21)
#loc100 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":95:92)
#loc101 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":96:17)
#loc102 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":97:21)
#loc103 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":102:35)
#loc104 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":102:59)
#loc105 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":102:66)
#loc106 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":102:64)
#loc107 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":102:50)
#loc108 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":102:73)
#loc109 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":102:76)
#loc110 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":102:87)
#loc111 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":102:92)
#loc112 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":102:98)
#loc113 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":102:108)
#loc114 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":102:109)
#loc115 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":102:112)
#loc116 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":102:30)
#loc117 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":102:17)
#loc118 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":102:113)
#loc119 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":103:17)
#loc120 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":106:17)
#loc121 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":103:21)
#loc122 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":103:35)
#loc123 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":103:48)
#loc124 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":103:51)
#loc125 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":103:65)
#loc126 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":104:17)
#loc127 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":105:21)
#loc128 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":108:61)
#loc129 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":108:17)
#loc130 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":108:22)
#loc131 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":108:32)
#loc132 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":108:45)
#loc133 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":108:56)
#loc134 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":108:57)
#loc135 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":110:27)
#loc136 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":110:34)
#loc137 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":110:40)
#loc138 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":110:17)
#loc139 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":110:44)
#loc140 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":111:17)
#loc141 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":114:17)
#loc142 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":111:21)
#loc143 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":112:17)
#loc144 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":113:32)
#loc145 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":113:22)
#loc146 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":113:21)
#loc147 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":115:27)
#loc148 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":115:34)
#loc149 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":115:40)
#loc150 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":115:17)
#loc151 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":115:44)
#loc152 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":116:17)
#loc153 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":119:17)
#loc154 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":116:21)
#loc155 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":117:17)
#loc156 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":118:32)
#loc157 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":118:22)
#loc158 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":118:21)
#loc159 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":121:20)
#loc160 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":122:13)
#loc161 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":125:13)
#loc162 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":122:17)
#loc163 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":122:34)
#loc164 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":123:13)
#loc165 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":124:30)
#loc166 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":124:17)
#loc167 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":134:5)
#loc168 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":142:5)
#loc169 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":135:9)
#loc170 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":135:15)
#loc171 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":137:22)
#loc172 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":137:16)
#loc173 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":137:9)
#loc174 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":137:31)
#loc175 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":138:9)
#loc176 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":141:9)
#loc177 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":138:13)
#loc178 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":138:21)
#loc179 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":139:9)
#loc180 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":140:20)
#loc181 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":140:13)
#loc182 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":198:1)
#loc183 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":202:1)
#loc184 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":200:5)
#loc185 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":200:14)
#loc186 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":201:5)
#loc187 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":201:14)
#loc188 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc189 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc190 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":158:19)
#loc191 = loc("/usr/include/string.h":149:1)
#loc192 = loc("/usr/include/string.h":150:14)
#loc193 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":163:22)
#loc194 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":150:1)
#loc195 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":174:1)
#loc196 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":152:5)
#loc197 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":152:12)
#loc198 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":154:12)
#loc199 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":154:5)
#loc200 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":155:5)
#loc201 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":164:5)
#loc202 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":155:8)
#loc203 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":155:27)
#loc204 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":156:5)
#loc205 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":159:5)
#loc206 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":161:5)
#loc207 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":158:9)
#loc208 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":163:9)
#loc209 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":163:16)
#loc210 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":165:5)
#loc211 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":173:5)
#loc212 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":166:9)
#loc213 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":166:15)
#loc214 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":168:22)
#loc215 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":168:28)
#loc216 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":168:16)
#loc217 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":168:9)
#loc218 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":168:31)
#loc219 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":169:9)
#loc220 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":172:9)
#loc221 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":169:13)
#loc222 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":169:21)
#loc223 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":170:9)
#loc224 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":171:20)
#loc225 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":171:13)
#loc226 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":177:1)
#loc227 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":196:1)
#loc228 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":179:5)
#loc229 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":179:12)
#loc230 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":181:12)
#loc231 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":181:5)
#loc232 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":182:5)
#loc233 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":186:5)
#loc234 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":182:8)
#loc235 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":182:27)
#loc236 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":183:5)
#loc237 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":185:9)
#loc238 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":185:16)
#loc239 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":185:22)
#loc240 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":187:5)
#loc241 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":195:5)
#loc242 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":188:9)
#loc243 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":188:15)
#loc244 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":190:22)
#loc245 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":190:28)
#loc246 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":190:16)
#loc247 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":190:9)
#loc248 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":190:31)
#loc249 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":191:9)
#loc250 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":194:9)
#loc251 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":191:13)
#loc252 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":191:21)
#loc253 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":192:9)
#loc254 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":193:20)
#loc255 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_13.c":193:13)
#loc256 = loc(fused[#loc1, #loc2])
#loc257 = loc(fused[#loc3, #loc4])
#loc258 = loc(fused[#loc5, #loc6])
#loc259 = loc(fused[#loc7, #loc8])
#loc260 = loc(fused[#loc9, #loc10])
#loc261 = loc(fused[#loc11, #loc12])
#loc262 = loc(fused[#loc13, #loc14])
#loc263 = loc(fused[#loc16, #loc17])
#loc264 = loc(fused[#loc18, #loc19])
#loc265 = loc(fused[#loc20, #loc21])
#loc266 = loc(fused[#loc22, #loc23])
#loc267 = loc(fused[#loc24, #loc25])
#loc268 = loc(fused[#loc26, #loc27])
#loc269 = loc(fused[#loc29, #loc30])
#loc270 = loc(fused[#loc31, #loc32])
#loc271 = loc(fused[#loc33, #loc34])
#loc272 = loc(fused[#loc36, #loc35])
#loc273 = loc(fused[#loc37, #loc38])
#loc274 = loc(fused[#loc39, #loc40])
#loc275 = loc(fused[#loc41, #loc38])
#loc276 = loc(fused[#loc42, #loc43])
#loc277 = loc(fused[#loc44, #loc45])
#loc278 = loc(fused[#loc46, #loc47])
#loc279 = loc(fused[#loc48, #loc49])
#loc280 = loc(fused[#loc50, #loc51])
#loc281 = loc(fused[#loc52, #loc53])
#loc282 = loc(fused[#loc56, #loc57])
#loc283 = loc(fused[#loc58, #loc59])
#loc284 = loc(fused[#loc64, #loc65])
#loc285 = loc(fused[#loc66, #loc67])
#loc286 = loc(fused[#loc68, #loc69])
#loc287 = loc(fused[#loc70, #loc67])
#loc288 = loc(fused[#loc72, #loc73])
#loc289 = loc(fused[#loc75, #loc76])
#loc290 = loc(fused[#loc77, #loc78])
#loc291 = loc(fused[#loc81, #loc79])
#loc292 = loc(fused[#loc85, #loc86])
#loc293 = loc(fused[#loc90, #loc91])
#loc294 = loc(fused[#loc92, #loc93])
#loc295 = loc(fused[#loc95, #loc96])
#loc296 = loc(fused[#loc97, #loc98])
#loc297 = loc(fused[#loc99, #loc100])
#loc298 = loc(fused[#loc101, #loc93])
#loc299 = loc(fused[#loc107, #loc108])
#loc300 = loc(fused[#loc109, #loc110])
#loc301 = loc(fused[#loc111, #loc112])
#loc302 = loc(fused[#loc111, #loc113])
#loc303 = loc(fused[#loc109, #loc114])
#loc304 = loc(fused[#loc117, #loc118])
#loc305 = loc(fused[#loc119, #loc120])
#loc306 = loc(fused[#loc121, #loc122])
#loc307 = loc(fused[#loc124, #loc125])
#loc308 = loc(fused[#loc126, #loc120])
#loc309 = loc(fused[#loc132, #loc133])
#loc310 = loc(fused[#loc131, #loc133])
#loc311 = loc(fused[#loc130, #loc133])
#loc312 = loc(fused[#loc129, #loc128])
#loc313 = loc(fused[#loc138, #loc139])
#loc314 = loc(fused[#loc140, #loc141])
#loc315 = loc(fused[#loc143, #loc141])
#loc316 = loc(fused[#loc146, #loc144])
#loc317 = loc(fused[#loc150, #loc151])
#loc318 = loc(fused[#loc152, #loc153])
#loc319 = loc(fused[#loc155, #loc153])
#loc320 = loc(fused[#loc158, #loc156])
#loc321 = loc(fused[#loc160, #loc161])
#loc322 = loc(fused[#loc162, #loc163])
#loc323 = loc(fused[#loc164, #loc161])
#loc324 = loc(fused[#loc167, #loc168])
#loc325 = loc(fused[#loc169, #loc170])
#loc326 = loc(fused[#loc173, #loc174])
#loc327 = loc(fused[#loc175, #loc176])
#loc328 = loc(fused[#loc177, #loc178])
#loc329 = loc(fused[#loc179, #loc176])
#loc330 = loc(fused[#loc182, #loc183])
#loc331 = loc(fused[#loc184, #loc185])
#loc332 = loc(fused[#loc186, #loc187])
#loc333 = loc(fused[#loc188, #loc189])
#loc334 = loc(fused[#loc191, #loc192])
#loc335 = loc(fused[#loc194, #loc195])
#loc336 = loc(fused[#loc196, #loc197])
#loc337 = loc(fused[#loc199, #loc198])
#loc338 = loc(fused[#loc200, #loc201])
#loc339 = loc(fused[#loc202, #loc203])
#loc340 = loc(fused[#loc204, #loc205, #loc206, #loc201])
#loc341 = loc(fused[#loc210, #loc211])
#loc342 = loc(fused[#loc212, #loc213])
#loc343 = loc(fused[#loc217, #loc218])
#loc344 = loc(fused[#loc219, #loc220])
#loc345 = loc(fused[#loc221, #loc222])
#loc346 = loc(fused[#loc223, #loc220])
#loc347 = loc(fused[#loc226, #loc227])
#loc348 = loc(fused[#loc228, #loc229])
#loc349 = loc(fused[#loc231, #loc230])
#loc350 = loc(fused[#loc232, #loc233])
#loc351 = loc(fused[#loc234, #loc235])
#loc352 = loc(fused[#loc236, #loc233])
#loc353 = loc(fused[#loc240, #loc241])
#loc354 = loc(fused[#loc242, #loc243])
#loc355 = loc(fused[#loc247, #loc248])
#loc356 = loc(fused[#loc249, #loc250])
#loc357 = loc(fused[#loc251, #loc252])
#loc358 = loc(fused[#loc253, #loc250])
