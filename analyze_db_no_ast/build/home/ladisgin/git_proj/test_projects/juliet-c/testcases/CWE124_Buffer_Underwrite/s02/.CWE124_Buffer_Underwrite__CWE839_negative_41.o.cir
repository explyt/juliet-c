!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc8 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":22:21)
#loc9 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":22:25)
#loc63 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":95:25)
#loc64 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":95:29)
#loc116 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":60:25)
#loc117 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":60:29)
#true = #cir.bool<true> : !cir.bool
#loc165 = loc(fused[#loc8, #loc9])
#loc186 = loc(fused[#loc63, #loc64])
#loc205 = loc(fused[#loc116, #loc117])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_negative_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc162)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc163)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc5)
  cir.func internal private  @badSink(%arg0: !s32i loc(fused[#loc8, #loc9])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc165)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc10)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc167)
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc168)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc168)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc168)
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
        %5 = cir.const #cir.int<10> : !s32i loc(#loc20)
        %6 = cir.cmp(lt, %4, %5) : !s32i, !s32i loc(#loc170)
        %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc21)
        cir.if %7 {
          %8 = cir.const #cir.int<1> : !s32i loc(#loc25)
          %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
          %10 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc27)
          %11 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %9 : !s32i), !cir.ptr<!s32i> loc(#loc27)
          cir.store %8, %11 : !s32i, !cir.ptr<!s32i> loc(#loc172)
          cir.scope {
            %12 = cir.const #cir.int<0> : !s32i loc(#loc30)
            cir.store %12, %1 : !s32i, !cir.ptr<!s32i> loc(#loc174)
            cir.for : cond {
              %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc32)
              %14 = cir.const #cir.int<10> : !s32i loc(#loc33)
              %15 = cir.cmp(lt, %13, %14) : !s32i, !s32i loc(#loc175)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc34)
              cir.condition(%16) loc(#loc34)
            } body {
              cir.scope {
                %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc36)
                %14 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc37)
                %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc37)
                %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc37)
                cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc38)
              } loc(#loc176)
              cir.yield loc(#loc29)
            } step {
              %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc39)
              %14 = cir.unary(inc, %13) : !s32i, !s32i loc(#loc40)
              cir.store %14, %1 : !s32i, !cir.ptr<!s32i> loc(#loc177)
              cir.yield loc(#loc173)
            } loc(#loc173)
          } loc(#loc173)
        } else {
          %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc5)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc5)
          cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc41)
        } loc(#loc171)
      } loc(#loc169)
    } loc(#loc166)
    cir.return loc(#loc7)
  } loc(#loc164)
  cir.func no_proto  @CWE124_Buffer_Underwrite__CWE839_negative_41_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc179)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc46)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc47)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc49)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc50)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc181)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc52)
    cir.call @badSink(%5) : (!s32i) -> () loc(#loc53)
    cir.return loc(#loc43)
  } loc(#loc178)
  cir.func no_proto  @CWE124_Buffer_Underwrite__CWE839_negative_41_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc183)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc56)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc184)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    cir.return loc(#loc55)
  } loc(#loc182)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc60)
  cir.func internal private  @goodB2GSink(%arg0: !s32i loc(fused[#loc63, #loc64])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc186)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc65)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc188)
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc189)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc189)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc189)
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc74)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc75)
        %6 = cir.cmp(ge, %4, %5) : !s32i, !s32i loc(#loc191)
        %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc76)
        %8 = cir.ternary(%7, true {
          %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc78)
          %10 = cir.const #cir.int<10> : !s32i loc(#loc79)
          %11 = cir.cmp(lt, %9, %10) : !s32i, !s32i loc(#loc192)
          %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc81)
          %13 = cir.ternary(%12, true {
            %14 = cir.const #true loc(#loc77)
            cir.yield %14 : !cir.bool loc(#loc77)
          }, false {
            %14 = cir.const #false loc(#loc77)
            cir.yield %14 : !cir.bool loc(#loc77)
          }) : (!cir.bool) -> !cir.bool loc(#loc77)
          cir.yield %13 : !cir.bool loc(#loc77)
        }, false {
          %9 = cir.const #false loc(#loc77)
          cir.yield %9 : !cir.bool loc(#loc77)
        }) : (!cir.bool) -> !cir.bool loc(#loc77)
        cir.if %8 {
          %9 = cir.const #cir.int<1> : !s32i loc(#loc85)
          %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
          %11 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc87)
          %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !s32i), !cir.ptr<!s32i> loc(#loc87)
          cir.store %9, %12 : !s32i, !cir.ptr<!s32i> loc(#loc194)
          cir.scope {
            %13 = cir.const #cir.int<0> : !s32i loc(#loc90)
            cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc196)
            cir.for : cond {
              %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc92)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc93)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc197)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc94)
              cir.condition(%17) loc(#loc94)
            } body {
              cir.scope {
                %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc96)
                %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc97)
                %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc97)
                %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc97)
                cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc98)
              } loc(#loc198)
              cir.yield loc(#loc89)
            } step {
              %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc99)
              %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc100)
              cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc199)
              cir.yield loc(#loc195)
            } loc(#loc195)
          } loc(#loc195)
        } else {
          %9 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc60)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc60)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc101)
        } loc(#loc193)
      } loc(#loc190)
    } loc(#loc187)
    cir.return loc(#loc62)
  } loc(#loc185)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc201)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc106)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc107)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc109)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc110)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc203)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc112)
    cir.call @goodB2GSink(%5) : (!s32i) -> () loc(#loc113)
    cir.return loc(#loc103)
  } loc(#loc200)
  cir.func internal private  @goodG2BSink(%arg0: !s32i loc(fused[#loc116, #loc117])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc205)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc207)
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc208)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc208)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc208)
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc127)
        %5 = cir.const #cir.int<10> : !s32i loc(#loc128)
        %6 = cir.cmp(lt, %4, %5) : !s32i, !s32i loc(#loc210)
        %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc129)
        cir.if %7 {
          %8 = cir.const #cir.int<1> : !s32i loc(#loc133)
          %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc134)
          %10 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc135)
          %11 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %9 : !s32i), !cir.ptr<!s32i> loc(#loc135)
          cir.store %8, %11 : !s32i, !cir.ptr<!s32i> loc(#loc212)
          cir.scope {
            %12 = cir.const #cir.int<0> : !s32i loc(#loc138)
            cir.store %12, %1 : !s32i, !cir.ptr<!s32i> loc(#loc214)
            cir.for : cond {
              %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc140)
              %14 = cir.const #cir.int<10> : !s32i loc(#loc141)
              %15 = cir.cmp(lt, %13, %14) : !s32i, !s32i loc(#loc215)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc142)
              cir.condition(%16) loc(#loc142)
            } body {
              cir.scope {
                %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc144)
                %14 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc145)
                %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc145)
                %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc145)
                cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc146)
              } loc(#loc216)
              cir.yield loc(#loc137)
            } step {
              %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc147)
              %14 = cir.unary(inc, %13) : !s32i, !s32i loc(#loc148)
              cir.store %14, %1 : !s32i, !cir.ptr<!s32i> loc(#loc217)
              cir.yield loc(#loc213)
            } loc(#loc213)
          } loc(#loc213)
        } else {
          %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc149)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc149)
          cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc150)
        } loc(#loc211)
      } loc(#loc209)
    } loc(#loc206)
    cir.return loc(#loc115)
  } loc(#loc204)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc219)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc155)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc156)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc220)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc158)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc221)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc160)
    cir.call @goodG2BSink(%4) : (!s32i) -> () loc(#loc161)
    cir.return loc(#loc152)
  } loc(#loc218)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_negative_41.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":40:23)
#loc6 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":22:1)
#loc7 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":43:1)
#loc10 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":23:1)
#loc11 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":24:5)
#loc12 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":42:5)
#loc13 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":25:9)
#loc14 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":25:13)
#loc15 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":26:9)
#loc16 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":26:30)
#loc17 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":29:9)
#loc18 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":41:9)
#loc19 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":29:13)
#loc20 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":29:20)
#loc21 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":29:18)
#loc22 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":30:9)
#loc23 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":37:9)
#loc24 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":39:9)
#loc25 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":31:28)
#loc26 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":31:20)
#loc27 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":31:13)
#loc28 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":33:13)
#loc29 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":36:13)
#loc30 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":33:21)
#loc31 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":33:17)
#loc32 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":33:24)
#loc33 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":33:28)
#loc34 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":33:26)
#loc35 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":34:13)
#loc36 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":35:37)
#loc37 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":35:30)
#loc38 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":35:17)
#loc39 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":33:33)
#loc40 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":33:32)
#loc41 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":40:13)
#loc42 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":45:1)
#loc43 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":53:1)
#loc44 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":47:5)
#loc45 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":47:9)
#loc46 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":49:13)
#loc47 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":49:12)
#loc48 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":49:5)
#loc49 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":51:13)
#loc50 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":51:12)
#loc51 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":51:5)
#loc52 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":52:13)
#loc53 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":52:5)
#loc54 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":127:1)
#loc55 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":131:1)
#loc56 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":129:5)
#loc57 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":129:13)
#loc58 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":130:5)
#loc59 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":130:13)
#loc60 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":112:23)
#loc61 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":95:1)
#loc62 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":115:1)
#loc65 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":96:1)
#loc66 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":97:5)
#loc67 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":114:5)
#loc68 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":98:9)
#loc69 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":98:13)
#loc70 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":99:9)
#loc71 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":99:30)
#loc72 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":101:9)
#loc73 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":113:9)
#loc74 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":101:13)
#loc75 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":101:21)
#loc76 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":101:18)
#loc77 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":101:23)
#loc78 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":101:26)
#loc79 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":101:34)
#loc80 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":101:36)
#loc81 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":101:31)
#loc82 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":102:9)
#loc83 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":109:9)
#loc84 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":111:9)
#loc85 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":103:28)
#loc86 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":103:20)
#loc87 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":103:13)
#loc88 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":105:13)
#loc89 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":108:13)
#loc90 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":105:21)
#loc91 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":105:17)
#loc92 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":105:24)
#loc93 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":105:28)
#loc94 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":105:26)
#loc95 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":106:13)
#loc96 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":107:37)
#loc97 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":107:30)
#loc98 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":107:17)
#loc99 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":105:33)
#loc100 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":105:32)
#loc101 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":112:13)
#loc102 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":117:1)
#loc103 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":125:1)
#loc104 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":119:5)
#loc105 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":119:9)
#loc106 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":121:13)
#loc107 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":121:12)
#loc108 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":121:5)
#loc109 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":123:13)
#loc110 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":123:12)
#loc111 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":123:5)
#loc112 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":124:17)
#loc113 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":124:5)
#loc114 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":60:1)
#loc115 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":81:1)
#loc118 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":61:1)
#loc119 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":62:5)
#loc120 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":80:5)
#loc121 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":63:9)
#loc122 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":63:13)
#loc123 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":64:9)
#loc124 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":64:30)
#loc125 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":67:9)
#loc126 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":79:9)
#loc127 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":67:13)
#loc128 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":67:20)
#loc129 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":67:18)
#loc130 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":68:9)
#loc131 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":75:9)
#loc132 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":77:9)
#loc133 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":69:28)
#loc134 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":69:20)
#loc135 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":69:13)
#loc136 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":71:13)
#loc137 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":74:13)
#loc138 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":71:21)
#loc139 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":71:17)
#loc140 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":71:24)
#loc141 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":71:28)
#loc142 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":71:26)
#loc143 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":72:13)
#loc144 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":73:37)
#loc145 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":73:30)
#loc146 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":73:17)
#loc147 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":71:33)
#loc148 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":71:32)
#loc149 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":78:23)
#loc150 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":78:13)
#loc151 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":83:1)
#loc152 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":92:1)
#loc153 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":85:5)
#loc154 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":85:9)
#loc155 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":87:13)
#loc156 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":87:12)
#loc157 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":87:5)
#loc158 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":90:12)
#loc159 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":90:5)
#loc160 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":91:17)
#loc161 = loc("CWE124_Buffer_Underwrite__CWE839_negative_41.c":91:5)
#loc162 = loc(fused[#loc1, #loc2])
#loc163 = loc(fused[#loc3, #loc4])
#loc164 = loc(fused[#loc6, #loc7])
#loc166 = loc(fused[#loc11, #loc12])
#loc167 = loc(fused[#loc13, #loc14])
#loc168 = loc(fused[#loc15, #loc16])
#loc169 = loc(fused[#loc17, #loc18])
#loc170 = loc(fused[#loc19, #loc20])
#loc171 = loc(fused[#loc22, #loc23, #loc24, #loc18])
#loc172 = loc(fused[#loc27, #loc25])
#loc173 = loc(fused[#loc28, #loc29])
#loc174 = loc(fused[#loc31, #loc30])
#loc175 = loc(fused[#loc32, #loc33])
#loc176 = loc(fused[#loc35, #loc29])
#loc177 = loc(fused[#loc40, #loc39])
#loc178 = loc(fused[#loc42, #loc43])
#loc179 = loc(fused[#loc44, #loc45])
#loc180 = loc(fused[#loc48, #loc46])
#loc181 = loc(fused[#loc51, #loc49])
#loc182 = loc(fused[#loc54, #loc55])
#loc183 = loc(fused[#loc56, #loc57])
#loc184 = loc(fused[#loc58, #loc59])
#loc185 = loc(fused[#loc61, #loc62])
#loc187 = loc(fused[#loc66, #loc67])
#loc188 = loc(fused[#loc68, #loc69])
#loc189 = loc(fused[#loc70, #loc71])
#loc190 = loc(fused[#loc72, #loc73])
#loc191 = loc(fused[#loc74, #loc75])
#loc192 = loc(fused[#loc78, #loc80])
#loc193 = loc(fused[#loc82, #loc83, #loc84, #loc73])
#loc194 = loc(fused[#loc87, #loc85])
#loc195 = loc(fused[#loc88, #loc89])
#loc196 = loc(fused[#loc91, #loc90])
#loc197 = loc(fused[#loc92, #loc93])
#loc198 = loc(fused[#loc95, #loc89])
#loc199 = loc(fused[#loc100, #loc99])
#loc200 = loc(fused[#loc102, #loc103])
#loc201 = loc(fused[#loc104, #loc105])
#loc202 = loc(fused[#loc108, #loc106])
#loc203 = loc(fused[#loc111, #loc109])
#loc204 = loc(fused[#loc114, #loc115])
#loc206 = loc(fused[#loc119, #loc120])
#loc207 = loc(fused[#loc121, #loc122])
#loc208 = loc(fused[#loc123, #loc124])
#loc209 = loc(fused[#loc125, #loc126])
#loc210 = loc(fused[#loc127, #loc128])
#loc211 = loc(fused[#loc130, #loc131, #loc132, #loc126])
#loc212 = loc(fused[#loc135, #loc133])
#loc213 = loc(fused[#loc136, #loc137])
#loc214 = loc(fused[#loc139, #loc138])
#loc215 = loc(fused[#loc140, #loc141])
#loc216 = loc(fused[#loc143, #loc137])
#loc217 = loc(fused[#loc148, #loc147])
#loc218 = loc(fused[#loc151, #loc152])
#loc219 = loc(fused[#loc153, #loc154])
#loc220 = loc(fused[#loc157, #loc155])
#loc221 = loc(fused[#loc159, #loc158])
