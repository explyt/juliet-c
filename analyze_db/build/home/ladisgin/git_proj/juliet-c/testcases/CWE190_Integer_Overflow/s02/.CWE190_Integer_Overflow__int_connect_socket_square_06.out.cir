!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc150 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":358:10)
#loc151 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":358:14)
#loc152 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":358:20)
#loc153 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":358:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc527 = loc(fused[#loc150, #loc151])
#loc528 = loc(fused[#loc152, #loc153])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_connect_socket_square_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc467)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc468)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc469)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc470)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc471)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc472)
  cir.func private @close(!s32i) -> !s32i loc(#loc473)
  cir.func private @printIntLine(!s32i) loc(#loc474)
  cir.func no_proto @CWE190_Integer_Overflow__int_connect_socket_square_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc476)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc22)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc477)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc26)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc27)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc479)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc482)
          %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc483)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc484)
          %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc485)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc36)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc36)
          cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc484)
          cir.scope {
            cir.do {
              %11 = cir.const #cir.int<2> : !s32i loc(#loc41)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc42)
              %13 = cir.const #cir.int<6> : !s32i loc(#loc43)
              %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc44)
              cir.store %14, %7 : !s32i, !cir.ptr<!s32i> loc(#loc487)
              cir.scope {
                %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc49)
                %54 = cir.const #cir.int<1> : !s32i loc(#loc50)
                %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc50)
                %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc489)
                cir.if %56 {
                  cir.break loc(#loc52)
                } loc(#loc490)
              } loc(#loc488)
              %15 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc491)
              %16 = cir.const #cir.int<0> : !s32i loc(#loc55)
              %17 = cir.const #cir.int<16> : !u64i loc(#loc492)
              cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc493)
              %18 = cir.const #cir.int<2> : !s32i loc(#loc60)
              %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc60)
              %20 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc61)
              cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc494)
              %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
              %23 = cir.call @inet_addr(%22) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc63)
              %24 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc64)
              %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc65)
              cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc495)
              %26 = cir.const #cir.int<27015> : !s32i loc(#loc68)
              %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc68)
              %28 = cir.call @htons(%27) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc69)
              %29 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
              cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc496)
              cir.scope {
                %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc75)
                %54 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc498)
                %55 = cir.const #cir.int<16> : !u64i loc(#loc499)
                %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc499)
                %57 = cir.call @connect(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc80)
                %58 = cir.const #cir.int<1> : !s32i loc(#loc81)
                %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc81)
                %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc500)
                cir.if %60 {
                  cir.break loc(#loc83)
                } loc(#loc501)
              } loc(#loc497)
              %30 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc84)
              %31 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc85)
              %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc85)
              %33 = cir.const #cir.int<3> : !s32i loc(#loc86)
              %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc86)
              %35 = cir.const #cir.int<4> : !u64i loc(#loc86)
              %36 = cir.binop(mul, %34, %35) : !u64i loc(#loc86)
              %37 = cir.const #cir.int<2> : !s32i loc(#loc86)
              %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc86)
              %39 = cir.binop(add, %36, %38) : !u64i loc(#loc86)
              %40 = cir.const #cir.int<1> : !s32i loc(#loc87)
              %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc87)
              %42 = cir.binop(sub, %39, %41) : !u64i loc(#loc502)
              %43 = cir.const #cir.int<0> : !s32i loc(#loc88)
              %44 = cir.call @recv(%30, %32, %42, %43) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc89)
              %45 = cir.cast(integral, %44 : !s64i), !s32i loc(#loc89)
              cir.store %45, %5 : !s32i, !cir.ptr<!s32i> loc(#loc503)
              cir.scope {
                %53 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc94)
                %54 = cir.const #cir.int<1> : !s32i loc(#loc95)
                %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc95)
                %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc505)
                %57 = cir.ternary(%56, true {
                  %58 = cir.const #true loc(#loc96)
                  cir.yield %58 : !cir.bool loc(#loc96)
                }, false {
                  %58 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc97)
                  %59 = cir.const #cir.int<0> : !s32i loc(#loc98)
                  %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc506)
                  %61 = cir.ternary(%60, true {
                    %62 = cir.const #true loc(#loc96)
                    cir.yield %62 : !cir.bool loc(#loc96)
                  }, false {
                    %62 = cir.const #false loc(#loc96)
                    cir.yield %62 : !cir.bool loc(#loc96)
                  }) : (!cir.bool) -> !cir.bool loc(#loc96)
                  cir.yield %61 : !cir.bool loc(#loc96)
                }) : (!cir.bool) -> !cir.bool loc(#loc96)
                cir.if %57 {
                  cir.break loc(#loc100)
                } loc(#loc507)
              } loc(#loc504)
              %46 = cir.const #cir.int<0> : !s32i loc(#loc101)
              %47 = cir.cast(integral, %46 : !s32i), !s8i loc(#loc101)
              %48 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc102)
              %49 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc103)
              %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !s32i), !cir.ptr<!s8i> loc(#loc103)
              cir.store %47, %50 : !s8i, !cir.ptr<!s8i> loc(#loc508)
              %51 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc104)
              %52 = cir.call @atoi(%51) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc105)
              cir.store %52, %0 : !s32i, !cir.ptr<!s32i> loc(#loc509)
              cir.yield loc(#loc40)
            } while {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc108)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc108)
              cir.condition(%12) loc(#loc108)
            } loc(#loc486)
          } loc(#loc486)
          cir.scope {
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc111)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc112)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc112)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc511)
            cir.if %14 {
              %15 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc114)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc115)
            } loc(#loc512)
          } loc(#loc510)
        } loc(#loc481)
      } loc(#loc480)
    } loc(#loc478)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc118)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc119)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc514)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc517)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc125)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc124)
          %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc125)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc517)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc126)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc127)
        } loc(#loc516)
      } loc(#loc515)
    } loc(#loc513)
    cir.return loc(#loc19)
  } loc(#loc475)
  cir.func no_proto @CWE190_Integer_Overflow__int_connect_socket_square_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc519)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc130)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc520)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc132)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc521)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc134)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc522)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc136)
    cir.return loc(#loc129)
  } loc(#loc518)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc523)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc524)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc525)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc144)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc145)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc146)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc147)
  cir.func @main(%arg0: !s32i loc(fused[#loc150, #loc151]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc152, #loc153])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc527)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc528)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc149)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc154)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc154)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc155)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc156)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc156)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc157)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc144)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc144)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc158)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_connect_socket_square_06_good : !cir.ptr<!cir.func<!void ()>> loc(#loc529)
    cir.call @CWE190_Integer_Overflow__int_connect_socket_square_06_good() : () -> () loc(#loc159)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc145)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc145)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc161)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc146)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc146)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc162)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_connect_socket_square_06_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc530)
    cir.call @CWE190_Integer_Overflow__int_connect_socket_square_06_bad() : () -> () loc(#loc163)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc147)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc147)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc165)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc166)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc531)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc531)
    cir.return %17 : !s32i loc(#loc531)
  } loc(#loc526)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc168)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc169)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc170)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc533)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc175)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc534)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc179)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc180)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc536)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc539)
          %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc540)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc541)
          %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc542)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc189)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc189)
          cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc541)
          cir.scope {
            cir.do {
              %11 = cir.const #cir.int<2> : !s32i loc(#loc194)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc195)
              %13 = cir.const #cir.int<6> : !s32i loc(#loc196)
              %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc197)
              cir.store %14, %7 : !s32i, !cir.ptr<!s32i> loc(#loc544)
              cir.scope {
                %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc202)
                %54 = cir.const #cir.int<1> : !s32i loc(#loc203)
                %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc203)
                %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc546)
                cir.if %56 {
                  cir.break loc(#loc205)
                } loc(#loc547)
              } loc(#loc545)
              %15 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc548)
              %16 = cir.const #cir.int<0> : !s32i loc(#loc208)
              %17 = cir.const #cir.int<16> : !u64i loc(#loc549)
              cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc550)
              %18 = cir.const #cir.int<2> : !s32i loc(#loc213)
              %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc213)
              %20 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc61)
              cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc551)
              %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc215)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc215)
              %23 = cir.call @inet_addr(%22) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc216)
              %24 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc64)
              %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc65)
              cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc552)
              %26 = cir.const #cir.int<27015> : !s32i loc(#loc219)
              %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc219)
              %28 = cir.call @htons(%27) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc220)
              %29 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
              cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc553)
              cir.scope {
                %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc225)
                %54 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc555)
                %55 = cir.const #cir.int<16> : !u64i loc(#loc556)
                %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc556)
                %57 = cir.call @connect(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc230)
                %58 = cir.const #cir.int<1> : !s32i loc(#loc231)
                %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc231)
                %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc557)
                cir.if %60 {
                  cir.break loc(#loc233)
                } loc(#loc558)
              } loc(#loc554)
              %30 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc234)
              %31 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc235)
              %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc235)
              %33 = cir.const #cir.int<3> : !s32i loc(#loc236)
              %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc236)
              %35 = cir.const #cir.int<4> : !u64i loc(#loc236)
              %36 = cir.binop(mul, %34, %35) : !u64i loc(#loc236)
              %37 = cir.const #cir.int<2> : !s32i loc(#loc236)
              %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc236)
              %39 = cir.binop(add, %36, %38) : !u64i loc(#loc236)
              %40 = cir.const #cir.int<1> : !s32i loc(#loc237)
              %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc237)
              %42 = cir.binop(sub, %39, %41) : !u64i loc(#loc559)
              %43 = cir.const #cir.int<0> : !s32i loc(#loc238)
              %44 = cir.call @recv(%30, %32, %42, %43) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc239)
              %45 = cir.cast(integral, %44 : !s64i), !s32i loc(#loc239)
              cir.store %45, %5 : !s32i, !cir.ptr<!s32i> loc(#loc560)
              cir.scope {
                %53 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc244)
                %54 = cir.const #cir.int<1> : !s32i loc(#loc245)
                %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc245)
                %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc562)
                %57 = cir.ternary(%56, true {
                  %58 = cir.const #true loc(#loc246)
                  cir.yield %58 : !cir.bool loc(#loc246)
                }, false {
                  %58 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc247)
                  %59 = cir.const #cir.int<0> : !s32i loc(#loc248)
                  %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc563)
                  %61 = cir.ternary(%60, true {
                    %62 = cir.const #true loc(#loc246)
                    cir.yield %62 : !cir.bool loc(#loc246)
                  }, false {
                    %62 = cir.const #false loc(#loc246)
                    cir.yield %62 : !cir.bool loc(#loc246)
                  }) : (!cir.bool) -> !cir.bool loc(#loc246)
                  cir.yield %61 : !cir.bool loc(#loc246)
                }) : (!cir.bool) -> !cir.bool loc(#loc246)
                cir.if %57 {
                  cir.break loc(#loc250)
                } loc(#loc564)
              } loc(#loc561)
              %46 = cir.const #cir.int<0> : !s32i loc(#loc251)
              %47 = cir.cast(integral, %46 : !s32i), !s8i loc(#loc251)
              %48 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc252)
              %49 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc253)
              %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !s32i), !cir.ptr<!s8i> loc(#loc253)
              cir.store %47, %50 : !s8i, !cir.ptr<!s8i> loc(#loc565)
              %51 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc254)
              %52 = cir.call @atoi(%51) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc255)
              cir.store %52, %0 : !s32i, !cir.ptr<!s32i> loc(#loc566)
              cir.yield loc(#loc193)
            } while {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc258)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc258)
              cir.condition(%12) loc(#loc258)
            } loc(#loc543)
          } loc(#loc543)
          cir.scope {
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc261)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc262)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc262)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc568)
            cir.if %14 {
              %15 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc264)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc265)
            } loc(#loc569)
          } loc(#loc567)
        } loc(#loc538)
      } loc(#loc537)
    } loc(#loc535)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc268)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc269)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !cir.bool loc(#loc571)
      cir.if %4 {
        %5 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc168)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc168)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc273)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc276)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc277)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc277)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc277)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc277)
          %10 = cir.cmp(gt, %5, %9) : !s32i, !cir.bool loc(#loc574)
          %11 = cir.ternary(%10, true {
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc279)
            %13 = cir.abs %12 poison : !s32i loc(#loc280)
            %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc280)
            %15 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc281)
            %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc282)
            %17 = cir.cast(int_to_float, %16 : !s32i), !cir.double loc(#loc282)
            %18 = cir.call @sqrt(%17) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc281)
            %19 = cir.cast(float_to_int, %18 : !cir.double), !s64i loc(#loc281)
            %20 = cir.cmp(lt, %14, %19) : !s64i, !cir.bool loc(#loc575)
            %21 = cir.ternary(%20, true {
              %22 = cir.const #true loc(#loc278)
              cir.yield %22 : !cir.bool loc(#loc278)
            }, false {
              %22 = cir.const #false loc(#loc278)
              cir.yield %22 : !cir.bool loc(#loc278)
            }) : (!cir.bool) -> !cir.bool loc(#loc278)
            cir.yield %21 : !cir.bool loc(#loc278)
          }, false {
            %12 = cir.const #false loc(#loc278)
            cir.yield %12 : !cir.bool loc(#loc278)
          }) : (!cir.bool) -> !cir.bool loc(#loc278)
          cir.if %11 {
            %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc577)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc289)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc288)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc289)
            cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc577)
            %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc290)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc291)
          } else {
            %12 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc170)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc170)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc292)
          } loc(#loc576)
        } loc(#loc573)
      } loc(#loc572)
    } loc(#loc570)
    cir.return loc(#loc172)
  } loc(#loc532)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc579)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc297)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc580)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc301)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc302)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc582)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc585)
          %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc586)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc587)
          %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc588)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc311)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc311)
          cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc587)
          cir.scope {
            cir.do {
              %11 = cir.const #cir.int<2> : !s32i loc(#loc316)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc317)
              %13 = cir.const #cir.int<6> : !s32i loc(#loc318)
              %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc319)
              cir.store %14, %7 : !s32i, !cir.ptr<!s32i> loc(#loc590)
              cir.scope {
                %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc324)
                %54 = cir.const #cir.int<1> : !s32i loc(#loc325)
                %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc325)
                %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc592)
                cir.if %56 {
                  cir.break loc(#loc327)
                } loc(#loc593)
              } loc(#loc591)
              %15 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc594)
              %16 = cir.const #cir.int<0> : !s32i loc(#loc330)
              %17 = cir.const #cir.int<16> : !u64i loc(#loc595)
              cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc596)
              %18 = cir.const #cir.int<2> : !s32i loc(#loc335)
              %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc335)
              %20 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc61)
              cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc597)
              %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc337)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc337)
              %23 = cir.call @inet_addr(%22) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc338)
              %24 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc64)
              %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc65)
              cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc598)
              %26 = cir.const #cir.int<27015> : !s32i loc(#loc341)
              %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc341)
              %28 = cir.call @htons(%27) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc342)
              %29 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
              cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc599)
              cir.scope {
                %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc347)
                %54 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc601)
                %55 = cir.const #cir.int<16> : !u64i loc(#loc602)
                %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc602)
                %57 = cir.call @connect(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc352)
                %58 = cir.const #cir.int<1> : !s32i loc(#loc353)
                %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc353)
                %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc603)
                cir.if %60 {
                  cir.break loc(#loc355)
                } loc(#loc604)
              } loc(#loc600)
              %30 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc356)
              %31 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc357)
              %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc357)
              %33 = cir.const #cir.int<3> : !s32i loc(#loc358)
              %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc358)
              %35 = cir.const #cir.int<4> : !u64i loc(#loc358)
              %36 = cir.binop(mul, %34, %35) : !u64i loc(#loc358)
              %37 = cir.const #cir.int<2> : !s32i loc(#loc358)
              %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc358)
              %39 = cir.binop(add, %36, %38) : !u64i loc(#loc358)
              %40 = cir.const #cir.int<1> : !s32i loc(#loc359)
              %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc359)
              %42 = cir.binop(sub, %39, %41) : !u64i loc(#loc605)
              %43 = cir.const #cir.int<0> : !s32i loc(#loc360)
              %44 = cir.call @recv(%30, %32, %42, %43) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc361)
              %45 = cir.cast(integral, %44 : !s64i), !s32i loc(#loc361)
              cir.store %45, %5 : !s32i, !cir.ptr<!s32i> loc(#loc606)
              cir.scope {
                %53 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc366)
                %54 = cir.const #cir.int<1> : !s32i loc(#loc367)
                %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc367)
                %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc608)
                %57 = cir.ternary(%56, true {
                  %58 = cir.const #true loc(#loc368)
                  cir.yield %58 : !cir.bool loc(#loc368)
                }, false {
                  %58 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc369)
                  %59 = cir.const #cir.int<0> : !s32i loc(#loc370)
                  %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc609)
                  %61 = cir.ternary(%60, true {
                    %62 = cir.const #true loc(#loc368)
                    cir.yield %62 : !cir.bool loc(#loc368)
                  }, false {
                    %62 = cir.const #false loc(#loc368)
                    cir.yield %62 : !cir.bool loc(#loc368)
                  }) : (!cir.bool) -> !cir.bool loc(#loc368)
                  cir.yield %61 : !cir.bool loc(#loc368)
                }) : (!cir.bool) -> !cir.bool loc(#loc368)
                cir.if %57 {
                  cir.break loc(#loc372)
                } loc(#loc610)
              } loc(#loc607)
              %46 = cir.const #cir.int<0> : !s32i loc(#loc373)
              %47 = cir.cast(integral, %46 : !s32i), !s8i loc(#loc373)
              %48 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc374)
              %49 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc375)
              %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !s32i), !cir.ptr<!s8i> loc(#loc375)
              cir.store %47, %50 : !s8i, !cir.ptr<!s8i> loc(#loc611)
              %51 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc376)
              %52 = cir.call @atoi(%51) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc377)
              cir.store %52, %0 : !s32i, !cir.ptr<!s32i> loc(#loc612)
              cir.yield loc(#loc315)
            } while {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc380)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc380)
              cir.condition(%12) loc(#loc380)
            } loc(#loc589)
          } loc(#loc589)
          cir.scope {
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc383)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc384)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc384)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc614)
            cir.if %14 {
              %15 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc386)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc387)
            } loc(#loc615)
          } loc(#loc613)
        } loc(#loc584)
      } loc(#loc583)
    } loc(#loc581)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc390)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc391)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc617)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc395)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc396)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc396)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc396)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc396)
          %10 = cir.cmp(gt, %5, %9) : !s32i, !cir.bool loc(#loc620)
          %11 = cir.ternary(%10, true {
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc398)
            %13 = cir.abs %12 poison : !s32i loc(#loc399)
            %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc399)
            %15 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc400)
            %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc401)
            %17 = cir.cast(int_to_float, %16 : !s32i), !cir.double loc(#loc401)
            %18 = cir.call @sqrt(%17) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc400)
            %19 = cir.cast(float_to_int, %18 : !cir.double), !s64i loc(#loc400)
            %20 = cir.cmp(lt, %14, %19) : !s64i, !cir.bool loc(#loc621)
            %21 = cir.ternary(%20, true {
              %22 = cir.const #true loc(#loc397)
              cir.yield %22 : !cir.bool loc(#loc397)
            }, false {
              %22 = cir.const #false loc(#loc397)
              cir.yield %22 : !cir.bool loc(#loc397)
            }) : (!cir.bool) -> !cir.bool loc(#loc397)
            cir.yield %21 : !cir.bool loc(#loc397)
          }, false {
            %12 = cir.const #false loc(#loc397)
            cir.yield %12 : !cir.bool loc(#loc397)
          }) : (!cir.bool) -> !cir.bool loc(#loc397)
          cir.if %11 {
            %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc623)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc408)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc407)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc408)
            cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc623)
            %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc409)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc410)
          } else {
            %12 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc411)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc411)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc412)
          } loc(#loc622)
        } loc(#loc619)
      } loc(#loc618)
    } loc(#loc616)
    cir.return loc(#loc294)
  } loc(#loc578)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc625)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc417)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc626)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc421)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc422)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !cir.bool loc(#loc628)
      cir.if %4 {
        %5 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc426)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc426)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc427)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc428)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc630)
      } loc(#loc629)
    } loc(#loc627)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc432)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc433)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc632)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc635)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc439)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc438)
          %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc439)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc635)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc440)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc441)
        } loc(#loc634)
      } loc(#loc633)
    } loc(#loc631)
    cir.return loc(#loc414)
  } loc(#loc624)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc637)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc446)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc638)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc450)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc451)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc640)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc453)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc642)
      } loc(#loc641)
    } loc(#loc639)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc457)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc458)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc644)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc647)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc464)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc463)
          %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc464)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc647)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc465)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc466)
        } loc(#loc646)
      } loc(#loc645)
    } loc(#loc643)
    cir.return loc(#loc443)
  } loc(#loc636)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_connect_socket_square_06.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":84:53)
#loc6 = loc("/usr/include/netinet/in.h":404:1)
#loc7 = loc("/usr/include/netinet/in.h":405:40)
#loc8 = loc("/usr/include/sys/socket.h":126:1)
#loc9 = loc("/usr/include/sys/socket.h":126:75)
#loc10 = loc("/usr/include/sys/socket.h":145:1)
#loc11 = loc("/usr/include/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":51:1)
#loc19 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":123:1)
#loc20 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":53:5)
#loc21 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":53:9)
#loc22 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":55:12)
#loc23 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":55:5)
#loc24 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":56:5)
#loc25 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":114:5)
#loc26 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":56:8)
#loc27 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":56:27)
#loc28 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":57:5)
#loc29 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":58:9)
#loc30 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":113:9)
#loc31 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":63:13)
#loc32 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":63:17)
#loc33 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":64:13)
#loc34 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":64:32)
#loc35 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":65:13)
#loc36 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":65:36)
#loc37 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":66:13)
#loc38 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":66:45)
#loc39 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":67:13)
#loc40 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":102:21)
#loc41 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":77:40)
#loc42 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":77:49)
#loc43 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":77:62)
#loc44 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":77:33)
#loc45 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":77:17)
#loc46 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":77:73)
#loc47 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":78:17)
#loc48 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":81:17)
#loc49 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":78:21)
#loc50 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":78:38)
#loc51 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":79:17)
#loc52 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":80:21)
#loc53 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":82:24)
#loc54 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":82:25)
#loc55 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":82:34)
#loc56 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":82:37)
#loc57 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":82:51)
#loc58 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":82:17)
#loc59 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":82:52)
#loc60 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":83:38)
#loc61 = loc("/usr/include/netinet/in.h":249:5)
#loc62 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":83:17)
#loc63 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":84:43)
#loc64 = loc("/usr/include/netinet/in.h":251:20)
#loc65 = loc("/usr/include/netinet/in.h":33:15)
#loc66 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":84:17)
#loc67 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":84:63)
#loc68 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":85:42)
#loc69 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":85:36)
#loc70 = loc("/usr/include/netinet/in.h":250:15)
#loc71 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":85:17)
#loc72 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":85:50)
#loc73 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":86:17)
#loc74 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":89:17)
#loc75 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":86:29)
#loc76 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":86:62)
#loc77 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":86:63)
#loc78 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":86:72)
#loc79 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":86:86)
#loc80 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":86:21)
#loc81 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":86:92)
#loc82 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":87:17)
#loc83 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":88:21)
#loc84 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":92:35)
#loc85 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":92:50)
#loc86 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":92:63)
#loc87 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":92:81)
#loc88 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":92:84)
#loc89 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":92:30)
#loc90 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":92:17)
#loc91 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":92:85)
#loc92 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":93:17)
#loc93 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":96:17)
#loc94 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":93:21)
#loc95 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":93:35)
#loc96 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":93:48)
#loc97 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":93:51)
#loc98 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":93:65)
#loc99 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":94:17)
#loc100 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":95:21)
#loc101 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":98:43)
#loc102 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":98:29)
#loc103 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":98:17)
#loc104 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":100:29)
#loc105 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":100:24)
#loc106 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":100:17)
#loc107 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":100:40)
#loc108 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":102:20)
#loc109 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":103:13)
#loc110 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":106:13)
#loc111 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":103:17)
#loc112 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":103:34)
#loc113 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":104:13)
#loc114 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":105:30)
#loc115 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":105:17)
#loc116 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":115:5)
#loc117 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":122:5)
#loc118 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":115:8)
#loc119 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":115:27)
#loc120 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":116:5)
#loc121 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":117:9)
#loc122 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":121:9)
#loc123 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":119:13)
#loc124 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":119:33)
#loc125 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":119:26)
#loc126 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":120:26)
#loc127 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":120:13)
#loc128 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":341:1)
#loc129 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":347:1)
#loc130 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":343:5)
#loc131 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":343:14)
#loc132 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":344:5)
#loc133 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":344:14)
#loc134 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":345:5)
#loc135 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":345:14)
#loc136 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":346:5)
#loc137 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":346:14)
#loc138 = loc("/usr/include/stdlib.h":575:1)
#loc139 = loc("/usr/include/stdlib.h":575:41)
#loc140 = loc("/usr/include/time.h":76:1)
#loc141 = loc("/usr/include/time.h":76:38)
#loc142 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc143 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc144 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":363:15)
#loc145 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":365:15)
#loc146 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":368:15)
#loc147 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":370:15)
#loc148 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":358:1)
#loc149 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":373:1)
#loc154 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":359:1)
#loc155 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":361:27)
#loc156 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":361:22)
#loc157 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":361:5)
#loc158 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":363:5)
#loc159 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":364:5)
#loc160 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":364:64)
#loc161 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":365:5)
#loc162 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":368:5)
#loc163 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":369:5)
#loc164 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":369:63)
#loc165 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":370:5)
#loc166 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":372:12)
#loc167 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":372:5)
#loc168 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":197:19)
#loc169 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc170 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":209:23)
#loc171 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":130:1)
#loc172 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":212:1)
#loc173 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":132:5)
#loc174 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":132:9)
#loc175 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":134:12)
#loc176 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":134:5)
#loc177 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":135:5)
#loc178 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":193:5)
#loc179 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":135:8)
#loc180 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":135:27)
#loc181 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":136:5)
#loc182 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":137:9)
#loc183 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":192:9)
#loc184 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":142:13)
#loc185 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":142:17)
#loc186 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":143:13)
#loc187 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":143:32)
#loc188 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":144:13)
#loc189 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":144:36)
#loc190 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":145:13)
#loc191 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":145:45)
#loc192 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":146:13)
#loc193 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":181:21)
#loc194 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":156:40)
#loc195 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":156:49)
#loc196 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":156:62)
#loc197 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":156:33)
#loc198 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":156:17)
#loc199 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":156:73)
#loc200 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":157:17)
#loc201 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":160:17)
#loc202 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":157:21)
#loc203 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":157:38)
#loc204 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":158:17)
#loc205 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":159:21)
#loc206 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":161:24)
#loc207 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":161:25)
#loc208 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":161:34)
#loc209 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":161:37)
#loc210 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":161:51)
#loc211 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":161:17)
#loc212 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":161:52)
#loc213 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":162:38)
#loc214 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":162:17)
#loc215 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":163:53)
#loc216 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":163:43)
#loc217 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":163:17)
#loc218 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":163:63)
#loc219 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":164:42)
#loc220 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":164:36)
#loc221 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":164:17)
#loc222 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":164:50)
#loc223 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":165:17)
#loc224 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":168:17)
#loc225 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":165:29)
#loc226 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":165:62)
#loc227 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":165:63)
#loc228 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":165:72)
#loc229 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":165:86)
#loc230 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":165:21)
#loc231 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":165:92)
#loc232 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":166:17)
#loc233 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":167:21)
#loc234 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":171:35)
#loc235 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":171:50)
#loc236 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":171:63)
#loc237 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":171:81)
#loc238 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":171:84)
#loc239 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":171:30)
#loc240 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":171:17)
#loc241 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":171:85)
#loc242 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":172:17)
#loc243 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":175:17)
#loc244 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":172:21)
#loc245 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":172:35)
#loc246 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":172:48)
#loc247 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":172:51)
#loc248 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":172:65)
#loc249 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":173:17)
#loc250 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":174:21)
#loc251 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":177:43)
#loc252 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":177:29)
#loc253 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":177:17)
#loc254 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":179:29)
#loc255 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":179:24)
#loc256 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":179:17)
#loc257 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":179:40)
#loc258 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":181:20)
#loc259 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":182:13)
#loc260 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":185:13)
#loc261 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":182:17)
#loc262 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":182:34)
#loc263 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":183:13)
#loc264 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":184:30)
#loc265 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":184:17)
#loc266 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":194:5)
#loc267 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":211:5)
#loc268 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":194:8)
#loc269 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":194:27)
#loc270 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":195:5)
#loc271 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":198:5)
#loc272 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":200:5)
#loc273 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":197:9)
#loc274 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":202:9)
#loc275 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":210:9)
#loc276 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":202:13)
#loc277 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":202:20)
#loc278 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":202:28)
#loc279 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":202:35)
#loc280 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":202:31)
#loc281 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":202:49)
#loc282 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":202:62)
#loc283 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":202:69)
#loc284 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":203:9)
#loc285 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":206:9)
#loc286 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":208:9)
#loc287 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":204:13)
#loc288 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":204:33)
#loc289 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":204:26)
#loc290 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":205:26)
#loc291 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":205:13)
#loc292 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":209:13)
#loc293 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":215:1)
#loc294 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":292:1)
#loc295 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":217:5)
#loc296 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":217:9)
#loc297 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":219:12)
#loc298 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":219:5)
#loc299 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":220:5)
#loc300 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":278:5)
#loc301 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":220:8)
#loc302 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":220:27)
#loc303 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":221:5)
#loc304 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":222:9)
#loc305 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":277:9)
#loc306 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":227:13)
#loc307 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":227:17)
#loc308 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":228:13)
#loc309 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":228:32)
#loc310 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":229:13)
#loc311 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":229:36)
#loc312 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":230:13)
#loc313 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":230:45)
#loc314 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":231:13)
#loc315 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":266:21)
#loc316 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":241:40)
#loc317 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":241:49)
#loc318 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":241:62)
#loc319 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":241:33)
#loc320 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":241:17)
#loc321 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":241:73)
#loc322 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":242:17)
#loc323 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":245:17)
#loc324 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":242:21)
#loc325 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":242:38)
#loc326 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":243:17)
#loc327 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":244:21)
#loc328 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":246:24)
#loc329 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":246:25)
#loc330 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":246:34)
#loc331 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":246:37)
#loc332 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":246:51)
#loc333 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":246:17)
#loc334 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":246:52)
#loc335 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":247:38)
#loc336 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":247:17)
#loc337 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":248:53)
#loc338 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":248:43)
#loc339 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":248:17)
#loc340 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":248:63)
#loc341 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":249:42)
#loc342 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":249:36)
#loc343 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":249:17)
#loc344 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":249:50)
#loc345 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":250:17)
#loc346 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":253:17)
#loc347 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":250:29)
#loc348 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":250:62)
#loc349 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":250:63)
#loc350 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":250:72)
#loc351 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":250:86)
#loc352 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":250:21)
#loc353 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":250:92)
#loc354 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":251:17)
#loc355 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":252:21)
#loc356 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":256:35)
#loc357 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":256:50)
#loc358 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":256:63)
#loc359 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":256:81)
#loc360 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":256:84)
#loc361 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":256:30)
#loc362 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":256:17)
#loc363 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":256:85)
#loc364 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":257:17)
#loc365 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":260:17)
#loc366 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":257:21)
#loc367 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":257:35)
#loc368 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":257:48)
#loc369 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":257:51)
#loc370 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":257:65)
#loc371 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":258:17)
#loc372 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":259:21)
#loc373 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":262:43)
#loc374 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":262:29)
#loc375 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":262:17)
#loc376 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":264:29)
#loc377 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":264:24)
#loc378 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":264:17)
#loc379 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":264:40)
#loc380 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":266:20)
#loc381 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":267:13)
#loc382 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":270:13)
#loc383 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":267:17)
#loc384 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":267:34)
#loc385 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":268:13)
#loc386 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":269:30)
#loc387 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":269:17)
#loc388 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":279:5)
#loc389 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":291:5)
#loc390 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":279:8)
#loc391 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":279:27)
#loc392 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":280:5)
#loc393 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":282:9)
#loc394 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":290:9)
#loc395 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":282:13)
#loc396 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":282:20)
#loc397 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":282:28)
#loc398 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":282:35)
#loc399 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":282:31)
#loc400 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":282:49)
#loc401 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":282:62)
#loc402 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":282:69)
#loc403 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":283:9)
#loc404 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":286:9)
#loc405 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":288:9)
#loc406 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":284:13)
#loc407 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":284:33)
#loc408 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":284:26)
#loc409 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":285:26)
#loc410 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":285:13)
#loc411 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":289:23)
#loc412 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":289:13)
#loc413 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":295:1)
#loc414 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":318:1)
#loc415 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":297:5)
#loc416 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":297:9)
#loc417 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":299:12)
#loc418 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":299:5)
#loc419 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":300:5)
#loc420 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":309:5)
#loc421 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":300:8)
#loc422 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":300:27)
#loc423 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":301:5)
#loc424 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":304:5)
#loc425 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":306:5)
#loc426 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":303:19)
#loc427 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":303:9)
#loc428 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":308:16)
#loc429 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":308:9)
#loc430 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":310:5)
#loc431 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":317:5)
#loc432 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":310:8)
#loc433 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":310:27)
#loc434 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":311:5)
#loc435 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":312:9)
#loc436 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":316:9)
#loc437 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":314:13)
#loc438 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":314:33)
#loc439 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":314:26)
#loc440 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":315:26)
#loc441 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":315:13)
#loc442 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":321:1)
#loc443 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":339:1)
#loc444 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":323:5)
#loc445 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":323:9)
#loc446 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":325:12)
#loc447 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":325:5)
#loc448 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":326:5)
#loc449 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":330:5)
#loc450 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":326:8)
#loc451 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":326:27)
#loc452 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":327:5)
#loc453 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":329:16)
#loc454 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":329:9)
#loc455 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":331:5)
#loc456 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":338:5)
#loc457 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":331:8)
#loc458 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":331:27)
#loc459 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":332:5)
#loc460 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":333:9)
#loc461 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":337:9)
#loc462 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":335:13)
#loc463 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":335:33)
#loc464 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":335:26)
#loc465 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":336:26)
#loc466 = loc("CWE190_Integer_Overflow__int_connect_socket_square_06.c":336:13)
#loc467 = loc(fused[#loc1, #loc2])
#loc468 = loc(fused[#loc3, #loc4])
#loc469 = loc(fused[#loc6, #loc7])
#loc470 = loc(fused[#loc8, #loc9])
#loc471 = loc(fused[#loc10, #loc11])
#loc472 = loc(fused[#loc12, #loc13])
#loc473 = loc(fused[#loc14, #loc15])
#loc474 = loc(fused[#loc16, #loc17])
#loc475 = loc(fused[#loc18, #loc19])
#loc476 = loc(fused[#loc20, #loc21])
#loc477 = loc(fused[#loc23, #loc22])
#loc478 = loc(fused[#loc24, #loc25])
#loc479 = loc(fused[#loc26, #loc27])
#loc480 = loc(fused[#loc28, #loc25])
#loc481 = loc(fused[#loc29, #loc30])
#loc482 = loc(fused[#loc31, #loc32])
#loc483 = loc(fused[#loc33, #loc34])
#loc484 = loc(fused[#loc35, #loc36])
#loc485 = loc(fused[#loc37, #loc38])
#loc486 = loc(fused[#loc39, #loc40])
#loc487 = loc(fused[#loc45, #loc46])
#loc488 = loc(fused[#loc47, #loc48])
#loc489 = loc(fused[#loc49, #loc50])
#loc490 = loc(fused[#loc51, #loc48])
#loc491 = loc(fused[#loc53, #loc54])
#loc492 = loc(fused[#loc56, #loc57])
#loc493 = loc(fused[#loc58, #loc59])
#loc494 = loc(fused[#loc62, #loc60])
#loc495 = loc(fused[#loc66, #loc67])
#loc496 = loc(fused[#loc71, #loc72])
#loc497 = loc(fused[#loc73, #loc74])
#loc498 = loc(fused[#loc76, #loc77])
#loc499 = loc(fused[#loc78, #loc79])
#loc500 = loc(fused[#loc80, #loc81])
#loc501 = loc(fused[#loc82, #loc74])
#loc502 = loc(fused[#loc86, #loc87])
#loc503 = loc(fused[#loc90, #loc91])
#loc504 = loc(fused[#loc92, #loc93])
#loc505 = loc(fused[#loc94, #loc95])
#loc506 = loc(fused[#loc97, #loc98])
#loc507 = loc(fused[#loc99, #loc93])
#loc508 = loc(fused[#loc103, #loc101])
#loc509 = loc(fused[#loc106, #loc107])
#loc510 = loc(fused[#loc109, #loc110])
#loc511 = loc(fused[#loc111, #loc112])
#loc512 = loc(fused[#loc113, #loc110])
#loc513 = loc(fused[#loc116, #loc117])
#loc514 = loc(fused[#loc118, #loc119])
#loc515 = loc(fused[#loc120, #loc117])
#loc516 = loc(fused[#loc121, #loc122])
#loc517 = loc(fused[#loc123, #loc124])
#loc518 = loc(fused[#loc128, #loc129])
#loc519 = loc(fused[#loc130, #loc131])
#loc520 = loc(fused[#loc132, #loc133])
#loc521 = loc(fused[#loc134, #loc135])
#loc522 = loc(fused[#loc136, #loc137])
#loc523 = loc(fused[#loc138, #loc139])
#loc524 = loc(fused[#loc140, #loc141])
#loc525 = loc(fused[#loc142, #loc143])
#loc526 = loc(fused[#loc148, #loc149])
#loc529 = loc(fused[#loc159, #loc160])
#loc530 = loc(fused[#loc163, #loc164])
#loc531 = loc(fused[#loc167, #loc166])
#loc532 = loc(fused[#loc171, #loc172])
#loc533 = loc(fused[#loc173, #loc174])
#loc534 = loc(fused[#loc176, #loc175])
#loc535 = loc(fused[#loc177, #loc178])
#loc536 = loc(fused[#loc179, #loc180])
#loc537 = loc(fused[#loc181, #loc178])
#loc538 = loc(fused[#loc182, #loc183])
#loc539 = loc(fused[#loc184, #loc185])
#loc540 = loc(fused[#loc186, #loc187])
#loc541 = loc(fused[#loc188, #loc189])
#loc542 = loc(fused[#loc190, #loc191])
#loc543 = loc(fused[#loc192, #loc193])
#loc544 = loc(fused[#loc198, #loc199])
#loc545 = loc(fused[#loc200, #loc201])
#loc546 = loc(fused[#loc202, #loc203])
#loc547 = loc(fused[#loc204, #loc201])
#loc548 = loc(fused[#loc206, #loc207])
#loc549 = loc(fused[#loc209, #loc210])
#loc550 = loc(fused[#loc211, #loc212])
#loc551 = loc(fused[#loc214, #loc213])
#loc552 = loc(fused[#loc217, #loc218])
#loc553 = loc(fused[#loc221, #loc222])
#loc554 = loc(fused[#loc223, #loc224])
#loc555 = loc(fused[#loc226, #loc227])
#loc556 = loc(fused[#loc228, #loc229])
#loc557 = loc(fused[#loc230, #loc231])
#loc558 = loc(fused[#loc232, #loc224])
#loc559 = loc(fused[#loc236, #loc237])
#loc560 = loc(fused[#loc240, #loc241])
#loc561 = loc(fused[#loc242, #loc243])
#loc562 = loc(fused[#loc244, #loc245])
#loc563 = loc(fused[#loc247, #loc248])
#loc564 = loc(fused[#loc249, #loc243])
#loc565 = loc(fused[#loc253, #loc251])
#loc566 = loc(fused[#loc256, #loc257])
#loc567 = loc(fused[#loc259, #loc260])
#loc568 = loc(fused[#loc261, #loc262])
#loc569 = loc(fused[#loc263, #loc260])
#loc570 = loc(fused[#loc266, #loc267])
#loc571 = loc(fused[#loc268, #loc269])
#loc572 = loc(fused[#loc270, #loc271, #loc272, #loc267])
#loc573 = loc(fused[#loc274, #loc275])
#loc574 = loc(fused[#loc276, #loc277])
#loc575 = loc(fused[#loc280, #loc283])
#loc576 = loc(fused[#loc284, #loc285, #loc286, #loc275])
#loc577 = loc(fused[#loc287, #loc288])
#loc578 = loc(fused[#loc293, #loc294])
#loc579 = loc(fused[#loc295, #loc296])
#loc580 = loc(fused[#loc298, #loc297])
#loc581 = loc(fused[#loc299, #loc300])
#loc582 = loc(fused[#loc301, #loc302])
#loc583 = loc(fused[#loc303, #loc300])
#loc584 = loc(fused[#loc304, #loc305])
#loc585 = loc(fused[#loc306, #loc307])
#loc586 = loc(fused[#loc308, #loc309])
#loc587 = loc(fused[#loc310, #loc311])
#loc588 = loc(fused[#loc312, #loc313])
#loc589 = loc(fused[#loc314, #loc315])
#loc590 = loc(fused[#loc320, #loc321])
#loc591 = loc(fused[#loc322, #loc323])
#loc592 = loc(fused[#loc324, #loc325])
#loc593 = loc(fused[#loc326, #loc323])
#loc594 = loc(fused[#loc328, #loc329])
#loc595 = loc(fused[#loc331, #loc332])
#loc596 = loc(fused[#loc333, #loc334])
#loc597 = loc(fused[#loc336, #loc335])
#loc598 = loc(fused[#loc339, #loc340])
#loc599 = loc(fused[#loc343, #loc344])
#loc600 = loc(fused[#loc345, #loc346])
#loc601 = loc(fused[#loc348, #loc349])
#loc602 = loc(fused[#loc350, #loc351])
#loc603 = loc(fused[#loc352, #loc353])
#loc604 = loc(fused[#loc354, #loc346])
#loc605 = loc(fused[#loc358, #loc359])
#loc606 = loc(fused[#loc362, #loc363])
#loc607 = loc(fused[#loc364, #loc365])
#loc608 = loc(fused[#loc366, #loc367])
#loc609 = loc(fused[#loc369, #loc370])
#loc610 = loc(fused[#loc371, #loc365])
#loc611 = loc(fused[#loc375, #loc373])
#loc612 = loc(fused[#loc378, #loc379])
#loc613 = loc(fused[#loc381, #loc382])
#loc614 = loc(fused[#loc383, #loc384])
#loc615 = loc(fused[#loc385, #loc382])
#loc616 = loc(fused[#loc388, #loc389])
#loc617 = loc(fused[#loc390, #loc391])
#loc618 = loc(fused[#loc392, #loc389])
#loc619 = loc(fused[#loc393, #loc394])
#loc620 = loc(fused[#loc395, #loc396])
#loc621 = loc(fused[#loc399, #loc402])
#loc622 = loc(fused[#loc403, #loc404, #loc405, #loc394])
#loc623 = loc(fused[#loc406, #loc407])
#loc624 = loc(fused[#loc413, #loc414])
#loc625 = loc(fused[#loc415, #loc416])
#loc626 = loc(fused[#loc418, #loc417])
#loc627 = loc(fused[#loc419, #loc420])
#loc628 = loc(fused[#loc421, #loc422])
#loc629 = loc(fused[#loc423, #loc424, #loc425, #loc420])
#loc630 = loc(fused[#loc429, #loc428])
#loc631 = loc(fused[#loc430, #loc431])
#loc632 = loc(fused[#loc432, #loc433])
#loc633 = loc(fused[#loc434, #loc431])
#loc634 = loc(fused[#loc435, #loc436])
#loc635 = loc(fused[#loc437, #loc438])
#loc636 = loc(fused[#loc442, #loc443])
#loc637 = loc(fused[#loc444, #loc445])
#loc638 = loc(fused[#loc447, #loc446])
#loc639 = loc(fused[#loc448, #loc449])
#loc640 = loc(fused[#loc450, #loc451])
#loc641 = loc(fused[#loc452, #loc449])
#loc642 = loc(fused[#loc454, #loc453])
#loc643 = loc(fused[#loc455, #loc456])
#loc644 = loc(fused[#loc457, #loc458])
#loc645 = loc(fused[#loc459, #loc456])
#loc646 = loc(fused[#loc460, #loc461])
#loc647 = loc(fused[#loc462, #loc463])
