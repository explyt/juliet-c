!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc158)
  cir.func private @printIntLine(!s32i) loc(#loc159)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc160)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE190_Integer_Overflow__short_max_square_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc162)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc163)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc164)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc17)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc17)
    cir.store %4, %2 : !s16i, !cir.ptr<!s16i> loc(#loc165)
    cir.br ^bb1 loc(#loc166)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc167)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc167)
    %7 = cir.call %6() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc21)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc168)
  ^bb2:  // pred: ^bb1
    %9 = cir.const #cir.int<32767> : !s32i loc(#loc26)
    %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc26)
    cir.store %10, %2 : !s16i, !cir.ptr<!s16i> loc(#loc169)
    cir.br ^bb4 loc(#loc24)
  ^bb3:  // pred: ^bb1
    %11 = cir.const #cir.int<2> : !s32i loc(#loc28)
    %12 = cir.cast(integral, %11 : !s32i), !s16i loc(#loc28)
    cir.store %12, %2 : !s16i, !cir.ptr<!s16i> loc(#loc170)
    cir.br ^bb4 loc(#loc20)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc20)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc171)
  ^bb6:  // pred: ^bb5
    %13 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc172)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc172)
    %15 = cir.call %14() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc32)
    %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc32)
    cir.brcond %16 ^bb7, ^bb10 loc(#loc173)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc174)
  ^bb8:  // pred: ^bb7
    %17 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc39)
    %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc39)
    %19 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc12)
    %20 = cir.cast(integral, %19 : !s16i), !s32i loc(#loc12)
    %21 = cir.binop(mul, %18, %20) nsw : !s32i loc(#loc39)
    %22 = cir.cast(integral, %21 : !s32i), !s16i loc(#loc39)
    cir.store %22, %0 : !s16i, !cir.ptr<!s16i> loc(#loc162)
    %23 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc40)
    %24 = cir.cast(integral, %23 : !s16i), !s32i loc(#loc40)
    cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc41)
    cir.br ^bb9 loc(#loc38)
  ^bb9:  // pred: ^bb8
    cir.br ^bb16 loc(#loc35)
  ^bb10:  // pred: ^bb6
    cir.br ^bb11 loc(#loc175)
  ^bb11:  // pred: ^bb10
    %25 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc44)
    %26 = cir.cast(integral, %25 : !s16i), !s64i loc(#loc44)
    %27 = cir.cast(integral, %26 : !s64i), !s32i loc(#loc44)
    %28 = cir.abs %27 poison : !s32i loc(#loc45)
    %29 = cir.cast(integral, %28 : !s32i), !s64i loc(#loc45)
    %30 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc46)
    %31 = cir.const #cir.int<32767> : !s32i loc(#loc47)
    %32 = cir.cast(int_to_float, %31 : !s32i), !cir.double loc(#loc47)
    %33 = cir.call @sqrt(%32) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc46)
    %34 = cir.cast(float_to_int, %33 : !cir.double), !s64i loc(#loc46)
    %35 = cir.cmp(le, %29, %34) : !s64i, !cir.bool loc(#loc176)
    cir.brcond %35 ^bb12, ^bb13 loc(#loc177)
  ^bb12:  // pred: ^bb11
    %36 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc52)
    %37 = cir.cast(integral, %36 : !s16i), !s32i loc(#loc52)
    %38 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc14)
    %39 = cir.cast(integral, %38 : !s16i), !s32i loc(#loc14)
    %40 = cir.binop(mul, %37, %39) nsw : !s32i loc(#loc52)
    %41 = cir.cast(integral, %40 : !s32i), !s16i loc(#loc52)
    cir.store %41, %1 : !s16i, !cir.ptr<!s16i> loc(#loc163)
    %42 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc53)
    %43 = cir.cast(integral, %42 : !s16i), !s32i loc(#loc53)
    cir.call @printIntLine(%43) : (!s32i) -> () loc(#loc54)
    cir.br ^bb14 loc(#loc50)
  ^bb13:  // pred: ^bb11
    %44 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc8)
    %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc8)
    cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    cir.br ^bb14 loc(#loc43)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc43)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc31)
  ^bb16:  // 2 preds: ^bb9, ^bb15
    cir.br ^bb17 loc(#loc31)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc10)
  } loc(#loc161)
  cir.func no_proto @CWE190_Integer_Overflow__short_max_square_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc179)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc180)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc60)
    cir.return loc(#loc57)
  } loc(#loc178)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc182)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc183)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc184)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc70)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc70)
    cir.store %4, %2 : !s16i, !cir.ptr<!s16i> loc(#loc185)
    cir.br ^bb1 loc(#loc186)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc187)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc187)
    %7 = cir.call %6() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc74)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc74)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc188)
  ^bb2:  // pred: ^bb1
    %9 = cir.const #cir.int<32767> : !s32i loc(#loc79)
    %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc79)
    cir.store %10, %2 : !s16i, !cir.ptr<!s16i> loc(#loc189)
    cir.br ^bb4 loc(#loc77)
  ^bb3:  // pred: ^bb1
    %11 = cir.const #cir.int<32767> : !s32i loc(#loc81)
    %12 = cir.cast(integral, %11 : !s32i), !s16i loc(#loc81)
    cir.store %12, %2 : !s16i, !cir.ptr<!s16i> loc(#loc190)
    cir.br ^bb4 loc(#loc73)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc73)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc191)
  ^bb6:  // pred: ^bb5
    %13 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc192)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc192)
    %15 = cir.call %14() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc85)
    %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc85)
    cir.brcond %16 ^bb7, ^bb13 loc(#loc193)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc194)
  ^bb8:  // pred: ^bb7
    %17 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc92)
    %18 = cir.cast(integral, %17 : !s16i), !s64i loc(#loc92)
    %19 = cir.cast(integral, %18 : !s64i), !s32i loc(#loc92)
    %20 = cir.abs %19 poison : !s32i loc(#loc93)
    %21 = cir.cast(integral, %20 : !s32i), !s64i loc(#loc93)
    %22 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc94)
    %23 = cir.const #cir.int<32767> : !s32i loc(#loc95)
    %24 = cir.cast(int_to_float, %23 : !s32i), !cir.double loc(#loc95)
    %25 = cir.call @sqrt(%24) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc94)
    %26 = cir.cast(float_to_int, %25 : !cir.double), !s64i loc(#loc94)
    %27 = cir.cmp(le, %21, %26) : !s64i, !cir.bool loc(#loc195)
    cir.brcond %27 ^bb9, ^bb10 loc(#loc196)
  ^bb9:  // pred: ^bb8
    %28 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc100)
    %29 = cir.cast(integral, %28 : !s16i), !s32i loc(#loc100)
    %30 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc65)
    %31 = cir.cast(integral, %30 : !s16i), !s32i loc(#loc65)
    %32 = cir.binop(mul, %29, %31) nsw : !s32i loc(#loc100)
    %33 = cir.cast(integral, %32 : !s32i), !s16i loc(#loc100)
    cir.store %33, %0 : !s16i, !cir.ptr<!s16i> loc(#loc182)
    %34 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc101)
    %35 = cir.cast(integral, %34 : !s16i), !s32i loc(#loc101)
    cir.call @printIntLine(%35) : (!s32i) -> () loc(#loc102)
    cir.br ^bb11 loc(#loc98)
  ^bb10:  // pred: ^bb8
    %36 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc103)
    %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc103)
    cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc104)
    cir.br ^bb11 loc(#loc91)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc91)
  ^bb12:  // pred: ^bb11
    cir.br ^bb19 loc(#loc88)
  ^bb13:  // pred: ^bb6
    cir.br ^bb14 loc(#loc197)
  ^bb14:  // pred: ^bb13
    %38 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc107)
    %39 = cir.cast(integral, %38 : !s16i), !s64i loc(#loc107)
    %40 = cir.cast(integral, %39 : !s64i), !s32i loc(#loc107)
    %41 = cir.abs %40 poison : !s32i loc(#loc108)
    %42 = cir.cast(integral, %41 : !s32i), !s64i loc(#loc108)
    %43 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc109)
    %44 = cir.const #cir.int<32767> : !s32i loc(#loc110)
    %45 = cir.cast(int_to_float, %44 : !s32i), !cir.double loc(#loc110)
    %46 = cir.call @sqrt(%45) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc109)
    %47 = cir.cast(float_to_int, %46 : !cir.double), !s64i loc(#loc109)
    %48 = cir.cmp(le, %42, %47) : !s64i, !cir.bool loc(#loc198)
    cir.brcond %48 ^bb15, ^bb16 loc(#loc199)
  ^bb15:  // pred: ^bb14
    %49 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc115)
    %50 = cir.cast(integral, %49 : !s16i), !s32i loc(#loc115)
    %51 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc67)
    %52 = cir.cast(integral, %51 : !s16i), !s32i loc(#loc67)
    %53 = cir.binop(mul, %50, %52) nsw : !s32i loc(#loc115)
    %54 = cir.cast(integral, %53 : !s32i), !s16i loc(#loc115)
    cir.store %54, %1 : !s16i, !cir.ptr<!s16i> loc(#loc183)
    %55 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc116)
    %56 = cir.cast(integral, %55 : !s16i), !s32i loc(#loc116)
    cir.call @printIntLine(%56) : (!s32i) -> () loc(#loc117)
    cir.br ^bb17 loc(#loc113)
  ^bb16:  // pred: ^bb14
    %57 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc118)
    %58 = cir.cast(array_to_ptrdecay, %57 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc118)
    cir.call @printLine(%58) : (!cir.ptr<!s8i>) -> () loc(#loc119)
    cir.br ^bb17 loc(#loc106)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc106)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc84)
  ^bb19:  // 2 preds: ^bb12, ^bb18
    cir.br ^bb20 loc(#loc84)
  ^bb20:  // pred: ^bb19
    cir.return loc(#loc63)
  } loc(#loc181)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc201)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc202)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc203)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc128)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc128)
    cir.store %4, %2 : !s16i, !cir.ptr<!s16i> loc(#loc204)
    cir.br ^bb1 loc(#loc205)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc206)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc206)
    %7 = cir.call %6() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc132)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc132)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc207)
  ^bb2:  // pred: ^bb1
    %9 = cir.const #cir.int<2> : !s32i loc(#loc137)
    %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc137)
    cir.store %10, %2 : !s16i, !cir.ptr<!s16i> loc(#loc208)
    cir.br ^bb4 loc(#loc135)
  ^bb3:  // pred: ^bb1
    %11 = cir.const #cir.int<2> : !s32i loc(#loc139)
    %12 = cir.cast(integral, %11 : !s32i), !s16i loc(#loc139)
    cir.store %12, %2 : !s16i, !cir.ptr<!s16i> loc(#loc209)
    cir.br ^bb4 loc(#loc131)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc131)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc210)
  ^bb6:  // pred: ^bb5
    %13 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc211)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc211)
    %15 = cir.call %14() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc143)
    %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc143)
    cir.brcond %16 ^bb7, ^bb10 loc(#loc212)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc213)
  ^bb8:  // pred: ^bb7
    %17 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc150)
    %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc150)
    %19 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc123)
    %20 = cir.cast(integral, %19 : !s16i), !s32i loc(#loc123)
    %21 = cir.binop(mul, %18, %20) nsw : !s32i loc(#loc150)
    %22 = cir.cast(integral, %21 : !s32i), !s16i loc(#loc150)
    cir.store %22, %0 : !s16i, !cir.ptr<!s16i> loc(#loc201)
    %23 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc151)
    %24 = cir.cast(integral, %23 : !s16i), !s32i loc(#loc151)
    cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc152)
    cir.br ^bb9 loc(#loc149)
  ^bb9:  // pred: ^bb8
    cir.br ^bb13 loc(#loc146)
  ^bb10:  // pred: ^bb6
    cir.br ^bb11 loc(#loc214)
  ^bb11:  // pred: ^bb10
    %25 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc155)
    %26 = cir.cast(integral, %25 : !s16i), !s32i loc(#loc155)
    %27 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc125)
    %28 = cir.cast(integral, %27 : !s16i), !s32i loc(#loc125)
    %29 = cir.binop(mul, %26, %28) nsw : !s32i loc(#loc155)
    %30 = cir.cast(integral, %29 : !s32i), !s16i loc(#loc155)
    cir.store %30, %1 : !s16i, !cir.ptr<!s16i> loc(#loc202)
    %31 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc156)
    %32 = cir.cast(integral, %31 : !s16i), !s32i loc(#loc156)
    cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc157)
    cir.br ^bb12 loc(#loc154)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc142)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc142)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc121)
  } loc(#loc200)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE190_Integer_Overflow__short_max_square_12.c":56:23)
#loc9 = loc("CWE190_Integer_Overflow__short_max_square_12.c":24:1)
#loc10 = loc("CWE190_Integer_Overflow__short_max_square_12.c":59:1)
#loc11 = loc("CWE190_Integer_Overflow__short_max_square_12.c":42:13)
#loc12 = loc("CWE190_Integer_Overflow__short_max_square_12.c":42:35)
#loc13 = loc("CWE190_Integer_Overflow__short_max_square_12.c":51:13)
#loc14 = loc("CWE190_Integer_Overflow__short_max_square_12.c":51:35)
#loc15 = loc("CWE190_Integer_Overflow__short_max_square_12.c":26:5)
#loc16 = loc("CWE190_Integer_Overflow__short_max_square_12.c":26:11)
#loc17 = loc("CWE190_Integer_Overflow__short_max_square_12.c":27:12)
#loc18 = loc("CWE190_Integer_Overflow__short_max_square_12.c":27:5)
#loc19 = loc("CWE190_Integer_Overflow__short_max_square_12.c":28:5)
#loc20 = loc("CWE190_Integer_Overflow__short_max_square_12.c":37:5)
#loc21 = loc("CWE190_Integer_Overflow__short_max_square_12.c":28:8)
#loc22 = loc("CWE190_Integer_Overflow__short_max_square_12.c":28:33)
#loc23 = loc("CWE190_Integer_Overflow__short_max_square_12.c":29:5)
#loc24 = loc("CWE190_Integer_Overflow__short_max_square_12.c":32:5)
#loc25 = loc("CWE190_Integer_Overflow__short_max_square_12.c":34:5)
#loc26 = loc("CWE190_Integer_Overflow__short_max_square_12.c":31:16)
#loc27 = loc("CWE190_Integer_Overflow__short_max_square_12.c":31:9)
#loc28 = loc("CWE190_Integer_Overflow__short_max_square_12.c":36:16)
#loc29 = loc("CWE190_Integer_Overflow__short_max_square_12.c":36:9)
#loc30 = loc("CWE190_Integer_Overflow__short_max_square_12.c":38:5)
#loc31 = loc("CWE190_Integer_Overflow__short_max_square_12.c":58:5)
#loc32 = loc("CWE190_Integer_Overflow__short_max_square_12.c":38:8)
#loc33 = loc("CWE190_Integer_Overflow__short_max_square_12.c":38:33)
#loc34 = loc("CWE190_Integer_Overflow__short_max_square_12.c":39:5)
#loc35 = loc("CWE190_Integer_Overflow__short_max_square_12.c":45:5)
#loc36 = loc("CWE190_Integer_Overflow__short_max_square_12.c":47:5)
#loc37 = loc("CWE190_Integer_Overflow__short_max_square_12.c":40:9)
#loc38 = loc("CWE190_Integer_Overflow__short_max_square_12.c":44:9)
#loc39 = loc("CWE190_Integer_Overflow__short_max_square_12.c":42:28)
#loc40 = loc("CWE190_Integer_Overflow__short_max_square_12.c":43:26)
#loc41 = loc("CWE190_Integer_Overflow__short_max_square_12.c":43:13)
#loc42 = loc("CWE190_Integer_Overflow__short_max_square_12.c":49:9)
#loc43 = loc("CWE190_Integer_Overflow__short_max_square_12.c":57:9)
#loc44 = loc("CWE190_Integer_Overflow__short_max_square_12.c":49:23)
#loc45 = loc("CWE190_Integer_Overflow__short_max_square_12.c":49:13)
#loc46 = loc("CWE190_Integer_Overflow__short_max_square_12.c":49:38)
#loc47 = loc("CWE190_Integer_Overflow__short_max_square_12.c":49:51)
#loc48 = loc("CWE190_Integer_Overflow__short_max_square_12.c":49:59)
#loc49 = loc("CWE190_Integer_Overflow__short_max_square_12.c":50:9)
#loc50 = loc("CWE190_Integer_Overflow__short_max_square_12.c":53:9)
#loc51 = loc("CWE190_Integer_Overflow__short_max_square_12.c":55:9)
#loc52 = loc("CWE190_Integer_Overflow__short_max_square_12.c":51:28)
#loc53 = loc("CWE190_Integer_Overflow__short_max_square_12.c":52:26)
#loc54 = loc("CWE190_Integer_Overflow__short_max_square_12.c":52:13)
#loc55 = loc("CWE190_Integer_Overflow__short_max_square_12.c":56:13)
#loc56 = loc("CWE190_Integer_Overflow__short_max_square_12.c":145:1)
#loc57 = loc("CWE190_Integer_Overflow__short_max_square_12.c":149:1)
#loc58 = loc("CWE190_Integer_Overflow__short_max_square_12.c":147:5)
#loc59 = loc("CWE190_Integer_Overflow__short_max_square_12.c":147:13)
#loc60 = loc("CWE190_Integer_Overflow__short_max_square_12.c":148:5)
#loc61 = loc("CWE190_Integer_Overflow__short_max_square_12.c":148:13)
#loc62 = loc("CWE190_Integer_Overflow__short_max_square_12.c":68:1)
#loc63 = loc("CWE190_Integer_Overflow__short_max_square_12.c":108:1)
#loc64 = loc("CWE190_Integer_Overflow__short_max_square_12.c":87:13)
#loc65 = loc("CWE190_Integer_Overflow__short_max_square_12.c":87:35)
#loc66 = loc("CWE190_Integer_Overflow__short_max_square_12.c":100:13)
#loc67 = loc("CWE190_Integer_Overflow__short_max_square_12.c":100:35)
#loc68 = loc("CWE190_Integer_Overflow__short_max_square_12.c":70:5)
#loc69 = loc("CWE190_Integer_Overflow__short_max_square_12.c":70:11)
#loc70 = loc("CWE190_Integer_Overflow__short_max_square_12.c":71:12)
#loc71 = loc("CWE190_Integer_Overflow__short_max_square_12.c":71:5)
#loc72 = loc("CWE190_Integer_Overflow__short_max_square_12.c":72:5)
#loc73 = loc("CWE190_Integer_Overflow__short_max_square_12.c":81:5)
#loc74 = loc("CWE190_Integer_Overflow__short_max_square_12.c":72:8)
#loc75 = loc("CWE190_Integer_Overflow__short_max_square_12.c":72:33)
#loc76 = loc("CWE190_Integer_Overflow__short_max_square_12.c":73:5)
#loc77 = loc("CWE190_Integer_Overflow__short_max_square_12.c":76:5)
#loc78 = loc("CWE190_Integer_Overflow__short_max_square_12.c":78:5)
#loc79 = loc("CWE190_Integer_Overflow__short_max_square_12.c":75:16)
#loc80 = loc("CWE190_Integer_Overflow__short_max_square_12.c":75:9)
#loc81 = loc("CWE190_Integer_Overflow__short_max_square_12.c":80:16)
#loc82 = loc("CWE190_Integer_Overflow__short_max_square_12.c":80:9)
#loc83 = loc("CWE190_Integer_Overflow__short_max_square_12.c":82:5)
#loc84 = loc("CWE190_Integer_Overflow__short_max_square_12.c":107:5)
#loc85 = loc("CWE190_Integer_Overflow__short_max_square_12.c":82:8)
#loc86 = loc("CWE190_Integer_Overflow__short_max_square_12.c":82:33)
#loc87 = loc("CWE190_Integer_Overflow__short_max_square_12.c":83:5)
#loc88 = loc("CWE190_Integer_Overflow__short_max_square_12.c":94:5)
#loc89 = loc("CWE190_Integer_Overflow__short_max_square_12.c":96:5)
#loc90 = loc("CWE190_Integer_Overflow__short_max_square_12.c":85:9)
#loc91 = loc("CWE190_Integer_Overflow__short_max_square_12.c":93:9)
#loc92 = loc("CWE190_Integer_Overflow__short_max_square_12.c":85:23)
#loc93 = loc("CWE190_Integer_Overflow__short_max_square_12.c":85:13)
#loc94 = loc("CWE190_Integer_Overflow__short_max_square_12.c":85:38)
#loc95 = loc("CWE190_Integer_Overflow__short_max_square_12.c":85:51)
#loc96 = loc("CWE190_Integer_Overflow__short_max_square_12.c":85:59)
#loc97 = loc("CWE190_Integer_Overflow__short_max_square_12.c":86:9)
#loc98 = loc("CWE190_Integer_Overflow__short_max_square_12.c":89:9)
#loc99 = loc("CWE190_Integer_Overflow__short_max_square_12.c":91:9)
#loc100 = loc("CWE190_Integer_Overflow__short_max_square_12.c":87:28)
#loc101 = loc("CWE190_Integer_Overflow__short_max_square_12.c":88:26)
#loc102 = loc("CWE190_Integer_Overflow__short_max_square_12.c":88:13)
#loc103 = loc("CWE190_Integer_Overflow__short_max_square_12.c":92:23)
#loc104 = loc("CWE190_Integer_Overflow__short_max_square_12.c":92:13)
#loc105 = loc("CWE190_Integer_Overflow__short_max_square_12.c":98:9)
#loc106 = loc("CWE190_Integer_Overflow__short_max_square_12.c":106:9)
#loc107 = loc("CWE190_Integer_Overflow__short_max_square_12.c":98:23)
#loc108 = loc("CWE190_Integer_Overflow__short_max_square_12.c":98:13)
#loc109 = loc("CWE190_Integer_Overflow__short_max_square_12.c":98:38)
#loc110 = loc("CWE190_Integer_Overflow__short_max_square_12.c":98:51)
#loc111 = loc("CWE190_Integer_Overflow__short_max_square_12.c":98:59)
#loc112 = loc("CWE190_Integer_Overflow__short_max_square_12.c":99:9)
#loc113 = loc("CWE190_Integer_Overflow__short_max_square_12.c":102:9)
#loc114 = loc("CWE190_Integer_Overflow__short_max_square_12.c":104:9)
#loc115 = loc("CWE190_Integer_Overflow__short_max_square_12.c":100:28)
#loc116 = loc("CWE190_Integer_Overflow__short_max_square_12.c":101:26)
#loc117 = loc("CWE190_Integer_Overflow__short_max_square_12.c":101:13)
#loc118 = loc("CWE190_Integer_Overflow__short_max_square_12.c":105:23)
#loc119 = loc("CWE190_Integer_Overflow__short_max_square_12.c":105:13)
#loc120 = loc("CWE190_Integer_Overflow__short_max_square_12.c":113:1)
#loc121 = loc("CWE190_Integer_Overflow__short_max_square_12.c":143:1)
#loc122 = loc("CWE190_Integer_Overflow__short_max_square_12.c":131:13)
#loc123 = loc("CWE190_Integer_Overflow__short_max_square_12.c":131:35)
#loc124 = loc("CWE190_Integer_Overflow__short_max_square_12.c":139:13)
#loc125 = loc("CWE190_Integer_Overflow__short_max_square_12.c":139:35)
#loc126 = loc("CWE190_Integer_Overflow__short_max_square_12.c":115:5)
#loc127 = loc("CWE190_Integer_Overflow__short_max_square_12.c":115:11)
#loc128 = loc("CWE190_Integer_Overflow__short_max_square_12.c":116:12)
#loc129 = loc("CWE190_Integer_Overflow__short_max_square_12.c":116:5)
#loc130 = loc("CWE190_Integer_Overflow__short_max_square_12.c":117:5)
#loc131 = loc("CWE190_Integer_Overflow__short_max_square_12.c":126:5)
#loc132 = loc("CWE190_Integer_Overflow__short_max_square_12.c":117:8)
#loc133 = loc("CWE190_Integer_Overflow__short_max_square_12.c":117:33)
#loc134 = loc("CWE190_Integer_Overflow__short_max_square_12.c":118:5)
#loc135 = loc("CWE190_Integer_Overflow__short_max_square_12.c":121:5)
#loc136 = loc("CWE190_Integer_Overflow__short_max_square_12.c":123:5)
#loc137 = loc("CWE190_Integer_Overflow__short_max_square_12.c":120:16)
#loc138 = loc("CWE190_Integer_Overflow__short_max_square_12.c":120:9)
#loc139 = loc("CWE190_Integer_Overflow__short_max_square_12.c":125:16)
#loc140 = loc("CWE190_Integer_Overflow__short_max_square_12.c":125:9)
#loc141 = loc("CWE190_Integer_Overflow__short_max_square_12.c":127:5)
#loc142 = loc("CWE190_Integer_Overflow__short_max_square_12.c":142:5)
#loc143 = loc("CWE190_Integer_Overflow__short_max_square_12.c":127:8)
#loc144 = loc("CWE190_Integer_Overflow__short_max_square_12.c":127:33)
#loc145 = loc("CWE190_Integer_Overflow__short_max_square_12.c":128:5)
#loc146 = loc("CWE190_Integer_Overflow__short_max_square_12.c":134:5)
#loc147 = loc("CWE190_Integer_Overflow__short_max_square_12.c":136:5)
#loc148 = loc("CWE190_Integer_Overflow__short_max_square_12.c":129:9)
#loc149 = loc("CWE190_Integer_Overflow__short_max_square_12.c":133:9)
#loc150 = loc("CWE190_Integer_Overflow__short_max_square_12.c":131:28)
#loc151 = loc("CWE190_Integer_Overflow__short_max_square_12.c":132:26)
#loc152 = loc("CWE190_Integer_Overflow__short_max_square_12.c":132:13)
#loc153 = loc("CWE190_Integer_Overflow__short_max_square_12.c":137:9)
#loc154 = loc("CWE190_Integer_Overflow__short_max_square_12.c":141:9)
#loc155 = loc("CWE190_Integer_Overflow__short_max_square_12.c":139:28)
#loc156 = loc("CWE190_Integer_Overflow__short_max_square_12.c":140:26)
#loc157 = loc("CWE190_Integer_Overflow__short_max_square_12.c":140:13)
#loc158 = loc(fused[#loc1, #loc2])
#loc159 = loc(fused[#loc3, #loc4])
#loc160 = loc(fused[#loc6, #loc7])
#loc161 = loc(fused[#loc9, #loc10])
#loc162 = loc(fused[#loc11, #loc12])
#loc163 = loc(fused[#loc13, #loc14])
#loc164 = loc(fused[#loc15, #loc16])
#loc165 = loc(fused[#loc18, #loc17])
#loc166 = loc(fused[#loc19, #loc20])
#loc167 = loc(fused[#loc21, #loc22])
#loc168 = loc(fused[#loc23, #loc24, #loc25, #loc20])
#loc169 = loc(fused[#loc27, #loc26])
#loc170 = loc(fused[#loc29, #loc28])
#loc171 = loc(fused[#loc30, #loc31])
#loc172 = loc(fused[#loc32, #loc33])
#loc173 = loc(fused[#loc34, #loc35, #loc36, #loc31])
#loc174 = loc(fused[#loc37, #loc38])
#loc175 = loc(fused[#loc42, #loc43])
#loc176 = loc(fused[#loc45, #loc48])
#loc177 = loc(fused[#loc49, #loc50, #loc51, #loc43])
#loc178 = loc(fused[#loc56, #loc57])
#loc179 = loc(fused[#loc58, #loc59])
#loc180 = loc(fused[#loc60, #loc61])
#loc181 = loc(fused[#loc62, #loc63])
#loc182 = loc(fused[#loc64, #loc65])
#loc183 = loc(fused[#loc66, #loc67])
#loc184 = loc(fused[#loc68, #loc69])
#loc185 = loc(fused[#loc71, #loc70])
#loc186 = loc(fused[#loc72, #loc73])
#loc187 = loc(fused[#loc74, #loc75])
#loc188 = loc(fused[#loc76, #loc77, #loc78, #loc73])
#loc189 = loc(fused[#loc80, #loc79])
#loc190 = loc(fused[#loc82, #loc81])
#loc191 = loc(fused[#loc83, #loc84])
#loc192 = loc(fused[#loc85, #loc86])
#loc193 = loc(fused[#loc87, #loc88, #loc89, #loc84])
#loc194 = loc(fused[#loc90, #loc91])
#loc195 = loc(fused[#loc93, #loc96])
#loc196 = loc(fused[#loc97, #loc98, #loc99, #loc91])
#loc197 = loc(fused[#loc105, #loc106])
#loc198 = loc(fused[#loc108, #loc111])
#loc199 = loc(fused[#loc112, #loc113, #loc114, #loc106])
#loc200 = loc(fused[#loc120, #loc121])
#loc201 = loc(fused[#loc122, #loc123])
#loc202 = loc(fused[#loc124, #loc125])
#loc203 = loc(fused[#loc126, #loc127])
#loc204 = loc(fused[#loc129, #loc128])
#loc205 = loc(fused[#loc130, #loc131])
#loc206 = loc(fused[#loc132, #loc133])
#loc207 = loc(fused[#loc134, #loc135, #loc136, #loc131])
#loc208 = loc(fused[#loc138, #loc137])
#loc209 = loc(fused[#loc140, #loc139])
#loc210 = loc(fused[#loc141, #loc142])
#loc211 = loc(fused[#loc143, #loc144])
#loc212 = loc(fused[#loc145, #loc146, #loc147, #loc142])
#loc213 = loc(fused[#loc148, #loc149])
#loc214 = loc(fused[#loc153, #loc154])
