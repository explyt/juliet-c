!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc87)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc88)
  cir.func private  @printIntLine(!s32i) loc(#loc89)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc90)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc92)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc93)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc15)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc16)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc16)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc15)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc94)
    cir.store %6, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc95)
    cir.scope {
      %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc21)
      %8 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc22)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc22)
      %10 = cir.cmp(eq, %7, %9) : !cir.ptr<!s32i>, !s32i loc(#loc97)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc23)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc25)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc26)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc27)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc25)
      } loc(#loc98)
    } loc(#loc96)
    cir.scope {
      %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc100)
      %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc100)
      cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc100)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc32)
      %11 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc33)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc33)
      %13 = cir.const #cir.int<10> : !s32i loc(#loc34)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc34)
      %15 = cir.const #cir.int<4> : !u64i loc(#loc101)
      %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc102)
      cir.libc.memcpy %16 bytes from %12 to %10 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc103)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc39)
      %18 = cir.const #cir.int<0> : !s32i loc(#loc40)
      %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc41)
      %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc39)
      cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc42)
      %21 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc43)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc44)
      cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc43)
    } loc(#loc99)
    cir.return loc(#loc10)
  } loc(#loc91)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc105)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    cir.return loc(#loc46)
  } loc(#loc104)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc107)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc53)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc108)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc55)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc56)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc56)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc109)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc110)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc55)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc111)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc112)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc63)
      %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc64)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc64)
      %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s32i>, !s32i loc(#loc114)
      %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc65)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc67)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc68)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc69)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc67)
      } loc(#loc115)
    } loc(#loc113)
    cir.scope {
      %9 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc117)
      %10 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc117)
      cir.store %10, %9 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc117)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc74)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc74)
      %13 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc75)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc75)
      %15 = cir.const #cir.int<10> : !s32i loc(#loc76)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc76)
      %17 = cir.const #cir.int<4> : !u64i loc(#loc118)
      %18 = cir.binop(mul, %16, %17) : !u64i loc(#loc119)
      cir.libc.memcpy %18 bytes from %14 to %12 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc120)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc81)
      %20 = cir.const #cir.int<0> : !s32i loc(#loc82)
      %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc83)
      %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc81)
      cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc84)
      %23 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc85)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc86)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc86)
      cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc85)
    } loc(#loc116)
    cir.return loc(#loc50)
  } loc(#loc106)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":35:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":23:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":23:11)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":24:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":24:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":26:19)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":26:26)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":26:28)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":26:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":27:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":27:33)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":27:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":27:17)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":27:14)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":27:23)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":27:24)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":27:30)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":27:29)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":28:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":34:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":29:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":29:28)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":31:16)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":31:22)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":31:30)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":31:33)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":31:43)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":31:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":31:44)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":32:22)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":32:27)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":32:28)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":32:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":33:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":33:14)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":58:1)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":61:1)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":60:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":60:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":42:1)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":56:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":44:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":44:11)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":45:12)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":45:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":47:19)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":47:26)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":47:29)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":47:39)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":47:40)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":47:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":48:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":48:33)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":48:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":48:17)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":48:14)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":48:23)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":48:24)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":48:30)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":48:29)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":49:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":55:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":50:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":50:28)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":52:16)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":52:22)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":52:30)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":52:33)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":52:43)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":52:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":52:44)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":53:22)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":53:27)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":53:28)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":53:9)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":54:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":54:14)
#loc87 = loc(fused[#loc1, #loc2])
#loc88 = loc(fused[#loc3, #loc4])
#loc89 = loc(fused[#loc5, #loc6])
#loc90 = loc(fused[#loc7, #loc8])
#loc91 = loc(fused[#loc9, #loc10])
#loc92 = loc(fused[#loc11, #loc12])
#loc93 = loc(fused[#loc14, #loc13])
#loc94 = loc(fused[#loc15, #loc17])
#loc95 = loc(fused[#loc18, #loc17])
#loc96 = loc(fused[#loc19, #loc20])
#loc97 = loc(fused[#loc21, #loc22])
#loc98 = loc(fused[#loc24, #loc20])
#loc99 = loc(fused[#loc28, #loc29])
#loc100 = loc(fused[#loc30, #loc31])
#loc101 = loc(fused[#loc35, #loc36])
#loc102 = loc(fused[#loc34, #loc36])
#loc103 = loc(fused[#loc37, #loc38])
#loc104 = loc(fused[#loc45, #loc46])
#loc105 = loc(fused[#loc47, #loc48])
#loc106 = loc(fused[#loc49, #loc50])
#loc107 = loc(fused[#loc51, #loc52])
#loc108 = loc(fused[#loc54, #loc53])
#loc109 = loc(fused[#loc57, #loc58])
#loc110 = loc(fused[#loc56, #loc58])
#loc111 = loc(fused[#loc55, #loc59])
#loc112 = loc(fused[#loc60, #loc59])
#loc113 = loc(fused[#loc61, #loc62])
#loc114 = loc(fused[#loc63, #loc64])
#loc115 = loc(fused[#loc66, #loc62])
#loc116 = loc(fused[#loc70, #loc71])
#loc117 = loc(fused[#loc72, #loc73])
#loc118 = loc(fused[#loc77, #loc78])
#loc119 = loc(fused[#loc76, #loc78])
#loc120 = loc(fused[#loc79, #loc80])
