!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc100)
  cir.func private @printIntLine(!s32i) loc(#loc101)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc103)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc104)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc11)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc105)
    cir.br ^bb1 loc(#loc106)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc100)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc15)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc107)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<10> : !s32i loc(#loc17)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc17)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc17)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc17)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc17)
    cir.store %10, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc108)
    cir.br ^bb3 loc(#loc14)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc14)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc109)
  ^bb5:  // pred: ^bb4
    %11 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc103)
    cir.store %11, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc103)
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc21)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc21)
    %14 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc22)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc22)
    %16 = cir.const #cir.int<10> : !s32i loc(#loc23)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc23)
    %18 = cir.const #cir.int<4> : !u64i loc(#loc110)
    %19 = cir.binop(mul, %17, %18) : !u64i loc(#loc111)
    cir.libc.memcpy %19 bytes from %15 to %13 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc112)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc28)
    %21 = cir.const #cir.int<0> : !s32i loc(#loc29)
    %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc30)
    %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc31)
    cir.br ^bb6 loc(#loc20)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc6)
  } loc(#loc102)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc114)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc115)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc33)
  } loc(#loc113)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc116)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc117)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc42)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc119)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc120)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc49)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc121)
    cir.br ^bb1 loc(#loc122)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc116)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc53)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc123)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc42)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    cir.br ^bb4 loc(#loc55)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<10> : !s32i loc(#loc58)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc58)
    %10 = cir.const #cir.int<4> : !u64i loc(#loc58)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc58)
    %12 = cir.alloca !u8i, !cir.ptr<!u8i>, %11 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc58)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc58)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc58)
    cir.store %14, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc124)
    cir.br ^bb4 loc(#loc52)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc52)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc125)
  ^bb6:  // pred: ^bb5
    %15 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc119)
    cir.store %15, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc119)
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc62)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc62)
    %18 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc63)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc63)
    %20 = cir.const #cir.int<10> : !s32i loc(#loc64)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc64)
    %22 = cir.const #cir.int<4> : !u64i loc(#loc126)
    %23 = cir.binop(mul, %21, %22) : !u64i loc(#loc127)
    cir.libc.memcpy %23 bytes from %19 to %17 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc128)
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc69)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc70)
    %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc71)
    %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc69)
    cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc72)
    cir.br ^bb7 loc(#loc61)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc44)
  } loc(#loc118)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc130)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc131)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc79)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc132)
    cir.br ^bb1 loc(#loc133)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc100)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc83)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc83)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc134)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<10> : !s32i loc(#loc85)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc85)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc85)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc85)
    %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc85)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc85)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc85)
    cir.store %12, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc135)
    cir.br ^bb3 loc(#loc82)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc82)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc136)
  ^bb5:  // pred: ^bb4
    %13 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc130)
    cir.store %13, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc130)
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc89)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc89)
    %16 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc90)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc90)
    %18 = cir.const #cir.int<10> : !s32i loc(#loc91)
    %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc91)
    %20 = cir.const #cir.int<4> : !u64i loc(#loc137)
    %21 = cir.binop(mul, %19, %20) : !u64i loc(#loc138)
    cir.libc.memcpy %21 bytes from %17 to %15 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc139)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc96)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc97)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc98)
    %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc96)
    cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc99)
    cir.br ^bb6 loc(#loc88)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc74)
  } loc(#loc129)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":23:1)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":23:25)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":28:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":43:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":38:9)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":38:28)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":30:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":30:11)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":31:12)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":31:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":32:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":36:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":32:8)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":33:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":35:23)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":35:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":37:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":42:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":40:16)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":40:22)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":40:30)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":40:33)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":40:43)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":40:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":40:44)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":41:22)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":41:27)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":41:28)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":41:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":90:1)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":94:1)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":92:5)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":92:14)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":93:5)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":93:14)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":24:1)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":24:26)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":57:19)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":50:1)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":70:1)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":65:9)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":65:28)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":52:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":52:11)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":53:12)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":53:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":54:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":63:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":54:8)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":55:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":58:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":60:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":57:9)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":62:23)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":62:9)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":64:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":69:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":67:16)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":67:22)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":67:30)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":67:33)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":67:43)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":67:9)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":67:44)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":68:22)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":68:27)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":68:28)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":68:9)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":73:1)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":88:1)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":83:9)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":83:28)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":75:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":75:11)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":76:12)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":76:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":77:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":81:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":77:8)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":78:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":80:23)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":80:9)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":82:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":87:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":85:16)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":85:22)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":85:30)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":85:33)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":85:43)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":85:9)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":85:44)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":86:22)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":86:27)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":86:28)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c":86:9)
#loc100 = loc(fused[#loc1, #loc2])
#loc101 = loc(fused[#loc3, #loc4])
#loc102 = loc(fused[#loc5, #loc6])
#loc103 = loc(fused[#loc7, #loc8])
#loc104 = loc(fused[#loc9, #loc10])
#loc105 = loc(fused[#loc12, #loc11])
#loc106 = loc(fused[#loc13, #loc14])
#loc107 = loc(fused[#loc16, #loc14])
#loc108 = loc(fused[#loc18, #loc17])
#loc109 = loc(fused[#loc19, #loc20])
#loc110 = loc(fused[#loc24, #loc25])
#loc111 = loc(fused[#loc23, #loc25])
#loc112 = loc(fused[#loc26, #loc27])
#loc113 = loc(fused[#loc32, #loc33])
#loc114 = loc(fused[#loc34, #loc35])
#loc115 = loc(fused[#loc36, #loc37])
#loc116 = loc(fused[#loc38, #loc39])
#loc117 = loc(fused[#loc40, #loc41])
#loc118 = loc(fused[#loc43, #loc44])
#loc119 = loc(fused[#loc45, #loc46])
#loc120 = loc(fused[#loc47, #loc48])
#loc121 = loc(fused[#loc50, #loc49])
#loc122 = loc(fused[#loc51, #loc52])
#loc123 = loc(fused[#loc54, #loc55, #loc56, #loc52])
#loc124 = loc(fused[#loc59, #loc58])
#loc125 = loc(fused[#loc60, #loc61])
#loc126 = loc(fused[#loc65, #loc66])
#loc127 = loc(fused[#loc64, #loc66])
#loc128 = loc(fused[#loc67, #loc68])
#loc129 = loc(fused[#loc73, #loc74])
#loc130 = loc(fused[#loc75, #loc76])
#loc131 = loc(fused[#loc77, #loc78])
#loc132 = loc(fused[#loc80, #loc79])
#loc133 = loc(fused[#loc81, #loc82])
#loc134 = loc(fused[#loc84, #loc82])
#loc135 = loc(fused[#loc86, #loc85])
#loc136 = loc(fused[#loc87, #loc88])
#loc137 = loc(fused[#loc92, #loc93])
#loc138 = loc(fused[#loc91, #loc93])
#loc139 = loc(fused[#loc94, #loc95])
