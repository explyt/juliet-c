!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":160:10)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":160:14)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":160:20)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":160:32)
#loc228 = loc(fused[#loc79, #loc80])
#loc229 = loc(fused[#loc81, #loc82])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc199)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc4)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc200)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc201)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc202)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc203)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc204)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc206)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc19)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc207)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc209)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc209)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc23)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc23)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc3)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc3)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc3)
        cir.store %8, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc211)
      } else {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc4)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc4)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc4)
        cir.store %8, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc212)
      } loc(#loc210)
    } loc(#loc208)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc214)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc214)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc32)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc32)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc217)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc218)
          %8 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc43)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc44)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc44)
          %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc43)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc217)
          %12 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc42)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc42)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc42)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc42)
          %16 = cir.const #cir.int<4> : !u64i loc(#loc42)
          %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc42)
          %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc42)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc42)
          cir.store %19, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc218)
          %20 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc45)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc45)
          %22 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc46)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc46)
          %24 = cir.call @wcscpy(%21, %23) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc47)
          %25 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc48)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc48)
          cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc49)
        } loc(#loc216)
      } else {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc220)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc221)
          %8 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc56)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc57)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc57)
          %11 = cir.call @wcslen(%10) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc56)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc220)
          %12 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc55)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc55)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc55)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc55)
          %16 = cir.const #cir.int<4> : !u64i loc(#loc55)
          %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc55)
          %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc55)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc55)
          cir.store %19, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc221)
          %20 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc58)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc58)
          %22 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc59)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc59)
          %24 = cir.call @wcscpy(%21, %23) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc60)
          %25 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc61)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc61)
          cir.call @printWLine(%26) : (!cir.ptr<!s32i>) -> () loc(#loc62)
        } loc(#loc219)
      } loc(#loc215)
    } loc(#loc213)
    cir.return loc(#loc16)
  } loc(#loc205)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc223)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc65)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc224)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc67)
    cir.return loc(#loc64)
  } loc(#loc222)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc225)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc226)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc76)
  cir.func @main(%arg0: !s32i loc(fused[#loc79, #loc80]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc81, #loc82])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc228)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc229)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc78)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc83)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc84)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc85)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc85)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc86)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc73)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc230)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_12_good() : () -> () loc(#loc88)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc74)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc75)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc231)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_12_bad() : () -> () loc(#loc92)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc76)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc95)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc232)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc232)
    cir.return %17 : !s32i loc(#loc232)
  } loc(#loc227)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc234)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc101)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc235)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc237)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc237)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc105)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc105)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc110)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc110)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc110)
        cir.store %8, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc239)
      } else {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc112)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc112)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc112)
        cir.store %8, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc240)
      } loc(#loc238)
    } loc(#loc236)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc242)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc242)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc116)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc116)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc245)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc246)
          %8 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc127)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc128)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc128)
          %11 = cir.call @wcslen(%10) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc127)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc245)
          %12 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc126)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc126)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc126)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc126)
          %16 = cir.const #cir.int<4> : !u64i loc(#loc126)
          %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc126)
          %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc126)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc126)
          cir.store %19, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc246)
          %20 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc129)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc129)
          %22 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc130)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc130)
          %24 = cir.call @wcscpy(%21, %23) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc131)
          %25 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc132)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc132)
          cir.call @printWLine(%26) : (!cir.ptr<!s32i>) -> () loc(#loc133)
        } loc(#loc244)
      } else {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc248)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc249)
          %8 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc140)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc141)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc141)
          %11 = cir.call @wcslen(%10) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc140)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc248)
          %12 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc139)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc139)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc139)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc139)
          %16 = cir.const #cir.int<4> : !u64i loc(#loc139)
          %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc139)
          %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc139)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc139)
          cir.store %19, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc249)
          %20 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc142)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc142)
          %22 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc143)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc143)
          %24 = cir.call @wcscpy(%21, %23) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc144)
          %25 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc145)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc145)
          cir.call @printWLine(%26) : (!cir.ptr<!s32i>) -> () loc(#loc146)
        } loc(#loc247)
      } loc(#loc243)
    } loc(#loc241)
    cir.return loc(#loc98)
  } loc(#loc233)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc250)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc252)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc153)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc253)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc255)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc255)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc157)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc157)
      cir.if %5 {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc162)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc162)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc162)
        cir.store %8, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc257)
      } else {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc164)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc164)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc164)
        cir.store %8, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc258)
      } loc(#loc256)
    } loc(#loc254)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc260)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc260)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc168)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc168)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc263)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc264)
          %8 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc179)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc180)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc180)
          %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc179)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc263)
          %12 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc178)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc178)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc178)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc178)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc178)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc178)
          %18 = cir.binop(mul, %15, %17) : !u64i loc(#loc178)
          %19 = cir.alloca !u8i, !cir.ptr<!u8i>, %18 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc178)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc178)
          cir.store %20, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc264)
          %21 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc181)
          %22 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc182)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc182)
          %24 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc183)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc183)
          %26 = cir.call @strcpy(%23, %25) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc181)
          %27 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc184)
          %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc184)
          cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc185)
        } loc(#loc262)
      } else {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc266)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc267)
          %8 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc192)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc193)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc193)
          %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc192)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc266)
          %12 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc191)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc191)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc191)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc191)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc191)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc191)
          %18 = cir.binop(mul, %15, %17) : !u64i loc(#loc191)
          %19 = cir.alloca !u8i, !cir.ptr<!u8i>, %18 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc191)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc191)
          cir.store %20, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc267)
          %21 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc194)
          %22 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc195)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc195)
          %24 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc196)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc196)
          %26 = cir.call @strcpy(%23, %25) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc194)
          %27 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc197)
          %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc197)
          cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc198)
        } loc(#loc265)
      } loc(#loc261)
    } loc(#loc259)
    cir.return loc(#loc150)
  } loc(#loc251)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":34:24)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":39:24)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("/usr/include/wchar.h":98:1)
#loc8 = loc("/usr/include/wchar.h":100:14)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("/usr/include/wchar.h":247:1)
#loc12 = loc("/usr/include/wchar.h":247:51)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":27:1)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":61:1)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":29:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":29:12)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":30:12)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":30:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":31:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":40:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":31:8)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":31:33)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":32:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":35:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":37:5)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":34:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":39:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":41:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":60:5)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":41:8)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":41:33)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":42:5)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":50:5)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":52:5)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":43:9)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":49:9)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":45:13)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":45:49)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":46:13)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":46:35)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":45:30)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":45:45)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":47:26)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":47:32)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":47:19)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":48:31)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":48:13)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":53:9)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":59:9)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":55:13)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":55:52)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":56:13)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":56:35)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":55:30)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":55:48)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":57:26)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":57:32)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":57:19)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":58:35)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":58:13)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":145:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":149:1)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":147:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":147:13)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":148:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":148:13)
#loc69 = loc("/usr/include/stdlib.h":575:1)
#loc70 = loc("/usr/include/stdlib.h":575:41)
#loc71 = loc("/usr/include/time.h":76:1)
#loc72 = loc("/usr/include/time.h":76:38)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":165:15)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":167:15)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":170:15)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":172:15)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":160:1)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":175:1)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":161:1)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":163:27)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":163:22)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":163:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":165:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":166:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":166:56)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":167:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":170:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":171:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":171:55)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":172:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":174:12)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":174:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":70:1)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":104:1)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":72:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":72:12)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":73:12)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":73:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":74:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":83:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":74:8)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":74:33)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":75:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":78:5)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":80:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":77:24)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":77:9)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":82:24)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":82:9)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":84:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":103:5)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":84:8)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":84:33)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":85:5)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":93:5)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":95:5)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":86:9)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":92:9)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":88:13)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":88:52)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":89:13)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":89:35)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":88:30)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":88:48)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":90:26)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":90:32)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":90:19)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":91:35)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":91:13)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":96:9)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":102:9)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":98:13)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":98:52)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":99:13)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":99:35)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":98:30)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":98:48)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":100:26)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":100:32)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":100:19)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":101:35)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":101:13)
#loc147 = loc("/usr/include/string.h":141:1)
#loc148 = loc("/usr/include/string.h":142:14)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":109:1)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":143:1)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":111:5)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":111:12)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":112:12)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":112:5)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":113:5)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":122:5)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":113:8)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":113:33)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":114:5)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":117:5)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":119:5)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":116:24)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":116:9)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":121:24)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":121:9)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":123:5)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":142:5)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":123:8)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":123:33)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":124:5)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":132:5)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":134:5)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":125:9)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":131:9)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":127:13)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":127:49)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":128:13)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":128:35)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":127:30)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":127:45)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":129:19)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":129:26)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":129:32)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":130:31)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":130:13)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":135:9)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":141:9)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":137:13)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":137:49)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":138:13)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":138:35)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":137:30)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":137:45)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":139:19)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":139:26)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":139:32)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":140:31)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":140:13)
#loc199 = loc(fused[#loc1, #loc2])
#loc200 = loc(fused[#loc5, #loc6])
#loc201 = loc(fused[#loc7, #loc8])
#loc202 = loc(fused[#loc9, #loc10])
#loc203 = loc(fused[#loc11, #loc12])
#loc204 = loc(fused[#loc13, #loc14])
#loc205 = loc(fused[#loc15, #loc16])
#loc206 = loc(fused[#loc17, #loc18])
#loc207 = loc(fused[#loc20, #loc19])
#loc208 = loc(fused[#loc21, #loc22])
#loc209 = loc(fused[#loc23, #loc24])
#loc210 = loc(fused[#loc25, #loc26, #loc27, #loc22])
#loc211 = loc(fused[#loc28, #loc3])
#loc212 = loc(fused[#loc29, #loc4])
#loc213 = loc(fused[#loc30, #loc31])
#loc214 = loc(fused[#loc32, #loc33])
#loc215 = loc(fused[#loc34, #loc35, #loc36, #loc31])
#loc216 = loc(fused[#loc37, #loc38])
#loc217 = loc(fused[#loc39, #loc40])
#loc218 = loc(fused[#loc41, #loc42])
#loc219 = loc(fused[#loc50, #loc51])
#loc220 = loc(fused[#loc52, #loc53])
#loc221 = loc(fused[#loc54, #loc55])
#loc222 = loc(fused[#loc63, #loc64])
#loc223 = loc(fused[#loc65, #loc66])
#loc224 = loc(fused[#loc67, #loc68])
#loc225 = loc(fused[#loc69, #loc70])
#loc226 = loc(fused[#loc71, #loc72])
#loc227 = loc(fused[#loc77, #loc78])
#loc230 = loc(fused[#loc88, #loc89])
#loc231 = loc(fused[#loc92, #loc93])
#loc232 = loc(fused[#loc96, #loc95])
#loc233 = loc(fused[#loc97, #loc98])
#loc234 = loc(fused[#loc99, #loc100])
#loc235 = loc(fused[#loc102, #loc101])
#loc236 = loc(fused[#loc103, #loc104])
#loc237 = loc(fused[#loc105, #loc106])
#loc238 = loc(fused[#loc107, #loc108, #loc109, #loc104])
#loc239 = loc(fused[#loc111, #loc110])
#loc240 = loc(fused[#loc113, #loc112])
#loc241 = loc(fused[#loc114, #loc115])
#loc242 = loc(fused[#loc116, #loc117])
#loc243 = loc(fused[#loc118, #loc119, #loc120, #loc115])
#loc244 = loc(fused[#loc121, #loc122])
#loc245 = loc(fused[#loc123, #loc124])
#loc246 = loc(fused[#loc125, #loc126])
#loc247 = loc(fused[#loc134, #loc135])
#loc248 = loc(fused[#loc136, #loc137])
#loc249 = loc(fused[#loc138, #loc139])
#loc250 = loc(fused[#loc147, #loc148])
#loc251 = loc(fused[#loc149, #loc150])
#loc252 = loc(fused[#loc151, #loc152])
#loc253 = loc(fused[#loc154, #loc153])
#loc254 = loc(fused[#loc155, #loc156])
#loc255 = loc(fused[#loc157, #loc158])
#loc256 = loc(fused[#loc159, #loc160, #loc161, #loc156])
#loc257 = loc(fused[#loc163, #loc162])
#loc258 = loc(fused[#loc165, #loc164])
#loc259 = loc(fused[#loc166, #loc167])
#loc260 = loc(fused[#loc168, #loc169])
#loc261 = loc(fused[#loc170, #loc171, #loc172, #loc167])
#loc262 = loc(fused[#loc173, #loc174])
#loc263 = loc(fused[#loc175, #loc176])
#loc264 = loc(fused[#loc177, #loc178])
#loc265 = loc(fused[#loc186, #loc187])
#loc266 = loc(fused[#loc188, #loc189])
#loc267 = loc(fused[#loc190, #loc191])
