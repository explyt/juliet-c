!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":29:61)
#loc6 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":29:118)
#loc20 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":44:65)
#loc21 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":44:122)
#loc38 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":55:65)
#loc39 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":55:122)
!ty__CWE190_Integer_Overflow__short_rand_square_67_structType = !cir.record<struct "_CWE190_Integer_Overflow__short_rand_square_67_structType" {!s16i}>
#loc61 = loc(fused[#loc5, #loc6])
#loc66 = loc(fused[#loc20, #loc21])
#loc72 = loc(fused[#loc38, #loc39])
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_67b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc59)
  cir.func @CWE190_Integer_Overflow__short_rand_square_67b_badSink(%arg0: !ty__CWE190_Integer_Overflow__short_rand_square_67_structType loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !ty__CWE190_Integer_Overflow__short_rand_square_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__short_rand_square_67_structType>, ["myStruct", init] {alignment = 2 : i64} loc(#loc61)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc62)
    cir.store %arg0, %0 : !ty__CWE190_Integer_Overflow__short_rand_square_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__short_rand_square_67_structType> loc(#loc9)
    %2 = cir.get_member %0[0] {name = "structFirst"} : !cir.ptr<!ty__CWE190_Integer_Overflow__short_rand_square_67_structType> -> !cir.ptr<!s16i> loc(#loc10)
    %3 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc8)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc62)
    cir.scope {
      %4 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc64)
      %5 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc15)
      %6 = cir.cast(integral, %5 : !s16i), !s32i loc(#loc15)
      %7 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc14)
      %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc14)
      %9 = cir.binop(mul, %6, %8) nsw : !s32i loc(#loc15)
      %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc15)
      cir.store %10, %4 : !s16i, !cir.ptr<!s16i> loc(#loc64)
      %11 = cir.load %4 : !cir.ptr<!s16i>, !s16i loc(#loc16)
      %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc16)
      cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc17)
    } loc(#loc63)
    cir.return loc(#loc4)
  } loc(#loc60)
  cir.func @CWE190_Integer_Overflow__short_rand_square_67b_goodG2BSink(%arg0: !ty__CWE190_Integer_Overflow__short_rand_square_67_structType loc(fused[#loc20, #loc21])) extra(#fn_attr) {
    %0 = cir.alloca !ty__CWE190_Integer_Overflow__short_rand_square_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__short_rand_square_67_structType>, ["myStruct", init] {alignment = 2 : i64} loc(#loc66)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc67)
    cir.store %arg0, %0 : !ty__CWE190_Integer_Overflow__short_rand_square_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__short_rand_square_67_structType> loc(#loc24)
    %2 = cir.get_member %0[0] {name = "structFirst"} : !cir.ptr<!ty__CWE190_Integer_Overflow__short_rand_square_67_structType> -> !cir.ptr<!s16i> loc(#loc10)
    %3 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc23)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc67)
    cir.scope {
      %4 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc69)
      %5 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc29)
      %6 = cir.cast(integral, %5 : !s16i), !s32i loc(#loc29)
      %7 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc28)
      %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc28)
      %9 = cir.binop(mul, %6, %8) nsw : !s32i loc(#loc29)
      %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc29)
      cir.store %10, %4 : !s16i, !cir.ptr<!s16i> loc(#loc69)
      %11 = cir.load %4 : !cir.ptr<!s16i>, !s16i loc(#loc30)
      %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc30)
      cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc31)
    } loc(#loc68)
    cir.return loc(#loc19)
  } loc(#loc65)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc32)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc35)
  cir.func @CWE190_Integer_Overflow__short_rand_square_67b_goodB2GSink(%arg0: !ty__CWE190_Integer_Overflow__short_rand_square_67_structType loc(fused[#loc38, #loc39])) extra(#fn_attr) {
    %0 = cir.alloca !ty__CWE190_Integer_Overflow__short_rand_square_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__short_rand_square_67_structType>, ["myStruct", init] {alignment = 2 : i64} loc(#loc72)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc73)
    cir.store %arg0, %0 : !ty__CWE190_Integer_Overflow__short_rand_square_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__short_rand_square_67_structType> loc(#loc42)
    %2 = cir.get_member %0[0] {name = "structFirst"} : !cir.ptr<!ty__CWE190_Integer_Overflow__short_rand_square_67_structType> -> !cir.ptr<!s16i> loc(#loc10)
    %3 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc41)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc73)
    cir.scope {
      %4 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc45)
      %5 = cir.cast(integral, %4 : !s16i), !s64i loc(#loc45)
      %6 = cir.cast(integral, %5 : !s64i), !s32i loc(#loc45)
      %7 = cir.abs %6 poison : !s32i loc(#loc46)
      %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc46)
      %9 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc47)
      %10 = cir.const #cir.int<32767> : !s32i loc(#loc48)
      %11 = cir.cast(int_to_float, %10 : !s32i), !cir.double loc(#loc48)
      %12 = cir.call @sqrt(%11) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc47)
      %13 = cir.cast(float_to_int, %12 : !cir.double), !s64i loc(#loc47)
      %14 = cir.cmp(le, %8, %13) : !s64i, !cir.bool loc(#loc75)
      cir.if %14 {
        %15 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc77)
        %16 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc55)
        %17 = cir.cast(integral, %16 : !s16i), !s32i loc(#loc55)
        %18 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc54)
        %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc54)
        %20 = cir.binop(mul, %17, %19) nsw : !s32i loc(#loc55)
        %21 = cir.cast(integral, %20 : !s32i), !s16i loc(#loc55)
        cir.store %21, %15 : !s16i, !cir.ptr<!s16i> loc(#loc77)
        %22 = cir.load %15 : !cir.ptr<!s16i>, !s16i loc(#loc56)
        %23 = cir.cast(integral, %22 : !s16i), !s32i loc(#loc56)
        cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc57)
      } else {
        %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc35)
        %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc35)
        cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc58)
      } loc(#loc76)
    } loc(#loc74)
    cir.return loc(#loc37)
  } loc(#loc71)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_67b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":29:1)
#loc4 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":37:1)
#loc7 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":31:5)
#loc8 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":31:27)
#loc9 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":30:1)
#loc10 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":24:11)
#loc11 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":32:5)
#loc12 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":36:5)
#loc13 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":34:9)
#loc14 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":34:31)
#loc15 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":34:24)
#loc16 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":35:22)
#loc17 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":35:9)
#loc18 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":44:1)
#loc19 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":52:1)
#loc22 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":46:5)
#loc23 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":46:27)
#loc24 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":45:1)
#loc25 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":47:5)
#loc26 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":51:5)
#loc27 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":49:9)
#loc28 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":49:31)
#loc29 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":49:24)
#loc30 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":50:22)
#loc31 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":50:9)
#loc32 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc35 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":66:19)
#loc36 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":55:1)
#loc37 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":68:1)
#loc40 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":57:5)
#loc41 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":57:27)
#loc42 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":56:1)
#loc43 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":59:5)
#loc44 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":67:5)
#loc45 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":59:19)
#loc46 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":59:9)
#loc47 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":59:34)
#loc48 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":59:47)
#loc49 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":59:55)
#loc50 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":60:5)
#loc51 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":63:5)
#loc52 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":65:5)
#loc53 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":61:9)
#loc54 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":61:31)
#loc55 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":61:24)
#loc56 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":62:22)
#loc57 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":62:9)
#loc58 = loc("CWE190_Integer_Overflow__short_rand_square_67b.c":66:9)
#loc59 = loc(fused[#loc1, #loc2])
#loc60 = loc(fused[#loc3, #loc4])
#loc62 = loc(fused[#loc7, #loc8])
#loc63 = loc(fused[#loc11, #loc12])
#loc64 = loc(fused[#loc13, #loc14])
#loc65 = loc(fused[#loc18, #loc19])
#loc67 = loc(fused[#loc22, #loc23])
#loc68 = loc(fused[#loc25, #loc26])
#loc69 = loc(fused[#loc27, #loc28])
#loc70 = loc(fused[#loc33, #loc34])
#loc71 = loc(fused[#loc36, #loc37])
#loc73 = loc(fused[#loc40, #loc41])
#loc74 = loc(fused[#loc43, #loc44])
#loc75 = loc(fused[#loc46, #loc49])
#loc76 = loc(fused[#loc50, #loc51, #loc52, #loc44])
#loc77 = loc(fused[#loc53, #loc54])
