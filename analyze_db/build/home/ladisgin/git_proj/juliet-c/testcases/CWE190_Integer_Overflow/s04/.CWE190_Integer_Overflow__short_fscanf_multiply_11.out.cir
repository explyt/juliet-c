!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc60 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":171:10)
#loc61 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":171:14)
#loc62 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":171:20)
#loc63 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":171:32)
#loc250 = loc(fused[#loc60, #loc61])
#loc251 = loc(fused[#loc62, #loc63])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_multiply_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc224)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc225)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc226)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%hd\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printIntLine(!s32i) loc(#loc227)
  cir.func no_proto @CWE190_Integer_Overflow__short_fscanf_multiply_11_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc229)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc14)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc14)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc230)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc232)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc232)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc18)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc18)
      cir.if %6 {
        %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc21)
        %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc226)
        %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc22)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc7)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc7)
        %12 = cir.call @__isoc99_fscanf(%9, %11, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc21)
      } loc(#loc233)
    } loc(#loc231)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc235)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc235)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc25)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc25)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc30)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc30)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc31)
          %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc238)
          cir.if %10 {
            %11 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc240)
            %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc35)
            %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc35)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc34)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc35)
            %16 = cir.cast(integral, %15 : !s32i), !s16i loc(#loc35)
            cir.store %16, %11 : !s16i, !cir.ptr<!s16i> loc(#loc240)
            %17 = cir.load %11 : !cir.ptr<!s16i>, !s16i loc(#loc36)
            %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc36)
            cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc37)
          } loc(#loc239)
        } loc(#loc237)
      } loc(#loc236)
    } loc(#loc234)
    cir.return loc(#loc11)
  } loc(#loc228)
  cir.func no_proto @CWE190_Integer_Overflow__short_fscanf_multiply_11_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc242)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc243)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc244)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc245)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    cir.return loc(#loc39)
  } loc(#loc241)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc246)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc247)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc248)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc57)
  cir.func @main(%arg0: !s32i loc(fused[#loc60, #loc61]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc62, #loc63])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc250)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc251)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc59)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc64)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc64)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc65)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc66)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc66)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc67)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc54)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %8 = cir.get_global @CWE190_Integer_Overflow__short_fscanf_multiply_11_good : !cir.ptr<!cir.func<!void ()>> loc(#loc252)
    cir.call @CWE190_Integer_Overflow__short_fscanf_multiply_11_good() : () -> () loc(#loc69)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc55)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc56)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %13 = cir.get_global @CWE190_Integer_Overflow__short_fscanf_multiply_11_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc253)
    cir.call @CWE190_Integer_Overflow__short_fscanf_multiply_11_bad() : () -> () loc(#loc73)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc57)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc76)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc254)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc254)
    cir.return %17 : !s32i loc(#loc254)
  } loc(#loc249)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc255)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc80)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc81)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc257)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc86)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc86)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc258)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc260)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc260)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc90)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc90)
      cir.if %6 {
        %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc93)
        %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc226)
        %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc94)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc95)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc95)
        %12 = cir.call @__isoc99_fscanf(%9, %11, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc93)
      } loc(#loc261)
    } loc(#loc259)
    cir.scope {
      %3 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc263)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc263)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc98)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc98)
      cir.if %6 {
        %7 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc80)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc80)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc103)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc106)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc106)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc107)
          %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc266)
          cir.if %10 {
            cir.scope {
              %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc111)
              %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc111)
              %13 = cir.const #cir.int<32767> : !s32i loc(#loc112)
              %14 = cir.const #cir.int<2> : !s32i loc(#loc113)
              %15 = cir.binop(div, %13, %14) : !s32i loc(#loc269)
              %16 = cir.cmp(lt, %12, %15) : !s32i, !cir.bool loc(#loc270)
              cir.if %16 {
                %17 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc272)
                %18 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc120)
                %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc120)
                %20 = cir.const #cir.int<2> : !s32i loc(#loc119)
                %21 = cir.binop(mul, %19, %20) nsw : !s32i loc(#loc120)
                %22 = cir.cast(integral, %21 : !s32i), !s16i loc(#loc120)
                cir.store %22, %17 : !s16i, !cir.ptr<!s16i> loc(#loc272)
                %23 = cir.load %17 : !cir.ptr<!s16i>, !s16i loc(#loc121)
                %24 = cir.cast(integral, %23 : !s16i), !s32i loc(#loc121)
                cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc122)
              } else {
                %17 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc81)
                %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc81)
                cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc123)
              } loc(#loc271)
            } loc(#loc268)
          } loc(#loc267)
        } loc(#loc265)
      } loc(#loc264)
    } loc(#loc262)
    cir.return loc(#loc83)
  } loc(#loc256)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc274)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc128)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc128)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc275)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc277)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc277)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc132)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc132)
      cir.if %6 {
        %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc135)
        %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc226)
        %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc136)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc137)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc137)
        %12 = cir.call @__isoc99_fscanf(%9, %11, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc135)
      } loc(#loc278)
    } loc(#loc276)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc280)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc280)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc140)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc140)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc145)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc145)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc146)
          %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc283)
          cir.if %10 {
            cir.scope {
              %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc150)
              %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc150)
              %13 = cir.const #cir.int<32767> : !s32i loc(#loc151)
              %14 = cir.const #cir.int<2> : !s32i loc(#loc152)
              %15 = cir.binop(div, %13, %14) : !s32i loc(#loc286)
              %16 = cir.cmp(lt, %12, %15) : !s32i, !cir.bool loc(#loc287)
              cir.if %16 {
                %17 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc289)
                %18 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc159)
                %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc159)
                %20 = cir.const #cir.int<2> : !s32i loc(#loc158)
                %21 = cir.binop(mul, %19, %20) nsw : !s32i loc(#loc159)
                %22 = cir.cast(integral, %21 : !s32i), !s16i loc(#loc159)
                cir.store %22, %17 : !s16i, !cir.ptr<!s16i> loc(#loc289)
                %23 = cir.load %17 : !cir.ptr<!s16i>, !s16i loc(#loc160)
                %24 = cir.cast(integral, %23 : !s16i), !s32i loc(#loc160)
                cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc161)
              } else {
                %17 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc162)
                %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc162)
                cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc163)
              } loc(#loc288)
            } loc(#loc285)
          } loc(#loc284)
        } loc(#loc282)
      } loc(#loc281)
    } loc(#loc279)
    cir.return loc(#loc125)
  } loc(#loc273)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc291)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc168)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc168)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc292)
    cir.scope {
      %3 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc294)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc294)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc172)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc172)
      cir.if %6 {
        %7 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc177)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc177)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc178)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc179)
        %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc179)
        cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc296)
      } loc(#loc295)
    } loc(#loc293)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc298)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc298)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc183)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc183)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc188)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc188)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc189)
          %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc301)
          cir.if %10 {
            %11 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc303)
            %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc193)
            %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc193)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc192)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc193)
            %16 = cir.cast(integral, %15 : !s32i), !s16i loc(#loc193)
            cir.store %16, %11 : !s16i, !cir.ptr<!s16i> loc(#loc303)
            %17 = cir.load %11 : !cir.ptr<!s16i>, !s16i loc(#loc194)
            %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc194)
            cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc195)
          } loc(#loc302)
        } loc(#loc300)
      } loc(#loc299)
    } loc(#loc297)
    cir.return loc(#loc165)
  } loc(#loc290)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc305)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc200)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc200)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc306)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc308)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc308)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc204)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc204)
      cir.if %6 {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc207)
        %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc207)
        cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc310)
      } loc(#loc309)
    } loc(#loc307)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc312)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc312)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc211)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc211)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc216)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc216)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc217)
          %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc315)
          cir.if %10 {
            %11 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc317)
            %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc221)
            %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc221)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc220)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc221)
            %16 = cir.cast(integral, %15 : !s32i), !s16i loc(#loc221)
            cir.store %16, %11 : !s16i, !cir.ptr<!s16i> loc(#loc317)
            %17 = cir.load %11 : !cir.ptr<!s16i>, !s16i loc(#loc222)
            %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc222)
            cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc223)
          } loc(#loc316)
        } loc(#loc314)
      } loc(#loc313)
    } loc(#loc311)
    cir.return loc(#loc197)
  } loc(#loc304)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_multiply_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":29:24)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":22:1)
#loc11 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":40:1)
#loc12 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":24:5)
#loc13 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":24:11)
#loc14 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":25:12)
#loc15 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":25:5)
#loc16 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":26:5)
#loc17 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":30:5)
#loc18 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":26:8)
#loc19 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":26:26)
#loc20 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":27:5)
#loc21 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":29:9)
#loc22 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":29:17)
#loc23 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":31:5)
#loc24 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":39:5)
#loc25 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":31:8)
#loc26 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":31:26)
#loc27 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":32:5)
#loc28 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":33:9)
#loc29 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":38:9)
#loc30 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":33:12)
#loc31 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":33:19)
#loc32 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":34:9)
#loc33 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":36:13)
#loc34 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":36:35)
#loc35 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":36:28)
#loc36 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":37:26)
#loc37 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":37:13)
#loc38 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":154:1)
#loc39 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":160:1)
#loc40 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":156:5)
#loc41 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":156:14)
#loc42 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":157:5)
#loc43 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":157:14)
#loc44 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":158:5)
#loc45 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":158:14)
#loc46 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":159:5)
#loc47 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":159:14)
#loc48 = loc("/usr/include/stdlib.h":575:1)
#loc49 = loc("/usr/include/stdlib.h":575:41)
#loc50 = loc("/usr/include/time.h":76:1)
#loc51 = loc("/usr/include/time.h":76:38)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc54 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":176:15)
#loc55 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":178:15)
#loc56 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":181:15)
#loc57 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":183:15)
#loc58 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":171:1)
#loc59 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":186:1)
#loc64 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":172:1)
#loc65 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":174:27)
#loc66 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":174:22)
#loc67 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":174:5)
#loc68 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":176:5)
#loc69 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":177:5)
#loc70 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":177:60)
#loc71 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":178:5)
#loc72 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":181:5)
#loc73 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":182:5)
#loc74 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":182:59)
#loc75 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":183:5)
#loc76 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":185:12)
#loc77 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":185:5)
#loc78 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc79 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc80 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":59:19)
#loc81 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":73:27)
#loc82 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":47:1)
#loc83 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":77:1)
#loc84 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":49:5)
#loc85 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":49:11)
#loc86 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":50:12)
#loc87 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":50:5)
#loc88 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":51:5)
#loc89 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":55:5)
#loc90 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":51:8)
#loc91 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":51:26)
#loc92 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":52:5)
#loc93 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":54:9)
#loc94 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":54:17)
#loc95 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":54:24)
#loc96 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":56:5)
#loc97 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":76:5)
#loc98 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":56:8)
#loc99 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":56:27)
#loc100 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":57:5)
#loc101 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":60:5)
#loc102 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":62:5)
#loc103 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":59:9)
#loc104 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":63:9)
#loc105 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":75:9)
#loc106 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":63:12)
#loc107 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":63:19)
#loc108 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":64:9)
#loc109 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":66:13)
#loc110 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":74:13)
#loc111 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":66:17)
#loc112 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":66:25)
#loc113 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":66:34)
#loc114 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":66:35)
#loc115 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":67:13)
#loc116 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":70:13)
#loc117 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":72:13)
#loc118 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":68:17)
#loc119 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":68:39)
#loc120 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":68:32)
#loc121 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":69:30)
#loc122 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":69:17)
#loc123 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":73:17)
#loc124 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":80:1)
#loc125 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":105:1)
#loc126 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":82:5)
#loc127 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":82:11)
#loc128 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":83:12)
#loc129 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":83:5)
#loc130 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":84:5)
#loc131 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":88:5)
#loc132 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":84:8)
#loc133 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":84:26)
#loc134 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":85:5)
#loc135 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":87:9)
#loc136 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":87:17)
#loc137 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":87:24)
#loc138 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":89:5)
#loc139 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":104:5)
#loc140 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":89:8)
#loc141 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":89:26)
#loc142 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":90:5)
#loc143 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":91:9)
#loc144 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":103:9)
#loc145 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":91:12)
#loc146 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":91:19)
#loc147 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":92:9)
#loc148 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":94:13)
#loc149 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":102:13)
#loc150 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":94:17)
#loc151 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":94:25)
#loc152 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":94:34)
#loc153 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":94:35)
#loc154 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":95:13)
#loc155 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":98:13)
#loc156 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":100:13)
#loc157 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":96:17)
#loc158 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":96:39)
#loc159 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":96:32)
#loc160 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":97:30)
#loc161 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":97:17)
#loc162 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":101:27)
#loc163 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":101:17)
#loc164 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":108:1)
#loc165 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":131:1)
#loc166 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":110:5)
#loc167 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":110:11)
#loc168 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":111:12)
#loc169 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":111:5)
#loc170 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":112:5)
#loc171 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":121:5)
#loc172 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":112:8)
#loc173 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":112:27)
#loc174 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":113:5)
#loc175 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":116:5)
#loc176 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":118:5)
#loc177 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":115:19)
#loc178 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":115:9)
#loc179 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":120:16)
#loc180 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":120:9)
#loc181 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":122:5)
#loc182 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":130:5)
#loc183 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":122:8)
#loc184 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":122:26)
#loc185 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":123:5)
#loc186 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":124:9)
#loc187 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":129:9)
#loc188 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":124:12)
#loc189 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":124:19)
#loc190 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":125:9)
#loc191 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":127:13)
#loc192 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":127:35)
#loc193 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":127:28)
#loc194 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":128:26)
#loc195 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":128:13)
#loc196 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":134:1)
#loc197 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":152:1)
#loc198 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":136:5)
#loc199 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":136:11)
#loc200 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":137:12)
#loc201 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":137:5)
#loc202 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":138:5)
#loc203 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":142:5)
#loc204 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":138:8)
#loc205 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":138:26)
#loc206 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":139:5)
#loc207 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":141:16)
#loc208 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":141:9)
#loc209 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":143:5)
#loc210 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":151:5)
#loc211 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":143:8)
#loc212 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":143:26)
#loc213 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":144:5)
#loc214 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":145:9)
#loc215 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":150:9)
#loc216 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":145:12)
#loc217 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":145:19)
#loc218 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":146:9)
#loc219 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":148:13)
#loc220 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":148:35)
#loc221 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":148:28)
#loc222 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":149:26)
#loc223 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_11.c":149:13)
#loc224 = loc(fused[#loc1, #loc2])
#loc225 = loc(fused[#loc3, #loc4])
#loc226 = loc(fused[#loc5, #loc6])
#loc227 = loc(fused[#loc8, #loc9])
#loc228 = loc(fused[#loc10, #loc11])
#loc229 = loc(fused[#loc12, #loc13])
#loc230 = loc(fused[#loc15, #loc14])
#loc231 = loc(fused[#loc16, #loc17])
#loc232 = loc(fused[#loc18, #loc19])
#loc233 = loc(fused[#loc20, #loc17])
#loc234 = loc(fused[#loc23, #loc24])
#loc235 = loc(fused[#loc25, #loc26])
#loc236 = loc(fused[#loc27, #loc24])
#loc237 = loc(fused[#loc28, #loc29])
#loc238 = loc(fused[#loc30, #loc31])
#loc239 = loc(fused[#loc32, #loc29])
#loc240 = loc(fused[#loc33, #loc34])
#loc241 = loc(fused[#loc38, #loc39])
#loc242 = loc(fused[#loc40, #loc41])
#loc243 = loc(fused[#loc42, #loc43])
#loc244 = loc(fused[#loc44, #loc45])
#loc245 = loc(fused[#loc46, #loc47])
#loc246 = loc(fused[#loc48, #loc49])
#loc247 = loc(fused[#loc50, #loc51])
#loc248 = loc(fused[#loc52, #loc53])
#loc249 = loc(fused[#loc58, #loc59])
#loc252 = loc(fused[#loc69, #loc70])
#loc253 = loc(fused[#loc73, #loc74])
#loc254 = loc(fused[#loc77, #loc76])
#loc255 = loc(fused[#loc78, #loc79])
#loc256 = loc(fused[#loc82, #loc83])
#loc257 = loc(fused[#loc84, #loc85])
#loc258 = loc(fused[#loc87, #loc86])
#loc259 = loc(fused[#loc88, #loc89])
#loc260 = loc(fused[#loc90, #loc91])
#loc261 = loc(fused[#loc92, #loc89])
#loc262 = loc(fused[#loc96, #loc97])
#loc263 = loc(fused[#loc98, #loc99])
#loc264 = loc(fused[#loc100, #loc101, #loc102, #loc97])
#loc265 = loc(fused[#loc104, #loc105])
#loc266 = loc(fused[#loc106, #loc107])
#loc267 = loc(fused[#loc108, #loc105])
#loc268 = loc(fused[#loc109, #loc110])
#loc269 = loc(fused[#loc112, #loc113])
#loc270 = loc(fused[#loc111, #loc114])
#loc271 = loc(fused[#loc115, #loc116, #loc117, #loc110])
#loc272 = loc(fused[#loc118, #loc119])
#loc273 = loc(fused[#loc124, #loc125])
#loc274 = loc(fused[#loc126, #loc127])
#loc275 = loc(fused[#loc129, #loc128])
#loc276 = loc(fused[#loc130, #loc131])
#loc277 = loc(fused[#loc132, #loc133])
#loc278 = loc(fused[#loc134, #loc131])
#loc279 = loc(fused[#loc138, #loc139])
#loc280 = loc(fused[#loc140, #loc141])
#loc281 = loc(fused[#loc142, #loc139])
#loc282 = loc(fused[#loc143, #loc144])
#loc283 = loc(fused[#loc145, #loc146])
#loc284 = loc(fused[#loc147, #loc144])
#loc285 = loc(fused[#loc148, #loc149])
#loc286 = loc(fused[#loc151, #loc152])
#loc287 = loc(fused[#loc150, #loc153])
#loc288 = loc(fused[#loc154, #loc155, #loc156, #loc149])
#loc289 = loc(fused[#loc157, #loc158])
#loc290 = loc(fused[#loc164, #loc165])
#loc291 = loc(fused[#loc166, #loc167])
#loc292 = loc(fused[#loc169, #loc168])
#loc293 = loc(fused[#loc170, #loc171])
#loc294 = loc(fused[#loc172, #loc173])
#loc295 = loc(fused[#loc174, #loc175, #loc176, #loc171])
#loc296 = loc(fused[#loc180, #loc179])
#loc297 = loc(fused[#loc181, #loc182])
#loc298 = loc(fused[#loc183, #loc184])
#loc299 = loc(fused[#loc185, #loc182])
#loc300 = loc(fused[#loc186, #loc187])
#loc301 = loc(fused[#loc188, #loc189])
#loc302 = loc(fused[#loc190, #loc187])
#loc303 = loc(fused[#loc191, #loc192])
#loc304 = loc(fused[#loc196, #loc197])
#loc305 = loc(fused[#loc198, #loc199])
#loc306 = loc(fused[#loc201, #loc200])
#loc307 = loc(fused[#loc202, #loc203])
#loc308 = loc(fused[#loc204, #loc205])
#loc309 = loc(fused[#loc206, #loc203])
#loc310 = loc(fused[#loc208, #loc207])
#loc311 = loc(fused[#loc209, #loc210])
#loc312 = loc(fused[#loc211, #loc212])
#loc313 = loc(fused[#loc213, #loc210])
#loc314 = loc(fused[#loc214, #loc215])
#loc315 = loc(fused[#loc216, #loc217])
#loc316 = loc(fused[#loc218, #loc215])
#loc317 = loc(fused[#loc219, #loc220])
