!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s08/CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc115)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc116)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc117)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc119)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc120)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc12)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc12)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc12)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc12)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc12)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc120)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc13)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc121)
    cir.scope {
      %10 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc115)
      %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc17)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc17)
      cir.if %12 {
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc19)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc19)
        %15 = cir.const #cir.int<65> : !s32i loc(#loc20)
        %16 = cir.const #cir.int<100> : !s32i loc(#loc21)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc21)
        %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc21)
        cir.libc.memset %19 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc124)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc25)
        %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc25)
        %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc26)
        %23 = cir.const #cir.int<100> : !s32i loc(#loc27)
        %24 = cir.const #cir.int<1> : !s32i loc(#loc28)
        %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc27)
        %26 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc29)
        cir.store %21, %26 : !s8i, !cir.ptr<!s8i> loc(#loc125)
      } loc(#loc123)
    } loc(#loc122)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc127)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc127)
      cir.store %11, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc127)
      %12 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc34)
      %13 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc35)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
      %15 = cir.call @strcpy(%13, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc34)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
      cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc38)
    } loc(#loc126)
    cir.return loc(#loc8)
  } loc(#loc118)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc129)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc41)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc130)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc43)
    cir.return loc(#loc40)
  } loc(#loc128)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc131)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc47)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc133)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc134)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc53)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc53)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc53)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc53)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc53)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc53)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc53)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc134)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc54)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc135)
    cir.scope {
      %10 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc131)
      %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc58)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc58)
      cir.if %12 {
        %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc47)
        %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc47)
        cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc62)
      } else {
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc63)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc63)
        %15 = cir.const #cir.int<65> : !s32i loc(#loc64)
        %16 = cir.const #cir.int<50> : !s32i loc(#loc65)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc66)
        %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc65)
        %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc65)
        cir.libc.memset %19 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc138)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc69)
        %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc69)
        %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc70)
        %23 = cir.const #cir.int<50> : !s32i loc(#loc71)
        %24 = cir.const #cir.int<1> : !s32i loc(#loc72)
        %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc71)
        %26 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc73)
        cir.store %21, %26 : !s8i, !cir.ptr<!s8i> loc(#loc139)
      } loc(#loc137)
    } loc(#loc136)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc141)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc141)
      cir.store %11, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc141)
      %12 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc78)
      %13 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc79)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc80)
      %15 = cir.call @strcpy(%13, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc78)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc81)
      cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    } loc(#loc140)
    cir.return loc(#loc49)
  } loc(#loc132)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc143)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc144)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc88)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc88)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc88)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc88)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc88)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc88)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc88)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc144)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc89)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc145)
    cir.scope {
      %10 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc115)
      %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc93)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc93)
      cir.if %12 {
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc95)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc95)
        %15 = cir.const #cir.int<65> : !s32i loc(#loc96)
        %16 = cir.const #cir.int<50> : !s32i loc(#loc97)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc98)
        %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc97)
        %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc97)
        cir.libc.memset %19 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc148)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc101)
        %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc101)
        %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc102)
        %23 = cir.const #cir.int<50> : !s32i loc(#loc103)
        %24 = cir.const #cir.int<1> : !s32i loc(#loc104)
        %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc103)
        %26 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc105)
        cir.store %21, %26 : !s8i, !cir.ptr<!s8i> loc(#loc149)
      } loc(#loc147)
    } loc(#loc146)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc151)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc151)
      cir.store %11, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc151)
      %12 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc110)
      %13 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc111)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc112)
      %15 = cir.call @strcpy(%13, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc110)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc113)
      cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc114)
    } loc(#loc150)
    cir.return loc(#loc84)
  } loc(#loc142)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s08/CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":25:1)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":25:25)
#loc3 = loc("/usr/include/string.h":141:1)
#loc4 = loc("/usr/include/string.h":142:14)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":30:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":47:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":32:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":32:12)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":33:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":33:33)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":34:12)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":34:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":35:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":40:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":35:8)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":36:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":38:16)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":38:22)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":38:27)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":38:31)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":38:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":38:32)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":39:23)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":39:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":39:14)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":39:18)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":39:19)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":41:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":46:5)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":42:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":42:25)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":44:9)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":44:16)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":44:22)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":45:19)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":45:9)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":98:1)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":102:1)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":100:5)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":100:14)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":101:5)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":101:14)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":26:1)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":26:26)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":62:19)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":54:1)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":76:1)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":56:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":56:12)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":57:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":57:33)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":58:12)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":58:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":59:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":69:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":59:8)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":60:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":63:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":65:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":62:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":67:16)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":67:22)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":67:27)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":67:30)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":67:9)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":67:31)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":68:22)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":68:9)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":68:14)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":68:17)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":68:18)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":70:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":75:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":71:9)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":71:25)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":73:9)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":73:16)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":73:22)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":74:19)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":74:9)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":79:1)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":96:1)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":81:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":81:12)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":82:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":82:33)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":83:12)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":83:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":84:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":89:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":84:8)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":85:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":87:16)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":87:22)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":87:27)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":87:30)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":87:9)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":87:31)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":88:22)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":88:9)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":88:14)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":88:17)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":88:18)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":90:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":95:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":91:9)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":91:25)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":93:9)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":93:16)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":93:22)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":94:19)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c":94:9)
#loc115 = loc(fused[#loc1, #loc2])
#loc116 = loc(fused[#loc3, #loc4])
#loc117 = loc(fused[#loc5, #loc6])
#loc118 = loc(fused[#loc7, #loc8])
#loc119 = loc(fused[#loc9, #loc10])
#loc120 = loc(fused[#loc11, #loc12])
#loc121 = loc(fused[#loc14, #loc13])
#loc122 = loc(fused[#loc15, #loc16])
#loc123 = loc(fused[#loc18, #loc16])
#loc124 = loc(fused[#loc23, #loc24])
#loc125 = loc(fused[#loc26, #loc25])
#loc126 = loc(fused[#loc30, #loc31])
#loc127 = loc(fused[#loc32, #loc33])
#loc128 = loc(fused[#loc39, #loc40])
#loc129 = loc(fused[#loc41, #loc42])
#loc130 = loc(fused[#loc43, #loc44])
#loc131 = loc(fused[#loc45, #loc46])
#loc132 = loc(fused[#loc48, #loc49])
#loc133 = loc(fused[#loc50, #loc51])
#loc134 = loc(fused[#loc52, #loc53])
#loc135 = loc(fused[#loc55, #loc54])
#loc136 = loc(fused[#loc56, #loc57])
#loc137 = loc(fused[#loc59, #loc60, #loc61, #loc57])
#loc138 = loc(fused[#loc67, #loc68])
#loc139 = loc(fused[#loc70, #loc69])
#loc140 = loc(fused[#loc74, #loc75])
#loc141 = loc(fused[#loc76, #loc77])
#loc142 = loc(fused[#loc83, #loc84])
#loc143 = loc(fused[#loc85, #loc86])
#loc144 = loc(fused[#loc87, #loc88])
#loc145 = loc(fused[#loc90, #loc89])
#loc146 = loc(fused[#loc91, #loc92])
#loc147 = loc(fused[#loc94, #loc92])
#loc148 = loc(fused[#loc99, #loc100])
#loc149 = loc(fused[#loc102, #loc101])
#loc150 = loc(fused[#loc106, #loc107])
#loc151 = loc(fused[#loc108, #loc109])
