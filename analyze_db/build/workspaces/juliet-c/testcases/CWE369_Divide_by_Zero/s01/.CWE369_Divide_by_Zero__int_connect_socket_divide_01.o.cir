!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_connect_socket_divide_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc242)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc243)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc244)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc245)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc246)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc247)
  cir.func private @close(!s32i) -> !s32i loc(#loc248)
  cir.func private @printIntLine(!s32i) loc(#loc249)
  cir.func no_proto @CWE369_Divide_by_Zero__int_connect_socket_divide_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc251)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc23)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc252)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc254)
      %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc255)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc256)
      %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc257)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc32)
      %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc32)
      cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc256)
      cir.scope {
        cir.do {
          cir.scope {
            %12 = cir.const #cir.int<2> : !s32i loc(#loc39)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc40)
            %14 = cir.const #cir.int<6> : !s32i loc(#loc41)
            %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc42)
            cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc260)
            cir.scope {
              %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc47)
              %55 = cir.const #cir.int<1> : !s32i loc(#loc48)
              %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc48)
              %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc262)
              cir.if %57 {
                cir.break loc(#loc50)
              } loc(#loc263)
            } loc(#loc261)
            %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc264)
            %17 = cir.const #cir.int<0> : !s32i loc(#loc53)
            %18 = cir.const #cir.int<16> : !u64i loc(#loc265)
            cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc266)
            %19 = cir.const #cir.int<2> : !s32i loc(#loc58)
            %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc58)
            %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc59)
            cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc267)
            %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
            %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
            %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc61)
            %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc62)
            %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc63)
            cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc268)
            %27 = cir.const #cir.int<27015> : !s32i loc(#loc66)
            %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc66)
            %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc67)
            %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc68)
            cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc269)
            cir.scope {
              %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc73)
              %55 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc271)
              %56 = cir.const #cir.int<16> : !u64i loc(#loc272)
              %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc272)
              %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc78)
              %59 = cir.const #cir.int<1> : !s32i loc(#loc79)
              %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc79)
              %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc273)
              cir.if %61 {
                cir.break loc(#loc81)
              } loc(#loc274)
            } loc(#loc270)
            %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc82)
            %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc83)
            %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc83)
            %34 = cir.const #cir.int<3> : !s32i loc(#loc84)
            %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc84)
            %36 = cir.const #cir.int<4> : !u64i loc(#loc84)
            %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc84)
            %38 = cir.const #cir.int<2> : !s32i loc(#loc84)
            %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc84)
            %40 = cir.binop(add, %37, %39) : !u64i loc(#loc84)
            %41 = cir.const #cir.int<1> : !s32i loc(#loc85)
            %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc85)
            %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc275)
            %44 = cir.const #cir.int<0> : !s32i loc(#loc86)
            %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc87)
            %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc87)
            cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc276)
            cir.scope {
              %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc92)
              %55 = cir.const #cir.int<1> : !s32i loc(#loc93)
              %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc93)
              %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc278)
              %58 = cir.ternary(%57, true {
                %59 = cir.const #true loc(#loc94)
                cir.yield %59 : !cir.bool loc(#loc94)
              }, false {
                %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc95)
                %60 = cir.const #cir.int<0> : !s32i loc(#loc96)
                %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc279)
                %62 = cir.ternary(%61, true {
                  %63 = cir.const #true loc(#loc94)
                  cir.yield %63 : !cir.bool loc(#loc94)
                }, false {
                  %63 = cir.const #false loc(#loc94)
                  cir.yield %63 : !cir.bool loc(#loc94)
                }) : (!cir.bool) -> !cir.bool loc(#loc94)
                cir.yield %62 : !cir.bool loc(#loc94)
              }) : (!cir.bool) -> !cir.bool loc(#loc94)
              cir.if %58 {
                cir.break loc(#loc98)
              } loc(#loc280)
            } loc(#loc277)
            %47 = cir.const #cir.int<0> : !s32i loc(#loc99)
            %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc99)
            %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc100)
            %50 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc101)
            %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc101)
            cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc281)
            %52 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc102)
            %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc103)
            cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc282)
          } loc(#loc259)
          cir.yield loc(#loc36)
        } while {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc106)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc106)
          cir.condition(%13) loc(#loc106)
        } loc(#loc258)
      } loc(#loc258)
      cir.scope {
        %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc109)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc110)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc110)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc284)
        cir.if %15 {
          %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc112)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc113)
        } loc(#loc285)
      } loc(#loc283)
    } loc(#loc253)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc114)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc115)
    %5 = cir.binop(div, %3, %4) : !s32i loc(#loc286)
    cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc116)
    cir.return loc(#loc19)
  } loc(#loc250)
  cir.func no_proto @CWE369_Divide_by_Zero__int_connect_socket_divide_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc288)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc119)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc289)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc121)
    cir.return loc(#loc118)
  } loc(#loc287)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc291)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc127)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc128)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc292)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc130)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc293)
    %4 = cir.const #cir.int<100> : !s32i loc(#loc132)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc133)
    %6 = cir.binop(div, %4, %5) : !s32i loc(#loc294)
    cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc134)
    cir.return loc(#loc124)
  } loc(#loc290)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc295)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc137)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc297)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc142)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc143)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc298)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc300)
      %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc301)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc302)
      %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc303)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc152)
      %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc152)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc302)
      cir.scope {
        cir.do {
          cir.scope {
            %9 = cir.const #cir.int<2> : !s32i loc(#loc159)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc160)
            %11 = cir.const #cir.int<6> : !s32i loc(#loc161)
            %12 = cir.call @socket(%9, %10, %11) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc162)
            cir.store %12, %5 : !s32i, !cir.ptr<!s32i> loc(#loc306)
            cir.scope {
              %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc167)
              %52 = cir.const #cir.int<1> : !s32i loc(#loc168)
              %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc168)
              %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc308)
              cir.if %54 {
                cir.break loc(#loc170)
              } loc(#loc309)
            } loc(#loc307)
            %13 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc310)
            %14 = cir.const #cir.int<0> : !s32i loc(#loc173)
            %15 = cir.const #cir.int<16> : !u64i loc(#loc311)
            cir.libc.memset %15 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc312)
            %16 = cir.const #cir.int<2> : !s32i loc(#loc178)
            %17 = cir.cast(integral, %16 : !s32i), !u16i loc(#loc178)
            %18 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc59)
            cir.store %17, %18 : !u16i, !cir.ptr<!u16i> loc(#loc313)
            %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc180)
            %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc180)
            %21 = cir.call @inet_addr(%20) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc181)
            %22 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc62)
            %23 = cir.get_member %22[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc63)
            cir.store %21, %23 : !u32i, !cir.ptr<!u32i> loc(#loc314)
            %24 = cir.const #cir.int<27015> : !s32i loc(#loc184)
            %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc184)
            %26 = cir.call @htons(%25) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc185)
            %27 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc68)
            cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc315)
            cir.scope {
              %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc190)
              %52 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc317)
              %53 = cir.const #cir.int<16> : !u64i loc(#loc318)
              %54 = cir.cast(integral, %53 : !u64i), !u32i loc(#loc318)
              %55 = cir.call @connect(%51, %52, %54) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc195)
              %56 = cir.const #cir.int<1> : !s32i loc(#loc196)
              %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc196)
              %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc319)
              cir.if %58 {
                cir.break loc(#loc198)
              } loc(#loc320)
            } loc(#loc316)
            %28 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc199)
            %29 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc200)
            %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc200)
            %31 = cir.const #cir.int<3> : !s32i loc(#loc201)
            %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc201)
            %33 = cir.const #cir.int<4> : !u64i loc(#loc201)
            %34 = cir.binop(mul, %32, %33) : !u64i loc(#loc201)
            %35 = cir.const #cir.int<2> : !s32i loc(#loc201)
            %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc201)
            %37 = cir.binop(add, %34, %36) : !u64i loc(#loc201)
            %38 = cir.const #cir.int<1> : !s32i loc(#loc202)
            %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc202)
            %40 = cir.binop(sub, %37, %39) : !u64i loc(#loc321)
            %41 = cir.const #cir.int<0> : !s32i loc(#loc203)
            %42 = cir.call @recv(%28, %30, %40, %41) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc204)
            %43 = cir.cast(integral, %42 : !s64i), !s32i loc(#loc204)
            cir.store %43, %3 : !s32i, !cir.ptr<!s32i> loc(#loc322)
            cir.scope {
              %51 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc209)
              %52 = cir.const #cir.int<1> : !s32i loc(#loc210)
              %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc210)
              %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc324)
              %55 = cir.ternary(%54, true {
                %56 = cir.const #true loc(#loc211)
                cir.yield %56 : !cir.bool loc(#loc211)
              }, false {
                %56 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc212)
                %57 = cir.const #cir.int<0> : !s32i loc(#loc213)
                %58 = cir.cmp(eq, %56, %57) : !s32i, !cir.bool loc(#loc325)
                %59 = cir.ternary(%58, true {
                  %60 = cir.const #true loc(#loc211)
                  cir.yield %60 : !cir.bool loc(#loc211)
                }, false {
                  %60 = cir.const #false loc(#loc211)
                  cir.yield %60 : !cir.bool loc(#loc211)
                }) : (!cir.bool) -> !cir.bool loc(#loc211)
                cir.yield %59 : !cir.bool loc(#loc211)
              }) : (!cir.bool) -> !cir.bool loc(#loc211)
              cir.if %55 {
                cir.break loc(#loc215)
              } loc(#loc326)
            } loc(#loc323)
            %44 = cir.const #cir.int<0> : !s32i loc(#loc216)
            %45 = cir.cast(integral, %44 : !s32i), !s8i loc(#loc216)
            %46 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc217)
            %47 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc218)
            %48 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %46 : !s32i), !cir.ptr<!s8i> loc(#loc218)
            cir.store %45, %48 : !s8i, !cir.ptr<!s8i> loc(#loc327)
            %49 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc219)
            %50 = cir.call @atoi(%49) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc220)
            cir.store %50, %0 : !s32i, !cir.ptr<!s32i> loc(#loc328)
          } loc(#loc305)
          cir.yield loc(#loc156)
        } while {
          %9 = cir.const #cir.int<0> : !s32i loc(#loc223)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc223)
          cir.condition(%10) loc(#loc223)
        } loc(#loc304)
      } loc(#loc304)
      cir.scope {
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc226)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc227)
        %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc227)
        %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc330)
        cir.if %12 {
          %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc229)
          %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc230)
        } loc(#loc331)
      } loc(#loc329)
    } loc(#loc299)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc233)
      %4 = cir.const #cir.int<0> : !s32i loc(#loc234)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc333)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc238)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc239)
        %8 = cir.binop(div, %6, %7) : !s32i loc(#loc335)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc240)
      } else {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc137)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc137)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc241)
      } loc(#loc334)
    } loc(#loc332)
    cir.return loc(#loc139)
  } loc(#loc296)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":75:49)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":44:1)
#loc19 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":107:1)
#loc20 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":46:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":46:9)
#loc22 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":48:13)
#loc23 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":48:12)
#loc24 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":48:5)
#loc25 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":49:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":104:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":54:9)
#loc28 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":54:13)
#loc29 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":55:9)
#loc30 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":55:28)
#loc31 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":56:9)
#loc32 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":56:32)
#loc33 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":57:9)
#loc34 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":57:41)
#loc35 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":58:9)
#loc36 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":93:17)
#loc37 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":59:9)
#loc38 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":92:9)
#loc39 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":68:36)
#loc40 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":68:45)
#loc41 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":68:58)
#loc42 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":68:29)
#loc43 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":68:13)
#loc44 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":68:69)
#loc45 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":69:13)
#loc46 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":72:13)
#loc47 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":69:17)
#loc48 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":69:34)
#loc49 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":70:13)
#loc50 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":71:17)
#loc51 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":73:20)
#loc52 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":73:21)
#loc53 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":73:30)
#loc54 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":73:33)
#loc55 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":73:47)
#loc56 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":73:13)
#loc57 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":73:48)
#loc58 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":74:34)
#loc59 = loc("/usr/include/netinet/in.h":249:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":74:13)
#loc61 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":75:39)
#loc62 = loc("/usr/include/netinet/in.h":251:20)
#loc63 = loc("/usr/include/netinet/in.h":33:15)
#loc64 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":75:13)
#loc65 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":75:59)
#loc66 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":76:38)
#loc67 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":76:32)
#loc68 = loc("/usr/include/netinet/in.h":250:15)
#loc69 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":76:13)
#loc70 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":76:46)
#loc71 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":77:13)
#loc72 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":80:13)
#loc73 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":77:25)
#loc74 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":77:58)
#loc75 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":77:59)
#loc76 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":77:68)
#loc77 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":77:82)
#loc78 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":77:17)
#loc79 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":77:88)
#loc80 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":78:13)
#loc81 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":79:17)
#loc82 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":83:31)
#loc83 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":83:46)
#loc84 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":83:59)
#loc85 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":83:77)
#loc86 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":83:80)
#loc87 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":83:26)
#loc88 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":83:13)
#loc89 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":83:81)
#loc90 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":84:13)
#loc91 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":87:13)
#loc92 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":84:17)
#loc93 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":84:31)
#loc94 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":84:44)
#loc95 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":84:47)
#loc96 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":84:61)
#loc97 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":85:13)
#loc98 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":86:17)
#loc99 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":89:39)
#loc100 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":89:25)
#loc101 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":89:13)
#loc102 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":91:25)
#loc103 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":91:20)
#loc104 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":91:13)
#loc105 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":91:36)
#loc106 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":93:16)
#loc107 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":94:9)
#loc108 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":97:9)
#loc109 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":94:13)
#loc110 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":94:30)
#loc111 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":95:9)
#loc112 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":96:26)
#loc113 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":96:13)
#loc114 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":106:18)
#loc115 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":106:24)
#loc116 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":106:5)
#loc117 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":198:1)
#loc118 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":202:1)
#loc119 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":200:5)
#loc120 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":200:13)
#loc121 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":201:5)
#loc122 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":201:13)
#loc123 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":114:1)
#loc124 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":123:1)
#loc125 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":116:5)
#loc126 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":116:9)
#loc127 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":118:13)
#loc128 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":118:12)
#loc129 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":118:5)
#loc130 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":120:12)
#loc131 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":120:5)
#loc132 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":122:18)
#loc133 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":122:24)
#loc134 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":122:5)
#loc135 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc136 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc137 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":194:19)
#loc138 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":126:1)
#loc139 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":196:1)
#loc140 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":128:5)
#loc141 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":128:9)
#loc142 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":130:13)
#loc143 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":130:12)
#loc144 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":130:5)
#loc145 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":131:5)
#loc146 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":186:5)
#loc147 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":136:9)
#loc148 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":136:13)
#loc149 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":137:9)
#loc150 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":137:28)
#loc151 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":138:9)
#loc152 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":138:32)
#loc153 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":139:9)
#loc154 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":139:41)
#loc155 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":140:9)
#loc156 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":175:17)
#loc157 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":141:9)
#loc158 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":174:9)
#loc159 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":150:36)
#loc160 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":150:45)
#loc161 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":150:58)
#loc162 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":150:29)
#loc163 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":150:13)
#loc164 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":150:69)
#loc165 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":151:13)
#loc166 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":154:13)
#loc167 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":151:17)
#loc168 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":151:34)
#loc169 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":152:13)
#loc170 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":153:17)
#loc171 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":155:20)
#loc172 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":155:21)
#loc173 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":155:30)
#loc174 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":155:33)
#loc175 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":155:47)
#loc176 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":155:13)
#loc177 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":155:48)
#loc178 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":156:34)
#loc179 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":156:13)
#loc180 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":157:49)
#loc181 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":157:39)
#loc182 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":157:13)
#loc183 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":157:59)
#loc184 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":158:38)
#loc185 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":158:32)
#loc186 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":158:13)
#loc187 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":158:46)
#loc188 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":159:13)
#loc189 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":162:13)
#loc190 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":159:25)
#loc191 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":159:58)
#loc192 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":159:59)
#loc193 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":159:68)
#loc194 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":159:82)
#loc195 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":159:17)
#loc196 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":159:88)
#loc197 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":160:13)
#loc198 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":161:17)
#loc199 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":165:31)
#loc200 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":165:46)
#loc201 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":165:59)
#loc202 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":165:77)
#loc203 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":165:80)
#loc204 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":165:26)
#loc205 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":165:13)
#loc206 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":165:81)
#loc207 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":166:13)
#loc208 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":169:13)
#loc209 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":166:17)
#loc210 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":166:31)
#loc211 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":166:44)
#loc212 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":166:47)
#loc213 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":166:61)
#loc214 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":167:13)
#loc215 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":168:17)
#loc216 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":171:39)
#loc217 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":171:25)
#loc218 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":171:13)
#loc219 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":173:25)
#loc220 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":173:20)
#loc221 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":173:13)
#loc222 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":173:36)
#loc223 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":175:16)
#loc224 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":176:9)
#loc225 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":179:9)
#loc226 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":176:13)
#loc227 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":176:30)
#loc228 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":177:9)
#loc229 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":178:26)
#loc230 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":178:13)
#loc231 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":188:5)
#loc232 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":195:5)
#loc233 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":188:9)
#loc234 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":188:17)
#loc235 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":189:5)
#loc236 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":191:5)
#loc237 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":193:5)
#loc238 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":190:22)
#loc239 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":190:28)
#loc240 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":190:9)
#loc241 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_01.c":194:9)
#loc242 = loc(fused[#loc1, #loc2])
#loc243 = loc(fused[#loc3, #loc4])
#loc244 = loc(fused[#loc6, #loc7])
#loc245 = loc(fused[#loc8, #loc9])
#loc246 = loc(fused[#loc10, #loc11])
#loc247 = loc(fused[#loc12, #loc13])
#loc248 = loc(fused[#loc14, #loc15])
#loc249 = loc(fused[#loc16, #loc17])
#loc250 = loc(fused[#loc18, #loc19])
#loc251 = loc(fused[#loc20, #loc21])
#loc252 = loc(fused[#loc24, #loc22])
#loc253 = loc(fused[#loc25, #loc26])
#loc254 = loc(fused[#loc27, #loc28])
#loc255 = loc(fused[#loc29, #loc30])
#loc256 = loc(fused[#loc31, #loc32])
#loc257 = loc(fused[#loc33, #loc34])
#loc258 = loc(fused[#loc35, #loc36])
#loc259 = loc(fused[#loc37, #loc38])
#loc260 = loc(fused[#loc43, #loc44])
#loc261 = loc(fused[#loc45, #loc46])
#loc262 = loc(fused[#loc47, #loc48])
#loc263 = loc(fused[#loc49, #loc46])
#loc264 = loc(fused[#loc51, #loc52])
#loc265 = loc(fused[#loc54, #loc55])
#loc266 = loc(fused[#loc56, #loc57])
#loc267 = loc(fused[#loc60, #loc58])
#loc268 = loc(fused[#loc64, #loc65])
#loc269 = loc(fused[#loc69, #loc70])
#loc270 = loc(fused[#loc71, #loc72])
#loc271 = loc(fused[#loc74, #loc75])
#loc272 = loc(fused[#loc76, #loc77])
#loc273 = loc(fused[#loc78, #loc79])
#loc274 = loc(fused[#loc80, #loc72])
#loc275 = loc(fused[#loc84, #loc85])
#loc276 = loc(fused[#loc88, #loc89])
#loc277 = loc(fused[#loc90, #loc91])
#loc278 = loc(fused[#loc92, #loc93])
#loc279 = loc(fused[#loc95, #loc96])
#loc280 = loc(fused[#loc97, #loc91])
#loc281 = loc(fused[#loc101, #loc99])
#loc282 = loc(fused[#loc104, #loc105])
#loc283 = loc(fused[#loc107, #loc108])
#loc284 = loc(fused[#loc109, #loc110])
#loc285 = loc(fused[#loc111, #loc108])
#loc286 = loc(fused[#loc114, #loc115])
#loc287 = loc(fused[#loc117, #loc118])
#loc288 = loc(fused[#loc119, #loc120])
#loc289 = loc(fused[#loc121, #loc122])
#loc290 = loc(fused[#loc123, #loc124])
#loc291 = loc(fused[#loc125, #loc126])
#loc292 = loc(fused[#loc129, #loc127])
#loc293 = loc(fused[#loc131, #loc130])
#loc294 = loc(fused[#loc132, #loc133])
#loc295 = loc(fused[#loc135, #loc136])
#loc296 = loc(fused[#loc138, #loc139])
#loc297 = loc(fused[#loc140, #loc141])
#loc298 = loc(fused[#loc144, #loc142])
#loc299 = loc(fused[#loc145, #loc146])
#loc300 = loc(fused[#loc147, #loc148])
#loc301 = loc(fused[#loc149, #loc150])
#loc302 = loc(fused[#loc151, #loc152])
#loc303 = loc(fused[#loc153, #loc154])
#loc304 = loc(fused[#loc155, #loc156])
#loc305 = loc(fused[#loc157, #loc158])
#loc306 = loc(fused[#loc163, #loc164])
#loc307 = loc(fused[#loc165, #loc166])
#loc308 = loc(fused[#loc167, #loc168])
#loc309 = loc(fused[#loc169, #loc166])
#loc310 = loc(fused[#loc171, #loc172])
#loc311 = loc(fused[#loc174, #loc175])
#loc312 = loc(fused[#loc176, #loc177])
#loc313 = loc(fused[#loc179, #loc178])
#loc314 = loc(fused[#loc182, #loc183])
#loc315 = loc(fused[#loc186, #loc187])
#loc316 = loc(fused[#loc188, #loc189])
#loc317 = loc(fused[#loc191, #loc192])
#loc318 = loc(fused[#loc193, #loc194])
#loc319 = loc(fused[#loc195, #loc196])
#loc320 = loc(fused[#loc197, #loc189])
#loc321 = loc(fused[#loc201, #loc202])
#loc322 = loc(fused[#loc205, #loc206])
#loc323 = loc(fused[#loc207, #loc208])
#loc324 = loc(fused[#loc209, #loc210])
#loc325 = loc(fused[#loc212, #loc213])
#loc326 = loc(fused[#loc214, #loc208])
#loc327 = loc(fused[#loc218, #loc216])
#loc328 = loc(fused[#loc221, #loc222])
#loc329 = loc(fused[#loc224, #loc225])
#loc330 = loc(fused[#loc226, #loc227])
#loc331 = loc(fused[#loc228, #loc225])
#loc332 = loc(fused[#loc231, #loc232])
#loc333 = loc(fused[#loc233, #loc234])
#loc334 = loc(fused[#loc235, #loc236, #loc237, #loc232])
#loc335 = loc(fused[#loc238, #loc239])
