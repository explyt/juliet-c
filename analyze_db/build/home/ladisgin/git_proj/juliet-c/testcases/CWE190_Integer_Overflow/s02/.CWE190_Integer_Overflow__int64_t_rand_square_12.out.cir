!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":32:25)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":161:10)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":161:14)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":161:20)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":161:32)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":76:25)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":81:25)
#loc218 = loc(fused[#loc76, #loc77])
#loc219 = loc(fused[#loc78, #loc79])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc190)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc191)
  cir.func private @printLongLongLine(!s64i) loc(#loc192)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr) loc(#loc193)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc9)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc194)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc12)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_square_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc196)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc197)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc198)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc21)
    cir.store %3, %2 : !s64i, !cir.ptr<!s64i> loc(#loc199)
    cir.br ^bb1 loc(#loc200)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc201)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc201)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc25)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc25)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc202)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc30)
    %10 = cir.binop(and, %8, %9) : !s32i loc(#loc30)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc30)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc30)
  ^bb3:  // pred: ^bb2
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc30)
    %14 = cir.const #cir.int<60> : !s32i loc(#loc30)
    %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc30)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc30)
    %18 = cir.const #cir.int<45> : !s32i loc(#loc30)
    %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc30)
    %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc30)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc30)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc30)
    %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc30)
    %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc30)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc30)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc30)
    %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc30)
    %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc30)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
    %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc30)
    %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc30)
    cir.br ^bb5(%33 : !u64i) loc(#loc30)
  ^bb4:  // pred: ^bb2
    %34 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
    %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc30)
    %36 = cir.const #cir.int<60> : !s32i loc(#loc30)
    %37 = cir.shift(left, %35 : !u64i, %36 : !s32i) -> !u64i loc(#loc30)
    %38 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
    %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc30)
    %40 = cir.const #cir.int<45> : !s32i loc(#loc30)
    %41 = cir.shift(left, %39 : !u64i, %40 : !s32i) -> !u64i loc(#loc30)
    %42 = cir.binop(xor, %37, %41) : !u64i loc(#loc30)
    %43 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
    %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc30)
    %45 = cir.const #cir.int<30> : !s32i loc(#loc30)
    %46 = cir.shift(left, %44 : !u64i, %45 : !s32i) -> !u64i loc(#loc30)
    %47 = cir.binop(xor, %42, %46) : !u64i loc(#loc30)
    %48 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
    %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc30)
    %50 = cir.const #cir.int<15> : !s32i loc(#loc30)
    %51 = cir.shift(left, %49 : !u64i, %50 : !s32i) -> !u64i loc(#loc30)
    %52 = cir.binop(xor, %47, %51) : !u64i loc(#loc30)
    %53 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
    %54 = cir.cast(integral, %53 : !s32i), !u64i loc(#loc30)
    %55 = cir.binop(xor, %52, %54) : !u64i loc(#loc30)
    %56 = cir.unary(minus, %55) : !u64i, !u64i loc(#loc30)
    %57 = cir.const #cir.int<1> : !s32i loc(#loc30)
    %58 = cir.cast(integral, %57 : !s32i), !u64i loc(#loc30)
    %59 = cir.binop(sub, %56, %58) : !u64i loc(#loc30)
    cir.br ^bb5(%59 : !u64i) loc(#loc30)
  ^bb5(%60: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":32:25)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc30)
  ^bb6:  // pred: ^bb5
    %61 = cir.cast(integral, %60 : !u64i), !s64i loc(#loc30)
    cir.store %61, %2 : !s64i, !cir.ptr<!s64i> loc(#loc203)
    cir.br ^bb8 loc(#loc28)
  ^bb7:  // pred: ^bb1
    %62 = cir.const #cir.int<2> : !s32i loc(#loc32)
    %63 = cir.cast(integral, %62 : !s32i), !s64i loc(#loc32)
    cir.store %63, %2 : !s64i, !cir.ptr<!s64i> loc(#loc204)
    cir.br ^bb8 loc(#loc24)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc24)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc205)
  ^bb10:  // pred: ^bb9
    %64 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc206)
    %65 = cir.cast(bitcast, %64 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc206)
    %66 = cir.call %65() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc36)
    %67 = cir.cast(int_to_bool, %66 : !s32i), !cir.bool loc(#loc36)
    cir.brcond %67 ^bb11, ^bb14 loc(#loc207)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc208)
  ^bb12:  // pred: ^bb11
    %68 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc43)
    %69 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc16)
    %70 = cir.binop(mul, %68, %69) nsw : !s64i loc(#loc43)
    cir.store %70, %0 : !s64i, !cir.ptr<!s64i> loc(#loc196)
    %71 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc44)
    cir.call @printLongLongLine(%71) : (!s64i) -> () loc(#loc45)
    cir.br ^bb13 loc(#loc42)
  ^bb13:  // pred: ^bb12
    cir.br ^bb20 loc(#loc39)
  ^bb14:  // pred: ^bb10
    cir.br ^bb15 loc(#loc209)
  ^bb15:  // pred: ^bb14
    %72 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc48)
    %73 = cir.call @imaxabs(%72) : (!s64i) -> !s64i extra(#fn_attr) loc(#loc49)
    %74 = cir.cast(int_to_float, %73 : !s64i), !cir.long_double<!cir.f80> loc(#loc49)
    %75 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc50)
    %76 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc51)
    %77 = cir.cast(int_to_float, %76 : !s64i), !cir.long_double<!cir.f80> loc(#loc51)
    %78 = cir.call @sqrtl(%77) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc50)
    %79 = cir.cmp(le, %74, %78) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc210)
    cir.brcond %79 ^bb16, ^bb17 loc(#loc211)
  ^bb16:  // pred: ^bb15
    %80 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc56)
    %81 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc18)
    %82 = cir.binop(mul, %80, %81) nsw : !s64i loc(#loc56)
    cir.store %82, %1 : !s64i, !cir.ptr<!s64i> loc(#loc197)
    %83 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc57)
    cir.call @printLongLongLine(%83) : (!s64i) -> () loc(#loc58)
    cir.br ^bb18 loc(#loc54)
  ^bb17:  // pred: ^bb15
    %84 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc12)
    %85 = cir.cast(array_to_ptrdecay, %84 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc12)
    cir.call @printLine(%85) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    cir.br ^bb18 loc(#loc47)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc47)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc35)
  ^bb20:  // 2 preds: ^bb13, ^bb19
    cir.br ^bb21 loc(#loc35)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc14)
  } loc(#loc195)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_square_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc213)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc62)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc214)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc64)
    cir.return loc(#loc61)
  } loc(#loc212)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc215)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc216)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc72)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc73)
  cir.func @main(%arg0: !s32i loc(fused[#loc76, #loc77]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc78, #loc79])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc218)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc219)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc75)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc80)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc80)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc81)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc82)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc82)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc83)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc70)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc84)
    %8 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_square_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc220)
    cir.call @CWE190_Integer_Overflow__int64_t_rand_square_12_good() : () -> () loc(#loc85)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc71)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc72)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    %13 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_square_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc221)
    cir.call @CWE190_Integer_Overflow__int64_t_rand_square_12_bad() : () -> () loc(#loc89)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc73)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc92)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc222)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc222)
    cir.return %17 : !s32i loc(#loc222)
  } loc(#loc217)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc224)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc225)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc226)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc102)
    cir.store %3, %2 : !s64i, !cir.ptr<!s64i> loc(#loc227)
    cir.br ^bb1 loc(#loc228)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc229)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc229)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc106)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc106)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc230)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc111)
    %10 = cir.binop(and, %8, %9) : !s32i loc(#loc111)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc111)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc111)
  ^bb3:  // pred: ^bb2
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc111)
    %14 = cir.const #cir.int<60> : !s32i loc(#loc111)
    %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc111)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc111)
    %18 = cir.const #cir.int<45> : !s32i loc(#loc111)
    %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc111)
    %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc111)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc111)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc111)
    %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc111)
    %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc111)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc111)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc111)
    %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc111)
    %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc111)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
    %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc111)
    %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc111)
    cir.br ^bb5(%33 : !u64i) loc(#loc111)
  ^bb4:  // pred: ^bb2
    %34 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
    %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc111)
    %36 = cir.const #cir.int<60> : !s32i loc(#loc111)
    %37 = cir.shift(left, %35 : !u64i, %36 : !s32i) -> !u64i loc(#loc111)
    %38 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
    %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc111)
    %40 = cir.const #cir.int<45> : !s32i loc(#loc111)
    %41 = cir.shift(left, %39 : !u64i, %40 : !s32i) -> !u64i loc(#loc111)
    %42 = cir.binop(xor, %37, %41) : !u64i loc(#loc111)
    %43 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
    %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc111)
    %45 = cir.const #cir.int<30> : !s32i loc(#loc111)
    %46 = cir.shift(left, %44 : !u64i, %45 : !s32i) -> !u64i loc(#loc111)
    %47 = cir.binop(xor, %42, %46) : !u64i loc(#loc111)
    %48 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
    %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc111)
    %50 = cir.const #cir.int<15> : !s32i loc(#loc111)
    %51 = cir.shift(left, %49 : !u64i, %50 : !s32i) -> !u64i loc(#loc111)
    %52 = cir.binop(xor, %47, %51) : !u64i loc(#loc111)
    %53 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
    %54 = cir.cast(integral, %53 : !s32i), !u64i loc(#loc111)
    %55 = cir.binop(xor, %52, %54) : !u64i loc(#loc111)
    %56 = cir.unary(minus, %55) : !u64i, !u64i loc(#loc111)
    %57 = cir.const #cir.int<1> : !s32i loc(#loc111)
    %58 = cir.cast(integral, %57 : !s32i), !u64i loc(#loc111)
    %59 = cir.binop(sub, %56, %58) : !u64i loc(#loc111)
    cir.br ^bb5(%59 : !u64i) loc(#loc111)
  ^bb5(%60: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":76:25)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc111)
  ^bb6:  // pred: ^bb5
    %61 = cir.cast(integral, %60 : !u64i), !s64i loc(#loc111)
    cir.store %61, %2 : !s64i, !cir.ptr<!s64i> loc(#loc231)
    cir.br ^bb12 loc(#loc109)
  ^bb7:  // pred: ^bb1
    %62 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
    %63 = cir.const #cir.int<1> : !s32i loc(#loc113)
    %64 = cir.binop(and, %62, %63) : !s32i loc(#loc113)
    %65 = cir.cast(int_to_bool, %64 : !s32i), !cir.bool loc(#loc113)
    cir.brcond %65 ^bb8, ^bb9 loc(#loc113)
  ^bb8:  // pred: ^bb7
    %66 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
    %67 = cir.cast(integral, %66 : !s32i), !u64i loc(#loc113)
    %68 = cir.const #cir.int<60> : !s32i loc(#loc113)
    %69 = cir.shift(left, %67 : !u64i, %68 : !s32i) -> !u64i loc(#loc113)
    %70 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
    %71 = cir.cast(integral, %70 : !s32i), !u64i loc(#loc113)
    %72 = cir.const #cir.int<45> : !s32i loc(#loc113)
    %73 = cir.shift(left, %71 : !u64i, %72 : !s32i) -> !u64i loc(#loc113)
    %74 = cir.binop(xor, %69, %73) : !u64i loc(#loc113)
    %75 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
    %76 = cir.cast(integral, %75 : !s32i), !u64i loc(#loc113)
    %77 = cir.const #cir.int<30> : !s32i loc(#loc113)
    %78 = cir.shift(left, %76 : !u64i, %77 : !s32i) -> !u64i loc(#loc113)
    %79 = cir.binop(xor, %74, %78) : !u64i loc(#loc113)
    %80 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
    %81 = cir.cast(integral, %80 : !s32i), !u64i loc(#loc113)
    %82 = cir.const #cir.int<15> : !s32i loc(#loc113)
    %83 = cir.shift(left, %81 : !u64i, %82 : !s32i) -> !u64i loc(#loc113)
    %84 = cir.binop(xor, %79, %83) : !u64i loc(#loc113)
    %85 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
    %86 = cir.cast(integral, %85 : !s32i), !u64i loc(#loc113)
    %87 = cir.binop(xor, %84, %86) : !u64i loc(#loc113)
    cir.br ^bb10(%87 : !u64i) loc(#loc113)
  ^bb9:  // pred: ^bb7
    %88 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
    %89 = cir.cast(integral, %88 : !s32i), !u64i loc(#loc113)
    %90 = cir.const #cir.int<60> : !s32i loc(#loc113)
    %91 = cir.shift(left, %89 : !u64i, %90 : !s32i) -> !u64i loc(#loc113)
    %92 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
    %93 = cir.cast(integral, %92 : !s32i), !u64i loc(#loc113)
    %94 = cir.const #cir.int<45> : !s32i loc(#loc113)
    %95 = cir.shift(left, %93 : !u64i, %94 : !s32i) -> !u64i loc(#loc113)
    %96 = cir.binop(xor, %91, %95) : !u64i loc(#loc113)
    %97 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
    %98 = cir.cast(integral, %97 : !s32i), !u64i loc(#loc113)
    %99 = cir.const #cir.int<30> : !s32i loc(#loc113)
    %100 = cir.shift(left, %98 : !u64i, %99 : !s32i) -> !u64i loc(#loc113)
    %101 = cir.binop(xor, %96, %100) : !u64i loc(#loc113)
    %102 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
    %103 = cir.cast(integral, %102 : !s32i), !u64i loc(#loc113)
    %104 = cir.const #cir.int<15> : !s32i loc(#loc113)
    %105 = cir.shift(left, %103 : !u64i, %104 : !s32i) -> !u64i loc(#loc113)
    %106 = cir.binop(xor, %101, %105) : !u64i loc(#loc113)
    %107 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
    %108 = cir.cast(integral, %107 : !s32i), !u64i loc(#loc113)
    %109 = cir.binop(xor, %106, %108) : !u64i loc(#loc113)
    %110 = cir.unary(minus, %109) : !u64i, !u64i loc(#loc113)
    %111 = cir.const #cir.int<1> : !s32i loc(#loc113)
    %112 = cir.cast(integral, %111 : !s32i), !u64i loc(#loc113)
    %113 = cir.binop(sub, %110, %112) : !u64i loc(#loc113)
    cir.br ^bb10(%113 : !u64i) loc(#loc113)
  ^bb10(%114: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":81:25)):  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc113)
  ^bb11:  // pred: ^bb10
    %115 = cir.cast(integral, %114 : !u64i), !s64i loc(#loc113)
    cir.store %115, %2 : !s64i, !cir.ptr<!s64i> loc(#loc232)
    cir.br ^bb12 loc(#loc105)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc105)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc233)
  ^bb14:  // pred: ^bb13
    %116 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc234)
    %117 = cir.cast(bitcast, %116 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc234)
    %118 = cir.call %117() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc117)
    %119 = cir.cast(int_to_bool, %118 : !s32i), !cir.bool loc(#loc117)
    cir.brcond %119 ^bb15, ^bb21 loc(#loc235)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc236)
  ^bb16:  // pred: ^bb15
    %120 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc124)
    %121 = cir.call @imaxabs(%120) : (!s64i) -> !s64i extra(#fn_attr) loc(#loc125)
    %122 = cir.cast(int_to_float, %121 : !s64i), !cir.long_double<!cir.f80> loc(#loc125)
    %123 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc126)
    %124 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc127)
    %125 = cir.cast(int_to_float, %124 : !s64i), !cir.long_double<!cir.f80> loc(#loc127)
    %126 = cir.call @sqrtl(%125) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc126)
    %127 = cir.cmp(le, %122, %126) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc237)
    cir.brcond %127 ^bb17, ^bb18 loc(#loc238)
  ^bb17:  // pred: ^bb16
    %128 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc132)
    %129 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc97)
    %130 = cir.binop(mul, %128, %129) nsw : !s64i loc(#loc132)
    cir.store %130, %0 : !s64i, !cir.ptr<!s64i> loc(#loc224)
    %131 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc133)
    cir.call @printLongLongLine(%131) : (!s64i) -> () loc(#loc134)
    cir.br ^bb19 loc(#loc130)
  ^bb18:  // pred: ^bb16
    %132 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc135)
    %133 = cir.cast(array_to_ptrdecay, %132 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc135)
    cir.call @printLine(%133) : (!cir.ptr<!s8i>) -> () loc(#loc136)
    cir.br ^bb19 loc(#loc123)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc123)
  ^bb20:  // pred: ^bb19
    cir.br ^bb27 loc(#loc120)
  ^bb21:  // pred: ^bb14
    cir.br ^bb22 loc(#loc239)
  ^bb22:  // pred: ^bb21
    %134 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc139)
    %135 = cir.call @imaxabs(%134) : (!s64i) -> !s64i extra(#fn_attr) loc(#loc140)
    %136 = cir.cast(int_to_float, %135 : !s64i), !cir.long_double<!cir.f80> loc(#loc140)
    %137 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc141)
    %138 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc142)
    %139 = cir.cast(int_to_float, %138 : !s64i), !cir.long_double<!cir.f80> loc(#loc142)
    %140 = cir.call @sqrtl(%139) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc141)
    %141 = cir.cmp(le, %136, %140) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc240)
    cir.brcond %141 ^bb23, ^bb24 loc(#loc241)
  ^bb23:  // pred: ^bb22
    %142 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc147)
    %143 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc99)
    %144 = cir.binop(mul, %142, %143) nsw : !s64i loc(#loc147)
    cir.store %144, %1 : !s64i, !cir.ptr<!s64i> loc(#loc225)
    %145 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc148)
    cir.call @printLongLongLine(%145) : (!s64i) -> () loc(#loc149)
    cir.br ^bb25 loc(#loc145)
  ^bb24:  // pred: ^bb22
    %146 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc150)
    %147 = cir.cast(array_to_ptrdecay, %146 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc150)
    cir.call @printLine(%147) : (!cir.ptr<!s8i>) -> () loc(#loc151)
    cir.br ^bb25 loc(#loc138)
  ^bb25:  // 2 preds: ^bb23, ^bb24
    cir.br ^bb26 loc(#loc138)
  ^bb26:  // pred: ^bb25
    cir.br ^bb27 loc(#loc116)
  ^bb27:  // 2 preds: ^bb20, ^bb26
    cir.br ^bb28 loc(#loc116)
  ^bb28:  // pred: ^bb27
    cir.return loc(#loc95)
  } loc(#loc223)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc243)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc244)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc245)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc160)
    cir.store %3, %2 : !s64i, !cir.ptr<!s64i> loc(#loc246)
    cir.br ^bb1 loc(#loc247)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc248)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc248)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc164)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc164)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc249)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc169)
    %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc169)
    cir.store %9, %2 : !s64i, !cir.ptr<!s64i> loc(#loc250)
    cir.br ^bb4 loc(#loc167)
  ^bb3:  // pred: ^bb1
    %10 = cir.const #cir.int<2> : !s32i loc(#loc171)
    %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc171)
    cir.store %11, %2 : !s64i, !cir.ptr<!s64i> loc(#loc251)
    cir.br ^bb4 loc(#loc163)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc163)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc252)
  ^bb6:  // pred: ^bb5
    %12 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc253)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc253)
    %14 = cir.call %13() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc175)
    %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc175)
    cir.brcond %15 ^bb7, ^bb10 loc(#loc254)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc255)
  ^bb8:  // pred: ^bb7
    %16 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc182)
    %17 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc155)
    %18 = cir.binop(mul, %16, %17) nsw : !s64i loc(#loc182)
    cir.store %18, %0 : !s64i, !cir.ptr<!s64i> loc(#loc243)
    %19 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc183)
    cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc184)
    cir.br ^bb9 loc(#loc181)
  ^bb9:  // pred: ^bb8
    cir.br ^bb13 loc(#loc178)
  ^bb10:  // pred: ^bb6
    cir.br ^bb11 loc(#loc256)
  ^bb11:  // pred: ^bb10
    %20 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc187)
    %21 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc157)
    %22 = cir.binop(mul, %20, %21) nsw : !s64i loc(#loc187)
    cir.store %22, %1 : !s64i, !cir.ptr<!s64i> loc(#loc244)
    %23 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc188)
    cir.call @printLongLongLine(%23) : (!s64i) -> () loc(#loc189)
    cir.br ^bb12 loc(#loc186)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc174)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc174)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc153)
  } loc(#loc242)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("/usr/include/inttypes.h":351:1)
#loc8 = loc("/usr/include/inttypes.h":351:74)
#loc9 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":57:23)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":25:1)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":60:1)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":43:13)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":43:37)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":52:13)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":52:37)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":27:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":27:13)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":28:12)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":28:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":29:5)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":38:5)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":29:8)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":29:33)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":30:5)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":33:5)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":35:5)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":32:9)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":37:16)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":37:9)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":39:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":59:5)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":39:8)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":39:33)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":40:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":46:5)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":48:5)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":41:9)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":45:9)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":43:30)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":44:31)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":44:13)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":50:9)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":58:9)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":50:31)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":50:13)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":50:40)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":50:46)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":50:55)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":51:9)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":54:9)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":56:9)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":52:30)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":53:31)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":53:13)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":57:13)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":146:1)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":150:1)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":148:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":148:13)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":149:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":149:13)
#loc66 = loc("/usr/include/stdlib.h":575:1)
#loc67 = loc("/usr/include/stdlib.h":575:41)
#loc68 = loc("/usr/include/time.h":76:1)
#loc69 = loc("/usr/include/time.h":76:38)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":166:15)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":168:15)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":171:15)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":173:15)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":161:1)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":176:1)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":162:1)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":164:27)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":164:22)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":164:5)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":166:5)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":167:5)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":167:58)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":168:5)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":171:5)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":172:5)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":172:57)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":173:5)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":175:12)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":175:5)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":69:1)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":109:1)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":88:13)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":88:37)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":101:13)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":101:37)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":71:5)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":71:13)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":72:12)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":72:5)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":73:5)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":82:5)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":73:8)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":73:33)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":74:5)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":77:5)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":79:5)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":76:9)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":81:9)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":83:5)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":108:5)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":83:8)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":83:33)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":84:5)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":95:5)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":97:5)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":86:9)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":94:9)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":86:31)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":86:13)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":86:40)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":86:46)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":86:55)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":87:9)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":90:9)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":92:9)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":88:30)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":89:31)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":89:13)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":93:23)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":93:13)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":99:9)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":107:9)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":99:31)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":99:13)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":99:40)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":99:46)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":99:55)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":100:9)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":103:9)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":105:9)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":101:30)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":102:31)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":102:13)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":106:23)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":106:13)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":114:1)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":144:1)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":132:13)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":132:37)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":140:13)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":140:37)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":116:5)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":116:13)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":117:12)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":117:5)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":118:5)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":127:5)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":118:8)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":118:33)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":119:5)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":122:5)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":124:5)
#loc169 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":121:16)
#loc170 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":121:9)
#loc171 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":126:16)
#loc172 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":126:9)
#loc173 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":128:5)
#loc174 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":143:5)
#loc175 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":128:8)
#loc176 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":128:33)
#loc177 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":129:5)
#loc178 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":135:5)
#loc179 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":137:5)
#loc180 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":130:9)
#loc181 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":134:9)
#loc182 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":132:30)
#loc183 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":133:31)
#loc184 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":133:13)
#loc185 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":138:9)
#loc186 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":142:9)
#loc187 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":140:30)
#loc188 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":141:31)
#loc189 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":141:13)
#loc190 = loc(fused[#loc1, #loc2])
#loc191 = loc(fused[#loc3, #loc4])
#loc192 = loc(fused[#loc5, #loc6])
#loc193 = loc(fused[#loc7, #loc8])
#loc194 = loc(fused[#loc10, #loc11])
#loc195 = loc(fused[#loc13, #loc14])
#loc196 = loc(fused[#loc15, #loc16])
#loc197 = loc(fused[#loc17, #loc18])
#loc198 = loc(fused[#loc19, #loc20])
#loc199 = loc(fused[#loc22, #loc21])
#loc200 = loc(fused[#loc23, #loc24])
#loc201 = loc(fused[#loc25, #loc26])
#loc202 = loc(fused[#loc27, #loc28, #loc29, #loc24])
#loc203 = loc(fused[#loc31, #loc30])
#loc204 = loc(fused[#loc33, #loc32])
#loc205 = loc(fused[#loc34, #loc35])
#loc206 = loc(fused[#loc36, #loc37])
#loc207 = loc(fused[#loc38, #loc39, #loc40, #loc35])
#loc208 = loc(fused[#loc41, #loc42])
#loc209 = loc(fused[#loc46, #loc47])
#loc210 = loc(fused[#loc49, #loc52])
#loc211 = loc(fused[#loc53, #loc54, #loc55, #loc47])
#loc212 = loc(fused[#loc60, #loc61])
#loc213 = loc(fused[#loc62, #loc63])
#loc214 = loc(fused[#loc64, #loc65])
#loc215 = loc(fused[#loc66, #loc67])
#loc216 = loc(fused[#loc68, #loc69])
#loc217 = loc(fused[#loc74, #loc75])
#loc220 = loc(fused[#loc85, #loc86])
#loc221 = loc(fused[#loc89, #loc90])
#loc222 = loc(fused[#loc93, #loc92])
#loc223 = loc(fused[#loc94, #loc95])
#loc224 = loc(fused[#loc96, #loc97])
#loc225 = loc(fused[#loc98, #loc99])
#loc226 = loc(fused[#loc100, #loc101])
#loc227 = loc(fused[#loc103, #loc102])
#loc228 = loc(fused[#loc104, #loc105])
#loc229 = loc(fused[#loc106, #loc107])
#loc230 = loc(fused[#loc108, #loc109, #loc110, #loc105])
#loc231 = loc(fused[#loc112, #loc111])
#loc232 = loc(fused[#loc114, #loc113])
#loc233 = loc(fused[#loc115, #loc116])
#loc234 = loc(fused[#loc117, #loc118])
#loc235 = loc(fused[#loc119, #loc120, #loc121, #loc116])
#loc236 = loc(fused[#loc122, #loc123])
#loc237 = loc(fused[#loc125, #loc128])
#loc238 = loc(fused[#loc129, #loc130, #loc131, #loc123])
#loc239 = loc(fused[#loc137, #loc138])
#loc240 = loc(fused[#loc140, #loc143])
#loc241 = loc(fused[#loc144, #loc145, #loc146, #loc138])
#loc242 = loc(fused[#loc152, #loc153])
#loc243 = loc(fused[#loc154, #loc155])
#loc244 = loc(fused[#loc156, #loc157])
#loc245 = loc(fused[#loc158, #loc159])
#loc246 = loc(fused[#loc161, #loc160])
#loc247 = loc(fused[#loc162, #loc163])
#loc248 = loc(fused[#loc164, #loc165])
#loc249 = loc(fused[#loc166, #loc167, #loc168, #loc163])
#loc250 = loc(fused[#loc170, #loc169])
#loc251 = loc(fused[#loc172, #loc171])
#loc252 = loc(fused[#loc173, #loc174])
#loc253 = loc(fused[#loc175, #loc176])
#loc254 = loc(fused[#loc177, #loc178, #loc179, #loc174])
#loc255 = loc(fused[#loc180, #loc181])
#loc256 = loc(fused[#loc185, #loc186])
