!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_fwrite_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fwrite(!cir.ptr<!void>, !u64i, !u64i, !cir.ptr<!ty__IO_FILE>) -> !u64i loc(#loc86)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"string\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc3)
  cir.global "private"  external @stdout : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc87)
  cir.func no_proto  @CWE252_Unchecked_Return_Value__char_fwrite_08_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc90)
      %1 = cir.call %0() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc10)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc10)
      cir.if %2 {
        %3 = cir.get_global @fwrite : !cir.ptr<!cir.func<!u64i (!cir.ptr<!void>, !u64i, !u64i, !cir.ptr<!ty__IO_FILE>)>> loc(#loc13)
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc3)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc3)
        %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc92)
        %7 = cir.const #cir.int<1> : !u64i loc(#loc93)
        %8 = cir.const #cir.int<6> : !u64i loc(#loc94)
        %9 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc87)
        %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc19)
        %11 = cir.call @fwrite(%6, %7, %8, %10) : (!cir.ptr<!void>, !u64i, !u64i, !cir.ptr<!ty__IO_FILE>) -> !u64i loc(#loc13)
      } loc(#loc91)
    } loc(#loc89)
    cir.return loc(#loc7)
  } loc(#loc88)
  cir.func no_proto  @CWE252_Unchecked_Return_Value__char_fwrite_08_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc96)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc22)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc97)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc24)
    cir.return loc(#loc21)
  } loc(#loc95)
  cir.func no_proto internal private  @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc27)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc28)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc99)
    cir.return %2 : !s32i loc(#loc99)
  } loc(#loc98)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc100)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc32)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"fwrite failed!\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc33)
  cir.func no_proto internal private  @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc103)
      %1 = cir.call %0() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc38)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc38)
      cir.if %2 {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc32)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc32)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc43)
      } else {
        cir.scope {
          %3 = cir.get_global @fwrite : !cir.ptr<!cir.func<!u64i (!cir.ptr<!void>, !u64i, !u64i, !cir.ptr<!ty__IO_FILE>)>> loc(#loc46)
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc47)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc47)
          %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc106)
          %7 = cir.const #cir.int<1> : !u64i loc(#loc107)
          %8 = cir.const #cir.int<6> : !u64i loc(#loc108)
          %9 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc87)
          %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc53)
          %11 = cir.call @fwrite(%6, %7, %8, %10) : (!cir.ptr<!void>, !u64i, !u64i, !cir.ptr<!ty__IO_FILE>) -> !u64i loc(#loc46)
          %12 = cir.const #cir.int<6> : !u64i loc(#loc109)
          %13 = cir.cmp(ne, %11, %12) : !u64i, !s32i loc(#loc110)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc56)
          cir.if %14 {
            %15 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc33)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc33)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc58)
          } loc(#loc111)
        } loc(#loc105)
      } loc(#loc104)
    } loc(#loc102)
    cir.return loc(#loc35)
  } loc(#loc101)
  cir.func no_proto internal private  @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc60)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc61)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    cir.return %2 : !s32i loc(#loc113)
  } loc(#loc112)
  cir.func no_proto internal private  @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc116)
      %1 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc67)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc67)
      cir.if %2 {
        cir.scope {
          %3 = cir.get_global @fwrite : !cir.ptr<!cir.func<!u64i (!cir.ptr<!void>, !u64i, !u64i, !cir.ptr<!ty__IO_FILE>)>> loc(#loc72)
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc73)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc73)
          %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc119)
          %7 = cir.const #cir.int<1> : !u64i loc(#loc120)
          %8 = cir.const #cir.int<6> : !u64i loc(#loc121)
          %9 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc87)
          %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc79)
          %11 = cir.call @fwrite(%6, %7, %8, %10) : (!cir.ptr<!void>, !u64i, !u64i, !cir.ptr<!ty__IO_FILE>) -> !u64i loc(#loc72)
          %12 = cir.const #cir.int<6> : !u64i loc(#loc122)
          %13 = cir.cmp(ne, %11, %12) : !u64i, !s32i loc(#loc123)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc82)
          cir.if %14 {
            %15 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc84)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc84)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc85)
          } loc(#loc124)
        } loc(#loc118)
      } loc(#loc117)
    } loc(#loc115)
    cir.return loc(#loc64)
  } loc(#loc114)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_fwrite_08.c":0:0)
#loc1 = loc("/usr/include/stdio.h":745:1)
#loc2 = loc("/usr/include/stdio.h":746:43)
#loc3 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":42:24)
#loc4 = loc("/usr/include/stdio.h":150:1)
#loc5 = loc("/usr/include/stdio.h":150:14)
#loc6 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":37:1)
#loc7 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":44:1)
#loc8 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":39:5)
#loc9 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":43:5)
#loc10 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":39:8)
#loc11 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":39:26)
#loc12 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":40:5)
#loc13 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":42:9)
#loc14 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":42:16)
#loc15 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":42:34)
#loc16 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":42:45)
#loc17 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":42:48)
#loc18 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":42:63)
#loc19 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":42:66)
#loc20 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":81:1)
#loc21 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":85:1)
#loc22 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":83:5)
#loc23 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":83:11)
#loc24 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":84:5)
#loc25 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":84:11)
#loc26 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":25:1)
#loc27 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":28:1)
#loc28 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":27:12)
#loc29 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":27:5)
#loc30 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc31 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc32 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":56:19)
#loc33 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":63:23)
#loc34 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":51:1)
#loc35 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":66:1)
#loc36 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":53:5)
#loc37 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":65:5)
#loc38 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":53:8)
#loc39 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":53:27)
#loc40 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":54:5)
#loc41 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":57:5)
#loc42 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":59:5)
#loc43 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":56:9)
#loc44 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":61:9)
#loc45 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":64:9)
#loc46 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":61:13)
#loc47 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":61:28)
#loc48 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":61:20)
#loc49 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":61:38)
#loc50 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":61:49)
#loc51 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":61:52)
#loc52 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":61:67)
#loc53 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":61:70)
#loc54 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":61:81)
#loc55 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":61:96)
#loc56 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":61:78)
#loc57 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":62:9)
#loc58 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":63:13)
#loc59 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":30:1)
#loc60 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":33:1)
#loc61 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":32:12)
#loc62 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":32:5)
#loc63 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":69:1)
#loc64 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":79:1)
#loc65 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":71:5)
#loc66 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":78:5)
#loc67 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":71:8)
#loc68 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":71:26)
#loc69 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":72:5)
#loc70 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":74:9)
#loc71 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":77:9)
#loc72 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":74:13)
#loc73 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":74:28)
#loc74 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":74:20)
#loc75 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":74:38)
#loc76 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":74:49)
#loc77 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":74:52)
#loc78 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":74:67)
#loc79 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":74:70)
#loc80 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":74:81)
#loc81 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":74:96)
#loc82 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":74:78)
#loc83 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":75:9)
#loc84 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":76:23)
#loc85 = loc("CWE252_Unchecked_Return_Value__char_fwrite_08.c":76:13)
#loc86 = loc(fused[#loc1, #loc2])
#loc87 = loc(fused[#loc4, #loc5])
#loc88 = loc(fused[#loc6, #loc7])
#loc89 = loc(fused[#loc8, #loc9])
#loc90 = loc(fused[#loc10, #loc11])
#loc91 = loc(fused[#loc12, #loc9])
#loc92 = loc(fused[#loc14, #loc3])
#loc93 = loc(fused[#loc15, #loc16])
#loc94 = loc(fused[#loc17, #loc18])
#loc95 = loc(fused[#loc20, #loc21])
#loc96 = loc(fused[#loc22, #loc23])
#loc97 = loc(fused[#loc24, #loc25])
#loc98 = loc(fused[#loc26, #loc27])
#loc99 = loc(fused[#loc29, #loc28])
#loc100 = loc(fused[#loc30, #loc31])
#loc101 = loc(fused[#loc34, #loc35])
#loc102 = loc(fused[#loc36, #loc37])
#loc103 = loc(fused[#loc38, #loc39])
#loc104 = loc(fused[#loc40, #loc41, #loc42, #loc37])
#loc105 = loc(fused[#loc44, #loc45])
#loc106 = loc(fused[#loc48, #loc47])
#loc107 = loc(fused[#loc49, #loc50])
#loc108 = loc(fused[#loc51, #loc52])
#loc109 = loc(fused[#loc54, #loc55])
#loc110 = loc(fused[#loc46, #loc55])
#loc111 = loc(fused[#loc57, #loc45])
#loc112 = loc(fused[#loc59, #loc60])
#loc113 = loc(fused[#loc62, #loc61])
#loc114 = loc(fused[#loc63, #loc64])
#loc115 = loc(fused[#loc65, #loc66])
#loc116 = loc(fused[#loc67, #loc68])
#loc117 = loc(fused[#loc69, #loc66])
#loc118 = loc(fused[#loc70, #loc71])
#loc119 = loc(fused[#loc74, #loc73])
#loc120 = loc(fused[#loc75, #loc76])
#loc121 = loc(fused[#loc77, #loc78])
#loc122 = loc(fused[#loc80, #loc81])
#loc123 = loc(fused[#loc72, #loc81])
#loc124 = loc(fused[#loc83, #loc71])
