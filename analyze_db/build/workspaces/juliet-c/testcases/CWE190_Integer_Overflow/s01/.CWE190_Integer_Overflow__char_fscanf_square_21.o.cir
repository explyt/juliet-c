!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc12 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":27:21)
#loc13 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":27:26)
#loc55 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":59:26)
#loc56 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":59:31)
#loc98 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":92:26)
#loc99 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":92:31)
#loc139 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":120:25)
#loc140 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":120:30)
#loc170 = loc(fused[#loc12, #loc13])
#loc186 = loc(fused[#loc55, #loc56])
#loc199 = loc(fused[#loc98, #loc99])
#loc212 = loc(fused[#loc139, #loc140])
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc165)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc166)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc167)
  cir.func private @printHexCharLine(!s8i) loc(#loc168)
  cir.func internal private @badSink(%arg0: !s8i loc(fused[#loc12, #loc13])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc170)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc14)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc167)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc17)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc17)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc174)
          %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc23)
          %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc23)
          %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc22)
          %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc22)
          %9 = cir.binop(mul, %6, %8) nsw : !s32i loc(#loc23)
          %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc23)
          cir.store %10, %4 : !s8i, !cir.ptr<!s8i> loc(#loc174)
          %11 = cir.load %4 : !cir.ptr<!s8i>, !s8i loc(#loc24)
          cir.call @printHexCharLine(%11) : (!s8i) -> () loc(#loc25)
        } loc(#loc173)
      } loc(#loc172)
    } loc(#loc171)
    cir.return loc(#loc11)
  } loc(#loc169)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_square_21_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc176)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc30)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc30)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc177)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc32)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc166)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc33)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc32)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %10 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc167)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    %11 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc36)
    cir.call @badSink(%11) : (!s8i) -> () loc(#loc37)
    cir.return loc(#loc27)
  } loc(#loc175)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_square_21_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc180)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc181)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc182)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    cir.return loc(#loc39)
  } loc(#loc179)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc183)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc184)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc50)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc52)
  cir.func internal private @goodB2G1Sink(%arg0: !s8i loc(fused[#loc55, #loc56])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc186)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc57)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc183)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc60)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc60)
      cir.if %3 {
        %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc50)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc50)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc64)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc67)
          %5 = cir.cast(integral, %4 : !s8i), !s64i loc(#loc67)
          %6 = cir.cast(integral, %5 : !s64i), !s32i loc(#loc67)
          %7 = cir.abs %6 poison : !s32i loc(#loc68)
          %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc68)
          %9 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc69)
          %10 = cir.const #cir.int<127> : !s32i loc(#loc70)
          %11 = cir.cast(int_to_float, %10 : !s32i), !cir.double loc(#loc70)
          %12 = cir.call @sqrt(%11) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc69)
          %13 = cir.cast(float_to_int, %12 : !cir.double), !s64i loc(#loc69)
          %14 = cir.cmp(le, %8, %13) : !s64i, !cir.bool loc(#loc190)
          cir.if %14 {
            %15 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc192)
            %16 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc77)
            %17 = cir.cast(integral, %16 : !s8i), !s32i loc(#loc77)
            %18 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc76)
            %19 = cir.cast(integral, %18 : !s8i), !s32i loc(#loc76)
            %20 = cir.binop(mul, %17, %19) nsw : !s32i loc(#loc77)
            %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc77)
            cir.store %21, %15 : !s8i, !cir.ptr<!s8i> loc(#loc192)
            %22 = cir.load %15 : !cir.ptr<!s8i>, !s8i loc(#loc78)
            cir.call @printHexCharLine(%22) : (!s8i) -> () loc(#loc79)
          } else {
            %15 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc52)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc52)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc80)
          } loc(#loc191)
        } loc(#loc189)
      } loc(#loc188)
    } loc(#loc187)
    cir.return loc(#loc54)
  } loc(#loc185)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc194)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc85)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc85)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc195)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc87)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc166)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc88)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc89)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc89)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc87)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc90)
    %10 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc183)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    %11 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc92)
    cir.call @goodB2G1Sink(%11) : (!s8i) -> () loc(#loc93)
    cir.return loc(#loc82)
  } loc(#loc193)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc197)
  cir.func internal private @goodB2G2Sink(%arg0: !s8i loc(fused[#loc98, #loc99])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc199)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc100)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc197)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc103)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc103)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc107)
          %5 = cir.cast(integral, %4 : !s8i), !s64i loc(#loc107)
          %6 = cir.cast(integral, %5 : !s64i), !s32i loc(#loc107)
          %7 = cir.abs %6 poison : !s32i loc(#loc108)
          %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc108)
          %9 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc109)
          %10 = cir.const #cir.int<127> : !s32i loc(#loc110)
          %11 = cir.cast(int_to_float, %10 : !s32i), !cir.double loc(#loc110)
          %12 = cir.call @sqrt(%11) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc109)
          %13 = cir.cast(float_to_int, %12 : !cir.double), !s64i loc(#loc109)
          %14 = cir.cmp(le, %8, %13) : !s64i, !cir.bool loc(#loc203)
          cir.if %14 {
            %15 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc205)
            %16 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc117)
            %17 = cir.cast(integral, %16 : !s8i), !s32i loc(#loc117)
            %18 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc116)
            %19 = cir.cast(integral, %18 : !s8i), !s32i loc(#loc116)
            %20 = cir.binop(mul, %17, %19) nsw : !s32i loc(#loc117)
            %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc117)
            cir.store %21, %15 : !s8i, !cir.ptr<!s8i> loc(#loc205)
            %22 = cir.load %15 : !cir.ptr<!s8i>, !s8i loc(#loc118)
            cir.call @printHexCharLine(%22) : (!s8i) -> () loc(#loc119)
          } else {
            %15 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc120)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc120)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc121)
          } loc(#loc204)
        } loc(#loc202)
      } loc(#loc201)
    } loc(#loc200)
    cir.return loc(#loc97)
  } loc(#loc198)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc207)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc126)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc126)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc208)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc128)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc166)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc129)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc130)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc130)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc128)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc131)
    %10 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc197)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    %11 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc133)
    cir.call @goodB2G2Sink(%11) : (!s8i) -> () loc(#loc134)
    cir.return loc(#loc123)
  } loc(#loc206)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc210)
  cir.func internal private @goodG2BSink(%arg0: !s8i loc(fused[#loc139, #loc140])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc212)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc141)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc210)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc144)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc144)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc216)
          %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc150)
          %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc150)
          %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc149)
          %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc149)
          %9 = cir.binop(mul, %6, %8) nsw : !s32i loc(#loc150)
          %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc150)
          cir.store %10, %4 : !s8i, !cir.ptr<!s8i> loc(#loc216)
          %11 = cir.load %4 : !cir.ptr<!s8i>, !s8i loc(#loc151)
          cir.call @printHexCharLine(%11) : (!s8i) -> () loc(#loc152)
        } loc(#loc215)
      } loc(#loc214)
    } loc(#loc213)
    cir.return loc(#loc138)
  } loc(#loc211)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc218)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc157)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc157)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc219)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc159)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc159)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc220)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc161)
    %6 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc210)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc221)
    %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc163)
    cir.call @goodG2BSink(%7) : (!s8i) -> () loc(#loc164)
    cir.return loc(#loc154)
  } loc(#loc217)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_21.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":44:20)
#loc6 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":25:1)
#loc7 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":25:24)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc10 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":27:1)
#loc11 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":37:1)
#loc14 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":28:1)
#loc15 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":29:5)
#loc16 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":36:5)
#loc17 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":29:8)
#loc18 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":30:5)
#loc19 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":31:9)
#loc20 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":35:9)
#loc21 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":33:13)
#loc22 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":33:34)
#loc23 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":33:27)
#loc24 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":34:30)
#loc25 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":34:13)
#loc26 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":39:1)
#loc27 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":47:1)
#loc28 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":41:5)
#loc29 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":41:10)
#loc30 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":42:12)
#loc31 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":42:5)
#loc32 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":44:5)
#loc33 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":44:13)
#loc34 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":45:17)
#loc35 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":45:5)
#loc36 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":46:13)
#loc37 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":46:5)
#loc38 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":142:1)
#loc39 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":147:1)
#loc40 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":144:5)
#loc41 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":144:14)
#loc42 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":145:5)
#loc43 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":145:14)
#loc44 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":146:5)
#loc45 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":146:13)
#loc46 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":54:1)
#loc47 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":54:29)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc50 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":64:19)
#loc51 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc52 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":76:23)
#loc53 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":59:1)
#loc54 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":79:1)
#loc57 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":60:1)
#loc58 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":61:5)
#loc59 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":78:5)
#loc60 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":61:8)
#loc61 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":62:5)
#loc62 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":65:5)
#loc63 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":67:5)
#loc64 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":64:9)
#loc65 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":69:9)
#loc66 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":77:9)
#loc67 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":69:23)
#loc68 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":69:13)
#loc69 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":69:38)
#loc70 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":69:51)
#loc71 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":69:59)
#loc72 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":70:9)
#loc73 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":73:9)
#loc74 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":75:9)
#loc75 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":71:13)
#loc76 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":71:34)
#loc77 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":71:27)
#loc78 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":72:30)
#loc79 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":72:13)
#loc80 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":76:13)
#loc81 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":81:1)
#loc82 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":89:1)
#loc83 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":83:5)
#loc84 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":83:10)
#loc85 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":84:12)
#loc86 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":84:5)
#loc87 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":86:5)
#loc88 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":86:13)
#loc89 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":86:20)
#loc90 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":87:22)
#loc91 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":87:5)
#loc92 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":88:18)
#loc93 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":88:5)
#loc94 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":55:1)
#loc95 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":55:29)
#loc96 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":92:1)
#loc97 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":107:1)
#loc100 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":93:1)
#loc101 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":94:5)
#loc102 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":106:5)
#loc103 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":94:8)
#loc104 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":95:5)
#loc105 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":97:9)
#loc106 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":105:9)
#loc107 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":97:23)
#loc108 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":97:13)
#loc109 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":97:38)
#loc110 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":97:51)
#loc111 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":97:59)
#loc112 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":98:9)
#loc113 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":101:9)
#loc114 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":103:9)
#loc115 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":99:13)
#loc116 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":99:34)
#loc117 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":99:27)
#loc118 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":100:30)
#loc119 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":100:13)
#loc120 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":104:23)
#loc121 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":104:13)
#loc122 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":109:1)
#loc123 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":117:1)
#loc124 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":111:5)
#loc125 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":111:10)
#loc126 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":112:12)
#loc127 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":112:5)
#loc128 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":114:5)
#loc129 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":114:13)
#loc130 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":114:20)
#loc131 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":115:22)
#loc132 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":115:5)
#loc133 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":116:18)
#loc134 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":116:5)
#loc135 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":56:1)
#loc136 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":56:28)
#loc137 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":120:1)
#loc138 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":130:1)
#loc141 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":121:1)
#loc142 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":122:5)
#loc143 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":129:5)
#loc144 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":122:8)
#loc145 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":123:5)
#loc146 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":124:9)
#loc147 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":128:9)
#loc148 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":126:13)
#loc149 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":126:34)
#loc150 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":126:27)
#loc151 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":127:30)
#loc152 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":127:13)
#loc153 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":132:1)
#loc154 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":140:1)
#loc155 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":134:5)
#loc156 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":134:10)
#loc157 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":135:12)
#loc158 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":135:5)
#loc159 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":137:12)
#loc160 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":137:5)
#loc161 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":138:21)
#loc162 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":138:5)
#loc163 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":139:17)
#loc164 = loc("CWE190_Integer_Overflow__char_fscanf_square_21.c":139:5)
#loc165 = loc(fused[#loc1, #loc2])
#loc166 = loc(fused[#loc3, #loc4])
#loc167 = loc(fused[#loc6, #loc7])
#loc168 = loc(fused[#loc8, #loc9])
#loc169 = loc(fused[#loc10, #loc11])
#loc171 = loc(fused[#loc15, #loc16])
#loc172 = loc(fused[#loc18, #loc16])
#loc173 = loc(fused[#loc19, #loc20])
#loc174 = loc(fused[#loc21, #loc22])
#loc175 = loc(fused[#loc26, #loc27])
#loc176 = loc(fused[#loc28, #loc29])
#loc177 = loc(fused[#loc31, #loc30])
#loc178 = loc(fused[#loc35, #loc34])
#loc179 = loc(fused[#loc38, #loc39])
#loc180 = loc(fused[#loc40, #loc41])
#loc181 = loc(fused[#loc42, #loc43])
#loc182 = loc(fused[#loc44, #loc45])
#loc183 = loc(fused[#loc46, #loc47])
#loc184 = loc(fused[#loc48, #loc49])
#loc185 = loc(fused[#loc53, #loc54])
#loc187 = loc(fused[#loc58, #loc59])
#loc188 = loc(fused[#loc61, #loc62, #loc63, #loc59])
#loc189 = loc(fused[#loc65, #loc66])
#loc190 = loc(fused[#loc68, #loc71])
#loc191 = loc(fused[#loc72, #loc73, #loc74, #loc66])
#loc192 = loc(fused[#loc75, #loc76])
#loc193 = loc(fused[#loc81, #loc82])
#loc194 = loc(fused[#loc83, #loc84])
#loc195 = loc(fused[#loc86, #loc85])
#loc196 = loc(fused[#loc91, #loc90])
#loc197 = loc(fused[#loc94, #loc95])
#loc198 = loc(fused[#loc96, #loc97])
#loc200 = loc(fused[#loc101, #loc102])
#loc201 = loc(fused[#loc104, #loc102])
#loc202 = loc(fused[#loc105, #loc106])
#loc203 = loc(fused[#loc108, #loc111])
#loc204 = loc(fused[#loc112, #loc113, #loc114, #loc106])
#loc205 = loc(fused[#loc115, #loc116])
#loc206 = loc(fused[#loc122, #loc123])
#loc207 = loc(fused[#loc124, #loc125])
#loc208 = loc(fused[#loc127, #loc126])
#loc209 = loc(fused[#loc132, #loc131])
#loc210 = loc(fused[#loc135, #loc136])
#loc211 = loc(fused[#loc137, #loc138])
#loc213 = loc(fused[#loc142, #loc143])
#loc214 = loc(fused[#loc145, #loc143])
#loc215 = loc(fused[#loc146, #loc147])
#loc216 = loc(fused[#loc148, #loc149])
#loc217 = loc(fused[#loc153, #loc154])
#loc218 = loc(fused[#loc155, #loc156])
#loc219 = loc(fused[#loc158, #loc157])
#loc220 = loc(fused[#loc160, #loc159])
#loc221 = loc(fused[#loc162, #loc161])
