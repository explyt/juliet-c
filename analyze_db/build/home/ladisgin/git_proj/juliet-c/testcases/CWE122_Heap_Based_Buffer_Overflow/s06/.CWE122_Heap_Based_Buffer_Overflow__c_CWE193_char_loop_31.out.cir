!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":99:10)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":99:14)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":99:20)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":99:32)
#loc197 = loc(fused[#loc85, #loc86])
#loc198 = loc(fused[#loc87, #loc88])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private @__const.goodG2B.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc161)
  cir.global "private" constant cir_private @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31_bad.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc162)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc163)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc164)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc165)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc166)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc167)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc169)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc19)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc170)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc21)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc22)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc22)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc171)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc172)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc173)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc174)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc29)
      %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc30)
      %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc176)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc32)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc33)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc34)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
      } loc(#loc177)
    } loc(#loc175)
    cir.scope {
      %9 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc179)
      %10 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc180)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
      cir.store %11, %9 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc179)
      %12 = cir.load %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
      cir.store %12, %10 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc180)
      cir.scope {
        %13 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc162)
        %14 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc182)
        %15 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc183)
        %16 = cir.get_global @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31_bad.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc162)
        cir.copy %16 to %13 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc162)
        %17 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc46)
        %18 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc47)
        %19 = cir.call @strlen(%18) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc46)
        cir.store %19, %15 : !u64i, !cir.ptr<!u64i> loc(#loc184)
        cir.scope {
          %24 = cir.const #cir.int<0> : !s32i loc(#loc52)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc52)
          cir.store %25, %14 : !u64i, !cir.ptr<!u64i> loc(#loc186)
          cir.for : cond {
            %26 = cir.load %14 : !cir.ptr<!u64i>, !u64i loc(#loc54)
            %27 = cir.load %15 : !cir.ptr<!u64i>, !u64i loc(#loc55)
            %28 = cir.const #cir.int<1> : !s32i loc(#loc56)
            %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc56)
            %30 = cir.binop(add, %27, %29) : !u64i loc(#loc187)
            %31 = cir.cmp(lt, %26, %30) : !u64i, !cir.bool loc(#loc188)
            cir.condition(%31) loc(#loc57)
          } body {
            cir.scope {
              %26 = cir.load %14 : !cir.ptr<!u64i>, !u64i loc(#loc59)
              %27 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc60)
              %28 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %26 : !u64i), !cir.ptr<!s8i> loc(#loc60)
              %29 = cir.load %28 : !cir.ptr<!s8i>, !s8i loc(#loc60)
              %30 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
              %31 = cir.load %14 : !cir.ptr<!u64i>, !u64i loc(#loc62)
              %32 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc63)
              cir.store %29, %32 : !s8i, !cir.ptr<!s8i> loc(#loc190)
            } loc(#loc189)
            cir.yield loc(#loc51)
          } step {
            %26 = cir.load %14 : !cir.ptr<!u64i>, !u64i loc(#loc65)
            %27 = cir.unary(inc, %26) : !u64i, !u64i loc(#loc66)
            cir.store %27, %14 : !u64i, !cir.ptr<!u64i> loc(#loc191)
            cir.yield loc(#loc185)
          } loc(#loc185)
        } loc(#loc185)
        %20 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc67)
        cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc68)
        %21 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc69)
        %22 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc70)
        %23 = cir.cast(bitcast, %22 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc70)
        cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc69)
      } loc(#loc181)
    } loc(#loc178)
    cir.return loc(#loc16)
  } loc(#loc168)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc193)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc73)
    cir.return loc(#loc72)
  } loc(#loc192)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc194)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc195)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc79)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc80)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc81)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc82)
  cir.func @main(%arg0: !s32i loc(fused[#loc85, #loc86]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc87, #loc88])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc197)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc198)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc84)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc89)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc89)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc90)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc91)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc91)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc92)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc79)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc79)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31_good : !cir.ptr<!cir.func<!void ()>> loc(#loc199)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31_good() : () -> () loc(#loc94)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc80)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc80)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc81)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc81)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc97)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc200)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31_bad() : () -> () loc(#loc98)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc82)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc82)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc100)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc101)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc201)
    cir.return %17 : !s32i loc(#loc201)
  } loc(#loc196)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc203)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc107)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc204)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc109)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc110)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc111)
    %5 = cir.binop(add, %3, %4) nsw : !s32i loc(#loc110)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc110)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc205)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc206)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc109)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc207)
    cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc208)
    cir.scope {
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc119)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc120)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc120)
      %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc210)
      cir.if %14 {
        %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc122)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc123)
        %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc124)
        cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc122)
      } loc(#loc211)
    } loc(#loc209)
    cir.scope {
      %11 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc213)
      %12 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc214)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc128)
      cir.store %13, %11 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc213)
      %14 = cir.load %11 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc130)
      cir.store %14, %12 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc214)
      cir.scope {
        %15 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc161)
        %16 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc216)
        %17 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc217)
        %18 = cir.get_global @__const.goodG2B.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc161)
        cir.copy %18 to %15 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc161)
        %19 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc136)
        %20 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc137)
        %21 = cir.call @strlen(%20) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc136)
        cir.store %21, %17 : !u64i, !cir.ptr<!u64i> loc(#loc218)
        cir.scope {
          %26 = cir.const #cir.int<0> : !s32i loc(#loc142)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc142)
          cir.store %27, %16 : !u64i, !cir.ptr<!u64i> loc(#loc220)
          cir.for : cond {
            %28 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc144)
            %29 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc145)
            %30 = cir.const #cir.int<1> : !s32i loc(#loc146)
            %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc146)
            %32 = cir.binop(add, %29, %31) : !u64i loc(#loc221)
            %33 = cir.cmp(lt, %28, %32) : !u64i, !cir.bool loc(#loc222)
            cir.condition(%33) loc(#loc147)
          } body {
            cir.scope {
              %28 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc149)
              %29 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc150)
              %30 = cir.ptr_stride(%29 : !cir.ptr<!s8i>, %28 : !u64i), !cir.ptr<!s8i> loc(#loc150)
              %31 = cir.load %30 : !cir.ptr<!s8i>, !s8i loc(#loc150)
              %32 = cir.load %12 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc151)
              %33 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc152)
              %34 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %33 : !u64i), !cir.ptr<!s8i> loc(#loc153)
              cir.store %31, %34 : !s8i, !cir.ptr<!s8i> loc(#loc224)
            } loc(#loc223)
            cir.yield loc(#loc141)
          } step {
            %28 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc155)
            %29 = cir.unary(inc, %28) : !u64i, !u64i loc(#loc156)
            cir.store %29, %16 : !u64i, !cir.ptr<!u64i> loc(#loc225)
            cir.yield loc(#loc219)
          } loc(#loc219)
        } loc(#loc219)
        %22 = cir.load %12 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc157)
        cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc158)
        %23 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc159)
        %24 = cir.load %12 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc160)
        %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc160)
        cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc159)
      } loc(#loc215)
    } loc(#loc212)
    cir.return loc(#loc104)
  } loc(#loc202)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":70:13)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":70:33)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":39:13)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":39:33)
#loc5 = loc("/usr/include/stdlib.h":672:1)
#loc6 = loc("/usr/include/stdlib.h":672:45)
#loc7 = loc("/usr/include/stdlib.h":756:1)
#loc8 = loc("/usr/include/stdlib.h":756:70)
#loc9 = loc("/usr/include/string.h":407:1)
#loc10 = loc("/usr/include/string.h":408:33)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc13 = loc("/usr/include/stdlib.h":687:1)
#loc14 = loc("/usr/include/stdlib.h":687:32)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":28:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":52:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":30:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":30:12)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":31:12)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":31:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":33:20)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":33:27)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":33:30)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":33:41)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":33:42)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":33:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":34:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":34:33)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":34:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":34:17)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":34:23)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":34:24)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":34:30)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":34:29)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":35:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":51:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":36:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":36:27)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":37:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":37:23)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":38:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":50:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":40:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":40:20)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":40:23)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":41:25)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":41:32)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":41:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":41:38)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":44:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":47:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":44:22)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":44:18)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":44:25)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":44:29)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":44:41)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":44:27)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":45:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":46:34)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":46:27)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":46:17)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":46:22)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":46:23)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":46:35)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":44:45)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":44:44)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":48:23)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":48:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":49:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":49:18)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":85:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":88:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":87:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":87:13)
#loc75 = loc("/usr/include/stdlib.h":575:1)
#loc76 = loc("/usr/include/stdlib.h":575:41)
#loc77 = loc("/usr/include/time.h":76:1)
#loc78 = loc("/usr/include/time.h":76:38)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":104:15)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":106:15)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":109:15)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":111:15)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":99:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":114:1)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":100:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":102:27)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":102:22)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":102:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":104:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":105:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":105:67)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":106:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":109:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":110:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":110:66)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":111:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":113:12)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":113:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":59:1)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":83:1)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":61:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":61:12)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":62:12)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":62:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":64:20)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":64:28)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":64:31)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":64:34)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":64:45)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":64:27)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":64:46)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":64:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":65:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":65:33)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":65:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":65:17)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":65:23)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":65:24)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":65:30)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":65:29)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":66:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":82:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":67:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":67:27)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":68:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":68:23)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":69:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":81:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":71:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":71:20)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":71:23)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":72:25)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":72:32)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":72:13)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":72:38)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":75:13)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":78:13)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":75:22)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":75:18)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":75:25)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":75:29)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":75:41)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":75:27)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":76:13)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":77:34)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":77:27)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":77:17)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":77:22)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":77:23)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":77:35)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":75:45)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":75:44)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":79:23)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":79:13)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":80:13)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c":80:18)
#loc161 = loc(fused[#loc1, #loc2])
#loc162 = loc(fused[#loc3, #loc4])
#loc163 = loc(fused[#loc5, #loc6])
#loc164 = loc(fused[#loc7, #loc8])
#loc165 = loc(fused[#loc9, #loc10])
#loc166 = loc(fused[#loc11, #loc12])
#loc167 = loc(fused[#loc13, #loc14])
#loc168 = loc(fused[#loc15, #loc16])
#loc169 = loc(fused[#loc17, #loc18])
#loc170 = loc(fused[#loc20, #loc19])
#loc171 = loc(fused[#loc23, #loc24])
#loc172 = loc(fused[#loc22, #loc24])
#loc173 = loc(fused[#loc21, #loc25])
#loc174 = loc(fused[#loc26, #loc25])
#loc175 = loc(fused[#loc27, #loc28])
#loc176 = loc(fused[#loc29, #loc30])
#loc177 = loc(fused[#loc31, #loc28])
#loc178 = loc(fused[#loc35, #loc36])
#loc179 = loc(fused[#loc37, #loc38])
#loc180 = loc(fused[#loc39, #loc40])
#loc181 = loc(fused[#loc41, #loc42])
#loc182 = loc(fused[#loc43, #loc44])
#loc183 = loc(fused[#loc43, #loc45])
#loc184 = loc(fused[#loc48, #loc49])
#loc185 = loc(fused[#loc50, #loc51])
#loc186 = loc(fused[#loc53, #loc52])
#loc187 = loc(fused[#loc55, #loc56])
#loc188 = loc(fused[#loc54, #loc56])
#loc189 = loc(fused[#loc58, #loc51])
#loc190 = loc(fused[#loc61, #loc64])
#loc191 = loc(fused[#loc66, #loc65])
#loc192 = loc(fused[#loc71, #loc72])
#loc193 = loc(fused[#loc73, #loc74])
#loc194 = loc(fused[#loc75, #loc76])
#loc195 = loc(fused[#loc77, #loc78])
#loc196 = loc(fused[#loc83, #loc84])
#loc199 = loc(fused[#loc94, #loc95])
#loc200 = loc(fused[#loc98, #loc99])
#loc201 = loc(fused[#loc102, #loc101])
#loc202 = loc(fused[#loc103, #loc104])
#loc203 = loc(fused[#loc105, #loc106])
#loc204 = loc(fused[#loc108, #loc107])
#loc205 = loc(fused[#loc112, #loc113])
#loc206 = loc(fused[#loc114, #loc113])
#loc207 = loc(fused[#loc109, #loc115])
#loc208 = loc(fused[#loc116, #loc115])
#loc209 = loc(fused[#loc117, #loc118])
#loc210 = loc(fused[#loc119, #loc120])
#loc211 = loc(fused[#loc121, #loc118])
#loc212 = loc(fused[#loc125, #loc126])
#loc213 = loc(fused[#loc127, #loc128])
#loc214 = loc(fused[#loc129, #loc130])
#loc215 = loc(fused[#loc131, #loc132])
#loc216 = loc(fused[#loc133, #loc134])
#loc217 = loc(fused[#loc133, #loc135])
#loc218 = loc(fused[#loc138, #loc139])
#loc219 = loc(fused[#loc140, #loc141])
#loc220 = loc(fused[#loc143, #loc142])
#loc221 = loc(fused[#loc145, #loc146])
#loc222 = loc(fused[#loc144, #loc146])
#loc223 = loc(fused[#loc148, #loc141])
#loc224 = loc(fused[#loc151, #loc154])
#loc225 = loc(fused[#loc156, #loc155])
