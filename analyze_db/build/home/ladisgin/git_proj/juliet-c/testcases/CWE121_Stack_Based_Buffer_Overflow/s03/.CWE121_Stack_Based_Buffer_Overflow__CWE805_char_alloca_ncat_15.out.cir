!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":127:10)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":127:14)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":127:20)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":127:32)
#loc187 = loc(fused[#loc64, #loc65])
#loc188 = loc(fused[#loc66, #loc67])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s03/CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc168)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc3)
  cir.func private @strncat(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc169)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc171)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc172)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc11)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc11)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc11)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc11)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc173)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc11)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc11)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc172)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc13)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc13)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc13)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc13)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc13)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc13)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc13)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc173)
    cir.scope {
      %17 = cir.const #cir.int<6> : !s32i loc(#loc16)
      cir.switch (%17 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc18)
          cir.store %18, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc175)
          %19 = cir.const #cir.int<0> : !s32i loc(#loc20)
          %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc20)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc21)
          %22 = cir.const #cir.int<0> : !s32i loc(#loc22)
          %23 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc23)
          cir.store %20, %23 : !s8i, !cir.ptr<!s8i> loc(#loc176)
          cir.break loc(#loc24)
        } loc(#loc17)
        cir.case(default, []) {
          %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc3)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc3)
          cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc26)
          cir.break loc(#loc27)
        } loc(#loc25)
        cir.yield loc(#loc14)
      } loc(#loc14)
    } loc(#loc174)
    cir.scope {
      %17 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc178)
      %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc32)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc32)
      %20 = cir.const #cir.int<67> : !s32i loc(#loc33)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc34)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc35)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc34)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc34)
      cir.libc.memset %24 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc179)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc38)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc38)
      %27 = cir.const #cir.int<100> : !s32i loc(#loc39)
      %28 = cir.const #cir.int<1> : !s32i loc(#loc40)
      %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc39)
      %30 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc41)
      %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc41)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc180)
      %32 = cir.get_global @strncat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc42)
      %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc43)
      %34 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc44)
      %35 = cir.const #cir.int<100> : !s32i loc(#loc45)
      %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc45)
      %37 = cir.call @strncat(%33, %34, %36) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc42)
      %38 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc46)
      cir.call @printLine(%38) : (!cir.ptr<!s8i>) -> () loc(#loc47)
    } loc(#loc177)
    cir.return loc(#loc7)
  } loc(#loc170)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc182)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc183)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc52)
    cir.return loc(#loc49)
  } loc(#loc181)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc184)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc185)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc61)
  cir.func @main(%arg0: !s32i loc(fused[#loc64, #loc65]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc66, #loc67])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc187)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc188)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc63)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc68)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc68)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc69)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc70)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc70)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc71)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc58)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc189)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15_good() : () -> () loc(#loc73)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc59)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc60)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc190)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15_bad() : () -> () loc(#loc77)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc61)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc80)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc191)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc191)
    cir.return %17 : !s32i loc(#loc191)
  } loc(#loc186)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc193)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc194)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc87)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc87)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc87)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc87)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc87)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc195)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc87)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc87)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc194)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc89)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc89)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc89)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc89)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc89)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc89)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc89)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc195)
    cir.scope {
      %17 = cir.const #cir.int<5> : !s32i loc(#loc92)
      cir.switch (%17 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc94)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc94)
          cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc95)
          cir.break loc(#loc96)
        } loc(#loc93)
        cir.case(default, []) {
          %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc98)
          cir.store %18, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc197)
          %19 = cir.const #cir.int<0> : !s32i loc(#loc100)
          %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc100)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc101)
          %22 = cir.const #cir.int<0> : !s32i loc(#loc102)
          %23 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc103)
          cir.store %20, %23 : !s8i, !cir.ptr<!s8i> loc(#loc198)
          cir.break loc(#loc104)
        } loc(#loc97)
        cir.yield loc(#loc90)
      } loc(#loc90)
    } loc(#loc196)
    cir.scope {
      %17 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc200)
      %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc109)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc109)
      %20 = cir.const #cir.int<67> : !s32i loc(#loc110)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc111)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc112)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc111)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc111)
      cir.libc.memset %24 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc201)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc115)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc115)
      %27 = cir.const #cir.int<100> : !s32i loc(#loc116)
      %28 = cir.const #cir.int<1> : !s32i loc(#loc117)
      %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc116)
      %30 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc118)
      %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc118)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc202)
      %32 = cir.get_global @strncat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc119)
      %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc120)
      %34 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc121)
      %35 = cir.const #cir.int<100> : !s32i loc(#loc122)
      %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc122)
      %37 = cir.call @strncat(%33, %34, %36) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc119)
      %38 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
      cir.call @printLine(%38) : (!cir.ptr<!s8i>) -> () loc(#loc124)
    } loc(#loc199)
    cir.return loc(#loc83)
  } loc(#loc192)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc204)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc205)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc130)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc130)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc130)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc130)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc130)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc206)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc130)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc130)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc205)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc132)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc132)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc132)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc132)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc132)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc132)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc132)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc206)
    cir.scope {
      %17 = cir.const #cir.int<6> : !s32i loc(#loc135)
      cir.switch (%17 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc137)
          cir.store %18, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc208)
          %19 = cir.const #cir.int<0> : !s32i loc(#loc139)
          %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc139)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc140)
          %22 = cir.const #cir.int<0> : !s32i loc(#loc141)
          %23 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc142)
          cir.store %20, %23 : !s8i, !cir.ptr<!s8i> loc(#loc209)
          cir.break loc(#loc143)
        } loc(#loc136)
        cir.case(default, []) {
          %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc145)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc145)
          cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc146)
          cir.break loc(#loc147)
        } loc(#loc144)
        cir.yield loc(#loc133)
      } loc(#loc133)
    } loc(#loc207)
    cir.scope {
      %17 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc211)
      %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc152)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc152)
      %20 = cir.const #cir.int<67> : !s32i loc(#loc153)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc154)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc155)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc154)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc154)
      cir.libc.memset %24 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc212)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc158)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc158)
      %27 = cir.const #cir.int<100> : !s32i loc(#loc159)
      %28 = cir.const #cir.int<1> : !s32i loc(#loc160)
      %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc159)
      %30 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc161)
      %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc161)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc213)
      %32 = cir.get_global @strncat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc162)
      %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc163)
      %34 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc164)
      %35 = cir.const #cir.int<100> : !s32i loc(#loc165)
      %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc165)
      %37 = cir.call @strncat(%33, %34, %36) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc162)
      %38 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc166)
      cir.call @printLine(%38) : (!cir.ptr<!s8i>) -> () loc(#loc167)
    } loc(#loc210)
    cir.return loc(#loc126)
  } loc(#loc203)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s03/CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":38:19)
#loc4 = loc("/usr/include/string.h":152:1)
#loc5 = loc("/usr/include/string.h":153:29)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":23:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":49:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":25:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":25:12)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":26:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":26:36)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":27:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":27:37)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":28:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":40:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":28:12)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":30:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":33:16)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":33:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":34:19)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":34:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":34:14)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":34:15)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":35:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":36:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":38:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":39:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":41:5)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":48:5)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":42:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":42:24)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":43:16)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":43:24)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":43:29)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":43:33)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":43:9)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":43:34)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":44:25)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":44:16)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":44:20)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":44:9)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":46:9)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":46:17)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":46:23)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":46:31)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":47:19)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":47:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":111:1)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":115:1)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":113:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":113:14)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":114:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":114:14)
#loc54 = loc("/usr/include/stdlib.h":575:1)
#loc55 = loc("/usr/include/stdlib.h":575:41)
#loc56 = loc("/usr/include/time.h":76:1)
#loc57 = loc("/usr/include/time.h":76:38)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":132:15)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":134:15)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":137:15)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":139:15)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":127:1)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":142:1)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":128:1)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":130:27)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":130:22)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":130:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":132:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":133:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":133:73)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":134:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":137:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":138:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":138:72)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":139:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":141:12)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":141:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":56:1)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":81:1)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":58:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":58:12)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":59:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":59:36)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":60:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":60:37)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":61:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":72:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":61:12)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":63:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":65:19)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":65:9)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":66:9)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":67:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":69:16)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":69:9)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":70:19)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":70:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":70:14)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":70:15)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":71:9)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":73:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":80:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":74:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":74:24)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":75:16)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":75:24)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":75:29)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":75:33)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":75:9)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":75:34)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":76:25)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":76:16)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":76:20)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":76:9)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":78:9)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":78:17)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":78:23)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":78:31)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":79:19)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":79:9)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":84:1)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":109:1)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":86:5)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":86:12)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":87:5)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":87:36)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":88:5)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":88:37)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":89:5)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":100:5)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":89:12)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":91:5)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":93:16)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":93:9)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":94:19)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":94:9)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":94:14)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":94:15)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":95:9)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":96:5)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":98:19)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":98:9)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":99:9)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":101:5)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":108:5)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":102:9)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":102:24)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":103:16)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":103:24)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":103:29)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":103:33)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":103:9)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":103:34)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":104:25)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":104:16)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":104:20)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":104:9)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":106:9)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":106:17)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":106:23)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":106:31)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":107:19)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c":107:9)
#loc168 = loc(fused[#loc1, #loc2])
#loc169 = loc(fused[#loc4, #loc5])
#loc170 = loc(fused[#loc6, #loc7])
#loc171 = loc(fused[#loc8, #loc9])
#loc172 = loc(fused[#loc10, #loc11])
#loc173 = loc(fused[#loc12, #loc13])
#loc174 = loc(fused[#loc14, #loc15])
#loc175 = loc(fused[#loc19, #loc18])
#loc176 = loc(fused[#loc21, #loc20])
#loc177 = loc(fused[#loc28, #loc29])
#loc178 = loc(fused[#loc30, #loc31])
#loc179 = loc(fused[#loc36, #loc37])
#loc180 = loc(fused[#loc41, #loc38])
#loc181 = loc(fused[#loc48, #loc49])
#loc182 = loc(fused[#loc50, #loc51])
#loc183 = loc(fused[#loc52, #loc53])
#loc184 = loc(fused[#loc54, #loc55])
#loc185 = loc(fused[#loc56, #loc57])
#loc186 = loc(fused[#loc62, #loc63])
#loc189 = loc(fused[#loc73, #loc74])
#loc190 = loc(fused[#loc77, #loc78])
#loc191 = loc(fused[#loc81, #loc80])
#loc192 = loc(fused[#loc82, #loc83])
#loc193 = loc(fused[#loc84, #loc85])
#loc194 = loc(fused[#loc86, #loc87])
#loc195 = loc(fused[#loc88, #loc89])
#loc196 = loc(fused[#loc90, #loc91])
#loc197 = loc(fused[#loc99, #loc98])
#loc198 = loc(fused[#loc101, #loc100])
#loc199 = loc(fused[#loc105, #loc106])
#loc200 = loc(fused[#loc107, #loc108])
#loc201 = loc(fused[#loc113, #loc114])
#loc202 = loc(fused[#loc118, #loc115])
#loc203 = loc(fused[#loc125, #loc126])
#loc204 = loc(fused[#loc127, #loc128])
#loc205 = loc(fused[#loc129, #loc130])
#loc206 = loc(fused[#loc131, #loc132])
#loc207 = loc(fused[#loc133, #loc134])
#loc208 = loc(fused[#loc138, #loc137])
#loc209 = loc(fused[#loc140, #loc139])
#loc210 = loc(fused[#loc148, #loc149])
#loc211 = loc(fused[#loc150, #loc151])
#loc212 = loc(fused[#loc156, #loc157])
#loc213 = loc(fused[#loc161, #loc158])
