!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc113)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc114)
  cir.func private @printIntLine(!s32i) loc(#loc115)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc116)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc118)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc119)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc15)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc16)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc16)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc120)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc121)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc15)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc122)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc123)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc23)
      %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc24)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc24)
      %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc125)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc26)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc28)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc26)
      } loc(#loc126)
    } loc(#loc124)
    cir.scope {
      %9 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc128)
      %10 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc128)
      cir.store %10, %9 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc128)
      cir.scope {
        %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc130)
        cir.scope {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc39)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc39)
          cir.store %20, %11 : !u64i, !cir.ptr<!u64i> loc(#loc132)
          cir.for : cond {
            %21 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc41)
            %22 = cir.const #cir.int<100> : !s32i loc(#loc42)
            %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc42)
            %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc133)
            cir.condition(%24) loc(#loc43)
          } body {
            cir.scope {
              %21 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc45)
              %22 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc46)
              %23 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %21 : !u64i), !cir.ptr<!s32i> loc(#loc46)
              %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc46)
              %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc47)
              %26 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc48)
              %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !u64i), !cir.ptr<!s32i> loc(#loc49)
              cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc135)
            } loc(#loc134)
            cir.yield loc(#loc38)
          } step {
            %21 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc51)
            %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc52)
            cir.store %22, %11 : !u64i, !cir.ptr<!u64i> loc(#loc136)
            cir.yield loc(#loc131)
          } loc(#loc131)
        } loc(#loc131)
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc53)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc54)
        %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc55)
        %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc53)
        cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc56)
        %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc57)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc58)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc58)
        cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc57)
      } loc(#loc129)
    } loc(#loc127)
    cir.return loc(#loc10)
  } loc(#loc117)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc138)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc61)
    cir.return loc(#loc60)
  } loc(#loc137)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc140)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc67)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc141)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc69)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc70)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc70)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc142)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc143)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc69)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc144)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc145)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc77)
      %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc78)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc78)
      %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc147)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc80)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc81)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc82)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc80)
      } loc(#loc148)
    } loc(#loc146)
    cir.scope {
      %9 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc150)
      %10 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc150)
      cir.store %10, %9 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc150)
      cir.scope {
        %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc152)
        cir.scope {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc93)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc93)
          cir.store %20, %11 : !u64i, !cir.ptr<!u64i> loc(#loc154)
          cir.for : cond {
            %21 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc95)
            %22 = cir.const #cir.int<100> : !s32i loc(#loc96)
            %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc96)
            %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc155)
            cir.condition(%24) loc(#loc97)
          } body {
            cir.scope {
              %21 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc99)
              %22 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc100)
              %23 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %21 : !u64i), !cir.ptr<!s32i> loc(#loc100)
              %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc100)
              %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc101)
              %26 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc102)
              %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !u64i), !cir.ptr<!s32i> loc(#loc103)
              cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc157)
            } loc(#loc156)
            cir.yield loc(#loc92)
          } step {
            %21 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc105)
            %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc106)
            cir.store %22, %11 : !u64i, !cir.ptr<!u64i> loc(#loc158)
            cir.yield loc(#loc153)
          } loc(#loc153)
        } loc(#loc153)
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc107)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc108)
        %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc109)
        %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc107)
        cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc110)
        %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc111)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc112)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc112)
        cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc111)
      } loc(#loc151)
    } loc(#loc149)
    cir.return loc(#loc64)
  } loc(#loc139)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":41:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":23:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":23:11)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":24:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":24:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":26:19)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":26:26)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":26:29)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":26:39)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":26:40)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":26:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":27:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":27:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":27:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":27:17)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":27:23)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":27:24)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":27:30)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":27:29)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":28:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":40:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":29:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":29:29)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":30:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":39:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":31:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":31:20)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":33:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":36:13)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":33:22)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":33:18)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":33:25)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":33:29)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":33:27)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":34:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":35:34)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":35:27)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":35:17)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":35:22)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":35:23)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":35:35)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":33:35)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":33:34)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":37:26)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":37:31)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":37:32)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":37:13)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":38:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":38:18)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":70:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":73:1)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":72:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":72:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":48:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":68:1)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":50:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":50:11)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":51:12)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":51:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":53:19)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":53:26)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":53:30)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":53:40)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":53:41)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":53:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":54:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":54:33)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":54:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":54:17)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":54:23)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":54:24)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":54:30)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":54:29)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":55:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":67:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":56:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":56:29)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":57:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":66:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":58:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":58:20)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":60:13)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":63:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":60:22)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":60:18)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":60:25)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":60:29)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":60:27)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":61:13)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":62:34)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":62:27)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":62:17)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":62:22)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":62:23)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":62:35)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":60:35)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":60:34)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":64:26)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":64:31)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":64:32)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":64:13)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":65:13)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":65:18)
#loc113 = loc(fused[#loc1, #loc2])
#loc114 = loc(fused[#loc3, #loc4])
#loc115 = loc(fused[#loc5, #loc6])
#loc116 = loc(fused[#loc7, #loc8])
#loc117 = loc(fused[#loc9, #loc10])
#loc118 = loc(fused[#loc11, #loc12])
#loc119 = loc(fused[#loc14, #loc13])
#loc120 = loc(fused[#loc17, #loc18])
#loc121 = loc(fused[#loc16, #loc18])
#loc122 = loc(fused[#loc15, #loc19])
#loc123 = loc(fused[#loc20, #loc19])
#loc124 = loc(fused[#loc21, #loc22])
#loc125 = loc(fused[#loc23, #loc24])
#loc126 = loc(fused[#loc25, #loc22])
#loc127 = loc(fused[#loc29, #loc30])
#loc128 = loc(fused[#loc31, #loc32])
#loc129 = loc(fused[#loc33, #loc34])
#loc130 = loc(fused[#loc35, #loc36])
#loc131 = loc(fused[#loc37, #loc38])
#loc132 = loc(fused[#loc40, #loc39])
#loc133 = loc(fused[#loc41, #loc42])
#loc134 = loc(fused[#loc44, #loc38])
#loc135 = loc(fused[#loc47, #loc50])
#loc136 = loc(fused[#loc52, #loc51])
#loc137 = loc(fused[#loc59, #loc60])
#loc138 = loc(fused[#loc61, #loc62])
#loc139 = loc(fused[#loc63, #loc64])
#loc140 = loc(fused[#loc65, #loc66])
#loc141 = loc(fused[#loc68, #loc67])
#loc142 = loc(fused[#loc71, #loc72])
#loc143 = loc(fused[#loc70, #loc72])
#loc144 = loc(fused[#loc69, #loc73])
#loc145 = loc(fused[#loc74, #loc73])
#loc146 = loc(fused[#loc75, #loc76])
#loc147 = loc(fused[#loc77, #loc78])
#loc148 = loc(fused[#loc79, #loc76])
#loc149 = loc(fused[#loc83, #loc84])
#loc150 = loc(fused[#loc85, #loc86])
#loc151 = loc(fused[#loc87, #loc88])
#loc152 = loc(fused[#loc89, #loc90])
#loc153 = loc(fused[#loc91, #loc92])
#loc154 = loc(fused[#loc94, #loc93])
#loc155 = loc(fused[#loc95, #loc96])
#loc156 = loc(fused[#loc98, #loc92])
#loc157 = loc(fused[#loc101, #loc104])
#loc158 = loc(fused[#loc106, #loc105])
