!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc14 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":24:21)
#loc15 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":24:25)
#loc57 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":73:25)
#loc58 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":73:29)
#loc102 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":56:25)
#loc103 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":56:29)
#loc125 = loc(fused[#loc14, #loc15])
#loc140 = loc(fused[#loc57, #loc58])
#loc155 = loc(fused[#loc102, #loc103])
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fgets_divide_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc119)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc120)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc121)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc122)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc123)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc14, #loc15])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc125)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc16)
    %1 = cir.const #cir.int<100> : !s32i loc(#loc17)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc18)
    %3 = cir.binop(div, %1, %2) : !s32i loc(#loc126)
    cir.call @printIntLine(%3) : (!s32i) -> () loc(#loc19)
    cir.return loc(#loc13)
  } loc(#loc124)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fgets_divide_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc128)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc25)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc129)
    cir.scope {
      %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc131)
      %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc131)
      cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc131)
      cir.scope {
        %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc33)
        %7 = cir.const #cir.int<3> : !s32i loc(#loc34)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc34)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc34)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc34)
        %11 = cir.const #cir.int<2> : !s32i loc(#loc34)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc34)
        %13 = cir.binop(add, %10, %12) : !u64i loc(#loc34)
        %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc34)
        %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc120)
        %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc35)
        %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc36)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc37)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc37)
        %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc133)
        cir.if %20 {
          %21 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc41)
          %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc42)
          cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc135)
        } else {
          %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc45)
        } loc(#loc134)
      } loc(#loc132)
    } loc(#loc130)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc46)
    cir.call @badSink(%3) : (!s32i) -> () loc(#loc47)
    cir.return loc(#loc21)
  } loc(#loc127)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fgets_divide_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc137)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc50)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc138)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc52)
    cir.return loc(#loc49)
  } loc(#loc136)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc54)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc57, #loc58])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc140)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc59)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc62)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc63)
      %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc142)
      cir.if %3 {
        %4 = cir.const #cir.int<100> : !s32i loc(#loc67)
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc68)
        %6 = cir.binop(div, %4, %5) : !s32i loc(#loc144)
        cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc69)
      } else {
        %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc54)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc54)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc70)
      } loc(#loc143)
    } loc(#loc141)
    cir.return loc(#loc56)
  } loc(#loc139)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc146)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc76)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    cir.scope {
      %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc149)
      %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc149)
      cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc149)
      cir.scope {
        %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc84)
        %7 = cir.const #cir.int<3> : !s32i loc(#loc85)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc85)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc85)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc85)
        %11 = cir.const #cir.int<2> : !s32i loc(#loc85)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc85)
        %13 = cir.binop(add, %10, %12) : !u64i loc(#loc85)
        %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc85)
        %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc120)
        %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc86)
        %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc87)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc88)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc88)
        %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc151)
        cir.if %20 {
          %21 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc92)
          %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc93)
          cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc153)
        } else {
          %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc96)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc96)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc97)
        } loc(#loc152)
      } loc(#loc150)
    } loc(#loc148)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc98)
    cir.call @goodB2GSink(%3) : (!s32i) -> () loc(#loc99)
    cir.return loc(#loc72)
  } loc(#loc145)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc102, #loc103])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc155)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc104)
    %1 = cir.const #cir.int<100> : !s32i loc(#loc105)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc106)
    %3 = cir.binop(div, %1, %2) : !s32i loc(#loc156)
    cir.call @printIntLine(%3) : (!s32i) -> () loc(#loc107)
    cir.return loc(#loc101)
  } loc(#loc154)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc158)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc112)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc113)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc159)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc115)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc160)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
    cir.call @goodG2BSink(%4) : (!s32i) -> () loc(#loc118)
    cir.return loc(#loc109)
  } loc(#loc157)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fgets_divide_41.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":45:23)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":24:1)
#loc13 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":28:1)
#loc16 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":25:1)
#loc17 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":27:18)
#loc18 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":27:24)
#loc19 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":27:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":30:1)
#loc21 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":49:1)
#loc22 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":32:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":32:9)
#loc24 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":34:13)
#loc25 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":34:12)
#loc26 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":34:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":35:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":47:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":36:9)
#loc30 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":36:45)
#loc31 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":38:9)
#loc32 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":46:9)
#loc33 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":38:19)
#loc34 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":38:32)
#loc35 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":38:49)
#loc36 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":38:13)
#loc37 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":38:59)
#loc38 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":39:9)
#loc39 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":42:9)
#loc40 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":44:9)
#loc41 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":41:25)
#loc42 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":41:20)
#loc43 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":41:13)
#loc44 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":41:36)
#loc45 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":45:13)
#loc46 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":48:13)
#loc47 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":48:5)
#loc48 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":107:1)
#loc49 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":111:1)
#loc50 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":109:5)
#loc51 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":109:13)
#loc52 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":110:5)
#loc53 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":110:13)
#loc54 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":82:19)
#loc55 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":73:1)
#loc56 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":84:1)
#loc59 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":74:1)
#loc60 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":76:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":83:5)
#loc62 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":76:9)
#loc63 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":76:17)
#loc64 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":77:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":79:5)
#loc66 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":81:5)
#loc67 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":78:22)
#loc68 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":78:28)
#loc69 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":78:9)
#loc70 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":82:9)
#loc71 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":86:1)
#loc72 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":105:1)
#loc73 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":88:5)
#loc74 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":88:9)
#loc75 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":90:13)
#loc76 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":90:12)
#loc77 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":90:5)
#loc78 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":91:5)
#loc79 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":103:5)
#loc80 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":92:9)
#loc81 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":92:45)
#loc82 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":94:9)
#loc83 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":102:9)
#loc84 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":94:19)
#loc85 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":94:32)
#loc86 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":94:49)
#loc87 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":94:13)
#loc88 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":94:59)
#loc89 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":95:9)
#loc90 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":98:9)
#loc91 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":100:9)
#loc92 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":97:25)
#loc93 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":97:20)
#loc94 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":97:13)
#loc95 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":97:36)
#loc96 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":101:23)
#loc97 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":101:13)
#loc98 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":104:17)
#loc99 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":104:5)
#loc100 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":56:1)
#loc101 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":60:1)
#loc104 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":57:1)
#loc105 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":59:18)
#loc106 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":59:24)
#loc107 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":59:5)
#loc108 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":62:1)
#loc109 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":70:1)
#loc110 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":64:5)
#loc111 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":64:9)
#loc112 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":66:13)
#loc113 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":66:12)
#loc114 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":66:5)
#loc115 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":68:12)
#loc116 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":68:5)
#loc117 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":69:17)
#loc118 = loc("CWE369_Divide_by_Zero__int_fgets_divide_41.c":69:5)
#loc119 = loc(fused[#loc1, #loc2])
#loc120 = loc(fused[#loc3, #loc4])
#loc121 = loc(fused[#loc5, #loc6])
#loc122 = loc(fused[#loc7, #loc8])
#loc123 = loc(fused[#loc10, #loc11])
#loc124 = loc(fused[#loc12, #loc13])
#loc126 = loc(fused[#loc17, #loc18])
#loc127 = loc(fused[#loc20, #loc21])
#loc128 = loc(fused[#loc22, #loc23])
#loc129 = loc(fused[#loc26, #loc24])
#loc130 = loc(fused[#loc27, #loc28])
#loc131 = loc(fused[#loc29, #loc30])
#loc132 = loc(fused[#loc31, #loc32])
#loc133 = loc(fused[#loc36, #loc37])
#loc134 = loc(fused[#loc38, #loc39, #loc40, #loc32])
#loc135 = loc(fused[#loc43, #loc44])
#loc136 = loc(fused[#loc48, #loc49])
#loc137 = loc(fused[#loc50, #loc51])
#loc138 = loc(fused[#loc52, #loc53])
#loc139 = loc(fused[#loc55, #loc56])
#loc141 = loc(fused[#loc60, #loc61])
#loc142 = loc(fused[#loc62, #loc63])
#loc143 = loc(fused[#loc64, #loc65, #loc66, #loc61])
#loc144 = loc(fused[#loc67, #loc68])
#loc145 = loc(fused[#loc71, #loc72])
#loc146 = loc(fused[#loc73, #loc74])
#loc147 = loc(fused[#loc77, #loc75])
#loc148 = loc(fused[#loc78, #loc79])
#loc149 = loc(fused[#loc80, #loc81])
#loc150 = loc(fused[#loc82, #loc83])
#loc151 = loc(fused[#loc87, #loc88])
#loc152 = loc(fused[#loc89, #loc90, #loc91, #loc83])
#loc153 = loc(fused[#loc94, #loc95])
#loc154 = loc(fused[#loc100, #loc101])
#loc156 = loc(fused[#loc105, #loc106])
#loc157 = loc(fused[#loc108, #loc109])
#loc158 = loc(fused[#loc110, #loc111])
#loc159 = loc(fused[#loc114, #loc112])
#loc160 = loc(fused[#loc116, #loc115])
