!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc153)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc154)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc155)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc156)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc157)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc159)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc160)
    %2 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc161)
    %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc162)
    %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc163)
    %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc164)
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc24)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc25)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc25)
    %9 = cir.const #cir.int<1> : !u64i loc(#loc165)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc166)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc167)
    cir.store %12, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc168)
    cir.br ^bb1 loc(#loc169)
  ^bb1:  // pred: ^bb0
    %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc33)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc170)
    cir.brcond %16 ^bb2, ^bb3 loc(#loc171)
  ^bb2:  // pred: ^bb1
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc35)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc37)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc35)
    cir.br ^bb3 loc(#loc31)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc31)
  ^bb4:  // pred: ^bb3
    %20 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc38)
    %22 = cir.const #cir.int<65> : !s32i loc(#loc39)
    %23 = cir.const #cir.int<100> : !s32i loc(#loc40)
    %24 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc40)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc40)
    cir.libc.memset %26 bytes from %21 set to %22 : !cir.ptr<!void>, !s32i, !u64i loc(#loc172)
    %27 = cir.const #cir.int<0> : !s32i loc(#loc44)
    %28 = cir.cast(integral, %27 : !s32i), !s8i loc(#loc44)
    %29 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc45)
    %30 = cir.const #cir.int<100> : !s32i loc(#loc46)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %32 = cir.binop(sub, %30, %31) nsw : !s32i loc(#loc46)
    %33 = cir.ptr_stride(%29 : !cir.ptr<!s8i>, %32 : !s32i), !cir.ptr<!s8i> loc(#loc48)
    cir.store %28, %33 : !s8i, !cir.ptr<!s8i> loc(#loc173)
    cir.br ^bb5 loc(#loc174)
  ^bb5:  // pred: ^bb4
    %34 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc14)
    cir.store %34, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc159)
    %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc16)
    cir.store %35, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc160)
    cir.br ^bb6 loc(#loc175)
  ^bb6:  // pred: ^bb5
    %36 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc161)
    cir.store %36, %2 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc161)
    %37 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc53)
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc54)
    %39 = cir.call @strlen(%38) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc53)
    cir.store %39, %4 : !u64i, !cir.ptr<!u64i> loc(#loc176)
    cir.br ^bb7 loc(#loc177)
  ^bb7:  // pred: ^bb6
    %40 = cir.const #cir.int<0> : !s32i loc(#loc59)
    %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc59)
    cir.store %41, %3 : !u64i, !cir.ptr<!u64i> loc(#loc178)
    cir.br ^bb8 loc(#loc177)
  ^bb8:  // 2 preds: ^bb7, ^bb12
    %42 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc61)
    %43 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc62)
    %44 = cir.cmp(lt, %42, %43) : !u64i, !cir.bool loc(#loc179)
    cir.brcond %44 ^bb9, ^bb13 loc(#loc63)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc180)
  ^bb10:  // pred: ^bb9
    %45 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc65)
    %46 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc66)
    %47 = cir.ptr_stride(%45 : !cir.ptr<!s8i>, %46 : !u64i), !cir.ptr<!s8i> loc(#loc67)
    %48 = cir.load %47 : !cir.ptr<!s8i>, !s8i loc(#loc65)
    %49 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc68)
    %50 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc69)
    %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !u64i), !cir.ptr<!s8i> loc(#loc69)
    cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc181)
    cir.br ^bb11 loc(#loc58)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc58)
  ^bb12:  // pred: ^bb11
    %52 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc70)
    %53 = cir.unary(inc, %52) : !u64i, !u64i loc(#loc71)
    cir.store %53, %3 : !u64i, !cir.ptr<!u64i> loc(#loc182)
    cir.br ^bb8 loc(#loc177)
  ^bb13:  // pred: ^bb8
    cir.br ^bb14 loc(#loc58)
  ^bb14:  // pred: ^bb13
    %54 = cir.const #cir.int<0> : !s32i loc(#loc72)
    %55 = cir.cast(integral, %54 : !s32i), !s8i loc(#loc72)
    %56 = cir.const #cir.int<50> : !s32i loc(#loc73)
    %57 = cir.const #cir.int<1> : !s32i loc(#loc74)
    %58 = cir.binop(sub, %56, %57) nsw : !s32i loc(#loc73)
    %59 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc75)
    %60 = cir.ptr_stride(%59 : !cir.ptr<!s8i>, %58 : !s32i), !cir.ptr<!s8i> loc(#loc75)
    cir.store %55, %60 : !s8i, !cir.ptr<!s8i> loc(#loc183)
    %61 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%61) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %62 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
    %63 = cir.cast(bitcast, %62 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc78)
    cir.call @free(%63) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc79)
    cir.br ^bb15 loc(#loc52)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc50)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc12)
  } loc(#loc158)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc185)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc82)
    cir.return loc(#loc81)
  } loc(#loc184)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc187)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc188)
    %2 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc189)
    %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc190)
    %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc191)
    %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc192)
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc97)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc98)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc98)
    %9 = cir.const #cir.int<1> : !u64i loc(#loc193)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc194)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc97)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc195)
    cir.store %12, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc196)
    cir.br ^bb1 loc(#loc197)
  ^bb1:  // pred: ^bb0
    %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc105)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc106)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc106)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc198)
    cir.brcond %16 ^bb2, ^bb3 loc(#loc199)
  ^bb2:  // pred: ^bb1
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc108)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc109)
    %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc110)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc108)
    cir.br ^bb3 loc(#loc104)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc104)
  ^bb4:  // pred: ^bb3
    %20 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc111)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc111)
    %22 = cir.const #cir.int<65> : !s32i loc(#loc112)
    %23 = cir.const #cir.int<50> : !s32i loc(#loc113)
    %24 = cir.const #cir.int<1> : !s32i loc(#loc114)
    %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc113)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc113)
    cir.libc.memset %26 bytes from %21 set to %22 : !cir.ptr<!void>, !s32i, !u64i loc(#loc200)
    %27 = cir.const #cir.int<0> : !s32i loc(#loc117)
    %28 = cir.cast(integral, %27 : !s32i), !s8i loc(#loc117)
    %29 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc118)
    %30 = cir.const #cir.int<50> : !s32i loc(#loc119)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc120)
    %32 = cir.binop(sub, %30, %31) nsw : !s32i loc(#loc119)
    %33 = cir.ptr_stride(%29 : !cir.ptr<!s8i>, %32 : !s32i), !cir.ptr<!s8i> loc(#loc121)
    cir.store %28, %33 : !s8i, !cir.ptr<!s8i> loc(#loc201)
    cir.br ^bb5 loc(#loc202)
  ^bb5:  // pred: ^bb4
    %34 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc87)
    cir.store %34, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc187)
    %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc89)
    cir.store %35, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc188)
    cir.br ^bb6 loc(#loc203)
  ^bb6:  // pred: ^bb5
    %36 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc189)
    cir.store %36, %2 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc189)
    %37 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc126)
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc127)
    %39 = cir.call @strlen(%38) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc126)
    cir.store %39, %4 : !u64i, !cir.ptr<!u64i> loc(#loc204)
    cir.br ^bb7 loc(#loc205)
  ^bb7:  // pred: ^bb6
    %40 = cir.const #cir.int<0> : !s32i loc(#loc132)
    %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc132)
    cir.store %41, %3 : !u64i, !cir.ptr<!u64i> loc(#loc206)
    cir.br ^bb8 loc(#loc205)
  ^bb8:  // 2 preds: ^bb7, ^bb12
    %42 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc134)
    %43 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc135)
    %44 = cir.cmp(lt, %42, %43) : !u64i, !cir.bool loc(#loc207)
    cir.brcond %44 ^bb9, ^bb13 loc(#loc136)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc208)
  ^bb10:  // pred: ^bb9
    %45 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc138)
    %46 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc139)
    %47 = cir.ptr_stride(%45 : !cir.ptr<!s8i>, %46 : !u64i), !cir.ptr<!s8i> loc(#loc140)
    %48 = cir.load %47 : !cir.ptr<!s8i>, !s8i loc(#loc138)
    %49 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc141)
    %50 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc142)
    %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !u64i), !cir.ptr<!s8i> loc(#loc142)
    cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc209)
    cir.br ^bb11 loc(#loc131)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc131)
  ^bb12:  // pred: ^bb11
    %52 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc143)
    %53 = cir.unary(inc, %52) : !u64i, !u64i loc(#loc144)
    cir.store %53, %3 : !u64i, !cir.ptr<!u64i> loc(#loc210)
    cir.br ^bb8 loc(#loc205)
  ^bb13:  // pred: ^bb8
    cir.br ^bb14 loc(#loc131)
  ^bb14:  // pred: ^bb13
    %54 = cir.const #cir.int<0> : !s32i loc(#loc145)
    %55 = cir.cast(integral, %54 : !s32i), !s8i loc(#loc145)
    %56 = cir.const #cir.int<50> : !s32i loc(#loc146)
    %57 = cir.const #cir.int<1> : !s32i loc(#loc147)
    %58 = cir.binop(sub, %56, %57) nsw : !s32i loc(#loc146)
    %59 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc148)
    %60 = cir.ptr_stride(%59 : !cir.ptr<!s8i>, %58 : !s32i), !cir.ptr<!s8i> loc(#loc148)
    cir.store %55, %60 : !s8i, !cir.ptr<!s8i> loc(#loc211)
    %61 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc149)
    cir.call @printLine(%61) : (!cir.ptr<!s8i>) -> () loc(#loc150)
    %62 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc151)
    %63 = cir.cast(bitcast, %62 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc151)
    cir.call @free(%63) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc152)
    cir.br ^bb15 loc(#loc125)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc123)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc85)
  } loc(#loc186)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":23:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":48:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":32:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":32:27)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":33:9)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":33:23)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":35:13)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":35:29)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":36:13)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":36:20)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":36:23)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":25:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":25:12)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":26:20)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":26:27)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":26:31)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":26:42)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":26:43)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":26:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":27:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":27:33)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":27:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":27:17)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":27:23)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":27:24)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":27:30)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":27:29)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":29:12)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":29:18)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":29:23)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":29:27)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":29:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":29:28)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":30:19)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":30:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":30:10)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":30:14)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":30:15)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":31:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":47:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":34:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":46:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":37:23)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":37:30)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":37:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":37:34)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":39:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":42:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":39:22)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":39:18)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":39:25)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":39:29)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":39:27)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":40:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":41:27)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":41:32)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":41:33)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":41:22)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":41:17)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":39:39)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":39:38)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":43:26)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":43:18)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":43:21)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":43:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":44:23)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":44:13)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":45:18)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":45:13)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":82:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":85:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":84:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":84:13)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":55:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":80:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":64:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":64:27)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":65:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":65:23)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":67:13)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":67:29)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":68:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":68:20)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":68:23)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":57:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":57:12)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":58:20)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":58:27)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":58:31)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":58:42)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":58:43)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":58:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":59:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":59:33)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":59:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":59:17)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":59:23)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":59:24)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":59:30)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":59:29)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":61:12)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":61:18)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":61:23)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":61:26)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":61:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":61:27)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":62:18)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":62:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":62:10)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":62:13)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":62:14)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":63:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":79:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":66:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":78:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":69:23)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":69:30)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":69:13)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":69:34)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":71:13)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":74:13)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":71:22)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":71:18)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":71:25)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":71:29)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":71:27)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":72:13)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":73:27)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":73:32)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":73:33)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":73:22)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":73:17)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":71:39)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":71:38)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":75:26)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":75:18)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":75:21)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":75:13)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":76:23)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":76:13)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":77:18)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c":77:13)
#loc153 = loc(fused[#loc1, #loc2])
#loc154 = loc(fused[#loc3, #loc4])
#loc155 = loc(fused[#loc5, #loc6])
#loc156 = loc(fused[#loc7, #loc8])
#loc157 = loc(fused[#loc9, #loc10])
#loc158 = loc(fused[#loc11, #loc12])
#loc159 = loc(fused[#loc13, #loc14])
#loc160 = loc(fused[#loc15, #loc16])
#loc161 = loc(fused[#loc17, #loc18])
#loc162 = loc(fused[#loc19, #loc20])
#loc163 = loc(fused[#loc19, #loc21])
#loc164 = loc(fused[#loc22, #loc23])
#loc165 = loc(fused[#loc26, #loc27])
#loc166 = loc(fused[#loc25, #loc27])
#loc167 = loc(fused[#loc24, #loc28])
#loc168 = loc(fused[#loc29, #loc28])
#loc169 = loc(fused[#loc30, #loc31])
#loc170 = loc(fused[#loc32, #loc33])
#loc171 = loc(fused[#loc34, #loc31])
#loc172 = loc(fused[#loc42, #loc43])
#loc173 = loc(fused[#loc45, #loc44])
#loc174 = loc(fused[#loc49, #loc50])
#loc175 = loc(fused[#loc51, #loc52])
#loc176 = loc(fused[#loc55, #loc56])
#loc177 = loc(fused[#loc57, #loc58])
#loc178 = loc(fused[#loc60, #loc59])
#loc179 = loc(fused[#loc61, #loc62])
#loc180 = loc(fused[#loc64, #loc58])
#loc181 = loc(fused[#loc69, #loc67])
#loc182 = loc(fused[#loc71, #loc70])
#loc183 = loc(fused[#loc75, #loc72])
#loc184 = loc(fused[#loc80, #loc81])
#loc185 = loc(fused[#loc82, #loc83])
#loc186 = loc(fused[#loc84, #loc85])
#loc187 = loc(fused[#loc86, #loc87])
#loc188 = loc(fused[#loc88, #loc89])
#loc189 = loc(fused[#loc90, #loc91])
#loc190 = loc(fused[#loc92, #loc93])
#loc191 = loc(fused[#loc92, #loc94])
#loc192 = loc(fused[#loc95, #loc96])
#loc193 = loc(fused[#loc99, #loc100])
#loc194 = loc(fused[#loc98, #loc100])
#loc195 = loc(fused[#loc97, #loc101])
#loc196 = loc(fused[#loc102, #loc101])
#loc197 = loc(fused[#loc103, #loc104])
#loc198 = loc(fused[#loc105, #loc106])
#loc199 = loc(fused[#loc107, #loc104])
#loc200 = loc(fused[#loc115, #loc116])
#loc201 = loc(fused[#loc118, #loc117])
#loc202 = loc(fused[#loc122, #loc123])
#loc203 = loc(fused[#loc124, #loc125])
#loc204 = loc(fused[#loc128, #loc129])
#loc205 = loc(fused[#loc130, #loc131])
#loc206 = loc(fused[#loc133, #loc132])
#loc207 = loc(fused[#loc134, #loc135])
#loc208 = loc(fused[#loc137, #loc131])
#loc209 = loc(fused[#loc142, #loc140])
#loc210 = loc(fused[#loc144, #loc143])
#loc211 = loc(fused[#loc148, #loc145])
