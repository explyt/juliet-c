!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc86)
  cir.func no_proto @CWE843_Type_Confusion__char_08_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charBuffer", init] {alignment = 1 : i64} loc(#loc88)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc89)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc9)
    cir.store %2, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc90)
    cir.br ^bb1 loc(#loc91)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc92)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc13)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %5 ^bb2, ^bb5 loc(#loc93)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc94)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.int<97> : !s32i loc(#loc6)
    %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc6)
    cir.store %7, %0 : !s8i, !cir.ptr<!s8i> loc(#loc88)
    %8 = cir.cast(bitcast, %0 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc95)
    cir.store %8, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc96)
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc12)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc12)
  ^bb6:  // pred: ^bb5
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc21)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc21)
    %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc22)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc23)
    cir.return loc(#loc4)
  } loc(#loc87)
  cir.func no_proto @CWE843_Type_Confusion__char_08_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc98)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc26)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc99)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    cir.return loc(#loc25)
  } loc(#loc97)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc31)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc32)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
    cir.return %2 : !s32i loc(#loc101)
  } loc(#loc100)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc102)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc36)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intBuffer", init] {alignment = 4 : i64} loc(#loc104)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc105)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc43)
    cir.store %2, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc106)
    cir.br ^bb1 loc(#loc107)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc108)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc47)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc47)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc109)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc36)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    cir.br ^bb6 loc(#loc50)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc110)
  ^bb4:  // pred: ^bb3
    %8 = cir.const #cir.int<8> : !s32i loc(#loc40)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc104)
    %9 = cir.cast(bitcast, %0 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc111)
    cir.store %9, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc112)
    cir.br ^bb5 loc(#loc54)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc46)
  ^bb6:  // 2 preds: ^bb2, ^bb5
    cir.br ^bb7 loc(#loc46)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc58)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc58)
    %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc59)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc60)
    cir.return loc(#loc38)
  } loc(#loc103)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc62)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc63)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc114)
    cir.return %2 : !s32i loc(#loc114)
  } loc(#loc113)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intBuffer", init] {alignment = 4 : i64} loc(#loc116)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc117)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc71)
    cir.store %2, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc118)
    cir.br ^bb1 loc(#loc119)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc120)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc75)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc75)
    cir.brcond %5 ^bb2, ^bb5 loc(#loc121)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc122)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.int<8> : !s32i loc(#loc68)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc116)
    %7 = cir.cast(bitcast, %0 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc123)
    cir.store %7, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc124)
    cir.br ^bb4 loc(#loc79)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc74)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc74)
  ^bb6:  // pred: ^bb5
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc83)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc83)
    %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc84)
    cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc85)
    cir.return loc(#loc66)
  } loc(#loc115)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_08.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE843_Type_Confusion__char_08.c":35:1)
#loc4 = loc("CWE843_Type_Confusion__char_08.c":50:1)
#loc5 = loc("CWE843_Type_Confusion__char_08.c":44:13)
#loc6 = loc("CWE843_Type_Confusion__char_08.c":44:31)
#loc7 = loc("CWE843_Type_Confusion__char_08.c":37:5)
#loc8 = loc("CWE843_Type_Confusion__char_08.c":37:12)
#loc9 = loc("CWE843_Type_Confusion__char_08.c":39:12)
#loc10 = loc("CWE843_Type_Confusion__char_08.c":39:5)
#loc11 = loc("CWE843_Type_Confusion__char_08.c":40:5)
#loc12 = loc("CWE843_Type_Confusion__char_08.c":47:5)
#loc13 = loc("CWE843_Type_Confusion__char_08.c":40:8)
#loc14 = loc("CWE843_Type_Confusion__char_08.c":40:26)
#loc15 = loc("CWE843_Type_Confusion__char_08.c":41:5)
#loc16 = loc("CWE843_Type_Confusion__char_08.c":42:9)
#loc17 = loc("CWE843_Type_Confusion__char_08.c":46:9)
#loc18 = loc("CWE843_Type_Confusion__char_08.c":45:20)
#loc19 = loc("CWE843_Type_Confusion__char_08.c":45:21)
#loc20 = loc("CWE843_Type_Confusion__char_08.c":45:13)
#loc21 = loc("CWE843_Type_Confusion__char_08.c":49:26)
#loc22 = loc("CWE843_Type_Confusion__char_08.c":49:18)
#loc23 = loc("CWE843_Type_Confusion__char_08.c":49:5)
#loc24 = loc("CWE843_Type_Confusion__char_08.c":97:1)
#loc25 = loc("CWE843_Type_Confusion__char_08.c":101:1)
#loc26 = loc("CWE843_Type_Confusion__char_08.c":99:5)
#loc27 = loc("CWE843_Type_Confusion__char_08.c":99:14)
#loc28 = loc("CWE843_Type_Confusion__char_08.c":100:5)
#loc29 = loc("CWE843_Type_Confusion__char_08.c":100:14)
#loc30 = loc("CWE843_Type_Confusion__char_08.c":23:1)
#loc31 = loc("CWE843_Type_Confusion__char_08.c":26:1)
#loc32 = loc("CWE843_Type_Confusion__char_08.c":25:12)
#loc33 = loc("CWE843_Type_Confusion__char_08.c":25:5)
#loc34 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc35 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc36 = loc("CWE843_Type_Confusion__char_08.c":65:19)
#loc37 = loc("CWE843_Type_Confusion__char_08.c":57:1)
#loc38 = loc("CWE843_Type_Confusion__char_08.c":77:1)
#loc39 = loc("CWE843_Type_Confusion__char_08.c":71:13)
#loc40 = loc("CWE843_Type_Confusion__char_08.c":71:29)
#loc41 = loc("CWE843_Type_Confusion__char_08.c":59:5)
#loc42 = loc("CWE843_Type_Confusion__char_08.c":59:12)
#loc43 = loc("CWE843_Type_Confusion__char_08.c":61:12)
#loc44 = loc("CWE843_Type_Confusion__char_08.c":61:5)
#loc45 = loc("CWE843_Type_Confusion__char_08.c":62:5)
#loc46 = loc("CWE843_Type_Confusion__char_08.c":74:5)
#loc47 = loc("CWE843_Type_Confusion__char_08.c":62:8)
#loc48 = loc("CWE843_Type_Confusion__char_08.c":62:27)
#loc49 = loc("CWE843_Type_Confusion__char_08.c":63:5)
#loc50 = loc("CWE843_Type_Confusion__char_08.c":66:5)
#loc51 = loc("CWE843_Type_Confusion__char_08.c":68:5)
#loc52 = loc("CWE843_Type_Confusion__char_08.c":65:9)
#loc53 = loc("CWE843_Type_Confusion__char_08.c":69:9)
#loc54 = loc("CWE843_Type_Confusion__char_08.c":73:9)
#loc55 = loc("CWE843_Type_Confusion__char_08.c":72:20)
#loc56 = loc("CWE843_Type_Confusion__char_08.c":72:21)
#loc57 = loc("CWE843_Type_Confusion__char_08.c":72:13)
#loc58 = loc("CWE843_Type_Confusion__char_08.c":76:26)
#loc59 = loc("CWE843_Type_Confusion__char_08.c":76:18)
#loc60 = loc("CWE843_Type_Confusion__char_08.c":76:5)
#loc61 = loc("CWE843_Type_Confusion__char_08.c":28:1)
#loc62 = loc("CWE843_Type_Confusion__char_08.c":31:1)
#loc63 = loc("CWE843_Type_Confusion__char_08.c":30:12)
#loc64 = loc("CWE843_Type_Confusion__char_08.c":30:5)
#loc65 = loc("CWE843_Type_Confusion__char_08.c":80:1)
#loc66 = loc("CWE843_Type_Confusion__char_08.c":95:1)
#loc67 = loc("CWE843_Type_Confusion__char_08.c":89:13)
#loc68 = loc("CWE843_Type_Confusion__char_08.c":89:29)
#loc69 = loc("CWE843_Type_Confusion__char_08.c":82:5)
#loc70 = loc("CWE843_Type_Confusion__char_08.c":82:12)
#loc71 = loc("CWE843_Type_Confusion__char_08.c":84:12)
#loc72 = loc("CWE843_Type_Confusion__char_08.c":84:5)
#loc73 = loc("CWE843_Type_Confusion__char_08.c":85:5)
#loc74 = loc("CWE843_Type_Confusion__char_08.c":92:5)
#loc75 = loc("CWE843_Type_Confusion__char_08.c":85:8)
#loc76 = loc("CWE843_Type_Confusion__char_08.c":85:26)
#loc77 = loc("CWE843_Type_Confusion__char_08.c":86:5)
#loc78 = loc("CWE843_Type_Confusion__char_08.c":87:9)
#loc79 = loc("CWE843_Type_Confusion__char_08.c":91:9)
#loc80 = loc("CWE843_Type_Confusion__char_08.c":90:20)
#loc81 = loc("CWE843_Type_Confusion__char_08.c":90:21)
#loc82 = loc("CWE843_Type_Confusion__char_08.c":90:13)
#loc83 = loc("CWE843_Type_Confusion__char_08.c":94:26)
#loc84 = loc("CWE843_Type_Confusion__char_08.c":94:18)
#loc85 = loc("CWE843_Type_Confusion__char_08.c":94:5)
#loc86 = loc(fused[#loc1, #loc2])
#loc87 = loc(fused[#loc3, #loc4])
#loc88 = loc(fused[#loc5, #loc6])
#loc89 = loc(fused[#loc7, #loc8])
#loc90 = loc(fused[#loc10, #loc9])
#loc91 = loc(fused[#loc11, #loc12])
#loc92 = loc(fused[#loc13, #loc14])
#loc93 = loc(fused[#loc15, #loc12])
#loc94 = loc(fused[#loc16, #loc17])
#loc95 = loc(fused[#loc18, #loc19])
#loc96 = loc(fused[#loc20, #loc19])
#loc97 = loc(fused[#loc24, #loc25])
#loc98 = loc(fused[#loc26, #loc27])
#loc99 = loc(fused[#loc28, #loc29])
#loc100 = loc(fused[#loc30, #loc31])
#loc101 = loc(fused[#loc33, #loc32])
#loc102 = loc(fused[#loc34, #loc35])
#loc103 = loc(fused[#loc37, #loc38])
#loc104 = loc(fused[#loc39, #loc40])
#loc105 = loc(fused[#loc41, #loc42])
#loc106 = loc(fused[#loc44, #loc43])
#loc107 = loc(fused[#loc45, #loc46])
#loc108 = loc(fused[#loc47, #loc48])
#loc109 = loc(fused[#loc49, #loc50, #loc51, #loc46])
#loc110 = loc(fused[#loc53, #loc54])
#loc111 = loc(fused[#loc55, #loc56])
#loc112 = loc(fused[#loc57, #loc56])
#loc113 = loc(fused[#loc61, #loc62])
#loc114 = loc(fused[#loc64, #loc63])
#loc115 = loc(fused[#loc65, #loc66])
#loc116 = loc(fused[#loc67, #loc68])
#loc117 = loc(fused[#loc69, #loc70])
#loc118 = loc(fused[#loc72, #loc71])
#loc119 = loc(fused[#loc73, #loc74])
#loc120 = loc(fused[#loc75, #loc76])
#loc121 = loc(fused[#loc77, #loc74])
#loc122 = loc(fused[#loc78, #loc79])
#loc123 = loc(fused[#loc80, #loc81])
#loc124 = loc(fused[#loc82, #loc81])
