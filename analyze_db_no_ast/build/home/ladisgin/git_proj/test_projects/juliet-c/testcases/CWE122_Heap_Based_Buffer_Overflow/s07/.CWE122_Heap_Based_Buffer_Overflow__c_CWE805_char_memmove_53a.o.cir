!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc67)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc68)
  cir.func private  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53b_badSink(!cir.ptr<!s8i>) loc(#loc69)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc71)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc11)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc72)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc13)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc14)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc14)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc73)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc74)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc13)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc75)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc76)
    cir.scope {
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc21)
      %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc22)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc22)
      %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s8i>, !s32i loc(#loc78)
      %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc23)
      cir.if %19 {
        %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc25)
        %21 = cir.const #cir.int<1> : !s32i loc(#loc26)
        %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc27)
        cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc25)
      } loc(#loc79)
    } loc(#loc77)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc28)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc28)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc29)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc30)
    %13 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc31)
    cir.store %10, %13 : !s8i, !cir.ptr<!s8i> loc(#loc80)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53b_badSink(%14) : (!cir.ptr<!s8i>) -> () loc(#loc33)
    cir.return loc(#loc8)
  } loc(#loc70)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc82)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc35)
  } loc(#loc81)
  cir.func private  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53b_goodG2BSink(!cir.ptr<!s8i>) loc(#loc83)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc85)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc44)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc86)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc46)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc47)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc47)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc87)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc88)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc46)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc89)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc90)
    cir.scope {
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc54)
      %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc55)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc55)
      %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s8i>, !s32i loc(#loc92)
      %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc56)
      cir.if %19 {
        %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc58)
        %21 = cir.const #cir.int<1> : !s32i loc(#loc59)
        %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc60)
        cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc58)
      } loc(#loc93)
    } loc(#loc91)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc61)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc61)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc63)
    %13 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc64)
    cir.store %10, %13 : !s8i, !cir.ptr<!s8i> loc(#loc94)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc65)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53b_goodG2BSink(%14) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    cir.return loc(#loc41)
  } loc(#loc84)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":24:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":24:86)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":26:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":35:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":28:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":28:12)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":29:12)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":29:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":31:20)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":31:27)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":31:30)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":31:41)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":31:42)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":31:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":32:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":32:33)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":32:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":32:17)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":32:14)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":32:23)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":32:24)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":32:30)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":32:29)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":33:15)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":33:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":33:10)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":33:11)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":34:74)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":34:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":56:1)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":59:1)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":58:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":58:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":42:1)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":42:90)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":45:1)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":54:1)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":47:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":47:12)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":48:12)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":48:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":50:20)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":50:27)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":50:31)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":50:42)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":50:43)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":50:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":51:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":51:33)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":51:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":51:17)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":51:14)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":51:23)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":51:24)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":51:30)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":51:29)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":52:15)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":52:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":52:10)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":52:11)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":53:78)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c":53:5)
#loc67 = loc(fused[#loc1, #loc2])
#loc68 = loc(fused[#loc3, #loc4])
#loc69 = loc(fused[#loc5, #loc6])
#loc70 = loc(fused[#loc7, #loc8])
#loc71 = loc(fused[#loc9, #loc10])
#loc72 = loc(fused[#loc12, #loc11])
#loc73 = loc(fused[#loc15, #loc16])
#loc74 = loc(fused[#loc14, #loc16])
#loc75 = loc(fused[#loc13, #loc17])
#loc76 = loc(fused[#loc18, #loc17])
#loc77 = loc(fused[#loc19, #loc20])
#loc78 = loc(fused[#loc21, #loc22])
#loc79 = loc(fused[#loc24, #loc20])
#loc80 = loc(fused[#loc29, #loc28])
#loc81 = loc(fused[#loc34, #loc35])
#loc82 = loc(fused[#loc36, #loc37])
#loc83 = loc(fused[#loc38, #loc39])
#loc84 = loc(fused[#loc40, #loc41])
#loc85 = loc(fused[#loc42, #loc43])
#loc86 = loc(fused[#loc45, #loc44])
#loc87 = loc(fused[#loc48, #loc49])
#loc88 = loc(fused[#loc47, #loc49])
#loc89 = loc(fused[#loc46, #loc50])
#loc90 = loc(fused[#loc51, #loc50])
#loc91 = loc(fused[#loc52, #loc53])
#loc92 = loc(fused[#loc54, #loc55])
#loc93 = loc(fused[#loc57, #loc53])
#loc94 = loc(fused[#loc62, #loc61])
