!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__char_min_postdec_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @printHexCharLine(!s8i) loc(#loc67)
  cir.func no_proto @CWE191_Integer_Underflow__char_min_postdec_01_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc69)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc70)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc9)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc9)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc71)
    %4 = cir.const #cir.int<127> : !s32i loc(#loc11)
    %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc11)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc11)
    %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc11)
    cir.store %8, %1 : !s8i, !cir.ptr<!s8i> loc(#loc72)
    cir.br ^bb1 loc(#loc73)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc15)
    %10 = cir.unary(dec, %9) : !s8i, !s8i loc(#loc16)
    cir.store %10, %1 : !s8i, !cir.ptr<!s8i> loc(#loc74)
    %11 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc6)
    cir.store %11, %0 : !s8i, !cir.ptr<!s8i> loc(#loc69)
    %12 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc17)
    cir.call @printHexCharLine(%12) : (!s8i) -> () loc(#loc18)
    cir.br ^bb2 loc(#loc14)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc4)
  } loc(#loc68)
  cir.func no_proto @CWE191_Integer_Underflow__char_min_postdec_01_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc76)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc21)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc77)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc23)
    cir.return loc(#loc20)
  } loc(#loc75)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc79)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc80)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc31)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc31)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc81)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc33)
    %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc34)
    %6 = cir.cast(integral, %5 : !s32i), !s8i loc(#loc34)
    cir.store %6, %1 : !s8i, !cir.ptr<!s8i> loc(#loc82)
    cir.br ^bb1 loc(#loc83)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc38)
    %8 = cir.unary(dec, %7) : !s8i, !s8i loc(#loc39)
    cir.store %8, %1 : !s8i, !cir.ptr<!s8i> loc(#loc84)
    %9 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc28)
    cir.store %9, %0 : !s8i, !cir.ptr<!s8i> loc(#loc79)
    %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc40)
    cir.call @printHexCharLine(%10) : (!s8i) -> () loc(#loc41)
    cir.br ^bb2 loc(#loc37)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc26)
  } loc(#loc78)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc85)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc44)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc87)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc88)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc51)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc51)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc89)
    %4 = cir.const #cir.int<127> : !s32i loc(#loc53)
    %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc53)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc53)
    %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc53)
    cir.store %8, %1 : !s8i, !cir.ptr<!s8i> loc(#loc90)
    cir.br ^bb1 loc(#loc91)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc57)
    %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc57)
    %11 = cir.const #cir.int<127> : !s32i loc(#loc58)
    %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc58)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc58)
    %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc58)
    %15 = cir.cmp(gt, %10, %14) : !s32i, !cir.bool loc(#loc92)
    cir.brcond %15 ^bb2, ^bb3 loc(#loc93)
  ^bb2:  // pred: ^bb1
    %16 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc62)
    %17 = cir.unary(dec, %16) : !s8i, !s8i loc(#loc63)
    cir.store %17, %1 : !s8i, !cir.ptr<!s8i> loc(#loc94)
    %18 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc48)
    cir.store %18, %0 : !s8i, !cir.ptr<!s8i> loc(#loc87)
    %19 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc64)
    cir.call @printHexCharLine(%19) : (!s8i) -> () loc(#loc65)
    cir.br ^bb4 loc(#loc60)
  ^bb3:  // pred: ^bb1
    %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc44)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    cir.br ^bb4 loc(#loc56)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc56)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc46)
  } loc(#loc86)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__char_min_postdec_01.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc3 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":34:1)
#loc5 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":31:9)
#loc6 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":31:23)
#loc7 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":24:5)
#loc8 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":24:10)
#loc9 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":25:12)
#loc10 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":25:5)
#loc11 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":27:12)
#loc12 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":27:5)
#loc13 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":28:5)
#loc14 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":33:5)
#loc15 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":30:13)
#loc16 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":30:9)
#loc17 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":32:26)
#loc18 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":32:9)
#loc19 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":75:1)
#loc20 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":79:1)
#loc21 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":77:5)
#loc22 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":77:13)
#loc23 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":78:5)
#loc24 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":78:13)
#loc25 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":41:1)
#loc26 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":53:1)
#loc27 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":50:9)
#loc28 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":50:23)
#loc29 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":43:5)
#loc30 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":43:10)
#loc31 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":44:12)
#loc32 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":44:5)
#loc33 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":46:13)
#loc34 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":46:12)
#loc35 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":46:5)
#loc36 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":47:5)
#loc37 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":52:5)
#loc38 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":49:13)
#loc39 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":49:9)
#loc40 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":51:26)
#loc41 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":51:9)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":71:19)
#loc45 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":56:1)
#loc46 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":73:1)
#loc47 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":66:9)
#loc48 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":66:23)
#loc49 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":58:5)
#loc50 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":58:10)
#loc51 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":59:12)
#loc52 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":59:5)
#loc53 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":61:12)
#loc54 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":61:5)
#loc55 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":63:5)
#loc56 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":72:5)
#loc57 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":63:9)
#loc58 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":63:16)
#loc59 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":64:5)
#loc60 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":68:5)
#loc61 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":70:5)
#loc62 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":65:13)
#loc63 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":65:9)
#loc64 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":67:26)
#loc65 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":67:9)
#loc66 = loc("CWE191_Integer_Underflow__char_min_postdec_01.c":71:9)
#loc67 = loc(fused[#loc1, #loc2])
#loc68 = loc(fused[#loc3, #loc4])
#loc69 = loc(fused[#loc5, #loc6])
#loc70 = loc(fused[#loc7, #loc8])
#loc71 = loc(fused[#loc10, #loc9])
#loc72 = loc(fused[#loc12, #loc11])
#loc73 = loc(fused[#loc13, #loc14])
#loc74 = loc(fused[#loc16, #loc15])
#loc75 = loc(fused[#loc19, #loc20])
#loc76 = loc(fused[#loc21, #loc22])
#loc77 = loc(fused[#loc23, #loc24])
#loc78 = loc(fused[#loc25, #loc26])
#loc79 = loc(fused[#loc27, #loc28])
#loc80 = loc(fused[#loc29, #loc30])
#loc81 = loc(fused[#loc32, #loc31])
#loc82 = loc(fused[#loc35, #loc33])
#loc83 = loc(fused[#loc36, #loc37])
#loc84 = loc(fused[#loc39, #loc38])
#loc85 = loc(fused[#loc42, #loc43])
#loc86 = loc(fused[#loc45, #loc46])
#loc87 = loc(fused[#loc47, #loc48])
#loc88 = loc(fused[#loc49, #loc50])
#loc89 = loc(fused[#loc52, #loc51])
#loc90 = loc(fused[#loc54, #loc53])
#loc91 = loc(fused[#loc55, #loc56])
#loc92 = loc(fused[#loc57, #loc58])
#loc93 = loc(fused[#loc59, #loc60, #loc61, #loc56])
#loc94 = loc(fused[#loc63, #loc62])
