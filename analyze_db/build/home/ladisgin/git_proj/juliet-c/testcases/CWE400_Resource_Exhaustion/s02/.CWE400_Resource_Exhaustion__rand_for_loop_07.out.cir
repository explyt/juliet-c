!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc62 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":183:10)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":183:14)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":183:20)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":183:32)
#true = #cir.bool<true> : !cir.bool
#loc272 = loc(fused[#loc62, #loc63])
#loc273 = loc(fused[#loc64, #loc65])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc244)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc245)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc246)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello\00" : !cir.array<!s8i x 6>> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_for_loop_07_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc248)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc249)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc244)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc17)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc18)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc251)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc20)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc20)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc20)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc20)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc20)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc20)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc20)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc20)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc20)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc20)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc20)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc20)
          cir.yield %24 : !u32i loc(#loc20)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc20)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc20)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc20)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc20)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc20)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc20)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc20)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc20)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc20)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc20)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc20)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc20)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc20)
          cir.yield %28 : !u32i loc(#loc20)
        }) : (!cir.bool) -> !u32i loc(#loc20)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc20)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc253)
      } loc(#loc252)
    } loc(#loc250)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc244)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc24)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc25)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc255)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc258)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc30)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc30)
          cir.store %9, %7 : !u64i, !cir.ptr<!u64i> loc(#loc258)
          cir.scope {
            %10 = cir.const #cir.int<0> : !s32i loc(#loc33)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc33)
            cir.store %11, %7 : !u64i, !cir.ptr<!u64i> loc(#loc260)
            cir.for : cond {
              %12 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc35)
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc36)
              %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc36)
              %15 = cir.cmp(lt, %12, %14) : !u64i, !cir.bool loc(#loc261)
              cir.condition(%15) loc(#loc37)
            } body {
              cir.scope {
                %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc7)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc7)
                cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc39)
              } loc(#loc262)
              cir.yield loc(#loc32)
            } step {
              %12 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc40)
              %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc41)
              cir.store %13, %7 : !u64i, !cir.ptr<!u64i> loc(#loc263)
              cir.yield loc(#loc259)
            } loc(#loc259)
          } loc(#loc259)
        } loc(#loc257)
      } loc(#loc256)
    } loc(#loc254)
    cir.return loc(#loc9)
  } loc(#loc247)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_for_loop_07_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc265)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc266)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc267)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc268)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    cir.return loc(#loc43)
  } loc(#loc264)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc269)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc270)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc59)
  cir.func @main(%arg0: !s32i loc(fused[#loc62, #loc63]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc64, #loc65])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc272)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc273)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc61)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc66)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc66)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc67)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc68)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc68)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc69)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc56)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %8 = cir.get_global @CWE400_Resource_Exhaustion__rand_for_loop_07_good : !cir.ptr<!cir.func<!void ()>> loc(#loc274)
    cir.call @CWE400_Resource_Exhaustion__rand_for_loop_07_good() : () -> () loc(#loc71)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc57)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc58)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %13 = cir.get_global @CWE400_Resource_Exhaustion__rand_for_loop_07_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc275)
    cir.call @CWE400_Resource_Exhaustion__rand_for_loop_07_bad() : () -> () loc(#loc75)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc59)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc78)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc276)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc276)
    cir.return %17 : !s32i loc(#loc276)
  } loc(#loc271)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc80)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc278)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc85)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc86)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc279)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc244)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc90)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc91)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc281)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc93)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc93)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc93)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc93)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc93)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc93)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc93)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc93)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc93)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc93)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc93)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc93)
          cir.yield %24 : !u32i loc(#loc93)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc93)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc93)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc93)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc93)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc93)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc93)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc93)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc93)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc93)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc93)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc93)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc93)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc93)
          cir.yield %28 : !u32i loc(#loc93)
        }) : (!cir.bool) -> !u32i loc(#loc93)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc93)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc283)
      } loc(#loc282)
    } loc(#loc280)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc244)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc97)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc98)
      %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc285)
      cir.if %6 {
        %7 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc80)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc80)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc102)
      } else {
        cir.scope {
          %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc288)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc106)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc106)
          cir.store %9, %7 : !u64i, !cir.ptr<!u64i> loc(#loc288)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc109)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc110)
            %12 = cir.cmp(gt, %10, %11) : !s32i, !cir.bool loc(#loc290)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc112)
              %15 = cir.const #cir.int<20> : !s32i loc(#loc113)
              %16 = cir.cmp(le, %14, %15) : !s32i, !cir.bool loc(#loc291)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc111)
                cir.yield %18 : !cir.bool loc(#loc111)
              }, false {
                %18 = cir.const #false loc(#loc111)
                cir.yield %18 : !cir.bool loc(#loc111)
              }) : (!cir.bool) -> !cir.bool loc(#loc111)
              cir.yield %17 : !cir.bool loc(#loc111)
            }, false {
              %14 = cir.const #false loc(#loc111)
              cir.yield %14 : !cir.bool loc(#loc111)
            }) : (!cir.bool) -> !cir.bool loc(#loc111)
            cir.if %13 {
              cir.scope {
                %14 = cir.const #cir.int<0> : !s32i loc(#loc117)
                %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc117)
                cir.store %15, %7 : !u64i, !cir.ptr<!u64i> loc(#loc294)
                cir.for : cond {
                  %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc119)
                  %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc120)
                  %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc120)
                  %19 = cir.cmp(lt, %16, %18) : !u64i, !cir.bool loc(#loc295)
                  cir.condition(%19) loc(#loc121)
                } body {
                  cir.scope {
                    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc123)
                    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc123)
                    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc124)
                  } loc(#loc296)
                  cir.yield loc(#loc116)
                } step {
                  %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc125)
                  %17 = cir.unary(inc, %16) : !u64i, !u64i loc(#loc126)
                  cir.store %17, %7 : !u64i, !cir.ptr<!u64i> loc(#loc297)
                  cir.yield loc(#loc293)
                } loc(#loc293)
              } loc(#loc293)
            } loc(#loc292)
          } loc(#loc289)
        } loc(#loc287)
      } loc(#loc286)
    } loc(#loc284)
    cir.return loc(#loc82)
  } loc(#loc277)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc299)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc131)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc132)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc300)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc244)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc136)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc137)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc302)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc139)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc139)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc139)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc139)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc139)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc139)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc139)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc139)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc139)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc139)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc139)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc139)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc139)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc139)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc139)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc139)
          cir.yield %24 : !u32i loc(#loc139)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc139)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc139)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc139)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc139)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc139)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc139)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc139)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc139)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc139)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc139)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc139)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc139)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc139)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc139)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc139)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc139)
          cir.yield %28 : !u32i loc(#loc139)
        }) : (!cir.bool) -> !u32i loc(#loc139)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc139)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc304)
      } loc(#loc303)
    } loc(#loc301)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc244)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc143)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc144)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc306)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc309)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc149)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc149)
          cir.store %9, %7 : !u64i, !cir.ptr<!u64i> loc(#loc309)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc152)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc153)
            %12 = cir.cmp(gt, %10, %11) : !s32i, !cir.bool loc(#loc311)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc155)
              %15 = cir.const #cir.int<20> : !s32i loc(#loc156)
              %16 = cir.cmp(le, %14, %15) : !s32i, !cir.bool loc(#loc312)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc154)
                cir.yield %18 : !cir.bool loc(#loc154)
              }, false {
                %18 = cir.const #false loc(#loc154)
                cir.yield %18 : !cir.bool loc(#loc154)
              }) : (!cir.bool) -> !cir.bool loc(#loc154)
              cir.yield %17 : !cir.bool loc(#loc154)
            }, false {
              %14 = cir.const #false loc(#loc154)
              cir.yield %14 : !cir.bool loc(#loc154)
            }) : (!cir.bool) -> !cir.bool loc(#loc154)
            cir.if %13 {
              cir.scope {
                %14 = cir.const #cir.int<0> : !s32i loc(#loc160)
                %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc160)
                cir.store %15, %7 : !u64i, !cir.ptr<!u64i> loc(#loc315)
                cir.for : cond {
                  %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc162)
                  %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc163)
                  %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc163)
                  %19 = cir.cmp(lt, %16, %18) : !u64i, !cir.bool loc(#loc316)
                  cir.condition(%19) loc(#loc164)
                } body {
                  cir.scope {
                    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc166)
                    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc166)
                    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc167)
                  } loc(#loc317)
                  cir.yield loc(#loc159)
                } step {
                  %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc168)
                  %17 = cir.unary(inc, %16) : !u64i, !u64i loc(#loc169)
                  cir.store %17, %7 : !u64i, !cir.ptr<!u64i> loc(#loc318)
                  cir.yield loc(#loc314)
                } loc(#loc314)
              } loc(#loc314)
            } loc(#loc313)
          } loc(#loc310)
        } loc(#loc308)
      } loc(#loc307)
    } loc(#loc305)
    cir.return loc(#loc128)
  } loc(#loc298)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc320)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc174)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc175)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc321)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc244)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc179)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc180)
      %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc323)
      cir.if %6 {
        %7 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc184)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc184)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc185)
      } else {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc186)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc325)
      } loc(#loc324)
    } loc(#loc322)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc244)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc190)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc191)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc327)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc330)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc196)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc196)
          cir.store %9, %7 : !u64i, !cir.ptr<!u64i> loc(#loc330)
          cir.scope {
            %10 = cir.const #cir.int<0> : !s32i loc(#loc199)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc199)
            cir.store %11, %7 : !u64i, !cir.ptr<!u64i> loc(#loc332)
            cir.for : cond {
              %12 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc201)
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc202)
              %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc202)
              %15 = cir.cmp(lt, %12, %14) : !u64i, !cir.bool loc(#loc333)
              cir.condition(%15) loc(#loc203)
            } body {
              cir.scope {
                %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc205)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc205)
                cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc206)
              } loc(#loc334)
              cir.yield loc(#loc198)
            } step {
              %12 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc207)
              %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc208)
              cir.store %13, %7 : !u64i, !cir.ptr<!u64i> loc(#loc335)
              cir.yield loc(#loc331)
            } loc(#loc331)
          } loc(#loc331)
        } loc(#loc329)
      } loc(#loc328)
    } loc(#loc326)
    cir.return loc(#loc171)
  } loc(#loc319)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc337)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc213)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc214)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc338)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc244)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc218)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc219)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc340)
      cir.if %6 {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc221)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc342)
      } loc(#loc341)
    } loc(#loc339)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc244)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc225)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc226)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc344)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc347)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc231)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc231)
          cir.store %9, %7 : !u64i, !cir.ptr<!u64i> loc(#loc347)
          cir.scope {
            %10 = cir.const #cir.int<0> : !s32i loc(#loc234)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc234)
            cir.store %11, %7 : !u64i, !cir.ptr<!u64i> loc(#loc349)
            cir.for : cond {
              %12 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc236)
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc237)
              %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc237)
              %15 = cir.cmp(lt, %12, %14) : !u64i, !cir.bool loc(#loc350)
              cir.condition(%15) loc(#loc238)
            } body {
              cir.scope {
                %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc240)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc240)
                cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc241)
              } loc(#loc351)
              cir.yield loc(#loc233)
            } step {
              %12 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc242)
              %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc243)
              cir.store %13, %7 : !u64i, !cir.ptr<!u64i> loc(#loc352)
              cir.yield loc(#loc348)
            } loc(#loc348)
          } loc(#loc348)
        } loc(#loc346)
      } loc(#loc345)
    } loc(#loc343)
    cir.return loc(#loc210)
  } loc(#loc336)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_07.c":0:0)
#loc1 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":23:1)
#loc2 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":23:25)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":44:27)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":27:1)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":48:1)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":29:5)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":29:9)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":31:14)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":31:13)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":31:5)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":32:5)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":36:5)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":32:8)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":32:20)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":33:5)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":35:17)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":35:9)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":37:5)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":47:5)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":37:8)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":37:20)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":38:5)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":39:9)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":46:9)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":40:13)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":40:24)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":42:13)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":45:13)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":42:22)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":42:18)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":42:25)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":42:37)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":42:27)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":43:13)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":44:17)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":42:45)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":42:44)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":166:1)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":172:1)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":168:5)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":168:14)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":169:5)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":169:14)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":170:5)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":170:14)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":171:5)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":171:14)
#loc52 = loc("/usr/include/stdlib.h":575:1)
#loc53 = loc("/usr/include/stdlib.h":575:41)
#loc54 = loc("/usr/include/time.h":76:1)
#loc55 = loc("/usr/include/time.h":76:38)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":188:15)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":190:15)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":193:15)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":195:15)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":183:1)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":198:1)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":184:1)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":186:27)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":186:22)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":186:5)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":188:5)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":189:5)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":189:55)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":190:5)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":193:5)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":194:5)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":194:54)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":195:5)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":197:12)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":197:5)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":68:19)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":55:1)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":84:1)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":57:5)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":57:9)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":59:14)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":59:13)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":59:5)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":60:5)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":64:5)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":60:8)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":60:20)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":61:5)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":63:17)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":63:9)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":65:5)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":83:5)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":65:8)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":65:20)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":66:5)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":69:5)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":71:5)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":68:9)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":72:9)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":82:9)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":73:13)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":73:24)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":75:13)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":81:13)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":75:17)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":75:25)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":75:27)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":75:30)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":75:39)
#loc114 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":76:13)
#loc115 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":77:17)
#loc116 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":80:17)
#loc117 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":77:26)
#loc118 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":77:22)
#loc119 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":77:29)
#loc120 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":77:41)
#loc121 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":77:31)
#loc122 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":78:17)
#loc123 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":79:31)
#loc124 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":79:21)
#loc125 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":77:49)
#loc126 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":77:48)
#loc127 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":87:1)
#loc128 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":111:1)
#loc129 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":89:5)
#loc130 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":89:9)
#loc131 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":91:14)
#loc132 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":91:13)
#loc133 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":91:5)
#loc134 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":92:5)
#loc135 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":96:5)
#loc136 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":92:8)
#loc137 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":92:20)
#loc138 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":93:5)
#loc139 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":95:17)
#loc140 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":95:9)
#loc141 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":97:5)
#loc142 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":110:5)
#loc143 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":97:8)
#loc144 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":97:20)
#loc145 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":98:5)
#loc146 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":99:9)
#loc147 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":109:9)
#loc148 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":100:13)
#loc149 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":100:24)
#loc150 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":102:13)
#loc151 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":108:13)
#loc152 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":102:17)
#loc153 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":102:25)
#loc154 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":102:27)
#loc155 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":102:30)
#loc156 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":102:39)
#loc157 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":103:13)
#loc158 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":104:17)
#loc159 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":107:17)
#loc160 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":104:26)
#loc161 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":104:22)
#loc162 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":104:29)
#loc163 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":104:41)
#loc164 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":104:31)
#loc165 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":105:17)
#loc166 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":106:31)
#loc167 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":106:21)
#loc168 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":104:49)
#loc169 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":104:48)
#loc170 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":114:1)
#loc171 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":140:1)
#loc172 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":116:5)
#loc173 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":116:9)
#loc174 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":118:14)
#loc175 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":118:13)
#loc176 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":118:5)
#loc177 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":119:5)
#loc178 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":128:5)
#loc179 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":119:8)
#loc180 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":119:20)
#loc181 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":120:5)
#loc182 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":123:5)
#loc183 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":125:5)
#loc184 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":122:19)
#loc185 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":122:9)
#loc186 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":127:17)
#loc187 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":127:9)
#loc188 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":129:5)
#loc189 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":139:5)
#loc190 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":129:8)
#loc191 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":129:20)
#loc192 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":130:5)
#loc193 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":131:9)
#loc194 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":138:9)
#loc195 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":132:13)
#loc196 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":132:24)
#loc197 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":134:13)
#loc198 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":137:13)
#loc199 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":134:22)
#loc200 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":134:18)
#loc201 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":134:25)
#loc202 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":134:37)
#loc203 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":134:27)
#loc204 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":135:13)
#loc205 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":136:27)
#loc206 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":136:17)
#loc207 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":134:45)
#loc208 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":134:44)
#loc209 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":143:1)
#loc210 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":164:1)
#loc211 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":145:5)
#loc212 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":145:9)
#loc213 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":147:14)
#loc214 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":147:13)
#loc215 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":147:5)
#loc216 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":148:5)
#loc217 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":152:5)
#loc218 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":148:8)
#loc219 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":148:20)
#loc220 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":149:5)
#loc221 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":151:17)
#loc222 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":151:9)
#loc223 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":153:5)
#loc224 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":163:5)
#loc225 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":153:8)
#loc226 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":153:20)
#loc227 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":154:5)
#loc228 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":155:9)
#loc229 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":162:9)
#loc230 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":156:13)
#loc231 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":156:24)
#loc232 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":158:13)
#loc233 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":161:13)
#loc234 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":158:22)
#loc235 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":158:18)
#loc236 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":158:25)
#loc237 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":158:37)
#loc238 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":158:27)
#loc239 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":159:13)
#loc240 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":160:27)
#loc241 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":160:17)
#loc242 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":158:45)
#loc243 = loc("CWE400_Resource_Exhaustion__rand_for_loop_07.c":158:44)
#loc244 = loc(fused[#loc1, #loc2])
#loc245 = loc(fused[#loc3, #loc4])
#loc246 = loc(fused[#loc5, #loc6])
#loc247 = loc(fused[#loc8, #loc9])
#loc248 = loc(fused[#loc10, #loc11])
#loc249 = loc(fused[#loc14, #loc12])
#loc250 = loc(fused[#loc15, #loc16])
#loc251 = loc(fused[#loc17, #loc18])
#loc252 = loc(fused[#loc19, #loc16])
#loc253 = loc(fused[#loc21, #loc20])
#loc254 = loc(fused[#loc22, #loc23])
#loc255 = loc(fused[#loc24, #loc25])
#loc256 = loc(fused[#loc26, #loc23])
#loc257 = loc(fused[#loc27, #loc28])
#loc258 = loc(fused[#loc29, #loc30])
#loc259 = loc(fused[#loc31, #loc32])
#loc260 = loc(fused[#loc34, #loc33])
#loc261 = loc(fused[#loc35, #loc36])
#loc262 = loc(fused[#loc38, #loc32])
#loc263 = loc(fused[#loc41, #loc40])
#loc264 = loc(fused[#loc42, #loc43])
#loc265 = loc(fused[#loc44, #loc45])
#loc266 = loc(fused[#loc46, #loc47])
#loc267 = loc(fused[#loc48, #loc49])
#loc268 = loc(fused[#loc50, #loc51])
#loc269 = loc(fused[#loc52, #loc53])
#loc270 = loc(fused[#loc54, #loc55])
#loc271 = loc(fused[#loc60, #loc61])
#loc274 = loc(fused[#loc71, #loc72])
#loc275 = loc(fused[#loc75, #loc76])
#loc276 = loc(fused[#loc79, #loc78])
#loc277 = loc(fused[#loc81, #loc82])
#loc278 = loc(fused[#loc83, #loc84])
#loc279 = loc(fused[#loc87, #loc85])
#loc280 = loc(fused[#loc88, #loc89])
#loc281 = loc(fused[#loc90, #loc91])
#loc282 = loc(fused[#loc92, #loc89])
#loc283 = loc(fused[#loc94, #loc93])
#loc284 = loc(fused[#loc95, #loc96])
#loc285 = loc(fused[#loc97, #loc98])
#loc286 = loc(fused[#loc99, #loc100, #loc101, #loc96])
#loc287 = loc(fused[#loc103, #loc104])
#loc288 = loc(fused[#loc105, #loc106])
#loc289 = loc(fused[#loc107, #loc108])
#loc290 = loc(fused[#loc109, #loc110])
#loc291 = loc(fused[#loc112, #loc113])
#loc292 = loc(fused[#loc114, #loc108])
#loc293 = loc(fused[#loc115, #loc116])
#loc294 = loc(fused[#loc118, #loc117])
#loc295 = loc(fused[#loc119, #loc120])
#loc296 = loc(fused[#loc122, #loc116])
#loc297 = loc(fused[#loc126, #loc125])
#loc298 = loc(fused[#loc127, #loc128])
#loc299 = loc(fused[#loc129, #loc130])
#loc300 = loc(fused[#loc133, #loc131])
#loc301 = loc(fused[#loc134, #loc135])
#loc302 = loc(fused[#loc136, #loc137])
#loc303 = loc(fused[#loc138, #loc135])
#loc304 = loc(fused[#loc140, #loc139])
#loc305 = loc(fused[#loc141, #loc142])
#loc306 = loc(fused[#loc143, #loc144])
#loc307 = loc(fused[#loc145, #loc142])
#loc308 = loc(fused[#loc146, #loc147])
#loc309 = loc(fused[#loc148, #loc149])
#loc310 = loc(fused[#loc150, #loc151])
#loc311 = loc(fused[#loc152, #loc153])
#loc312 = loc(fused[#loc155, #loc156])
#loc313 = loc(fused[#loc157, #loc151])
#loc314 = loc(fused[#loc158, #loc159])
#loc315 = loc(fused[#loc161, #loc160])
#loc316 = loc(fused[#loc162, #loc163])
#loc317 = loc(fused[#loc165, #loc159])
#loc318 = loc(fused[#loc169, #loc168])
#loc319 = loc(fused[#loc170, #loc171])
#loc320 = loc(fused[#loc172, #loc173])
#loc321 = loc(fused[#loc176, #loc174])
#loc322 = loc(fused[#loc177, #loc178])
#loc323 = loc(fused[#loc179, #loc180])
#loc324 = loc(fused[#loc181, #loc182, #loc183, #loc178])
#loc325 = loc(fused[#loc187, #loc186])
#loc326 = loc(fused[#loc188, #loc189])
#loc327 = loc(fused[#loc190, #loc191])
#loc328 = loc(fused[#loc192, #loc189])
#loc329 = loc(fused[#loc193, #loc194])
#loc330 = loc(fused[#loc195, #loc196])
#loc331 = loc(fused[#loc197, #loc198])
#loc332 = loc(fused[#loc200, #loc199])
#loc333 = loc(fused[#loc201, #loc202])
#loc334 = loc(fused[#loc204, #loc198])
#loc335 = loc(fused[#loc208, #loc207])
#loc336 = loc(fused[#loc209, #loc210])
#loc337 = loc(fused[#loc211, #loc212])
#loc338 = loc(fused[#loc215, #loc213])
#loc339 = loc(fused[#loc216, #loc217])
#loc340 = loc(fused[#loc218, #loc219])
#loc341 = loc(fused[#loc220, #loc217])
#loc342 = loc(fused[#loc222, #loc221])
#loc343 = loc(fused[#loc223, #loc224])
#loc344 = loc(fused[#loc225, #loc226])
#loc345 = loc(fused[#loc227, #loc224])
#loc346 = loc(fused[#loc228, #loc229])
#loc347 = loc(fused[#loc230, #loc231])
#loc348 = loc(fused[#loc232, #loc233])
#loc349 = loc(fused[#loc235, #loc234])
#loc350 = loc(fused[#loc236, #loc237])
#loc351 = loc(fused[#loc239, #loc233])
#loc352 = loc(fused[#loc243, #loc242])
