!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_if_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc97)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc98)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Inside the else statement\00" : !cir.array<!s8i x 26>> : !cir.array<!s8i x 26> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_if_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc100)
    cir.br ^bb1 loc(#loc101)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<5> : !s32i loc(#loc13)
    %2 = cir.const #cir.int<5> : !s32i loc(#loc14)
    %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc102)
    cir.brcond %3 ^bb2, ^bb10 loc(#loc103)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc104)
  ^bb3:  // pred: ^bb2
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %5 = cir.const #cir.int<3> : !s32i loc(#loc19)
    %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc105)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    cir.br ^bb4 loc(#loc107)
  ^bb4:  // pred: ^bb3
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %8 = cir.const #cir.int<0> : !s32i loc(#loc25)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc108)
    cir.brcond %9 ^bb5, ^bb6 loc(#loc109)
  ^bb5:  // pred: ^bb4
    cir.br ^bb7 loc(#loc27)
  ^bb6:  // pred: ^bb4
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc5)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc29)
    cir.br ^bb7 loc(#loc23)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc23)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc17)
  ^bb9:  // pred: ^bb8
    %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc6)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc6)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc30)
    cir.br ^bb10 loc(#loc12)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc12)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc8)
  } loc(#loc99)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_if_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc111)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc112)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    cir.return loc(#loc32)
  } loc(#loc110)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Inside the if statement\00" : !cir.array<!s8i x 24>> : !cir.array<!s8i x 24> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc39)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc114)
    cir.br ^bb1 loc(#loc115)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<5> : !s32i loc(#loc46)
    %2 = cir.const #cir.int<5> : !s32i loc(#loc47)
    %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc116)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc117)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc37)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    cir.br ^bb11 loc(#loc49)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc118)
  ^bb4:  // pred: ^bb3
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
    %7 = cir.const #cir.int<3> : !s32i loc(#loc55)
    %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc119)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc120)
    cir.br ^bb5 loc(#loc121)
  ^bb5:  // pred: ^bb4
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc60)
    %10 = cir.const #cir.int<0> : !s32i loc(#loc61)
    %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc122)
    cir.brcond %11 ^bb6, ^bb7 loc(#loc123)
  ^bb6:  // pred: ^bb5
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 24>> loc(#loc38)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 24>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    cir.br ^bb8 loc(#loc63)
  ^bb7:  // pred: ^bb5
    %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc66)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    cir.br ^bb8 loc(#loc59)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc59)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc53)
  ^bb10:  // pred: ^bb9
    %16 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc39)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    cir.br ^bb11 loc(#loc45)
  ^bb11:  // 2 preds: ^bb2, ^bb10
    cir.br ^bb12 loc(#loc45)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc41)
  } loc(#loc113)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc125)
    cir.br ^bb1 loc(#loc126)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<5> : !s32i loc(#loc75)
    %2 = cir.const #cir.int<5> : !s32i loc(#loc76)
    %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc127)
    cir.brcond %3 ^bb2, ^bb10 loc(#loc128)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc129)
  ^bb3:  // pred: ^bb2
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
    %5 = cir.const #cir.int<3> : !s32i loc(#loc81)
    %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc130)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    cir.br ^bb4 loc(#loc132)
  ^bb4:  // pred: ^bb3
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    %8 = cir.const #cir.int<0> : !s32i loc(#loc87)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc133)
    cir.brcond %9 ^bb5, ^bb6 loc(#loc134)
  ^bb5:  // pred: ^bb4
    %10 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 24>> loc(#loc91)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 24>>), !cir.ptr<!s8i> loc(#loc91)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    cir.br ^bb7 loc(#loc89)
  ^bb6:  // pred: ^bb4
    %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc93)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc93)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    cir.br ^bb7 loc(#loc85)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc85)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc79)
  ^bb9:  // pred: ^bb8
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc95)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc95)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    cir.br ^bb10 loc(#loc74)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc74)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc70)
  } loc(#loc124)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_if_06.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":38:27)
#loc6 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":41:19)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":25:1)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":43:1)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":31:13)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":31:17)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":27:5)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":42:5)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":27:8)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":27:27)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":28:5)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":30:9)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":40:9)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":32:18)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":32:27)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":32:13)
#loc21 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":32:28)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":33:13)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":39:13)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":33:17)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":33:22)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":34:13)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":35:13)
#loc28 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":37:13)
#loc29 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":38:17)
#loc30 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":41:9)
#loc31 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":98:1)
#loc32 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":102:1)
#loc33 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":100:5)
#loc34 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":100:11)
#loc35 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":101:5)
#loc36 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":101:11)
#loc37 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":55:19)
#loc38 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":65:27)
#loc39 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":72:19)
#loc40 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":50:1)
#loc41 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":74:1)
#loc42 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":61:13)
#loc43 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":61:17)
#loc44 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":52:5)
#loc45 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":73:5)
#loc46 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":52:8)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":52:27)
#loc48 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":53:5)
#loc49 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":56:5)
#loc50 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":58:5)
#loc51 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":55:9)
#loc52 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":60:9)
#loc53 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":71:9)
#loc54 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":62:18)
#loc55 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":62:27)
#loc56 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":62:13)
#loc57 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":62:28)
#loc58 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":63:13)
#loc59 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":70:13)
#loc60 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":63:17)
#loc61 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":63:22)
#loc62 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":64:13)
#loc63 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":66:13)
#loc64 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":68:13)
#loc65 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":65:17)
#loc66 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":69:27)
#loc67 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":69:17)
#loc68 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":72:9)
#loc69 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":77:1)
#loc70 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":96:1)
#loc71 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":83:13)
#loc72 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":83:17)
#loc73 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":79:5)
#loc74 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":95:5)
#loc75 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":79:8)
#loc76 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":79:27)
#loc77 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":80:5)
#loc78 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":82:9)
#loc79 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":93:9)
#loc80 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":84:18)
#loc81 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":84:27)
#loc82 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":84:13)
#loc83 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":84:28)
#loc84 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":85:13)
#loc85 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":92:13)
#loc86 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":85:17)
#loc87 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":85:22)
#loc88 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":86:13)
#loc89 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":88:13)
#loc90 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":90:13)
#loc91 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":87:27)
#loc92 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":87:17)
#loc93 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":91:27)
#loc94 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":91:17)
#loc95 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":94:19)
#loc96 = loc("CWE398_Poor_Code_Quality__empty_if_06.c":94:9)
#loc97 = loc(fused[#loc1, #loc2])
#loc98 = loc(fused[#loc3, #loc4])
#loc99 = loc(fused[#loc7, #loc8])
#loc100 = loc(fused[#loc9, #loc10])
#loc101 = loc(fused[#loc11, #loc12])
#loc102 = loc(fused[#loc13, #loc14])
#loc103 = loc(fused[#loc15, #loc12])
#loc104 = loc(fused[#loc16, #loc17])
#loc105 = loc(fused[#loc18, #loc19])
#loc106 = loc(fused[#loc20, #loc21])
#loc107 = loc(fused[#loc22, #loc23])
#loc108 = loc(fused[#loc24, #loc25])
#loc109 = loc(fused[#loc26, #loc27, #loc28, #loc23])
#loc110 = loc(fused[#loc31, #loc32])
#loc111 = loc(fused[#loc33, #loc34])
#loc112 = loc(fused[#loc35, #loc36])
#loc113 = loc(fused[#loc40, #loc41])
#loc114 = loc(fused[#loc42, #loc43])
#loc115 = loc(fused[#loc44, #loc45])
#loc116 = loc(fused[#loc46, #loc47])
#loc117 = loc(fused[#loc48, #loc49, #loc50, #loc45])
#loc118 = loc(fused[#loc52, #loc53])
#loc119 = loc(fused[#loc54, #loc55])
#loc120 = loc(fused[#loc56, #loc57])
#loc121 = loc(fused[#loc58, #loc59])
#loc122 = loc(fused[#loc60, #loc61])
#loc123 = loc(fused[#loc62, #loc63, #loc64, #loc59])
#loc124 = loc(fused[#loc69, #loc70])
#loc125 = loc(fused[#loc71, #loc72])
#loc126 = loc(fused[#loc73, #loc74])
#loc127 = loc(fused[#loc75, #loc76])
#loc128 = loc(fused[#loc77, #loc74])
#loc129 = loc(fused[#loc78, #loc79])
#loc130 = loc(fused[#loc80, #loc81])
#loc131 = loc(fused[#loc82, #loc83])
#loc132 = loc(fused[#loc84, #loc85])
#loc133 = loc(fused[#loc86, #loc87])
#loc134 = loc(fused[#loc88, #loc89, #loc90, #loc85])
