!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc9 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":25:21)
#loc10 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":25:25)
#loc48 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":55:26)
#loc49 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":55:30)
#loc87 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":88:26)
#loc88 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":88:30)
#loc124 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":116:25)
#loc125 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":116:29)
#loc151 = loc(fused[#loc9, #loc10])
#loc167 = loc(fused[#loc48, #loc49])
#loc181 = loc(fused[#loc87, #loc88])
#loc195 = loc(fused[#loc124, #loc125])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_modulo_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc147)
  cir.global "private"  internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc148)
  cir.func private  @printIntLine(!s32i) loc(#loc149)
  cir.func internal private  @badSink(%arg0: !s32i loc(fused[#loc9, #loc10])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc151)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc11)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc148)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc14)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc14)
      cir.if %3 {
        %4 = cir.const #cir.int<100> : !s32i loc(#loc16)
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
        %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc154)
        cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc18)
      } loc(#loc153)
    } loc(#loc152)
    cir.return loc(#loc8)
  } loc(#loc150)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_rand_modulo_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc156)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc24)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc157)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc26)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc26)
    %7 = cir.ternary(%6, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc26)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc26)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc26)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc26)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc26)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc26)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc26)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc26)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc26)
      cir.yield %23 : !u32i loc(#loc26)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc26)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc26)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc26)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc26)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc26)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc26)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc26)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc26)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc26)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc26)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc26)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc26)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc26)
      cir.yield %27 : !u32i loc(#loc26)
    }) : (!cir.bool) -> !u32i loc(#loc26)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc26)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %10 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc148)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc159)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
    cir.call @badSink(%11) : (!s32i) -> () loc(#loc31)
    cir.return loc(#loc20)
  } loc(#loc155)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_rand_modulo_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc161)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc162)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc163)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc33)
  } loc(#loc160)
  cir.global "private"  internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc164)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc165)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc44)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc45)
  cir.func internal private  @goodB2G1Sink(%arg0: !s32i loc(fused[#loc48, #loc49])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc167)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc50)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc164)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc53)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc53)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc44)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc44)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc57)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc60)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc61)
          %6 = cir.cmp(ne, %4, %5) : !s32i, !s32i loc(#loc171)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc62)
          cir.if %7 {
            %8 = cir.const #cir.int<100> : !s32i loc(#loc66)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc67)
            %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc173)
            cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc68)
          } else {
            %8 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc45)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc45)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc69)
          } loc(#loc172)
        } loc(#loc170)
      } loc(#loc169)
    } loc(#loc168)
    cir.return loc(#loc47)
  } loc(#loc166)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc175)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc74)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc75)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc176)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc77)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc77)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc77)
    %7 = cir.ternary(%6, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc77)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc77)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc77)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc77)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc77)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc77)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc77)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc77)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc77)
      cir.yield %23 : !u32i loc(#loc77)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc77)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc77)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc77)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc77)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc77)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc77)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc77)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc77)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc77)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc77)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc77)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc77)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc77)
      cir.yield %27 : !u32i loc(#loc77)
    }) : (!cir.bool) -> !u32i loc(#loc77)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc77)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc177)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc79)
    %10 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc164)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc81)
    cir.call @goodB2G1Sink(%11) : (!s32i) -> () loc(#loc82)
    cir.return loc(#loc71)
  } loc(#loc174)
  cir.global "private"  internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc179)
  cir.func internal private  @goodB2G2Sink(%arg0: !s32i loc(fused[#loc87, #loc88])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc181)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc89)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc179)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc92)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc92)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc96)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc97)
          %6 = cir.cmp(ne, %4, %5) : !s32i, !s32i loc(#loc185)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc98)
          cir.if %7 {
            %8 = cir.const #cir.int<100> : !s32i loc(#loc102)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
            %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc187)
            cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc104)
          } else {
            %8 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc105)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc105)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc106)
          } loc(#loc186)
        } loc(#loc184)
      } loc(#loc183)
    } loc(#loc182)
    cir.return loc(#loc86)
  } loc(#loc180)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc189)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc111)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc112)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc114)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc114)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc114)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc114)
    %7 = cir.ternary(%6, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc114)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc114)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc114)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc114)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc114)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc114)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc114)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc114)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc114)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc114)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc114)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc114)
      cir.yield %23 : !u32i loc(#loc114)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc114)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc114)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc114)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc114)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc114)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc114)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc114)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc114)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc114)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc114)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc114)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc114)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc114)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc114)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc114)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc114)
      cir.yield %27 : !u32i loc(#loc114)
    }) : (!cir.bool) -> !u32i loc(#loc114)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc114)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc191)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc116)
    %10 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc179)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc118)
    cir.call @goodB2G2Sink(%11) : (!s32i) -> () loc(#loc119)
    cir.return loc(#loc108)
  } loc(#loc188)
  cir.global "private"  internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc193)
  cir.func internal private  @goodG2BSink(%arg0: !s32i loc(fused[#loc124, #loc125])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc195)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc193)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc129)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc129)
      cir.if %3 {
        %4 = cir.const #cir.int<100> : !s32i loc(#loc131)
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc132)
        %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc198)
        cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc133)
      } loc(#loc197)
    } loc(#loc196)
    cir.return loc(#loc123)
  } loc(#loc194)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc200)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc138)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc139)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc141)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc143)
    %5 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc193)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc203)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc145)
    cir.call @goodG2BSink(%6) : (!s32i) -> () loc(#loc146)
    cir.return loc(#loc135)
  } loc(#loc199)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_modulo_21.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":23:1)
#loc4 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":23:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":25:1)
#loc8 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":32:1)
#loc11 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":26:1)
#loc12 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":27:5)
#loc13 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":31:5)
#loc14 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":27:8)
#loc15 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":28:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":30:22)
#loc17 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":30:28)
#loc18 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":30:9)
#loc19 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":34:1)
#loc20 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":43:1)
#loc21 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":36:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":36:9)
#loc23 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":38:13)
#loc24 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":38:12)
#loc25 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":38:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":40:12)
#loc27 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":40:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":41:17)
#loc29 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":41:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":42:13)
#loc31 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":42:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":136:1)
#loc33 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":141:1)
#loc34 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":138:5)
#loc35 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":138:14)
#loc36 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":139:5)
#loc37 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":139:14)
#loc38 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":140:5)
#loc39 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":140:13)
#loc40 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":50:1)
#loc41 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":50:29)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":60:19)
#loc45 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":71:23)
#loc46 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":55:1)
#loc47 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":74:1)
#loc50 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":56:1)
#loc51 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":57:5)
#loc52 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":73:5)
#loc53 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":57:8)
#loc54 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":58:5)
#loc55 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":61:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":63:5)
#loc57 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":60:9)
#loc58 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":65:9)
#loc59 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":72:9)
#loc60 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":65:13)
#loc61 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":65:21)
#loc62 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":65:18)
#loc63 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":66:9)
#loc64 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":68:9)
#loc65 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":70:9)
#loc66 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":67:26)
#loc67 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":67:32)
#loc68 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":67:13)
#loc69 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":71:13)
#loc70 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":76:1)
#loc71 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":85:1)
#loc72 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":78:5)
#loc73 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":78:9)
#loc74 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":80:13)
#loc75 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":80:12)
#loc76 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":80:5)
#loc77 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":82:12)
#loc78 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":82:5)
#loc79 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":83:22)
#loc80 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":83:5)
#loc81 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":84:18)
#loc82 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":84:5)
#loc83 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":51:1)
#loc84 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":51:29)
#loc85 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":88:1)
#loc86 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":102:1)
#loc89 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":89:1)
#loc90 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":90:5)
#loc91 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":101:5)
#loc92 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":90:8)
#loc93 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":91:5)
#loc94 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":93:9)
#loc95 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":100:9)
#loc96 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":93:13)
#loc97 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":93:21)
#loc98 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":93:18)
#loc99 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":94:9)
#loc100 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":96:9)
#loc101 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":98:9)
#loc102 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":95:26)
#loc103 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":95:32)
#loc104 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":95:13)
#loc105 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":99:23)
#loc106 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":99:13)
#loc107 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":104:1)
#loc108 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":113:1)
#loc109 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":106:5)
#loc110 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":106:9)
#loc111 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":108:13)
#loc112 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":108:12)
#loc113 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":108:5)
#loc114 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":110:12)
#loc115 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":110:5)
#loc116 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":111:22)
#loc117 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":111:5)
#loc118 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":112:18)
#loc119 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":112:5)
#loc120 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":52:1)
#loc121 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":52:28)
#loc122 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":116:1)
#loc123 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":123:1)
#loc126 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":117:1)
#loc127 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":118:5)
#loc128 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":122:5)
#loc129 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":118:8)
#loc130 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":119:5)
#loc131 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":121:22)
#loc132 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":121:28)
#loc133 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":121:9)
#loc134 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":125:1)
#loc135 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":134:1)
#loc136 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":127:5)
#loc137 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":127:9)
#loc138 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":129:13)
#loc139 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":129:12)
#loc140 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":129:5)
#loc141 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":131:12)
#loc142 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":131:5)
#loc143 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":132:21)
#loc144 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":132:5)
#loc145 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":133:17)
#loc146 = loc("CWE369_Divide_by_Zero__int_rand_modulo_21.c":133:5)
#loc147 = loc(fused[#loc1, #loc2])
#loc148 = loc(fused[#loc3, #loc4])
#loc149 = loc(fused[#loc5, #loc6])
#loc150 = loc(fused[#loc7, #loc8])
#loc152 = loc(fused[#loc12, #loc13])
#loc153 = loc(fused[#loc15, #loc13])
#loc154 = loc(fused[#loc16, #loc17])
#loc155 = loc(fused[#loc19, #loc20])
#loc156 = loc(fused[#loc21, #loc22])
#loc157 = loc(fused[#loc25, #loc23])
#loc158 = loc(fused[#loc27, #loc26])
#loc159 = loc(fused[#loc29, #loc28])
#loc160 = loc(fused[#loc32, #loc33])
#loc161 = loc(fused[#loc34, #loc35])
#loc162 = loc(fused[#loc36, #loc37])
#loc163 = loc(fused[#loc38, #loc39])
#loc164 = loc(fused[#loc40, #loc41])
#loc165 = loc(fused[#loc42, #loc43])
#loc166 = loc(fused[#loc46, #loc47])
#loc168 = loc(fused[#loc51, #loc52])
#loc169 = loc(fused[#loc54, #loc55, #loc56, #loc52])
#loc170 = loc(fused[#loc58, #loc59])
#loc171 = loc(fused[#loc60, #loc61])
#loc172 = loc(fused[#loc63, #loc64, #loc65, #loc59])
#loc173 = loc(fused[#loc66, #loc67])
#loc174 = loc(fused[#loc70, #loc71])
#loc175 = loc(fused[#loc72, #loc73])
#loc176 = loc(fused[#loc76, #loc74])
#loc177 = loc(fused[#loc78, #loc77])
#loc178 = loc(fused[#loc80, #loc79])
#loc179 = loc(fused[#loc83, #loc84])
#loc180 = loc(fused[#loc85, #loc86])
#loc182 = loc(fused[#loc90, #loc91])
#loc183 = loc(fused[#loc93, #loc91])
#loc184 = loc(fused[#loc94, #loc95])
#loc185 = loc(fused[#loc96, #loc97])
#loc186 = loc(fused[#loc99, #loc100, #loc101, #loc95])
#loc187 = loc(fused[#loc102, #loc103])
#loc188 = loc(fused[#loc107, #loc108])
#loc189 = loc(fused[#loc109, #loc110])
#loc190 = loc(fused[#loc113, #loc111])
#loc191 = loc(fused[#loc115, #loc114])
#loc192 = loc(fused[#loc117, #loc116])
#loc193 = loc(fused[#loc120, #loc121])
#loc194 = loc(fused[#loc122, #loc123])
#loc196 = loc(fused[#loc127, #loc128])
#loc197 = loc(fused[#loc130, #loc128])
#loc198 = loc(fused[#loc131, #loc132])
#loc199 = loc(fused[#loc134, #loc135])
#loc200 = loc(fused[#loc136, #loc137])
#loc201 = loc(fused[#loc140, #loc138])
#loc202 = loc(fused[#loc142, #loc141])
#loc203 = loc(fused[#loc144, #loc143])
