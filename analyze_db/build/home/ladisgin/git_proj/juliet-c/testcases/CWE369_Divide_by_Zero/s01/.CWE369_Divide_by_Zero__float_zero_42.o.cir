!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc3 = loc("CWE369_Divide_by_Zero__float_zero_42.c":24:24)
#loc4 = loc("CWE369_Divide_by_Zero__float_zero_42.c":24:30)
#loc38 = loc("CWE369_Divide_by_Zero__float_zero_42.c":70:28)
#loc39 = loc("CWE369_Divide_by_Zero__float_zero_42.c":70:34)
#loc75 = loc("CWE369_Divide_by_Zero__float_zero_42.c":49:28)
#loc76 = loc("CWE369_Divide_by_Zero__float_zero_42.c":49:34)
#loc101 = loc(fused[#loc3, #loc4])
#loc116 = loc(fused[#loc38, #loc39])
#loc130 = loc(fused[#loc75, #loc76])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func internal private @badSource(%arg0: !cir.float loc(fused[#loc3, #loc4])) -> !cir.float extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc101)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["__retval"] {alignment = 4 : i64} loc(#loc2)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc5)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc6)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc102)
    %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc8)
    cir.store %3, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc103)
    %4 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc103)
    cir.return %4 : !cir.float loc(#loc103)
  } loc(#loc100)
  cir.func private @printIntLine(!s32i) loc(#loc104)
  cir.func no_proto @CWE369_Divide_by_Zero__float_zero_42_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc106)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc107)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc18)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc108)
    %3 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc20)
    %4 = cir.call @badSource(%3) : (!cir.float) -> !cir.float loc(#loc21)
    cir.store %4, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc109)
    cir.br ^bb1 loc(#loc110)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc26)
    %6 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc27)
    %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc27)
    %8 = cir.binop(div, %5, %7) : !cir.double loc(#loc111)
    %9 = cir.cast(float_to_int, %8 : !cir.double), !s32i loc(#loc111)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc29)
    cir.br ^bb2 loc(#loc25)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc13)
  } loc(#loc105)
  cir.func no_proto @CWE369_Divide_by_Zero__float_zero_42_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc113)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc114)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc112)
  cir.func internal private @goodB2GSource(%arg0: !cir.float loc(fused[#loc38, #loc39])) -> !cir.float extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc116)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["__retval"] {alignment = 4 : i64} loc(#loc37)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc40)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc41)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc117)
    %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc43)
    cir.store %3, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc118)
    %4 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc118)
    cir.return %4 : !cir.float loc(#loc118)
  } loc(#loc115)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc119)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc47)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc121)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc122)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc54)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc123)
    %3 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc56)
    %4 = cir.call @goodB2GSource(%3) : (!cir.float) -> !cir.float loc(#loc57)
    cir.store %4, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc124)
    cir.br ^bb1 loc(#loc125)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc62)
    %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc62)
    %7 = cir.fabs %6 : !cir.double loc(#loc62)
    %8 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc63)
    %9 = cir.cmp(gt, %7, %8) : !cir.double, !cir.bool loc(#loc126)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc127)
  ^bb2:  // pred: ^bb1
    %10 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc68)
    %11 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc69)
    %12 = cir.cast(floating, %11 : !cir.float), !cir.double loc(#loc69)
    %13 = cir.binop(div, %10, %12) : !cir.double loc(#loc128)
    %14 = cir.cast(float_to_int, %13 : !cir.double), !s32i loc(#loc128)
    cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc121)
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc71)
    cir.br ^bb4 loc(#loc66)
  ^bb3:  // pred: ^bb1
    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc47)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    cir.br ^bb4 loc(#loc61)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc61)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc49)
  } loc(#loc120)
  cir.func internal private @goodG2BSource(%arg0: !cir.float loc(fused[#loc75, #loc76])) -> !cir.float extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc130)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["__retval"] {alignment = 4 : i64} loc(#loc74)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc77)
    %2 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc78)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc131)
    %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc80)
    cir.store %3, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc132)
    %4 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc132)
    cir.return %4 : !cir.float loc(#loc132)
  } loc(#loc129)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc134)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc135)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc88)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc136)
    %3 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc90)
    %4 = cir.call @goodG2BSource(%3) : (!cir.float) -> !cir.float loc(#loc91)
    cir.store %4, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc137)
    cir.br ^bb1 loc(#loc138)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc96)
    %6 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc97)
    %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc97)
    %8 = cir.binop(div, %5, %7) : !cir.double loc(#loc139)
    %9 = cir.cast(float_to_int, %8 : !cir.double), !s32i loc(#loc139)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc134)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc98)
    cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc99)
    cir.br ^bb2 loc(#loc95)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc83)
  } loc(#loc133)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_42.c":0:0)
#loc1 = loc("CWE369_Divide_by_Zero__float_zero_42.c":24:1)
#loc2 = loc("CWE369_Divide_by_Zero__float_zero_42.c":29:1)
#loc5 = loc("CWE369_Divide_by_Zero__float_zero_42.c":25:1)
#loc6 = loc("CWE369_Divide_by_Zero__float_zero_42.c":27:12)
#loc7 = loc("CWE369_Divide_by_Zero__float_zero_42.c":27:5)
#loc8 = loc("CWE369_Divide_by_Zero__float_zero_42.c":28:12)
#loc9 = loc("CWE369_Divide_by_Zero__float_zero_42.c":28:5)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE369_Divide_by_Zero__float_zero_42.c":31:1)
#loc13 = loc("CWE369_Divide_by_Zero__float_zero_42.c":42:1)
#loc14 = loc("CWE369_Divide_by_Zero__float_zero_42.c":39:9)
#loc15 = loc("CWE369_Divide_by_Zero__float_zero_42.c":39:40)
#loc16 = loc("CWE369_Divide_by_Zero__float_zero_42.c":33:5)
#loc17 = loc("CWE369_Divide_by_Zero__float_zero_42.c":33:11)
#loc18 = loc("CWE369_Divide_by_Zero__float_zero_42.c":35:12)
#loc19 = loc("CWE369_Divide_by_Zero__float_zero_42.c":35:5)
#loc20 = loc("CWE369_Divide_by_Zero__float_zero_42.c":36:22)
#loc21 = loc("CWE369_Divide_by_Zero__float_zero_42.c":36:12)
#loc22 = loc("CWE369_Divide_by_Zero__float_zero_42.c":36:5)
#loc23 = loc("CWE369_Divide_by_Zero__float_zero_42.c":36:26)
#loc24 = loc("CWE369_Divide_by_Zero__float_zero_42.c":37:5)
#loc25 = loc("CWE369_Divide_by_Zero__float_zero_42.c":41:5)
#loc26 = loc("CWE369_Divide_by_Zero__float_zero_42.c":39:28)
#loc27 = loc("CWE369_Divide_by_Zero__float_zero_42.c":39:36)
#loc28 = loc("CWE369_Divide_by_Zero__float_zero_42.c":40:22)
#loc29 = loc("CWE369_Divide_by_Zero__float_zero_42.c":40:9)
#loc30 = loc("CWE369_Divide_by_Zero__float_zero_42.c":95:1)
#loc31 = loc("CWE369_Divide_by_Zero__float_zero_42.c":99:1)
#loc32 = loc("CWE369_Divide_by_Zero__float_zero_42.c":97:5)
#loc33 = loc("CWE369_Divide_by_Zero__float_zero_42.c":97:13)
#loc34 = loc("CWE369_Divide_by_Zero__float_zero_42.c":98:5)
#loc35 = loc("CWE369_Divide_by_Zero__float_zero_42.c":98:13)
#loc36 = loc("CWE369_Divide_by_Zero__float_zero_42.c":70:1)
#loc37 = loc("CWE369_Divide_by_Zero__float_zero_42.c":75:1)
#loc40 = loc("CWE369_Divide_by_Zero__float_zero_42.c":71:1)
#loc41 = loc("CWE369_Divide_by_Zero__float_zero_42.c":73:12)
#loc42 = loc("CWE369_Divide_by_Zero__float_zero_42.c":73:5)
#loc43 = loc("CWE369_Divide_by_Zero__float_zero_42.c":74:12)
#loc44 = loc("CWE369_Divide_by_Zero__float_zero_42.c":74:5)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc47 = loc("CWE369_Divide_by_Zero__float_zero_42.c":91:19)
#loc48 = loc("CWE369_Divide_by_Zero__float_zero_42.c":77:1)
#loc49 = loc("CWE369_Divide_by_Zero__float_zero_42.c":93:1)
#loc50 = loc("CWE369_Divide_by_Zero__float_zero_42.c":86:9)
#loc51 = loc("CWE369_Divide_by_Zero__float_zero_42.c":86:40)
#loc52 = loc("CWE369_Divide_by_Zero__float_zero_42.c":79:5)
#loc53 = loc("CWE369_Divide_by_Zero__float_zero_42.c":79:11)
#loc54 = loc("CWE369_Divide_by_Zero__float_zero_42.c":81:12)
#loc55 = loc("CWE369_Divide_by_Zero__float_zero_42.c":81:5)
#loc56 = loc("CWE369_Divide_by_Zero__float_zero_42.c":82:26)
#loc57 = loc("CWE369_Divide_by_Zero__float_zero_42.c":82:12)
#loc58 = loc("CWE369_Divide_by_Zero__float_zero_42.c":82:5)
#loc59 = loc("CWE369_Divide_by_Zero__float_zero_42.c":82:30)
#loc60 = loc("CWE369_Divide_by_Zero__float_zero_42.c":84:5)
#loc61 = loc("CWE369_Divide_by_Zero__float_zero_42.c":92:5)
#loc62 = loc("CWE369_Divide_by_Zero__float_zero_42.c":84:13)
#loc63 = loc("CWE369_Divide_by_Zero__float_zero_42.c":84:21)
#loc64 = loc("CWE369_Divide_by_Zero__float_zero_42.c":84:8)
#loc65 = loc("CWE369_Divide_by_Zero__float_zero_42.c":85:5)
#loc66 = loc("CWE369_Divide_by_Zero__float_zero_42.c":88:5)
#loc67 = loc("CWE369_Divide_by_Zero__float_zero_42.c":90:5)
#loc68 = loc("CWE369_Divide_by_Zero__float_zero_42.c":86:28)
#loc69 = loc("CWE369_Divide_by_Zero__float_zero_42.c":86:36)
#loc70 = loc("CWE369_Divide_by_Zero__float_zero_42.c":87:22)
#loc71 = loc("CWE369_Divide_by_Zero__float_zero_42.c":87:9)
#loc72 = loc("CWE369_Divide_by_Zero__float_zero_42.c":91:9)
#loc73 = loc("CWE369_Divide_by_Zero__float_zero_42.c":49:1)
#loc74 = loc("CWE369_Divide_by_Zero__float_zero_42.c":54:1)
#loc77 = loc("CWE369_Divide_by_Zero__float_zero_42.c":50:1)
#loc78 = loc("CWE369_Divide_by_Zero__float_zero_42.c":52:12)
#loc79 = loc("CWE369_Divide_by_Zero__float_zero_42.c":52:5)
#loc80 = loc("CWE369_Divide_by_Zero__float_zero_42.c":53:12)
#loc81 = loc("CWE369_Divide_by_Zero__float_zero_42.c":53:5)
#loc82 = loc("CWE369_Divide_by_Zero__float_zero_42.c":56:1)
#loc83 = loc("CWE369_Divide_by_Zero__float_zero_42.c":67:1)
#loc84 = loc("CWE369_Divide_by_Zero__float_zero_42.c":64:9)
#loc85 = loc("CWE369_Divide_by_Zero__float_zero_42.c":64:40)
#loc86 = loc("CWE369_Divide_by_Zero__float_zero_42.c":58:5)
#loc87 = loc("CWE369_Divide_by_Zero__float_zero_42.c":58:11)
#loc88 = loc("CWE369_Divide_by_Zero__float_zero_42.c":60:12)
#loc89 = loc("CWE369_Divide_by_Zero__float_zero_42.c":60:5)
#loc90 = loc("CWE369_Divide_by_Zero__float_zero_42.c":61:26)
#loc91 = loc("CWE369_Divide_by_Zero__float_zero_42.c":61:12)
#loc92 = loc("CWE369_Divide_by_Zero__float_zero_42.c":61:5)
#loc93 = loc("CWE369_Divide_by_Zero__float_zero_42.c":61:30)
#loc94 = loc("CWE369_Divide_by_Zero__float_zero_42.c":62:5)
#loc95 = loc("CWE369_Divide_by_Zero__float_zero_42.c":66:5)
#loc96 = loc("CWE369_Divide_by_Zero__float_zero_42.c":64:28)
#loc97 = loc("CWE369_Divide_by_Zero__float_zero_42.c":64:36)
#loc98 = loc("CWE369_Divide_by_Zero__float_zero_42.c":65:22)
#loc99 = loc("CWE369_Divide_by_Zero__float_zero_42.c":65:9)
#loc100 = loc(fused[#loc1, #loc2])
#loc102 = loc(fused[#loc7, #loc6])
#loc103 = loc(fused[#loc9, #loc8])
#loc104 = loc(fused[#loc10, #loc11])
#loc105 = loc(fused[#loc12, #loc13])
#loc106 = loc(fused[#loc14, #loc15])
#loc107 = loc(fused[#loc16, #loc17])
#loc108 = loc(fused[#loc19, #loc18])
#loc109 = loc(fused[#loc22, #loc23])
#loc110 = loc(fused[#loc24, #loc25])
#loc111 = loc(fused[#loc26, #loc27])
#loc112 = loc(fused[#loc30, #loc31])
#loc113 = loc(fused[#loc32, #loc33])
#loc114 = loc(fused[#loc34, #loc35])
#loc115 = loc(fused[#loc36, #loc37])
#loc117 = loc(fused[#loc42, #loc41])
#loc118 = loc(fused[#loc44, #loc43])
#loc119 = loc(fused[#loc45, #loc46])
#loc120 = loc(fused[#loc48, #loc49])
#loc121 = loc(fused[#loc50, #loc51])
#loc122 = loc(fused[#loc52, #loc53])
#loc123 = loc(fused[#loc55, #loc54])
#loc124 = loc(fused[#loc58, #loc59])
#loc125 = loc(fused[#loc60, #loc61])
#loc126 = loc(fused[#loc64, #loc63])
#loc127 = loc(fused[#loc65, #loc66, #loc67, #loc61])
#loc128 = loc(fused[#loc68, #loc69])
#loc129 = loc(fused[#loc73, #loc74])
#loc131 = loc(fused[#loc79, #loc78])
#loc132 = loc(fused[#loc81, #loc80])
#loc133 = loc(fused[#loc82, #loc83])
#loc134 = loc(fused[#loc84, #loc85])
#loc135 = loc(fused[#loc86, #loc87])
#loc136 = loc(fused[#loc89, #loc88])
#loc137 = loc(fused[#loc92, #loc93])
#loc138 = loc(fused[#loc94, #loc95])
#loc139 = loc(fused[#loc96, #loc97])
