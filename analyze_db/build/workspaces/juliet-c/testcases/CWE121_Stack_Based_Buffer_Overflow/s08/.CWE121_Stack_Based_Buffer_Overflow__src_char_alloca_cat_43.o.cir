!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":26:23)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":26:31)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":52:27)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":52:35)
#loc77 = loc(fused[#loc3, #loc4])
#loc89 = loc(fused[#loc41, #loc42])
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s08/CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func internal private @_ZN58CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43L9badSourceERPc(%arg0: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc3, #loc4])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["data", init, const] {alignment = 8 : i64} loc(#loc77)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc5)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc6)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc6)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc6)
    %4 = cir.const #cir.int<65> : !s8i loc(#loc7)
    %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc7)
    %6 = cir.const #cir.int<100> : !s32i loc(#loc8)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc8)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc8)
    cir.libc.memset %9 bytes from %3 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc78)
    %10 = cir.const #cir.int<0> : !s8i loc(#loc12)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc13)
    %12 = cir.load %11 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc13)
    %13 = cir.const #cir.int<100> : !s32i loc(#loc14)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc14)
    %16 = cir.ptr_stride(%12 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc16)
    cir.store %10, %16 : !s8i, !cir.ptr<!s8i> loc(#loc79)
    cir.return loc(#loc2)
  } loc(#loc76)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr1) loc(#loc80)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc81)
  cir.func @_ZN58CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_433badEv() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc83)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc84)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc85)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc28)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc28)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc28)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc28)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc28)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc28)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc28)
    cir.store %9, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc85)
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc29)
    cir.store %10, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc86)
    cir.call @_ZN58CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43L9badSourceERPc(%1) : (!cir.ptr<!cir.ptr<!s8i>>) -> () loc(#loc31)
    cir.br ^bb1 loc(#loc87)
  ^bb1:  // pred: ^bb0
    %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc83)
    cir.store %11, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc83)
    %12 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc34)
    %13 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc35)
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
    %15 = cir.call @strcat(%13, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr1) loc(#loc34)
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc38)
    cir.br ^bb2 loc(#loc33)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc22)
  } loc(#loc82)
  cir.func internal private @_ZN58CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43L13goodG2BSourceERPc(%arg0: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc41, #loc42])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["data", init, const] {alignment = 8 : i64} loc(#loc89)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc43)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc44)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc44)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc44)
    %4 = cir.const #cir.int<65> : !s8i loc(#loc45)
    %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc45)
    %6 = cir.const #cir.int<50> : !s32i loc(#loc46)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc46)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc46)
    cir.libc.memset %9 bytes from %3 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc90)
    %10 = cir.const #cir.int<0> : !s8i loc(#loc50)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc51)
    %12 = cir.load %11 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
    %13 = cir.const #cir.int<50> : !s32i loc(#loc52)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc52)
    %16 = cir.ptr_stride(%12 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc54)
    cir.store %10, %16 : !s8i, !cir.ptr<!s8i> loc(#loc91)
    cir.return loc(#loc40)
  } loc(#loc88)
  cir.func internal private @_ZN58CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc93)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc94)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc95)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc62)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc62)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc62)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc62)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc62)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc62)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc62)
    cir.store %9, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc95)
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc63)
    cir.store %10, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc96)
    cir.call @_ZN58CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43L13goodG2BSourceERPc(%1) : (!cir.ptr<!cir.ptr<!s8i>>) -> () loc(#loc65)
    cir.br ^bb1 loc(#loc97)
  ^bb1:  // pred: ^bb0
    %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc93)
    cir.store %11, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc93)
    %12 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc68)
    %13 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc69)
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc70)
    %15 = cir.call @strcat(%13, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr1) loc(#loc68)
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    cir.br ^bb2 loc(#loc67)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc56)
  } loc(#loc92)
  cir.func @_ZN58CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_434goodEv() extra(#fn_attr) {
    cir.call @_ZN58CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43L7goodG2BEv() : () -> () loc(#loc75)
    cir.return loc(#loc74)
  } loc(#loc98)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s08/CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":26:1)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":31:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":27:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":29:12)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":29:18)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":29:23)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":29:27)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":29:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":29:28)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":30:19)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":30:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":30:10)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":30:14)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":30:15)
#loc17 = loc("/usr/include/string.h":149:1)
#loc18 = loc("/usr/include/string.h":150:14)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":33:1)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":45:1)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":40:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":40:25)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":35:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":35:12)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":36:5)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":36:33)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":37:12)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":37:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":38:5)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":39:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":44:5)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":42:9)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":42:16)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":42:22)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":43:19)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":43:9)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":52:1)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":57:1)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":53:1)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":55:12)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":55:18)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":55:23)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":55:26)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":55:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":55:27)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":56:18)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":56:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":56:10)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":56:13)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":56:14)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":59:1)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":71:1)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":66:9)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":66:25)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":61:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":61:12)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":62:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":62:33)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":63:12)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":63:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":64:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":65:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":70:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":68:9)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":68:16)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":68:22)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":69:19)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":69:9)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":73:1)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":76:1)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_43.cpp":75:5)
#loc76 = loc(fused[#loc1, #loc2])
#loc78 = loc(fused[#loc10, #loc11])
#loc79 = loc(fused[#loc13, #loc12])
#loc80 = loc(fused[#loc17, #loc18])
#loc81 = loc(fused[#loc19, #loc20])
#loc82 = loc(fused[#loc21, #loc22])
#loc83 = loc(fused[#loc23, #loc24])
#loc84 = loc(fused[#loc25, #loc26])
#loc85 = loc(fused[#loc27, #loc28])
#loc86 = loc(fused[#loc30, #loc29])
#loc87 = loc(fused[#loc32, #loc33])
#loc88 = loc(fused[#loc39, #loc40])
#loc90 = loc(fused[#loc48, #loc49])
#loc91 = loc(fused[#loc51, #loc50])
#loc92 = loc(fused[#loc55, #loc56])
#loc93 = loc(fused[#loc57, #loc58])
#loc94 = loc(fused[#loc59, #loc60])
#loc95 = loc(fused[#loc61, #loc62])
#loc96 = loc(fused[#loc64, #loc63])
#loc97 = loc(fused[#loc66, #loc67])
#loc98 = loc(fused[#loc73, #loc74])
