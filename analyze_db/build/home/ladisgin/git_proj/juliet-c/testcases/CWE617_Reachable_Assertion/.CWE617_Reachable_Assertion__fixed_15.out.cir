!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc41 = loc("CWE617_Reachable_Assertion__fixed_15.c":107:10)
#loc42 = loc("CWE617_Reachable_Assertion__fixed_15.c":107:14)
#loc43 = loc("CWE617_Reachable_Assertion__fixed_15.c":107:20)
#loc44 = loc("CWE617_Reachable_Assertion__fixed_15.c":107:32)
#loc112 = loc(fused[#loc41, #loc42])
#loc113 = loc(fused[#loc43, #loc44])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc99)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc3)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc100)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc6)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"CWE617_Reachable_Assertion__fixed_15.c\00" : !cir.array<!s8i x 39>> : !cir.array<!s8i x 39> {alignment = 1 : i64} loc(#loc6)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void CWE617_Reachable_Assertion__fixed_15_bad()\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc102)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc12)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc103)
    cir.scope {
      %4 = cir.const #cir.int<6> : !s32i loc(#loc16)
      cir.switch (%4 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %5 = cir.const #cir.int<5> : !s32i loc(#loc18)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc19)
          %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc18)
          cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc105)
          cir.break loc(#loc21)
        } loc(#loc17)
        cir.case(default, []) {
          %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc3)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc3)
          cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc23)
          cir.break loc(#loc24)
        } loc(#loc22)
        cir.yield loc(#loc14)
      } loc(#loc14)
    } loc(#loc104)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc6)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc6)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc6)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc6)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc6)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc6)
          %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc6)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc6)
          %11 = cir.const #cir.int<42> : !s32i loc(#loc6)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc6)
          %13 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc6)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc6)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc6)
        } loc(#loc6)
      } loc(#loc6)
    } loc(#loc6)
    cir.return loc(#loc8)
  } loc(#loc101)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc107)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc108)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    cir.return loc(#loc26)
  } loc(#loc106)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc109)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc110)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc35)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc36)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc38)
  cir.func @main(%arg0: !s32i loc(fused[#loc41, #loc42]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc43, #loc44])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc112)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc113)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc40)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc45)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc45)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc46)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc47)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc47)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc48)
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc35)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    %8 = cir.get_global @CWE617_Reachable_Assertion__fixed_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc114)
    cir.call @CWE617_Reachable_Assertion__fixed_15_good() : () -> () loc(#loc50)
    %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc36)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc37)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    %13 = cir.get_global @CWE617_Reachable_Assertion__fixed_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc115)
    cir.call @CWE617_Reachable_Assertion__fixed_15_bad() : () -> () loc(#loc54)
    %14 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc38)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc57)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc116)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc116)
    cir.return %17 : !s32i loc(#loc116)
  } loc(#loc111)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"void goodG2B1()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc59)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc118)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc65)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    cir.scope {
      %4 = cir.const #cir.int<5> : !s32i loc(#loc69)
      cir.switch (%4 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc71)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc71)
          cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc72)
          cir.break loc(#loc73)
        } loc(#loc70)
        cir.case(default, []) {
          %5 = cir.const #cir.int<5> : !s32i loc(#loc75)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc76)
          %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc75)
          cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc121)
          cir.break loc(#loc78)
        } loc(#loc74)
        cir.yield loc(#loc67)
      } loc(#loc67)
    } loc(#loc120)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc59)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc59)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc59)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc59)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc59)
          %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc59)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc59)
          %11 = cir.const #cir.int<67> : !s32i loc(#loc59)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc59)
          %13 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc59)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc59)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc59)
        } loc(#loc59)
      } loc(#loc59)
    } loc(#loc59)
    cir.return loc(#loc61)
  } loc(#loc117)
  cir.global "private" constant cir_private dsolocal @".str.9" = #cir.const_array<"void goodG2B2()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc79)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc123)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc85)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc124)
    cir.scope {
      %4 = cir.const #cir.int<6> : !s32i loc(#loc89)
      cir.switch (%4 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %5 = cir.const #cir.int<5> : !s32i loc(#loc91)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc92)
          %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc91)
          cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc126)
          cir.break loc(#loc94)
        } loc(#loc90)
        cir.case(default, []) {
          %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc96)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc96)
          cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc97)
          cir.break loc(#loc98)
        } loc(#loc95)
        cir.yield loc(#loc87)
      } loc(#loc87)
    } loc(#loc125)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc79)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc79)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc79)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc79)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc79)
          %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc79)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc79)
          %11 = cir.const #cir.int<88> : !s32i loc(#loc79)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc79)
          %13 = cir.get_global @".str.9" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc79)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc79)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc79)
        } loc(#loc79)
      } loc(#loc79)
    } loc(#loc79)
    cir.return loc(#loc81)
  } loc(#loc122)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_15.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE617_Reachable_Assertion__fixed_15.c":38:19)
#loc4 = loc("/usr/include/assert.h":67:1)
#loc5 = loc("/usr/include/assert.h":69:43)
#loc6 = loc("CWE617_Reachable_Assertion__fixed_15.c":42:5)
#loc7 = loc("CWE617_Reachable_Assertion__fixed_15.c":25:1)
#loc8 = loc("CWE617_Reachable_Assertion__fixed_15.c":43:1)
#loc9 = loc("CWE617_Reachable_Assertion__fixed_15.c":27:5)
#loc10 = loc("CWE617_Reachable_Assertion__fixed_15.c":27:9)
#loc11 = loc("CWE617_Reachable_Assertion__fixed_15.c":29:13)
#loc12 = loc("CWE617_Reachable_Assertion__fixed_15.c":29:12)
#loc13 = loc("CWE617_Reachable_Assertion__fixed_15.c":29:5)
#loc14 = loc("CWE617_Reachable_Assertion__fixed_15.c":30:5)
#loc15 = loc("CWE617_Reachable_Assertion__fixed_15.c":40:5)
#loc16 = loc("CWE617_Reachable_Assertion__fixed_15.c":30:12)
#loc17 = loc("CWE617_Reachable_Assertion__fixed_15.c":32:5)
#loc18 = loc("CWE617_Reachable_Assertion__fixed_15.c":34:16)
#loc19 = loc("CWE617_Reachable_Assertion__fixed_15.c":34:29)
#loc20 = loc("CWE617_Reachable_Assertion__fixed_15.c":34:9)
#loc21 = loc("CWE617_Reachable_Assertion__fixed_15.c":35:9)
#loc22 = loc("CWE617_Reachable_Assertion__fixed_15.c":36:5)
#loc23 = loc("CWE617_Reachable_Assertion__fixed_15.c":38:9)
#loc24 = loc("CWE617_Reachable_Assertion__fixed_15.c":39:9)
#loc25 = loc("CWE617_Reachable_Assertion__fixed_15.c":91:1)
#loc26 = loc("CWE617_Reachable_Assertion__fixed_15.c":95:1)
#loc27 = loc("CWE617_Reachable_Assertion__fixed_15.c":93:5)
#loc28 = loc("CWE617_Reachable_Assertion__fixed_15.c":93:14)
#loc29 = loc("CWE617_Reachable_Assertion__fixed_15.c":94:5)
#loc30 = loc("CWE617_Reachable_Assertion__fixed_15.c":94:14)
#loc31 = loc("/usr/include/stdlib.h":575:1)
#loc32 = loc("/usr/include/stdlib.h":575:41)
#loc33 = loc("/usr/include/time.h":76:1)
#loc34 = loc("/usr/include/time.h":76:38)
#loc35 = loc("CWE617_Reachable_Assertion__fixed_15.c":112:15)
#loc36 = loc("CWE617_Reachable_Assertion__fixed_15.c":114:15)
#loc37 = loc("CWE617_Reachable_Assertion__fixed_15.c":117:15)
#loc38 = loc("CWE617_Reachable_Assertion__fixed_15.c":119:15)
#loc39 = loc("CWE617_Reachable_Assertion__fixed_15.c":107:1)
#loc40 = loc("CWE617_Reachable_Assertion__fixed_15.c":122:1)
#loc45 = loc("CWE617_Reachable_Assertion__fixed_15.c":108:1)
#loc46 = loc("CWE617_Reachable_Assertion__fixed_15.c":110:27)
#loc47 = loc("CWE617_Reachable_Assertion__fixed_15.c":110:22)
#loc48 = loc("CWE617_Reachable_Assertion__fixed_15.c":110:5)
#loc49 = loc("CWE617_Reachable_Assertion__fixed_15.c":112:5)
#loc50 = loc("CWE617_Reachable_Assertion__fixed_15.c":113:5)
#loc51 = loc("CWE617_Reachable_Assertion__fixed_15.c":113:47)
#loc52 = loc("CWE617_Reachable_Assertion__fixed_15.c":114:5)
#loc53 = loc("CWE617_Reachable_Assertion__fixed_15.c":117:5)
#loc54 = loc("CWE617_Reachable_Assertion__fixed_15.c":118:5)
#loc55 = loc("CWE617_Reachable_Assertion__fixed_15.c":118:46)
#loc56 = loc("CWE617_Reachable_Assertion__fixed_15.c":119:5)
#loc57 = loc("CWE617_Reachable_Assertion__fixed_15.c":121:12)
#loc58 = loc("CWE617_Reachable_Assertion__fixed_15.c":121:5)
#loc59 = loc("CWE617_Reachable_Assertion__fixed_15.c":67:5)
#loc60 = loc("CWE617_Reachable_Assertion__fixed_15.c":50:1)
#loc61 = loc("CWE617_Reachable_Assertion__fixed_15.c":68:1)
#loc62 = loc("CWE617_Reachable_Assertion__fixed_15.c":52:5)
#loc63 = loc("CWE617_Reachable_Assertion__fixed_15.c":52:9)
#loc64 = loc("CWE617_Reachable_Assertion__fixed_15.c":54:13)
#loc65 = loc("CWE617_Reachable_Assertion__fixed_15.c":54:12)
#loc66 = loc("CWE617_Reachable_Assertion__fixed_15.c":54:5)
#loc67 = loc("CWE617_Reachable_Assertion__fixed_15.c":55:5)
#loc68 = loc("CWE617_Reachable_Assertion__fixed_15.c":65:5)
#loc69 = loc("CWE617_Reachable_Assertion__fixed_15.c":55:12)
#loc70 = loc("CWE617_Reachable_Assertion__fixed_15.c":57:5)
#loc71 = loc("CWE617_Reachable_Assertion__fixed_15.c":59:19)
#loc72 = loc("CWE617_Reachable_Assertion__fixed_15.c":59:9)
#loc73 = loc("CWE617_Reachable_Assertion__fixed_15.c":60:9)
#loc74 = loc("CWE617_Reachable_Assertion__fixed_15.c":61:5)
#loc75 = loc("CWE617_Reachable_Assertion__fixed_15.c":63:16)
#loc76 = loc("CWE617_Reachable_Assertion__fixed_15.c":63:29)
#loc77 = loc("CWE617_Reachable_Assertion__fixed_15.c":63:9)
#loc78 = loc("CWE617_Reachable_Assertion__fixed_15.c":64:9)
#loc79 = loc("CWE617_Reachable_Assertion__fixed_15.c":88:5)
#loc80 = loc("CWE617_Reachable_Assertion__fixed_15.c":71:1)
#loc81 = loc("CWE617_Reachable_Assertion__fixed_15.c":89:1)
#loc82 = loc("CWE617_Reachable_Assertion__fixed_15.c":73:5)
#loc83 = loc("CWE617_Reachable_Assertion__fixed_15.c":73:9)
#loc84 = loc("CWE617_Reachable_Assertion__fixed_15.c":75:13)
#loc85 = loc("CWE617_Reachable_Assertion__fixed_15.c":75:12)
#loc86 = loc("CWE617_Reachable_Assertion__fixed_15.c":75:5)
#loc87 = loc("CWE617_Reachable_Assertion__fixed_15.c":76:5)
#loc88 = loc("CWE617_Reachable_Assertion__fixed_15.c":86:5)
#loc89 = loc("CWE617_Reachable_Assertion__fixed_15.c":76:12)
#loc90 = loc("CWE617_Reachable_Assertion__fixed_15.c":78:5)
#loc91 = loc("CWE617_Reachable_Assertion__fixed_15.c":80:16)
#loc92 = loc("CWE617_Reachable_Assertion__fixed_15.c":80:29)
#loc93 = loc("CWE617_Reachable_Assertion__fixed_15.c":80:9)
#loc94 = loc("CWE617_Reachable_Assertion__fixed_15.c":81:9)
#loc95 = loc("CWE617_Reachable_Assertion__fixed_15.c":82:5)
#loc96 = loc("CWE617_Reachable_Assertion__fixed_15.c":84:19)
#loc97 = loc("CWE617_Reachable_Assertion__fixed_15.c":84:9)
#loc98 = loc("CWE617_Reachable_Assertion__fixed_15.c":85:9)
#loc99 = loc(fused[#loc1, #loc2])
#loc100 = loc(fused[#loc4, #loc5])
#loc101 = loc(fused[#loc7, #loc8])
#loc102 = loc(fused[#loc9, #loc10])
#loc103 = loc(fused[#loc13, #loc11])
#loc104 = loc(fused[#loc14, #loc15])
#loc105 = loc(fused[#loc20, #loc19])
#loc106 = loc(fused[#loc25, #loc26])
#loc107 = loc(fused[#loc27, #loc28])
#loc108 = loc(fused[#loc29, #loc30])
#loc109 = loc(fused[#loc31, #loc32])
#loc110 = loc(fused[#loc33, #loc34])
#loc111 = loc(fused[#loc39, #loc40])
#loc114 = loc(fused[#loc50, #loc51])
#loc115 = loc(fused[#loc54, #loc55])
#loc116 = loc(fused[#loc58, #loc57])
#loc117 = loc(fused[#loc60, #loc61])
#loc118 = loc(fused[#loc62, #loc63])
#loc119 = loc(fused[#loc66, #loc64])
#loc120 = loc(fused[#loc67, #loc68])
#loc121 = loc(fused[#loc77, #loc76])
#loc122 = loc(fused[#loc80, #loc81])
#loc123 = loc(fused[#loc82, #loc83])
#loc124 = loc(fused[#loc86, #loc84])
#loc125 = loc(fused[#loc87, #loc88])
#loc126 = loc(fused[#loc93, #loc92])
