!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc156)
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc157)
  cir.func private  @usleep(!u32i) -> !s32i loc(#loc158)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc159)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Sleep time possibly too long\00" : !cir.array<!s8i x 29>> : !cir.array<!s8i x 29> {alignment = 1 : i64} loc(#loc9)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Sleep time OK\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc10)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"Sleep time too long\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc11)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_sleep_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc161)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc17)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc162)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc164)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc164)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc21)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc21)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc26)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc26)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc26)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc26)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc26)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc26)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc26)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc26)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc26)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc26)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc26)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc26)
          cir.yield %24 : !u32i loc(#loc26)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc26)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc26)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc26)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc26)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc26)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc26)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc26)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc26)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc26)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc26)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc26)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc26)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc26)
          cir.yield %28 : !u32i loc(#loc26)
        }) : (!cir.bool) -> !u32i loc(#loc26)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc26)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc166)
      } else {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc28)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc167)
      } loc(#loc165)
    } loc(#loc163)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc169)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc169)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc32)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc32)
      cir.if %6 {
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
        %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc37)
        %9 = cir.call @usleep(%8) : (!u32i) -> !s32i loc(#loc38)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc9)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc9)
        cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc39)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc42)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc43)
          %9 = cir.cmp(gt, %7, %8) : !s32i, !s32i loc(#loc172)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc44)
          %11 = cir.ternary(%10, true {
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc46)
            %13 = cir.const #cir.int<2000> : !s32i loc(#loc47)
            %14 = cir.cmp(le, %12, %13) : !s32i, !s32i loc(#loc173)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc48)
            %16 = cir.ternary(%15, true {
              %17 = cir.const #true loc(#loc45)
              cir.yield %17 : !cir.bool loc(#loc45)
            }, false {
              %17 = cir.const #false loc(#loc45)
              cir.yield %17 : !cir.bool loc(#loc45)
            }) : (!cir.bool) -> !cir.bool loc(#loc45)
            cir.yield %16 : !cir.bool loc(#loc45)
          }, false {
            %12 = cir.const #false loc(#loc45)
            cir.yield %12 : !cir.bool loc(#loc45)
          }) : (!cir.bool) -> !cir.bool loc(#loc45)
          cir.if %11 {
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc52)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc52)
            %14 = cir.call @usleep(%13) : (!u32i) -> !s32i loc(#loc53)
            %15 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc10)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc10)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc54)
          } else {
            %12 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc11)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc11)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc55)
          } loc(#loc174)
        } loc(#loc171)
      } loc(#loc170)
    } loc(#loc168)
    cir.return loc(#loc13)
  } loc(#loc160)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_sleep_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc176)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc177)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc60)
    cir.return loc(#loc57)
  } loc(#loc175)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc179)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc66)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc67)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc182)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc182)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc71)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc71)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc76)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc76)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc76)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc76)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc76)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc76)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc76)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc76)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc76)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc76)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc76)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc76)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc76)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc76)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc76)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc76)
          cir.yield %24 : !u32i loc(#loc76)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc76)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc76)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc76)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc76)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc76)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc76)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc76)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc76)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc76)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc76)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc76)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc76)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc76)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc76)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc76)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc76)
          cir.yield %28 : !u32i loc(#loc76)
        }) : (!cir.bool) -> !u32i loc(#loc76)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc76)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc184)
      } else {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc78)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc78)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc78)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc78)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc78)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc78)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc78)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc78)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc78)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc78)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc78)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc78)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc78)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc78)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc78)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc78)
          cir.yield %24 : !u32i loc(#loc78)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc78)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc78)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc78)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc78)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc78)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc78)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc78)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc78)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc78)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc78)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc78)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc78)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc78)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc78)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc78)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc78)
          cir.yield %28 : !u32i loc(#loc78)
        }) : (!cir.bool) -> !u32i loc(#loc78)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc78)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc185)
      } loc(#loc183)
    } loc(#loc181)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc187)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc187)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc82)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc82)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc90)
          %9 = cir.cmp(gt, %7, %8) : !s32i, !s32i loc(#loc190)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc91)
          %11 = cir.ternary(%10, true {
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc93)
            %13 = cir.const #cir.int<2000> : !s32i loc(#loc94)
            %14 = cir.cmp(le, %12, %13) : !s32i, !s32i loc(#loc191)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc95)
            %16 = cir.ternary(%15, true {
              %17 = cir.const #true loc(#loc92)
              cir.yield %17 : !cir.bool loc(#loc92)
            }, false {
              %17 = cir.const #false loc(#loc92)
              cir.yield %17 : !cir.bool loc(#loc92)
            }) : (!cir.bool) -> !cir.bool loc(#loc92)
            cir.yield %16 : !cir.bool loc(#loc92)
          }, false {
            %12 = cir.const #false loc(#loc92)
            cir.yield %12 : !cir.bool loc(#loc92)
          }) : (!cir.bool) -> !cir.bool loc(#loc92)
          cir.if %11 {
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc99)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc99)
            %14 = cir.call @usleep(%13) : (!u32i) -> !s32i loc(#loc100)
            %15 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc101)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc101)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc102)
          } else {
            %12 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc103)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc103)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc104)
          } loc(#loc192)
        } loc(#loc189)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc107)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc108)
          %9 = cir.cmp(gt, %7, %8) : !s32i, !s32i loc(#loc194)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc109)
          %11 = cir.ternary(%10, true {
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc111)
            %13 = cir.const #cir.int<2000> : !s32i loc(#loc112)
            %14 = cir.cmp(le, %12, %13) : !s32i, !s32i loc(#loc195)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc113)
            %16 = cir.ternary(%15, true {
              %17 = cir.const #true loc(#loc110)
              cir.yield %17 : !cir.bool loc(#loc110)
            }, false {
              %17 = cir.const #false loc(#loc110)
              cir.yield %17 : !cir.bool loc(#loc110)
            }) : (!cir.bool) -> !cir.bool loc(#loc110)
            cir.yield %16 : !cir.bool loc(#loc110)
          }, false {
            %12 = cir.const #false loc(#loc110)
            cir.yield %12 : !cir.bool loc(#loc110)
          }) : (!cir.bool) -> !cir.bool loc(#loc110)
          cir.if %11 {
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc117)
            %14 = cir.call @usleep(%13) : (!u32i) -> !s32i loc(#loc118)
            %15 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc119)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc119)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc120)
          } else {
            %12 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc121)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc121)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc122)
          } loc(#loc196)
        } loc(#loc193)
      } loc(#loc188)
    } loc(#loc186)
    cir.return loc(#loc63)
  } loc(#loc178)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc198)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc127)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc128)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc199)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc201)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc201)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc132)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc132)
      cir.if %6 {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc137)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc203)
      } else {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc139)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
      } loc(#loc202)
    } loc(#loc200)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc206)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc206)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc143)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc143)
      cir.if %6 {
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc148)
        %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc148)
        %9 = cir.call @usleep(%8) : (!u32i) -> !s32i loc(#loc149)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc150)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc150)
        cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc151)
      } else {
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc152)
        %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc152)
        %9 = cir.call @usleep(%8) : (!u32i) -> !s32i loc(#loc153)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc154)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc154)
        cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc155)
      } loc(#loc207)
    } loc(#loc205)
    cir.return loc(#loc124)
  } loc(#loc197)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("/usr/include/unistd.h":480:1)
#loc6 = loc("/usr/include/unistd.h":480:43)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":49:19)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":57:23)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":61:23)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":30:1)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":64:1)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":32:5)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":32:9)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":34:14)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":34:13)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":34:5)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":35:5)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":44:5)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":35:8)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":35:33)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":36:5)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":39:5)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":41:5)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":38:17)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":38:9)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":43:17)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":43:9)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":45:5)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":63:5)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":45:8)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":45:33)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":46:5)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":50:5)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":52:5)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":48:15)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":48:9)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":49:9)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":54:9)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":62:9)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":54:13)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":54:21)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":54:19)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":54:23)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":54:26)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":54:35)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":54:32)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":55:9)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":58:9)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":60:9)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":56:19)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":56:13)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":57:13)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":61:13)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":148:1)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":152:1)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":150:5)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":150:13)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":151:5)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":151:13)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":73:1)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":114:1)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":75:5)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":75:9)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":77:14)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":77:13)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":77:5)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":78:5)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":87:5)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":78:8)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":78:33)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":79:5)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":82:5)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":84:5)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":81:17)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":81:9)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":86:17)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":86:9)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":88:5)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":113:5)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":88:8)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":88:33)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":89:5)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":100:5)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":102:5)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":91:9)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":99:9)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":91:13)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":91:21)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":91:19)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":91:23)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":91:26)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":91:35)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":91:32)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":92:9)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":95:9)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":97:9)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":93:19)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":93:13)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":94:23)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":94:13)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":98:23)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":98:13)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":104:9)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":112:9)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":104:13)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":104:21)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":104:19)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":104:23)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":104:26)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":104:35)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":104:32)
#loc114 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":105:9)
#loc115 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":108:9)
#loc116 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":110:9)
#loc117 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":106:19)
#loc118 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":106:13)
#loc119 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":107:23)
#loc120 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":107:13)
#loc121 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":111:23)
#loc122 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":111:13)
#loc123 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":119:1)
#loc124 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":146:1)
#loc125 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":121:5)
#loc126 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":121:9)
#loc127 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":123:14)
#loc128 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":123:13)
#loc129 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":123:5)
#loc130 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":124:5)
#loc131 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":133:5)
#loc132 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":124:8)
#loc133 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":124:33)
#loc134 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":125:5)
#loc135 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":128:5)
#loc136 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":130:5)
#loc137 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":127:17)
#loc138 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":127:9)
#loc139 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":132:17)
#loc140 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":132:9)
#loc141 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":134:5)
#loc142 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":145:5)
#loc143 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":134:8)
#loc144 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":134:33)
#loc145 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":135:5)
#loc146 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":139:5)
#loc147 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":141:5)
#loc148 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":137:15)
#loc149 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":137:9)
#loc150 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":138:19)
#loc151 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":138:9)
#loc152 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":143:15)
#loc153 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":143:9)
#loc154 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":144:19)
#loc155 = loc("CWE400_Resource_Exhaustion__rand_sleep_12.c":144:9)
#loc156 = loc(fused[#loc1, #loc2])
#loc157 = loc(fused[#loc3, #loc4])
#loc158 = loc(fused[#loc5, #loc6])
#loc159 = loc(fused[#loc7, #loc8])
#loc160 = loc(fused[#loc12, #loc13])
#loc161 = loc(fused[#loc14, #loc15])
#loc162 = loc(fused[#loc18, #loc16])
#loc163 = loc(fused[#loc19, #loc20])
#loc164 = loc(fused[#loc21, #loc22])
#loc165 = loc(fused[#loc23, #loc24, #loc25, #loc20])
#loc166 = loc(fused[#loc27, #loc26])
#loc167 = loc(fused[#loc29, #loc28])
#loc168 = loc(fused[#loc30, #loc31])
#loc169 = loc(fused[#loc32, #loc33])
#loc170 = loc(fused[#loc34, #loc35, #loc36, #loc31])
#loc171 = loc(fused[#loc40, #loc41])
#loc172 = loc(fused[#loc42, #loc43])
#loc173 = loc(fused[#loc46, #loc47])
#loc174 = loc(fused[#loc49, #loc50, #loc51, #loc41])
#loc175 = loc(fused[#loc56, #loc57])
#loc176 = loc(fused[#loc58, #loc59])
#loc177 = loc(fused[#loc60, #loc61])
#loc178 = loc(fused[#loc62, #loc63])
#loc179 = loc(fused[#loc64, #loc65])
#loc180 = loc(fused[#loc68, #loc66])
#loc181 = loc(fused[#loc69, #loc70])
#loc182 = loc(fused[#loc71, #loc72])
#loc183 = loc(fused[#loc73, #loc74, #loc75, #loc70])
#loc184 = loc(fused[#loc77, #loc76])
#loc185 = loc(fused[#loc79, #loc78])
#loc186 = loc(fused[#loc80, #loc81])
#loc187 = loc(fused[#loc82, #loc83])
#loc188 = loc(fused[#loc84, #loc85, #loc86, #loc81])
#loc189 = loc(fused[#loc87, #loc88])
#loc190 = loc(fused[#loc89, #loc90])
#loc191 = loc(fused[#loc93, #loc94])
#loc192 = loc(fused[#loc96, #loc97, #loc98, #loc88])
#loc193 = loc(fused[#loc105, #loc106])
#loc194 = loc(fused[#loc107, #loc108])
#loc195 = loc(fused[#loc111, #loc112])
#loc196 = loc(fused[#loc114, #loc115, #loc116, #loc106])
#loc197 = loc(fused[#loc123, #loc124])
#loc198 = loc(fused[#loc125, #loc126])
#loc199 = loc(fused[#loc129, #loc127])
#loc200 = loc(fused[#loc130, #loc131])
#loc201 = loc(fused[#loc132, #loc133])
#loc202 = loc(fused[#loc134, #loc135, #loc136, #loc131])
#loc203 = loc(fused[#loc138, #loc137])
#loc204 = loc(fused[#loc140, #loc139])
#loc205 = loc(fused[#loc141, #loc142])
#loc206 = loc(fused[#loc143, #loc144])
#loc207 = loc(fused[#loc145, #loc146, #loc147, #loc142])
