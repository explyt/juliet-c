!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType = !cir.struct<union "CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType" {!cir.ptr<!void>, !cir.ptr<!void>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc241)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc242)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc243)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc244)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc245)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc246)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc247)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc248)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_34_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc250)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc251)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc252)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc253)
    %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc254)
    %5 = cir.alloca !ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType>, ["myUnion"] {alignment = 8 : i64} loc(#loc255)
    %6 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
    cir.store %6, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc256)
    cir.br ^bb1 loc(#loc257)
  ^bb1:  // pred: ^bb0
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc35)
    %8 = cir.const #cir.int<50> : !s32i loc(#loc36)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc36)
    %10 = cir.const #cir.int<4> : !u64i loc(#loc258)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc259)
    %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc35)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc260)
    cir.store %13, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc250)
    cir.br ^bb2 loc(#loc261)
  ^bb2:  // pred: ^bb1
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc41)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc42)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc42)
    %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s32i>, !cir.bool loc(#loc262)
    cir.brcond %17 ^bb3, ^bb4 loc(#loc263)
  ^bb3:  // pred: ^bb2
    %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc44)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc46)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc44)
    cir.br ^bb4 loc(#loc40)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc40)
  ^bb5:  // pred: ^bb4
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc47)
    %22 = cir.const #cir.int<65> : !s32i loc(#loc48)
    %23 = cir.const #cir.int<50> : !s32i loc(#loc49)
    %24 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc49)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc49)
    %27 = cir.call @wmemset(%21, %22, %26) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc51)
    %28 = cir.const #cir.int<0> : !s32i loc(#loc52)
    %29 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc53)
    %30 = cir.const #cir.int<50> : !s32i loc(#loc54)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %32 = cir.binop(sub, %30, %31) nsw : !s32i loc(#loc54)
    %33 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %32 : !s32i), !cir.ptr<!s32i> loc(#loc56)
    cir.store %28, %33 : !s32i, !cir.ptr<!s32i> loc(#loc264)
    %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc57)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc57)
    cir.store %35, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc265)
    cir.br ^bb6 loc(#loc34)
  ^bb6:  // pred: ^bb5
    %36 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc59)
    %37 = cir.get_member %5[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType> -> !cir.ptr<!cir.ptr<!void>> loc(#loc60)
    cir.store %36, %37 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc266)
    cir.br ^bb7 loc(#loc267)
  ^bb7:  // pred: ^bb6
    %38 = cir.get_member %5[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType> -> !cir.ptr<!cir.ptr<!void>> loc(#loc64)
    %39 = cir.load %38 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc22)
    cir.store %39, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc251)
    cir.br ^bb8 loc(#loc268)
  ^bb8:  // pred: ^bb7
    %40 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc67)
    %41 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc68)
    %42 = cir.cast(bitcast, %41 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc68)
    %43 = cir.call @strlen(%42) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc67)
    cir.store %43, %2 : !u64i, !cir.ptr<!u64i> loc(#loc252)
    %44 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc69)
    %45 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc70)
    %46 = cir.const #cir.int<1> : !s32i loc(#loc71)
    %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc71)
    %48 = cir.binop(add, %45, %47) : !u64i loc(#loc269)
    %49 = cir.const #cir.int<4> : !u64i loc(#loc270)
    %50 = cir.call @calloc(%48, %49) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc69)
    cir.store %50, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc253)
    cir.br ^bb9 loc(#loc271)
  ^bb9:  // pred: ^bb8
    %51 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc76)
    %52 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc77)
    %53 = cir.cmp(eq, %51, %52) : !cir.ptr<!void>, !cir.bool loc(#loc272)
    cir.brcond %53 ^bb10, ^bb11 loc(#loc273)
  ^bb10:  // pred: ^bb9
    %54 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc79)
    %55 = cir.const #cir.int<1> : !s32i loc(#loc80)
    %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc81)
    cir.call @exit(%56) : (!s32i) -> () extra(#fn_attr) loc(#loc79)
    cir.br ^bb11 loc(#loc75)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc75)
  ^bb12:  // pred: ^bb11
    %57 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc82)
    %58 = cir.cast(bitcast, %57 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc82)
    %59 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc83)
    %60 = cir.cast(bitcast, %59 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc83)
    %61 = cir.call @wcscpy(%58, %60) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc84)
    %62 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc85)
    %63 = cir.cast(bitcast, %62 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc85)
    cir.call @printLine(%63) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %64 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc87)
    cir.call @free(%64) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc88)
    cir.br ^bb13 loc(#loc66)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc63)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc18)
  } loc(#loc249)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_34_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc275)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc91)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc276)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc93)
    cir.return loc(#loc90)
  } loc(#loc274)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc277)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc279)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc280)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc281)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc282)
    %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc283)
    %5 = cir.alloca !ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType>, ["myUnion"] {alignment = 8 : i64} loc(#loc284)
    %6 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc111)
    cir.store %6, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc285)
    cir.br ^bb1 loc(#loc286)
  ^bb1:  // pred: ^bb0
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc115)
    %8 = cir.const #cir.int<50> : !s32i loc(#loc116)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc116)
    %10 = cir.const #cir.int<1> : !u64i loc(#loc287)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc288)
    %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc115)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc289)
    cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc279)
    cir.br ^bb2 loc(#loc290)
  ^bb2:  // pred: ^bb1
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc121)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc122)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc122)
    %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc291)
    cir.brcond %17 ^bb3, ^bb4 loc(#loc292)
  ^bb3:  // pred: ^bb2
    %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc124)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc125)
    %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc126)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc124)
    cir.br ^bb4 loc(#loc120)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc120)
  ^bb5:  // pred: ^bb4
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc127)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc127)
    %23 = cir.const #cir.int<65> : !s32i loc(#loc128)
    %24 = cir.const #cir.int<50> : !s32i loc(#loc129)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc130)
    %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc129)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc129)
    cir.libc.memset %27 bytes from %22 set to %23 : !cir.ptr<!void>, !s32i, !u64i loc(#loc293)
    %28 = cir.const #cir.int<0> : !s32i loc(#loc133)
    %29 = cir.cast(integral, %28 : !s32i), !s8i loc(#loc133)
    %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc134)
    %31 = cir.const #cir.int<50> : !s32i loc(#loc135)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc136)
    %33 = cir.binop(sub, %31, %32) nsw : !s32i loc(#loc135)
    %34 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %33 : !s32i), !cir.ptr<!s8i> loc(#loc137)
    cir.store %29, %34 : !s8i, !cir.ptr<!s8i> loc(#loc294)
    %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc138)
    %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc138)
    cir.store %36, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc295)
    cir.br ^bb6 loc(#loc114)
  ^bb6:  // pred: ^bb5
    %37 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc140)
    %38 = cir.get_member %5[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType> -> !cir.ptr<!cir.ptr<!void>> loc(#loc60)
    cir.store %37, %38 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc296)
    cir.br ^bb7 loc(#loc297)
  ^bb7:  // pred: ^bb6
    %39 = cir.get_member %5[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType> -> !cir.ptr<!cir.ptr<!void>> loc(#loc64)
    %40 = cir.load %39 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc102)
    cir.store %40, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc280)
    cir.br ^bb8 loc(#loc298)
  ^bb8:  // pred: ^bb7
    %41 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc146)
    %42 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc147)
    %43 = cir.cast(bitcast, %42 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc147)
    %44 = cir.call @strlen(%43) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc146)
    cir.store %44, %2 : !u64i, !cir.ptr<!u64i> loc(#loc281)
    %45 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc148)
    %46 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc149)
    %47 = cir.const #cir.int<1> : !s32i loc(#loc150)
    %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc150)
    %49 = cir.binop(add, %46, %48) : !u64i loc(#loc299)
    %50 = cir.const #cir.int<1> : !s32i loc(#loc151)
    %51 = cir.cast(integral, %50 : !s32i), !u64i loc(#loc151)
    %52 = cir.call @calloc(%49, %51) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc148)
    cir.store %52, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc282)
    cir.br ^bb9 loc(#loc300)
  ^bb9:  // pred: ^bb8
    %53 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc154)
    %54 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc155)
    %55 = cir.cmp(eq, %53, %54) : !cir.ptr<!void>, !cir.bool loc(#loc301)
    cir.brcond %55 ^bb10, ^bb11 loc(#loc302)
  ^bb10:  // pred: ^bb9
    %56 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc157)
    %57 = cir.const #cir.int<1> : !s32i loc(#loc158)
    %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc159)
    cir.call @exit(%58) : (!s32i) -> () extra(#fn_attr) loc(#loc157)
    cir.br ^bb11 loc(#loc153)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc153)
  ^bb12:  // pred: ^bb11
    %59 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc160)
    %60 = cir.cast(bitcast, %59 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc160)
    %61 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc161)
    %62 = cir.cast(bitcast, %61 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc161)
    %63 = cir.call @strcpy(%60, %62) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc162)
    %64 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc163)
    %65 = cir.cast(bitcast, %64 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc163)
    cir.call @printLine(%65) : (!cir.ptr<!s8i>) -> () loc(#loc164)
    %66 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc165)
    cir.call @free(%66) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc166)
    cir.br ^bb13 loc(#loc145)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc143)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc98)
  } loc(#loc278)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc303)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc304)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc306)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc307)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc308)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc309)
    %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc310)
    %5 = cir.alloca !ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType>, ["myUnion"] {alignment = 8 : i64} loc(#loc311)
    %6 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc185)
    cir.store %6, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc312)
    cir.br ^bb1 loc(#loc313)
  ^bb1:  // pred: ^bb0
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc189)
    %8 = cir.const #cir.int<50> : !s32i loc(#loc190)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc190)
    %10 = cir.const #cir.int<4> : !u64i loc(#loc314)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc315)
    %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc189)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc316)
    cir.store %13, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc306)
    cir.br ^bb2 loc(#loc317)
  ^bb2:  // pred: ^bb1
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc195)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc196)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc196)
    %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s32i>, !cir.bool loc(#loc318)
    cir.brcond %17 ^bb3, ^bb4 loc(#loc319)
  ^bb3:  // pred: ^bb2
    %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc198)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc199)
    %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc200)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc198)
    cir.br ^bb4 loc(#loc194)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc194)
  ^bb5:  // pred: ^bb4
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc201)
    %22 = cir.const #cir.int<65> : !s32i loc(#loc202)
    %23 = cir.const #cir.int<50> : !s32i loc(#loc203)
    %24 = cir.const #cir.int<1> : !s32i loc(#loc204)
    %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc203)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc203)
    %27 = cir.call @wmemset(%21, %22, %26) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc205)
    %28 = cir.const #cir.int<0> : !s32i loc(#loc206)
    %29 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc207)
    %30 = cir.const #cir.int<50> : !s32i loc(#loc208)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc209)
    %32 = cir.binop(sub, %30, %31) nsw : !s32i loc(#loc208)
    %33 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %32 : !s32i), !cir.ptr<!s32i> loc(#loc210)
    cir.store %28, %33 : !s32i, !cir.ptr<!s32i> loc(#loc320)
    %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc211)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc211)
    cir.store %35, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc321)
    cir.br ^bb6 loc(#loc188)
  ^bb6:  // pred: ^bb5
    %36 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc213)
    %37 = cir.get_member %5[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType> -> !cir.ptr<!cir.ptr<!void>> loc(#loc60)
    cir.store %36, %37 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc322)
    cir.br ^bb7 loc(#loc323)
  ^bb7:  // pred: ^bb6
    %38 = cir.get_member %5[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType> -> !cir.ptr<!cir.ptr<!void>> loc(#loc64)
    %39 = cir.load %38 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc176)
    cir.store %39, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc307)
    cir.br ^bb8 loc(#loc324)
  ^bb8:  // pred: ^bb7
    %40 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc219)
    %41 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc220)
    %42 = cir.cast(bitcast, %41 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc220)
    %43 = cir.call @wcslen(%42) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc219)
    cir.store %43, %2 : !u64i, !cir.ptr<!u64i> loc(#loc308)
    %44 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc221)
    %45 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc222)
    %46 = cir.const #cir.int<1> : !s32i loc(#loc223)
    %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc223)
    %48 = cir.binop(add, %45, %47) : !u64i loc(#loc325)
    %49 = cir.const #cir.int<4> : !u64i loc(#loc326)
    %50 = cir.call @calloc(%48, %49) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc221)
    cir.store %50, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc309)
    cir.br ^bb9 loc(#loc327)
  ^bb9:  // pred: ^bb8
    %51 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc228)
    %52 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc229)
    %53 = cir.cmp(eq, %51, %52) : !cir.ptr<!void>, !cir.bool loc(#loc328)
    cir.brcond %53 ^bb10, ^bb11 loc(#loc329)
  ^bb10:  // pred: ^bb9
    %54 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc231)
    %55 = cir.const #cir.int<1> : !s32i loc(#loc232)
    %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc233)
    cir.call @exit(%56) : (!s32i) -> () extra(#fn_attr) loc(#loc231)
    cir.br ^bb11 loc(#loc227)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc227)
  ^bb12:  // pred: ^bb11
    %57 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc234)
    %58 = cir.cast(bitcast, %57 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc234)
    %59 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc235)
    %60 = cir.cast(bitcast, %59 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc235)
    %61 = cir.call @wcscpy(%58, %60) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc236)
    %62 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc237)
    %63 = cir.cast(bitcast, %62 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc237)
    cir.call @printWLine(%63) : (!cir.ptr<!s32i>) -> () loc(#loc238)
    %64 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc239)
    cir.call @free(%64) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc240)
    cir.br ^bb13 loc(#loc218)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc216)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc172)
  } loc(#loc305)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/wchar.h":296:1)
#loc6 = loc("/usr/include/wchar.h":296:65)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("/usr/include/stdlib.h":675:1)
#loc10 = loc("/usr/include/stdlib.h":676:14)
#loc11 = loc("/usr/include/wchar.h":98:1)
#loc12 = loc("/usr/include/wchar.h":100:14)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc15 = loc("/usr/include/stdlib.h":687:1)
#loc16 = loc("/usr/include/stdlib.h":687:32)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":30:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":56:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":36:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":36:71)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":45:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":45:31)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":48:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":48:49)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":49:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":49:68)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":32:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":32:12)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":33:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":33:60)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":34:12)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":34:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":35:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":42:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":36:46)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":36:53)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":36:56)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":36:70)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":37:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":37:46)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":37:13)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":37:30)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":37:36)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":37:37)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":37:43)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":37:42)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":38:17)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":38:32)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":38:38)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":38:41)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":38:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":39:31)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":39:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":39:23)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":39:26)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":39:27)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":41:24)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":41:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":43:26)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":24:12)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":43:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":44:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":55:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":25:12)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":46:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":54:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":48:30)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":48:45)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":49:35)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":49:42)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":49:50)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":49:53)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":49:67)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":50:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":50:41)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":50:17)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":50:25)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":50:31)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":50:32)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":50:38)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":50:37)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":51:26)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":51:32)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":51:19)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":52:31)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":52:13)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":53:18)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":53:13)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":120:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":124:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":122:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":122:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":123:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":123:13)
#loc95 = loc("/usr/include/string.h":141:1)
#loc96 = loc("/usr/include/string.h":142:14)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":63:1)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":89:1)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":69:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":69:63)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":78:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":78:31)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":81:13)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":81:49)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":82:13)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":82:54)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":65:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":65:12)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":66:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":66:60)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":67:12)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":67:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":68:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":75:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":69:41)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":69:48)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":69:51)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":69:62)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":70:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":70:47)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":70:13)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":70:31)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":70:37)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":70:38)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":70:44)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":70:43)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":71:16)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":71:32)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":71:37)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":71:40)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":71:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":71:41)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":72:32)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":72:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":72:24)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":72:27)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":72:28)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":74:24)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":74:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":76:26)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":76:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":77:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":88:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":79:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":87:9)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":81:30)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":81:45)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":82:35)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":82:42)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":82:50)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":82:53)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":83:13)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":83:41)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":83:17)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":83:25)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":83:31)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":83:32)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":83:38)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":83:37)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":84:26)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":84:32)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":84:19)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":85:31)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":85:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":86:18)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":86:13)
#loc167 = loc("/usr/include/wchar.h":247:1)
#loc168 = loc("/usr/include/wchar.h":247:51)
#loc169 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc170 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":92:1)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":118:1)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":98:9)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":98:71)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":107:9)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":107:31)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":110:13)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":110:52)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":111:13)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":111:68)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":94:5)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":94:12)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":95:5)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":95:60)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":96:12)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":96:5)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":97:5)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":104:5)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":98:46)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":98:53)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":98:56)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":98:70)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":99:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":99:46)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":99:13)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":99:30)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":99:36)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":99:37)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":99:43)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":99:42)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":100:17)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":100:32)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":100:38)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":100:41)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":100:9)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":101:31)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":101:9)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":101:23)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":101:26)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":101:27)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":103:24)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":103:9)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":105:26)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":105:5)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":106:5)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":117:5)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":108:9)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":116:9)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":110:30)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":110:48)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":111:35)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":111:42)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":111:50)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":111:53)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":111:67)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":112:13)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":112:41)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":112:17)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":112:25)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":112:31)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":112:32)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":112:38)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":112:37)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":113:26)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":113:32)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":113:19)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":114:35)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":114:13)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":115:18)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":115:13)
#loc241 = loc(fused[#loc1, #loc2])
#loc242 = loc(fused[#loc3, #loc4])
#loc243 = loc(fused[#loc5, #loc6])
#loc244 = loc(fused[#loc7, #loc8])
#loc245 = loc(fused[#loc9, #loc10])
#loc246 = loc(fused[#loc11, #loc12])
#loc247 = loc(fused[#loc13, #loc14])
#loc248 = loc(fused[#loc15, #loc16])
#loc249 = loc(fused[#loc17, #loc18])
#loc250 = loc(fused[#loc19, #loc20])
#loc251 = loc(fused[#loc21, #loc22])
#loc252 = loc(fused[#loc23, #loc24])
#loc253 = loc(fused[#loc25, #loc26])
#loc254 = loc(fused[#loc27, #loc28])
#loc255 = loc(fused[#loc29, #loc30])
#loc256 = loc(fused[#loc32, #loc31])
#loc257 = loc(fused[#loc33, #loc34])
#loc258 = loc(fused[#loc37, #loc38])
#loc259 = loc(fused[#loc36, #loc38])
#loc260 = loc(fused[#loc35, #loc20])
#loc261 = loc(fused[#loc39, #loc40])
#loc262 = loc(fused[#loc41, #loc42])
#loc263 = loc(fused[#loc43, #loc40])
#loc264 = loc(fused[#loc53, #loc52])
#loc265 = loc(fused[#loc58, #loc57])
#loc266 = loc(fused[#loc61, #loc59])
#loc267 = loc(fused[#loc62, #loc63])
#loc268 = loc(fused[#loc65, #loc66])
#loc269 = loc(fused[#loc70, #loc71])
#loc270 = loc(fused[#loc72, #loc73])
#loc271 = loc(fused[#loc74, #loc75])
#loc272 = loc(fused[#loc76, #loc77])
#loc273 = loc(fused[#loc78, #loc75])
#loc274 = loc(fused[#loc89, #loc90])
#loc275 = loc(fused[#loc91, #loc92])
#loc276 = loc(fused[#loc93, #loc94])
#loc277 = loc(fused[#loc95, #loc96])
#loc278 = loc(fused[#loc97, #loc98])
#loc279 = loc(fused[#loc99, #loc100])
#loc280 = loc(fused[#loc101, #loc102])
#loc281 = loc(fused[#loc103, #loc104])
#loc282 = loc(fused[#loc105, #loc106])
#loc283 = loc(fused[#loc107, #loc108])
#loc284 = loc(fused[#loc109, #loc110])
#loc285 = loc(fused[#loc112, #loc111])
#loc286 = loc(fused[#loc113, #loc114])
#loc287 = loc(fused[#loc117, #loc118])
#loc288 = loc(fused[#loc116, #loc118])
#loc289 = loc(fused[#loc115, #loc100])
#loc290 = loc(fused[#loc119, #loc120])
#loc291 = loc(fused[#loc121, #loc122])
#loc292 = loc(fused[#loc123, #loc120])
#loc293 = loc(fused[#loc131, #loc132])
#loc294 = loc(fused[#loc134, #loc133])
#loc295 = loc(fused[#loc139, #loc138])
#loc296 = loc(fused[#loc141, #loc140])
#loc297 = loc(fused[#loc142, #loc143])
#loc298 = loc(fused[#loc144, #loc145])
#loc299 = loc(fused[#loc149, #loc150])
#loc300 = loc(fused[#loc152, #loc153])
#loc301 = loc(fused[#loc154, #loc155])
#loc302 = loc(fused[#loc156, #loc153])
#loc303 = loc(fused[#loc167, #loc168])
#loc304 = loc(fused[#loc169, #loc170])
#loc305 = loc(fused[#loc171, #loc172])
#loc306 = loc(fused[#loc173, #loc174])
#loc307 = loc(fused[#loc175, #loc176])
#loc308 = loc(fused[#loc177, #loc178])
#loc309 = loc(fused[#loc179, #loc180])
#loc310 = loc(fused[#loc181, #loc182])
#loc311 = loc(fused[#loc183, #loc184])
#loc312 = loc(fused[#loc186, #loc185])
#loc313 = loc(fused[#loc187, #loc188])
#loc314 = loc(fused[#loc191, #loc192])
#loc315 = loc(fused[#loc190, #loc192])
#loc316 = loc(fused[#loc189, #loc174])
#loc317 = loc(fused[#loc193, #loc194])
#loc318 = loc(fused[#loc195, #loc196])
#loc319 = loc(fused[#loc197, #loc194])
#loc320 = loc(fused[#loc207, #loc206])
#loc321 = loc(fused[#loc212, #loc211])
#loc322 = loc(fused[#loc214, #loc213])
#loc323 = loc(fused[#loc215, #loc216])
#loc324 = loc(fused[#loc217, #loc218])
#loc325 = loc(fused[#loc222, #loc223])
#loc326 = loc(fused[#loc224, #loc225])
#loc327 = loc(fused[#loc226, #loc227])
#loc328 = loc(fused[#loc228, #loc229])
#loc329 = loc(fused[#loc230, #loc227])
