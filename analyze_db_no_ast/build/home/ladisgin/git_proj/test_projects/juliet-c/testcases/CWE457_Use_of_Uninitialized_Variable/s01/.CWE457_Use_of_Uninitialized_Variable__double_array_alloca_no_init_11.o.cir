!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE457_Use_of_Uninitialized_Variable/s01/CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrue(...) -> !s32i loc(#loc269)
  cir.func private  @printDoubleLine(!cir.double) loc(#loc270)
  cir.func no_proto  @CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc272)
    %1 = cir.const #cir.int<10> : !s32i loc(#loc9)
    %2 = cir.cast(integral, %1 : !s32i), !u64i loc(#loc9)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc9)
    %4 = cir.binop(mul, %2, %3) : !u64i loc(#loc9)
    %5 = cir.alloca !u8i, !cir.ptr<!u8i>, %4 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc9)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc9)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc9)
    cir.store %7, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc273)
    cir.scope {
      %8 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc275)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc275)
      %10 = cir.call %9() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc13)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc13)
      cir.if %11 {
      } loc(#loc276)
    } loc(#loc274)
    cir.scope {
      %8 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc278)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc278)
      %10 = cir.call %9() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc18)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc18)
      cir.if %11 {
        cir.scope {
          %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc281)
          cir.scope {
            %13 = cir.const #cir.int<0> : !s32i loc(#loc27)
            cir.store %13, %12 : !s32i, !cir.ptr<!s32i> loc(#loc283)
            cir.for : cond {
              %14 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc29)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc30)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc284)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc31)
              cir.condition(%17) loc(#loc31)
            } body {
              cir.scope {
                %14 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc33)
                %15 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc34)
                %16 = cir.ptr_stride(%14 : !cir.ptr<!cir.double>, %15 : !s32i), !cir.ptr<!cir.double> loc(#loc35)
                %17 = cir.load %16 : !cir.ptr<!cir.double>, !cir.double loc(#loc33)
                cir.call @printDoubleLine(%17) : (!cir.double) -> () loc(#loc36)
              } loc(#loc285)
              cir.yield loc(#loc26)
            } step {
              %14 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc37)
              %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc38)
              cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc286)
              cir.yield loc(#loc282)
            } loc(#loc282)
          } loc(#loc282)
        } loc(#loc280)
      } loc(#loc279)
    } loc(#loc277)
    cir.return loc(#loc6)
  } loc(#loc271)
  cir.func no_proto  @CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc288)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc289)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc290)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc291)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    cir.return loc(#loc40)
  } loc(#loc287)
  cir.func no_proto private  @globalReturnsFalse(...) -> !s32i loc(#loc292)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc293)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc53)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc295)
    %1 = cir.const #cir.int<10> : !s32i loc(#loc58)
    %2 = cir.cast(integral, %1 : !s32i), !u64i loc(#loc58)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc58)
    %4 = cir.binop(mul, %2, %3) : !u64i loc(#loc58)
    %5 = cir.alloca !u8i, !cir.ptr<!u8i>, %4 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc58)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc58)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc58)
    cir.store %7, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc296)
    cir.scope {
      %8 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc298)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc298)
      %10 = cir.call %9() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc62)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc62)
      cir.if %11 {
      } loc(#loc299)
    } loc(#loc297)
    cir.scope {
      %8 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc301)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc301)
      %10 = cir.call %9() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc67)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc67)
      cir.if %11 {
        %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc53)
        %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc53)
        cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc72)
      } else {
        cir.scope {
          %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc304)
          cir.scope {
            %13 = cir.const #cir.int<0> : !s32i loc(#loc79)
            cir.store %13, %12 : !s32i, !cir.ptr<!s32i> loc(#loc306)
            cir.for : cond {
              %14 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc81)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc82)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc307)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc83)
              cir.condition(%17) loc(#loc83)
            } body {
              cir.scope {
                %14 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc85)
                %15 = cir.cast(int_to_float, %14 : !s32i), !cir.double loc(#loc85)
                %16 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc86)
                %17 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc87)
                %18 = cir.ptr_stride(%16 : !cir.ptr<!cir.double>, %17 : !s32i), !cir.ptr<!cir.double> loc(#loc88)
                cir.store %15, %18 : !cir.double, !cir.ptr<!cir.double> loc(#loc309)
              } loc(#loc308)
              cir.yield loc(#loc78)
            } step {
              %14 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc89)
              %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc90)
              cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc310)
              cir.yield loc(#loc305)
            } loc(#loc305)
          } loc(#loc305)
        } loc(#loc303)
        cir.scope {
          %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc312)
          cir.scope {
            %13 = cir.const #cir.int<0> : !s32i loc(#loc97)
            cir.store %13, %12 : !s32i, !cir.ptr<!s32i> loc(#loc314)
            cir.for : cond {
              %14 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc99)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc100)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc315)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc101)
              cir.condition(%17) loc(#loc101)
            } body {
              cir.scope {
                %14 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc103)
                %15 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc104)
                %16 = cir.ptr_stride(%14 : !cir.ptr<!cir.double>, %15 : !s32i), !cir.ptr<!cir.double> loc(#loc105)
                %17 = cir.load %16 : !cir.ptr<!cir.double>, !cir.double loc(#loc103)
                cir.call @printDoubleLine(%17) : (!cir.double) -> () loc(#loc106)
              } loc(#loc316)
              cir.yield loc(#loc96)
            } step {
              %14 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc107)
              %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc108)
              cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc317)
              cir.yield loc(#loc313)
            } loc(#loc313)
          } loc(#loc313)
        } loc(#loc311)
      } loc(#loc302)
    } loc(#loc300)
    cir.return loc(#loc55)
  } loc(#loc294)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc319)
    %1 = cir.const #cir.int<10> : !s32i loc(#loc113)
    %2 = cir.cast(integral, %1 : !s32i), !u64i loc(#loc113)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc113)
    %4 = cir.binop(mul, %2, %3) : !u64i loc(#loc113)
    %5 = cir.alloca !u8i, !cir.ptr<!u8i>, %4 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc113)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc113)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc113)
    cir.store %7, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc320)
    cir.scope {
      %8 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc322)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc322)
      %10 = cir.call %9() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc117)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc117)
      cir.if %11 {
      } loc(#loc323)
    } loc(#loc321)
    cir.scope {
      %8 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc325)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc325)
      %10 = cir.call %9() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc122)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc122)
      cir.if %11 {
        cir.scope {
          %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc328)
          cir.scope {
            %13 = cir.const #cir.int<0> : !s32i loc(#loc131)
            cir.store %13, %12 : !s32i, !cir.ptr<!s32i> loc(#loc330)
            cir.for : cond {
              %14 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc133)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc134)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc331)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc135)
              cir.condition(%17) loc(#loc135)
            } body {
              cir.scope {
                %14 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc137)
                %15 = cir.cast(int_to_float, %14 : !s32i), !cir.double loc(#loc137)
                %16 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc138)
                %17 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc139)
                %18 = cir.ptr_stride(%16 : !cir.ptr<!cir.double>, %17 : !s32i), !cir.ptr<!cir.double> loc(#loc140)
                cir.store %15, %18 : !cir.double, !cir.ptr<!cir.double> loc(#loc333)
              } loc(#loc332)
              cir.yield loc(#loc130)
            } step {
              %14 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc141)
              %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc142)
              cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc334)
              cir.yield loc(#loc329)
            } loc(#loc329)
          } loc(#loc329)
        } loc(#loc327)
        cir.scope {
          %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc336)
          cir.scope {
            %13 = cir.const #cir.int<0> : !s32i loc(#loc149)
            cir.store %13, %12 : !s32i, !cir.ptr<!s32i> loc(#loc338)
            cir.for : cond {
              %14 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc151)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc152)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc339)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc153)
              cir.condition(%17) loc(#loc153)
            } body {
              cir.scope {
                %14 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc155)
                %15 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc156)
                %16 = cir.ptr_stride(%14 : !cir.ptr<!cir.double>, %15 : !s32i), !cir.ptr<!cir.double> loc(#loc157)
                %17 = cir.load %16 : !cir.ptr<!cir.double>, !cir.double loc(#loc155)
                cir.call @printDoubleLine(%17) : (!cir.double) -> () loc(#loc158)
              } loc(#loc340)
              cir.yield loc(#loc148)
            } step {
              %14 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc159)
              %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc160)
              cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc341)
              cir.yield loc(#loc337)
            } loc(#loc337)
          } loc(#loc337)
        } loc(#loc335)
      } loc(#loc326)
    } loc(#loc324)
    cir.return loc(#loc110)
  } loc(#loc318)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc343)
    %1 = cir.const #cir.int<10> : !s32i loc(#loc165)
    %2 = cir.cast(integral, %1 : !s32i), !u64i loc(#loc165)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc165)
    %4 = cir.binop(mul, %2, %3) : !u64i loc(#loc165)
    %5 = cir.alloca !u8i, !cir.ptr<!u8i>, %4 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc165)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc165)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc165)
    cir.store %7, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc344)
    cir.scope {
      %8 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc346)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc346)
      %10 = cir.call %9() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc169)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc169)
      cir.if %11 {
        %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc174)
        %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc174)
        cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc175)
      } else {
        cir.scope {
          %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc349)
          cir.scope {
            %13 = cir.const #cir.int<0> : !s32i loc(#loc182)
            cir.store %13, %12 : !s32i, !cir.ptr<!s32i> loc(#loc351)
            cir.for : cond {
              %14 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc184)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc185)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc352)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc186)
              cir.condition(%17) loc(#loc186)
            } body {
              cir.scope {
                %14 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc188)
                %15 = cir.cast(int_to_float, %14 : !s32i), !cir.double loc(#loc188)
                %16 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc189)
                %17 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc190)
                %18 = cir.ptr_stride(%16 : !cir.ptr<!cir.double>, %17 : !s32i), !cir.ptr<!cir.double> loc(#loc191)
                cir.store %15, %18 : !cir.double, !cir.ptr<!cir.double> loc(#loc354)
              } loc(#loc353)
              cir.yield loc(#loc181)
            } step {
              %14 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc192)
              %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc193)
              cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc355)
              cir.yield loc(#loc350)
            } loc(#loc350)
          } loc(#loc350)
        } loc(#loc348)
      } loc(#loc347)
    } loc(#loc345)
    cir.scope {
      %8 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc357)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc357)
      %10 = cir.call %9() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc196)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc196)
      cir.if %11 {
        cir.scope {
          %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc360)
          cir.scope {
            %13 = cir.const #cir.int<0> : !s32i loc(#loc205)
            cir.store %13, %12 : !s32i, !cir.ptr<!s32i> loc(#loc362)
            cir.for : cond {
              %14 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc207)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc208)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc363)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc209)
              cir.condition(%17) loc(#loc209)
            } body {
              cir.scope {
                %14 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc211)
                %15 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc212)
                %16 = cir.ptr_stride(%14 : !cir.ptr<!cir.double>, %15 : !s32i), !cir.ptr<!cir.double> loc(#loc213)
                %17 = cir.load %16 : !cir.ptr<!cir.double>, !cir.double loc(#loc211)
                cir.call @printDoubleLine(%17) : (!cir.double) -> () loc(#loc214)
              } loc(#loc364)
              cir.yield loc(#loc204)
            } step {
              %14 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc215)
              %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc216)
              cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc365)
              cir.yield loc(#loc361)
            } loc(#loc361)
          } loc(#loc361)
        } loc(#loc359)
      } loc(#loc358)
    } loc(#loc356)
    cir.return loc(#loc162)
  } loc(#loc342)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc367)
    %1 = cir.const #cir.int<10> : !s32i loc(#loc221)
    %2 = cir.cast(integral, %1 : !s32i), !u64i loc(#loc221)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc221)
    %4 = cir.binop(mul, %2, %3) : !u64i loc(#loc221)
    %5 = cir.alloca !u8i, !cir.ptr<!u8i>, %4 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc221)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc221)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc221)
    cir.store %7, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc368)
    cir.scope {
      %8 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc370)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc370)
      %10 = cir.call %9() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc225)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc225)
      cir.if %11 {
        cir.scope {
          %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc373)
          cir.scope {
            %13 = cir.const #cir.int<0> : !s32i loc(#loc234)
            cir.store %13, %12 : !s32i, !cir.ptr<!s32i> loc(#loc375)
            cir.for : cond {
              %14 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc236)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc237)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc376)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc238)
              cir.condition(%17) loc(#loc238)
            } body {
              cir.scope {
                %14 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc240)
                %15 = cir.cast(int_to_float, %14 : !s32i), !cir.double loc(#loc240)
                %16 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc241)
                %17 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc242)
                %18 = cir.ptr_stride(%16 : !cir.ptr<!cir.double>, %17 : !s32i), !cir.ptr<!cir.double> loc(#loc243)
                cir.store %15, %18 : !cir.double, !cir.ptr<!cir.double> loc(#loc378)
              } loc(#loc377)
              cir.yield loc(#loc233)
            } step {
              %14 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc244)
              %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc245)
              cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc379)
              cir.yield loc(#loc374)
            } loc(#loc374)
          } loc(#loc374)
        } loc(#loc372)
      } loc(#loc371)
    } loc(#loc369)
    cir.scope {
      %8 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc381)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc381)
      %10 = cir.call %9() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc248)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc248)
      cir.if %11 {
        cir.scope {
          %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc384)
          cir.scope {
            %13 = cir.const #cir.int<0> : !s32i loc(#loc257)
            cir.store %13, %12 : !s32i, !cir.ptr<!s32i> loc(#loc386)
            cir.for : cond {
              %14 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc259)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc260)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc387)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc261)
              cir.condition(%17) loc(#loc261)
            } body {
              cir.scope {
                %14 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc263)
                %15 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc264)
                %16 = cir.ptr_stride(%14 : !cir.ptr<!cir.double>, %15 : !s32i), !cir.ptr<!cir.double> loc(#loc265)
                %17 = cir.load %16 : !cir.ptr<!cir.double>, !cir.double loc(#loc263)
                cir.call @printDoubleLine(%17) : (!cir.double) -> () loc(#loc266)
              } loc(#loc388)
              cir.yield loc(#loc256)
            } step {
              %14 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc267)
              %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc268)
              cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc389)
              cir.yield loc(#loc385)
            } loc(#loc385)
          } loc(#loc385)
        } loc(#loc383)
      } loc(#loc382)
    } loc(#loc380)
    cir.return loc(#loc218)
  } loc(#loc366)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE457_Use_of_Uninitialized_Variable/s01/CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":38:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":38:41)
#loc5 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":22:1)
#loc6 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":42:1)
#loc7 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":24:5)
#loc8 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":24:14)
#loc9 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":25:22)
#loc10 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":25:5)
#loc11 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":26:5)
#loc12 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":30:5)
#loc13 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":26:8)
#loc14 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":26:26)
#loc15 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":27:5)
#loc16 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":31:5)
#loc17 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":41:5)
#loc18 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":31:8)
#loc19 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":31:26)
#loc20 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":32:5)
#loc21 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":34:9)
#loc22 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":40:9)
#loc23 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":35:13)
#loc24 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":35:17)
#loc25 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":36:13)
#loc26 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":39:13)
#loc27 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":36:19)
#loc28 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":36:17)
#loc29 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":36:22)
#loc30 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":36:24)
#loc31 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":36:23)
#loc32 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":37:13)
#loc33 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":38:33)
#loc34 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":38:38)
#loc35 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":38:39)
#loc36 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":38:17)
#loc37 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":36:29)
#loc38 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":36:28)
#loc39 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":176:1)
#loc40 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":182:1)
#loc41 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":178:5)
#loc42 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":178:14)
#loc43 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":179:5)
#loc44 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":179:14)
#loc45 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":180:5)
#loc46 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":180:14)
#loc47 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":181:5)
#loc48 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":181:14)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc53 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":61:19)
#loc54 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":49:1)
#loc55 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":81:1)
#loc56 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":51:5)
#loc57 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":51:14)
#loc58 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":52:22)
#loc59 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":52:5)
#loc60 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":53:5)
#loc61 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":57:5)
#loc62 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":53:8)
#loc63 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":53:26)
#loc64 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":54:5)
#loc65 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":58:5)
#loc66 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":80:5)
#loc67 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":58:8)
#loc68 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":58:27)
#loc69 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":59:5)
#loc70 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":62:5)
#loc71 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":64:5)
#loc72 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":61:9)
#loc73 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":66:9)
#loc74 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":72:9)
#loc75 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":67:13)
#loc76 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":67:17)
#loc77 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":68:13)
#loc78 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":71:13)
#loc79 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":68:19)
#loc80 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":68:17)
#loc81 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":68:22)
#loc82 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":68:24)
#loc83 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":68:23)
#loc84 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":69:13)
#loc85 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":70:35)
#loc86 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":70:17)
#loc87 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":70:22)
#loc88 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":70:23)
#loc89 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":68:29)
#loc90 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":68:28)
#loc91 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":73:9)
#loc92 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":79:9)
#loc93 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":74:13)
#loc94 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":74:17)
#loc95 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":75:13)
#loc96 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":78:13)
#loc97 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":75:19)
#loc98 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":75:17)
#loc99 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":75:22)
#loc100 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":75:24)
#loc101 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":75:23)
#loc102 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":76:13)
#loc103 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":77:33)
#loc104 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":77:38)
#loc105 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":77:39)
#loc106 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":77:17)
#loc107 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":75:29)
#loc108 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":75:28)
#loc109 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":84:1)
#loc110 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":111:1)
#loc111 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":86:5)
#loc112 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":86:14)
#loc113 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":87:22)
#loc114 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":87:5)
#loc115 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":88:5)
#loc116 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":92:5)
#loc117 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":88:8)
#loc118 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":88:26)
#loc119 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":89:5)
#loc120 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":93:5)
#loc121 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":110:5)
#loc122 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":93:8)
#loc123 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":93:26)
#loc124 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":94:5)
#loc125 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":96:9)
#loc126 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":102:9)
#loc127 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":97:13)
#loc128 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":97:17)
#loc129 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":98:13)
#loc130 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":101:13)
#loc131 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":98:19)
#loc132 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":98:17)
#loc133 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":98:22)
#loc134 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":98:24)
#loc135 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":98:23)
#loc136 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":99:13)
#loc137 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":100:35)
#loc138 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":100:17)
#loc139 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":100:22)
#loc140 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":100:23)
#loc141 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":98:29)
#loc142 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":98:28)
#loc143 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":103:9)
#loc144 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":109:9)
#loc145 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":104:13)
#loc146 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":104:17)
#loc147 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":105:13)
#loc148 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":108:13)
#loc149 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":105:19)
#loc150 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":105:17)
#loc151 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":105:22)
#loc152 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":105:24)
#loc153 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":105:23)
#loc154 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":106:13)
#loc155 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":107:33)
#loc156 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":107:38)
#loc157 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":107:39)
#loc158 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":107:17)
#loc159 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":105:29)
#loc160 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":105:28)
#loc161 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":114:1)
#loc162 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":145:1)
#loc163 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":116:5)
#loc164 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":116:14)
#loc165 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":117:22)
#loc166 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":117:5)
#loc167 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":118:5)
#loc168 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":133:5)
#loc169 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":118:8)
#loc170 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":118:27)
#loc171 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":119:5)
#loc172 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":122:5)
#loc173 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":124:5)
#loc174 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":121:19)
#loc175 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":121:9)
#loc176 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":126:9)
#loc177 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":132:9)
#loc178 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":127:13)
#loc179 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":127:17)
#loc180 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":128:13)
#loc181 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":131:13)
#loc182 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":128:19)
#loc183 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":128:17)
#loc184 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":128:22)
#loc185 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":128:24)
#loc186 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":128:23)
#loc187 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":129:13)
#loc188 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":130:35)
#loc189 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":130:17)
#loc190 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":130:22)
#loc191 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":130:23)
#loc192 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":128:29)
#loc193 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":128:28)
#loc194 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":134:5)
#loc195 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":144:5)
#loc196 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":134:8)
#loc197 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":134:26)
#loc198 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":135:5)
#loc199 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":137:9)
#loc200 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":143:9)
#loc201 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":138:13)
#loc202 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":138:17)
#loc203 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":139:13)
#loc204 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":142:13)
#loc205 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":139:19)
#loc206 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":139:17)
#loc207 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":139:22)
#loc208 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":139:24)
#loc209 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":139:23)
#loc210 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":140:13)
#loc211 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":141:33)
#loc212 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":141:38)
#loc213 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":141:39)
#loc214 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":141:17)
#loc215 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":139:29)
#loc216 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":139:28)
#loc217 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":148:1)
#loc218 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":174:1)
#loc219 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":150:5)
#loc220 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":150:14)
#loc221 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":151:22)
#loc222 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":151:5)
#loc223 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":152:5)
#loc224 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":162:5)
#loc225 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":152:8)
#loc226 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":152:26)
#loc227 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":153:5)
#loc228 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":155:9)
#loc229 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":161:9)
#loc230 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":156:13)
#loc231 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":156:17)
#loc232 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":157:13)
#loc233 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":160:13)
#loc234 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":157:19)
#loc235 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":157:17)
#loc236 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":157:22)
#loc237 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":157:24)
#loc238 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":157:23)
#loc239 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":158:13)
#loc240 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":159:35)
#loc241 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":159:17)
#loc242 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":159:22)
#loc243 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":159:23)
#loc244 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":157:29)
#loc245 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":157:28)
#loc246 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":163:5)
#loc247 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":173:5)
#loc248 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":163:8)
#loc249 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":163:26)
#loc250 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":164:5)
#loc251 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":166:9)
#loc252 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":172:9)
#loc253 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":167:13)
#loc254 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":167:17)
#loc255 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":168:13)
#loc256 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":171:13)
#loc257 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":168:19)
#loc258 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":168:17)
#loc259 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":168:22)
#loc260 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":168:24)
#loc261 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":168:23)
#loc262 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":169:13)
#loc263 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":170:33)
#loc264 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":170:38)
#loc265 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":170:39)
#loc266 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":170:17)
#loc267 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":168:29)
#loc268 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11.c":168:28)
#loc269 = loc(fused[#loc1, #loc2])
#loc270 = loc(fused[#loc3, #loc4])
#loc271 = loc(fused[#loc5, #loc6])
#loc272 = loc(fused[#loc7, #loc8])
#loc273 = loc(fused[#loc10, #loc9])
#loc274 = loc(fused[#loc11, #loc12])
#loc275 = loc(fused[#loc13, #loc14])
#loc276 = loc(fused[#loc15, #loc12])
#loc277 = loc(fused[#loc16, #loc17])
#loc278 = loc(fused[#loc18, #loc19])
#loc279 = loc(fused[#loc20, #loc17])
#loc280 = loc(fused[#loc21, #loc22])
#loc281 = loc(fused[#loc23, #loc24])
#loc282 = loc(fused[#loc25, #loc26])
#loc283 = loc(fused[#loc28, #loc27])
#loc284 = loc(fused[#loc29, #loc30])
#loc285 = loc(fused[#loc32, #loc26])
#loc286 = loc(fused[#loc38, #loc37])
#loc287 = loc(fused[#loc39, #loc40])
#loc288 = loc(fused[#loc41, #loc42])
#loc289 = loc(fused[#loc43, #loc44])
#loc290 = loc(fused[#loc45, #loc46])
#loc291 = loc(fused[#loc47, #loc48])
#loc292 = loc(fused[#loc49, #loc50])
#loc293 = loc(fused[#loc51, #loc52])
#loc294 = loc(fused[#loc54, #loc55])
#loc295 = loc(fused[#loc56, #loc57])
#loc296 = loc(fused[#loc59, #loc58])
#loc297 = loc(fused[#loc60, #loc61])
#loc298 = loc(fused[#loc62, #loc63])
#loc299 = loc(fused[#loc64, #loc61])
#loc300 = loc(fused[#loc65, #loc66])
#loc301 = loc(fused[#loc67, #loc68])
#loc302 = loc(fused[#loc69, #loc70, #loc71, #loc66])
#loc303 = loc(fused[#loc73, #loc74])
#loc304 = loc(fused[#loc75, #loc76])
#loc305 = loc(fused[#loc77, #loc78])
#loc306 = loc(fused[#loc80, #loc79])
#loc307 = loc(fused[#loc81, #loc82])
#loc308 = loc(fused[#loc84, #loc78])
#loc309 = loc(fused[#loc86, #loc85])
#loc310 = loc(fused[#loc90, #loc89])
#loc311 = loc(fused[#loc91, #loc92])
#loc312 = loc(fused[#loc93, #loc94])
#loc313 = loc(fused[#loc95, #loc96])
#loc314 = loc(fused[#loc98, #loc97])
#loc315 = loc(fused[#loc99, #loc100])
#loc316 = loc(fused[#loc102, #loc96])
#loc317 = loc(fused[#loc108, #loc107])
#loc318 = loc(fused[#loc109, #loc110])
#loc319 = loc(fused[#loc111, #loc112])
#loc320 = loc(fused[#loc114, #loc113])
#loc321 = loc(fused[#loc115, #loc116])
#loc322 = loc(fused[#loc117, #loc118])
#loc323 = loc(fused[#loc119, #loc116])
#loc324 = loc(fused[#loc120, #loc121])
#loc325 = loc(fused[#loc122, #loc123])
#loc326 = loc(fused[#loc124, #loc121])
#loc327 = loc(fused[#loc125, #loc126])
#loc328 = loc(fused[#loc127, #loc128])
#loc329 = loc(fused[#loc129, #loc130])
#loc330 = loc(fused[#loc132, #loc131])
#loc331 = loc(fused[#loc133, #loc134])
#loc332 = loc(fused[#loc136, #loc130])
#loc333 = loc(fused[#loc138, #loc137])
#loc334 = loc(fused[#loc142, #loc141])
#loc335 = loc(fused[#loc143, #loc144])
#loc336 = loc(fused[#loc145, #loc146])
#loc337 = loc(fused[#loc147, #loc148])
#loc338 = loc(fused[#loc150, #loc149])
#loc339 = loc(fused[#loc151, #loc152])
#loc340 = loc(fused[#loc154, #loc148])
#loc341 = loc(fused[#loc160, #loc159])
#loc342 = loc(fused[#loc161, #loc162])
#loc343 = loc(fused[#loc163, #loc164])
#loc344 = loc(fused[#loc166, #loc165])
#loc345 = loc(fused[#loc167, #loc168])
#loc346 = loc(fused[#loc169, #loc170])
#loc347 = loc(fused[#loc171, #loc172, #loc173, #loc168])
#loc348 = loc(fused[#loc176, #loc177])
#loc349 = loc(fused[#loc178, #loc179])
#loc350 = loc(fused[#loc180, #loc181])
#loc351 = loc(fused[#loc183, #loc182])
#loc352 = loc(fused[#loc184, #loc185])
#loc353 = loc(fused[#loc187, #loc181])
#loc354 = loc(fused[#loc189, #loc188])
#loc355 = loc(fused[#loc193, #loc192])
#loc356 = loc(fused[#loc194, #loc195])
#loc357 = loc(fused[#loc196, #loc197])
#loc358 = loc(fused[#loc198, #loc195])
#loc359 = loc(fused[#loc199, #loc200])
#loc360 = loc(fused[#loc201, #loc202])
#loc361 = loc(fused[#loc203, #loc204])
#loc362 = loc(fused[#loc206, #loc205])
#loc363 = loc(fused[#loc207, #loc208])
#loc364 = loc(fused[#loc210, #loc204])
#loc365 = loc(fused[#loc216, #loc215])
#loc366 = loc(fused[#loc217, #loc218])
#loc367 = loc(fused[#loc219, #loc220])
#loc368 = loc(fused[#loc222, #loc221])
#loc369 = loc(fused[#loc223, #loc224])
#loc370 = loc(fused[#loc225, #loc226])
#loc371 = loc(fused[#loc227, #loc224])
#loc372 = loc(fused[#loc228, #loc229])
#loc373 = loc(fused[#loc230, #loc231])
#loc374 = loc(fused[#loc232, #loc233])
#loc375 = loc(fused[#loc235, #loc234])
#loc376 = loc(fused[#loc236, #loc237])
#loc377 = loc(fused[#loc239, #loc233])
#loc378 = loc(fused[#loc241, #loc240])
#loc379 = loc(fused[#loc245, #loc244])
#loc380 = loc(fused[#loc246, #loc247])
#loc381 = loc(fused[#loc248, #loc249])
#loc382 = loc(fused[#loc250, #loc247])
#loc383 = loc(fused[#loc251, #loc252])
#loc384 = loc(fused[#loc253, #loc254])
#loc385 = loc(fused[#loc255, #loc256])
#loc386 = loc(fused[#loc258, #loc257])
#loc387 = loc(fused[#loc259, #loc260])
#loc388 = loc(fused[#loc262, #loc256])
#loc389 = loc(fused[#loc268, #loc267])
