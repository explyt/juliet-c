!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_sub_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc168)
  cir.func private @printIntLine(!s32i) loc(#loc169)
  cir.func no_proto @CWE191_Integer_Underflow__int_min_sub_11_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc171)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc172)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc173)
    cir.br ^bb1 loc(#loc174)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc175)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc175)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc15)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc176)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc18)
    %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc18)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc18)
    cir.store %10, %1 : !s32i, !cir.ptr<!s32i> loc(#loc177)
    cir.br ^bb3 loc(#loc14)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc14)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc178)
  ^bb5:  // pred: ^bb4
    %11 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc179)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc179)
    %13 = cir.call %12() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc22)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc22)
    cir.brcond %14 ^bb6, ^bb9 loc(#loc180)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc181)
  ^bb7:  // pred: ^bb6
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc27)
    cir.store %17, %0 : !s32i, !cir.ptr<!s32i> loc(#loc171)
    %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc29)
    cir.br ^bb8 loc(#loc26)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc21)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc21)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc6)
  } loc(#loc170)
  cir.func no_proto @CWE191_Integer_Underflow__int_min_sub_11_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc183)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc184)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc185)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc186)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    cir.return loc(#loc31)
  } loc(#loc182)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc187)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc188)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc45)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc190)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc191)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc52)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    cir.br ^bb1 loc(#loc193)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc194)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc194)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc56)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc56)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc195)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc59)
    %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc59)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc59)
    %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc59)
    cir.store %10, %1 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    cir.br ^bb3 loc(#loc55)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc55)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc197)
  ^bb5:  // pred: ^bb4
    %11 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc198)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc198)
    %13 = cir.call %12() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc63)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc63)
    cir.brcond %14 ^bb6, ^bb7 loc(#loc199)
  ^bb6:  // pred: ^bb5
    %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc44)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    cir.br ^bb13 loc(#loc66)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc200)
  ^bb8:  // pred: ^bb7
    %17 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc71)
    %18 = cir.const #cir.int<2147483647> : !s32i loc(#loc72)
    %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc72)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc72)
    %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc72)
    %22 = cir.cmp(gt, %17, %21) : !s32i, !cir.bool loc(#loc201)
    cir.brcond %22 ^bb9, ^bb10 loc(#loc202)
  ^bb9:  // pred: ^bb8
    %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc76)
    %24 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc76)
    cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    %26 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc77)
    cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc78)
    cir.br ^bb11 loc(#loc74)
  ^bb10:  // pred: ^bb8
    %27 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc45)
    %28 = cir.cast(array_to_ptrdecay, %27 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    cir.br ^bb11 loc(#loc70)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc70)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc62)
  ^bb13:  // 2 preds: ^bb6, ^bb12
    cir.br ^bb14 loc(#loc62)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc47)
  } loc(#loc189)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc204)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc205)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc86)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc206)
    cir.br ^bb1 loc(#loc207)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc208)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc208)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc90)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc90)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc209)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc93)
    %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc93)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc93)
    %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc93)
    cir.store %10, %1 : !s32i, !cir.ptr<!s32i> loc(#loc210)
    cir.br ^bb3 loc(#loc89)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc89)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc211)
  ^bb5:  // pred: ^bb4
    %11 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc212)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc212)
    %13 = cir.call %12() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc97)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc97)
    cir.brcond %14 ^bb6, ^bb12 loc(#loc213)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc214)
  ^bb7:  // pred: ^bb6
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc102)
    %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc103)
    %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc103)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc103)
    %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc103)
    %20 = cir.cmp(gt, %15, %19) : !s32i, !cir.bool loc(#loc215)
    cir.brcond %20 ^bb8, ^bb9 loc(#loc216)
  ^bb8:  // pred: ^bb7
    %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc107)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc107)
    cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc108)
    cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc109)
    cir.br ^bb10 loc(#loc105)
  ^bb9:  // pred: ^bb7
    %25 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc110)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc110)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc111)
    cir.br ^bb10 loc(#loc101)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc101)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc96)
  ^bb12:  // 2 preds: ^bb5, ^bb11
    cir.br ^bb13 loc(#loc96)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc81)
  } loc(#loc203)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc218)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc219)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc118)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc220)
    cir.br ^bb1 loc(#loc221)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc222)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc222)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc122)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc122)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc223)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc127)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc127)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc128)
    cir.br ^bb4 loc(#loc125)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<2> : !s32i loc(#loc129)
    %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc130)
    cir.store %10, %1 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    cir.br ^bb4 loc(#loc121)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc121)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc225)
  ^bb6:  // pred: ^bb5
    %11 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc226)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc226)
    %13 = cir.call %12() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc134)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc134)
    cir.brcond %14 ^bb7, ^bb10 loc(#loc227)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc228)
  ^bb8:  // pred: ^bb7
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc139)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc115)
    %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc139)
    cir.store %17, %0 : !s32i, !cir.ptr<!s32i> loc(#loc218)
    %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc140)
    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc141)
    cir.br ^bb9 loc(#loc138)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc133)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc133)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc113)
  } loc(#loc217)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc230)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc231)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc148)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc232)
    cir.br ^bb1 loc(#loc233)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc234)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc234)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc152)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc152)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc235)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<2> : !s32i loc(#loc155)
    %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc156)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc236)
    cir.br ^bb3 loc(#loc151)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc151)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc237)
  ^bb5:  // pred: ^bb4
    %9 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc238)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc238)
    %11 = cir.call %10() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc160)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc160)
    cir.brcond %12 ^bb6, ^bb9 loc(#loc239)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc240)
  ^bb7:  // pred: ^bb6
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc165)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc145)
    %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc165)
    cir.store %15, %0 : !s32i, !cir.ptr<!s32i> loc(#loc230)
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc166)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc167)
    cir.br ^bb8 loc(#loc164)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc159)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc159)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc143)
  } loc(#loc229)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_sub_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":40:1)
#loc7 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":36:13)
#loc8 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":36:33)
#loc9 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":24:5)
#loc10 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":24:9)
#loc11 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":26:12)
#loc12 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":26:5)
#loc13 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":27:5)
#loc14 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":31:5)
#loc15 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":27:8)
#loc16 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":27:26)
#loc17 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":28:5)
#loc18 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":30:16)
#loc19 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":30:9)
#loc20 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":32:5)
#loc21 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":39:5)
#loc22 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":32:8)
#loc23 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":32:26)
#loc24 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":33:5)
#loc25 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":34:9)
#loc26 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":38:9)
#loc27 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":36:26)
#loc28 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":37:26)
#loc29 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":37:13)
#loc30 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":150:1)
#loc31 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":156:1)
#loc32 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":152:5)
#loc33 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":152:14)
#loc34 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":153:5)
#loc35 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":153:14)
#loc36 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":154:5)
#loc37 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":154:14)
#loc38 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":155:5)
#loc39 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":155:14)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":60:19)
#loc45 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":72:23)
#loc46 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":47:1)
#loc47 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":75:1)
#loc48 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":67:13)
#loc49 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":67:33)
#loc50 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":49:5)
#loc51 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":49:9)
#loc52 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":51:12)
#loc53 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":51:5)
#loc54 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":52:5)
#loc55 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":56:5)
#loc56 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":52:8)
#loc57 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":52:26)
#loc58 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":53:5)
#loc59 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":55:16)
#loc60 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":55:9)
#loc61 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":57:5)
#loc62 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":74:5)
#loc63 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":57:8)
#loc64 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":57:27)
#loc65 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":58:5)
#loc66 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":61:5)
#loc67 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":63:5)
#loc68 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":60:9)
#loc69 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":65:9)
#loc70 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":73:9)
#loc71 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":65:13)
#loc72 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":65:20)
#loc73 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":66:9)
#loc74 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":69:9)
#loc75 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":71:9)
#loc76 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":67:26)
#loc77 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":68:26)
#loc78 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":68:13)
#loc79 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":72:13)
#loc80 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":78:1)
#loc81 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":101:1)
#loc82 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":93:13)
#loc83 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":93:33)
#loc84 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":80:5)
#loc85 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":80:9)
#loc86 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":82:12)
#loc87 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":82:5)
#loc88 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":83:5)
#loc89 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":87:5)
#loc90 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":83:8)
#loc91 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":83:26)
#loc92 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":84:5)
#loc93 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":86:16)
#loc94 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":86:9)
#loc95 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":88:5)
#loc96 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":100:5)
#loc97 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":88:8)
#loc98 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":88:26)
#loc99 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":89:5)
#loc100 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":91:9)
#loc101 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":99:9)
#loc102 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":91:13)
#loc103 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":91:20)
#loc104 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":92:9)
#loc105 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":95:9)
#loc106 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":97:9)
#loc107 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":93:26)
#loc108 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":94:26)
#loc109 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":94:13)
#loc110 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":98:23)
#loc111 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":98:13)
#loc112 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":104:1)
#loc113 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":127:1)
#loc114 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":123:13)
#loc115 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":123:33)
#loc116 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":106:5)
#loc117 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":106:9)
#loc118 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":108:12)
#loc119 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":108:5)
#loc120 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":109:5)
#loc121 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":118:5)
#loc122 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":109:8)
#loc123 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":109:27)
#loc124 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":110:5)
#loc125 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":113:5)
#loc126 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":115:5)
#loc127 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":112:19)
#loc128 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":112:9)
#loc129 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":117:17)
#loc130 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":117:16)
#loc131 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":117:9)
#loc132 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":119:5)
#loc133 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":126:5)
#loc134 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":119:8)
#loc135 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":119:26)
#loc136 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":120:5)
#loc137 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":121:9)
#loc138 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":125:9)
#loc139 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":123:26)
#loc140 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":124:26)
#loc141 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":124:13)
#loc142 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":130:1)
#loc143 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":148:1)
#loc144 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":144:13)
#loc145 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":144:33)
#loc146 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":132:5)
#loc147 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":132:9)
#loc148 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":134:12)
#loc149 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":134:5)
#loc150 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":135:5)
#loc151 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":139:5)
#loc152 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":135:8)
#loc153 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":135:26)
#loc154 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":136:5)
#loc155 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":138:17)
#loc156 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":138:16)
#loc157 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":138:9)
#loc158 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":140:5)
#loc159 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":147:5)
#loc160 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":140:8)
#loc161 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":140:26)
#loc162 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":141:5)
#loc163 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":142:9)
#loc164 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":146:9)
#loc165 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":144:26)
#loc166 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":145:26)
#loc167 = loc("CWE191_Integer_Underflow__int_min_sub_11.c":145:13)
#loc168 = loc(fused[#loc1, #loc2])
#loc169 = loc(fused[#loc3, #loc4])
#loc170 = loc(fused[#loc5, #loc6])
#loc171 = loc(fused[#loc7, #loc8])
#loc172 = loc(fused[#loc9, #loc10])
#loc173 = loc(fused[#loc12, #loc11])
#loc174 = loc(fused[#loc13, #loc14])
#loc175 = loc(fused[#loc15, #loc16])
#loc176 = loc(fused[#loc17, #loc14])
#loc177 = loc(fused[#loc19, #loc18])
#loc178 = loc(fused[#loc20, #loc21])
#loc179 = loc(fused[#loc22, #loc23])
#loc180 = loc(fused[#loc24, #loc21])
#loc181 = loc(fused[#loc25, #loc26])
#loc182 = loc(fused[#loc30, #loc31])
#loc183 = loc(fused[#loc32, #loc33])
#loc184 = loc(fused[#loc34, #loc35])
#loc185 = loc(fused[#loc36, #loc37])
#loc186 = loc(fused[#loc38, #loc39])
#loc187 = loc(fused[#loc40, #loc41])
#loc188 = loc(fused[#loc42, #loc43])
#loc189 = loc(fused[#loc46, #loc47])
#loc190 = loc(fused[#loc48, #loc49])
#loc191 = loc(fused[#loc50, #loc51])
#loc192 = loc(fused[#loc53, #loc52])
#loc193 = loc(fused[#loc54, #loc55])
#loc194 = loc(fused[#loc56, #loc57])
#loc195 = loc(fused[#loc58, #loc55])
#loc196 = loc(fused[#loc60, #loc59])
#loc197 = loc(fused[#loc61, #loc62])
#loc198 = loc(fused[#loc63, #loc64])
#loc199 = loc(fused[#loc65, #loc66, #loc67, #loc62])
#loc200 = loc(fused[#loc69, #loc70])
#loc201 = loc(fused[#loc71, #loc72])
#loc202 = loc(fused[#loc73, #loc74, #loc75, #loc70])
#loc203 = loc(fused[#loc80, #loc81])
#loc204 = loc(fused[#loc82, #loc83])
#loc205 = loc(fused[#loc84, #loc85])
#loc206 = loc(fused[#loc87, #loc86])
#loc207 = loc(fused[#loc88, #loc89])
#loc208 = loc(fused[#loc90, #loc91])
#loc209 = loc(fused[#loc92, #loc89])
#loc210 = loc(fused[#loc94, #loc93])
#loc211 = loc(fused[#loc95, #loc96])
#loc212 = loc(fused[#loc97, #loc98])
#loc213 = loc(fused[#loc99, #loc96])
#loc214 = loc(fused[#loc100, #loc101])
#loc215 = loc(fused[#loc102, #loc103])
#loc216 = loc(fused[#loc104, #loc105, #loc106, #loc101])
#loc217 = loc(fused[#loc112, #loc113])
#loc218 = loc(fused[#loc114, #loc115])
#loc219 = loc(fused[#loc116, #loc117])
#loc220 = loc(fused[#loc119, #loc118])
#loc221 = loc(fused[#loc120, #loc121])
#loc222 = loc(fused[#loc122, #loc123])
#loc223 = loc(fused[#loc124, #loc125, #loc126, #loc121])
#loc224 = loc(fused[#loc131, #loc129])
#loc225 = loc(fused[#loc132, #loc133])
#loc226 = loc(fused[#loc134, #loc135])
#loc227 = loc(fused[#loc136, #loc133])
#loc228 = loc(fused[#loc137, #loc138])
#loc229 = loc(fused[#loc142, #loc143])
#loc230 = loc(fused[#loc144, #loc145])
#loc231 = loc(fused[#loc146, #loc147])
#loc232 = loc(fused[#loc149, #loc148])
#loc233 = loc(fused[#loc150, #loc151])
#loc234 = loc(fused[#loc152, #loc153])
#loc235 = loc(fused[#loc154, #loc151])
#loc236 = loc(fused[#loc157, #loc155])
#loc237 = loc(fused[#loc158, #loc159])
#loc238 = loc(fused[#loc160, #loc161])
#loc239 = loc(fused[#loc162, #loc159])
#loc240 = loc(fused[#loc163, #loc164])
