!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc145)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc146)
  cir.func private @printIntLine(!s32i) loc(#loc147)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc148)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc150)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc151)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc17)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc18)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc153)
      cir.if %4 {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc20)
        %6 = cir.const #cir.int<10> : !s32i loc(#loc21)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc21)
        %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc20)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc155)
        cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc156)
        cir.scope {
          %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
          %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc27)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc27)
          %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !cir.bool loc(#loc158)
          cir.if %13 {
            %14 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc29)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc30)
            %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc31)
            cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc29)
          } loc(#loc159)
        } loc(#loc157)
      } loc(#loc154)
    } loc(#loc152)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc161)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc161)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc161)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc36)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc36)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc37)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc37)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc38)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc38)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc162)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc163)
      cir.libc.memmove %11 bytes from %7 to %5 : !cir.ptr<!void>, !u64i loc(#loc164)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc44)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc45)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc43)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc46)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc47)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc48)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc48)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc47)
    } loc(#loc160)
    cir.return loc(#loc10)
  } loc(#loc149)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc166)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc51)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc167)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc53)
    cir.return loc(#loc50)
  } loc(#loc165)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc168)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc57)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc170)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc62)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc171)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc66)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc67)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !cir.bool loc(#loc173)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc57)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc57)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc71)
      } else {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc72)
        %6 = cir.const #cir.int<10> : !s32i loc(#loc73)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc73)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc175)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc176)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc72)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc177)
        cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc178)
        cir.scope {
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc80)
          %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc81)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc81)
          %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !cir.bool loc(#loc180)
          cir.if %15 {
            %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc83)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc84)
            %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc85)
            cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc83)
          } loc(#loc181)
        } loc(#loc179)
      } loc(#loc174)
    } loc(#loc172)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc183)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc183)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc183)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc90)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc90)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc91)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc91)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc92)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc92)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc184)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc185)
      cir.libc.memmove %11 bytes from %7 to %5 : !cir.ptr<!void>, !u64i loc(#loc186)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc97)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc98)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc99)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc97)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc100)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc101)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc102)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc102)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc101)
    } loc(#loc182)
    cir.return loc(#loc59)
  } loc(#loc169)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc188)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc107)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc189)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc111)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc112)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc191)
      cir.if %4 {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc114)
        %6 = cir.const #cir.int<10> : !s32i loc(#loc115)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc115)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc193)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc194)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc114)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc195)
        cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc196)
        cir.scope {
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc122)
          %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc123)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc123)
          %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !cir.bool loc(#loc198)
          cir.if %15 {
            %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc125)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc126)
            %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc127)
            cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc125)
          } loc(#loc199)
        } loc(#loc197)
      } loc(#loc192)
    } loc(#loc190)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc201)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc201)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc201)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc132)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc132)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc133)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc133)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc134)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc134)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc202)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc203)
      cir.libc.memmove %11 bytes from %7 to %5 : !cir.ptr<!void>, !u64i loc(#loc204)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc139)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc140)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc141)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc139)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc142)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc143)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc144)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc144)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc143)
    } loc(#loc200)
    cir.return loc(#loc104)
  } loc(#loc187)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":25:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":42:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":27:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":27:11)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":28:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":28:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":29:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":34:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":29:8)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":29:27)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":30:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":32:23)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":32:30)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":32:32)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":32:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":33:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":33:37)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":33:13)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":33:21)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":33:27)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":33:28)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":33:34)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":33:33)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":35:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":41:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":36:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":36:28)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":38:17)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":38:23)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":38:31)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":38:34)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":38:44)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":38:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":38:45)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":39:22)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":39:27)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":39:28)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":39:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":40:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":40:14)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":93:1)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":97:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":95:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":95:14)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":96:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":96:14)
#loc55 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc56 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":56:19)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":49:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":71:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":51:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":51:11)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":52:12)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":52:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":53:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":63:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":53:8)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":53:27)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":54:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":57:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":59:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":56:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":61:23)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":61:30)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":61:33)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":61:43)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":61:44)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":61:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":62:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":62:37)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":62:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":62:21)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":62:27)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":62:28)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":62:34)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":62:33)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":64:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":70:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":65:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":65:28)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":67:17)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":67:23)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":67:31)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":67:34)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":67:44)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":67:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":67:45)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":68:22)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":68:27)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":68:28)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":68:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":69:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":69:14)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":74:1)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":91:1)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":76:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":76:11)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":77:12)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":77:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":78:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":83:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":78:8)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":78:27)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":79:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":81:23)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":81:30)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":81:33)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":81:43)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":81:44)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":81:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":82:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":82:37)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":82:13)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":82:21)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":82:27)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":82:28)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":82:34)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":82:33)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":84:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":90:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":85:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":85:28)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":87:17)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":87:23)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":87:31)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":87:34)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":87:44)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":87:9)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":87:45)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":88:22)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":88:27)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":88:28)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":88:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":89:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":89:14)
#loc145 = loc(fused[#loc1, #loc2])
#loc146 = loc(fused[#loc3, #loc4])
#loc147 = loc(fused[#loc5, #loc6])
#loc148 = loc(fused[#loc7, #loc8])
#loc149 = loc(fused[#loc9, #loc10])
#loc150 = loc(fused[#loc11, #loc12])
#loc151 = loc(fused[#loc14, #loc13])
#loc152 = loc(fused[#loc15, #loc16])
#loc153 = loc(fused[#loc17, #loc18])
#loc154 = loc(fused[#loc19, #loc16])
#loc155 = loc(fused[#loc20, #loc22])
#loc156 = loc(fused[#loc23, #loc22])
#loc157 = loc(fused[#loc24, #loc25])
#loc158 = loc(fused[#loc26, #loc27])
#loc159 = loc(fused[#loc28, #loc25])
#loc160 = loc(fused[#loc32, #loc33])
#loc161 = loc(fused[#loc34, #loc35])
#loc162 = loc(fused[#loc39, #loc40])
#loc163 = loc(fused[#loc38, #loc40])
#loc164 = loc(fused[#loc41, #loc42])
#loc165 = loc(fused[#loc49, #loc50])
#loc166 = loc(fused[#loc51, #loc52])
#loc167 = loc(fused[#loc53, #loc54])
#loc168 = loc(fused[#loc55, #loc56])
#loc169 = loc(fused[#loc58, #loc59])
#loc170 = loc(fused[#loc60, #loc61])
#loc171 = loc(fused[#loc63, #loc62])
#loc172 = loc(fused[#loc64, #loc65])
#loc173 = loc(fused[#loc66, #loc67])
#loc174 = loc(fused[#loc68, #loc69, #loc70, #loc65])
#loc175 = loc(fused[#loc74, #loc75])
#loc176 = loc(fused[#loc73, #loc75])
#loc177 = loc(fused[#loc72, #loc76])
#loc178 = loc(fused[#loc77, #loc76])
#loc179 = loc(fused[#loc78, #loc79])
#loc180 = loc(fused[#loc80, #loc81])
#loc181 = loc(fused[#loc82, #loc79])
#loc182 = loc(fused[#loc86, #loc87])
#loc183 = loc(fused[#loc88, #loc89])
#loc184 = loc(fused[#loc93, #loc94])
#loc185 = loc(fused[#loc92, #loc94])
#loc186 = loc(fused[#loc95, #loc96])
#loc187 = loc(fused[#loc103, #loc104])
#loc188 = loc(fused[#loc105, #loc106])
#loc189 = loc(fused[#loc108, #loc107])
#loc190 = loc(fused[#loc109, #loc110])
#loc191 = loc(fused[#loc111, #loc112])
#loc192 = loc(fused[#loc113, #loc110])
#loc193 = loc(fused[#loc116, #loc117])
#loc194 = loc(fused[#loc115, #loc117])
#loc195 = loc(fused[#loc114, #loc118])
#loc196 = loc(fused[#loc119, #loc118])
#loc197 = loc(fused[#loc120, #loc121])
#loc198 = loc(fused[#loc122, #loc123])
#loc199 = loc(fused[#loc124, #loc121])
#loc200 = loc(fused[#loc128, #loc129])
#loc201 = loc(fused[#loc130, #loc131])
#loc202 = loc(fused[#loc135, #loc136])
#loc203 = loc(fused[#loc134, #loc136])
#loc204 = loc(fused[#loc137, #loc138])
