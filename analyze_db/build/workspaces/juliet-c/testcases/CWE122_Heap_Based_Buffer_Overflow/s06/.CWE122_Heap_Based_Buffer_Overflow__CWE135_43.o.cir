!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":27:23)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":27:31)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":60:27)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":60:35)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":89:27)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":89:35)
#loc234 = loc(fused[#loc7, #loc8])
#loc263 = loc(fused[#loc87, #loc88])
#loc287 = loc(fused[#loc157, #loc158])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc231)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc232)
  cir.func internal private @_ZN44CWE122_Heap_Based_Buffer_Overflow__CWE135_43L9badSourceERPv(%arg0: !cir.ptr<!cir.ptr<!void>> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["data", init, const] {alignment = 8 : i64} loc(#loc234)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc9)
    cir.scope {
      %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc236)
      %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc14)
      %3 = cir.const #cir.int<50> : !s32i loc(#loc15)
      %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc15)
      %5 = cir.const #cir.int<4> : !u64i loc(#loc237)
      %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc238)
      %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc14)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc239)
      cir.store %8, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc236)
      cir.scope {
        %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc20)
        %26 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc21)
        %27 = cir.cmp(eq, %25, %26) : !cir.ptr<!s32i>, !cir.bool loc(#loc241)
        cir.if %27 {
          %28 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc23)
          %29 = cir.const #cir.int<1> : !s32i loc(#loc24)
          %30 = cir.unary(minus, %29) nsw : !s32i, !s32i loc(#loc25)
          cir.call @exit(%30) : (!s32i) -> () extra(#fn_attr) loc(#loc23)
        } loc(#loc242)
      } loc(#loc240)
      %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
      %10 = cir.const #cir.int<65> : !s32i loc(#loc27)
      %11 = cir.const #cir.int<50> : !s32i loc(#loc28)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc29)
      %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc28)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc28)
      %15 = cir.call @wmemset(%9, %10, %14) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc30)
      %16 = cir.const #cir.int<0> : !s32i loc(#loc31)
      %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
      %18 = cir.const #cir.int<50> : !s32i loc(#loc33)
      %19 = cir.const #cir.int<1> : !s32i loc(#loc34)
      %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc33)
      %21 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc35)
      cir.store %16, %21 : !s32i, !cir.ptr<!s32i> loc(#loc243)
      %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc36)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc36)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc37)
      cir.store %23, %24 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc244)
    } loc(#loc235)
    cir.return loc(#loc6)
  } loc(#loc233)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc245)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc246)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc247)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc248)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc249)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc250)
  cir.func @_ZN44CWE122_Heap_Based_Buffer_Overflow__CWE135_433badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc252)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc54)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc253)
    cir.call @_ZN44CWE122_Heap_Based_Buffer_Overflow__CWE135_43L9badSourceERPv(%0) : (!cir.ptr<!cir.ptr<!void>>) -> () loc(#loc56)
    cir.scope {
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc255)
      %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc256)
      %4 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc63)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc64)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc64)
      %7 = cir.call @strlen(%6) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc63)
      cir.store %7, %2 : !u64i, !cir.ptr<!u64i> loc(#loc255)
      %8 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc65)
      %9 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc66)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc67)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc67)
      %12 = cir.binop(add, %9, %11) : !u64i loc(#loc257)
      %13 = cir.const #cir.int<4> : !u64i loc(#loc258)
      %14 = cir.call @calloc(%12, %13) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc65)
      cir.store %14, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc256)
      cir.scope {
        %24 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc72)
        %25 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc73)
        %26 = cir.cmp(eq, %24, %25) : !cir.ptr<!void>, !cir.bool loc(#loc260)
        cir.if %26 {
          %27 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc75)
          %28 = cir.const #cir.int<1> : !s32i loc(#loc76)
          %29 = cir.unary(minus, %28) nsw : !s32i, !s32i loc(#loc77)
          cir.call @exit(%29) : (!s32i) -> () extra(#fn_attr) loc(#loc75)
        } loc(#loc261)
      } loc(#loc259)
      %15 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc78)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc78)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc79)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc79)
      %19 = cir.call @wcscpy(%16, %18) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc80)
      %20 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc81)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc81)
      cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc82)
      %22 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc83)
      %23 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc84)
      cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc83)
    } loc(#loc254)
    cir.return loc(#loc51)
  } loc(#loc251)
  cir.func internal private @_ZN44CWE122_Heap_Based_Buffer_Overflow__CWE135_43L13goodG2BSourceERPv(%arg0: !cir.ptr<!cir.ptr<!void>> loc(fused[#loc87, #loc88])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["data", init, const] {alignment = 8 : i64} loc(#loc263)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc89)
    cir.scope {
      %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc265)
      %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc94)
      %3 = cir.const #cir.int<50> : !s32i loc(#loc95)
      %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc95)
      %5 = cir.const #cir.int<1> : !u64i loc(#loc266)
      %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc267)
      %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc94)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc268)
      cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc265)
      cir.scope {
        %26 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc100)
        %27 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc101)
        %28 = cir.cmp(eq, %26, %27) : !cir.ptr<!s8i>, !cir.bool loc(#loc270)
        cir.if %28 {
          %29 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc103)
          %30 = cir.const #cir.int<1> : !s32i loc(#loc104)
          %31 = cir.unary(minus, %30) nsw : !s32i, !s32i loc(#loc105)
          cir.call @exit(%31) : (!s32i) -> () extra(#fn_attr) loc(#loc103)
        } loc(#loc271)
      } loc(#loc269)
      %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc106)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc106)
      %11 = cir.const #cir.int<65> : !s8i loc(#loc107)
      %12 = cir.cast(integral, %11 : !s8i), !s32i loc(#loc107)
      %13 = cir.const #cir.int<50> : !s32i loc(#loc108)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc109)
      %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc108)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc108)
      cir.libc.memset %16 bytes from %10 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc272)
      %17 = cir.const #cir.int<0> : !s8i loc(#loc112)
      %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc113)
      %19 = cir.const #cir.int<50> : !s32i loc(#loc114)
      %20 = cir.const #cir.int<1> : !s32i loc(#loc115)
      %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc114)
      %22 = cir.ptr_stride(%18 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc116)
      cir.store %17, %22 : !s8i, !cir.ptr<!s8i> loc(#loc273)
      %23 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc117)
      %24 = cir.cast(bitcast, %23 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc117)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc118)
      cir.store %24, %25 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc274)
    } loc(#loc264)
    cir.return loc(#loc86)
  } loc(#loc262)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc275)
  cir.func internal private @_ZN44CWE122_Heap_Based_Buffer_Overflow__CWE135_43L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc277)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc125)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc278)
    cir.call @_ZN44CWE122_Heap_Based_Buffer_Overflow__CWE135_43L13goodG2BSourceERPv(%0) : (!cir.ptr<!cir.ptr<!void>>) -> () loc(#loc127)
    cir.scope {
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc280)
      %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc281)
      %4 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc134)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc135)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc135)
      %7 = cir.call @strlen(%6) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc134)
      cir.store %7, %2 : !u64i, !cir.ptr<!u64i> loc(#loc280)
      %8 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc136)
      %9 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc137)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc138)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc138)
      %12 = cir.binop(add, %9, %11) : !u64i loc(#loc282)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc139)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc139)
      %15 = cir.call @calloc(%12, %14) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc136)
      cir.store %15, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc281)
      cir.scope {
        %26 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc142)
        %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc143)
        %28 = cir.cmp(eq, %26, %27) : !cir.ptr<!void>, !cir.bool loc(#loc284)
        cir.if %28 {
          %29 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc145)
          %30 = cir.const #cir.int<1> : !s32i loc(#loc146)
          %31 = cir.unary(minus, %30) nsw : !s32i, !s32i loc(#loc147)
          cir.call @exit(%31) : (!s32i) -> () extra(#fn_attr) loc(#loc145)
        } loc(#loc285)
      } loc(#loc283)
      %16 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc148)
      %17 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc149)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc149)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc150)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc150)
      %21 = cir.call @strcpy(%18, %20) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc148)
      %22 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc151)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc151)
      cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc152)
      %24 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc153)
      %25 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc154)
      cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc153)
    } loc(#loc279)
    cir.return loc(#loc122)
  } loc(#loc276)
  cir.func internal private @_ZN44CWE122_Heap_Based_Buffer_Overflow__CWE135_43L13goodB2GSourceERPv(%arg0: !cir.ptr<!cir.ptr<!void>> loc(fused[#loc157, #loc158])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["data", init, const] {alignment = 8 : i64} loc(#loc287)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc159)
    cir.scope {
      %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc289)
      %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc164)
      %3 = cir.const #cir.int<50> : !s32i loc(#loc165)
      %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc165)
      %5 = cir.const #cir.int<4> : !u64i loc(#loc290)
      %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc291)
      %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc164)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc292)
      cir.store %8, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc289)
      cir.scope {
        %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc170)
        %26 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc171)
        %27 = cir.cmp(eq, %25, %26) : !cir.ptr<!s32i>, !cir.bool loc(#loc294)
        cir.if %27 {
          %28 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc173)
          %29 = cir.const #cir.int<1> : !s32i loc(#loc174)
          %30 = cir.unary(minus, %29) nsw : !s32i, !s32i loc(#loc175)
          cir.call @exit(%30) : (!s32i) -> () extra(#fn_attr) loc(#loc173)
        } loc(#loc295)
      } loc(#loc293)
      %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc176)
      %10 = cir.const #cir.int<65> : !s32i loc(#loc177)
      %11 = cir.const #cir.int<50> : !s32i loc(#loc178)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc179)
      %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc178)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc178)
      %15 = cir.call @wmemset(%9, %10, %14) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc180)
      %16 = cir.const #cir.int<0> : !s32i loc(#loc181)
      %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc182)
      %18 = cir.const #cir.int<50> : !s32i loc(#loc183)
      %19 = cir.const #cir.int<1> : !s32i loc(#loc184)
      %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc183)
      %21 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc185)
      cir.store %16, %21 : !s32i, !cir.ptr<!s32i> loc(#loc296)
      %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc186)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc186)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc187)
      cir.store %23, %24 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc297)
    } loc(#loc288)
    cir.return loc(#loc156)
  } loc(#loc286)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc298)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc299)
  cir.func internal private @_ZN44CWE122_Heap_Based_Buffer_Overflow__CWE135_43L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc301)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc196)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc302)
    cir.call @_ZN44CWE122_Heap_Based_Buffer_Overflow__CWE135_43L13goodB2GSourceERPv(%0) : (!cir.ptr<!cir.ptr<!void>>) -> () loc(#loc198)
    cir.scope {
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc304)
      %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc305)
      %4 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc205)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc206)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc206)
      %7 = cir.call @wcslen(%6) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc205)
      cir.store %7, %2 : !u64i, !cir.ptr<!u64i> loc(#loc304)
      %8 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc207)
      %9 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc208)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc209)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc209)
      %12 = cir.binop(add, %9, %11) : !u64i loc(#loc306)
      %13 = cir.const #cir.int<4> : !u64i loc(#loc307)
      %14 = cir.call @calloc(%12, %13) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc207)
      cir.store %14, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc305)
      cir.scope {
        %24 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc214)
        %25 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc215)
        %26 = cir.cmp(eq, %24, %25) : !cir.ptr<!void>, !cir.bool loc(#loc309)
        cir.if %26 {
          %27 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc217)
          %28 = cir.const #cir.int<1> : !s32i loc(#loc218)
          %29 = cir.unary(minus, %28) nsw : !s32i, !s32i loc(#loc219)
          cir.call @exit(%29) : (!s32i) -> () extra(#fn_attr) loc(#loc217)
        } loc(#loc310)
      } loc(#loc308)
      %15 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc220)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc220)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc221)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc221)
      %19 = cir.call @wcscpy(%16, %18) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc222)
      %20 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc223)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc223)
      cir.call @printWLine(%21) : (!cir.ptr<!s32i>) -> () loc(#loc224)
      %22 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc225)
      %23 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc226)
      cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc225)
    } loc(#loc303)
    cir.return loc(#loc193)
  } loc(#loc300)
  cir.func @_ZN44CWE122_Heap_Based_Buffer_Overflow__CWE135_434goodEv() extra(#fn_attr1) {
    cir.call @_ZN44CWE122_Heap_Based_Buffer_Overflow__CWE135_43L7goodG2BEv() : () -> () loc(#loc229)
    cir.call @_ZN44CWE122_Heap_Based_Buffer_Overflow__CWE135_43L7goodB2GEv() : () -> () loc(#loc230)
    cir.return loc(#loc228)
  } loc(#loc311)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/wchar.h":296:1)
#loc4 = loc("/usr/include/wchar.h":296:65)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":27:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":37:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":28:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":29:5)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":36:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":30:9)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":30:71)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":30:46)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":30:53)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":30:56)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":30:70)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":31:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":31:46)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":31:13)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":31:30)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":31:36)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":31:37)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":31:43)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":31:42)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":32:17)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":32:32)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":32:38)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":32:41)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":32:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":33:31)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":33:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":33:23)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":33:26)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":33:27)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":35:24)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":35:9)
#loc38 = loc("/usr/include/string.h":407:1)
#loc39 = loc("/usr/include/string.h":408:33)
#loc40 = loc("/usr/include/stdlib.h":675:1)
#loc41 = loc("/usr/include/stdlib.h":676:14)
#loc42 = loc("/usr/include/stdlib.h":756:1)
#loc43 = loc("/usr/include/stdlib.h":756:70)
#loc44 = loc("/usr/include/wchar.h":98:1)
#loc45 = loc("/usr/include/wchar.h":100:14)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc48 = loc("/usr/include/stdlib.h":687:1)
#loc49 = loc("/usr/include/stdlib.h":687:32)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":39:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":53:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":41:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":41:12)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":42:12)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":42:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":43:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":44:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":52:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":46:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":46:45)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":47:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":47:64)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":46:26)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":46:41)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":47:31)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":47:38)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":47:46)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":47:49)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":47:63)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":48:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":48:37)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":48:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":48:21)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":48:27)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":48:28)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":48:34)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":48:33)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":49:33)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":49:50)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":49:15)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":50:27)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":50:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":51:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":51:14)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":60:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":70:1)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":61:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":62:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":69:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":63:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":63:63)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":63:41)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":63:48)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":63:51)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":63:62)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":64:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":64:47)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":64:13)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":64:31)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":64:37)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":64:38)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":64:44)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":64:43)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":65:16)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":65:32)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":65:37)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":65:40)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":65:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":65:41)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":66:32)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":66:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":66:24)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":66:27)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":66:28)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":68:24)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":68:9)
#loc119 = loc("/usr/include/string.h":141:1)
#loc120 = loc("/usr/include/string.h":142:14)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":72:1)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":86:1)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":74:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":74:12)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":75:12)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":75:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":76:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":77:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":85:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":79:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":79:45)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":80:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":80:50)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":79:26)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":79:41)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":80:31)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":80:38)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":80:46)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":80:49)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":81:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":81:37)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":81:13)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":81:21)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":81:27)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":81:28)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":81:34)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":81:33)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":82:15)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":82:30)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":82:44)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":83:27)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":83:9)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":84:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":84:14)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":89:1)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":99:1)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":90:1)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":91:5)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":98:5)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":92:9)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":92:71)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":92:46)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":92:53)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":92:56)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":92:70)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":93:9)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":93:46)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":93:13)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":93:30)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":93:36)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":93:37)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":93:43)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":93:42)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":94:17)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":94:32)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":94:38)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":94:41)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":94:9)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":95:31)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":95:9)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":95:23)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":95:26)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":95:27)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":97:24)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":97:9)
#loc188 = loc("/usr/include/wchar.h":247:1)
#loc189 = loc("/usr/include/wchar.h":247:51)
#loc190 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc191 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":101:1)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":115:1)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":103:5)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":103:12)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":104:12)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":104:5)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":105:5)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":106:5)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":114:5)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":108:9)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":108:48)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":109:9)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":109:64)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":108:26)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":108:44)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":109:31)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":109:38)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":109:46)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":109:49)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":109:63)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":110:9)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":110:37)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":110:13)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":110:21)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":110:27)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":110:28)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":110:34)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":110:33)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":111:33)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":111:50)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":111:15)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":112:31)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":112:9)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":113:9)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":113:14)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":117:1)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":121:1)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":119:5)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_43.cpp":120:5)
#loc231 = loc(fused[#loc1, #loc2])
#loc232 = loc(fused[#loc3, #loc4])
#loc233 = loc(fused[#loc5, #loc6])
#loc235 = loc(fused[#loc10, #loc11])
#loc236 = loc(fused[#loc12, #loc13])
#loc237 = loc(fused[#loc16, #loc17])
#loc238 = loc(fused[#loc15, #loc17])
#loc239 = loc(fused[#loc14, #loc13])
#loc240 = loc(fused[#loc18, #loc19])
#loc241 = loc(fused[#loc20, #loc21])
#loc242 = loc(fused[#loc22, #loc19])
#loc243 = loc(fused[#loc32, #loc31])
#loc244 = loc(fused[#loc37, #loc36])
#loc245 = loc(fused[#loc38, #loc39])
#loc246 = loc(fused[#loc40, #loc41])
#loc247 = loc(fused[#loc42, #loc43])
#loc248 = loc(fused[#loc44, #loc45])
#loc249 = loc(fused[#loc46, #loc47])
#loc250 = loc(fused[#loc48, #loc49])
#loc251 = loc(fused[#loc50, #loc51])
#loc252 = loc(fused[#loc52, #loc53])
#loc253 = loc(fused[#loc55, #loc54])
#loc254 = loc(fused[#loc57, #loc58])
#loc255 = loc(fused[#loc59, #loc60])
#loc256 = loc(fused[#loc61, #loc62])
#loc257 = loc(fused[#loc66, #loc67])
#loc258 = loc(fused[#loc68, #loc69])
#loc259 = loc(fused[#loc70, #loc71])
#loc260 = loc(fused[#loc72, #loc73])
#loc261 = loc(fused[#loc74, #loc71])
#loc262 = loc(fused[#loc85, #loc86])
#loc264 = loc(fused[#loc90, #loc91])
#loc265 = loc(fused[#loc92, #loc93])
#loc266 = loc(fused[#loc96, #loc97])
#loc267 = loc(fused[#loc95, #loc97])
#loc268 = loc(fused[#loc94, #loc93])
#loc269 = loc(fused[#loc98, #loc99])
#loc270 = loc(fused[#loc100, #loc101])
#loc271 = loc(fused[#loc102, #loc99])
#loc272 = loc(fused[#loc110, #loc111])
#loc273 = loc(fused[#loc113, #loc112])
#loc274 = loc(fused[#loc118, #loc117])
#loc275 = loc(fused[#loc119, #loc120])
#loc276 = loc(fused[#loc121, #loc122])
#loc277 = loc(fused[#loc123, #loc124])
#loc278 = loc(fused[#loc126, #loc125])
#loc279 = loc(fused[#loc128, #loc129])
#loc280 = loc(fused[#loc130, #loc131])
#loc281 = loc(fused[#loc132, #loc133])
#loc282 = loc(fused[#loc137, #loc138])
#loc283 = loc(fused[#loc140, #loc141])
#loc284 = loc(fused[#loc142, #loc143])
#loc285 = loc(fused[#loc144, #loc141])
#loc286 = loc(fused[#loc155, #loc156])
#loc288 = loc(fused[#loc160, #loc161])
#loc289 = loc(fused[#loc162, #loc163])
#loc290 = loc(fused[#loc166, #loc167])
#loc291 = loc(fused[#loc165, #loc167])
#loc292 = loc(fused[#loc164, #loc163])
#loc293 = loc(fused[#loc168, #loc169])
#loc294 = loc(fused[#loc170, #loc171])
#loc295 = loc(fused[#loc172, #loc169])
#loc296 = loc(fused[#loc182, #loc181])
#loc297 = loc(fused[#loc187, #loc186])
#loc298 = loc(fused[#loc188, #loc189])
#loc299 = loc(fused[#loc190, #loc191])
#loc300 = loc(fused[#loc192, #loc193])
#loc301 = loc(fused[#loc194, #loc195])
#loc302 = loc(fused[#loc197, #loc196])
#loc303 = loc(fused[#loc199, #loc200])
#loc304 = loc(fused[#loc201, #loc202])
#loc305 = loc(fused[#loc203, #loc204])
#loc306 = loc(fused[#loc208, #loc209])
#loc307 = loc(fused[#loc210, #loc211])
#loc308 = loc(fused[#loc212, #loc213])
#loc309 = loc(fused[#loc214, #loc215])
#loc310 = loc(fused[#loc216, #loc213])
#loc311 = loc(fused[#loc227, #loc228])
