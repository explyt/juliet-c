!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":63:12)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":153:12)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":130:23)
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc263)
  cir.global "private" internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_badData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc264)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc266)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc10)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc267)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc12)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc12)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc12)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc12)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc12)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc12)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc12)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc12)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc12)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc12)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc12)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc12)
    cir.br ^bb3(%18 : !u32i) loc(#loc12)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc12)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc12)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc12)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc12)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc12)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc12)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc12)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc12)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc12)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc12)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc12)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc12)
    cir.br ^bb3(%34 : !u32i) loc(#loc12)
  ^bb3(%35: !u32i loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":63:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc12)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc12)
    cir.store %36, %0 : !s32i, !cir.ptr<!s32i> loc(#loc268)
    %37 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    %38 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_badData : !cir.ptr<!s32i> loc(#loc264)
    cir.store %37, %38 : !s32i, !cir.ptr<!s32i> loc(#loc269)
    %39 = cir.get_global @badSink : !cir.ptr<!cir.func<!void ()>> loc(#loc270)
    cir.call %39() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc16)
    cir.return loc(#loc6)
  } loc(#loc265)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc272)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc20)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc273)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc22)
    cir.return loc(#loc19)
  } loc(#loc271)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc274)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc275)
  cir.func private @printIntLine(!s32i) loc(#loc276)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc277)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc32)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc278)
  cir.func no_proto internal private @badSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc280)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc281)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc282)
    %3 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_badData : !cir.ptr<!s32i> loc(#loc264)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc42)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc282)
    cir.br ^bb1 loc(#loc283)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc45)
    %6 = cir.const #cir.int<10> : !s32i loc(#loc46)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc46)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc284)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc285)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc45)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc286)
    cir.store %11, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc281)
    cir.br ^bb2 loc(#loc287)
  ^bb2:  // pred: ^bb1
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc51)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc52)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc52)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !cir.bool loc(#loc288)
    cir.brcond %15 ^bb3, ^bb4 loc(#loc289)
  ^bb3:  // pred: ^bb2
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc54)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc56)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc54)
    cir.br ^bb4 loc(#loc50)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc50)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc290)
  ^bb6:  // pred: ^bb5
    %19 = cir.const #cir.int<0> : !s32i loc(#loc59)
    cir.store %19, %0 : !s32i, !cir.ptr<!s32i> loc(#loc291)
    cir.br ^bb7 loc(#loc290)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    %21 = cir.const #cir.int<10> : !s32i loc(#loc62)
    %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc292)
    cir.brcond %22 ^bb8, ^bb12 loc(#loc63)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc293)
  ^bb9:  // pred: ^bb8
    %23 = cir.const #cir.int<0> : !s32i loc(#loc65)
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc66)
    %25 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc67)
    %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc68)
    cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc294)
    cir.br ^bb10 loc(#loc58)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc58)
  ^bb11:  // pred: ^bb10
    %27 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
    %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc70)
    cir.store %28, %0 : !s32i, !cir.ptr<!s32i> loc(#loc295)
    cir.br ^bb7 loc(#loc290)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc58)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc296)
  ^bb14:  // pred: ^bb13
    %29 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc73)
    %30 = cir.const #cir.int<0> : !s32i loc(#loc74)
    %31 = cir.cmp(ge, %29, %30) : !s32i, !cir.bool loc(#loc297)
    cir.brcond %31 ^bb15, ^bb24 loc(#loc298)
  ^bb15:  // pred: ^bb14
    %32 = cir.const #cir.int<1> : !s32i loc(#loc78)
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc79)
    %34 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc80)
    %35 = cir.ptr_stride(%33 : !cir.ptr<!s32i>, %34 : !s32i), !cir.ptr<!s32i> loc(#loc81)
    cir.store %32, %35 : !s32i, !cir.ptr<!s32i> loc(#loc299)
    cir.br ^bb16 loc(#loc300)
  ^bb16:  // pred: ^bb15
    %36 = cir.const #cir.int<0> : !s32i loc(#loc84)
    cir.store %36, %0 : !s32i, !cir.ptr<!s32i> loc(#loc301)
    cir.br ^bb17 loc(#loc300)
  ^bb17:  // 2 preds: ^bb16, ^bb21
    %37 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    %38 = cir.const #cir.int<10> : !s32i loc(#loc87)
    %39 = cir.cmp(lt, %37, %38) : !s32i, !cir.bool loc(#loc302)
    cir.brcond %39 ^bb18, ^bb22 loc(#loc88)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc303)
  ^bb19:  // pred: ^bb18
    %40 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc90)
    %41 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc91)
    %42 = cir.ptr_stride(%40 : !cir.ptr<!s32i>, %41 : !s32i), !cir.ptr<!s32i> loc(#loc92)
    %43 = cir.load %42 : !cir.ptr<!s32i>, !s32i loc(#loc90)
    cir.call @printIntLine(%43) : (!s32i) -> () loc(#loc93)
    cir.br ^bb20 loc(#loc83)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc83)
  ^bb21:  // pred: ^bb20
    %44 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
    %45 = cir.unary(inc, %44) : !s32i, !s32i loc(#loc95)
    cir.store %45, %0 : !s32i, !cir.ptr<!s32i> loc(#loc304)
    cir.br ^bb17 loc(#loc300)
  ^bb22:  // pred: ^bb17
    cir.br ^bb23 loc(#loc83)
  ^bb23:  // pred: ^bb22
    cir.br ^bb25 loc(#loc76)
  ^bb24:  // pred: ^bb14
    %46 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc32)
    %47 = cir.cast(array_to_ptrdecay, %46 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc32)
    cir.call @printLine(%47) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    cir.br ^bb25 loc(#loc72)
  ^bb25:  // 2 preds: ^bb23, ^bb24
    cir.br ^bb26 loc(#loc72)
  ^bb26:  // pred: ^bb25
    %48 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc97)
    %49 = cir.cast(bitcast, %48 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc97)
    cir.call @free(%49) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc98)
    cir.br ^bb27 loc(#loc44)
  ^bb27:  // pred: ^bb26
    cir.return loc(#loc36)
  } loc(#loc279)
  cir.global "private" internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_goodG2BData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc305)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc307)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc105)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc106)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc308)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc108)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc309)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
    %5 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_goodG2BData : !cir.ptr<!s32i> loc(#loc305)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc310)
    %6 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void ()>> loc(#loc311)
    cir.call %6() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc112)
    cir.return loc(#loc102)
  } loc(#loc306)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc313)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc314)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc315)
    %3 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_goodG2BData : !cir.ptr<!s32i> loc(#loc305)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc121)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc315)
    cir.br ^bb1 loc(#loc316)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc124)
    %6 = cir.const #cir.int<10> : !s32i loc(#loc125)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc125)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc317)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc318)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc124)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc319)
    cir.store %11, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc314)
    cir.br ^bb2 loc(#loc320)
  ^bb2:  // pred: ^bb1
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc130)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc131)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc131)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !cir.bool loc(#loc321)
    cir.brcond %15 ^bb3, ^bb4 loc(#loc322)
  ^bb3:  // pred: ^bb2
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc133)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc134)
    %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc135)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc133)
    cir.br ^bb4 loc(#loc129)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc129)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc323)
  ^bb6:  // pred: ^bb5
    %19 = cir.const #cir.int<0> : !s32i loc(#loc138)
    cir.store %19, %0 : !s32i, !cir.ptr<!s32i> loc(#loc324)
    cir.br ^bb7 loc(#loc323)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc140)
    %21 = cir.const #cir.int<10> : !s32i loc(#loc141)
    %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc325)
    cir.brcond %22 ^bb8, ^bb12 loc(#loc142)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc326)
  ^bb9:  // pred: ^bb8
    %23 = cir.const #cir.int<0> : !s32i loc(#loc144)
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc145)
    %25 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc146)
    %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc147)
    cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc327)
    cir.br ^bb10 loc(#loc137)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc137)
  ^bb11:  // pred: ^bb10
    %27 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc148)
    %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc149)
    cir.store %28, %0 : !s32i, !cir.ptr<!s32i> loc(#loc328)
    cir.br ^bb7 loc(#loc323)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc137)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc329)
  ^bb14:  // pred: ^bb13
    %29 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc152)
    %30 = cir.const #cir.int<0> : !s32i loc(#loc153)
    %31 = cir.cmp(ge, %29, %30) : !s32i, !cir.bool loc(#loc330)
    cir.brcond %31 ^bb15, ^bb24 loc(#loc331)
  ^bb15:  // pred: ^bb14
    %32 = cir.const #cir.int<1> : !s32i loc(#loc157)
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc158)
    %34 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc159)
    %35 = cir.ptr_stride(%33 : !cir.ptr<!s32i>, %34 : !s32i), !cir.ptr<!s32i> loc(#loc160)
    cir.store %32, %35 : !s32i, !cir.ptr<!s32i> loc(#loc332)
    cir.br ^bb16 loc(#loc333)
  ^bb16:  // pred: ^bb15
    %36 = cir.const #cir.int<0> : !s32i loc(#loc163)
    cir.store %36, %0 : !s32i, !cir.ptr<!s32i> loc(#loc334)
    cir.br ^bb17 loc(#loc333)
  ^bb17:  // 2 preds: ^bb16, ^bb21
    %37 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc165)
    %38 = cir.const #cir.int<10> : !s32i loc(#loc166)
    %39 = cir.cmp(lt, %37, %38) : !s32i, !cir.bool loc(#loc335)
    cir.brcond %39 ^bb18, ^bb22 loc(#loc167)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc336)
  ^bb19:  // pred: ^bb18
    %40 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc169)
    %41 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc170)
    %42 = cir.ptr_stride(%40 : !cir.ptr<!s32i>, %41 : !s32i), !cir.ptr<!s32i> loc(#loc171)
    %43 = cir.load %42 : !cir.ptr<!s32i>, !s32i loc(#loc169)
    cir.call @printIntLine(%43) : (!s32i) -> () loc(#loc172)
    cir.br ^bb20 loc(#loc162)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc162)
  ^bb21:  // pred: ^bb20
    %44 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc173)
    %45 = cir.unary(inc, %44) : !s32i, !s32i loc(#loc174)
    cir.store %45, %0 : !s32i, !cir.ptr<!s32i> loc(#loc337)
    cir.br ^bb17 loc(#loc333)
  ^bb22:  // pred: ^bb17
    cir.br ^bb23 loc(#loc162)
  ^bb23:  // pred: ^bb22
    cir.br ^bb25 loc(#loc155)
  ^bb24:  // pred: ^bb14
    %46 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc175)
    %47 = cir.cast(array_to_ptrdecay, %46 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc175)
    cir.call @printLine(%47) : (!cir.ptr<!s8i>) -> () loc(#loc176)
    cir.br ^bb25 loc(#loc151)
  ^bb25:  // 2 preds: ^bb23, ^bb24
    cir.br ^bb26 loc(#loc151)
  ^bb26:  // pred: ^bb25
    %48 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc177)
    %49 = cir.cast(bitcast, %48 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc177)
    cir.call @free(%49) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc178)
    cir.br ^bb27 loc(#loc123)
  ^bb27:  // pred: ^bb26
    cir.return loc(#loc115)
  } loc(#loc312)
  cir.global "private" internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_goodB2GData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc338)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc340)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc185)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc186)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc341)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc188)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc188)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc188)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc188)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc188)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc188)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc188)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc188)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc188)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc188)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc188)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc188)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc188)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc188)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc188)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc188)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc188)
    cir.br ^bb3(%18 : !u32i) loc(#loc188)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc188)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc188)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc188)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc188)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc188)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc188)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc188)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc188)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc188)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc188)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc188)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc188)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc188)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc188)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc188)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc188)
    cir.br ^bb3(%34 : !u32i) loc(#loc188)
  ^bb3(%35: !u32i loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":153:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc188)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc188)
    cir.store %36, %0 : !s32i, !cir.ptr<!s32i> loc(#loc342)
    %37 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc190)
    %38 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_goodB2GData : !cir.ptr<!s32i> loc(#loc338)
    cir.store %37, %38 : !s32i, !cir.ptr<!s32i> loc(#loc343)
    %39 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void ()>> loc(#loc344)
    cir.call %39() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc192)
    cir.return loc(#loc182)
  } loc(#loc339)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc194)
  cir.func no_proto internal private @goodB2GSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc346)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc347)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc348)
    %3 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_goodB2GData : !cir.ptr<!s32i> loc(#loc338)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc202)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc348)
    cir.br ^bb1 loc(#loc349)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc205)
    %6 = cir.const #cir.int<10> : !s32i loc(#loc206)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc206)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc350)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc351)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc205)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc352)
    cir.store %11, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc347)
    cir.br ^bb2 loc(#loc353)
  ^bb2:  // pred: ^bb1
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc211)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc212)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc212)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !cir.bool loc(#loc354)
    cir.brcond %15 ^bb3, ^bb4 loc(#loc355)
  ^bb3:  // pred: ^bb2
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc214)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc215)
    %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc216)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc214)
    cir.br ^bb4 loc(#loc210)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc210)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc356)
  ^bb6:  // pred: ^bb5
    %19 = cir.const #cir.int<0> : !s32i loc(#loc219)
    cir.store %19, %0 : !s32i, !cir.ptr<!s32i> loc(#loc357)
    cir.br ^bb7 loc(#loc356)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc221)
    %21 = cir.const #cir.int<10> : !s32i loc(#loc222)
    %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc358)
    cir.brcond %22 ^bb8, ^bb12 loc(#loc223)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc359)
  ^bb9:  // pred: ^bb8
    %23 = cir.const #cir.int<0> : !s32i loc(#loc225)
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc226)
    %25 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc227)
    %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc228)
    cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc360)
    cir.br ^bb10 loc(#loc218)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc218)
  ^bb11:  // pred: ^bb10
    %27 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc229)
    %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc230)
    cir.store %28, %0 : !s32i, !cir.ptr<!s32i> loc(#loc361)
    cir.br ^bb7 loc(#loc356)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc218)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc362)
  ^bb14:  // pred: ^bb13
    %29 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc233)
    %30 = cir.const #cir.int<0> : !s32i loc(#loc234)
    %31 = cir.cmp(ge, %29, %30) : !s32i, !cir.bool loc(#loc363)
    cir.brcond %31 ^bb15, ^bb20 loc(#loc235)
  ^bb15:  // pred: ^bb14
    %32 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc236)
    %33 = cir.const #cir.int<10> : !s32i loc(#loc237)
    %34 = cir.cmp(lt, %32, %33) : !s32i, !cir.bool loc(#loc364)
    cir.brcond %34 ^bb16, ^bb17 loc(#loc235)
  ^bb16:  // pred: ^bb15
    %35 = cir.const #true loc(#loc235)
    cir.br ^bb18(%35 : !cir.bool) loc(#loc235)
  ^bb17:  // pred: ^bb15
    %36 = cir.const #false loc(#loc235)
    cir.br ^bb18(%36 : !cir.bool) loc(#loc235)
  ^bb18(%37: !cir.bool loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":130:23)):  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc235)
  ^bb19:  // pred: ^bb18
    cir.br ^bb21(%37 : !cir.bool) loc(#loc235)
  ^bb20:  // pred: ^bb14
    %38 = cir.const #false loc(#loc235)
    cir.br ^bb21(%38 : !cir.bool) loc(#loc235)
  ^bb21(%39: !cir.bool loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":130:23)):  // 2 preds: ^bb19, ^bb20
    cir.br ^bb22 loc(#loc235)
  ^bb22:  // pred: ^bb21
    cir.brcond %39 ^bb23, ^bb32 loc(#loc365)
  ^bb23:  // pred: ^bb22
    %40 = cir.const #cir.int<1> : !s32i loc(#loc242)
    %41 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc243)
    %42 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc244)
    %43 = cir.ptr_stride(%41 : !cir.ptr<!s32i>, %42 : !s32i), !cir.ptr<!s32i> loc(#loc245)
    cir.store %40, %43 : !s32i, !cir.ptr<!s32i> loc(#loc366)
    cir.br ^bb24 loc(#loc367)
  ^bb24:  // pred: ^bb23
    %44 = cir.const #cir.int<0> : !s32i loc(#loc248)
    cir.store %44, %0 : !s32i, !cir.ptr<!s32i> loc(#loc368)
    cir.br ^bb25 loc(#loc367)
  ^bb25:  // 2 preds: ^bb24, ^bb29
    %45 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc250)
    %46 = cir.const #cir.int<10> : !s32i loc(#loc251)
    %47 = cir.cmp(lt, %45, %46) : !s32i, !cir.bool loc(#loc369)
    cir.brcond %47 ^bb26, ^bb30 loc(#loc252)
  ^bb26:  // pred: ^bb25
    cir.br ^bb27 loc(#loc370)
  ^bb27:  // pred: ^bb26
    %48 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc254)
    %49 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc255)
    %50 = cir.ptr_stride(%48 : !cir.ptr<!s32i>, %49 : !s32i), !cir.ptr<!s32i> loc(#loc256)
    %51 = cir.load %50 : !cir.ptr<!s32i>, !s32i loc(#loc254)
    cir.call @printIntLine(%51) : (!s32i) -> () loc(#loc257)
    cir.br ^bb28 loc(#loc247)
  ^bb28:  // pred: ^bb27
    cir.br ^bb29 loc(#loc247)
  ^bb29:  // pred: ^bb28
    %52 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc258)
    %53 = cir.unary(inc, %52) : !s32i, !s32i loc(#loc259)
    cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc371)
    cir.br ^bb25 loc(#loc367)
  ^bb30:  // pred: ^bb25
    cir.br ^bb31 loc(#loc247)
  ^bb31:  // pred: ^bb30
    cir.br ^bb33 loc(#loc240)
  ^bb32:  // pred: ^bb22
    %54 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc194)
    %55 = cir.cast(array_to_ptrdecay, %54 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc194)
    cir.call @printLine(%55) : (!cir.ptr<!s8i>) -> () loc(#loc260)
    cir.br ^bb33 loc(#loc232)
  ^bb33:  // 2 preds: ^bb31, ^bb32
    cir.br ^bb34 loc(#loc232)
  ^bb34:  // pred: ^bb33
    %56 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc261)
    %57 = cir.cast(bitcast, %56 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc261)
    cir.call @free(%57) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc262)
    cir.br ^bb35 loc(#loc204)
  ^bb35:  // pred: ^bb34
    cir.return loc(#loc196)
  } loc(#loc345)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":20:1)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":20:12)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":57:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":66:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":59:5)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":59:9)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":61:13)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":61:12)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":61:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":63:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":64:67)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":64:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":65:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":65:13)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":158:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":162:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":160:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":160:13)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":161:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":161:13)
#loc24 = loc("/usr/include/stdlib.h":672:1)
#loc25 = loc("/usr/include/stdlib.h":672:45)
#loc26 = loc("/usr/include/stdlib.h":756:1)
#loc27 = loc("/usr/include/stdlib.h":756:70)
#loc28 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc29 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc30 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc31 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":51:23)
#loc33 = loc("/usr/include/stdlib.h":687:1)
#loc34 = loc("/usr/include/stdlib.h":687:32)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":26:1)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":55:1)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":30:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":30:13)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":31:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":31:54)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":28:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":28:16)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":29:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":54:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":31:31)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":31:38)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":31:43)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":31:53)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":32:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":32:39)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":32:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":32:23)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":32:29)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":32:30)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":32:36)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":32:35)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":34:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":37:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":34:18)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":34:14)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":34:21)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":34:25)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":34:23)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":35:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":36:25)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":36:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":36:20)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":36:21)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":34:30)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":34:29)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":40:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":52:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":40:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":40:21)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":41:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":48:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":50:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":42:28)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":42:13)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":42:20)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":42:24)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":44:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":47:13)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":44:21)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":44:17)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":44:24)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":44:28)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":44:26)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":45:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":46:30)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":46:37)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":46:38)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":46:17)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":44:33)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":44:32)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":51:13)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":53:14)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":53:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":21:1)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":21:12)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":104:1)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":114:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":106:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":106:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":108:13)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":108:12)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":108:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":111:12)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":111:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":112:71)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":112:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":113:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":113:17)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":73:1)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":102:1)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":77:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":77:13)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":78:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":78:54)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":75:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":75:16)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":76:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":101:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":78:31)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":78:38)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":78:43)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":78:53)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":79:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":79:39)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":79:13)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":79:23)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":79:29)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":79:30)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":79:36)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":79:35)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":81:9)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":84:9)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":81:18)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":81:14)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":81:21)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":81:25)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":81:23)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":82:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":83:25)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":83:13)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":83:20)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":83:21)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":81:30)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":81:29)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":87:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":99:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":87:13)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":87:21)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":88:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":95:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":97:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":89:28)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":89:13)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":89:20)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":89:24)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":91:13)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":94:13)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":91:21)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":91:17)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":91:24)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":91:28)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":91:26)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":92:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":93:30)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":93:37)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":93:38)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":93:17)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":91:33)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":91:32)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":98:23)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":98:13)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":100:14)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":100:9)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":22:1)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":22:12)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":147:1)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":156:1)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":149:5)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":149:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":151:13)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":151:12)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":151:5)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":153:5)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":154:71)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":154:5)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":155:5)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":155:17)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":141:23)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":117:1)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":145:1)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":121:9)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":121:13)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":122:9)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":122:54)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":119:5)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":119:16)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":120:5)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":144:5)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":122:31)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":122:38)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":122:43)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":122:53)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":123:9)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":123:39)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":123:13)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":123:23)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":123:29)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":123:30)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":123:36)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":123:35)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":125:9)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":128:9)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":125:18)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":125:14)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":125:21)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":125:25)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":125:23)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":126:9)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":127:25)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":127:13)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":127:20)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":127:21)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":125:30)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":125:29)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":130:9)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":142:9)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":130:13)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":130:21)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":130:26)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":130:34)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":130:36)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":131:9)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":138:9)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":140:9)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":132:28)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":132:13)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":132:20)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":132:24)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":134:13)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":137:13)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":134:21)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":134:17)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":134:24)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":134:28)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":134:26)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":135:13)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":136:30)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":136:37)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":136:38)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":136:17)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":134:33)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":134:32)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":141:13)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":143:14)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":143:9)
#loc263 = loc(fused[#loc1, #loc2])
#loc264 = loc(fused[#loc3, #loc4])
#loc265 = loc(fused[#loc5, #loc6])
#loc266 = loc(fused[#loc7, #loc8])
#loc267 = loc(fused[#loc11, #loc9])
#loc268 = loc(fused[#loc13, #loc12])
#loc269 = loc(fused[#loc15, #loc14])
#loc270 = loc(fused[#loc16, #loc17])
#loc271 = loc(fused[#loc18, #loc19])
#loc272 = loc(fused[#loc20, #loc21])
#loc273 = loc(fused[#loc22, #loc23])
#loc274 = loc(fused[#loc24, #loc25])
#loc275 = loc(fused[#loc26, #loc27])
#loc276 = loc(fused[#loc28, #loc29])
#loc277 = loc(fused[#loc30, #loc31])
#loc278 = loc(fused[#loc33, #loc34])
#loc279 = loc(fused[#loc35, #loc36])
#loc280 = loc(fused[#loc37, #loc38])
#loc281 = loc(fused[#loc39, #loc40])
#loc282 = loc(fused[#loc41, #loc42])
#loc283 = loc(fused[#loc43, #loc44])
#loc284 = loc(fused[#loc47, #loc48])
#loc285 = loc(fused[#loc46, #loc48])
#loc286 = loc(fused[#loc45, #loc40])
#loc287 = loc(fused[#loc49, #loc50])
#loc288 = loc(fused[#loc51, #loc52])
#loc289 = loc(fused[#loc53, #loc50])
#loc290 = loc(fused[#loc57, #loc58])
#loc291 = loc(fused[#loc60, #loc59])
#loc292 = loc(fused[#loc61, #loc62])
#loc293 = loc(fused[#loc64, #loc58])
#loc294 = loc(fused[#loc66, #loc65])
#loc295 = loc(fused[#loc70, #loc69])
#loc296 = loc(fused[#loc71, #loc72])
#loc297 = loc(fused[#loc73, #loc74])
#loc298 = loc(fused[#loc75, #loc76, #loc77, #loc72])
#loc299 = loc(fused[#loc79, #loc78])
#loc300 = loc(fused[#loc82, #loc83])
#loc301 = loc(fused[#loc85, #loc84])
#loc302 = loc(fused[#loc86, #loc87])
#loc303 = loc(fused[#loc89, #loc83])
#loc304 = loc(fused[#loc95, #loc94])
#loc305 = loc(fused[#loc99, #loc100])
#loc306 = loc(fused[#loc101, #loc102])
#loc307 = loc(fused[#loc103, #loc104])
#loc308 = loc(fused[#loc107, #loc105])
#loc309 = loc(fused[#loc109, #loc108])
#loc310 = loc(fused[#loc111, #loc110])
#loc311 = loc(fused[#loc112, #loc113])
#loc312 = loc(fused[#loc114, #loc115])
#loc313 = loc(fused[#loc116, #loc117])
#loc314 = loc(fused[#loc118, #loc119])
#loc315 = loc(fused[#loc120, #loc121])
#loc316 = loc(fused[#loc122, #loc123])
#loc317 = loc(fused[#loc126, #loc127])
#loc318 = loc(fused[#loc125, #loc127])
#loc319 = loc(fused[#loc124, #loc119])
#loc320 = loc(fused[#loc128, #loc129])
#loc321 = loc(fused[#loc130, #loc131])
#loc322 = loc(fused[#loc132, #loc129])
#loc323 = loc(fused[#loc136, #loc137])
#loc324 = loc(fused[#loc139, #loc138])
#loc325 = loc(fused[#loc140, #loc141])
#loc326 = loc(fused[#loc143, #loc137])
#loc327 = loc(fused[#loc145, #loc144])
#loc328 = loc(fused[#loc149, #loc148])
#loc329 = loc(fused[#loc150, #loc151])
#loc330 = loc(fused[#loc152, #loc153])
#loc331 = loc(fused[#loc154, #loc155, #loc156, #loc151])
#loc332 = loc(fused[#loc158, #loc157])
#loc333 = loc(fused[#loc161, #loc162])
#loc334 = loc(fused[#loc164, #loc163])
#loc335 = loc(fused[#loc165, #loc166])
#loc336 = loc(fused[#loc168, #loc162])
#loc337 = loc(fused[#loc174, #loc173])
#loc338 = loc(fused[#loc179, #loc180])
#loc339 = loc(fused[#loc181, #loc182])
#loc340 = loc(fused[#loc183, #loc184])
#loc341 = loc(fused[#loc187, #loc185])
#loc342 = loc(fused[#loc189, #loc188])
#loc343 = loc(fused[#loc191, #loc190])
#loc344 = loc(fused[#loc192, #loc193])
#loc345 = loc(fused[#loc195, #loc196])
#loc346 = loc(fused[#loc197, #loc198])
#loc347 = loc(fused[#loc199, #loc200])
#loc348 = loc(fused[#loc201, #loc202])
#loc349 = loc(fused[#loc203, #loc204])
#loc350 = loc(fused[#loc207, #loc208])
#loc351 = loc(fused[#loc206, #loc208])
#loc352 = loc(fused[#loc205, #loc200])
#loc353 = loc(fused[#loc209, #loc210])
#loc354 = loc(fused[#loc211, #loc212])
#loc355 = loc(fused[#loc213, #loc210])
#loc356 = loc(fused[#loc217, #loc218])
#loc357 = loc(fused[#loc220, #loc219])
#loc358 = loc(fused[#loc221, #loc222])
#loc359 = loc(fused[#loc224, #loc218])
#loc360 = loc(fused[#loc226, #loc225])
#loc361 = loc(fused[#loc230, #loc229])
#loc362 = loc(fused[#loc231, #loc232])
#loc363 = loc(fused[#loc233, #loc234])
#loc364 = loc(fused[#loc236, #loc238])
#loc365 = loc(fused[#loc239, #loc240, #loc241, #loc232])
#loc366 = loc(fused[#loc243, #loc242])
#loc367 = loc(fused[#loc246, #loc247])
#loc368 = loc(fused[#loc249, #loc248])
#loc369 = loc(fused[#loc250, #loc251])
#loc370 = loc(fused[#loc253, #loc247])
#loc371 = loc(fused[#loc259, #loc258])
