!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_add_61a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @CWE190_Integer_Overflow__int_max_add_61b_badSource(!s32i) -> !s32i loc(#loc76)
  cir.func private  @printIntLine(!s32i) loc(#loc77)
  cir.func no_proto  @CWE190_Integer_Overflow__int_max_add_61_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc79)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc80)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc11)
    %3 = cir.call @CWE190_Integer_Overflow__int_max_add_61b_badSource(%2) : (!s32i) -> !s32i loc(#loc12)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc83)
      %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      %6 = cir.const #cir.int<1> : !s32i loc(#loc18)
      %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc19)
      cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc83)
      %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc20)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc21)
    } loc(#loc82)
    cir.return loc(#loc6)
  } loc(#loc78)
  cir.func no_proto  @CWE190_Integer_Overflow__int_max_add_61_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc85)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc24)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc86)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc26)
    cir.return loc(#loc23)
  } loc(#loc84)
  cir.func private  @CWE190_Integer_Overflow__int_max_add_61b_goodG2BSource(!s32i) -> !s32i loc(#loc87)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc89)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc34)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc90)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc36)
    %3 = cir.call @CWE190_Integer_Overflow__int_max_add_61b_goodG2BSource(%2) : (!s32i) -> !s32i loc(#loc37)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc91)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc93)
      %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc44)
      %6 = cir.const #cir.int<1> : !s32i loc(#loc43)
      %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc44)
      cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc93)
      %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc45)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc46)
    } loc(#loc92)
    cir.return loc(#loc31)
  } loc(#loc88)
  cir.func private  @CWE190_Integer_Overflow__int_max_add_61b_goodB2GSource(!s32i) -> !s32i loc(#loc94)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc95)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc51)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc97)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc56)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc98)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc58)
    %3 = cir.call @CWE190_Integer_Overflow__int_max_add_61b_goodB2GSource(%2) : (!s32i) -> !s32i loc(#loc59)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    cir.scope {
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc64)
      %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc65)
      %6 = cir.cmp(lt, %4, %5) : !s32i, !s32i loc(#loc101)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc66)
      cir.if %7 {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc103)
        %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc71)
        %11 = cir.binop(add, %9, %10) nsw : !s32i loc(#loc72)
        cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc103)
        %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc73)
        cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc74)
      } else {
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc51)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc51)
        cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc75)
      } loc(#loc102)
    } loc(#loc100)
    cir.return loc(#loc53)
  } loc(#loc96)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_add_61a.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":23:1)
#loc2 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":23:64)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":25:1)
#loc6 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":36:1)
#loc7 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":27:5)
#loc8 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":27:9)
#loc9 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":29:12)
#loc10 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":29:5)
#loc11 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":30:63)
#loc12 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":30:12)
#loc13 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":30:5)
#loc14 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":30:67)
#loc15 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":31:5)
#loc16 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":35:5)
#loc17 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":33:9)
#loc18 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":33:29)
#loc19 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":33:22)
#loc20 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":34:22)
#loc21 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":34:9)
#loc22 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":79:1)
#loc23 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":83:1)
#loc24 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":81:5)
#loc25 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":81:13)
#loc26 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":82:5)
#loc27 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":82:13)
#loc28 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":43:1)
#loc29 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":43:68)
#loc30 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":45:1)
#loc31 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":56:1)
#loc32 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":47:5)
#loc33 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":47:9)
#loc34 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":49:12)
#loc35 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":49:5)
#loc36 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":50:67)
#loc37 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":50:12)
#loc38 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":50:5)
#loc39 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":50:71)
#loc40 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":51:5)
#loc41 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":55:5)
#loc42 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":53:9)
#loc43 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":53:29)
#loc44 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":53:22)
#loc45 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":54:22)
#loc46 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":54:9)
#loc47 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":59:1)
#loc48 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":59:68)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc51 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":75:19)
#loc52 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":61:1)
#loc53 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":77:1)
#loc54 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":63:5)
#loc55 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":63:9)
#loc56 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":65:12)
#loc57 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":65:5)
#loc58 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":66:67)
#loc59 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":66:12)
#loc60 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":66:5)
#loc61 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":66:71)
#loc62 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":68:5)
#loc63 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":76:5)
#loc64 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":68:9)
#loc65 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":68:16)
#loc66 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":68:14)
#loc67 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":69:5)
#loc68 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":72:5)
#loc69 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":74:5)
#loc70 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":70:9)
#loc71 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":70:29)
#loc72 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":70:22)
#loc73 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":71:22)
#loc74 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":71:9)
#loc75 = loc("CWE190_Integer_Overflow__int_max_add_61a.c":75:9)
#loc76 = loc(fused[#loc1, #loc2])
#loc77 = loc(fused[#loc3, #loc4])
#loc78 = loc(fused[#loc5, #loc6])
#loc79 = loc(fused[#loc7, #loc8])
#loc80 = loc(fused[#loc10, #loc9])
#loc81 = loc(fused[#loc13, #loc14])
#loc82 = loc(fused[#loc15, #loc16])
#loc83 = loc(fused[#loc17, #loc18])
#loc84 = loc(fused[#loc22, #loc23])
#loc85 = loc(fused[#loc24, #loc25])
#loc86 = loc(fused[#loc26, #loc27])
#loc87 = loc(fused[#loc28, #loc29])
#loc88 = loc(fused[#loc30, #loc31])
#loc89 = loc(fused[#loc32, #loc33])
#loc90 = loc(fused[#loc35, #loc34])
#loc91 = loc(fused[#loc38, #loc39])
#loc92 = loc(fused[#loc40, #loc41])
#loc93 = loc(fused[#loc42, #loc43])
#loc94 = loc(fused[#loc47, #loc48])
#loc95 = loc(fused[#loc49, #loc50])
#loc96 = loc(fused[#loc52, #loc53])
#loc97 = loc(fused[#loc54, #loc55])
#loc98 = loc(fused[#loc57, #loc56])
#loc99 = loc(fused[#loc60, #loc61])
#loc100 = loc(fused[#loc62, #loc63])
#loc101 = loc(fused[#loc64, #loc65])
#loc102 = loc(fused[#loc67, #loc68, #loc69, #loc63])
#loc103 = loc(fused[#loc70, #loc71])
