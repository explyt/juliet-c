!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s08/CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc133)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc134)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc135)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc137)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc138)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc12)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc12)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc12)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc12)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc139)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc12)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc138)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc14)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc14)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc14)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc14)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc14)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc14)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc14)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc139)
    cir.scope {
      %17 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc141)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc141)
      %19 = cir.call %18() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc17)
      %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc17)
      cir.if %20 {
        %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc20)
        cir.store %21, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc143)
        %22 = cir.const #cir.int<0> : !s32i loc(#loc22)
        %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc22)
        %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
        %25 = cir.const #cir.int<0> : !s32i loc(#loc24)
        %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc25)
        cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc144)
      } loc(#loc142)
    } loc(#loc140)
    cir.scope {
      %17 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc146)
      %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc30)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc30)
      %20 = cir.const #cir.int<67> : !s32i loc(#loc31)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc32)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc33)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc32)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc32)
      cir.libc.memset %24 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc147)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc36)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc36)
      %27 = cir.const #cir.int<100> : !s32i loc(#loc37)
      %28 = cir.const #cir.int<1> : !s32i loc(#loc38)
      %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc37)
      %30 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc39)
      %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc39)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc148)
      %32 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc40)
      %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
      %34 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc42)
      %35 = cir.call @strcpy(%33, %34) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc40)
      %36 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc43)
      cir.call @printLine(%36) : (!cir.ptr<!s8i>) -> () loc(#loc44)
    } loc(#loc145)
    cir.return loc(#loc8)
  } loc(#loc136)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc150)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc47)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc151)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc49)
    cir.return loc(#loc46)
  } loc(#loc149)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc152)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc53)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc154)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc155)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc59)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc59)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc59)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc59)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc59)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc156)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc59)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc59)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc155)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc61)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc61)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc61)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc61)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc61)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc61)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc61)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc156)
    cir.scope {
      %17 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc158)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc158)
      %19 = cir.call %18() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc64)
      %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc64)
      cir.if %20 {
        %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc53)
        %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc53)
        cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc69)
      } else {
        %21 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc70)
        cir.store %21, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc160)
        %22 = cir.const #cir.int<0> : !s32i loc(#loc72)
        %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc72)
        %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc73)
        %25 = cir.const #cir.int<0> : !s32i loc(#loc74)
        %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc75)
        cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc161)
      } loc(#loc159)
    } loc(#loc157)
    cir.scope {
      %17 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc163)
      %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc80)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc80)
      %20 = cir.const #cir.int<67> : !s32i loc(#loc81)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc82)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc83)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc82)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc82)
      cir.libc.memset %24 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc164)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc86)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc86)
      %27 = cir.const #cir.int<100> : !s32i loc(#loc87)
      %28 = cir.const #cir.int<1> : !s32i loc(#loc88)
      %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc87)
      %30 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc89)
      %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc89)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc165)
      %32 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc90)
      %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc91)
      %34 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc92)
      %35 = cir.call @strcpy(%33, %34) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc90)
      %36 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc93)
      cir.call @printLine(%36) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    } loc(#loc162)
    cir.return loc(#loc55)
  } loc(#loc153)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc167)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc168)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc100)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc100)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc100)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc100)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc100)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc169)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc100)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc100)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc168)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc102)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc102)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc102)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc102)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc102)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc102)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc102)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc169)
    cir.scope {
      %17 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc171)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc171)
      %19 = cir.call %18() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc105)
      %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc105)
      cir.if %20 {
        %21 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc108)
        cir.store %21, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc173)
        %22 = cir.const #cir.int<0> : !s32i loc(#loc110)
        %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc110)
        %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc111)
        %25 = cir.const #cir.int<0> : !s32i loc(#loc112)
        %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc113)
        cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc174)
      } loc(#loc172)
    } loc(#loc170)
    cir.scope {
      %17 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc176)
      %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc118)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc118)
      %20 = cir.const #cir.int<67> : !s32i loc(#loc119)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc120)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc121)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc120)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc120)
      cir.libc.memset %24 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc177)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc124)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc124)
      %27 = cir.const #cir.int<100> : !s32i loc(#loc125)
      %28 = cir.const #cir.int<1> : !s32i loc(#loc126)
      %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc125)
      %30 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc127)
      %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc127)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc178)
      %32 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc128)
      %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
      %34 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc130)
      %35 = cir.call @strcpy(%33, %34) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc128)
      %36 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
      cir.call @printLine(%36) : (!cir.ptr<!s8i>) -> () loc(#loc132)
    } loc(#loc175)
    cir.return loc(#loc96)
  } loc(#loc166)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s08/CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/string.h":141:1)
#loc4 = loc("/usr/include/string.h":142:14)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":23:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":43:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":25:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":25:12)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":26:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":26:36)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":27:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":27:37)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":28:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":34:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":28:8)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":28:26)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":29:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":32:16)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":32:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":33:19)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":33:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":33:14)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":33:15)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":35:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":42:5)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":36:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":36:24)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":37:16)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":37:24)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":37:29)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":37:33)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":37:9)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":37:34)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":38:25)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":38:16)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":38:20)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":38:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":40:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":40:16)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":40:22)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":41:19)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":41:9)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":98:1)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":102:1)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":100:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":100:14)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":101:5)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":101:14)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":58:19)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":50:1)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":74:1)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":52:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":52:12)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":53:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":53:36)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":54:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":54:37)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":55:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":65:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":55:8)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":55:27)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":56:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":59:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":61:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":58:9)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":63:16)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":63:9)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":64:19)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":64:9)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":64:14)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":64:15)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":66:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":73:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":67:9)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":67:24)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":68:16)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":68:24)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":68:29)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":68:33)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":68:9)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":68:34)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":69:25)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":69:16)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":69:20)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":69:9)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":71:9)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":71:16)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":71:22)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":72:19)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":72:9)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":77:1)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":96:1)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":79:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":79:12)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":80:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":80:36)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":81:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":81:37)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":82:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":87:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":82:8)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":82:26)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":83:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":85:16)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":85:9)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":86:19)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":86:9)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":86:14)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":86:15)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":88:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":95:5)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":89:9)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":89:24)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":90:16)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":90:24)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":90:29)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":90:33)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":90:9)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":90:34)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":91:25)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":91:16)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":91:20)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":91:9)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":93:9)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":93:16)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":93:22)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":94:19)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c":94:9)
#loc133 = loc(fused[#loc1, #loc2])
#loc134 = loc(fused[#loc3, #loc4])
#loc135 = loc(fused[#loc5, #loc6])
#loc136 = loc(fused[#loc7, #loc8])
#loc137 = loc(fused[#loc9, #loc10])
#loc138 = loc(fused[#loc11, #loc12])
#loc139 = loc(fused[#loc13, #loc14])
#loc140 = loc(fused[#loc15, #loc16])
#loc141 = loc(fused[#loc17, #loc18])
#loc142 = loc(fused[#loc19, #loc16])
#loc143 = loc(fused[#loc21, #loc20])
#loc144 = loc(fused[#loc23, #loc22])
#loc145 = loc(fused[#loc26, #loc27])
#loc146 = loc(fused[#loc28, #loc29])
#loc147 = loc(fused[#loc34, #loc35])
#loc148 = loc(fused[#loc39, #loc36])
#loc149 = loc(fused[#loc45, #loc46])
#loc150 = loc(fused[#loc47, #loc48])
#loc151 = loc(fused[#loc49, #loc50])
#loc152 = loc(fused[#loc51, #loc52])
#loc153 = loc(fused[#loc54, #loc55])
#loc154 = loc(fused[#loc56, #loc57])
#loc155 = loc(fused[#loc58, #loc59])
#loc156 = loc(fused[#loc60, #loc61])
#loc157 = loc(fused[#loc62, #loc63])
#loc158 = loc(fused[#loc64, #loc65])
#loc159 = loc(fused[#loc66, #loc67, #loc68, #loc63])
#loc160 = loc(fused[#loc71, #loc70])
#loc161 = loc(fused[#loc73, #loc72])
#loc162 = loc(fused[#loc76, #loc77])
#loc163 = loc(fused[#loc78, #loc79])
#loc164 = loc(fused[#loc84, #loc85])
#loc165 = loc(fused[#loc89, #loc86])
#loc166 = loc(fused[#loc95, #loc96])
#loc167 = loc(fused[#loc97, #loc98])
#loc168 = loc(fused[#loc99, #loc100])
#loc169 = loc(fused[#loc101, #loc102])
#loc170 = loc(fused[#loc103, #loc104])
#loc171 = loc(fused[#loc105, #loc106])
#loc172 = loc(fused[#loc107, #loc104])
#loc173 = loc(fused[#loc109, #loc108])
#loc174 = loc(fused[#loc111, #loc110])
#loc175 = loc(fused[#loc114, #loc115])
#loc176 = loc(fused[#loc116, #loc117])
#loc177 = loc(fused[#loc122, #loc123])
#loc178 = loc(fused[#loc127, #loc124])
