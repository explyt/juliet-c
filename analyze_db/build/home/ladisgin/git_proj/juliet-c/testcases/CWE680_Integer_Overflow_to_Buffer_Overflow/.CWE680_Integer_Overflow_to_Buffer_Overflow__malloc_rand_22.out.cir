!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":24:74)
#loc8 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":24:78)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":43:79)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":43:83)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":59:79)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":59:83)
#loc57 = loc(fused[#loc7, #loc8])
#loc65 = loc(fused[#loc25, #loc26])
#loc72 = loc(fused[#loc43, #loc44])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" external @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22_badGlobal : !s32i {alignment = 4 : i64} loc(#loc54)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc55)
  cir.func @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22_badSource(%arg0: !s32i loc(fused[#loc7, #loc8])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc57)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc6)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc9)
    cir.scope {
      %4 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22_badGlobal : !cir.ptr<!s32i> loc(#loc54)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc12)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc12)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc14)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc14)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc14)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc14)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc14)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc14)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc14)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc14)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc14)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc14)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc14)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc14)
          cir.yield %24 : !u32i loc(#loc14)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc14)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc14)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc14)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc14)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc14)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc14)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc14)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc14)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc14)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc14)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc14)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc14)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc14)
          cir.yield %28 : !u32i loc(#loc14)
        }) : (!cir.bool) -> !u32i loc(#loc14)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc14)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc60)
      } loc(#loc59)
    } loc(#loc58)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc61)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    cir.return %3 : !s32i loc(#loc61)
  } loc(#loc56)
  cir.global "private" external @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22_goodG2B1Global : !s32i {alignment = 4 : i64} loc(#loc62)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc22)
  cir.func @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22_goodG2B1Source(%arg0: !s32i loc(fused[#loc25, #loc26])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc65)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc24)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc27)
    cir.scope {
      %4 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22_goodG2B1Global : !cir.ptr<!s32i> loc(#loc62)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc30)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc30)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc22)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc22)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc34)
      } else {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc35)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc68)
      } loc(#loc67)
    } loc(#loc66)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc69)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc69)
    cir.return %3 : !s32i loc(#loc69)
  } loc(#loc64)
  cir.global "private" external @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22_goodG2B2Global : !s32i {alignment = 4 : i64} loc(#loc70)
  cir.func @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22_goodG2B2Source(%arg0: !s32i loc(fused[#loc43, #loc44])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc72)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc42)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc45)
    cir.scope {
      %4 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22_goodG2B2Global : !cir.ptr<!s32i> loc(#loc70)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc48)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc48)
      cir.if %6 {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc50)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc75)
      } loc(#loc74)
    } loc(#loc73)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc52)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc76)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc76)
    cir.return %3 : !s32i loc(#loc76)
  } loc(#loc71)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":0:0)
#loc1 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":22:1)
#loc2 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":22:12)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":24:1)
#loc6 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":32:1)
#loc9 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":25:1)
#loc10 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":26:5)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":30:5)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":26:8)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":27:5)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":29:16)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":29:9)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":31:12)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":31:5)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":39:1)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":39:12)
#loc20 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc21 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":48:19)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":43:1)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":56:1)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":44:1)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":45:5)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":54:5)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":45:8)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":46:5)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":49:5)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":51:5)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":48:9)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":53:16)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":53:9)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":55:12)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":55:5)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":40:1)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":40:12)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":59:1)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":67:1)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":60:1)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":61:5)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":65:5)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":61:8)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":62:5)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":64:16)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":64:9)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":66:12)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_22b.c":66:5)
#loc54 = loc(fused[#loc1, #loc2])
#loc55 = loc(fused[#loc3, #loc4])
#loc56 = loc(fused[#loc5, #loc6])
#loc58 = loc(fused[#loc10, #loc11])
#loc59 = loc(fused[#loc13, #loc11])
#loc60 = loc(fused[#loc15, #loc14])
#loc61 = loc(fused[#loc17, #loc16])
#loc62 = loc(fused[#loc18, #loc19])
#loc63 = loc(fused[#loc20, #loc21])
#loc64 = loc(fused[#loc23, #loc24])
#loc66 = loc(fused[#loc28, #loc29])
#loc67 = loc(fused[#loc31, #loc32, #loc33, #loc29])
#loc68 = loc(fused[#loc36, #loc35])
#loc69 = loc(fused[#loc38, #loc37])
#loc70 = loc(fused[#loc39, #loc40])
#loc71 = loc(fused[#loc41, #loc42])
#loc73 = loc(fused[#loc46, #loc47])
#loc74 = loc(fused[#loc49, #loc47])
#loc75 = loc(fused[#loc51, #loc50])
#loc76 = loc(fused[#loc53, #loc52])
