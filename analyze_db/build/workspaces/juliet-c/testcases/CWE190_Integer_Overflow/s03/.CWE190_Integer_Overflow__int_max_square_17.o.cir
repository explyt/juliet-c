!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc139)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_17_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc141)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc142)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc143)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc10)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc144)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc14)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc146)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc147)
        cir.condition(%7) loc(#loc18)
      } body {
        cir.scope {
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc20)
          cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc149)
        } loc(#loc148)
        cir.yield loc(#loc13)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc23)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc150)
        cir.yield loc(#loc145)
      } loc(#loc145)
    } loc(#loc145)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc26)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc152)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc28)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc153)
        cir.condition(%7) loc(#loc30)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc156)
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc36)
            %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc35)
            %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc36)
            cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc156)
            %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc37)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc38)
          } loc(#loc155)
        } loc(#loc154)
        cir.yield loc(#loc25)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc39)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc40)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc157)
        cir.yield loc(#loc151)
      } loc(#loc151)
    } loc(#loc151)
    cir.return loc(#loc4)
  } loc(#loc140)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_17_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc159)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc43)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc160)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc45)
    cir.return loc(#loc42)
  } loc(#loc158)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc47)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc161)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc50)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc163)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc164)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc165)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc58)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc62)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc168)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc64)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc65)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc169)
        cir.condition(%7) loc(#loc66)
      } body {
        cir.scope {
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc68)
          cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc171)
        } loc(#loc170)
        cir.yield loc(#loc61)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc71)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc172)
        cir.yield loc(#loc167)
      } loc(#loc167)
    } loc(#loc167)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc74)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc174)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc76)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc77)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc175)
        cir.condition(%7) loc(#loc78)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc82)
            %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc83)
            %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc83)
            %8 = cir.const #cir.int<1> : !s32i loc(#loc83)
            %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc83)
            %10 = cir.cmp(gt, %5, %9) : !s32i, !cir.bool loc(#loc178)
            %11 = cir.ternary(%10, true {
              %12 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc85)
              %13 = cir.abs %12 poison : !s32i loc(#loc86)
              %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc86)
              %15 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc87)
              %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc88)
              %17 = cir.cast(int_to_float, %16 : !s32i), !cir.double loc(#loc88)
              %18 = cir.call @sqrt(%17) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc87)
              %19 = cir.cast(float_to_int, %18 : !cir.double), !s64i loc(#loc87)
              %20 = cir.cmp(lt, %14, %19) : !s64i, !cir.bool loc(#loc179)
              %21 = cir.ternary(%20, true {
                %22 = cir.const #true loc(#loc84)
                cir.yield %22 : !cir.bool loc(#loc84)
              }, false {
                %22 = cir.const #false loc(#loc84)
                cir.yield %22 : !cir.bool loc(#loc84)
              }) : (!cir.bool) -> !cir.bool loc(#loc84)
              cir.yield %21 : !cir.bool loc(#loc84)
            }, false {
              %12 = cir.const #false loc(#loc84)
              cir.yield %12 : !cir.bool loc(#loc84)
            }) : (!cir.bool) -> !cir.bool loc(#loc84)
            cir.if %11 {
              %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc181)
              %13 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc95)
              %14 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc94)
              %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc95)
              cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc181)
              %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc96)
              cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc97)
            } else {
              %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc50)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc50)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc98)
            } loc(#loc180)
          } loc(#loc177)
        } loc(#loc176)
        cir.yield loc(#loc73)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc99)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc100)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc182)
        cir.yield loc(#loc173)
      } loc(#loc173)
    } loc(#loc173)
    cir.return loc(#loc52)
  } loc(#loc162)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc184)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc185)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc186)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc108)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc112)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc189)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc114)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc115)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc190)
        cir.condition(%7) loc(#loc116)
      } body {
        cir.scope {
          %5 = cir.const #cir.int<2> : !s32i loc(#loc118)
          cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc192)
        } loc(#loc191)
        cir.yield loc(#loc111)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc120)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc121)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc193)
        cir.yield loc(#loc188)
      } loc(#loc188)
    } loc(#loc188)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc124)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc195)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc126)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc127)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc196)
        cir.condition(%7) loc(#loc128)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc199)
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc134)
            %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc133)
            %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc134)
            cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc199)
            %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc135)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc136)
          } loc(#loc198)
        } loc(#loc197)
        cir.yield loc(#loc123)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc137)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc138)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc200)
        cir.yield loc(#loc194)
      } loc(#loc194)
    } loc(#loc194)
    cir.return loc(#loc102)
  } loc(#loc183)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_17.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_square_17.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__int_max_square_17.c":43:1)
#loc5 = loc("CWE190_Integer_Overflow__int_max_square_17.c":26:5)
#loc6 = loc("CWE190_Integer_Overflow__int_max_square_17.c":26:9)
#loc7 = loc("CWE190_Integer_Overflow__int_max_square_17.c":26:11)
#loc8 = loc("CWE190_Integer_Overflow__int_max_square_17.c":27:5)
#loc9 = loc("CWE190_Integer_Overflow__int_max_square_17.c":27:9)
#loc10 = loc("CWE190_Integer_Overflow__int_max_square_17.c":29:12)
#loc11 = loc("CWE190_Integer_Overflow__int_max_square_17.c":29:5)
#loc12 = loc("CWE190_Integer_Overflow__int_max_square_17.c":30:5)
#loc13 = loc("CWE190_Integer_Overflow__int_max_square_17.c":34:5)
#loc14 = loc("CWE190_Integer_Overflow__int_max_square_17.c":30:13)
#loc15 = loc("CWE190_Integer_Overflow__int_max_square_17.c":30:9)
#loc16 = loc("CWE190_Integer_Overflow__int_max_square_17.c":30:16)
#loc17 = loc("CWE190_Integer_Overflow__int_max_square_17.c":30:20)
#loc18 = loc("CWE190_Integer_Overflow__int_max_square_17.c":30:18)
#loc19 = loc("CWE190_Integer_Overflow__int_max_square_17.c":31:5)
#loc20 = loc("CWE190_Integer_Overflow__int_max_square_17.c":33:16)
#loc21 = loc("CWE190_Integer_Overflow__int_max_square_17.c":33:9)
#loc22 = loc("CWE190_Integer_Overflow__int_max_square_17.c":30:24)
#loc23 = loc("CWE190_Integer_Overflow__int_max_square_17.c":30:23)
#loc24 = loc("CWE190_Integer_Overflow__int_max_square_17.c":35:5)
#loc25 = loc("CWE190_Integer_Overflow__int_max_square_17.c":42:5)
#loc26 = loc("CWE190_Integer_Overflow__int_max_square_17.c":35:13)
#loc27 = loc("CWE190_Integer_Overflow__int_max_square_17.c":35:9)
#loc28 = loc("CWE190_Integer_Overflow__int_max_square_17.c":35:16)
#loc29 = loc("CWE190_Integer_Overflow__int_max_square_17.c":35:20)
#loc30 = loc("CWE190_Integer_Overflow__int_max_square_17.c":35:18)
#loc31 = loc("CWE190_Integer_Overflow__int_max_square_17.c":36:5)
#loc32 = loc("CWE190_Integer_Overflow__int_max_square_17.c":37:9)
#loc33 = loc("CWE190_Integer_Overflow__int_max_square_17.c":41:9)
#loc34 = loc("CWE190_Integer_Overflow__int_max_square_17.c":39:13)
#loc35 = loc("CWE190_Integer_Overflow__int_max_square_17.c":39:33)
#loc36 = loc("CWE190_Integer_Overflow__int_max_square_17.c":39:26)
#loc37 = loc("CWE190_Integer_Overflow__int_max_square_17.c":40:26)
#loc38 = loc("CWE190_Integer_Overflow__int_max_square_17.c":40:13)
#loc39 = loc("CWE190_Integer_Overflow__int_max_square_17.c":35:24)
#loc40 = loc("CWE190_Integer_Overflow__int_max_square_17.c":35:23)
#loc41 = loc("CWE190_Integer_Overflow__int_max_square_17.c":98:1)
#loc42 = loc("CWE190_Integer_Overflow__int_max_square_17.c":102:1)
#loc43 = loc("CWE190_Integer_Overflow__int_max_square_17.c":100:5)
#loc44 = loc("CWE190_Integer_Overflow__int_max_square_17.c":100:13)
#loc45 = loc("CWE190_Integer_Overflow__int_max_square_17.c":101:5)
#loc46 = loc("CWE190_Integer_Overflow__int_max_square_17.c":101:13)
#loc47 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc50 = loc("CWE190_Integer_Overflow__int_max_square_17.c":71:23)
#loc51 = loc("CWE190_Integer_Overflow__int_max_square_17.c":50:1)
#loc52 = loc("CWE190_Integer_Overflow__int_max_square_17.c":74:1)
#loc53 = loc("CWE190_Integer_Overflow__int_max_square_17.c":52:5)
#loc54 = loc("CWE190_Integer_Overflow__int_max_square_17.c":52:9)
#loc55 = loc("CWE190_Integer_Overflow__int_max_square_17.c":52:11)
#loc56 = loc("CWE190_Integer_Overflow__int_max_square_17.c":53:5)
#loc57 = loc("CWE190_Integer_Overflow__int_max_square_17.c":53:9)
#loc58 = loc("CWE190_Integer_Overflow__int_max_square_17.c":55:12)
#loc59 = loc("CWE190_Integer_Overflow__int_max_square_17.c":55:5)
#loc60 = loc("CWE190_Integer_Overflow__int_max_square_17.c":56:5)
#loc61 = loc("CWE190_Integer_Overflow__int_max_square_17.c":60:5)
#loc62 = loc("CWE190_Integer_Overflow__int_max_square_17.c":56:13)
#loc63 = loc("CWE190_Integer_Overflow__int_max_square_17.c":56:9)
#loc64 = loc("CWE190_Integer_Overflow__int_max_square_17.c":56:16)
#loc65 = loc("CWE190_Integer_Overflow__int_max_square_17.c":56:20)
#loc66 = loc("CWE190_Integer_Overflow__int_max_square_17.c":56:18)
#loc67 = loc("CWE190_Integer_Overflow__int_max_square_17.c":57:5)
#loc68 = loc("CWE190_Integer_Overflow__int_max_square_17.c":59:16)
#loc69 = loc("CWE190_Integer_Overflow__int_max_square_17.c":59:9)
#loc70 = loc("CWE190_Integer_Overflow__int_max_square_17.c":56:24)
#loc71 = loc("CWE190_Integer_Overflow__int_max_square_17.c":56:23)
#loc72 = loc("CWE190_Integer_Overflow__int_max_square_17.c":61:5)
#loc73 = loc("CWE190_Integer_Overflow__int_max_square_17.c":73:5)
#loc74 = loc("CWE190_Integer_Overflow__int_max_square_17.c":61:13)
#loc75 = loc("CWE190_Integer_Overflow__int_max_square_17.c":61:9)
#loc76 = loc("CWE190_Integer_Overflow__int_max_square_17.c":61:16)
#loc77 = loc("CWE190_Integer_Overflow__int_max_square_17.c":61:20)
#loc78 = loc("CWE190_Integer_Overflow__int_max_square_17.c":61:18)
#loc79 = loc("CWE190_Integer_Overflow__int_max_square_17.c":62:5)
#loc80 = loc("CWE190_Integer_Overflow__int_max_square_17.c":64:9)
#loc81 = loc("CWE190_Integer_Overflow__int_max_square_17.c":72:9)
#loc82 = loc("CWE190_Integer_Overflow__int_max_square_17.c":64:13)
#loc83 = loc("CWE190_Integer_Overflow__int_max_square_17.c":64:20)
#loc84 = loc("CWE190_Integer_Overflow__int_max_square_17.c":64:28)
#loc85 = loc("CWE190_Integer_Overflow__int_max_square_17.c":64:35)
#loc86 = loc("CWE190_Integer_Overflow__int_max_square_17.c":64:31)
#loc87 = loc("CWE190_Integer_Overflow__int_max_square_17.c":64:49)
#loc88 = loc("CWE190_Integer_Overflow__int_max_square_17.c":64:62)
#loc89 = loc("CWE190_Integer_Overflow__int_max_square_17.c":64:69)
#loc90 = loc("CWE190_Integer_Overflow__int_max_square_17.c":65:9)
#loc91 = loc("CWE190_Integer_Overflow__int_max_square_17.c":68:9)
#loc92 = loc("CWE190_Integer_Overflow__int_max_square_17.c":70:9)
#loc93 = loc("CWE190_Integer_Overflow__int_max_square_17.c":66:13)
#loc94 = loc("CWE190_Integer_Overflow__int_max_square_17.c":66:33)
#loc95 = loc("CWE190_Integer_Overflow__int_max_square_17.c":66:26)
#loc96 = loc("CWE190_Integer_Overflow__int_max_square_17.c":67:26)
#loc97 = loc("CWE190_Integer_Overflow__int_max_square_17.c":67:13)
#loc98 = loc("CWE190_Integer_Overflow__int_max_square_17.c":71:13)
#loc99 = loc("CWE190_Integer_Overflow__int_max_square_17.c":61:24)
#loc100 = loc("CWE190_Integer_Overflow__int_max_square_17.c":61:23)
#loc101 = loc("CWE190_Integer_Overflow__int_max_square_17.c":77:1)
#loc102 = loc("CWE190_Integer_Overflow__int_max_square_17.c":96:1)
#loc103 = loc("CWE190_Integer_Overflow__int_max_square_17.c":79:5)
#loc104 = loc("CWE190_Integer_Overflow__int_max_square_17.c":79:9)
#loc105 = loc("CWE190_Integer_Overflow__int_max_square_17.c":79:11)
#loc106 = loc("CWE190_Integer_Overflow__int_max_square_17.c":80:5)
#loc107 = loc("CWE190_Integer_Overflow__int_max_square_17.c":80:9)
#loc108 = loc("CWE190_Integer_Overflow__int_max_square_17.c":82:12)
#loc109 = loc("CWE190_Integer_Overflow__int_max_square_17.c":82:5)
#loc110 = loc("CWE190_Integer_Overflow__int_max_square_17.c":83:5)
#loc111 = loc("CWE190_Integer_Overflow__int_max_square_17.c":87:5)
#loc112 = loc("CWE190_Integer_Overflow__int_max_square_17.c":83:13)
#loc113 = loc("CWE190_Integer_Overflow__int_max_square_17.c":83:9)
#loc114 = loc("CWE190_Integer_Overflow__int_max_square_17.c":83:16)
#loc115 = loc("CWE190_Integer_Overflow__int_max_square_17.c":83:20)
#loc116 = loc("CWE190_Integer_Overflow__int_max_square_17.c":83:18)
#loc117 = loc("CWE190_Integer_Overflow__int_max_square_17.c":84:5)
#loc118 = loc("CWE190_Integer_Overflow__int_max_square_17.c":86:16)
#loc119 = loc("CWE190_Integer_Overflow__int_max_square_17.c":86:9)
#loc120 = loc("CWE190_Integer_Overflow__int_max_square_17.c":83:24)
#loc121 = loc("CWE190_Integer_Overflow__int_max_square_17.c":83:23)
#loc122 = loc("CWE190_Integer_Overflow__int_max_square_17.c":88:5)
#loc123 = loc("CWE190_Integer_Overflow__int_max_square_17.c":95:5)
#loc124 = loc("CWE190_Integer_Overflow__int_max_square_17.c":88:13)
#loc125 = loc("CWE190_Integer_Overflow__int_max_square_17.c":88:9)
#loc126 = loc("CWE190_Integer_Overflow__int_max_square_17.c":88:16)
#loc127 = loc("CWE190_Integer_Overflow__int_max_square_17.c":88:20)
#loc128 = loc("CWE190_Integer_Overflow__int_max_square_17.c":88:18)
#loc129 = loc("CWE190_Integer_Overflow__int_max_square_17.c":89:5)
#loc130 = loc("CWE190_Integer_Overflow__int_max_square_17.c":90:9)
#loc131 = loc("CWE190_Integer_Overflow__int_max_square_17.c":94:9)
#loc132 = loc("CWE190_Integer_Overflow__int_max_square_17.c":92:13)
#loc133 = loc("CWE190_Integer_Overflow__int_max_square_17.c":92:33)
#loc134 = loc("CWE190_Integer_Overflow__int_max_square_17.c":92:26)
#loc135 = loc("CWE190_Integer_Overflow__int_max_square_17.c":93:26)
#loc136 = loc("CWE190_Integer_Overflow__int_max_square_17.c":93:13)
#loc137 = loc("CWE190_Integer_Overflow__int_max_square_17.c":88:24)
#loc138 = loc("CWE190_Integer_Overflow__int_max_square_17.c":88:23)
#loc139 = loc(fused[#loc1, #loc2])
#loc140 = loc(fused[#loc3, #loc4])
#loc141 = loc(fused[#loc5, #loc6])
#loc142 = loc(fused[#loc5, #loc7])
#loc143 = loc(fused[#loc8, #loc9])
#loc144 = loc(fused[#loc11, #loc10])
#loc145 = loc(fused[#loc12, #loc13])
#loc146 = loc(fused[#loc15, #loc14])
#loc147 = loc(fused[#loc16, #loc17])
#loc148 = loc(fused[#loc19, #loc13])
#loc149 = loc(fused[#loc21, #loc20])
#loc150 = loc(fused[#loc23, #loc22])
#loc151 = loc(fused[#loc24, #loc25])
#loc152 = loc(fused[#loc27, #loc26])
#loc153 = loc(fused[#loc28, #loc29])
#loc154 = loc(fused[#loc31, #loc25])
#loc155 = loc(fused[#loc32, #loc33])
#loc156 = loc(fused[#loc34, #loc35])
#loc157 = loc(fused[#loc40, #loc39])
#loc158 = loc(fused[#loc41, #loc42])
#loc159 = loc(fused[#loc43, #loc44])
#loc160 = loc(fused[#loc45, #loc46])
#loc161 = loc(fused[#loc48, #loc49])
#loc162 = loc(fused[#loc51, #loc52])
#loc163 = loc(fused[#loc53, #loc54])
#loc164 = loc(fused[#loc53, #loc55])
#loc165 = loc(fused[#loc56, #loc57])
#loc166 = loc(fused[#loc59, #loc58])
#loc167 = loc(fused[#loc60, #loc61])
#loc168 = loc(fused[#loc63, #loc62])
#loc169 = loc(fused[#loc64, #loc65])
#loc170 = loc(fused[#loc67, #loc61])
#loc171 = loc(fused[#loc69, #loc68])
#loc172 = loc(fused[#loc71, #loc70])
#loc173 = loc(fused[#loc72, #loc73])
#loc174 = loc(fused[#loc75, #loc74])
#loc175 = loc(fused[#loc76, #loc77])
#loc176 = loc(fused[#loc79, #loc73])
#loc177 = loc(fused[#loc80, #loc81])
#loc178 = loc(fused[#loc82, #loc83])
#loc179 = loc(fused[#loc86, #loc89])
#loc180 = loc(fused[#loc90, #loc91, #loc92, #loc81])
#loc181 = loc(fused[#loc93, #loc94])
#loc182 = loc(fused[#loc100, #loc99])
#loc183 = loc(fused[#loc101, #loc102])
#loc184 = loc(fused[#loc103, #loc104])
#loc185 = loc(fused[#loc103, #loc105])
#loc186 = loc(fused[#loc106, #loc107])
#loc187 = loc(fused[#loc109, #loc108])
#loc188 = loc(fused[#loc110, #loc111])
#loc189 = loc(fused[#loc113, #loc112])
#loc190 = loc(fused[#loc114, #loc115])
#loc191 = loc(fused[#loc117, #loc111])
#loc192 = loc(fused[#loc119, #loc118])
#loc193 = loc(fused[#loc121, #loc120])
#loc194 = loc(fused[#loc122, #loc123])
#loc195 = loc(fused[#loc125, #loc124])
#loc196 = loc(fused[#loc126, #loc127])
#loc197 = loc(fused[#loc129, #loc123])
#loc198 = loc(fused[#loc130, #loc131])
#loc199 = loc(fused[#loc132, #loc133])
#loc200 = loc(fused[#loc138, #loc137])
