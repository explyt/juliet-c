!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_rand_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc104)
  cir.func private @printIntLine(!s32i) loc(#loc105)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc106)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is too big.\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE127_Buffer_Underread__CWE839_rand_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc108)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc109)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc15)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc110)
    cir.goto "source" loc(#loc111)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc19)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc20)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc20)
    %8 = cir.ternary(%7, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc20)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc20)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc20)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc20)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc20)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc20)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc20)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc20)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc20)
      cir.yield %22 : !u32i loc(#loc20)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc20)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc20)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc20)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc20)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc20)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc20)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc20)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc20)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc20)
      %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc20)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc20)
      %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc20)
      %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc20)
      cir.yield %26 : !u32i loc(#loc20)
    }) : (!cir.bool) -> !u32i loc(#loc20)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc20)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    cir.goto "sink" loc(#loc113)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc24)
    %10 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc109)
    cir.store %10, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc109)
    cir.scope {
      %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
      %12 = cir.const #cir.int<10> : !s32i loc(#loc28)
      %13 = cir.cmp(lt, %11, %12) : !s32i, !cir.bool loc(#loc115)
      cir.if %13 {
        %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
        %15 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc33)
        %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc33)
        %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc33)
        cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc34)
      } else {
        %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc7)
        %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc7)
        cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc35)
      } loc(#loc116)
    } loc(#loc114)
    cir.return loc(#loc9)
  } loc(#loc107)
  cir.func no_proto @CWE127_Buffer_Underread__CWE839_rand_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc118)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc119)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    cir.return loc(#loc37)
  } loc(#loc117)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc42)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc121)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc122)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc50)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc123)
    cir.goto "source" loc(#loc124)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc54)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc55)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc55)
    %8 = cir.ternary(%7, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc55)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc55)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc55)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc55)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc55)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc55)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc55)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc55)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc55)
      cir.yield %22 : !u32i loc(#loc55)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc55)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc55)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc55)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc55)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc55)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc55)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc55)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc55)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc55)
      %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc55)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc55)
      %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc55)
      %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc55)
      cir.yield %26 : !u32i loc(#loc55)
    }) : (!cir.bool) -> !u32i loc(#loc55)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc55)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    cir.goto "sink" loc(#loc126)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc59)
    %10 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc122)
    cir.store %10, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc122)
    cir.scope {
      %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc62)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc63)
      %13 = cir.cmp(ge, %11, %12) : !s32i, !cir.bool loc(#loc128)
      %14 = cir.ternary(%13, true {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
        %16 = cir.const #cir.int<10> : !s32i loc(#loc66)
        %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc129)
        %18 = cir.ternary(%17, true {
          %19 = cir.const #true loc(#loc64)
          cir.yield %19 : !cir.bool loc(#loc64)
        }, false {
          %19 = cir.const #false loc(#loc64)
          cir.yield %19 : !cir.bool loc(#loc64)
        }) : (!cir.bool) -> !cir.bool loc(#loc64)
        cir.yield %18 : !cir.bool loc(#loc64)
      }, false {
        %15 = cir.const #false loc(#loc64)
        cir.yield %15 : !cir.bool loc(#loc64)
      }) : (!cir.bool) -> !cir.bool loc(#loc64)
      cir.if %14 {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
        %16 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc72)
        %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc72)
        %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc72)
        cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc73)
      } else {
        %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc42)
        %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc42)
        cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc74)
      } loc(#loc130)
    } loc(#loc127)
    cir.return loc(#loc44)
  } loc(#loc120)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc132)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc133)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc82)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc134)
    cir.goto "source" loc(#loc135)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc86)
    %4 = cir.const #cir.int<7> : !s32i loc(#loc87)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc136)
    cir.goto "sink" loc(#loc137)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc91)
    %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc133)
    cir.store %5, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc133)
    cir.scope {
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
      %7 = cir.const #cir.int<10> : !s32i loc(#loc95)
      %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc139)
      cir.if %8 {
        %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc99)
        %10 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc100)
        %11 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %9 : !s32i), !cir.ptr<!s32i> loc(#loc100)
        %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc100)
        cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc101)
      } else {
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc102)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc102)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc103)
      } loc(#loc140)
    } loc(#loc138)
    cir.return loc(#loc76)
  } loc(#loc131)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_rand_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":43:23)
#loc8 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":22:1)
#loc9 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":46:1)
#loc10 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":24:5)
#loc11 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":24:9)
#loc12 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":34:9)
#loc13 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":34:30)
#loc14 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":26:13)
#loc15 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":26:12)
#loc16 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":26:5)
#loc17 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":27:5)
#loc18 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":27:10)
#loc19 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":28:1)
#loc20 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":30:12)
#loc21 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":30:5)
#loc22 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":31:5)
#loc23 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":31:10)
#loc24 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":32:1)
#loc25 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":37:9)
#loc26 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":44:9)
#loc27 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":37:13)
#loc28 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":37:20)
#loc29 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":38:9)
#loc30 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":40:9)
#loc31 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":42:9)
#loc32 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":39:33)
#loc33 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":39:26)
#loc34 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":39:13)
#loc35 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":43:13)
#loc36 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":106:1)
#loc37 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":110:1)
#loc38 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":108:5)
#loc39 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":108:13)
#loc40 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":109:5)
#loc41 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":109:13)
#loc42 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":73:23)
#loc43 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":53:1)
#loc44 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":76:1)
#loc45 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":55:5)
#loc46 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":55:9)
#loc47 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":65:9)
#loc48 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":65:30)
#loc49 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":57:13)
#loc50 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":57:12)
#loc51 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":57:5)
#loc52 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":58:5)
#loc53 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":58:10)
#loc54 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":59:1)
#loc55 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":61:12)
#loc56 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":61:5)
#loc57 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":62:5)
#loc58 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":62:10)
#loc59 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":63:1)
#loc60 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":67:9)
#loc61 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":74:9)
#loc62 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":67:13)
#loc63 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":67:21)
#loc64 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":67:23)
#loc65 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":67:26)
#loc66 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":67:34)
#loc67 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":67:36)
#loc68 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":68:9)
#loc69 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":70:9)
#loc70 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":72:9)
#loc71 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":69:33)
#loc72 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":69:26)
#loc73 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":69:13)
#loc74 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":73:13)
#loc75 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":79:1)
#loc76 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":104:1)
#loc77 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":81:5)
#loc78 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":81:9)
#loc79 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":92:9)
#loc80 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":92:30)
#loc81 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":83:13)
#loc82 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":83:12)
#loc83 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":83:5)
#loc84 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":84:5)
#loc85 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":84:10)
#loc86 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":85:1)
#loc87 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":88:12)
#loc88 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":88:5)
#loc89 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":89:5)
#loc90 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":89:10)
#loc91 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":90:1)
#loc92 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":95:9)
#loc93 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":102:9)
#loc94 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":95:13)
#loc95 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":95:20)
#loc96 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":96:9)
#loc97 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":98:9)
#loc98 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":100:9)
#loc99 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":97:33)
#loc100 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":97:26)
#loc101 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":97:13)
#loc102 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":101:23)
#loc103 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":101:13)
#loc104 = loc(fused[#loc1, #loc2])
#loc105 = loc(fused[#loc3, #loc4])
#loc106 = loc(fused[#loc5, #loc6])
#loc107 = loc(fused[#loc8, #loc9])
#loc108 = loc(fused[#loc10, #loc11])
#loc109 = loc(fused[#loc12, #loc13])
#loc110 = loc(fused[#loc16, #loc14])
#loc111 = loc(fused[#loc17, #loc18])
#loc112 = loc(fused[#loc21, #loc20])
#loc113 = loc(fused[#loc22, #loc23])
#loc114 = loc(fused[#loc25, #loc26])
#loc115 = loc(fused[#loc27, #loc28])
#loc116 = loc(fused[#loc29, #loc30, #loc31, #loc26])
#loc117 = loc(fused[#loc36, #loc37])
#loc118 = loc(fused[#loc38, #loc39])
#loc119 = loc(fused[#loc40, #loc41])
#loc120 = loc(fused[#loc43, #loc44])
#loc121 = loc(fused[#loc45, #loc46])
#loc122 = loc(fused[#loc47, #loc48])
#loc123 = loc(fused[#loc51, #loc49])
#loc124 = loc(fused[#loc52, #loc53])
#loc125 = loc(fused[#loc56, #loc55])
#loc126 = loc(fused[#loc57, #loc58])
#loc127 = loc(fused[#loc60, #loc61])
#loc128 = loc(fused[#loc62, #loc63])
#loc129 = loc(fused[#loc65, #loc67])
#loc130 = loc(fused[#loc68, #loc69, #loc70, #loc61])
#loc131 = loc(fused[#loc75, #loc76])
#loc132 = loc(fused[#loc77, #loc78])
#loc133 = loc(fused[#loc79, #loc80])
#loc134 = loc(fused[#loc83, #loc81])
#loc135 = loc(fused[#loc84, #loc85])
#loc136 = loc(fused[#loc88, #loc87])
#loc137 = loc(fused[#loc89, #loc90])
#loc138 = loc(fused[#loc92, #loc93])
#loc139 = loc(fused[#loc94, #loc95])
#loc140 = loc(fused[#loc96, #loc97, #loc98, #loc93])
