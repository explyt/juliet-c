!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private @__const.goodG2B2.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc197)
  cir.global "private" constant cir_private @__const.goodG2B1.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc198)
  cir.global "private" constant cir_private @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10_bad.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc199)
  cir.global "private" external @globalTrue : !s32i {alignment = 4 : i64} loc(#loc200)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc201)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc202)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc203)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc204)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc205)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc207)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc23)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc208)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc200)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc27)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc27)
      cir.if %4 {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc29)
        %6 = cir.const #cir.int<10> : !s32i loc(#loc30)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc30)
        %8 = cir.const #cir.int<1> : !u64i loc(#loc211)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc212)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc29)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc213)
        cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc214)
        cir.scope {
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
          %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc38)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc38)
          %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc216)
          cir.if %15 {
            %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc40)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc41)
            %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc42)
            cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc40)
          } loc(#loc217)
        } loc(#loc215)
      } loc(#loc210)
    } loc(#loc209)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc199)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc219)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc220)
      %5 = cir.get_global @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10_bad.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc199)
      cir.copy %5 to %2 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc199)
      %6 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc48)
      %7 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc49)
      %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc48)
      cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc221)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc54)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc54)
        cir.store %14, %3 : !u64i, !cir.ptr<!u64i> loc(#loc223)
        cir.for : cond {
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc56)
          %16 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc57)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc58)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc58)
          %19 = cir.binop(add, %16, %18) : !u64i loc(#loc224)
          %20 = cir.cmp(lt, %15, %19) : !u64i, !cir.bool loc(#loc225)
          cir.condition(%20) loc(#loc59)
        } body {
          cir.scope {
            %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc61)
            %16 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc62)
            %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !u64i), !cir.ptr<!s8i> loc(#loc62)
            %18 = cir.load %17 : !cir.ptr<!s8i>, !s8i loc(#loc62)
            %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc63)
            %20 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc64)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %20 : !u64i), !cir.ptr<!s8i> loc(#loc65)
            cir.store %18, %21 : !s8i, !cir.ptr<!s8i> loc(#loc227)
          } loc(#loc226)
          cir.yield loc(#loc53)
        } step {
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc67)
          %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc68)
          cir.store %16, %3 : !u64i, !cir.ptr<!u64i> loc(#loc228)
          cir.yield loc(#loc222)
        } loc(#loc222)
      } loc(#loc222)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc69)
      cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc70)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc71)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc72)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc72)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc71)
    } loc(#loc218)
    cir.return loc(#loc20)
  } loc(#loc206)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc230)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc75)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc231)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc77)
    cir.return loc(#loc74)
  } loc(#loc229)
  cir.global "private" external @globalFalse : !s32i {alignment = 4 : i64} loc(#loc232)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc81)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc234)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc86)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc235)
    cir.scope {
      %2 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc232)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc90)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc90)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc81)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc81)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc94)
      } else {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc95)
        %6 = cir.const #cir.int<10> : !s32i loc(#loc96)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc97)
        %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc96)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc96)
        %10 = cir.const #cir.int<1> : !u64i loc(#loc238)
        %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc239)
        %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc95)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc240)
        cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc241)
        cir.scope {
          %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc105)
          %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc106)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc106)
          %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc243)
          cir.if %17 {
            %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc108)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc109)
            %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc110)
            cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc108)
          } loc(#loc244)
        } loc(#loc242)
      } loc(#loc237)
    } loc(#loc236)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc198)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc246)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc247)
      %5 = cir.get_global @__const.goodG2B1.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc198)
      cir.copy %5 to %2 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc198)
      %6 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc116)
      %7 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc117)
      %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc116)
      cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc248)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc122)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc122)
        cir.store %14, %3 : !u64i, !cir.ptr<!u64i> loc(#loc250)
        cir.for : cond {
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc124)
          %16 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc125)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc126)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc126)
          %19 = cir.binop(add, %16, %18) : !u64i loc(#loc251)
          %20 = cir.cmp(lt, %15, %19) : !u64i, !cir.bool loc(#loc252)
          cir.condition(%20) loc(#loc127)
        } body {
          cir.scope {
            %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc129)
            %16 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc130)
            %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !u64i), !cir.ptr<!s8i> loc(#loc130)
            %18 = cir.load %17 : !cir.ptr<!s8i>, !s8i loc(#loc130)
            %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
            %20 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc132)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %20 : !u64i), !cir.ptr<!s8i> loc(#loc133)
            cir.store %18, %21 : !s8i, !cir.ptr<!s8i> loc(#loc254)
          } loc(#loc253)
          cir.yield loc(#loc121)
        } step {
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc135)
          %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc136)
          cir.store %16, %3 : !u64i, !cir.ptr<!u64i> loc(#loc255)
          cir.yield loc(#loc249)
        } loc(#loc249)
      } loc(#loc249)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc137)
      cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc138)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc139)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc140)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc140)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc139)
    } loc(#loc245)
    cir.return loc(#loc83)
  } loc(#loc233)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc257)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc145)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc258)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc200)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc149)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc149)
      cir.if %4 {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc151)
        %6 = cir.const #cir.int<10> : !s32i loc(#loc152)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc153)
        %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc152)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc152)
        %10 = cir.const #cir.int<1> : !u64i loc(#loc261)
        %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc262)
        %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc151)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc263)
        cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc264)
        cir.scope {
          %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc161)
          %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc162)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc162)
          %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc266)
          cir.if %17 {
            %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc164)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc165)
            %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc166)
            cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc164)
          } loc(#loc267)
        } loc(#loc265)
      } loc(#loc260)
    } loc(#loc259)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc197)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc269)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc270)
      %5 = cir.get_global @__const.goodG2B2.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc197)
      cir.copy %5 to %2 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc197)
      %6 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc172)
      %7 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc173)
      %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc172)
      cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc271)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc178)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc178)
        cir.store %14, %3 : !u64i, !cir.ptr<!u64i> loc(#loc273)
        cir.for : cond {
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc180)
          %16 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc181)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc182)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc182)
          %19 = cir.binop(add, %16, %18) : !u64i loc(#loc274)
          %20 = cir.cmp(lt, %15, %19) : !u64i, !cir.bool loc(#loc275)
          cir.condition(%20) loc(#loc183)
        } body {
          cir.scope {
            %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc185)
            %16 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc186)
            %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !u64i), !cir.ptr<!s8i> loc(#loc186)
            %18 = cir.load %17 : !cir.ptr<!s8i>, !s8i loc(#loc186)
            %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc187)
            %20 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc188)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %20 : !u64i), !cir.ptr<!s8i> loc(#loc189)
            cir.store %18, %21 : !s8i, !cir.ptr<!s8i> loc(#loc277)
          } loc(#loc276)
          cir.yield loc(#loc177)
        } step {
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc191)
          %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc192)
          cir.store %16, %3 : !u64i, !cir.ptr<!u64i> loc(#loc278)
          cir.yield loc(#loc272)
        } loc(#loc272)
      } loc(#loc272)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc193)
      cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc194)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc195)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc196)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc196)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc195)
    } loc(#loc268)
    cir.return loc(#loc142)
  } loc(#loc256)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":100:9)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":100:29)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":74:9)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":74:29)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":39:9)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":39:29)
#loc7 = loc("../../../testcasesupport/std_testcase.h":116:1)
#loc8 = loc("../../../testcasesupport/std_testcase.h":116:12)
#loc9 = loc("/usr/include/stdlib.h":672:1)
#loc10 = loc("/usr/include/stdlib.h":672:45)
#loc11 = loc("/usr/include/stdlib.h":756:1)
#loc12 = loc("/usr/include/stdlib.h":756:70)
#loc13 = loc("/usr/include/string.h":407:1)
#loc14 = loc("/usr/include/string.h":408:33)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc17 = loc("/usr/include/stdlib.h":687:1)
#loc18 = loc("/usr/include/stdlib.h":687:32)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":28:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":51:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":30:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":30:12)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":31:12)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":31:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":32:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":37:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":32:8)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":33:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":35:24)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":35:31)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":35:34)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":35:45)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":35:46)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":35:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":36:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":36:37)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":36:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":36:21)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":36:27)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":36:28)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":36:34)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":36:33)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":38:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":50:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":40:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":40:16)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":40:19)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":41:21)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":41:28)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":41:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":41:34)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":44:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":47:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":44:18)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":44:14)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":44:21)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":44:25)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":44:37)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":44:23)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":45:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":46:30)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":46:23)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":46:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":46:18)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":46:19)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":46:31)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":44:41)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":44:40)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":48:19)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":48:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":49:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":49:14)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":114:1)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":118:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":116:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":116:14)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":117:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":117:14)
#loc79 = loc("../../../testcasesupport/std_testcase.h":117:1)
#loc80 = loc("../../../testcasesupport/std_testcase.h":117:12)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":65:19)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":58:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":86:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":60:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":60:12)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":61:12)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":61:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":62:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":72:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":62:8)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":63:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":66:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":68:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":65:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":70:24)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":70:32)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":70:35)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":70:38)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":70:49)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":70:31)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":70:50)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":70:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":71:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":71:37)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":71:13)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":71:21)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":71:27)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":71:28)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":71:34)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":71:33)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":73:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":85:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":75:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":75:16)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":75:19)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":76:21)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":76:28)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":76:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":76:34)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":79:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":82:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":79:18)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":79:14)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":79:21)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":79:25)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":79:37)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":79:23)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":80:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":81:30)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":81:23)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":81:13)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":81:18)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":81:19)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":81:31)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":79:41)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":79:40)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":83:19)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":83:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":84:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":84:14)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":89:1)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":112:1)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":91:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":91:12)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":92:12)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":92:5)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":93:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":98:5)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":93:8)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":94:5)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":96:24)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":96:32)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":96:35)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":96:38)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":96:49)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":96:31)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":96:50)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":96:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":97:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":97:37)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":97:13)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":97:21)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":97:27)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":97:28)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":97:34)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":97:33)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":99:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":111:5)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":101:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":101:16)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":101:19)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":102:21)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":102:28)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":102:9)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":102:34)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":105:9)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":108:9)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":105:18)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":105:14)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":105:21)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":105:25)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":105:37)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":105:23)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":106:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":107:30)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":107:23)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":107:13)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":107:18)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":107:19)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":107:31)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":105:41)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":105:40)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":109:19)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":109:9)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":110:9)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c":110:14)
#loc197 = loc(fused[#loc1, #loc2])
#loc198 = loc(fused[#loc3, #loc4])
#loc199 = loc(fused[#loc5, #loc6])
#loc200 = loc(fused[#loc7, #loc8])
#loc201 = loc(fused[#loc9, #loc10])
#loc202 = loc(fused[#loc11, #loc12])
#loc203 = loc(fused[#loc13, #loc14])
#loc204 = loc(fused[#loc15, #loc16])
#loc205 = loc(fused[#loc17, #loc18])
#loc206 = loc(fused[#loc19, #loc20])
#loc207 = loc(fused[#loc21, #loc22])
#loc208 = loc(fused[#loc24, #loc23])
#loc209 = loc(fused[#loc25, #loc26])
#loc210 = loc(fused[#loc28, #loc26])
#loc211 = loc(fused[#loc31, #loc32])
#loc212 = loc(fused[#loc30, #loc32])
#loc213 = loc(fused[#loc29, #loc33])
#loc214 = loc(fused[#loc34, #loc33])
#loc215 = loc(fused[#loc35, #loc36])
#loc216 = loc(fused[#loc37, #loc38])
#loc217 = loc(fused[#loc39, #loc36])
#loc218 = loc(fused[#loc43, #loc44])
#loc219 = loc(fused[#loc45, #loc46])
#loc220 = loc(fused[#loc45, #loc47])
#loc221 = loc(fused[#loc50, #loc51])
#loc222 = loc(fused[#loc52, #loc53])
#loc223 = loc(fused[#loc55, #loc54])
#loc224 = loc(fused[#loc57, #loc58])
#loc225 = loc(fused[#loc56, #loc58])
#loc226 = loc(fused[#loc60, #loc53])
#loc227 = loc(fused[#loc63, #loc66])
#loc228 = loc(fused[#loc68, #loc67])
#loc229 = loc(fused[#loc73, #loc74])
#loc230 = loc(fused[#loc75, #loc76])
#loc231 = loc(fused[#loc77, #loc78])
#loc232 = loc(fused[#loc79, #loc80])
#loc233 = loc(fused[#loc82, #loc83])
#loc234 = loc(fused[#loc84, #loc85])
#loc235 = loc(fused[#loc87, #loc86])
#loc236 = loc(fused[#loc88, #loc89])
#loc237 = loc(fused[#loc91, #loc92, #loc93, #loc89])
#loc238 = loc(fused[#loc98, #loc99])
#loc239 = loc(fused[#loc100, #loc99])
#loc240 = loc(fused[#loc95, #loc101])
#loc241 = loc(fused[#loc102, #loc101])
#loc242 = loc(fused[#loc103, #loc104])
#loc243 = loc(fused[#loc105, #loc106])
#loc244 = loc(fused[#loc107, #loc104])
#loc245 = loc(fused[#loc111, #loc112])
#loc246 = loc(fused[#loc113, #loc114])
#loc247 = loc(fused[#loc113, #loc115])
#loc248 = loc(fused[#loc118, #loc119])
#loc249 = loc(fused[#loc120, #loc121])
#loc250 = loc(fused[#loc123, #loc122])
#loc251 = loc(fused[#loc125, #loc126])
#loc252 = loc(fused[#loc124, #loc126])
#loc253 = loc(fused[#loc128, #loc121])
#loc254 = loc(fused[#loc131, #loc134])
#loc255 = loc(fused[#loc136, #loc135])
#loc256 = loc(fused[#loc141, #loc142])
#loc257 = loc(fused[#loc143, #loc144])
#loc258 = loc(fused[#loc146, #loc145])
#loc259 = loc(fused[#loc147, #loc148])
#loc260 = loc(fused[#loc150, #loc148])
#loc261 = loc(fused[#loc154, #loc155])
#loc262 = loc(fused[#loc156, #loc155])
#loc263 = loc(fused[#loc151, #loc157])
#loc264 = loc(fused[#loc158, #loc157])
#loc265 = loc(fused[#loc159, #loc160])
#loc266 = loc(fused[#loc161, #loc162])
#loc267 = loc(fused[#loc163, #loc160])
#loc268 = loc(fused[#loc167, #loc168])
#loc269 = loc(fused[#loc169, #loc170])
#loc270 = loc(fused[#loc169, #loc171])
#loc271 = loc(fused[#loc174, #loc175])
#loc272 = loc(fused[#loc176, #loc177])
#loc273 = loc(fused[#loc179, #loc178])
#loc274 = loc(fused[#loc181, #loc182])
#loc275 = loc(fused[#loc180, #loc182])
#loc276 = loc(fused[#loc184, #loc177])
#loc277 = loc(fused[#loc187, #loc190])
#loc278 = loc(fused[#loc192, #loc191])
