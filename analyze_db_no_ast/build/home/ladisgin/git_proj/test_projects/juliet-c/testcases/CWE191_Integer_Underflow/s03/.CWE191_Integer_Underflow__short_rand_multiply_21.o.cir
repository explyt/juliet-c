!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc9 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":25:21)
#loc10 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":25:27)
#loc55 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":58:26)
#loc56 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":58:32)
#loc103 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":94:26)
#loc104 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":94:32)
#loc149 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":125:25)
#loc150 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":125:31)
#loc184 = loc(fused[#loc9, #loc10])
#loc203 = loc(fused[#loc55, #loc56])
#loc221 = loc(fused[#loc103, #loc104])
#loc239 = loc(fused[#loc149, #loc150])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_rand_multiply_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc180)
  cir.global "private"  internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc181)
  cir.func private  @printIntLine(!s32i) loc(#loc182)
  cir.func internal private  @badSink(%arg0: !s16i loc(fused[#loc9, #loc10])) extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc184)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc11)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc181)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc14)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc14)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc18)
          %5 = cir.cast(integral, %4 : !s16i), !s32i loc(#loc18)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc19)
          %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc188)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc20)
          cir.if %8 {
            %9 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc190)
            %10 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc24)
            %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc24)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc23)
            %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc24)
            %14 = cir.cast(integral, %13 : !s32i), !s16i loc(#loc24)
            cir.store %14, %9 : !s16i, !cir.ptr<!s16i> loc(#loc190)
            %15 = cir.load %9 : !cir.ptr<!s16i>, !s16i loc(#loc25)
            %16 = cir.cast(integral, %15 : !s16i), !s32i loc(#loc25)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc26)
          } loc(#loc189)
        } loc(#loc187)
      } loc(#loc186)
    } loc(#loc185)
    cir.return loc(#loc8)
  } loc(#loc183)
  cir.func no_proto  @CWE191_Integer_Underflow__short_rand_multiply_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc192)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc31)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc31)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc193)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc33)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc33)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc33)
    %7 = cir.ternary(%6, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc33)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc33)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc33)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc33)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc33)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc33)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc33)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc33)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc33)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc33)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc33)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc33)
      cir.yield %24 : !u32i loc(#loc33)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc33)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc33)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc33)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc33)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc33)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc33)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc33)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc33)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc33)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc33)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc33)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc33)
      %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc33)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc33)
      %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc33)
      %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc33)
      cir.yield %28 : !u32i loc(#loc33)
    }) : (!cir.bool) -> !u32i loc(#loc33)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc33)
    %9 = cir.cast(integral, %8 : !s32i), !s16i loc(#loc33)
    cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc194)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc35)
    %11 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc181)
    cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc195)
    %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc37)
    cir.call @badSink(%12) : (!s16i) -> () loc(#loc38)
    cir.return loc(#loc28)
  } loc(#loc191)
  cir.func no_proto  @CWE191_Integer_Underflow__short_rand_multiply_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc197)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc198)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc199)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    cir.return loc(#loc40)
  } loc(#loc196)
  cir.global "private"  internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc200)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc201)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc51)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc52)
  cir.func internal private  @goodB2G1Sink(%arg0: !s16i loc(fused[#loc55, #loc56])) extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc203)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc57)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc200)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc60)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc60)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc51)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc51)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc64)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc67)
          %5 = cir.cast(integral, %4 : !s16i), !s32i loc(#loc67)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc68)
          %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc207)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc69)
          cir.if %8 {
            cir.scope {
              %9 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc73)
              %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc73)
              %11 = cir.const #cir.int<32767> : !s32i loc(#loc74)
              %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc74)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc74)
              %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc74)
              %15 = cir.const #cir.int<2> : !s32i loc(#loc75)
              %16 = cir.binop(div, %14, %15) : !s32i loc(#loc210)
              %17 = cir.cmp(gt, %10, %16) : !s32i, !s32i loc(#loc211)
              %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc77)
              cir.if %18 {
                %19 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc213)
                %20 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc83)
                %21 = cir.cast(integral, %20 : !s16i), !s32i loc(#loc83)
                %22 = cir.const #cir.int<2> : !s32i loc(#loc82)
                %23 = cir.binop(mul, %21, %22) nsw : !s32i loc(#loc83)
                %24 = cir.cast(integral, %23 : !s32i), !s16i loc(#loc83)
                cir.store %24, %19 : !s16i, !cir.ptr<!s16i> loc(#loc213)
                %25 = cir.load %19 : !cir.ptr<!s16i>, !s16i loc(#loc84)
                %26 = cir.cast(integral, %25 : !s16i), !s32i loc(#loc84)
                cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc85)
              } else {
                %19 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc52)
                %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc52)
                cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc86)
              } loc(#loc212)
            } loc(#loc209)
          } loc(#loc208)
        } loc(#loc206)
      } loc(#loc205)
    } loc(#loc204)
    cir.return loc(#loc54)
  } loc(#loc202)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc215)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc91)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc91)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc216)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc93)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc93)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc93)
    %7 = cir.ternary(%6, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc93)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc93)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc93)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc93)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc93)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc93)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc93)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc93)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc93)
      cir.yield %24 : !u32i loc(#loc93)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc93)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc93)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc93)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc93)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc93)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc93)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc93)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc93)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc93)
      %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc93)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc93)
      %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc93)
      %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc93)
      cir.yield %28 : !u32i loc(#loc93)
    }) : (!cir.bool) -> !u32i loc(#loc93)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc93)
    %9 = cir.cast(integral, %8 : !s32i), !s16i loc(#loc93)
    cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc217)
    %10 = cir.const #cir.int<0> : !s32i loc(#loc95)
    %11 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc200)
    cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc218)
    %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc97)
    cir.call @goodB2G1Sink(%12) : (!s16i) -> () loc(#loc98)
    cir.return loc(#loc88)
  } loc(#loc214)
  cir.global "private"  internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc219)
  cir.func internal private  @goodB2G2Sink(%arg0: !s16i loc(fused[#loc103, #loc104])) extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc221)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc105)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc219)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc108)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc108)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc112)
          %5 = cir.cast(integral, %4 : !s16i), !s32i loc(#loc112)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc113)
          %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc225)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc114)
          cir.if %8 {
            cir.scope {
              %9 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc118)
              %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc118)
              %11 = cir.const #cir.int<32767> : !s32i loc(#loc119)
              %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc119)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc119)
              %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc119)
              %15 = cir.const #cir.int<2> : !s32i loc(#loc120)
              %16 = cir.binop(div, %14, %15) : !s32i loc(#loc228)
              %17 = cir.cmp(gt, %10, %16) : !s32i, !s32i loc(#loc229)
              %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc122)
              cir.if %18 {
                %19 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc231)
                %20 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc128)
                %21 = cir.cast(integral, %20 : !s16i), !s32i loc(#loc128)
                %22 = cir.const #cir.int<2> : !s32i loc(#loc127)
                %23 = cir.binop(mul, %21, %22) nsw : !s32i loc(#loc128)
                %24 = cir.cast(integral, %23 : !s32i), !s16i loc(#loc128)
                cir.store %24, %19 : !s16i, !cir.ptr<!s16i> loc(#loc231)
                %25 = cir.load %19 : !cir.ptr<!s16i>, !s16i loc(#loc129)
                %26 = cir.cast(integral, %25 : !s16i), !s32i loc(#loc129)
                cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc130)
              } else {
                %19 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc131)
                %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc131)
                cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc132)
              } loc(#loc230)
            } loc(#loc227)
          } loc(#loc226)
        } loc(#loc224)
      } loc(#loc223)
    } loc(#loc222)
    cir.return loc(#loc102)
  } loc(#loc220)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc233)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc137)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc137)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc234)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc139)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc139)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc139)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc139)
    %7 = cir.ternary(%6, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc139)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc139)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc139)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc139)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc139)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc139)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc139)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc139)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc139)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc139)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc139)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc139)
      cir.yield %24 : !u32i loc(#loc139)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc139)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc139)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc139)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc139)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc139)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc139)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc139)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc139)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc139)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc139)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc139)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc139)
      %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc139)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc139)
      %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc139)
      %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc139)
      cir.yield %28 : !u32i loc(#loc139)
    }) : (!cir.bool) -> !u32i loc(#loc139)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc139)
    %9 = cir.cast(integral, %8 : !s32i), !s16i loc(#loc139)
    cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc235)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc141)
    %11 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc219)
    cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc236)
    %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc143)
    cir.call @goodB2G2Sink(%12) : (!s16i) -> () loc(#loc144)
    cir.return loc(#loc134)
  } loc(#loc232)
  cir.global "private"  internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc237)
  cir.func internal private  @goodG2BSink(%arg0: !s16i loc(fused[#loc149, #loc150])) extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc239)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc151)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc237)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc154)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc154)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc158)
          %5 = cir.cast(integral, %4 : !s16i), !s32i loc(#loc158)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc159)
          %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc243)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc160)
          cir.if %8 {
            %9 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc245)
            %10 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc164)
            %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc164)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc163)
            %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc164)
            %14 = cir.cast(integral, %13 : !s32i), !s16i loc(#loc164)
            cir.store %14, %9 : !s16i, !cir.ptr<!s16i> loc(#loc245)
            %15 = cir.load %9 : !cir.ptr<!s16i>, !s16i loc(#loc165)
            %16 = cir.cast(integral, %15 : !s16i), !s32i loc(#loc165)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc166)
          } loc(#loc244)
        } loc(#loc242)
      } loc(#loc241)
    } loc(#loc240)
    cir.return loc(#loc148)
  } loc(#loc238)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc247)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc171)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc171)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc248)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc173)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc174)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc174)
    cir.store %5, %0 : !s16i, !cir.ptr<!s16i> loc(#loc249)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc176)
    %7 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc237)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc250)
    %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc178)
    cir.call @goodG2BSink(%8) : (!s16i) -> () loc(#loc179)
    cir.return loc(#loc168)
  } loc(#loc246)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_rand_multiply_21.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":23:1)
#loc4 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":23:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":25:1)
#loc8 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":36:1)
#loc11 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":26:1)
#loc12 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":27:5)
#loc13 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":35:5)
#loc14 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":27:8)
#loc15 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":28:5)
#loc16 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":29:9)
#loc17 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":34:9)
#loc18 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":29:12)
#loc19 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":29:19)
#loc20 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":29:17)
#loc21 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":30:9)
#loc22 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":32:13)
#loc23 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":32:35)
#loc24 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":32:28)
#loc25 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":33:26)
#loc26 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":33:13)
#loc27 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":38:1)
#loc28 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":46:1)
#loc29 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":40:5)
#loc30 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":40:11)
#loc31 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":41:12)
#loc32 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":41:5)
#loc33 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":43:19)
#loc34 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":43:5)
#loc35 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":44:17)
#loc36 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":44:5)
#loc37 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":45:13)
#loc38 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":45:5)
#loc39 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":148:1)
#loc40 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":153:1)
#loc41 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":150:5)
#loc42 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":150:14)
#loc43 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":151:5)
#loc44 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":151:14)
#loc45 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":152:5)
#loc46 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":152:13)
#loc47 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":53:1)
#loc48 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":53:29)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc51 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":63:19)
#loc52 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":77:27)
#loc53 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":58:1)
#loc54 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":81:1)
#loc57 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":59:1)
#loc58 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":60:5)
#loc59 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":80:5)
#loc60 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":60:8)
#loc61 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":61:5)
#loc62 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":64:5)
#loc63 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":66:5)
#loc64 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":63:9)
#loc65 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":67:9)
#loc66 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":79:9)
#loc67 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":67:12)
#loc68 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":67:19)
#loc69 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":67:17)
#loc70 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":68:9)
#loc71 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":70:13)
#loc72 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":78:13)
#loc73 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":70:17)
#loc74 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":70:25)
#loc75 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":70:34)
#loc76 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":70:35)
#loc77 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":70:22)
#loc78 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":71:13)
#loc79 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":74:13)
#loc80 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":76:13)
#loc81 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":72:17)
#loc82 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":72:39)
#loc83 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":72:32)
#loc84 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":73:30)
#loc85 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":73:17)
#loc86 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":77:17)
#loc87 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":83:1)
#loc88 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":91:1)
#loc89 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":85:5)
#loc90 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":85:11)
#loc91 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":86:12)
#loc92 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":86:5)
#loc93 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":88:19)
#loc94 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":88:5)
#loc95 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":89:22)
#loc96 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":89:5)
#loc97 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":90:18)
#loc98 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":90:5)
#loc99 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":54:1)
#loc100 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":54:29)
#loc101 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":94:1)
#loc102 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":112:1)
#loc105 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":95:1)
#loc106 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":96:5)
#loc107 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":111:5)
#loc108 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":96:8)
#loc109 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":97:5)
#loc110 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":98:9)
#loc111 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":110:9)
#loc112 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":98:12)
#loc113 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":98:19)
#loc114 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":98:17)
#loc115 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":99:9)
#loc116 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":101:13)
#loc117 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":109:13)
#loc118 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":101:17)
#loc119 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":101:25)
#loc120 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":101:34)
#loc121 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":101:35)
#loc122 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":101:22)
#loc123 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":102:13)
#loc124 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":105:13)
#loc125 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":107:13)
#loc126 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":103:17)
#loc127 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":103:39)
#loc128 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":103:32)
#loc129 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":104:30)
#loc130 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":104:17)
#loc131 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":108:27)
#loc132 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":108:17)
#loc133 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":114:1)
#loc134 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":122:1)
#loc135 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":116:5)
#loc136 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":116:11)
#loc137 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":117:12)
#loc138 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":117:5)
#loc139 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":119:19)
#loc140 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":119:5)
#loc141 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":120:22)
#loc142 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":120:5)
#loc143 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":121:18)
#loc144 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":121:5)
#loc145 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":55:1)
#loc146 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":55:28)
#loc147 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":125:1)
#loc148 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":136:1)
#loc151 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":126:1)
#loc152 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":127:5)
#loc153 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":135:5)
#loc154 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":127:8)
#loc155 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":128:5)
#loc156 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":129:9)
#loc157 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":134:9)
#loc158 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":129:12)
#loc159 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":129:19)
#loc160 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":129:17)
#loc161 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":130:9)
#loc162 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":132:13)
#loc163 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":132:35)
#loc164 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":132:28)
#loc165 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":133:26)
#loc166 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":133:13)
#loc167 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":138:1)
#loc168 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":146:1)
#loc169 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":140:5)
#loc170 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":140:11)
#loc171 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":141:12)
#loc172 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":141:5)
#loc173 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":143:13)
#loc174 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":143:12)
#loc175 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":143:5)
#loc176 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":144:21)
#loc177 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":144:5)
#loc178 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":145:17)
#loc179 = loc("CWE191_Integer_Underflow__short_rand_multiply_21.c":145:5)
#loc180 = loc(fused[#loc1, #loc2])
#loc181 = loc(fused[#loc3, #loc4])
#loc182 = loc(fused[#loc5, #loc6])
#loc183 = loc(fused[#loc7, #loc8])
#loc185 = loc(fused[#loc12, #loc13])
#loc186 = loc(fused[#loc15, #loc13])
#loc187 = loc(fused[#loc16, #loc17])
#loc188 = loc(fused[#loc18, #loc19])
#loc189 = loc(fused[#loc21, #loc17])
#loc190 = loc(fused[#loc22, #loc23])
#loc191 = loc(fused[#loc27, #loc28])
#loc192 = loc(fused[#loc29, #loc30])
#loc193 = loc(fused[#loc32, #loc31])
#loc194 = loc(fused[#loc34, #loc33])
#loc195 = loc(fused[#loc36, #loc35])
#loc196 = loc(fused[#loc39, #loc40])
#loc197 = loc(fused[#loc41, #loc42])
#loc198 = loc(fused[#loc43, #loc44])
#loc199 = loc(fused[#loc45, #loc46])
#loc200 = loc(fused[#loc47, #loc48])
#loc201 = loc(fused[#loc49, #loc50])
#loc202 = loc(fused[#loc53, #loc54])
#loc204 = loc(fused[#loc58, #loc59])
#loc205 = loc(fused[#loc61, #loc62, #loc63, #loc59])
#loc206 = loc(fused[#loc65, #loc66])
#loc207 = loc(fused[#loc67, #loc68])
#loc208 = loc(fused[#loc70, #loc66])
#loc209 = loc(fused[#loc71, #loc72])
#loc210 = loc(fused[#loc74, #loc75])
#loc211 = loc(fused[#loc73, #loc76])
#loc212 = loc(fused[#loc78, #loc79, #loc80, #loc72])
#loc213 = loc(fused[#loc81, #loc82])
#loc214 = loc(fused[#loc87, #loc88])
#loc215 = loc(fused[#loc89, #loc90])
#loc216 = loc(fused[#loc92, #loc91])
#loc217 = loc(fused[#loc94, #loc93])
#loc218 = loc(fused[#loc96, #loc95])
#loc219 = loc(fused[#loc99, #loc100])
#loc220 = loc(fused[#loc101, #loc102])
#loc222 = loc(fused[#loc106, #loc107])
#loc223 = loc(fused[#loc109, #loc107])
#loc224 = loc(fused[#loc110, #loc111])
#loc225 = loc(fused[#loc112, #loc113])
#loc226 = loc(fused[#loc115, #loc111])
#loc227 = loc(fused[#loc116, #loc117])
#loc228 = loc(fused[#loc119, #loc120])
#loc229 = loc(fused[#loc118, #loc121])
#loc230 = loc(fused[#loc123, #loc124, #loc125, #loc117])
#loc231 = loc(fused[#loc126, #loc127])
#loc232 = loc(fused[#loc133, #loc134])
#loc233 = loc(fused[#loc135, #loc136])
#loc234 = loc(fused[#loc138, #loc137])
#loc235 = loc(fused[#loc140, #loc139])
#loc236 = loc(fused[#loc142, #loc141])
#loc237 = loc(fused[#loc145, #loc146])
#loc238 = loc(fused[#loc147, #loc148])
#loc240 = loc(fused[#loc152, #loc153])
#loc241 = loc(fused[#loc155, #loc153])
#loc242 = loc(fused[#loc156, #loc157])
#loc243 = loc(fused[#loc158, #loc159])
#loc244 = loc(fused[#loc161, #loc157])
#loc245 = loc(fused[#loc162, #loc163])
#loc246 = loc(fused[#loc167, #loc168])
#loc247 = loc(fused[#loc169, #loc170])
#loc248 = loc(fused[#loc172, #loc171])
#loc249 = loc(fused[#loc175, #loc173])
#loc250 = loc(fused[#loc177, #loc176])
