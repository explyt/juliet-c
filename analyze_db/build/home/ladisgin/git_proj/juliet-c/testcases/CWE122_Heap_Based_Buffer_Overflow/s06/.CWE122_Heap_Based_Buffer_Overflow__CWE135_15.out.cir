!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":254:10)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":254:14)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":254:20)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":254:32)
#loc500 = loc(fused[#loc117, #loc118])
#loc501 = loc(fused[#loc119, #loc120])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc461)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc462)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc463)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc464)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc9)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc465)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc466)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc467)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc468)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc470)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc22)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc471)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc26)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc474)
            %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc32)
            %5 = cir.const #cir.int<50> : !s32i loc(#loc33)
            %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc33)
            %7 = cir.const #cir.int<4> : !u64i loc(#loc475)
            %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc476)
            %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc32)
            %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc477)
            cir.store %10, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc474)
            cir.scope {
              %26 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc38)
              %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc39)
              %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc39)
              %29 = cir.cmp(eq, %26, %28) : !cir.ptr<!s32i>, !cir.bool loc(#loc479)
              cir.if %29 {
                %30 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc41)
                %31 = cir.const #cir.int<1> : !s32i loc(#loc42)
                %32 = cir.unary(minus, %31) : !s32i, !s32i loc(#loc43)
                cir.call @exit(%32) : (!s32i) -> () extra(#fn_attr) loc(#loc41)
              } loc(#loc480)
            } loc(#loc478)
            %11 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
            %12 = cir.const #cir.int<65> : !s32i loc(#loc45)
            %13 = cir.const #cir.int<50> : !s32i loc(#loc46)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc47)
            %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc46)
            %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc46)
            %17 = cir.call @wmemset(%11, %12, %16) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc48)
            %18 = cir.const #cir.int<0> : !s32i loc(#loc49)
            %19 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc50)
            %20 = cir.const #cir.int<50> : !s32i loc(#loc51)
            %21 = cir.const #cir.int<1> : !s32i loc(#loc52)
            %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc51)
            %23 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc53)
            cir.store %18, %23 : !s32i, !cir.ptr<!s32i> loc(#loc481)
            %24 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc54)
            %25 = cir.cast(bitcast, %24 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc54)
            cir.store %25, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc482)
          } loc(#loc473)
          cir.break loc(#loc56)
        } loc(#loc27)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc9)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc58)
          cir.break loc(#loc59)
        } loc(#loc57)
        cir.yield loc(#loc24)
      } loc(#loc24)
    } loc(#loc472)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc62)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc485)
            %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc486)
            %5 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc70)
            %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc71)
            %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc71)
            %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc70)
            cir.store %8, %3 : !u64i, !cir.ptr<!u64i> loc(#loc485)
            %9 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc72)
            %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc73)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc74)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc74)
            %13 = cir.binop(add, %10, %12) : !u64i loc(#loc487)
            %14 = cir.const #cir.int<4> : !u64i loc(#loc488)
            %15 = cir.call @calloc(%13, %14) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc72)
            cir.store %15, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc486)
            cir.scope {
              %25 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc79)
              %26 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc80)
              %27 = cir.cmp(eq, %25, %26) : !cir.ptr<!void>, !cir.bool loc(#loc490)
              cir.if %27 {
                %28 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc82)
                %29 = cir.const #cir.int<1> : !s32i loc(#loc83)
                %30 = cir.unary(minus, %29) : !s32i, !s32i loc(#loc84)
                cir.call @exit(%30) : (!s32i) -> () extra(#fn_attr) loc(#loc82)
              } loc(#loc491)
            } loc(#loc489)
            %16 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc85)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc85)
            %18 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc86)
            %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc86)
            %20 = cir.call @wcscpy(%17, %19) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc87)
            %21 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc88)
            %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc88)
            cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc89)
            %23 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc90)
            %24 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc91)
            cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc90)
          } loc(#loc484)
          cir.break loc(#loc92)
        } loc(#loc63)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc94)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc94)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc95)
          cir.break loc(#loc96)
        } loc(#loc93)
        cir.yield loc(#loc60)
      } loc(#loc60)
    } loc(#loc483)
    cir.return loc(#loc19)
  } loc(#loc469)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc493)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc99)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc494)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc101)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc495)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc103)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc496)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc105)
    cir.return loc(#loc98)
  } loc(#loc492)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc497)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc498)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc111)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc112)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc113)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc114)
  cir.func @main(%arg0: !s32i loc(fused[#loc117, #loc118]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc119, #loc120])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc500)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc501)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc116)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc121)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc121)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc122)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc123)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc123)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc124)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc111)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc111)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc125)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc502)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_15_good() : () -> () loc(#loc126)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc112)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc112)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc128)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc113)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc113)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc129)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc503)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_15_bad() : () -> () loc(#loc130)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc114)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc114)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc132)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc133)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc504)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc504)
    cir.return %17 : !s32i loc(#loc504)
  } loc(#loc499)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc505)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc506)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc508)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc143)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc509)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc147)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc512)
            %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc153)
            %5 = cir.const #cir.int<50> : !s32i loc(#loc154)
            %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc154)
            %7 = cir.const #cir.int<4> : !u64i loc(#loc513)
            %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc514)
            %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc153)
            %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc515)
            cir.store %10, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc512)
            cir.scope {
              %26 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc159)
              %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc160)
              %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc160)
              %29 = cir.cmp(eq, %26, %28) : !cir.ptr<!s32i>, !cir.bool loc(#loc517)
              cir.if %29 {
                %30 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc162)
                %31 = cir.const #cir.int<1> : !s32i loc(#loc163)
                %32 = cir.unary(minus, %31) : !s32i, !s32i loc(#loc164)
                cir.call @exit(%32) : (!s32i) -> () extra(#fn_attr) loc(#loc162)
              } loc(#loc518)
            } loc(#loc516)
            %11 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc165)
            %12 = cir.const #cir.int<65> : !s32i loc(#loc166)
            %13 = cir.const #cir.int<50> : !s32i loc(#loc167)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc168)
            %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc167)
            %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc167)
            %17 = cir.call @wmemset(%11, %12, %16) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc169)
            %18 = cir.const #cir.int<0> : !s32i loc(#loc170)
            %19 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc171)
            %20 = cir.const #cir.int<50> : !s32i loc(#loc172)
            %21 = cir.const #cir.int<1> : !s32i loc(#loc173)
            %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc172)
            %23 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc174)
            cir.store %18, %23 : !s32i, !cir.ptr<!s32i> loc(#loc519)
            %24 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc175)
            %25 = cir.cast(bitcast, %24 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc175)
            cir.store %25, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc520)
          } loc(#loc511)
          cir.break loc(#loc177)
        } loc(#loc148)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc179)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc179)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc180)
          cir.break loc(#loc181)
        } loc(#loc178)
        cir.yield loc(#loc145)
      } loc(#loc145)
    } loc(#loc510)
    cir.scope {
      %2 = cir.const #cir.int<8> : !s32i loc(#loc184)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc186)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc186)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc187)
          cir.break loc(#loc188)
        } loc(#loc185)
        cir.case(default, []) {
          cir.scope {
            %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc523)
            %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc524)
            %5 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc196)
            %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc197)
            %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc197)
            %8 = cir.call @wcslen(%7) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc196)
            cir.store %8, %3 : !u64i, !cir.ptr<!u64i> loc(#loc523)
            %9 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc198)
            %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc199)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc200)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc200)
            %13 = cir.binop(add, %10, %12) : !u64i loc(#loc525)
            %14 = cir.const #cir.int<4> : !u64i loc(#loc526)
            %15 = cir.call @calloc(%13, %14) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc198)
            cir.store %15, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc524)
            cir.scope {
              %25 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc205)
              %26 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc206)
              %27 = cir.cmp(eq, %25, %26) : !cir.ptr<!void>, !cir.bool loc(#loc528)
              cir.if %27 {
                %28 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc208)
                %29 = cir.const #cir.int<1> : !s32i loc(#loc209)
                %30 = cir.unary(minus, %29) : !s32i, !s32i loc(#loc210)
                cir.call @exit(%30) : (!s32i) -> () extra(#fn_attr) loc(#loc208)
              } loc(#loc529)
            } loc(#loc527)
            %16 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc211)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc211)
            %18 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc212)
            %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc212)
            %20 = cir.call @wcscpy(%17, %19) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc213)
            %21 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc214)
            %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc214)
            cir.call @printWLine(%22) : (!cir.ptr<!s32i>) -> () loc(#loc215)
            %23 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc216)
            %24 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc217)
            cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc216)
          } loc(#loc522)
          cir.break loc(#loc218)
        } loc(#loc189)
        cir.yield loc(#loc182)
      } loc(#loc182)
    } loc(#loc521)
    cir.return loc(#loc140)
  } loc(#loc507)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc531)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc223)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc532)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc227)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc535)
            %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc233)
            %5 = cir.const #cir.int<50> : !s32i loc(#loc234)
            %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc234)
            %7 = cir.const #cir.int<4> : !u64i loc(#loc536)
            %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc537)
            %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc233)
            %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc538)
            cir.store %10, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc535)
            cir.scope {
              %26 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc239)
              %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc240)
              %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc240)
              %29 = cir.cmp(eq, %26, %28) : !cir.ptr<!s32i>, !cir.bool loc(#loc540)
              cir.if %29 {
                %30 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc242)
                %31 = cir.const #cir.int<1> : !s32i loc(#loc243)
                %32 = cir.unary(minus, %31) : !s32i, !s32i loc(#loc244)
                cir.call @exit(%32) : (!s32i) -> () extra(#fn_attr) loc(#loc242)
              } loc(#loc541)
            } loc(#loc539)
            %11 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc245)
            %12 = cir.const #cir.int<65> : !s32i loc(#loc246)
            %13 = cir.const #cir.int<50> : !s32i loc(#loc247)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc248)
            %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc247)
            %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc247)
            %17 = cir.call @wmemset(%11, %12, %16) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc249)
            %18 = cir.const #cir.int<0> : !s32i loc(#loc250)
            %19 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc251)
            %20 = cir.const #cir.int<50> : !s32i loc(#loc252)
            %21 = cir.const #cir.int<1> : !s32i loc(#loc253)
            %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc252)
            %23 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc254)
            cir.store %18, %23 : !s32i, !cir.ptr<!s32i> loc(#loc542)
            %24 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc255)
            %25 = cir.cast(bitcast, %24 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc255)
            cir.store %25, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc543)
          } loc(#loc534)
          cir.break loc(#loc257)
        } loc(#loc228)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc259)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc259)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc260)
          cir.break loc(#loc261)
        } loc(#loc258)
        cir.yield loc(#loc225)
      } loc(#loc225)
    } loc(#loc533)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc264)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc546)
            %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc547)
            %5 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc272)
            %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc273)
            %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc273)
            %8 = cir.call @wcslen(%7) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc272)
            cir.store %8, %3 : !u64i, !cir.ptr<!u64i> loc(#loc546)
            %9 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc274)
            %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc275)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc276)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc276)
            %13 = cir.binop(add, %10, %12) : !u64i loc(#loc548)
            %14 = cir.const #cir.int<4> : !u64i loc(#loc549)
            %15 = cir.call @calloc(%13, %14) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc274)
            cir.store %15, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc547)
            cir.scope {
              %25 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc281)
              %26 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc282)
              %27 = cir.cmp(eq, %25, %26) : !cir.ptr<!void>, !cir.bool loc(#loc551)
              cir.if %27 {
                %28 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc284)
                %29 = cir.const #cir.int<1> : !s32i loc(#loc285)
                %30 = cir.unary(minus, %29) : !s32i, !s32i loc(#loc286)
                cir.call @exit(%30) : (!s32i) -> () extra(#fn_attr) loc(#loc284)
              } loc(#loc552)
            } loc(#loc550)
            %16 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc287)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc287)
            %18 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc288)
            %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc288)
            %20 = cir.call @wcscpy(%17, %19) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc289)
            %21 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc290)
            %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc290)
            cir.call @printWLine(%22) : (!cir.ptr<!s32i>) -> () loc(#loc291)
            %23 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc292)
            %24 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc293)
            cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc292)
          } loc(#loc545)
          cir.break loc(#loc294)
        } loc(#loc265)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc296)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc296)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc297)
          cir.break loc(#loc298)
        } loc(#loc295)
        cir.yield loc(#loc262)
      } loc(#loc262)
    } loc(#loc544)
    cir.return loc(#loc220)
  } loc(#loc530)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc553)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc555)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc305)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc556)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc309)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc311)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc311)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc312)
          cir.break loc(#loc313)
        } loc(#loc310)
        cir.case(default, []) {
          cir.scope {
            %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc559)
            %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc319)
            %5 = cir.const #cir.int<50> : !s32i loc(#loc320)
            %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc320)
            %7 = cir.const #cir.int<1> : !u64i loc(#loc560)
            %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc561)
            %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc319)
            %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc562)
            cir.store %10, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc559)
            cir.scope {
              %27 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc325)
              %28 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc326)
              %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc326)
              %30 = cir.cmp(eq, %27, %29) : !cir.ptr<!s8i>, !cir.bool loc(#loc564)
              cir.if %30 {
                %31 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc328)
                %32 = cir.const #cir.int<1> : !s32i loc(#loc329)
                %33 = cir.unary(minus, %32) : !s32i, !s32i loc(#loc330)
                cir.call @exit(%33) : (!s32i) -> () extra(#fn_attr) loc(#loc328)
              } loc(#loc565)
            } loc(#loc563)
            %11 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc331)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc331)
            %13 = cir.const #cir.int<65> : !s32i loc(#loc332)
            %14 = cir.const #cir.int<50> : !s32i loc(#loc333)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc334)
            %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc333)
            %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc333)
            cir.libc.memset %17 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc566)
            %18 = cir.const #cir.int<0> : !s32i loc(#loc337)
            %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc337)
            %20 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc338)
            %21 = cir.const #cir.int<50> : !s32i loc(#loc339)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc340)
            %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc339)
            %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc341)
            cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc567)
            %25 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc342)
            %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc342)
            cir.store %26, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc568)
          } loc(#loc558)
          cir.break loc(#loc344)
        } loc(#loc314)
        cir.yield loc(#loc307)
      } loc(#loc307)
    } loc(#loc557)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc347)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc571)
            %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc572)
            %5 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc355)
            %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc356)
            %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc356)
            %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc355)
            cir.store %8, %3 : !u64i, !cir.ptr<!u64i> loc(#loc571)
            %9 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc357)
            %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc358)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc359)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc359)
            %13 = cir.binop(add, %10, %12) : !u64i loc(#loc573)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc360)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc360)
            %16 = cir.call @calloc(%13, %15) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc357)
            cir.store %16, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc572)
            cir.scope {
              %27 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc363)
              %28 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc364)
              %29 = cir.cmp(eq, %27, %28) : !cir.ptr<!void>, !cir.bool loc(#loc575)
              cir.if %29 {
                %30 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc366)
                %31 = cir.const #cir.int<1> : !s32i loc(#loc367)
                %32 = cir.unary(minus, %31) : !s32i, !s32i loc(#loc368)
                cir.call @exit(%32) : (!s32i) -> () extra(#fn_attr) loc(#loc366)
              } loc(#loc576)
            } loc(#loc574)
            %17 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc369)
            %18 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc370)
            %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc370)
            %20 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc371)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc371)
            %22 = cir.call @strcpy(%19, %21) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc369)
            %23 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc372)
            %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc372)
            cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc373)
            %25 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc374)
            %26 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc375)
            cir.call @free(%26) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc374)
          } loc(#loc570)
          cir.break loc(#loc376)
        } loc(#loc348)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc378)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc378)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc379)
          cir.break loc(#loc380)
        } loc(#loc377)
        cir.yield loc(#loc345)
      } loc(#loc345)
    } loc(#loc569)
    cir.return loc(#loc302)
  } loc(#loc554)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc578)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc385)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc579)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc389)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc582)
            %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc395)
            %5 = cir.const #cir.int<50> : !s32i loc(#loc396)
            %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc396)
            %7 = cir.const #cir.int<1> : !u64i loc(#loc583)
            %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc584)
            %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc395)
            %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc585)
            cir.store %10, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc582)
            cir.scope {
              %27 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc401)
              %28 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc402)
              %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc402)
              %30 = cir.cmp(eq, %27, %29) : !cir.ptr<!s8i>, !cir.bool loc(#loc587)
              cir.if %30 {
                %31 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc404)
                %32 = cir.const #cir.int<1> : !s32i loc(#loc405)
                %33 = cir.unary(minus, %32) : !s32i, !s32i loc(#loc406)
                cir.call @exit(%33) : (!s32i) -> () extra(#fn_attr) loc(#loc404)
              } loc(#loc588)
            } loc(#loc586)
            %11 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc407)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc407)
            %13 = cir.const #cir.int<65> : !s32i loc(#loc408)
            %14 = cir.const #cir.int<50> : !s32i loc(#loc409)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc410)
            %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc409)
            %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc409)
            cir.libc.memset %17 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc589)
            %18 = cir.const #cir.int<0> : !s32i loc(#loc413)
            %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc413)
            %20 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc414)
            %21 = cir.const #cir.int<50> : !s32i loc(#loc415)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc416)
            %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc415)
            %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc417)
            cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc590)
            %25 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc418)
            %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc418)
            cir.store %26, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc591)
          } loc(#loc581)
          cir.break loc(#loc420)
        } loc(#loc390)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc422)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc422)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc423)
          cir.break loc(#loc424)
        } loc(#loc421)
        cir.yield loc(#loc387)
      } loc(#loc387)
    } loc(#loc580)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc427)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc594)
            %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc595)
            %5 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc435)
            %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc436)
            %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc436)
            %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc435)
            cir.store %8, %3 : !u64i, !cir.ptr<!u64i> loc(#loc594)
            %9 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc437)
            %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc438)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc439)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc439)
            %13 = cir.binop(add, %10, %12) : !u64i loc(#loc596)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc440)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc440)
            %16 = cir.call @calloc(%13, %15) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc437)
            cir.store %16, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc595)
            cir.scope {
              %27 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc443)
              %28 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc444)
              %29 = cir.cmp(eq, %27, %28) : !cir.ptr<!void>, !cir.bool loc(#loc598)
              cir.if %29 {
                %30 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc446)
                %31 = cir.const #cir.int<1> : !s32i loc(#loc447)
                %32 = cir.unary(minus, %31) : !s32i, !s32i loc(#loc448)
                cir.call @exit(%32) : (!s32i) -> () extra(#fn_attr) loc(#loc446)
              } loc(#loc599)
            } loc(#loc597)
            %17 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc449)
            %18 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc450)
            %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc450)
            %20 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc451)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc451)
            %22 = cir.call @strcpy(%19, %21) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc449)
            %23 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc452)
            %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc452)
            cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc453)
            %25 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc454)
            %26 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc455)
            cir.call @free(%26) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc454)
          } loc(#loc593)
          cir.break loc(#loc456)
        } loc(#loc428)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc458)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc458)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc459)
          cir.break loc(#loc460)
        } loc(#loc457)
        cir.yield loc(#loc425)
      } loc(#loc425)
    } loc(#loc592)
    cir.return loc(#loc382)
  } loc(#loc577)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/wchar.h":296:1)
#loc6 = loc("/usr/include/wchar.h":296:65)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":42:19)
#loc10 = loc("/usr/include/string.h":407:1)
#loc11 = loc("/usr/include/string.h":408:33)
#loc12 = loc("/usr/include/stdlib.h":675:1)
#loc13 = loc("/usr/include/stdlib.h":676:14)
#loc14 = loc("/usr/include/wchar.h":98:1)
#loc15 = loc("/usr/include/wchar.h":100:14)
#loc16 = loc("/usr/include/stdlib.h":687:1)
#loc17 = loc("/usr/include/stdlib.h":687:32)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":24:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":63:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":26:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":26:12)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":27:12)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":27:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":28:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":44:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":28:12)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":30:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":31:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":38:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":32:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":32:71)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":32:46)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":32:53)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":32:56)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":32:70)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":33:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":33:46)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":33:13)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":33:30)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":33:36)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":33:37)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":33:43)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":33:42)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":34:17)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":34:32)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":34:38)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":34:41)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":34:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":35:31)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":35:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":35:23)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":35:26)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":35:27)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":37:24)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":37:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":39:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":40:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":42:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":43:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":45:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":62:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":45:12)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":47:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":48:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":56:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":50:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":50:45)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":51:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":51:64)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":50:26)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":50:41)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":51:31)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":51:38)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":51:46)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":51:49)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":51:63)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":52:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":52:37)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":52:13)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":52:21)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":52:27)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":52:28)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":52:34)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":52:33)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":53:22)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":53:28)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":53:15)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":54:27)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":54:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":55:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":55:14)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":57:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":58:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":60:19)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":60:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":61:9)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":237:1)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":243:1)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":239:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":239:14)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":240:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":240:14)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":241:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":241:14)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":242:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":242:14)
#loc107 = loc("/usr/include/stdlib.h":575:1)
#loc108 = loc("/usr/include/stdlib.h":575:41)
#loc109 = loc("/usr/include/time.h":76:1)
#loc110 = loc("/usr/include/time.h":76:38)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":259:15)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":261:15)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":264:15)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":266:15)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":254:1)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":269:1)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":255:1)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":257:27)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":257:22)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":257:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":259:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":260:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":260:55)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":261:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":264:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":265:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":265:54)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":266:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":268:12)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":268:5)
#loc135 = loc("/usr/include/wchar.h":247:1)
#loc136 = loc("/usr/include/wchar.h":247:51)
#loc137 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc138 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":70:1)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":109:1)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":72:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":72:12)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":73:12)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":73:5)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":74:5)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":90:5)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":74:12)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":76:5)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":77:5)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":84:5)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":78:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":78:71)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":78:46)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":78:53)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":78:56)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":78:70)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":79:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":79:46)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":79:13)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":79:30)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":79:36)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":79:37)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":79:43)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":79:42)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":80:17)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":80:32)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":80:38)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":80:41)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":80:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":81:31)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":81:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":81:23)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":81:26)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":81:27)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":83:24)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":83:9)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":85:5)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":86:5)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":88:19)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":88:9)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":89:9)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":91:5)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":108:5)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":91:12)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":93:5)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":95:19)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":95:9)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":96:9)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":97:5)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":98:5)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":106:5)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":100:9)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":100:48)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":101:9)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":101:64)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":100:26)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":100:44)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":101:31)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":101:38)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":101:46)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":101:49)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":101:63)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":102:9)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":102:37)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":102:13)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":102:21)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":102:27)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":102:28)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":102:34)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":102:33)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":103:22)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":103:28)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":103:15)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":104:31)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":104:9)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":105:9)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":105:14)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":107:5)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":112:1)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":151:1)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":114:5)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":114:12)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":115:12)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":115:5)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":116:5)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":132:5)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":116:12)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":118:5)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":119:5)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":126:5)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":120:9)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":120:71)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":120:46)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":120:53)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":120:56)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":120:70)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":121:9)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":121:46)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":121:13)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":121:30)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":121:36)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":121:37)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":121:43)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":121:42)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":122:17)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":122:32)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":122:38)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":122:41)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":122:9)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":123:31)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":123:9)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":123:23)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":123:26)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":123:27)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":125:24)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":125:9)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":127:5)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":128:5)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":130:19)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":130:9)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":131:9)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":133:5)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":150:5)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":133:12)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":135:5)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":136:5)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":144:5)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":138:9)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":138:48)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":139:9)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":139:64)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":138:26)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":138:44)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":139:31)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":139:38)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":139:46)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":139:49)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":139:63)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":140:9)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":140:37)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":140:13)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":140:21)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":140:27)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":140:28)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":140:34)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":140:33)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":141:22)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":141:28)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":141:15)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":142:31)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":142:9)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":143:9)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":143:14)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":145:5)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":146:5)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":148:19)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":148:9)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":149:9)
#loc299 = loc("/usr/include/string.h":141:1)
#loc300 = loc("/usr/include/string.h":142:14)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":154:1)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":193:1)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":156:5)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":156:12)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":157:12)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":157:5)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":158:5)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":174:5)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":158:12)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":160:5)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":162:19)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":162:9)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":163:9)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":164:5)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":165:5)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":172:5)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":166:9)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":166:63)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":166:41)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":166:48)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":166:51)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":166:62)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":167:9)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":167:47)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":167:13)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":167:31)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":167:37)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":167:38)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":167:44)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":167:43)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":168:16)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":168:32)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":168:37)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":168:40)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":168:9)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":168:41)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":169:32)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":169:9)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":169:24)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":169:27)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":169:28)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":171:24)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":171:9)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":173:5)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":175:5)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":192:5)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":175:12)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":177:5)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":178:5)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":186:5)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":180:9)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":180:45)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":181:9)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":181:50)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":180:26)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":180:41)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":181:31)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":181:38)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":181:46)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":181:49)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":182:9)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":182:37)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":182:13)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":182:21)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":182:27)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":182:28)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":182:34)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":182:33)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":183:15)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":183:22)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":183:28)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":184:27)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":184:9)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":185:9)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":185:14)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":187:5)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":188:5)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":190:19)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":190:9)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":191:9)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":196:1)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":235:1)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":198:5)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":198:12)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":199:12)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":199:5)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":200:5)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":216:5)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":200:12)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":202:5)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":203:5)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":210:5)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":204:9)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":204:63)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":204:41)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":204:48)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":204:51)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":204:62)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":205:9)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":205:47)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":205:13)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":205:31)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":205:37)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":205:38)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":205:44)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":205:43)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":206:16)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":206:32)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":206:37)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":206:40)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":206:9)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":206:41)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":207:32)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":207:9)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":207:24)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":207:27)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":207:28)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":209:24)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":209:9)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":211:5)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":212:5)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":214:19)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":214:9)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":215:9)
#loc425 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":217:5)
#loc426 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":234:5)
#loc427 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":217:12)
#loc428 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":219:5)
#loc429 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":220:5)
#loc430 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":228:5)
#loc431 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":222:9)
#loc432 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":222:45)
#loc433 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":223:9)
#loc434 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":223:50)
#loc435 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":222:26)
#loc436 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":222:41)
#loc437 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":223:31)
#loc438 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":223:38)
#loc439 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":223:46)
#loc440 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":223:49)
#loc441 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":224:9)
#loc442 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":224:37)
#loc443 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":224:13)
#loc444 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":224:21)
#loc445 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":224:27)
#loc446 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":224:28)
#loc447 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":224:34)
#loc448 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":224:33)
#loc449 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":225:15)
#loc450 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":225:22)
#loc451 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":225:28)
#loc452 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":226:27)
#loc453 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":226:9)
#loc454 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":227:9)
#loc455 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":227:14)
#loc456 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":229:5)
#loc457 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":230:5)
#loc458 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":232:19)
#loc459 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":232:9)
#loc460 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c":233:9)
#loc461 = loc(fused[#loc1, #loc2])
#loc462 = loc(fused[#loc3, #loc4])
#loc463 = loc(fused[#loc5, #loc6])
#loc464 = loc(fused[#loc7, #loc8])
#loc465 = loc(fused[#loc10, #loc11])
#loc466 = loc(fused[#loc12, #loc13])
#loc467 = loc(fused[#loc14, #loc15])
#loc468 = loc(fused[#loc16, #loc17])
#loc469 = loc(fused[#loc18, #loc19])
#loc470 = loc(fused[#loc20, #loc21])
#loc471 = loc(fused[#loc23, #loc22])
#loc472 = loc(fused[#loc24, #loc25])
#loc473 = loc(fused[#loc28, #loc29])
#loc474 = loc(fused[#loc30, #loc31])
#loc475 = loc(fused[#loc34, #loc35])
#loc476 = loc(fused[#loc33, #loc35])
#loc477 = loc(fused[#loc32, #loc31])
#loc478 = loc(fused[#loc36, #loc37])
#loc479 = loc(fused[#loc38, #loc39])
#loc480 = loc(fused[#loc40, #loc37])
#loc481 = loc(fused[#loc50, #loc49])
#loc482 = loc(fused[#loc55, #loc54])
#loc483 = loc(fused[#loc60, #loc61])
#loc484 = loc(fused[#loc64, #loc65])
#loc485 = loc(fused[#loc66, #loc67])
#loc486 = loc(fused[#loc68, #loc69])
#loc487 = loc(fused[#loc73, #loc74])
#loc488 = loc(fused[#loc75, #loc76])
#loc489 = loc(fused[#loc77, #loc78])
#loc490 = loc(fused[#loc79, #loc80])
#loc491 = loc(fused[#loc81, #loc78])
#loc492 = loc(fused[#loc97, #loc98])
#loc493 = loc(fused[#loc99, #loc100])
#loc494 = loc(fused[#loc101, #loc102])
#loc495 = loc(fused[#loc103, #loc104])
#loc496 = loc(fused[#loc105, #loc106])
#loc497 = loc(fused[#loc107, #loc108])
#loc498 = loc(fused[#loc109, #loc110])
#loc499 = loc(fused[#loc115, #loc116])
#loc502 = loc(fused[#loc126, #loc127])
#loc503 = loc(fused[#loc130, #loc131])
#loc504 = loc(fused[#loc134, #loc133])
#loc505 = loc(fused[#loc135, #loc136])
#loc506 = loc(fused[#loc137, #loc138])
#loc507 = loc(fused[#loc139, #loc140])
#loc508 = loc(fused[#loc141, #loc142])
#loc509 = loc(fused[#loc144, #loc143])
#loc510 = loc(fused[#loc145, #loc146])
#loc511 = loc(fused[#loc149, #loc150])
#loc512 = loc(fused[#loc151, #loc152])
#loc513 = loc(fused[#loc155, #loc156])
#loc514 = loc(fused[#loc154, #loc156])
#loc515 = loc(fused[#loc153, #loc152])
#loc516 = loc(fused[#loc157, #loc158])
#loc517 = loc(fused[#loc159, #loc160])
#loc518 = loc(fused[#loc161, #loc158])
#loc519 = loc(fused[#loc171, #loc170])
#loc520 = loc(fused[#loc176, #loc175])
#loc521 = loc(fused[#loc182, #loc183])
#loc522 = loc(fused[#loc190, #loc191])
#loc523 = loc(fused[#loc192, #loc193])
#loc524 = loc(fused[#loc194, #loc195])
#loc525 = loc(fused[#loc199, #loc200])
#loc526 = loc(fused[#loc201, #loc202])
#loc527 = loc(fused[#loc203, #loc204])
#loc528 = loc(fused[#loc205, #loc206])
#loc529 = loc(fused[#loc207, #loc204])
#loc530 = loc(fused[#loc219, #loc220])
#loc531 = loc(fused[#loc221, #loc222])
#loc532 = loc(fused[#loc224, #loc223])
#loc533 = loc(fused[#loc225, #loc226])
#loc534 = loc(fused[#loc229, #loc230])
#loc535 = loc(fused[#loc231, #loc232])
#loc536 = loc(fused[#loc235, #loc236])
#loc537 = loc(fused[#loc234, #loc236])
#loc538 = loc(fused[#loc233, #loc232])
#loc539 = loc(fused[#loc237, #loc238])
#loc540 = loc(fused[#loc239, #loc240])
#loc541 = loc(fused[#loc241, #loc238])
#loc542 = loc(fused[#loc251, #loc250])
#loc543 = loc(fused[#loc256, #loc255])
#loc544 = loc(fused[#loc262, #loc263])
#loc545 = loc(fused[#loc266, #loc267])
#loc546 = loc(fused[#loc268, #loc269])
#loc547 = loc(fused[#loc270, #loc271])
#loc548 = loc(fused[#loc275, #loc276])
#loc549 = loc(fused[#loc277, #loc278])
#loc550 = loc(fused[#loc279, #loc280])
#loc551 = loc(fused[#loc281, #loc282])
#loc552 = loc(fused[#loc283, #loc280])
#loc553 = loc(fused[#loc299, #loc300])
#loc554 = loc(fused[#loc301, #loc302])
#loc555 = loc(fused[#loc303, #loc304])
#loc556 = loc(fused[#loc306, #loc305])
#loc557 = loc(fused[#loc307, #loc308])
#loc558 = loc(fused[#loc315, #loc316])
#loc559 = loc(fused[#loc317, #loc318])
#loc560 = loc(fused[#loc321, #loc322])
#loc561 = loc(fused[#loc320, #loc322])
#loc562 = loc(fused[#loc319, #loc318])
#loc563 = loc(fused[#loc323, #loc324])
#loc564 = loc(fused[#loc325, #loc326])
#loc565 = loc(fused[#loc327, #loc324])
#loc566 = loc(fused[#loc335, #loc336])
#loc567 = loc(fused[#loc338, #loc337])
#loc568 = loc(fused[#loc343, #loc342])
#loc569 = loc(fused[#loc345, #loc346])
#loc570 = loc(fused[#loc349, #loc350])
#loc571 = loc(fused[#loc351, #loc352])
#loc572 = loc(fused[#loc353, #loc354])
#loc573 = loc(fused[#loc358, #loc359])
#loc574 = loc(fused[#loc361, #loc362])
#loc575 = loc(fused[#loc363, #loc364])
#loc576 = loc(fused[#loc365, #loc362])
#loc577 = loc(fused[#loc381, #loc382])
#loc578 = loc(fused[#loc383, #loc384])
#loc579 = loc(fused[#loc386, #loc385])
#loc580 = loc(fused[#loc387, #loc388])
#loc581 = loc(fused[#loc391, #loc392])
#loc582 = loc(fused[#loc393, #loc394])
#loc583 = loc(fused[#loc397, #loc398])
#loc584 = loc(fused[#loc396, #loc398])
#loc585 = loc(fused[#loc395, #loc394])
#loc586 = loc(fused[#loc399, #loc400])
#loc587 = loc(fused[#loc401, #loc402])
#loc588 = loc(fused[#loc403, #loc400])
#loc589 = loc(fused[#loc411, #loc412])
#loc590 = loc(fused[#loc414, #loc413])
#loc591 = loc(fused[#loc419, #loc418])
#loc592 = loc(fused[#loc425, #loc426])
#loc593 = loc(fused[#loc429, #loc430])
#loc594 = loc(fused[#loc431, #loc432])
#loc595 = loc(fused[#loc433, #loc434])
#loc596 = loc(fused[#loc438, #loc439])
#loc597 = loc(fused[#loc441, #loc442])
#loc598 = loc(fused[#loc443, #loc444])
#loc599 = loc(fused[#loc445, #loc442])
