!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc78 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":173:10)
#loc79 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":173:14)
#loc80 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":173:20)
#loc81 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":173:32)
#loc238 = loc(fused[#loc78, #loc79])
#loc239 = loc(fused[#loc80, #loc81])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_multiply_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc206)
  cir.func private @printIntLine(!s32i) loc(#loc207)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc208)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_multiply_12_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc210)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc211)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc212)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc16)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc213)
    cir.br ^bb1 loc(#loc214)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc215)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc215)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc20)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc216)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc25)
    cir.store %8, %2 : !s32i, !cir.ptr<!s32i> loc(#loc217)
    cir.br ^bb4 loc(#loc23)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<2> : !s32i loc(#loc27)
    cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc218)
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc19)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc219)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc220)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc220)
    %12 = cir.call %11() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc31)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc31)
    cir.brcond %13 ^bb7, ^bb12 loc(#loc221)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc222)
  ^bb8:  // pred: ^bb7
    %14 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc38)
    %15 = cir.const #cir.int<0> : !s32i loc(#loc39)
    %16 = cir.cmp(gt, %14, %15) : !s32i, !cir.bool loc(#loc223)
    cir.brcond %16 ^bb9, ^bb10 loc(#loc224)
  ^bb9:  // pred: ^bb8
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc41)
    %18 = cir.const #cir.int<2> : !s32i loc(#loc11)
    %19 = cir.binop(mul, %17, %18) nsw : !s32i loc(#loc41)
    cir.store %19, %0 : !s32i, !cir.ptr<!s32i> loc(#loc210)
    %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc42)
    cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc43)
    cir.br ^bb10 loc(#loc37)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc37)
  ^bb11:  // pred: ^bb10
    cir.br ^bb22 loc(#loc34)
  ^bb12:  // pred: ^bb6
    cir.br ^bb13 loc(#loc225)
  ^bb13:  // pred: ^bb12
    %21 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc46)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc47)
    %23 = cir.cmp(gt, %21, %22) : !s32i, !cir.bool loc(#loc226)
    cir.brcond %23 ^bb14, ^bb20 loc(#loc227)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc228)
  ^bb15:  // pred: ^bb14
    %24 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    %25 = cir.const #cir.int<2147483647> : !s32i loc(#loc52)
    %26 = cir.const #cir.int<2> : !s32i loc(#loc53)
    %27 = cir.binop(div, %25, %26) : !s32i loc(#loc229)
    %28 = cir.cmp(lt, %24, %27) : !s32i, !cir.bool loc(#loc230)
    cir.brcond %28 ^bb16, ^bb17 loc(#loc231)
  ^bb16:  // pred: ^bb15
    %29 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc58)
    %30 = cir.const #cir.int<2> : !s32i loc(#loc13)
    %31 = cir.binop(mul, %29, %30) nsw : !s32i loc(#loc58)
    cir.store %31, %1 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    %32 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc59)
    cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc60)
    cir.br ^bb18 loc(#loc56)
  ^bb17:  // pred: ^bb15
    %33 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc7)
    %34 = cir.cast(array_to_ptrdecay, %33 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%34) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    cir.br ^bb18 loc(#loc50)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc50)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc45)
  ^bb20:  // 2 preds: ^bb13, ^bb19
    cir.br ^bb21 loc(#loc45)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc30)
  ^bb22:  // 2 preds: ^bb11, ^bb21
    cir.br ^bb23 loc(#loc30)
  ^bb23:  // pred: ^bb22
    cir.return loc(#loc9)
  } loc(#loc209)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_multiply_12_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc233)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc64)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc234)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc66)
    cir.return loc(#loc63)
  } loc(#loc232)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc235)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc236)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc72)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc75)
  cir.func @main(%arg0: !s32i loc(fused[#loc78, #loc79]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc80, #loc81])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc238)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc239)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc77)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc82)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc82)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc83)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc84)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc84)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc85)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc72)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_max_multiply_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc240)
    cir.call @CWE190_Integer_Overflow__int_max_multiply_12_good() : () -> () loc(#loc87)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc73)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc74)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_max_multiply_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc241)
    cir.call @CWE190_Integer_Overflow__int_max_multiply_12_bad() : () -> () loc(#loc91)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc75)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc94)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc242)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc242)
    cir.return %17 : !s32i loc(#loc242)
  } loc(#loc237)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc244)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc245)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc246)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc104)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc247)
    cir.br ^bb1 loc(#loc248)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc249)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc249)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc108)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc108)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc250)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc113)
    cir.store %8, %2 : !s32i, !cir.ptr<!s32i> loc(#loc251)
    cir.br ^bb4 loc(#loc111)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc115)
    cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc252)
    cir.br ^bb4 loc(#loc107)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc107)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc253)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc254)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc254)
    %12 = cir.call %11() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc119)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc119)
    cir.brcond %13 ^bb7, ^bb17 loc(#loc255)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc256)
  ^bb8:  // pred: ^bb7
    %14 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc126)
    %15 = cir.const #cir.int<0> : !s32i loc(#loc127)
    %16 = cir.cmp(gt, %14, %15) : !s32i, !cir.bool loc(#loc257)
    cir.brcond %16 ^bb9, ^bb15 loc(#loc258)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc259)
  ^bb10:  // pred: ^bb9
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc131)
    %18 = cir.const #cir.int<2147483647> : !s32i loc(#loc132)
    %19 = cir.const #cir.int<2> : !s32i loc(#loc133)
    %20 = cir.binop(div, %18, %19) : !s32i loc(#loc260)
    %21 = cir.cmp(lt, %17, %20) : !s32i, !cir.bool loc(#loc261)
    cir.brcond %21 ^bb11, ^bb12 loc(#loc262)
  ^bb11:  // pred: ^bb10
    %22 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc138)
    %23 = cir.const #cir.int<2> : !s32i loc(#loc99)
    %24 = cir.binop(mul, %22, %23) nsw : !s32i loc(#loc138)
    cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc244)
    %25 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc139)
    cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc140)
    cir.br ^bb13 loc(#loc136)
  ^bb12:  // pred: ^bb10
    %26 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc141)
    %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc141)
    cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc142)
    cir.br ^bb13 loc(#loc130)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc130)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc125)
  ^bb15:  // 2 preds: ^bb8, ^bb14
    cir.br ^bb16 loc(#loc125)
  ^bb16:  // pred: ^bb15
    cir.br ^bb27 loc(#loc122)
  ^bb17:  // pred: ^bb6
    cir.br ^bb18 loc(#loc263)
  ^bb18:  // pred: ^bb17
    %28 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc145)
    %29 = cir.const #cir.int<0> : !s32i loc(#loc146)
    %30 = cir.cmp(gt, %28, %29) : !s32i, !cir.bool loc(#loc264)
    cir.brcond %30 ^bb19, ^bb25 loc(#loc265)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc266)
  ^bb20:  // pred: ^bb19
    %31 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc150)
    %32 = cir.const #cir.int<2147483647> : !s32i loc(#loc151)
    %33 = cir.const #cir.int<2> : !s32i loc(#loc152)
    %34 = cir.binop(div, %32, %33) : !s32i loc(#loc267)
    %35 = cir.cmp(lt, %31, %34) : !s32i, !cir.bool loc(#loc268)
    cir.brcond %35 ^bb21, ^bb22 loc(#loc269)
  ^bb21:  // pred: ^bb20
    %36 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc157)
    %37 = cir.const #cir.int<2> : !s32i loc(#loc101)
    %38 = cir.binop(mul, %36, %37) nsw : !s32i loc(#loc157)
    cir.store %38, %1 : !s32i, !cir.ptr<!s32i> loc(#loc245)
    %39 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc158)
    cir.call @printIntLine(%39) : (!s32i) -> () loc(#loc159)
    cir.br ^bb23 loc(#loc155)
  ^bb22:  // pred: ^bb20
    %40 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc160)
    %41 = cir.cast(array_to_ptrdecay, %40 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc160)
    cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc161)
    cir.br ^bb23 loc(#loc149)
  ^bb23:  // 2 preds: ^bb21, ^bb22
    cir.br ^bb24 loc(#loc149)
  ^bb24:  // pred: ^bb23
    cir.br ^bb25 loc(#loc144)
  ^bb25:  // 2 preds: ^bb18, ^bb24
    cir.br ^bb26 loc(#loc144)
  ^bb26:  // pred: ^bb25
    cir.br ^bb27 loc(#loc118)
  ^bb27:  // 2 preds: ^bb16, ^bb26
    cir.br ^bb28 loc(#loc118)
  ^bb28:  // pred: ^bb27
    cir.return loc(#loc97)
  } loc(#loc243)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc271)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc272)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc273)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc170)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc274)
    cir.br ^bb1 loc(#loc275)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc276)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc276)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc174)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc174)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc277)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc179)
    cir.store %8, %2 : !s32i, !cir.ptr<!s32i> loc(#loc278)
    cir.br ^bb4 loc(#loc177)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<2> : !s32i loc(#loc181)
    cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc279)
    cir.br ^bb4 loc(#loc173)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc173)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc280)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc281)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc281)
    %12 = cir.call %11() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc185)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc185)
    cir.brcond %13 ^bb7, ^bb12 loc(#loc282)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc283)
  ^bb8:  // pred: ^bb7
    %14 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc192)
    %15 = cir.const #cir.int<0> : !s32i loc(#loc193)
    %16 = cir.cmp(gt, %14, %15) : !s32i, !cir.bool loc(#loc284)
    cir.brcond %16 ^bb9, ^bb10 loc(#loc285)
  ^bb9:  // pred: ^bb8
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc195)
    %18 = cir.const #cir.int<2> : !s32i loc(#loc165)
    %19 = cir.binop(mul, %17, %18) nsw : !s32i loc(#loc195)
    cir.store %19, %0 : !s32i, !cir.ptr<!s32i> loc(#loc271)
    %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc196)
    cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc197)
    cir.br ^bb10 loc(#loc191)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc191)
  ^bb11:  // pred: ^bb10
    cir.br ^bb17 loc(#loc188)
  ^bb12:  // pred: ^bb6
    cir.br ^bb13 loc(#loc286)
  ^bb13:  // pred: ^bb12
    %21 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc200)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc201)
    %23 = cir.cmp(gt, %21, %22) : !s32i, !cir.bool loc(#loc287)
    cir.brcond %23 ^bb14, ^bb15 loc(#loc288)
  ^bb14:  // pred: ^bb13
    %24 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc203)
    %25 = cir.const #cir.int<2> : !s32i loc(#loc167)
    %26 = cir.binop(mul, %24, %25) nsw : !s32i loc(#loc203)
    cir.store %26, %1 : !s32i, !cir.ptr<!s32i> loc(#loc272)
    %27 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc204)
    cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc205)
    cir.br ^bb15 loc(#loc199)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc199)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc184)
  ^bb17:  // 2 preds: ^bb11, ^bb16
    cir.br ^bb18 loc(#loc184)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc163)
  } loc(#loc270)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_multiply_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":58:27)
#loc8 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":22:1)
#loc9 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":62:1)
#loc10 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":42:13)
#loc11 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":42:33)
#loc12 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":53:17)
#loc13 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":53:37)
#loc14 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":24:5)
#loc15 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":24:9)
#loc16 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":26:12)
#loc17 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":26:5)
#loc18 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":27:5)
#loc19 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":36:5)
#loc20 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":27:8)
#loc21 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":27:33)
#loc22 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":28:5)
#loc23 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":31:5)
#loc24 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":33:5)
#loc25 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":30:16)
#loc26 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":30:9)
#loc27 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":35:16)
#loc28 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":35:9)
#loc29 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":37:5)
#loc30 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":61:5)
#loc31 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":37:8)
#loc32 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":37:33)
#loc33 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":38:5)
#loc34 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":45:5)
#loc35 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":47:5)
#loc36 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":39:9)
#loc37 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":44:9)
#loc38 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":39:12)
#loc39 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":39:19)
#loc40 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":40:9)
#loc41 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":42:26)
#loc42 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":43:26)
#loc43 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":43:13)
#loc44 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":48:9)
#loc45 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":60:9)
#loc46 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":48:12)
#loc47 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":48:19)
#loc48 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":49:9)
#loc49 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":51:13)
#loc50 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":59:13)
#loc51 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":51:17)
#loc52 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":51:25)
#loc53 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":51:33)
#loc54 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":51:34)
#loc55 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":52:13)
#loc56 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":55:13)
#loc57 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":57:13)
#loc58 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":53:30)
#loc59 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":54:30)
#loc60 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":54:17)
#loc61 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":58:17)
#loc62 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":158:1)
#loc63 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":162:1)
#loc64 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":160:5)
#loc65 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":160:13)
#loc66 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":161:5)
#loc67 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":161:13)
#loc68 = loc("/usr/include/stdlib.h":575:1)
#loc69 = loc("/usr/include/stdlib.h":575:41)
#loc70 = loc("/usr/include/time.h":76:1)
#loc71 = loc("/usr/include/time.h":76:38)
#loc72 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":178:15)
#loc73 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":180:15)
#loc74 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":183:15)
#loc75 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":185:15)
#loc76 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":173:1)
#loc77 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":188:1)
#loc82 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":174:1)
#loc83 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":176:27)
#loc84 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":176:22)
#loc85 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":176:5)
#loc86 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":178:5)
#loc87 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":179:5)
#loc88 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":179:55)
#loc89 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":180:5)
#loc90 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":183:5)
#loc91 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":184:5)
#loc92 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":184:54)
#loc93 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":185:5)
#loc94 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":187:12)
#loc95 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":187:5)
#loc96 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":71:1)
#loc97 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":118:1)
#loc98 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":93:17)
#loc99 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":93:37)
#loc100 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":109:17)
#loc101 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":109:37)
#loc102 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":73:5)
#loc103 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":73:9)
#loc104 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":75:12)
#loc105 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":75:5)
#loc106 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":76:5)
#loc107 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":85:5)
#loc108 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":76:8)
#loc109 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":76:33)
#loc110 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":77:5)
#loc111 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":80:5)
#loc112 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":82:5)
#loc113 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":79:16)
#loc114 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":79:9)
#loc115 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":84:16)
#loc116 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":84:9)
#loc117 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":86:5)
#loc118 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":117:5)
#loc119 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":86:8)
#loc120 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":86:33)
#loc121 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":87:5)
#loc122 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":101:5)
#loc123 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":103:5)
#loc124 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":88:9)
#loc125 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":100:9)
#loc126 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":88:12)
#loc127 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":88:19)
#loc128 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":89:9)
#loc129 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":91:13)
#loc130 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":99:13)
#loc131 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":91:17)
#loc132 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":91:25)
#loc133 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":91:33)
#loc134 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":91:34)
#loc135 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":92:13)
#loc136 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":95:13)
#loc137 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":97:13)
#loc138 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":93:30)
#loc139 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":94:30)
#loc140 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":94:17)
#loc141 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":98:27)
#loc142 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":98:17)
#loc143 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":104:9)
#loc144 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":116:9)
#loc145 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":104:12)
#loc146 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":104:19)
#loc147 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":105:9)
#loc148 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":107:13)
#loc149 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":115:13)
#loc150 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":107:17)
#loc151 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":107:25)
#loc152 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":107:33)
#loc153 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":107:34)
#loc154 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":108:13)
#loc155 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":111:13)
#loc156 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":113:13)
#loc157 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":109:30)
#loc158 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":110:30)
#loc159 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":110:17)
#loc160 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":114:27)
#loc161 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":114:17)
#loc162 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":123:1)
#loc163 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":156:1)
#loc164 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":143:13)
#loc165 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":143:33)
#loc166 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":152:13)
#loc167 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":152:33)
#loc168 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":125:5)
#loc169 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":125:9)
#loc170 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":127:12)
#loc171 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":127:5)
#loc172 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":128:5)
#loc173 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":137:5)
#loc174 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":128:8)
#loc175 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":128:33)
#loc176 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":129:5)
#loc177 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":132:5)
#loc178 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":134:5)
#loc179 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":131:16)
#loc180 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":131:9)
#loc181 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":136:16)
#loc182 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":136:9)
#loc183 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":138:5)
#loc184 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":155:5)
#loc185 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":138:8)
#loc186 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":138:33)
#loc187 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":139:5)
#loc188 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":146:5)
#loc189 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":148:5)
#loc190 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":140:9)
#loc191 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":145:9)
#loc192 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":140:12)
#loc193 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":140:19)
#loc194 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":141:9)
#loc195 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":143:26)
#loc196 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":144:26)
#loc197 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":144:13)
#loc198 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":149:9)
#loc199 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":154:9)
#loc200 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":149:12)
#loc201 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":149:19)
#loc202 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":150:9)
#loc203 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":152:26)
#loc204 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":153:26)
#loc205 = loc("CWE190_Integer_Overflow__int_max_multiply_12.c":153:13)
#loc206 = loc(fused[#loc1, #loc2])
#loc207 = loc(fused[#loc3, #loc4])
#loc208 = loc(fused[#loc5, #loc6])
#loc209 = loc(fused[#loc8, #loc9])
#loc210 = loc(fused[#loc10, #loc11])
#loc211 = loc(fused[#loc12, #loc13])
#loc212 = loc(fused[#loc14, #loc15])
#loc213 = loc(fused[#loc17, #loc16])
#loc214 = loc(fused[#loc18, #loc19])
#loc215 = loc(fused[#loc20, #loc21])
#loc216 = loc(fused[#loc22, #loc23, #loc24, #loc19])
#loc217 = loc(fused[#loc26, #loc25])
#loc218 = loc(fused[#loc28, #loc27])
#loc219 = loc(fused[#loc29, #loc30])
#loc220 = loc(fused[#loc31, #loc32])
#loc221 = loc(fused[#loc33, #loc34, #loc35, #loc30])
#loc222 = loc(fused[#loc36, #loc37])
#loc223 = loc(fused[#loc38, #loc39])
#loc224 = loc(fused[#loc40, #loc37])
#loc225 = loc(fused[#loc44, #loc45])
#loc226 = loc(fused[#loc46, #loc47])
#loc227 = loc(fused[#loc48, #loc45])
#loc228 = loc(fused[#loc49, #loc50])
#loc229 = loc(fused[#loc52, #loc53])
#loc230 = loc(fused[#loc51, #loc54])
#loc231 = loc(fused[#loc55, #loc56, #loc57, #loc50])
#loc232 = loc(fused[#loc62, #loc63])
#loc233 = loc(fused[#loc64, #loc65])
#loc234 = loc(fused[#loc66, #loc67])
#loc235 = loc(fused[#loc68, #loc69])
#loc236 = loc(fused[#loc70, #loc71])
#loc237 = loc(fused[#loc76, #loc77])
#loc240 = loc(fused[#loc87, #loc88])
#loc241 = loc(fused[#loc91, #loc92])
#loc242 = loc(fused[#loc95, #loc94])
#loc243 = loc(fused[#loc96, #loc97])
#loc244 = loc(fused[#loc98, #loc99])
#loc245 = loc(fused[#loc100, #loc101])
#loc246 = loc(fused[#loc102, #loc103])
#loc247 = loc(fused[#loc105, #loc104])
#loc248 = loc(fused[#loc106, #loc107])
#loc249 = loc(fused[#loc108, #loc109])
#loc250 = loc(fused[#loc110, #loc111, #loc112, #loc107])
#loc251 = loc(fused[#loc114, #loc113])
#loc252 = loc(fused[#loc116, #loc115])
#loc253 = loc(fused[#loc117, #loc118])
#loc254 = loc(fused[#loc119, #loc120])
#loc255 = loc(fused[#loc121, #loc122, #loc123, #loc118])
#loc256 = loc(fused[#loc124, #loc125])
#loc257 = loc(fused[#loc126, #loc127])
#loc258 = loc(fused[#loc128, #loc125])
#loc259 = loc(fused[#loc129, #loc130])
#loc260 = loc(fused[#loc132, #loc133])
#loc261 = loc(fused[#loc131, #loc134])
#loc262 = loc(fused[#loc135, #loc136, #loc137, #loc130])
#loc263 = loc(fused[#loc143, #loc144])
#loc264 = loc(fused[#loc145, #loc146])
#loc265 = loc(fused[#loc147, #loc144])
#loc266 = loc(fused[#loc148, #loc149])
#loc267 = loc(fused[#loc151, #loc152])
#loc268 = loc(fused[#loc150, #loc153])
#loc269 = loc(fused[#loc154, #loc155, #loc156, #loc149])
#loc270 = loc(fused[#loc162, #loc163])
#loc271 = loc(fused[#loc164, #loc165])
#loc272 = loc(fused[#loc166, #loc167])
#loc273 = loc(fused[#loc168, #loc169])
#loc274 = loc(fused[#loc171, #loc170])
#loc275 = loc(fused[#loc172, #loc173])
#loc276 = loc(fused[#loc174, #loc175])
#loc277 = loc(fused[#loc176, #loc177, #loc178, #loc173])
#loc278 = loc(fused[#loc180, #loc179])
#loc279 = loc(fused[#loc182, #loc181])
#loc280 = loc(fused[#loc183, #loc184])
#loc281 = loc(fused[#loc185, #loc186])
#loc282 = loc(fused[#loc187, #loc188, #loc189, #loc184])
#loc283 = loc(fused[#loc190, #loc191])
#loc284 = loc(fused[#loc192, #loc193])
#loc285 = loc(fused[#loc194, #loc191])
#loc286 = loc(fused[#loc198, #loc199])
#loc287 = loc(fused[#loc200, #loc201])
#loc288 = loc(fused[#loc202, #loc199])
