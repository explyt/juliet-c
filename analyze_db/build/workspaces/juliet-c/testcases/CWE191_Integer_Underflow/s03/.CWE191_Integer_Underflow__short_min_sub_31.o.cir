!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_min_sub_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @printIntLine(!s32i) loc(#loc82)
  cir.func no_proto @CWE191_Integer_Underflow__short_min_sub_31_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["dataCopy", init] {alignment = 2 : i64} loc(#loc84)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc85)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc86)
    %3 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc87)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc13)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc13)
    cir.store %5, %3 : !s16i, !cir.ptr<!s16i> loc(#loc88)
    %6 = cir.const #cir.int<32767> : !s32i loc(#loc15)
    %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc15)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc15)
    %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc15)
    cir.store %10, %3 : !s16i, !cir.ptr<!s16i> loc(#loc89)
    cir.br ^bb1 loc(#loc90)
  ^bb1:  // pred: ^bb0
    %11 = cir.load %3 : !cir.ptr<!s16i>, !s16i loc(#loc6)
    cir.store %11, %0 : !s16i, !cir.ptr<!s16i> loc(#loc84)
    %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc8)
    cir.store %12, %1 : !s16i, !cir.ptr<!s16i> loc(#loc85)
    cir.br ^bb2 loc(#loc91)
  ^bb2:  // pred: ^bb1
    %13 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc21)
    %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc21)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc21)
    %17 = cir.cast(integral, %16 : !s32i), !s16i loc(#loc21)
    cir.store %17, %2 : !s16i, !cir.ptr<!s16i> loc(#loc86)
    %18 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc22)
    %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc22)
    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc23)
    cir.br ^bb3 loc(#loc20)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc18)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc4)
  } loc(#loc83)
  cir.func no_proto @CWE191_Integer_Underflow__short_min_sub_31_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc93)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc26)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc94)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    cir.return loc(#loc25)
  } loc(#loc92)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["dataCopy", init] {alignment = 2 : i64} loc(#loc96)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc97)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc98)
    %3 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc99)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc40)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc40)
    cir.store %5, %3 : !s16i, !cir.ptr<!s16i> loc(#loc100)
    %6 = cir.const #cir.int<2> : !s32i loc(#loc42)
    %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc43)
    %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc43)
    cir.store %8, %3 : !s16i, !cir.ptr<!s16i> loc(#loc101)
    cir.br ^bb1 loc(#loc102)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %3 : !cir.ptr<!s16i>, !s16i loc(#loc33)
    cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc96)
    %10 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc35)
    cir.store %10, %1 : !s16i, !cir.ptr<!s16i> loc(#loc97)
    cir.br ^bb2 loc(#loc103)
  ^bb2:  // pred: ^bb1
    %11 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc49)
    %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc49)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc49)
    %15 = cir.cast(integral, %14 : !s32i), !s16i loc(#loc49)
    cir.store %15, %2 : !s16i, !cir.ptr<!s16i> loc(#loc98)
    %16 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc50)
    %17 = cir.cast(integral, %16 : !s16i), !s32i loc(#loc50)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc51)
    cir.br ^bb3 loc(#loc48)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc46)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc31)
  } loc(#loc95)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc54)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["dataCopy", init] {alignment = 2 : i64} loc(#loc106)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc107)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc108)
    %3 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc109)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc65)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc65)
    cir.store %5, %3 : !s16i, !cir.ptr<!s16i> loc(#loc110)
    %6 = cir.const #cir.int<32767> : !s32i loc(#loc67)
    %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc67)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc67)
    %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc67)
    %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc67)
    cir.store %10, %3 : !s16i, !cir.ptr<!s16i> loc(#loc111)
    cir.br ^bb1 loc(#loc112)
  ^bb1:  // pred: ^bb0
    %11 = cir.load %3 : !cir.ptr<!s16i>, !s16i loc(#loc58)
    cir.store %11, %0 : !s16i, !cir.ptr<!s16i> loc(#loc106)
    %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc60)
    cir.store %12, %1 : !s16i, !cir.ptr<!s16i> loc(#loc107)
    cir.br ^bb2 loc(#loc113)
  ^bb2:  // pred: ^bb1
    %13 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc73)
    %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc73)
    %15 = cir.const #cir.int<32767> : !s32i loc(#loc74)
    %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc74)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc74)
    %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc74)
    %19 = cir.cmp(gt, %14, %18) : !s32i, !cir.bool loc(#loc114)
    cir.brcond %19 ^bb3, ^bb4 loc(#loc115)
  ^bb3:  // pred: ^bb2
    %20 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc78)
    %21 = cir.cast(integral, %20 : !s16i), !s32i loc(#loc78)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc78)
    %24 = cir.cast(integral, %23 : !s32i), !s16i loc(#loc78)
    cir.store %24, %2 : !s16i, !cir.ptr<!s16i> loc(#loc108)
    %25 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc79)
    %26 = cir.cast(integral, %25 : !s16i), !s32i loc(#loc79)
    cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc80)
    cir.br ^bb5 loc(#loc76)
  ^bb4:  // pred: ^bb2
    %27 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc54)
    %28 = cir.cast(array_to_ptrdecay, %27 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    cir.br ^bb5 loc(#loc72)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc72)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc70)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc56)
  } loc(#loc105)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_min_sub_31.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":37:1)
#loc5 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":29:9)
#loc6 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":29:26)
#loc7 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":30:9)
#loc8 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":30:22)
#loc9 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":33:13)
#loc10 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":33:35)
#loc11 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":24:5)
#loc12 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":24:11)
#loc13 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":25:12)
#loc14 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":25:5)
#loc15 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":27:12)
#loc16 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":27:5)
#loc17 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":28:5)
#loc18 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":36:5)
#loc19 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":31:9)
#loc20 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":35:9)
#loc21 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":33:28)
#loc22 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":34:26)
#loc23 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":34:13)
#loc24 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":84:1)
#loc25 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":88:1)
#loc26 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":86:5)
#loc27 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":86:13)
#loc28 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":87:5)
#loc29 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":87:13)
#loc30 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":44:1)
#loc31 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":59:1)
#loc32 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":51:9)
#loc33 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":51:26)
#loc34 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":52:9)
#loc35 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":52:22)
#loc36 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":55:13)
#loc37 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":55:35)
#loc38 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":46:5)
#loc39 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":46:11)
#loc40 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":47:12)
#loc41 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":47:5)
#loc42 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":49:13)
#loc43 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":49:12)
#loc44 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":49:5)
#loc45 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":50:5)
#loc46 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":58:5)
#loc47 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":53:9)
#loc48 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":57:9)
#loc49 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":55:28)
#loc50 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":56:26)
#loc51 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":56:13)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc54 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":79:23)
#loc55 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":62:1)
#loc56 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":82:1)
#loc57 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":69:9)
#loc58 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":69:26)
#loc59 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":70:9)
#loc60 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":70:22)
#loc61 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":74:13)
#loc62 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":74:35)
#loc63 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":64:5)
#loc64 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":64:11)
#loc65 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":65:12)
#loc66 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":65:5)
#loc67 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":67:12)
#loc68 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":67:5)
#loc69 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":68:5)
#loc70 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":81:5)
#loc71 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":72:9)
#loc72 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":80:9)
#loc73 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":72:13)
#loc74 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":72:20)
#loc75 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":73:9)
#loc76 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":76:9)
#loc77 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":78:9)
#loc78 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":74:28)
#loc79 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":75:26)
#loc80 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":75:13)
#loc81 = loc("CWE191_Integer_Underflow__short_min_sub_31.c":79:13)
#loc82 = loc(fused[#loc1, #loc2])
#loc83 = loc(fused[#loc3, #loc4])
#loc84 = loc(fused[#loc5, #loc6])
#loc85 = loc(fused[#loc7, #loc8])
#loc86 = loc(fused[#loc9, #loc10])
#loc87 = loc(fused[#loc11, #loc12])
#loc88 = loc(fused[#loc14, #loc13])
#loc89 = loc(fused[#loc16, #loc15])
#loc90 = loc(fused[#loc17, #loc18])
#loc91 = loc(fused[#loc19, #loc20])
#loc92 = loc(fused[#loc24, #loc25])
#loc93 = loc(fused[#loc26, #loc27])
#loc94 = loc(fused[#loc28, #loc29])
#loc95 = loc(fused[#loc30, #loc31])
#loc96 = loc(fused[#loc32, #loc33])
#loc97 = loc(fused[#loc34, #loc35])
#loc98 = loc(fused[#loc36, #loc37])
#loc99 = loc(fused[#loc38, #loc39])
#loc100 = loc(fused[#loc41, #loc40])
#loc101 = loc(fused[#loc44, #loc42])
#loc102 = loc(fused[#loc45, #loc46])
#loc103 = loc(fused[#loc47, #loc48])
#loc104 = loc(fused[#loc52, #loc53])
#loc105 = loc(fused[#loc55, #loc56])
#loc106 = loc(fused[#loc57, #loc58])
#loc107 = loc(fused[#loc59, #loc60])
#loc108 = loc(fused[#loc61, #loc62])
#loc109 = loc(fused[#loc63, #loc64])
#loc110 = loc(fused[#loc66, #loc65])
#loc111 = loc(fused[#loc68, #loc67])
#loc112 = loc(fused[#loc69, #loc70])
#loc113 = loc(fused[#loc71, #loc72])
#loc114 = loc(fused[#loc73, #loc74])
#loc115 = loc(fused[#loc75, #loc76, #loc77, #loc72])
