!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s03/CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc195)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc197)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc198)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc9)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc9)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc9)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc9)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc9)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc199)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc9)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc9)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc198)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc11)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc11)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc11)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc11)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc11)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc11)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc11)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc199)
    cir.scope {
      %17 = cir.const #cir.int<6> : !s32i loc(#loc14)
      cir.switch (%17 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc16)
          cir.store %18, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc201)
          %19 = cir.const #cir.int<0> : !s32i loc(#loc18)
          %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc18)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc19)
          %22 = cir.const #cir.int<0> : !s32i loc(#loc20)
          %23 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc21)
          cir.store %20, %23 : !s8i, !cir.ptr<!s8i> loc(#loc202)
          cir.break loc(#loc22)
        } loc(#loc15)
        cir.case(default, []) {
          %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc3)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc3)
          cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc24)
          cir.break loc(#loc25)
        } loc(#loc23)
        cir.yield loc(#loc12)
      } loc(#loc12)
    } loc(#loc200)
    cir.scope {
      %17 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc204)
      %18 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc205)
      %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc32)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc32)
      %21 = cir.const #cir.int<67> : !s32i loc(#loc33)
      %22 = cir.const #cir.int<100> : !s32i loc(#loc34)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc35)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc34)
      %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc34)
      cir.libc.memset %25 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc206)
      %26 = cir.const #cir.int<0> : !s32i loc(#loc38)
      %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc38)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc39)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc40)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc39)
      %31 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc41)
      %32 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc41)
      cir.store %27, %32 : !s8i, !cir.ptr<!s8i> loc(#loc207)
      cir.scope {
        %41 = cir.const #cir.int<0> : !s32i loc(#loc44)
        %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc44)
        cir.store %42, %17 : !u64i, !cir.ptr<!u64i> loc(#loc209)
        cir.for : cond {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc46)
          %44 = cir.const #cir.int<100> : !s32i loc(#loc47)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc47)
          %46 = cir.cmp(lt, %43, %45) : !u64i, !cir.bool loc(#loc210)
          cir.condition(%46) loc(#loc48)
        } body {
          cir.scope {
            %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc50)
            %44 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc51)
            %45 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %43 : !u64i), !cir.ptr<!s8i> loc(#loc51)
            %46 = cir.load %45 : !cir.ptr<!s8i>, !s8i loc(#loc51)
            %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
            %48 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc53)
            %49 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %48 : !u64i), !cir.ptr<!s8i> loc(#loc54)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc212)
          } loc(#loc211)
          cir.yield loc(#loc43)
        } step {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc56)
          %44 = cir.unary(inc, %43) : !u64i, !u64i loc(#loc57)
          cir.store %44, %17 : !u64i, !cir.ptr<!u64i> loc(#loc213)
          cir.yield loc(#loc208)
        } loc(#loc208)
      } loc(#loc208)
      %33 = cir.const #cir.int<0> : !s32i loc(#loc58)
      %34 = cir.cast(integral, %33 : !s32i), !s8i loc(#loc58)
      %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
      %36 = cir.const #cir.int<100> : !s32i loc(#loc60)
      %37 = cir.const #cir.int<1> : !s32i loc(#loc61)
      %38 = cir.binop(sub, %36, %37) nsw : !s32i loc(#loc60)
      %39 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %38 : !s32i), !cir.ptr<!s8i> loc(#loc62)
      cir.store %34, %39 : !s8i, !cir.ptr<!s8i> loc(#loc214)
      %40 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc63)
      cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    } loc(#loc203)
    cir.return loc(#loc5)
  } loc(#loc196)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc216)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc67)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc217)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc69)
    cir.return loc(#loc66)
  } loc(#loc215)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc219)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc220)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc76)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc76)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc76)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc76)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc76)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc221)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc76)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc76)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc220)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc78)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc78)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc78)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc78)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc78)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc78)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc78)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc221)
    cir.scope {
      %17 = cir.const #cir.int<5> : !s32i loc(#loc81)
      cir.switch (%17 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc83)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc83)
          cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc84)
          cir.break loc(#loc85)
        } loc(#loc82)
        cir.case(default, []) {
          %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc87)
          cir.store %18, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc223)
          %19 = cir.const #cir.int<0> : !s32i loc(#loc89)
          %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc89)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc90)
          %22 = cir.const #cir.int<0> : !s32i loc(#loc91)
          %23 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc92)
          cir.store %20, %23 : !s8i, !cir.ptr<!s8i> loc(#loc224)
          cir.break loc(#loc93)
        } loc(#loc86)
        cir.yield loc(#loc79)
      } loc(#loc79)
    } loc(#loc222)
    cir.scope {
      %17 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc226)
      %18 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc227)
      %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc100)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc100)
      %21 = cir.const #cir.int<67> : !s32i loc(#loc101)
      %22 = cir.const #cir.int<100> : !s32i loc(#loc102)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc103)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc102)
      %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc102)
      cir.libc.memset %25 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc228)
      %26 = cir.const #cir.int<0> : !s32i loc(#loc106)
      %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc106)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc107)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc108)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc107)
      %31 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc109)
      %32 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc109)
      cir.store %27, %32 : !s8i, !cir.ptr<!s8i> loc(#loc229)
      cir.scope {
        %41 = cir.const #cir.int<0> : !s32i loc(#loc112)
        %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc112)
        cir.store %42, %17 : !u64i, !cir.ptr<!u64i> loc(#loc231)
        cir.for : cond {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc114)
          %44 = cir.const #cir.int<100> : !s32i loc(#loc115)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc115)
          %46 = cir.cmp(lt, %43, %45) : !u64i, !cir.bool loc(#loc232)
          cir.condition(%46) loc(#loc116)
        } body {
          cir.scope {
            %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc118)
            %44 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc119)
            %45 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %43 : !u64i), !cir.ptr<!s8i> loc(#loc119)
            %46 = cir.load %45 : !cir.ptr<!s8i>, !s8i loc(#loc119)
            %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc120)
            %48 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc121)
            %49 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %48 : !u64i), !cir.ptr<!s8i> loc(#loc122)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc234)
          } loc(#loc233)
          cir.yield loc(#loc111)
        } step {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc124)
          %44 = cir.unary(inc, %43) : !u64i, !u64i loc(#loc125)
          cir.store %44, %17 : !u64i, !cir.ptr<!u64i> loc(#loc235)
          cir.yield loc(#loc230)
        } loc(#loc230)
      } loc(#loc230)
      %33 = cir.const #cir.int<0> : !s32i loc(#loc126)
      %34 = cir.cast(integral, %33 : !s32i), !s8i loc(#loc126)
      %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc127)
      %36 = cir.const #cir.int<100> : !s32i loc(#loc128)
      %37 = cir.const #cir.int<1> : !s32i loc(#loc129)
      %38 = cir.binop(sub, %36, %37) nsw : !s32i loc(#loc128)
      %39 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %38 : !s32i), !cir.ptr<!s8i> loc(#loc130)
      cir.store %34, %39 : !s8i, !cir.ptr<!s8i> loc(#loc236)
      %40 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
      cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc132)
    } loc(#loc225)
    cir.return loc(#loc72)
  } loc(#loc218)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc238)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc239)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc138)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc138)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc138)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc138)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc138)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc240)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc138)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc138)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc239)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc140)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc140)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc140)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc140)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc140)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc140)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc140)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc240)
    cir.scope {
      %17 = cir.const #cir.int<6> : !s32i loc(#loc143)
      cir.switch (%17 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
          cir.store %18, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc242)
          %19 = cir.const #cir.int<0> : !s32i loc(#loc147)
          %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc147)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc148)
          %22 = cir.const #cir.int<0> : !s32i loc(#loc149)
          %23 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc150)
          cir.store %20, %23 : !s8i, !cir.ptr<!s8i> loc(#loc243)
          cir.break loc(#loc151)
        } loc(#loc144)
        cir.case(default, []) {
          %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc153)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc153)
          cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc154)
          cir.break loc(#loc155)
        } loc(#loc152)
        cir.yield loc(#loc141)
      } loc(#loc141)
    } loc(#loc241)
    cir.scope {
      %17 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc245)
      %18 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc246)
      %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc162)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc162)
      %21 = cir.const #cir.int<67> : !s32i loc(#loc163)
      %22 = cir.const #cir.int<100> : !s32i loc(#loc164)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc165)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc164)
      %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc164)
      cir.libc.memset %25 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc247)
      %26 = cir.const #cir.int<0> : !s32i loc(#loc168)
      %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc168)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc169)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc170)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc169)
      %31 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc171)
      %32 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc171)
      cir.store %27, %32 : !s8i, !cir.ptr<!s8i> loc(#loc248)
      cir.scope {
        %41 = cir.const #cir.int<0> : !s32i loc(#loc174)
        %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc174)
        cir.store %42, %17 : !u64i, !cir.ptr<!u64i> loc(#loc250)
        cir.for : cond {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc176)
          %44 = cir.const #cir.int<100> : !s32i loc(#loc177)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc177)
          %46 = cir.cmp(lt, %43, %45) : !u64i, !cir.bool loc(#loc251)
          cir.condition(%46) loc(#loc178)
        } body {
          cir.scope {
            %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc180)
            %44 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc181)
            %45 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %43 : !u64i), !cir.ptr<!s8i> loc(#loc181)
            %46 = cir.load %45 : !cir.ptr<!s8i>, !s8i loc(#loc181)
            %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc182)
            %48 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc183)
            %49 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %48 : !u64i), !cir.ptr<!s8i> loc(#loc184)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc253)
          } loc(#loc252)
          cir.yield loc(#loc173)
        } step {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc186)
          %44 = cir.unary(inc, %43) : !u64i, !u64i loc(#loc187)
          cir.store %44, %17 : !u64i, !cir.ptr<!u64i> loc(#loc254)
          cir.yield loc(#loc249)
        } loc(#loc249)
      } loc(#loc249)
      %33 = cir.const #cir.int<0> : !s32i loc(#loc188)
      %34 = cir.cast(integral, %33 : !s32i), !s8i loc(#loc188)
      %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc189)
      %36 = cir.const #cir.int<100> : !s32i loc(#loc190)
      %37 = cir.const #cir.int<1> : !s32i loc(#loc191)
      %38 = cir.binop(sub, %36, %37) nsw : !s32i loc(#loc190)
      %39 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %38 : !s32i), !cir.ptr<!s8i> loc(#loc192)
      cir.store %34, %39 : !s8i, !cir.ptr<!s8i> loc(#loc255)
      %40 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc193)
      cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc194)
    } loc(#loc244)
    cir.return loc(#loc134)
  } loc(#loc237)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s03/CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":38:19)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":23:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":54:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":25:5)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":25:12)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":26:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":26:36)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":27:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":27:37)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":28:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":40:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":28:12)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":30:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":33:16)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":33:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":34:19)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":34:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":34:14)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":34:15)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":35:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":36:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":38:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":39:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":41:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":53:5)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":42:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":42:16)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":43:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":43:24)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":44:16)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":44:24)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":44:29)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":44:33)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":44:9)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":44:34)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":45:25)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":45:16)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":45:20)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":45:9)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":47:9)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":50:9)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":47:18)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":47:14)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":47:21)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":47:25)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":47:23)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":48:9)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":49:30)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":49:23)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":49:13)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":49:18)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":49:19)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":49:31)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":47:31)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":47:30)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":51:23)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":51:9)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":51:14)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":51:18)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":51:19)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":52:19)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":52:9)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":126:1)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":130:1)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":128:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":128:14)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":129:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":129:14)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":61:1)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":91:1)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":63:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":63:12)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":64:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":64:36)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":65:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":65:37)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":66:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":77:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":66:12)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":68:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":70:19)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":70:9)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":71:9)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":72:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":74:16)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":74:9)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":75:19)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":75:9)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":75:14)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":75:15)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":76:9)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":78:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":90:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":79:9)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":79:16)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":80:9)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":80:24)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":81:16)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":81:24)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":81:29)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":81:33)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":81:9)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":81:34)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":82:25)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":82:16)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":82:20)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":82:9)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":84:9)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":87:9)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":84:18)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":84:14)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":84:21)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":84:25)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":84:23)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":85:9)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":86:30)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":86:23)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":86:13)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":86:18)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":86:19)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":86:31)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":84:31)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":84:30)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":88:23)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":88:9)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":88:14)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":88:18)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":88:19)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":89:19)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":89:9)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":94:1)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":124:1)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":96:5)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":96:12)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":97:5)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":97:36)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":98:5)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":98:37)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":99:5)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":110:5)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":99:12)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":101:5)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":103:16)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":103:9)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":104:19)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":104:9)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":104:14)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":104:15)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":105:9)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":106:5)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":108:19)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":108:9)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":109:9)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":111:5)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":123:5)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":112:9)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":112:16)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":113:9)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":113:24)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":114:16)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":114:24)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":114:29)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":114:33)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":114:9)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":114:34)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":115:25)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":115:16)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":115:20)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":115:9)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":117:9)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":120:9)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":117:18)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":117:14)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":117:21)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":117:25)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":117:23)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":118:9)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":119:30)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":119:23)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":119:13)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":119:18)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":119:19)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":119:31)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":117:31)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":117:30)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":121:23)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":121:9)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":121:14)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":121:18)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":121:19)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":122:19)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c":122:9)
#loc195 = loc(fused[#loc1, #loc2])
#loc196 = loc(fused[#loc4, #loc5])
#loc197 = loc(fused[#loc6, #loc7])
#loc198 = loc(fused[#loc8, #loc9])
#loc199 = loc(fused[#loc10, #loc11])
#loc200 = loc(fused[#loc12, #loc13])
#loc201 = loc(fused[#loc17, #loc16])
#loc202 = loc(fused[#loc19, #loc18])
#loc203 = loc(fused[#loc26, #loc27])
#loc204 = loc(fused[#loc28, #loc29])
#loc205 = loc(fused[#loc30, #loc31])
#loc206 = loc(fused[#loc36, #loc37])
#loc207 = loc(fused[#loc41, #loc38])
#loc208 = loc(fused[#loc42, #loc43])
#loc209 = loc(fused[#loc45, #loc44])
#loc210 = loc(fused[#loc46, #loc47])
#loc211 = loc(fused[#loc49, #loc43])
#loc212 = loc(fused[#loc52, #loc55])
#loc213 = loc(fused[#loc57, #loc56])
#loc214 = loc(fused[#loc59, #loc58])
#loc215 = loc(fused[#loc65, #loc66])
#loc216 = loc(fused[#loc67, #loc68])
#loc217 = loc(fused[#loc69, #loc70])
#loc218 = loc(fused[#loc71, #loc72])
#loc219 = loc(fused[#loc73, #loc74])
#loc220 = loc(fused[#loc75, #loc76])
#loc221 = loc(fused[#loc77, #loc78])
#loc222 = loc(fused[#loc79, #loc80])
#loc223 = loc(fused[#loc88, #loc87])
#loc224 = loc(fused[#loc90, #loc89])
#loc225 = loc(fused[#loc94, #loc95])
#loc226 = loc(fused[#loc96, #loc97])
#loc227 = loc(fused[#loc98, #loc99])
#loc228 = loc(fused[#loc104, #loc105])
#loc229 = loc(fused[#loc109, #loc106])
#loc230 = loc(fused[#loc110, #loc111])
#loc231 = loc(fused[#loc113, #loc112])
#loc232 = loc(fused[#loc114, #loc115])
#loc233 = loc(fused[#loc117, #loc111])
#loc234 = loc(fused[#loc120, #loc123])
#loc235 = loc(fused[#loc125, #loc124])
#loc236 = loc(fused[#loc127, #loc126])
#loc237 = loc(fused[#loc133, #loc134])
#loc238 = loc(fused[#loc135, #loc136])
#loc239 = loc(fused[#loc137, #loc138])
#loc240 = loc(fused[#loc139, #loc140])
#loc241 = loc(fused[#loc141, #loc142])
#loc242 = loc(fused[#loc146, #loc145])
#loc243 = loc(fused[#loc148, #loc147])
#loc244 = loc(fused[#loc156, #loc157])
#loc245 = loc(fused[#loc158, #loc159])
#loc246 = loc(fused[#loc160, #loc161])
#loc247 = loc(fused[#loc166, #loc167])
#loc248 = loc(fused[#loc171, #loc168])
#loc249 = loc(fused[#loc172, #loc173])
#loc250 = loc(fused[#loc175, #loc174])
#loc251 = loc(fused[#loc176, #loc177])
#loc252 = loc(fused[#loc179, #loc173])
#loc253 = loc(fused[#loc182, #loc185])
#loc254 = loc(fused[#loc187, #loc186])
#loc255 = loc(fused[#loc189, #loc188])
