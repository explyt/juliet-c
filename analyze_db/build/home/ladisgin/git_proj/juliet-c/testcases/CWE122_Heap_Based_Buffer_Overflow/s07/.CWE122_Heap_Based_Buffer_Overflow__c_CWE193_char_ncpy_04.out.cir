!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":122:10)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":122:14)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":122:20)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":122:32)
#loc198 = loc(fused[#loc71, #loc72])
#loc199 = loc(fused[#loc73, #loc74])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.goodG2B2.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc169)
  cir.global "private" constant cir_private @__const.goodG2B1.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc170)
  cir.global "private" constant cir_private @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04_bad.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc171)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc172)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc173)
  cir.func private @strncpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc174)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc175)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc176)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc177)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc171)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc179)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc23)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc180)
    cir.br ^bb1 loc(#loc181)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc27)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc182)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc29)
    %6 = cir.const #cir.int<10> : !s32i loc(#loc30)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc30)
    %8 = cir.const #cir.int<1> : !u64i loc(#loc183)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc184)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc29)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc185)
    cir.store %11, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc186)
    cir.br ^bb3 loc(#loc187)
  ^bb3:  // pred: ^bb2
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc38)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc38)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc188)
    cir.brcond %15 ^bb4, ^bb5 loc(#loc189)
  ^bb4:  // pred: ^bb3
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc40)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc42)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc40)
    cir.br ^bb5 loc(#loc36)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc36)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc26)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc26)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc190)
  ^bb9:  // pred: ^bb8
    %19 = cir.get_global @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04_bad.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc171)
    cir.copy %19 to %0 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc171)
    %20 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc45)
    %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc46)
    %22 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc47)
    %23 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc48)
    %24 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc49)
    %25 = cir.call @strlen(%24) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc48)
    %26 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc50)
    %28 = cir.binop(add, %25, %27) : !u64i loc(#loc191)
    %29 = cir.call @strncpy(%21, %22, %28) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc45)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%30) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %31 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc53)
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc54)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc54)
    cir.call @free(%33) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc53)
    cir.br ^bb10 loc(#loc44)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc20)
  } loc(#loc178)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc193)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc57)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc194)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc59)
    cir.return loc(#loc56)
  } loc(#loc192)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc195)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc196)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc65)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc66)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc67)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc68)
  cir.func @main(%arg0: !s32i loc(fused[#loc71, #loc72]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc73, #loc74])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc198)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc199)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc70)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc75)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc75)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc76)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc77)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc77)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc78)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc65)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04_good : !cir.ptr<!cir.func<!void ()>> loc(#loc200)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04_good() : () -> () loc(#loc80)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc66)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc67)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc201)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04_bad() : () -> () loc(#loc84)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc68)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc87)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc202)
    cir.return %17 : !s32i loc(#loc202)
  } loc(#loc197)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc89)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc170)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc204)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc94)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc205)
    cir.br ^bb1 loc(#loc206)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<0> : !s32i loc(#loc98)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc98)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc207)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc89)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc89)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc102)
    cir.br ^bb8 loc(#loc100)
  ^bb3:  // pred: ^bb1
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc103)
    %8 = cir.const #cir.int<10> : !s32i loc(#loc104)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc105)
    %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc104)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc104)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc208)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc209)
    %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc103)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc210)
    cir.store %15, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc211)
    cir.br ^bb4 loc(#loc212)
  ^bb4:  // pred: ^bb3
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc113)
    %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc114)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc114)
    %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc213)
    cir.brcond %19 ^bb5, ^bb6 loc(#loc214)
  ^bb5:  // pred: ^bb4
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc116)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc117)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc118)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc116)
    cir.br ^bb6 loc(#loc112)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc112)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc97)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc97)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc215)
  ^bb10:  // pred: ^bb9
    %23 = cir.get_global @__const.goodG2B1.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc170)
    cir.copy %23 to %0 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc170)
    %24 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc121)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc122)
    %26 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc123)
    %27 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc124)
    %28 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc125)
    %29 = cir.call @strlen(%28) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc124)
    %30 = cir.const #cir.int<1> : !s32i loc(#loc126)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc126)
    %32 = cir.binop(add, %29, %31) : !u64i loc(#loc216)
    %33 = cir.call @strncpy(%25, %26, %32) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc121)
    %34 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc127)
    cir.call @printLine(%34) : (!cir.ptr<!s8i>) -> () loc(#loc128)
    %35 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc129)
    %36 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc130)
    %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc130)
    cir.call @free(%37) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc129)
    cir.br ^bb11 loc(#loc120)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc91)
  } loc(#loc203)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc169)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc218)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc135)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc219)
    cir.br ^bb1 loc(#loc220)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc139)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc139)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc221)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc141)
    %6 = cir.const #cir.int<10> : !s32i loc(#loc142)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc143)
    %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc142)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc142)
    %10 = cir.const #cir.int<1> : !u64i loc(#loc222)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc223)
    %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc141)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc224)
    cir.store %13, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc225)
    cir.br ^bb3 loc(#loc226)
  ^bb3:  // pred: ^bb2
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc151)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc152)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc152)
    %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc227)
    cir.brcond %17 ^bb4, ^bb5 loc(#loc228)
  ^bb4:  // pred: ^bb3
    %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc154)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc155)
    %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc156)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc154)
    cir.br ^bb5 loc(#loc150)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc150)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc138)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc138)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc229)
  ^bb9:  // pred: ^bb8
    %21 = cir.get_global @__const.goodG2B2.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc169)
    cir.copy %21 to %0 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc169)
    %22 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc159)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc160)
    %24 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc161)
    %25 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc162)
    %26 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc163)
    %27 = cir.call @strlen(%26) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc162)
    %28 = cir.const #cir.int<1> : !s32i loc(#loc164)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc164)
    %30 = cir.binop(add, %27, %29) : !u64i loc(#loc230)
    %31 = cir.call @strncpy(%23, %24, %30) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc159)
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc165)
    cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc166)
    %33 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc167)
    %34 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc168)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc168)
    cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc167)
    cir.br ^bb10 loc(#loc158)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc132)
  } loc(#loc217)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":97:9)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":97:29)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":76:9)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":76:29)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":46:9)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":46:29)
#loc7 = loc("/usr/include/stdlib.h":672:1)
#loc8 = loc("/usr/include/stdlib.h":672:45)
#loc9 = loc("/usr/include/stdlib.h":756:1)
#loc10 = loc("/usr/include/stdlib.h":756:70)
#loc11 = loc("/usr/include/string.h":144:1)
#loc12 = loc("/usr/include/string.h":146:14)
#loc13 = loc("/usr/include/string.h":407:1)
#loc14 = loc("/usr/include/string.h":408:33)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc17 = loc("/usr/include/stdlib.h":687:1)
#loc18 = loc("/usr/include/stdlib.h":687:32)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":35:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":53:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":37:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":37:12)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":38:12)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":38:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":39:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":44:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":39:8)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":40:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":42:24)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":42:31)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":42:34)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":42:45)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":42:46)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":42:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":43:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":43:37)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":43:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":43:21)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":43:27)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":43:28)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":43:34)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":43:33)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":45:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":52:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":49:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":49:17)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":49:23)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":49:31)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":49:38)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":49:48)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":50:19)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":50:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":51:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":51:14)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":106:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":110:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":108:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":108:14)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":109:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":109:14)
#loc61 = loc("/usr/include/stdlib.h":575:1)
#loc62 = loc("/usr/include/stdlib.h":575:41)
#loc63 = loc("/usr/include/time.h":76:1)
#loc64 = loc("/usr/include/time.h":76:38)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":127:15)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":129:15)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":132:15)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":134:15)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":122:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":137:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":123:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":125:27)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":125:22)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":125:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":127:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":128:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":128:67)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":129:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":132:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":133:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":133:66)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":134:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":136:12)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":136:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":67:19)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":60:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":83:1)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":62:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":62:12)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":63:12)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":63:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":64:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":74:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":64:8)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":65:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":68:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":70:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":67:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":72:24)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":72:32)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":72:35)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":72:38)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":72:49)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":72:31)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":72:50)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":72:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":73:9)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":73:37)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":73:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":73:21)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":73:27)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":73:28)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":73:34)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":73:33)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":75:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":82:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":79:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":79:17)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":79:23)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":79:31)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":79:38)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":79:48)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":80:19)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":80:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":81:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":81:14)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":86:1)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":104:1)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":88:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":88:12)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":89:12)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":89:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":90:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":95:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":90:8)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":91:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":93:24)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":93:32)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":93:35)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":93:38)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":93:49)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":93:31)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":93:50)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":93:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":94:9)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":94:37)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":94:13)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":94:21)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":94:27)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":94:28)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":94:34)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":94:33)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":96:5)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":103:5)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":100:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":100:17)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":100:23)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":100:31)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":100:38)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":100:48)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":101:19)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":101:9)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":102:9)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c":102:14)
#loc169 = loc(fused[#loc1, #loc2])
#loc170 = loc(fused[#loc3, #loc4])
#loc171 = loc(fused[#loc5, #loc6])
#loc172 = loc(fused[#loc7, #loc8])
#loc173 = loc(fused[#loc9, #loc10])
#loc174 = loc(fused[#loc11, #loc12])
#loc175 = loc(fused[#loc13, #loc14])
#loc176 = loc(fused[#loc15, #loc16])
#loc177 = loc(fused[#loc17, #loc18])
#loc178 = loc(fused[#loc19, #loc20])
#loc179 = loc(fused[#loc21, #loc22])
#loc180 = loc(fused[#loc24, #loc23])
#loc181 = loc(fused[#loc25, #loc26])
#loc182 = loc(fused[#loc28, #loc26])
#loc183 = loc(fused[#loc31, #loc32])
#loc184 = loc(fused[#loc30, #loc32])
#loc185 = loc(fused[#loc29, #loc33])
#loc186 = loc(fused[#loc34, #loc33])
#loc187 = loc(fused[#loc35, #loc36])
#loc188 = loc(fused[#loc37, #loc38])
#loc189 = loc(fused[#loc39, #loc36])
#loc190 = loc(fused[#loc43, #loc44])
#loc191 = loc(fused[#loc48, #loc50])
#loc192 = loc(fused[#loc55, #loc56])
#loc193 = loc(fused[#loc57, #loc58])
#loc194 = loc(fused[#loc59, #loc60])
#loc195 = loc(fused[#loc61, #loc62])
#loc196 = loc(fused[#loc63, #loc64])
#loc197 = loc(fused[#loc69, #loc70])
#loc200 = loc(fused[#loc80, #loc81])
#loc201 = loc(fused[#loc84, #loc85])
#loc202 = loc(fused[#loc88, #loc87])
#loc203 = loc(fused[#loc90, #loc91])
#loc204 = loc(fused[#loc92, #loc93])
#loc205 = loc(fused[#loc95, #loc94])
#loc206 = loc(fused[#loc96, #loc97])
#loc207 = loc(fused[#loc99, #loc100, #loc101, #loc97])
#loc208 = loc(fused[#loc106, #loc107])
#loc209 = loc(fused[#loc108, #loc107])
#loc210 = loc(fused[#loc103, #loc109])
#loc211 = loc(fused[#loc110, #loc109])
#loc212 = loc(fused[#loc111, #loc112])
#loc213 = loc(fused[#loc113, #loc114])
#loc214 = loc(fused[#loc115, #loc112])
#loc215 = loc(fused[#loc119, #loc120])
#loc216 = loc(fused[#loc124, #loc126])
#loc217 = loc(fused[#loc131, #loc132])
#loc218 = loc(fused[#loc133, #loc134])
#loc219 = loc(fused[#loc136, #loc135])
#loc220 = loc(fused[#loc137, #loc138])
#loc221 = loc(fused[#loc140, #loc138])
#loc222 = loc(fused[#loc144, #loc145])
#loc223 = loc(fused[#loc146, #loc145])
#loc224 = loc(fused[#loc141, #loc147])
#loc225 = loc(fused[#loc148, #loc147])
#loc226 = loc(fused[#loc149, #loc150])
#loc227 = loc(fused[#loc151, #loc152])
#loc228 = loc(fused[#loc153, #loc150])
#loc229 = loc(fused[#loc157, #loc158])
#loc230 = loc(fused[#loc162, #loc164])
