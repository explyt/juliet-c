!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_add_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc201)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc202)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc203)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc8)
  cir.func private @printHexCharLine(!s8i) loc(#loc204)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_add_15_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc206)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc15)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc15)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc207)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc19)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc21)
          %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc202)
          %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc22)
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
          %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc21)
          cir.break loc(#loc23)
        } loc(#loc20)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc8)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc8)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc25)
          cir.break loc(#loc26)
        } loc(#loc24)
        cir.yield loc(#loc17)
      } loc(#loc17)
    } loc(#loc208)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc29)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc211)
            %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc35)
            %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc35)
            %7 = cir.const #cir.int<1> : !s32i loc(#loc34)
            %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc35)
            %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc35)
            cir.store %9, %4 : !s8i, !cir.ptr<!s8i> loc(#loc211)
            %10 = cir.load %4 : !cir.ptr<!s8i>, !s8i loc(#loc36)
            cir.call @printHexCharLine(%10) : (!s8i) -> () loc(#loc37)
          } loc(#loc210)
          cir.break loc(#loc38)
        } loc(#loc30)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc40)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc40)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc41)
          cir.break loc(#loc42)
        } loc(#loc39)
        cir.yield loc(#loc27)
      } loc(#loc27)
    } loc(#loc209)
    cir.return loc(#loc12)
  } loc(#loc205)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_add_15_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc213)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc45)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc214)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc47)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc215)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc49)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc216)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc51)
    cir.return loc(#loc44)
  } loc(#loc212)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc53)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc218)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc58)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc58)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc219)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc62)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc64)
          %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc202)
          %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc65)
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc66)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc66)
          %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc64)
          cir.break loc(#loc67)
        } loc(#loc63)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc69)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc69)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc70)
          cir.break loc(#loc71)
        } loc(#loc68)
        cir.yield loc(#loc60)
      } loc(#loc60)
    } loc(#loc220)
    cir.scope {
      %3 = cir.const #cir.int<8> : !s32i loc(#loc74)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc76)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc76)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc77)
          cir.break loc(#loc78)
        } loc(#loc75)
        cir.case(default, []) {
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc82)
            %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc82)
            %6 = cir.const #cir.int<127> : !s32i loc(#loc83)
            %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc223)
            cir.if %7 {
              %8 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc225)
              %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc89)
              %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc89)
              %11 = cir.const #cir.int<1> : !s32i loc(#loc88)
              %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc89)
              %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc89)
              cir.store %13, %8 : !s8i, !cir.ptr<!s8i> loc(#loc225)
              %14 = cir.load %8 : !cir.ptr<!s8i>, !s8i loc(#loc90)
              cir.call @printHexCharLine(%14) : (!s8i) -> () loc(#loc91)
            } else {
              %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc53)
              %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc53)
              cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc92)
            } loc(#loc224)
          } loc(#loc222)
          cir.break loc(#loc93)
        } loc(#loc79)
        cir.yield loc(#loc72)
      } loc(#loc72)
    } loc(#loc221)
    cir.return loc(#loc55)
  } loc(#loc217)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc227)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc98)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc98)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc228)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc102)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc104)
          %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc202)
          %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc105)
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc106)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc106)
          %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc104)
          cir.break loc(#loc107)
        } loc(#loc103)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc109)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc109)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc110)
          cir.break loc(#loc111)
        } loc(#loc108)
        cir.yield loc(#loc100)
      } loc(#loc100)
    } loc(#loc229)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc114)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc118)
            %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc118)
            %6 = cir.const #cir.int<127> : !s32i loc(#loc119)
            %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc232)
            cir.if %7 {
              %8 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc234)
              %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc125)
              %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc125)
              %11 = cir.const #cir.int<1> : !s32i loc(#loc124)
              %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc125)
              %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc125)
              cir.store %13, %8 : !s8i, !cir.ptr<!s8i> loc(#loc234)
              %14 = cir.load %8 : !cir.ptr<!s8i>, !s8i loc(#loc126)
              cir.call @printHexCharLine(%14) : (!s8i) -> () loc(#loc127)
            } else {
              %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc128)
              %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc128)
              cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc129)
            } loc(#loc233)
          } loc(#loc231)
          cir.break loc(#loc130)
        } loc(#loc115)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc132)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc132)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc133)
          cir.break loc(#loc134)
        } loc(#loc131)
        cir.yield loc(#loc112)
      } loc(#loc112)
    } loc(#loc230)
    cir.return loc(#loc95)
  } loc(#loc226)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc236)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc139)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc139)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc237)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc143)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc145)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc145)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc146)
          cir.break loc(#loc147)
        } loc(#loc144)
        cir.case(default, []) {
          %4 = cir.const #cir.int<2> : !s32i loc(#loc149)
          %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc149)
          cir.store %5, %0 : !s8i, !cir.ptr<!s8i> loc(#loc239)
          cir.break loc(#loc151)
        } loc(#loc148)
        cir.yield loc(#loc141)
      } loc(#loc141)
    } loc(#loc238)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc154)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc242)
            %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc160)
            %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc160)
            %7 = cir.const #cir.int<1> : !s32i loc(#loc159)
            %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc160)
            %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc160)
            cir.store %9, %4 : !s8i, !cir.ptr<!s8i> loc(#loc242)
            %10 = cir.load %4 : !cir.ptr<!s8i>, !s8i loc(#loc161)
            cir.call @printHexCharLine(%10) : (!s8i) -> () loc(#loc162)
          } loc(#loc241)
          cir.break loc(#loc163)
        } loc(#loc155)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc165)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc165)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc166)
          cir.break loc(#loc167)
        } loc(#loc164)
        cir.yield loc(#loc152)
      } loc(#loc152)
    } loc(#loc240)
    cir.return loc(#loc136)
  } loc(#loc235)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc244)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc172)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc172)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc245)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc176)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<2> : !s32i loc(#loc178)
          %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc178)
          cir.store %5, %0 : !s8i, !cir.ptr<!s8i> loc(#loc247)
          cir.break loc(#loc180)
        } loc(#loc177)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc182)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc182)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc183)
          cir.break loc(#loc184)
        } loc(#loc181)
        cir.yield loc(#loc174)
      } loc(#loc174)
    } loc(#loc246)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc187)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc250)
            %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc193)
            %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc193)
            %7 = cir.const #cir.int<1> : !s32i loc(#loc192)
            %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc193)
            %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc193)
            cir.store %9, %4 : !s8i, !cir.ptr<!s8i> loc(#loc250)
            %10 = cir.load %4 : !cir.ptr<!s8i>, !s8i loc(#loc194)
            cir.call @printHexCharLine(%10) : (!s8i) -> () loc(#loc195)
          } loc(#loc249)
          cir.break loc(#loc196)
        } loc(#loc188)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc198)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc198)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc199)
          cir.break loc(#loc200)
        } loc(#loc197)
        cir.yield loc(#loc185)
      } loc(#loc185)
    } loc(#loc248)
    cir.return loc(#loc169)
  } loc(#loc243)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_add_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":30:24)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":34:19)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc11 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":22:1)
#loc12 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":51:1)
#loc13 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":24:5)
#loc14 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":24:10)
#loc15 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":25:12)
#loc16 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":25:5)
#loc17 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":26:5)
#loc18 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":36:5)
#loc19 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":26:12)
#loc20 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":28:5)
#loc21 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":30:9)
#loc22 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":30:17)
#loc23 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":31:9)
#loc24 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":32:5)
#loc25 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":34:9)
#loc26 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":35:9)
#loc27 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":37:5)
#loc28 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":50:5)
#loc29 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":37:12)
#loc30 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":39:5)
#loc31 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":40:5)
#loc32 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":44:5)
#loc33 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":42:9)
#loc34 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":42:30)
#loc35 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":42:23)
#loc36 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":43:26)
#loc37 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":43:9)
#loc38 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":45:5)
#loc39 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":46:5)
#loc40 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":48:19)
#loc41 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":48:9)
#loc42 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":49:9)
#loc43 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":195:1)
#loc44 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":201:1)
#loc45 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":197:5)
#loc46 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":197:14)
#loc47 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":198:5)
#loc48 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":198:14)
#loc49 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":199:5)
#loc50 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":199:14)
#loc51 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":200:5)
#loc52 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":200:14)
#loc53 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":88:23)
#loc54 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":58:1)
#loc55 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":92:1)
#loc56 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":60:5)
#loc57 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":60:10)
#loc58 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":61:12)
#loc59 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":61:5)
#loc60 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":62:5)
#loc61 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":72:5)
#loc62 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":62:12)
#loc63 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":64:5)
#loc64 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":66:9)
#loc65 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":66:17)
#loc66 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":66:24)
#loc67 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":67:9)
#loc68 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":68:5)
#loc69 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":70:19)
#loc70 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":70:9)
#loc71 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":71:9)
#loc72 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":73:5)
#loc73 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":91:5)
#loc74 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":73:12)
#loc75 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":75:5)
#loc76 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":77:19)
#loc77 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":77:9)
#loc78 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":78:9)
#loc79 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":79:5)
#loc80 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":81:9)
#loc81 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":89:9)
#loc82 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":81:13)
#loc83 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":81:20)
#loc84 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":82:9)
#loc85 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":85:9)
#loc86 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":87:9)
#loc87 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":83:13)
#loc88 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":83:34)
#loc89 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":83:27)
#loc90 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":84:30)
#loc91 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":84:13)
#loc92 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":88:13)
#loc93 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":90:9)
#loc94 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":95:1)
#loc95 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":129:1)
#loc96 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":97:5)
#loc97 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":97:10)
#loc98 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":98:12)
#loc99 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":98:5)
#loc100 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":99:5)
#loc101 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":109:5)
#loc102 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":99:12)
#loc103 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":101:5)
#loc104 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":103:9)
#loc105 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":103:17)
#loc106 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":103:24)
#loc107 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":104:9)
#loc108 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":105:5)
#loc109 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":107:19)
#loc110 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":107:9)
#loc111 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":108:9)
#loc112 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":110:5)
#loc113 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":128:5)
#loc114 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":110:12)
#loc115 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":112:5)
#loc116 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":114:9)
#loc117 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":122:9)
#loc118 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":114:13)
#loc119 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":114:20)
#loc120 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":115:9)
#loc121 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":118:9)
#loc122 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":120:9)
#loc123 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":116:13)
#loc124 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":116:34)
#loc125 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":116:27)
#loc126 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":117:30)
#loc127 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":117:13)
#loc128 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":121:23)
#loc129 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":121:13)
#loc130 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":123:9)
#loc131 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":124:5)
#loc132 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":126:19)
#loc133 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":126:9)
#loc134 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":127:9)
#loc135 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":132:1)
#loc136 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":161:1)
#loc137 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":134:5)
#loc138 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":134:10)
#loc139 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":135:12)
#loc140 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":135:5)
#loc141 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":136:5)
#loc142 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":146:5)
#loc143 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":136:12)
#loc144 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":138:5)
#loc145 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":140:19)
#loc146 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":140:9)
#loc147 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":141:9)
#loc148 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":142:5)
#loc149 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":144:16)
#loc150 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":144:9)
#loc151 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":145:9)
#loc152 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":147:5)
#loc153 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":160:5)
#loc154 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":147:12)
#loc155 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":149:5)
#loc156 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":150:5)
#loc157 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":154:5)
#loc158 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":152:9)
#loc159 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":152:30)
#loc160 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":152:23)
#loc161 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":153:26)
#loc162 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":153:9)
#loc163 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":155:5)
#loc164 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":156:5)
#loc165 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":158:19)
#loc166 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":158:9)
#loc167 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":159:9)
#loc168 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":164:1)
#loc169 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":193:1)
#loc170 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":166:5)
#loc171 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":166:10)
#loc172 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":167:12)
#loc173 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":167:5)
#loc174 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":168:5)
#loc175 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":178:5)
#loc176 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":168:12)
#loc177 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":170:5)
#loc178 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":172:16)
#loc179 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":172:9)
#loc180 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":173:9)
#loc181 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":174:5)
#loc182 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":176:19)
#loc183 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":176:9)
#loc184 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":177:9)
#loc185 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":179:5)
#loc186 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":192:5)
#loc187 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":179:12)
#loc188 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":181:5)
#loc189 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":182:5)
#loc190 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":186:5)
#loc191 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":184:9)
#loc192 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":184:30)
#loc193 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":184:23)
#loc194 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":185:26)
#loc195 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":185:9)
#loc196 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":187:5)
#loc197 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":188:5)
#loc198 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":190:19)
#loc199 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":190:9)
#loc200 = loc("CWE190_Integer_Overflow__char_fscanf_add_15.c":191:9)
#loc201 = loc(fused[#loc1, #loc2])
#loc202 = loc(fused[#loc3, #loc4])
#loc203 = loc(fused[#loc6, #loc7])
#loc204 = loc(fused[#loc9, #loc10])
#loc205 = loc(fused[#loc11, #loc12])
#loc206 = loc(fused[#loc13, #loc14])
#loc207 = loc(fused[#loc16, #loc15])
#loc208 = loc(fused[#loc17, #loc18])
#loc209 = loc(fused[#loc27, #loc28])
#loc210 = loc(fused[#loc31, #loc32])
#loc211 = loc(fused[#loc33, #loc34])
#loc212 = loc(fused[#loc43, #loc44])
#loc213 = loc(fused[#loc45, #loc46])
#loc214 = loc(fused[#loc47, #loc48])
#loc215 = loc(fused[#loc49, #loc50])
#loc216 = loc(fused[#loc51, #loc52])
#loc217 = loc(fused[#loc54, #loc55])
#loc218 = loc(fused[#loc56, #loc57])
#loc219 = loc(fused[#loc59, #loc58])
#loc220 = loc(fused[#loc60, #loc61])
#loc221 = loc(fused[#loc72, #loc73])
#loc222 = loc(fused[#loc80, #loc81])
#loc223 = loc(fused[#loc82, #loc83])
#loc224 = loc(fused[#loc84, #loc85, #loc86, #loc81])
#loc225 = loc(fused[#loc87, #loc88])
#loc226 = loc(fused[#loc94, #loc95])
#loc227 = loc(fused[#loc96, #loc97])
#loc228 = loc(fused[#loc99, #loc98])
#loc229 = loc(fused[#loc100, #loc101])
#loc230 = loc(fused[#loc112, #loc113])
#loc231 = loc(fused[#loc116, #loc117])
#loc232 = loc(fused[#loc118, #loc119])
#loc233 = loc(fused[#loc120, #loc121, #loc122, #loc117])
#loc234 = loc(fused[#loc123, #loc124])
#loc235 = loc(fused[#loc135, #loc136])
#loc236 = loc(fused[#loc137, #loc138])
#loc237 = loc(fused[#loc140, #loc139])
#loc238 = loc(fused[#loc141, #loc142])
#loc239 = loc(fused[#loc150, #loc149])
#loc240 = loc(fused[#loc152, #loc153])
#loc241 = loc(fused[#loc156, #loc157])
#loc242 = loc(fused[#loc158, #loc159])
#loc243 = loc(fused[#loc168, #loc169])
#loc244 = loc(fused[#loc170, #loc171])
#loc245 = loc(fused[#loc173, #loc172])
#loc246 = loc(fused[#loc174, #loc175])
#loc247 = loc(fused[#loc179, #loc178])
#loc248 = loc(fused[#loc185, #loc186])
#loc249 = loc(fused[#loc189, #loc190])
#loc250 = loc(fused[#loc191, #loc192])
