!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":148:10)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":148:14)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":148:20)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":148:32)
#true = #cir.bool<true> : !cir.bool
#loc271 = loc(fused[#loc86, #loc87])
#loc272 = loc(fused[#loc88, #loc89])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc234)
  cir.func private @printIntLine(!s32i) loc(#loc235)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc236)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc238)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc239)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc240)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc16)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc241)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc20)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc243)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc23)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc244)
        cir.condition(%8) loc(#loc24)
      } body {
        cir.scope {
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc26)
          %8 = cir.binop(and, %6, %7) : !s32i loc(#loc26)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc26)
          %10 = cir.ternary(%9, true {
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc26)
            %14 = cir.const #cir.int<30> : !s32i loc(#loc26)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc26)
            %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc26)
            %18 = cir.const #cir.int<15> : !s32i loc(#loc26)
            %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc26)
            %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc26)
            %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc26)
            %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc26)
            cir.yield %23 : !u32i loc(#loc26)
          }, false {
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc26)
            %14 = cir.const #cir.int<30> : !s32i loc(#loc26)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc26)
            %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc26)
            %18 = cir.const #cir.int<15> : !s32i loc(#loc26)
            %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc26)
            %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc26)
            %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc26)
            %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc26)
            %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc26)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc26)
            %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc26)
            %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc26)
            cir.yield %27 : !u32i loc(#loc26)
          }) : (!cir.bool) -> !u32i loc(#loc26)
          %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc26)
          cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc246)
        } loc(#loc245)
        cir.yield loc(#loc19)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc29)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc247)
        cir.yield loc(#loc242)
      } loc(#loc242)
    } loc(#loc242)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc32)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc249)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc34)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc35)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc250)
        cir.condition(%8) loc(#loc36)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc253)
            %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc254)
            %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc254)
            cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc254)
            cir.scope {
              %9 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc46)
              %10 = cir.const #cir.int<0> : !s32i loc(#loc47)
              %11 = cir.cmp(ge, %9, %10) : !s32i, !cir.bool loc(#loc256)
              cir.if %11 {
                %12 = cir.const #cir.int<1> : !s32i loc(#loc51)
                %13 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc52)
                %14 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc53)
                %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc53)
                cir.store %12, %15 : !s32i, !cir.ptr<!s32i> loc(#loc258)
                cir.scope {
                  %16 = cir.const #cir.int<0> : !s32i loc(#loc56)
                  cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc260)
                  cir.for : cond {
                    %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc58)
                    %18 = cir.const #cir.int<10> : !s32i loc(#loc59)
                    %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc261)
                    cir.condition(%19) loc(#loc60)
                  } body {
                    cir.scope {
                      %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc62)
                      %18 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc63)
                      %19 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc63)
                      %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc63)
                      cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc64)
                    } loc(#loc262)
                    cir.yield loc(#loc55)
                  } step {
                    %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc65)
                    %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc66)
                    cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc263)
                    cir.yield loc(#loc259)
                  } loc(#loc259)
                } loc(#loc259)
              } else {
                %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc7)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc7)
                cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc67)
              } loc(#loc257)
            } loc(#loc255)
          } loc(#loc252)
        } loc(#loc251)
        cir.yield loc(#loc31)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc68)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc69)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc264)
        cir.yield loc(#loc248)
      } loc(#loc248)
    } loc(#loc248)
    cir.return loc(#loc9)
  } loc(#loc237)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc266)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc72)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc267)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc74)
    cir.return loc(#loc71)
  } loc(#loc265)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc268)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc269)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc80)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc81)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc83)
  cir.func @main(%arg0: !s32i loc(fused[#loc86, #loc87]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc88, #loc89])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc271)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc272)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc85)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc90)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc90)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc91)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc92)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc92)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc93)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc80)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc80)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17_good : !cir.ptr<!cir.func<!void ()>> loc(#loc273)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17_good() : () -> () loc(#loc95)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc81)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc81)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc97)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc82)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc82)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc98)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc274)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17_bad() : () -> () loc(#loc99)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc83)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc83)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc101)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc102)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc275)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc275)
    cir.return %17 : !s32i loc(#loc275)
  } loc(#loc270)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc104)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc277)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc278)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc279)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc112)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc113)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc280)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc117)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc282)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc119)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc120)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc283)
        cir.condition(%8) loc(#loc121)
      } body {
        cir.scope {
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc123)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc123)
          %8 = cir.binop(and, %6, %7) : !s32i loc(#loc123)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc123)
          %10 = cir.ternary(%9, true {
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc123)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc123)
            %14 = cir.const #cir.int<30> : !s32i loc(#loc123)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc123)
            %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc123)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc123)
            %18 = cir.const #cir.int<15> : !s32i loc(#loc123)
            %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc123)
            %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc123)
            %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc123)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc123)
            %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc123)
            cir.yield %23 : !u32i loc(#loc123)
          }, false {
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc123)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc123)
            %14 = cir.const #cir.int<30> : !s32i loc(#loc123)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc123)
            %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc123)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc123)
            %18 = cir.const #cir.int<15> : !s32i loc(#loc123)
            %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc123)
            %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc123)
            %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc123)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc123)
            %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc123)
            %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc123)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc123)
            %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc123)
            %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc123)
            cir.yield %27 : !u32i loc(#loc123)
          }) : (!cir.bool) -> !u32i loc(#loc123)
          %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc123)
          cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc285)
        } loc(#loc284)
        cir.yield loc(#loc116)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc125)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc126)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc286)
        cir.yield loc(#loc281)
      } loc(#loc281)
    } loc(#loc281)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc129)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc288)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc131)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc132)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc289)
        cir.condition(%8) loc(#loc133)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc292)
            %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc293)
            %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc293)
            cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc293)
            cir.scope {
              %9 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc143)
              %10 = cir.const #cir.int<0> : !s32i loc(#loc144)
              %11 = cir.cmp(ge, %9, %10) : !s32i, !cir.bool loc(#loc295)
              %12 = cir.ternary(%11, true {
                %13 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc146)
                %14 = cir.const #cir.int<10> : !s32i loc(#loc147)
                %15 = cir.cmp(lt, %13, %14) : !s32i, !cir.bool loc(#loc296)
                %16 = cir.ternary(%15, true {
                  %17 = cir.const #true loc(#loc145)
                  cir.yield %17 : !cir.bool loc(#loc145)
                }, false {
                  %17 = cir.const #false loc(#loc145)
                  cir.yield %17 : !cir.bool loc(#loc145)
                }) : (!cir.bool) -> !cir.bool loc(#loc145)
                cir.yield %16 : !cir.bool loc(#loc145)
              }, false {
                %13 = cir.const #false loc(#loc145)
                cir.yield %13 : !cir.bool loc(#loc145)
              }) : (!cir.bool) -> !cir.bool loc(#loc145)
              cir.if %12 {
                %13 = cir.const #cir.int<1> : !s32i loc(#loc152)
                %14 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc153)
                %15 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc154)
                %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc154)
                cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc298)
                cir.scope {
                  %17 = cir.const #cir.int<0> : !s32i loc(#loc157)
                  cir.store %17, %6 : !s32i, !cir.ptr<!s32i> loc(#loc300)
                  cir.for : cond {
                    %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc159)
                    %19 = cir.const #cir.int<10> : !s32i loc(#loc160)
                    %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc301)
                    cir.condition(%20) loc(#loc161)
                  } body {
                    cir.scope {
                      %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc163)
                      %19 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc164)
                      %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc164)
                      %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc164)
                      cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc165)
                    } loc(#loc302)
                    cir.yield loc(#loc156)
                  } step {
                    %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc166)
                    %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc167)
                    cir.store %19, %6 : !s32i, !cir.ptr<!s32i> loc(#loc303)
                    cir.yield loc(#loc299)
                  } loc(#loc299)
                } loc(#loc299)
              } else {
                %13 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc104)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc104)
                cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc168)
              } loc(#loc297)
            } loc(#loc294)
          } loc(#loc291)
        } loc(#loc290)
        cir.yield loc(#loc128)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc169)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc170)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc304)
        cir.yield loc(#loc287)
      } loc(#loc287)
    } loc(#loc287)
    cir.return loc(#loc106)
  } loc(#loc276)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc306)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc307)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc308)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc178)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc179)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc309)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc183)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc311)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc185)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc186)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc312)
        cir.condition(%8) loc(#loc187)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<7> : !s32i loc(#loc189)
          cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc314)
        } loc(#loc313)
        cir.yield loc(#loc182)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc191)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc192)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc315)
        cir.yield loc(#loc310)
      } loc(#loc310)
    } loc(#loc310)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc195)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc317)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc197)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc198)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc318)
        cir.condition(%8) loc(#loc199)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc321)
            %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc322)
            %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc322)
            cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc322)
            cir.scope {
              %9 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc209)
              %10 = cir.const #cir.int<0> : !s32i loc(#loc210)
              %11 = cir.cmp(ge, %9, %10) : !s32i, !cir.bool loc(#loc324)
              cir.if %11 {
                %12 = cir.const #cir.int<1> : !s32i loc(#loc214)
                %13 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc215)
                %14 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc216)
                %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc216)
                cir.store %12, %15 : !s32i, !cir.ptr<!s32i> loc(#loc326)
                cir.scope {
                  %16 = cir.const #cir.int<0> : !s32i loc(#loc219)
                  cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc328)
                  cir.for : cond {
                    %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc221)
                    %18 = cir.const #cir.int<10> : !s32i loc(#loc222)
                    %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc329)
                    cir.condition(%19) loc(#loc223)
                  } body {
                    cir.scope {
                      %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc225)
                      %18 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc226)
                      %19 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc226)
                      %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc226)
                      cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc227)
                    } loc(#loc330)
                    cir.yield loc(#loc218)
                  } step {
                    %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc228)
                    %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc229)
                    cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc331)
                    cir.yield loc(#loc327)
                  } loc(#loc327)
                } loc(#loc327)
              } else {
                %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc230)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc230)
                cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc231)
              } loc(#loc325)
            } loc(#loc323)
          } loc(#loc320)
        } loc(#loc319)
        cir.yield loc(#loc194)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc232)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc233)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc332)
        cir.yield loc(#loc316)
      } loc(#loc316)
    } loc(#loc316)
    cir.return loc(#loc172)
  } loc(#loc305)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":51:27)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":22:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":55:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":24:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":24:9)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":24:11)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":25:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":25:9)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":27:13)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":27:12)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":27:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":28:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":32:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":28:13)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":28:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":28:16)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":28:20)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":28:18)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":29:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":31:16)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":31:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":28:24)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":28:23)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":33:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":54:5)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":33:13)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":33:9)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":33:16)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":33:20)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":33:18)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":34:5)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":35:9)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":53:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":36:13)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":36:17)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":37:13)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":37:34)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":40:13)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":52:13)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":40:17)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":40:25)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":41:13)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":48:13)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":50:13)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":42:32)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":42:24)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":42:17)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":44:17)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":47:17)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":44:25)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":44:21)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":44:28)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":44:32)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":44:30)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":45:17)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":46:41)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":46:34)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":46:21)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":44:37)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":44:36)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":51:17)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":33:24)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":33:23)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":133:1)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":137:1)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":135:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":135:13)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":136:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":136:13)
#loc76 = loc("/usr/include/stdlib.h":575:1)
#loc77 = loc("/usr/include/stdlib.h":575:41)
#loc78 = loc("/usr/include/time.h":76:1)
#loc79 = loc("/usr/include/time.h":76:38)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":153:15)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":155:15)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":158:15)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":160:15)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":148:1)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":163:1)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":149:1)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":151:27)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":151:22)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":151:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":153:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":154:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":154:61)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":155:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":158:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":159:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":159:60)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":160:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":162:12)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":162:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":90:27)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":62:1)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":94:1)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":64:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":64:9)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":64:11)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":65:5)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":65:9)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":67:13)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":67:12)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":67:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":68:5)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":72:5)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":68:13)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":68:9)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":68:16)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":68:20)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":68:18)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":69:5)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":71:16)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":71:9)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":68:24)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":68:23)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":73:5)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":93:5)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":73:13)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":73:9)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":73:16)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":73:20)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":73:18)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":74:5)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":75:9)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":92:9)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":76:13)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":76:17)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":77:13)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":77:34)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":79:13)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":91:13)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":79:17)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":79:25)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":79:27)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":79:30)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":79:38)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":79:40)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":80:13)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":87:13)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":89:13)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":81:32)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":81:24)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":81:17)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":83:17)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":86:17)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":83:25)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":83:21)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":83:28)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":83:32)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":83:30)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":84:17)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":85:41)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":85:34)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":85:21)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":83:37)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":83:36)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":90:17)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":73:24)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":73:23)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":97:1)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":131:1)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":99:5)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":99:9)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":99:11)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":100:5)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":100:9)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":102:13)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":102:12)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":102:5)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":103:5)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":108:5)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":103:13)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":103:9)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":103:16)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":103:20)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":103:18)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":104:5)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":107:16)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":107:9)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":103:24)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":103:23)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":109:5)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":130:5)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":109:13)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":109:9)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":109:16)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":109:20)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":109:18)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":110:5)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":111:9)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":129:9)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":112:13)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":112:17)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":113:13)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":113:34)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":116:13)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":128:13)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":116:17)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":116:25)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":117:13)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":124:13)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":126:13)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":118:32)
#loc215 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":118:24)
#loc216 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":118:17)
#loc217 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":120:17)
#loc218 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":123:17)
#loc219 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":120:25)
#loc220 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":120:21)
#loc221 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":120:28)
#loc222 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":120:32)
#loc223 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":120:30)
#loc224 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":121:17)
#loc225 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":122:41)
#loc226 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":122:34)
#loc227 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":122:21)
#loc228 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":120:37)
#loc229 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":120:36)
#loc230 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":127:27)
#loc231 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":127:17)
#loc232 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":109:24)
#loc233 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c":109:23)
#loc234 = loc(fused[#loc1, #loc2])
#loc235 = loc(fused[#loc3, #loc4])
#loc236 = loc(fused[#loc5, #loc6])
#loc237 = loc(fused[#loc8, #loc9])
#loc238 = loc(fused[#loc10, #loc11])
#loc239 = loc(fused[#loc10, #loc12])
#loc240 = loc(fused[#loc13, #loc14])
#loc241 = loc(fused[#loc17, #loc15])
#loc242 = loc(fused[#loc18, #loc19])
#loc243 = loc(fused[#loc21, #loc20])
#loc244 = loc(fused[#loc22, #loc23])
#loc245 = loc(fused[#loc25, #loc19])
#loc246 = loc(fused[#loc27, #loc26])
#loc247 = loc(fused[#loc29, #loc28])
#loc248 = loc(fused[#loc30, #loc31])
#loc249 = loc(fused[#loc33, #loc32])
#loc250 = loc(fused[#loc34, #loc35])
#loc251 = loc(fused[#loc37, #loc31])
#loc252 = loc(fused[#loc38, #loc39])
#loc253 = loc(fused[#loc40, #loc41])
#loc254 = loc(fused[#loc42, #loc43])
#loc255 = loc(fused[#loc44, #loc45])
#loc256 = loc(fused[#loc46, #loc47])
#loc257 = loc(fused[#loc48, #loc49, #loc50, #loc45])
#loc258 = loc(fused[#loc53, #loc51])
#loc259 = loc(fused[#loc54, #loc55])
#loc260 = loc(fused[#loc57, #loc56])
#loc261 = loc(fused[#loc58, #loc59])
#loc262 = loc(fused[#loc61, #loc55])
#loc263 = loc(fused[#loc66, #loc65])
#loc264 = loc(fused[#loc69, #loc68])
#loc265 = loc(fused[#loc70, #loc71])
#loc266 = loc(fused[#loc72, #loc73])
#loc267 = loc(fused[#loc74, #loc75])
#loc268 = loc(fused[#loc76, #loc77])
#loc269 = loc(fused[#loc78, #loc79])
#loc270 = loc(fused[#loc84, #loc85])
#loc273 = loc(fused[#loc95, #loc96])
#loc274 = loc(fused[#loc99, #loc100])
#loc275 = loc(fused[#loc103, #loc102])
#loc276 = loc(fused[#loc105, #loc106])
#loc277 = loc(fused[#loc107, #loc108])
#loc278 = loc(fused[#loc107, #loc109])
#loc279 = loc(fused[#loc110, #loc111])
#loc280 = loc(fused[#loc114, #loc112])
#loc281 = loc(fused[#loc115, #loc116])
#loc282 = loc(fused[#loc118, #loc117])
#loc283 = loc(fused[#loc119, #loc120])
#loc284 = loc(fused[#loc122, #loc116])
#loc285 = loc(fused[#loc124, #loc123])
#loc286 = loc(fused[#loc126, #loc125])
#loc287 = loc(fused[#loc127, #loc128])
#loc288 = loc(fused[#loc130, #loc129])
#loc289 = loc(fused[#loc131, #loc132])
#loc290 = loc(fused[#loc134, #loc128])
#loc291 = loc(fused[#loc135, #loc136])
#loc292 = loc(fused[#loc137, #loc138])
#loc293 = loc(fused[#loc139, #loc140])
#loc294 = loc(fused[#loc141, #loc142])
#loc295 = loc(fused[#loc143, #loc144])
#loc296 = loc(fused[#loc146, #loc148])
#loc297 = loc(fused[#loc149, #loc150, #loc151, #loc142])
#loc298 = loc(fused[#loc154, #loc152])
#loc299 = loc(fused[#loc155, #loc156])
#loc300 = loc(fused[#loc158, #loc157])
#loc301 = loc(fused[#loc159, #loc160])
#loc302 = loc(fused[#loc162, #loc156])
#loc303 = loc(fused[#loc167, #loc166])
#loc304 = loc(fused[#loc170, #loc169])
#loc305 = loc(fused[#loc171, #loc172])
#loc306 = loc(fused[#loc173, #loc174])
#loc307 = loc(fused[#loc173, #loc175])
#loc308 = loc(fused[#loc176, #loc177])
#loc309 = loc(fused[#loc180, #loc178])
#loc310 = loc(fused[#loc181, #loc182])
#loc311 = loc(fused[#loc184, #loc183])
#loc312 = loc(fused[#loc185, #loc186])
#loc313 = loc(fused[#loc188, #loc182])
#loc314 = loc(fused[#loc190, #loc189])
#loc315 = loc(fused[#loc192, #loc191])
#loc316 = loc(fused[#loc193, #loc194])
#loc317 = loc(fused[#loc196, #loc195])
#loc318 = loc(fused[#loc197, #loc198])
#loc319 = loc(fused[#loc200, #loc194])
#loc320 = loc(fused[#loc201, #loc202])
#loc321 = loc(fused[#loc203, #loc204])
#loc322 = loc(fused[#loc205, #loc206])
#loc323 = loc(fused[#loc207, #loc208])
#loc324 = loc(fused[#loc209, #loc210])
#loc325 = loc(fused[#loc211, #loc212, #loc213, #loc208])
#loc326 = loc(fused[#loc216, #loc214])
#loc327 = loc(fused[#loc217, #loc218])
#loc328 = loc(fused[#loc220, #loc219])
#loc329 = loc(fused[#loc221, #loc222])
#loc330 = loc(fused[#loc224, #loc218])
#loc331 = loc(fused[#loc229, #loc228])
#loc332 = loc(fused[#loc233, #loc232])
