!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__fixed_31.c\00" : !cir.array<!s8i x 39>> : !cir.array<!s8i x 39> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__fixed_31_bad()\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc43)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc9)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc44)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc11)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %5 = cir.binop(sub, %3, %4) nsw : !s32i loc(#loc11)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc45)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc47)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc48)
      %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
      cir.store %8, %6 : !s32i, !cir.ptr<!s32i> loc(#loc47)
      %9 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      cir.store %9, %7 : !s32i, !cir.ptr<!s32i> loc(#loc48)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc3)
      cir.scope {
        cir.scope {
          %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc3)
          %12 = cir.const #cir.int<5> : !s32i loc(#loc3)
          %13 = cir.cmp(gt, %11, %12) : !s32i, !cir.bool loc(#loc3)
          cir.if %13 {
          } else {
            %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc3)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc3)
            %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc3)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc3)
            %18 = cir.const #cir.int<36> : !s32i loc(#loc3)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc3)
            %20 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc3)
            %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc3)
            cir.call @__assert_fail(%15, %17, %19, %21) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc3)
          } loc(#loc3)
        } loc(#loc3)
      } loc(#loc3)
    } loc(#loc46)
    cir.return loc(#loc5)
  } loc(#loc42)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc50)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc22)
    cir.return loc(#loc21)
  } loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc24)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc52)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc30)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc53)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc32)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %5 = cir.binop(add, %3, %4) nsw : !s32i loc(#loc32)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc54)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc56)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc57)
      %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc38)
      cir.store %8, %6 : !s32i, !cir.ptr<!s32i> loc(#loc56)
      %9 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc40)
      cir.store %9, %7 : !s32i, !cir.ptr<!s32i> loc(#loc57)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc24)
      cir.scope {
        cir.scope {
          %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc24)
          %12 = cir.const #cir.int<5> : !s32i loc(#loc24)
          %13 = cir.cmp(gt, %11, %12) : !s32i, !cir.bool loc(#loc24)
          cir.if %13 {
          } else {
            %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc24)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc24)
            %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc24)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc24)
            %18 = cir.const #cir.int<56> : !s32i loc(#loc24)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc24)
            %20 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc24)
            %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc24)
            cir.call @__assert_fail(%15, %17, %19, %21) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc24)
          } loc(#loc24)
        } loc(#loc24)
      } loc(#loc24)
    } loc(#loc55)
    cir.return loc(#loc26)
  } loc(#loc51)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_31.c":0:0)
#loc1 = loc("/usr/include/assert.h":69:1)
#loc2 = loc("/usr/include/assert.h":71:43)
#loc3 = loc("CWE617_Reachable_Assertion__fixed_31.c":36:9)
#loc4 = loc("CWE617_Reachable_Assertion__fixed_31.c":25:1)
#loc5 = loc("CWE617_Reachable_Assertion__fixed_31.c":38:1)
#loc6 = loc("CWE617_Reachable_Assertion__fixed_31.c":27:5)
#loc7 = loc("CWE617_Reachable_Assertion__fixed_31.c":27:9)
#loc8 = loc("CWE617_Reachable_Assertion__fixed_31.c":29:13)
#loc9 = loc("CWE617_Reachable_Assertion__fixed_31.c":29:12)
#loc10 = loc("CWE617_Reachable_Assertion__fixed_31.c":29:5)
#loc11 = loc("CWE617_Reachable_Assertion__fixed_31.c":31:12)
#loc12 = loc("CWE617_Reachable_Assertion__fixed_31.c":31:25)
#loc13 = loc("CWE617_Reachable_Assertion__fixed_31.c":31:5)
#loc14 = loc("CWE617_Reachable_Assertion__fixed_31.c":32:5)
#loc15 = loc("CWE617_Reachable_Assertion__fixed_31.c":37:5)
#loc16 = loc("CWE617_Reachable_Assertion__fixed_31.c":33:9)
#loc17 = loc("CWE617_Reachable_Assertion__fixed_31.c":33:24)
#loc18 = loc("CWE617_Reachable_Assertion__fixed_31.c":34:9)
#loc19 = loc("CWE617_Reachable_Assertion__fixed_31.c":34:20)
#loc20 = loc("CWE617_Reachable_Assertion__fixed_31.c":60:1)
#loc21 = loc("CWE617_Reachable_Assertion__fixed_31.c":63:1)
#loc22 = loc("CWE617_Reachable_Assertion__fixed_31.c":62:5)
#loc23 = loc("CWE617_Reachable_Assertion__fixed_31.c":62:13)
#loc24 = loc("CWE617_Reachable_Assertion__fixed_31.c":56:9)
#loc25 = loc("CWE617_Reachable_Assertion__fixed_31.c":45:1)
#loc26 = loc("CWE617_Reachable_Assertion__fixed_31.c":58:1)
#loc27 = loc("CWE617_Reachable_Assertion__fixed_31.c":47:5)
#loc28 = loc("CWE617_Reachable_Assertion__fixed_31.c":47:9)
#loc29 = loc("CWE617_Reachable_Assertion__fixed_31.c":49:13)
#loc30 = loc("CWE617_Reachable_Assertion__fixed_31.c":49:12)
#loc31 = loc("CWE617_Reachable_Assertion__fixed_31.c":49:5)
#loc32 = loc("CWE617_Reachable_Assertion__fixed_31.c":51:12)
#loc33 = loc("CWE617_Reachable_Assertion__fixed_31.c":51:25)
#loc34 = loc("CWE617_Reachable_Assertion__fixed_31.c":51:5)
#loc35 = loc("CWE617_Reachable_Assertion__fixed_31.c":52:5)
#loc36 = loc("CWE617_Reachable_Assertion__fixed_31.c":57:5)
#loc37 = loc("CWE617_Reachable_Assertion__fixed_31.c":53:9)
#loc38 = loc("CWE617_Reachable_Assertion__fixed_31.c":53:24)
#loc39 = loc("CWE617_Reachable_Assertion__fixed_31.c":54:9)
#loc40 = loc("CWE617_Reachable_Assertion__fixed_31.c":54:20)
#loc41 = loc(fused[#loc1, #loc2])
#loc42 = loc(fused[#loc4, #loc5])
#loc43 = loc(fused[#loc6, #loc7])
#loc44 = loc(fused[#loc10, #loc8])
#loc45 = loc(fused[#loc13, #loc12])
#loc46 = loc(fused[#loc14, #loc15])
#loc47 = loc(fused[#loc16, #loc17])
#loc48 = loc(fused[#loc18, #loc19])
#loc49 = loc(fused[#loc20, #loc21])
#loc50 = loc(fused[#loc22, #loc23])
#loc51 = loc(fused[#loc25, #loc26])
#loc52 = loc(fused[#loc27, #loc28])
#loc53 = loc(fused[#loc31, #loc29])
#loc54 = loc(fused[#loc34, #loc33])
#loc55 = loc(fused[#loc35, #loc36])
#loc56 = loc(fused[#loc37, #loc38])
#loc57 = loc(fused[#loc39, #loc40])
