!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":24:24)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":24:30)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":133:10)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":133:14)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":133:20)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":133:32)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":59:29)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":59:35)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":91:29)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":91:35)
#loc219 = loc(fused[#loc9, #loc10])
#loc247 = loc(fused[#loc81, #loc82])
#loc248 = loc(fused[#loc83, #loc84])
#loc254 = loc(fused[#loc104, #loc105])
#loc277 = loc(fused[#loc163, #loc164])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc215)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc216)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc217)
  cir.func internal private @badSource(%arg0: !cir.ptr<!s32i> loc(fused[#loc9, #loc10])) -> !cir.ptr<!s32i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc219)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["__retval"] {alignment = 8 : i64} loc(#loc8)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc11)
    cir.scope {
      %4 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc215)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc14)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc14)
      cir.if %6 {
        %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc16)
        %8 = cir.const #cir.int<10> : !s32i loc(#loc17)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc17)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc16)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc222)
        cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc223)
        cir.scope {
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc22)
          %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc23)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc23)
          %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !cir.bool loc(#loc225)
          cir.if %15 {
            %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc25)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc26)
            %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc27)
            cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc25)
          } loc(#loc226)
        } loc(#loc224)
      } loc(#loc221)
    } loc(#loc220)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc28)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc227)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc227)
    cir.return %3 : !cir.ptr<!s32i> loc(#loc227)
  } loc(#loc218)
  cir.func private @printIntLine(!s32i) loc(#loc228)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc229)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc231)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc38)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc232)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc40)
    %3 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc215)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc233)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc42)
    %5 = cir.call @badSource(%4) : (!cir.ptr<!s32i>) -> !cir.ptr<!s32i> loc(#loc43)
    cir.store %5, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc234)
    cir.scope {
      %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc236)
      %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc236)
      cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc236)
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc50)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc50)
      %10 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc51)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc51)
      %12 = cir.const #cir.int<10> : !s32i loc(#loc52)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc52)
      %14 = cir.const #cir.int<4> : !u64i loc(#loc237)
      %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc238)
      cir.libc.memcpy %15 bytes from %11 to %9 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc239)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc57)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc58)
      %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc59)
      %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc57)
      cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc60)
      %20 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc61)
      %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc62)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc62)
      cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc61)
    } loc(#loc235)
    cir.return loc(#loc35)
  } loc(#loc230)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc241)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc65)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc242)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc67)
    cir.return loc(#loc64)
  } loc(#loc240)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc243)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc244)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc245)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc76)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc78)
  cir.func @main(%arg0: !s32i loc(fused[#loc81, #loc82]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc83, #loc84])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc247)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc248)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc80)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc85)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc86)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc87)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc87)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc88)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc75)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21_good : !cir.ptr<!cir.func<!void ()>> loc(#loc249)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21_good() : () -> () loc(#loc90)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc76)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc77)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc250)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21_bad() : () -> () loc(#loc94)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc78)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc97)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc251)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc251)
    cir.return %17 : !s32i loc(#loc251)
  } loc(#loc246)
  cir.global "private" internal dsolocal @goodG2B1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc252)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc101)
  cir.func internal private @goodG2B1Source(%arg0: !cir.ptr<!s32i> loc(fused[#loc104, #loc105])) -> !cir.ptr<!s32i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc254)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["__retval"] {alignment = 8 : i64} loc(#loc103)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc106)
    cir.scope {
      %4 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc252)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc109)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc109)
      cir.if %6 {
        %7 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc101)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc101)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc113)
      } else {
        %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc114)
        %8 = cir.const #cir.int<10> : !s32i loc(#loc115)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc115)
        %10 = cir.const #cir.int<4> : !u64i loc(#loc257)
        %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc258)
        %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc114)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc259)
        cir.store %13, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc260)
        cir.scope {
          %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc122)
          %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc123)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc123)
          %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s32i>, !cir.bool loc(#loc262)
          cir.if %17 {
            %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc125)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc126)
            %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc127)
            cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc125)
          } loc(#loc263)
        } loc(#loc261)
      } loc(#loc256)
    } loc(#loc255)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc128)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc264)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc264)
    cir.return %3 : !cir.ptr<!s32i> loc(#loc264)
  } loc(#loc253)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc266)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc134)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc267)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc136)
    %3 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc252)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc268)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc138)
    %5 = cir.call @goodG2B1Source(%4) : (!cir.ptr<!s32i>) -> !cir.ptr<!s32i> loc(#loc139)
    cir.store %5, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc269)
    cir.scope {
      %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc271)
      %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc271)
      cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc271)
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc146)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc146)
      %10 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc147)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc147)
      %12 = cir.const #cir.int<10> : !s32i loc(#loc148)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc148)
      %14 = cir.const #cir.int<4> : !u64i loc(#loc272)
      %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc273)
      cir.libc.memcpy %15 bytes from %11 to %9 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc274)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc153)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc154)
      %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc155)
      %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc153)
      cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc156)
      %20 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc157)
      %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc158)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc158)
      cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc157)
    } loc(#loc270)
    cir.return loc(#loc131)
  } loc(#loc265)
  cir.global "private" internal dsolocal @goodG2B2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc275)
  cir.func internal private @goodG2B2Source(%arg0: !cir.ptr<!s32i> loc(fused[#loc163, #loc164])) -> !cir.ptr<!s32i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc277)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["__retval"] {alignment = 8 : i64} loc(#loc162)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc165)
    cir.scope {
      %4 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc275)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc168)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc168)
      cir.if %6 {
        %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc170)
        %8 = cir.const #cir.int<10> : !s32i loc(#loc171)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc171)
        %10 = cir.const #cir.int<4> : !u64i loc(#loc280)
        %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc281)
        %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc170)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc282)
        cir.store %13, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc283)
        cir.scope {
          %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc178)
          %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc179)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc179)
          %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s32i>, !cir.bool loc(#loc285)
          cir.if %17 {
            %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc181)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc182)
            %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc183)
            cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc181)
          } loc(#loc286)
        } loc(#loc284)
      } loc(#loc279)
    } loc(#loc278)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc184)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc287)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc287)
    cir.return %3 : !cir.ptr<!s32i> loc(#loc287)
  } loc(#loc276)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc289)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc190)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc290)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc192)
    %3 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc275)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc291)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc194)
    %5 = cir.call @goodG2B2Source(%4) : (!cir.ptr<!s32i>) -> !cir.ptr<!s32i> loc(#loc195)
    cir.store %5, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc292)
    cir.scope {
      %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc294)
      %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc294)
      cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc294)
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc202)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc202)
      %10 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc203)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc203)
      %12 = cir.const #cir.int<10> : !s32i loc(#loc204)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc204)
      %14 = cir.const #cir.int<4> : !u64i loc(#loc295)
      %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc296)
      cir.libc.memcpy %15 bytes from %11 to %9 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc297)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc209)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc210)
      %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc211)
      %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc209)
      cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc212)
      %20 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc213)
      %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc214)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc214)
      cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc213)
    } loc(#loc293)
    cir.return loc(#loc187)
  } loc(#loc288)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":22:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":22:24)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":24:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":33:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":25:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":26:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":31:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":26:8)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":27:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":29:23)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":29:30)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":29:32)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":29:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":30:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":30:37)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":30:13)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":30:21)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":30:27)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":30:28)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":30:34)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":30:33)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":32:12)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":32:5)
#loc30 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc31 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc32 = loc("/usr/include/stdlib.h":687:1)
#loc33 = loc("/usr/include/stdlib.h":687:32)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":35:1)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":48:1)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":37:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":37:11)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":38:12)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":38:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":39:17)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":39:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":40:22)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":40:12)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":40:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":40:26)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":41:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":47:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":42:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":42:28)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":44:16)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":44:22)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":44:30)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":44:33)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":44:43)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":44:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":44:44)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":45:22)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":45:27)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":45:28)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":45:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":46:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":46:14)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":117:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":121:1)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":119:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":119:14)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":120:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":120:14)
#loc69 = loc("/usr/include/stdlib.h":575:1)
#loc70 = loc("/usr/include/stdlib.h":575:41)
#loc71 = loc("/usr/include/time.h":76:1)
#loc72 = loc("/usr/include/time.h":76:38)
#loc73 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc74 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":138:15)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":140:15)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":143:15)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":145:15)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":133:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":148:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":134:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":136:27)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":136:22)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":136:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":138:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":139:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":139:62)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":140:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":143:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":144:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":144:61)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":145:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":147:12)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":147:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":55:1)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":55:29)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":64:19)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":59:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":73:1)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":60:1)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":61:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":71:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":61:8)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":62:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":65:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":67:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":64:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":69:23)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":69:30)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":69:33)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":69:43)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":69:44)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":69:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":70:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":70:37)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":70:13)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":70:21)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":70:27)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":70:28)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":70:34)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":70:33)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":72:12)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":72:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":75:1)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":88:1)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":77:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":77:11)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":78:12)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":78:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":79:22)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":79:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":80:27)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":80:12)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":80:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":80:31)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":81:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":87:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":82:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":82:28)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":84:16)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":84:22)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":84:30)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":84:33)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":84:43)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":84:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":84:44)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":85:22)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":85:27)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":85:28)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":85:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":86:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":86:14)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":56:1)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":56:29)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":91:1)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":100:1)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":92:1)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":93:5)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":98:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":93:8)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":94:5)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":96:23)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":96:30)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":96:33)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":96:43)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":96:44)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":96:9)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":97:9)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":97:37)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":97:13)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":97:21)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":97:27)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":97:28)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":97:34)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":97:33)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":99:12)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":99:5)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":102:1)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":115:1)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":104:5)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":104:11)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":105:12)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":105:5)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":106:22)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":106:5)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":107:27)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":107:12)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":107:5)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":107:31)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":108:5)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":114:5)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":109:9)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":109:28)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":111:16)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":111:22)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":111:30)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":111:33)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":111:43)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":111:9)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":111:44)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":112:22)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":112:27)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":112:28)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":112:9)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":113:9)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c":113:14)
#loc215 = loc(fused[#loc1, #loc2])
#loc216 = loc(fused[#loc3, #loc4])
#loc217 = loc(fused[#loc5, #loc6])
#loc218 = loc(fused[#loc7, #loc8])
#loc220 = loc(fused[#loc12, #loc13])
#loc221 = loc(fused[#loc15, #loc13])
#loc222 = loc(fused[#loc16, #loc18])
#loc223 = loc(fused[#loc19, #loc18])
#loc224 = loc(fused[#loc20, #loc21])
#loc225 = loc(fused[#loc22, #loc23])
#loc226 = loc(fused[#loc24, #loc21])
#loc227 = loc(fused[#loc29, #loc28])
#loc228 = loc(fused[#loc30, #loc31])
#loc229 = loc(fused[#loc32, #loc33])
#loc230 = loc(fused[#loc34, #loc35])
#loc231 = loc(fused[#loc36, #loc37])
#loc232 = loc(fused[#loc39, #loc38])
#loc233 = loc(fused[#loc41, #loc40])
#loc234 = loc(fused[#loc44, #loc45])
#loc235 = loc(fused[#loc46, #loc47])
#loc236 = loc(fused[#loc48, #loc49])
#loc237 = loc(fused[#loc53, #loc54])
#loc238 = loc(fused[#loc52, #loc54])
#loc239 = loc(fused[#loc55, #loc56])
#loc240 = loc(fused[#loc63, #loc64])
#loc241 = loc(fused[#loc65, #loc66])
#loc242 = loc(fused[#loc67, #loc68])
#loc243 = loc(fused[#loc69, #loc70])
#loc244 = loc(fused[#loc71, #loc72])
#loc245 = loc(fused[#loc73, #loc74])
#loc246 = loc(fused[#loc79, #loc80])
#loc249 = loc(fused[#loc90, #loc91])
#loc250 = loc(fused[#loc94, #loc95])
#loc251 = loc(fused[#loc98, #loc97])
#loc252 = loc(fused[#loc99, #loc100])
#loc253 = loc(fused[#loc102, #loc103])
#loc255 = loc(fused[#loc107, #loc108])
#loc256 = loc(fused[#loc110, #loc111, #loc112, #loc108])
#loc257 = loc(fused[#loc116, #loc117])
#loc258 = loc(fused[#loc115, #loc117])
#loc259 = loc(fused[#loc114, #loc118])
#loc260 = loc(fused[#loc119, #loc118])
#loc261 = loc(fused[#loc120, #loc121])
#loc262 = loc(fused[#loc122, #loc123])
#loc263 = loc(fused[#loc124, #loc121])
#loc264 = loc(fused[#loc129, #loc128])
#loc265 = loc(fused[#loc130, #loc131])
#loc266 = loc(fused[#loc132, #loc133])
#loc267 = loc(fused[#loc135, #loc134])
#loc268 = loc(fused[#loc137, #loc136])
#loc269 = loc(fused[#loc140, #loc141])
#loc270 = loc(fused[#loc142, #loc143])
#loc271 = loc(fused[#loc144, #loc145])
#loc272 = loc(fused[#loc149, #loc150])
#loc273 = loc(fused[#loc148, #loc150])
#loc274 = loc(fused[#loc151, #loc152])
#loc275 = loc(fused[#loc159, #loc160])
#loc276 = loc(fused[#loc161, #loc162])
#loc278 = loc(fused[#loc166, #loc167])
#loc279 = loc(fused[#loc169, #loc167])
#loc280 = loc(fused[#loc172, #loc173])
#loc281 = loc(fused[#loc171, #loc173])
#loc282 = loc(fused[#loc170, #loc174])
#loc283 = loc(fused[#loc175, #loc174])
#loc284 = loc(fused[#loc176, #loc177])
#loc285 = loc(fused[#loc178, #loc179])
#loc286 = loc(fused[#loc180, #loc177])
#loc287 = loc(fused[#loc185, #loc184])
#loc288 = loc(fused[#loc186, #loc187])
#loc289 = loc(fused[#loc188, #loc189])
#loc290 = loc(fused[#loc191, #loc190])
#loc291 = loc(fused[#loc193, #loc192])
#loc292 = loc(fused[#loc196, #loc197])
#loc293 = loc(fused[#loc198, #loc199])
#loc294 = loc(fused[#loc200, #loc201])
#loc295 = loc(fused[#loc205, #loc206])
#loc296 = loc(fused[#loc204, #loc206])
#loc297 = loc(fused[#loc207, #loc208])
