!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_while_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc80)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc81)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_while_11_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc83)
    cir.br ^bb1 loc(#loc84)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc85)
    %2 = cir.cast(bitcast, %1 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc85)
    %3 = cir.call %2() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc12)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc12)
    cir.brcond %4 ^bb2, ^bb10 loc(#loc86)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc87)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    cir.br ^bb4 loc(#loc88)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc88)
  ^bb5:  // 2 preds: ^bb4, ^bb6
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc20)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc89)
    %8 = cir.const #cir.int<10> : !s32i loc(#loc21)
    %9 = cir.cmp(lt, %6, %8) : !s32i, !cir.bool loc(#loc90)
    cir.brcond %9 ^bb6, ^bb7 loc(#loc22)
  ^bb6:  // pred: ^bb5
    cir.br ^bb5 loc(#loc18)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc18)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc16)
  ^bb9:  // pred: ^bb8
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc5)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc23)
    cir.br ^bb10 loc(#loc11)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc11)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc7)
  } loc(#loc82)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_while_11_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc92)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc26)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc93)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    cir.return loc(#loc25)
  } loc(#loc91)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc94)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc32)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Inside the while statement\00" : !cir.array<!s8i x 27>> : !cir.array<!s8i x 27> {alignment = 1 : i64} loc(#loc33)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc34)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc96)
    cir.br ^bb1 loc(#loc97)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc98)
    %2 = cir.cast(bitcast, %1 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc98)
    %3 = cir.call %2() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc41)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc41)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc99)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc32)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc32)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc46)
    cir.br ^bb13 loc(#loc44)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc100)
  ^bb4:  // pred: ^bb3
    %7 = cir.const #cir.int<0> : !s32i loc(#loc38)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    cir.br ^bb5 loc(#loc101)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc101)
  ^bb6:  // 2 preds: ^bb5, ^bb9
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    %9 = cir.unary(inc, %8) nsw : !s32i, !s32i loc(#loc52)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc102)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc53)
    %11 = cir.cmp(lt, %8, %10) : !s32i, !cir.bool loc(#loc103)
    cir.brcond %11 ^bb7, ^bb10 loc(#loc54)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc104)
  ^bb8:  // pred: ^bb7
    %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 27>> loc(#loc33)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 27>>), !cir.ptr<!s8i> loc(#loc33)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    cir.br ^bb9 loc(#loc50)
  ^bb9:  // pred: ^bb8
    cir.br ^bb6 loc(#loc50)
  ^bb10:  // pred: ^bb6
    cir.br ^bb11 loc(#loc50)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc48)
  ^bb12:  // pred: ^bb11
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc34)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    cir.br ^bb13 loc(#loc40)
  ^bb13:  // 2 preds: ^bb2, ^bb12
    cir.br ^bb14 loc(#loc40)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc36)
  } loc(#loc95)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc106)
    cir.br ^bb1 loc(#loc107)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc108)
    %2 = cir.cast(bitcast, %1 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc108)
    %3 = cir.call %2() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc64)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc64)
    cir.brcond %4 ^bb2, ^bb12 loc(#loc109)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc110)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<0> : !s32i loc(#loc61)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    cir.br ^bb4 loc(#loc111)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc111)
  ^bb5:  // 2 preds: ^bb4, ^bb8
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
    %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc72)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    %8 = cir.const #cir.int<10> : !s32i loc(#loc73)
    %9 = cir.cmp(lt, %6, %8) : !s32i, !cir.bool loc(#loc113)
    cir.brcond %9 ^bb6, ^bb9 loc(#loc74)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc114)
  ^bb7:  // pred: ^bb6
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 27>> loc(#loc76)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 27>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    cir.br ^bb8 loc(#loc70)
  ^bb8:  // pred: ^bb7
    cir.br ^bb5 loc(#loc70)
  ^bb9:  // pred: ^bb5
    cir.br ^bb10 loc(#loc70)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc68)
  ^bb11:  // pred: ^bb10
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc78)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    cir.br ^bb12 loc(#loc63)
  ^bb12:  // 2 preds: ^bb1, ^bb11
    cir.br ^bb13 loc(#loc63)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc59)
  } loc(#loc105)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_while_11.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":31:19)
#loc6 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":20:1)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":33:1)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":26:13)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":26:21)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":22:5)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":32:5)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":22:8)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":22:26)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":23:5)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":25:9)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":30:9)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":27:13)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":29:13)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":27:20)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":27:19)
#loc21 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":27:25)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":27:23)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":31:9)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":78:1)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":82:1)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":80:5)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":80:11)
#loc28 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":81:5)
#loc29 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":81:11)
#loc30 = loc("../../testcasesupport/std_testcase_io.h":50:1)
#loc31 = loc("../../testcasesupport/std_testcase_io.h":50:24)
#loc32 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":45:19)
#loc33 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":54:27)
#loc34 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":57:19)
#loc35 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":40:1)
#loc36 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":59:1)
#loc37 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":51:13)
#loc38 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":51:21)
#loc39 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":42:5)
#loc40 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":58:5)
#loc41 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":42:8)
#loc42 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":42:27)
#loc43 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":43:5)
#loc44 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":46:5)
#loc45 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":48:5)
#loc46 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":45:9)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":50:9)
#loc48 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":56:9)
#loc49 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":52:13)
#loc50 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":55:13)
#loc51 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":52:20)
#loc52 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":52:19)
#loc53 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":52:25)
#loc54 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":52:23)
#loc55 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":53:13)
#loc56 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":54:17)
#loc57 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":57:9)
#loc58 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":62:1)
#loc59 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":76:1)
#loc60 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":68:13)
#loc61 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":68:21)
#loc62 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":64:5)
#loc63 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":75:5)
#loc64 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":64:8)
#loc65 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":64:26)
#loc66 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":65:5)
#loc67 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":67:9)
#loc68 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":73:9)
#loc69 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":69:13)
#loc70 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":72:13)
#loc71 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":69:20)
#loc72 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":69:19)
#loc73 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":69:25)
#loc74 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":69:23)
#loc75 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":70:13)
#loc76 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":71:27)
#loc77 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":71:17)
#loc78 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":74:19)
#loc79 = loc("CWE398_Poor_Code_Quality__empty_while_11.c":74:9)
#loc80 = loc(fused[#loc1, #loc2])
#loc81 = loc(fused[#loc3, #loc4])
#loc82 = loc(fused[#loc6, #loc7])
#loc83 = loc(fused[#loc8, #loc9])
#loc84 = loc(fused[#loc10, #loc11])
#loc85 = loc(fused[#loc12, #loc13])
#loc86 = loc(fused[#loc14, #loc11])
#loc87 = loc(fused[#loc15, #loc16])
#loc88 = loc(fused[#loc17, #loc18])
#loc89 = loc(fused[#loc20, #loc19])
#loc90 = loc(fused[#loc20, #loc21])
#loc91 = loc(fused[#loc24, #loc25])
#loc92 = loc(fused[#loc26, #loc27])
#loc93 = loc(fused[#loc28, #loc29])
#loc94 = loc(fused[#loc30, #loc31])
#loc95 = loc(fused[#loc35, #loc36])
#loc96 = loc(fused[#loc37, #loc38])
#loc97 = loc(fused[#loc39, #loc40])
#loc98 = loc(fused[#loc41, #loc42])
#loc99 = loc(fused[#loc43, #loc44, #loc45, #loc40])
#loc100 = loc(fused[#loc47, #loc48])
#loc101 = loc(fused[#loc49, #loc50])
#loc102 = loc(fused[#loc52, #loc51])
#loc103 = loc(fused[#loc52, #loc53])
#loc104 = loc(fused[#loc55, #loc50])
#loc105 = loc(fused[#loc58, #loc59])
#loc106 = loc(fused[#loc60, #loc61])
#loc107 = loc(fused[#loc62, #loc63])
#loc108 = loc(fused[#loc64, #loc65])
#loc109 = loc(fused[#loc66, #loc63])
#loc110 = loc(fused[#loc67, #loc68])
#loc111 = loc(fused[#loc69, #loc70])
#loc112 = loc(fused[#loc72, #loc71])
#loc113 = loc(fused[#loc72, #loc73])
#loc114 = loc(fused[#loc75, #loc70])
