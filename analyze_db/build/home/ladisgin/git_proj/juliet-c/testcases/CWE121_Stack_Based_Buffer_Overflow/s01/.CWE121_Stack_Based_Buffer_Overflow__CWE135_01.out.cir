!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":93:10)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":93:14)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":93:20)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":93:32)
#loc126 = loc(fused[#loc44, #loc45])
#loc127 = loc(fused[#loc46, #loc47])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc1)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc110)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc111)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc112)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc114)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc12)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc115)
    %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc1)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc1)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc1)
    cir.store %4, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc116)
    cir.scope {
      %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc118)
      %6 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc119)
      %7 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc21)
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc22)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc22)
      %10 = cir.call @strlen(%9) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc21)
      cir.store %10, %5 : !u64i, !cir.ptr<!u64i> loc(#loc118)
      %11 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc20)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc20)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc20)
      %14 = cir.binop(add, %11, %13) : !u64i loc(#loc20)
      %15 = cir.const #cir.int<4> : !u64i loc(#loc20)
      %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc20)
      %17 = cir.alloca !u8i, !cir.ptr<!u8i>, %16 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc20)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc20)
      cir.store %18, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc119)
      %19 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc23)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc23)
      %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc24)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc24)
      %23 = cir.call @wcscpy(%20, %22) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc25)
      %24 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc26)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc26)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc27)
    } loc(#loc117)
    cir.return loc(#loc9)
  } loc(#loc113)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc121)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc122)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    cir.return loc(#loc29)
  } loc(#loc120)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc123)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc124)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc41)
  cir.func @main(%arg0: !s32i loc(fused[#loc44, #loc45]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc46, #loc47])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc126)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc127)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc43)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc48)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc48)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc49)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc50)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc50)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc51)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc38)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_01_good : !cir.ptr<!cir.func<!void ()>> loc(#loc128)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_01_good() : () -> () loc(#loc53)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc39)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc40)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_01_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc129)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_01_bad() : () -> () loc(#loc57)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc41)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc60)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc130)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc130)
    cir.return %17 : !s32i loc(#loc130)
  } loc(#loc125)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc62)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc131)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc133)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc69)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc134)
    %2 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc62)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc62)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc62)
    cir.store %4, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc135)
    cir.scope {
      %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc137)
      %6 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc138)
      %7 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc78)
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc79)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc79)
      %10 = cir.call @strlen(%9) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc78)
      cir.store %10, %5 : !u64i, !cir.ptr<!u64i> loc(#loc137)
      %11 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc77)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc77)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc77)
      %14 = cir.binop(add, %11, %13) : !u64i loc(#loc77)
      %15 = cir.const #cir.int<1> : !s32i loc(#loc77)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc77)
      %17 = cir.binop(mul, %14, %16) : !u64i loc(#loc77)
      %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc77)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc77)
      cir.store %19, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc138)
      %20 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc80)
      %21 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc81)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc81)
      %23 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc82)
      %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc82)
      %25 = cir.call @strcpy(%22, %24) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc80)
      %26 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc83)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc83)
      cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc84)
    } loc(#loc136)
    cir.return loc(#loc66)
  } loc(#loc132)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc139)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc140)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc142)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc93)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc143)
    %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc95)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc95)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc95)
    cir.store %4, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc144)
    cir.scope {
      %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc146)
      %6 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc147)
      %7 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc103)
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc104)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc104)
      %10 = cir.call @wcslen(%9) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc103)
      cir.store %10, %5 : !u64i, !cir.ptr<!u64i> loc(#loc146)
      %11 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc102)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc102)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc102)
      %14 = cir.binop(add, %11, %13) : !u64i loc(#loc102)
      %15 = cir.const #cir.int<4> : !u64i loc(#loc102)
      %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc102)
      %17 = cir.alloca !u8i, !cir.ptr<!u8i>, %16 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc102)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc102)
      cir.store %18, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc147)
      %19 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc105)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc105)
      %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc106)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc106)
      %23 = cir.call @wcscpy(%20, %22) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc107)
      %24 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc108)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc108)
      cir.call @printWLine(%25) : (!cir.ptr<!s32i>) -> () loc(#loc109)
    } loc(#loc145)
    cir.return loc(#loc90)
  } loc(#loc141)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":32:20)
#loc2 = loc("/usr/include/string.h":407:1)
#loc3 = loc("/usr/include/string.h":408:33)
#loc4 = loc("/usr/include/wchar.h":98:1)
#loc5 = loc("/usr/include/wchar.h":100:14)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":27:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":40:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":29:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":29:12)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":30:12)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":30:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":32:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":33:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":39:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":35:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":35:45)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":36:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":36:31)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":35:26)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":35:41)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":37:22)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":37:28)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":37:15)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":38:27)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":38:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":78:1)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":82:1)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":80:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":80:13)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":81:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":81:13)
#loc34 = loc("/usr/include/stdlib.h":575:1)
#loc35 = loc("/usr/include/stdlib.h":575:41)
#loc36 = loc("/usr/include/time.h":76:1)
#loc37 = loc("/usr/include/time.h":76:38)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":98:15)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":100:15)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":103:15)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":105:15)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":93:1)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":108:1)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":94:1)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":96:27)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":96:22)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":96:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":98:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":99:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":99:56)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":100:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":103:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":104:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":104:55)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":105:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":107:12)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":107:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":52:20)
#loc63 = loc("/usr/include/string.h":141:1)
#loc64 = loc("/usr/include/string.h":142:14)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":47:1)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":60:1)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":49:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":49:12)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":50:12)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":50:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":52:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":53:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":59:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":55:9)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":55:45)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":56:9)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":56:31)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":55:26)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":55:41)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":57:15)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":57:22)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":57:28)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":58:27)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":58:9)
#loc85 = loc("/usr/include/wchar.h":247:1)
#loc86 = loc("/usr/include/wchar.h":247:51)
#loc87 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc88 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":63:1)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":76:1)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":65:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":65:12)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":66:12)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":66:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":68:20)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":68:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":69:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":75:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":71:9)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":71:48)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":72:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":72:31)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":71:26)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":71:44)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":73:22)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":73:28)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":73:15)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":74:31)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c":74:9)
#loc110 = loc(fused[#loc2, #loc3])
#loc111 = loc(fused[#loc4, #loc5])
#loc112 = loc(fused[#loc6, #loc7])
#loc113 = loc(fused[#loc8, #loc9])
#loc114 = loc(fused[#loc10, #loc11])
#loc115 = loc(fused[#loc13, #loc12])
#loc116 = loc(fused[#loc14, #loc1])
#loc117 = loc(fused[#loc15, #loc16])
#loc118 = loc(fused[#loc17, #loc18])
#loc119 = loc(fused[#loc19, #loc20])
#loc120 = loc(fused[#loc28, #loc29])
#loc121 = loc(fused[#loc30, #loc31])
#loc122 = loc(fused[#loc32, #loc33])
#loc123 = loc(fused[#loc34, #loc35])
#loc124 = loc(fused[#loc36, #loc37])
#loc125 = loc(fused[#loc42, #loc43])
#loc128 = loc(fused[#loc53, #loc54])
#loc129 = loc(fused[#loc57, #loc58])
#loc130 = loc(fused[#loc61, #loc60])
#loc131 = loc(fused[#loc63, #loc64])
#loc132 = loc(fused[#loc65, #loc66])
#loc133 = loc(fused[#loc67, #loc68])
#loc134 = loc(fused[#loc70, #loc69])
#loc135 = loc(fused[#loc71, #loc62])
#loc136 = loc(fused[#loc72, #loc73])
#loc137 = loc(fused[#loc74, #loc75])
#loc138 = loc(fused[#loc76, #loc77])
#loc139 = loc(fused[#loc85, #loc86])
#loc140 = loc(fused[#loc87, #loc88])
#loc141 = loc(fused[#loc89, #loc90])
#loc142 = loc(fused[#loc91, #loc92])
#loc143 = loc(fused[#loc94, #loc93])
#loc144 = loc(fused[#loc96, #loc95])
#loc145 = loc(fused[#loc97, #loc98])
#loc146 = loc(fused[#loc99, #loc100])
#loc147 = loc(fused[#loc101, #loc102])
