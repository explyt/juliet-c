!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc55 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":176:10)
#loc56 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":176:14)
#loc57 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":176:20)
#loc58 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":176:32)
#loc244 = loc(fused[#loc55, #loc56])
#loc245 = loc(fused[#loc57, #loc58])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_multiply_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc219)
  cir.func private @printIntLine(!s32i) loc(#loc220)
  cir.func no_proto @CWE191_Integer_Underflow__int_min_multiply_11_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc222)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc223)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc225)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc225)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc13)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc13)
      cir.if %5 {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc16)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc16)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc16)
        %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc16)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc227)
      } loc(#loc226)
    } loc(#loc224)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc229)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc229)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc20)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc20)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc26)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc232)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc234)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc29)
            %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc30)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc234)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc31)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc32)
          } loc(#loc233)
        } loc(#loc231)
      } loc(#loc230)
    } loc(#loc228)
    cir.return loc(#loc6)
  } loc(#loc221)
  cir.func no_proto @CWE191_Integer_Underflow__int_min_multiply_11_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc236)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc237)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc238)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc239)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    cir.return loc(#loc34)
  } loc(#loc235)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc240)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc241)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc242)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc52)
  cir.func @main(%arg0: !s32i loc(fused[#loc55, #loc56]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc57, #loc58])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc244)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc245)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc54)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc59)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc59)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc60)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc61)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc61)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc62)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc49)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %8 = cir.get_global @CWE191_Integer_Underflow__int_min_multiply_11_good : !cir.ptr<!cir.func<!void ()>> loc(#loc246)
    cir.call @CWE191_Integer_Underflow__int_min_multiply_11_good() : () -> () loc(#loc64)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc50)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc51)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %13 = cir.get_global @CWE191_Integer_Underflow__int_min_multiply_11_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc247)
    cir.call @CWE191_Integer_Underflow__int_min_multiply_11_bad() : () -> () loc(#loc68)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc52)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc71)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc248)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc248)
    cir.return %17 : !s32i loc(#loc248)
  } loc(#loc243)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc249)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc76)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc251)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc81)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc252)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc254)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc254)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc85)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc85)
      cir.if %5 {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc88)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc88)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc88)
        %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc88)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc256)
      } loc(#loc255)
    } loc(#loc253)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc258)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc258)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc92)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc92)
      cir.if %5 {
        %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc75)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc75)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc97)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc101)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc261)
          cir.if %8 {
            cir.scope {
              %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc105)
              %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc106)
              %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc106)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc106)
              %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc106)
              %14 = cir.const #cir.int<2> : !s32i loc(#loc107)
              %15 = cir.binop(div, %13, %14) : !s32i loc(#loc264)
              %16 = cir.cmp(gt, %9, %15) : !s32i, !cir.bool loc(#loc265)
              cir.if %16 {
                %17 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc267)
                %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc114)
                %19 = cir.const #cir.int<2> : !s32i loc(#loc113)
                %20 = cir.binop(mul, %18, %19) nsw : !s32i loc(#loc114)
                cir.store %20, %17 : !s32i, !cir.ptr<!s32i> loc(#loc267)
                %21 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc115)
                cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc116)
              } else {
                %17 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc76)
                %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc76)
                cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc117)
              } loc(#loc266)
            } loc(#loc263)
          } loc(#loc262)
        } loc(#loc260)
      } loc(#loc259)
    } loc(#loc257)
    cir.return loc(#loc78)
  } loc(#loc250)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc269)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc122)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc270)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc272)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc272)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc126)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc126)
      cir.if %5 {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc129)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc129)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc129)
        %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc129)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc274)
      } loc(#loc273)
    } loc(#loc271)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc276)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc276)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc133)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc133)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc138)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc139)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc279)
          cir.if %8 {
            cir.scope {
              %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc143)
              %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc144)
              %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc144)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc144)
              %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc144)
              %14 = cir.const #cir.int<2> : !s32i loc(#loc145)
              %15 = cir.binop(div, %13, %14) : !s32i loc(#loc282)
              %16 = cir.cmp(gt, %9, %15) : !s32i, !cir.bool loc(#loc283)
              cir.if %16 {
                %17 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc285)
                %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc152)
                %19 = cir.const #cir.int<2> : !s32i loc(#loc151)
                %20 = cir.binop(mul, %18, %19) nsw : !s32i loc(#loc152)
                cir.store %20, %17 : !s32i, !cir.ptr<!s32i> loc(#loc285)
                %21 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc153)
                cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc154)
              } else {
                %17 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc155)
                %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc155)
                cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc156)
              } loc(#loc284)
            } loc(#loc281)
          } loc(#loc280)
        } loc(#loc278)
      } loc(#loc277)
    } loc(#loc275)
    cir.return loc(#loc119)
  } loc(#loc268)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc287)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc161)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc288)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc290)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc290)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc165)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc165)
      cir.if %5 {
        %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc170)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc170)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc171)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc172)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc173)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc292)
      } loc(#loc291)
    } loc(#loc289)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc294)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc294)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc177)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc177)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc182)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc183)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc297)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc299)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc187)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc186)
            %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc187)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc299)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc188)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc189)
          } loc(#loc298)
        } loc(#loc296)
      } loc(#loc295)
    } loc(#loc293)
    cir.return loc(#loc158)
  } loc(#loc286)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc301)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc194)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc302)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc304)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc304)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc198)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc198)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc201)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc202)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc306)
      } loc(#loc305)
    } loc(#loc303)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc308)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc308)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc206)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc206)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc211)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc212)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc311)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc313)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc216)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc215)
            %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc216)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc313)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc217)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc218)
          } loc(#loc312)
        } loc(#loc310)
      } loc(#loc309)
    } loc(#loc307)
    cir.return loc(#loc191)
  } loc(#loc300)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_multiply_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":41:1)
#loc7 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":24:5)
#loc8 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":24:9)
#loc9 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":26:12)
#loc10 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":26:5)
#loc11 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":27:5)
#loc12 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":31:5)
#loc13 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":27:8)
#loc14 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":27:26)
#loc15 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":28:5)
#loc16 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":30:16)
#loc17 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":30:9)
#loc18 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":32:5)
#loc19 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":40:5)
#loc20 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":32:8)
#loc21 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":32:26)
#loc22 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":33:5)
#loc23 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":34:9)
#loc24 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":39:9)
#loc25 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":34:12)
#loc26 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":34:19)
#loc27 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":35:9)
#loc28 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":37:13)
#loc29 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":37:33)
#loc30 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":37:26)
#loc31 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":38:26)
#loc32 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":38:13)
#loc33 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":159:1)
#loc34 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":165:1)
#loc35 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":161:5)
#loc36 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":161:14)
#loc37 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":162:5)
#loc38 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":162:14)
#loc39 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":163:5)
#loc40 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":163:14)
#loc41 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":164:5)
#loc42 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":164:14)
#loc43 = loc("/usr/include/stdlib.h":575:1)
#loc44 = loc("/usr/include/stdlib.h":575:41)
#loc45 = loc("/usr/include/time.h":76:1)
#loc46 = loc("/usr/include/time.h":76:38)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc49 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":181:15)
#loc50 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":183:15)
#loc51 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":186:15)
#loc52 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":188:15)
#loc53 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":176:1)
#loc54 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":191:1)
#loc59 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":177:1)
#loc60 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":179:27)
#loc61 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":179:22)
#loc62 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":179:5)
#loc63 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":181:5)
#loc64 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":182:5)
#loc65 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":182:56)
#loc66 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":183:5)
#loc67 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":186:5)
#loc68 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":187:5)
#loc69 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":187:55)
#loc70 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":188:5)
#loc71 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":190:12)
#loc72 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":190:5)
#loc73 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc74 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc75 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":61:19)
#loc76 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":75:27)
#loc77 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":48:1)
#loc78 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":79:1)
#loc79 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":50:5)
#loc80 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":50:9)
#loc81 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":52:12)
#loc82 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":52:5)
#loc83 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":53:5)
#loc84 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":57:5)
#loc85 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":53:8)
#loc86 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":53:26)
#loc87 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":54:5)
#loc88 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":56:16)
#loc89 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":56:9)
#loc90 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":58:5)
#loc91 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":78:5)
#loc92 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":58:8)
#loc93 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":58:27)
#loc94 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":59:5)
#loc95 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":62:5)
#loc96 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":64:5)
#loc97 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":61:9)
#loc98 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":65:9)
#loc99 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":77:9)
#loc100 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":65:12)
#loc101 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":65:19)
#loc102 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":66:9)
#loc103 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":68:13)
#loc104 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":76:13)
#loc105 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":68:17)
#loc106 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":68:25)
#loc107 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":68:33)
#loc108 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":68:34)
#loc109 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":69:13)
#loc110 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":72:13)
#loc111 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":74:13)
#loc112 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":70:17)
#loc113 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":70:37)
#loc114 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":70:30)
#loc115 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":71:30)
#loc116 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":71:17)
#loc117 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":75:17)
#loc118 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":82:1)
#loc119 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":108:1)
#loc120 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":84:5)
#loc121 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":84:9)
#loc122 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":86:12)
#loc123 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":86:5)
#loc124 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":87:5)
#loc125 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":91:5)
#loc126 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":87:8)
#loc127 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":87:26)
#loc128 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":88:5)
#loc129 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":90:16)
#loc130 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":90:9)
#loc131 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":92:5)
#loc132 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":107:5)
#loc133 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":92:8)
#loc134 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":92:26)
#loc135 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":93:5)
#loc136 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":94:9)
#loc137 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":106:9)
#loc138 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":94:12)
#loc139 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":94:19)
#loc140 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":95:9)
#loc141 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":97:13)
#loc142 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":105:13)
#loc143 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":97:17)
#loc144 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":97:25)
#loc145 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":97:33)
#loc146 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":97:34)
#loc147 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":98:13)
#loc148 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":101:13)
#loc149 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":103:13)
#loc150 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":99:17)
#loc151 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":99:37)
#loc152 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":99:30)
#loc153 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":100:30)
#loc154 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":100:17)
#loc155 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":104:27)
#loc156 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":104:17)
#loc157 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":111:1)
#loc158 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":135:1)
#loc159 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":113:5)
#loc160 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":113:9)
#loc161 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":115:12)
#loc162 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":115:5)
#loc163 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":116:5)
#loc164 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":125:5)
#loc165 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":116:8)
#loc166 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":116:27)
#loc167 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":117:5)
#loc168 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":120:5)
#loc169 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":122:5)
#loc170 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":119:19)
#loc171 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":119:9)
#loc172 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":124:17)
#loc173 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":124:16)
#loc174 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":124:9)
#loc175 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":126:5)
#loc176 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":134:5)
#loc177 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":126:8)
#loc178 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":126:26)
#loc179 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":127:5)
#loc180 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":128:9)
#loc181 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":133:9)
#loc182 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":128:12)
#loc183 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":128:19)
#loc184 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":129:9)
#loc185 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":131:13)
#loc186 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":131:33)
#loc187 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":131:26)
#loc188 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":132:26)
#loc189 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":132:13)
#loc190 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":138:1)
#loc191 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":157:1)
#loc192 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":140:5)
#loc193 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":140:9)
#loc194 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":142:12)
#loc195 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":142:5)
#loc196 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":143:5)
#loc197 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":147:5)
#loc198 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":143:8)
#loc199 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":143:26)
#loc200 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":144:5)
#loc201 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":146:17)
#loc202 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":146:16)
#loc203 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":146:9)
#loc204 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":148:5)
#loc205 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":156:5)
#loc206 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":148:8)
#loc207 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":148:26)
#loc208 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":149:5)
#loc209 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":150:9)
#loc210 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":155:9)
#loc211 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":150:12)
#loc212 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":150:19)
#loc213 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":151:9)
#loc214 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":153:13)
#loc215 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":153:33)
#loc216 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":153:26)
#loc217 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":154:26)
#loc218 = loc("CWE191_Integer_Underflow__int_min_multiply_11.c":154:13)
#loc219 = loc(fused[#loc1, #loc2])
#loc220 = loc(fused[#loc3, #loc4])
#loc221 = loc(fused[#loc5, #loc6])
#loc222 = loc(fused[#loc7, #loc8])
#loc223 = loc(fused[#loc10, #loc9])
#loc224 = loc(fused[#loc11, #loc12])
#loc225 = loc(fused[#loc13, #loc14])
#loc226 = loc(fused[#loc15, #loc12])
#loc227 = loc(fused[#loc17, #loc16])
#loc228 = loc(fused[#loc18, #loc19])
#loc229 = loc(fused[#loc20, #loc21])
#loc230 = loc(fused[#loc22, #loc19])
#loc231 = loc(fused[#loc23, #loc24])
#loc232 = loc(fused[#loc25, #loc26])
#loc233 = loc(fused[#loc27, #loc24])
#loc234 = loc(fused[#loc28, #loc29])
#loc235 = loc(fused[#loc33, #loc34])
#loc236 = loc(fused[#loc35, #loc36])
#loc237 = loc(fused[#loc37, #loc38])
#loc238 = loc(fused[#loc39, #loc40])
#loc239 = loc(fused[#loc41, #loc42])
#loc240 = loc(fused[#loc43, #loc44])
#loc241 = loc(fused[#loc45, #loc46])
#loc242 = loc(fused[#loc47, #loc48])
#loc243 = loc(fused[#loc53, #loc54])
#loc246 = loc(fused[#loc64, #loc65])
#loc247 = loc(fused[#loc68, #loc69])
#loc248 = loc(fused[#loc72, #loc71])
#loc249 = loc(fused[#loc73, #loc74])
#loc250 = loc(fused[#loc77, #loc78])
#loc251 = loc(fused[#loc79, #loc80])
#loc252 = loc(fused[#loc82, #loc81])
#loc253 = loc(fused[#loc83, #loc84])
#loc254 = loc(fused[#loc85, #loc86])
#loc255 = loc(fused[#loc87, #loc84])
#loc256 = loc(fused[#loc89, #loc88])
#loc257 = loc(fused[#loc90, #loc91])
#loc258 = loc(fused[#loc92, #loc93])
#loc259 = loc(fused[#loc94, #loc95, #loc96, #loc91])
#loc260 = loc(fused[#loc98, #loc99])
#loc261 = loc(fused[#loc100, #loc101])
#loc262 = loc(fused[#loc102, #loc99])
#loc263 = loc(fused[#loc103, #loc104])
#loc264 = loc(fused[#loc106, #loc107])
#loc265 = loc(fused[#loc105, #loc108])
#loc266 = loc(fused[#loc109, #loc110, #loc111, #loc104])
#loc267 = loc(fused[#loc112, #loc113])
#loc268 = loc(fused[#loc118, #loc119])
#loc269 = loc(fused[#loc120, #loc121])
#loc270 = loc(fused[#loc123, #loc122])
#loc271 = loc(fused[#loc124, #loc125])
#loc272 = loc(fused[#loc126, #loc127])
#loc273 = loc(fused[#loc128, #loc125])
#loc274 = loc(fused[#loc130, #loc129])
#loc275 = loc(fused[#loc131, #loc132])
#loc276 = loc(fused[#loc133, #loc134])
#loc277 = loc(fused[#loc135, #loc132])
#loc278 = loc(fused[#loc136, #loc137])
#loc279 = loc(fused[#loc138, #loc139])
#loc280 = loc(fused[#loc140, #loc137])
#loc281 = loc(fused[#loc141, #loc142])
#loc282 = loc(fused[#loc144, #loc145])
#loc283 = loc(fused[#loc143, #loc146])
#loc284 = loc(fused[#loc147, #loc148, #loc149, #loc142])
#loc285 = loc(fused[#loc150, #loc151])
#loc286 = loc(fused[#loc157, #loc158])
#loc287 = loc(fused[#loc159, #loc160])
#loc288 = loc(fused[#loc162, #loc161])
#loc289 = loc(fused[#loc163, #loc164])
#loc290 = loc(fused[#loc165, #loc166])
#loc291 = loc(fused[#loc167, #loc168, #loc169, #loc164])
#loc292 = loc(fused[#loc174, #loc172])
#loc293 = loc(fused[#loc175, #loc176])
#loc294 = loc(fused[#loc177, #loc178])
#loc295 = loc(fused[#loc179, #loc176])
#loc296 = loc(fused[#loc180, #loc181])
#loc297 = loc(fused[#loc182, #loc183])
#loc298 = loc(fused[#loc184, #loc181])
#loc299 = loc(fused[#loc185, #loc186])
#loc300 = loc(fused[#loc190, #loc191])
#loc301 = loc(fused[#loc192, #loc193])
#loc302 = loc(fused[#loc195, #loc194])
#loc303 = loc(fused[#loc196, #loc197])
#loc304 = loc(fused[#loc198, #loc199])
#loc305 = loc(fused[#loc200, #loc197])
#loc306 = loc(fused[#loc203, #loc201])
#loc307 = loc(fused[#loc204, #loc205])
#loc308 = loc(fused[#loc206, #loc207])
#loc309 = loc(fused[#loc208, #loc205])
#loc310 = loc(fused[#loc209, #loc210])
#loc311 = loc(fused[#loc211, #loc212])
#loc312 = loc(fused[#loc213, #loc210])
#loc313 = loc(fused[#loc214, #loc215])
