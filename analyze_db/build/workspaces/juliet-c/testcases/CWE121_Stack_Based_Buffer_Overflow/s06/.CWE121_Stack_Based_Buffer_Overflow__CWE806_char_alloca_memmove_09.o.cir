!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant external @GLOBAL_CONST_TRUE : !s32i {alignment = 4 : i64} loc(#loc142)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc143)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc144)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc146)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc147)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc148)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc14)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc14)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc14)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc14)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc14)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc14)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc14)
    cir.store %9, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc148)
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc15)
    cir.store %10, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc149)
    cir.br ^bb1 loc(#loc150)
  ^bb1:  // pred: ^bb0
    %11 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc142)
    %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %13 ^bb2, ^bb3 loc(#loc151)
  ^bb2:  // pred: ^bb1
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc21)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc21)
    %16 = cir.const #cir.int<65> : !s32i loc(#loc22)
    %17 = cir.const #cir.int<100> : !s32i loc(#loc23)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc23)
    %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc23)
    cir.libc.memset %20 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc152)
    %21 = cir.const #cir.int<0> : !s32i loc(#loc27)
    %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc27)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
    %24 = cir.const #cir.int<100> : !s32i loc(#loc29)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc30)
    %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc29)
    %27 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc31)
    cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc153)
    cir.br ^bb3 loc(#loc18)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc18)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc154)
  ^bb5:  // pred: ^bb4
    %28 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc146)
    cir.store %28, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc146)
    %29 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc34)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc34)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc35)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc35)
    %33 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc36)
    %34 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
    %35 = cir.call @strlen(%34) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc36)
    %36 = cir.const #cir.int<1> : !u64i loc(#loc155)
    %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc156)
    cir.libc.memmove %37 bytes from %32 to %30 : !cir.ptr<!void>, !u64i loc(#loc157)
    %38 = cir.const #cir.int<0> : !s32i loc(#loc42)
    %39 = cir.cast(integral, %38 : !s32i), !s8i loc(#loc42)
    %40 = cir.const #cir.int<50> : !s32i loc(#loc43)
    %41 = cir.const #cir.int<1> : !s32i loc(#loc44)
    %42 = cir.binop(sub, %40, %41) nsw : !s32i loc(#loc43)
    %43 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc45)
    %44 = cir.ptr_stride(%43 : !cir.ptr<!s8i>, %42 : !s32i), !cir.ptr<!s8i> loc(#loc45)
    cir.store %39, %44 : !s8i, !cir.ptr<!s8i> loc(#loc158)
    %45 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc47)
    cir.br ^bb6 loc(#loc33)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc8)
  } loc(#loc145)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc160)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc50)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc161)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc52)
    cir.return loc(#loc49)
  } loc(#loc159)
  cir.global "private" constant external @GLOBAL_CONST_FALSE : !s32i {alignment = 4 : i64} loc(#loc162)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc56)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc164)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc165)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc166)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc64)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc64)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc64)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc64)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc64)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc64)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc64)
    cir.store %9, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc166)
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc65)
    cir.store %10, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc167)
    cir.br ^bb1 loc(#loc168)
  ^bb1:  // pred: ^bb0
    %11 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc162)
    %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc69)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc69)
    cir.brcond %13 ^bb2, ^bb3 loc(#loc169)
  ^bb2:  // pred: ^bb1
    %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc56)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    cir.br ^bb4 loc(#loc71)
  ^bb3:  // pred: ^bb1
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc74)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc74)
    %18 = cir.const #cir.int<65> : !s32i loc(#loc75)
    %19 = cir.const #cir.int<50> : !s32i loc(#loc76)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc77)
    %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc76)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc76)
    cir.libc.memset %22 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc170)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc80)
    %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc80)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc81)
    %26 = cir.const #cir.int<50> : !s32i loc(#loc82)
    %27 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %28 = cir.binop(sub, %26, %27) nsw : !s32i loc(#loc82)
    %29 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %28 : !s32i), !cir.ptr<!s8i> loc(#loc84)
    cir.store %24, %29 : !s8i, !cir.ptr<!s8i> loc(#loc171)
    cir.br ^bb4 loc(#loc68)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc68)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc172)
  ^bb6:  // pred: ^bb5
    %30 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc164)
    cir.store %30, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc164)
    %31 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc87)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc87)
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc88)
    %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc88)
    %35 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc89)
    %36 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc90)
    %37 = cir.call @strlen(%36) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc89)
    %38 = cir.const #cir.int<1> : !u64i loc(#loc173)
    %39 = cir.binop(mul, %37, %38) : !u64i loc(#loc174)
    cir.libc.memmove %39 bytes from %34 to %32 : !cir.ptr<!void>, !u64i loc(#loc175)
    %40 = cir.const #cir.int<0> : !s32i loc(#loc95)
    %41 = cir.cast(integral, %40 : !s32i), !s8i loc(#loc95)
    %42 = cir.const #cir.int<50> : !s32i loc(#loc96)
    %43 = cir.const #cir.int<1> : !s32i loc(#loc97)
    %44 = cir.binop(sub, %42, %43) nsw : !s32i loc(#loc96)
    %45 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc98)
    %46 = cir.ptr_stride(%45 : !cir.ptr<!s8i>, %44 : !s32i), !cir.ptr<!s8i> loc(#loc98)
    cir.store %41, %46 : !s8i, !cir.ptr<!s8i> loc(#loc176)
    %47 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc99)
    cir.call @printLine(%47) : (!cir.ptr<!s8i>) -> () loc(#loc100)
    cir.br ^bb7 loc(#loc86)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc58)
  } loc(#loc163)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc178)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc179)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc180)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc108)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc108)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc108)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc108)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc108)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc108)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc108)
    cir.store %9, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc180)
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc109)
    cir.store %10, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc181)
    cir.br ^bb1 loc(#loc182)
  ^bb1:  // pred: ^bb0
    %11 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc142)
    %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc113)
    cir.brcond %13 ^bb2, ^bb3 loc(#loc183)
  ^bb2:  // pred: ^bb1
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc115)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc115)
    %16 = cir.const #cir.int<65> : !s32i loc(#loc116)
    %17 = cir.const #cir.int<50> : !s32i loc(#loc117)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc118)
    %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc117)
    %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc117)
    cir.libc.memset %20 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc184)
    %21 = cir.const #cir.int<0> : !s32i loc(#loc121)
    %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc121)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc122)
    %24 = cir.const #cir.int<50> : !s32i loc(#loc123)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc124)
    %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc123)
    %27 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc125)
    cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc185)
    cir.br ^bb3 loc(#loc112)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc112)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc186)
  ^bb5:  // pred: ^bb4
    %28 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc178)
    cir.store %28, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc178)
    %29 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc128)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc128)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc129)
    %33 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc130)
    %34 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
    %35 = cir.call @strlen(%34) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc130)
    %36 = cir.const #cir.int<1> : !u64i loc(#loc187)
    %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc188)
    cir.libc.memmove %37 bytes from %32 to %30 : !cir.ptr<!void>, !u64i loc(#loc189)
    %38 = cir.const #cir.int<0> : !s32i loc(#loc136)
    %39 = cir.cast(integral, %38 : !s32i), !s8i loc(#loc136)
    %40 = cir.const #cir.int<50> : !s32i loc(#loc137)
    %41 = cir.const #cir.int<1> : !s32i loc(#loc138)
    %42 = cir.binop(sub, %40, %41) nsw : !s32i loc(#loc137)
    %43 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc139)
    %44 = cir.ptr_stride(%43 : !cir.ptr<!s8i>, %42 : !s32i), !cir.ptr<!s8i> loc(#loc139)
    cir.store %39, %44 : !s8i, !cir.ptr<!s8i> loc(#loc190)
    %45 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc140)
    cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc141)
    cir.br ^bb6 loc(#loc127)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc102)
  } loc(#loc177)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":109:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":109:18)
#loc3 = loc("/usr/include/string.h":407:1)
#loc4 = loc("/usr/include/string.h":408:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":23:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":41:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":35:9)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":35:25)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":25:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":25:12)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":26:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":26:33)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":27:12)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":27:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":28:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":33:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":28:8)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":29:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":31:16)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":31:22)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":31:27)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":31:31)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":31:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":31:32)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":32:23)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":32:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":32:14)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":32:18)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":32:19)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":34:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":40:5)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":37:17)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":37:23)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":37:29)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":37:36)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":37:42)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":37:53)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":37:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":37:54)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":38:22)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":38:14)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":38:17)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":38:9)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":39:19)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":39:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":94:1)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":98:1)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":96:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":96:14)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":97:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":97:14)
#loc54 = loc("../../../testcasesupport/std_testcase.h":110:1)
#loc55 = loc("../../../testcasesupport/std_testcase.h":110:18)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":56:19)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":48:1)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":71:1)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":65:9)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":65:25)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":50:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":50:12)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":51:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":51:33)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":52:12)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":52:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":53:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":63:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":53:8)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":54:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":57:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":59:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":56:9)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":61:16)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":61:22)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":61:27)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":61:30)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":61:9)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":61:31)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":62:22)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":62:9)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":62:14)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":62:17)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":62:18)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":64:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":70:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":67:17)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":67:23)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":67:29)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":67:36)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":67:42)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":67:53)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":67:9)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":67:54)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":68:22)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":68:14)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":68:17)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":68:9)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":69:19)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":69:9)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":74:1)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":92:1)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":86:9)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":86:25)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":76:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":76:12)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":77:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":77:33)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":78:12)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":78:5)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":79:5)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":84:5)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":79:8)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":80:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":82:16)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":82:22)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":82:27)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":82:30)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":82:9)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":82:31)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":83:22)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":83:9)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":83:14)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":83:17)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":83:18)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":85:5)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":91:5)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":88:17)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":88:23)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":88:29)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":88:36)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":88:42)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":88:53)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":88:9)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":88:54)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":89:22)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":89:14)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":89:17)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":89:9)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":90:19)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c":90:9)
#loc142 = loc(fused[#loc1, #loc2])
#loc143 = loc(fused[#loc3, #loc4])
#loc144 = loc(fused[#loc5, #loc6])
#loc145 = loc(fused[#loc7, #loc8])
#loc146 = loc(fused[#loc9, #loc10])
#loc147 = loc(fused[#loc11, #loc12])
#loc148 = loc(fused[#loc13, #loc14])
#loc149 = loc(fused[#loc16, #loc15])
#loc150 = loc(fused[#loc17, #loc18])
#loc151 = loc(fused[#loc20, #loc18])
#loc152 = loc(fused[#loc25, #loc26])
#loc153 = loc(fused[#loc28, #loc27])
#loc154 = loc(fused[#loc32, #loc33])
#loc155 = loc(fused[#loc38, #loc39])
#loc156 = loc(fused[#loc36, #loc39])
#loc157 = loc(fused[#loc40, #loc41])
#loc158 = loc(fused[#loc45, #loc42])
#loc159 = loc(fused[#loc48, #loc49])
#loc160 = loc(fused[#loc50, #loc51])
#loc161 = loc(fused[#loc52, #loc53])
#loc162 = loc(fused[#loc54, #loc55])
#loc163 = loc(fused[#loc57, #loc58])
#loc164 = loc(fused[#loc59, #loc60])
#loc165 = loc(fused[#loc61, #loc62])
#loc166 = loc(fused[#loc63, #loc64])
#loc167 = loc(fused[#loc66, #loc65])
#loc168 = loc(fused[#loc67, #loc68])
#loc169 = loc(fused[#loc70, #loc71, #loc72, #loc68])
#loc170 = loc(fused[#loc78, #loc79])
#loc171 = loc(fused[#loc81, #loc80])
#loc172 = loc(fused[#loc85, #loc86])
#loc173 = loc(fused[#loc91, #loc92])
#loc174 = loc(fused[#loc89, #loc92])
#loc175 = loc(fused[#loc93, #loc94])
#loc176 = loc(fused[#loc98, #loc95])
#loc177 = loc(fused[#loc101, #loc102])
#loc178 = loc(fused[#loc103, #loc104])
#loc179 = loc(fused[#loc105, #loc106])
#loc180 = loc(fused[#loc107, #loc108])
#loc181 = loc(fused[#loc110, #loc109])
#loc182 = loc(fused[#loc111, #loc112])
#loc183 = loc(fused[#loc114, #loc112])
#loc184 = loc(fused[#loc119, #loc120])
#loc185 = loc(fused[#loc122, #loc121])
#loc186 = loc(fused[#loc126, #loc127])
#loc187 = loc(fused[#loc132, #loc133])
#loc188 = loc(fused[#loc130, #loc133])
#loc189 = loc(fused[#loc134, #loc135])
#loc190 = loc(fused[#loc139, #loc136])
