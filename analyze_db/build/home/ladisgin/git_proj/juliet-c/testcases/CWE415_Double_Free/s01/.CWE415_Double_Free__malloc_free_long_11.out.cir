!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc65 = loc("CWE415_Double_Free__malloc_free_long_11.c":154:10)
#loc66 = loc("CWE415_Double_Free__malloc_free_long_11.c":154:14)
#loc67 = loc("CWE415_Double_Free__malloc_free_long_11.c":154:20)
#loc68 = loc("CWE415_Double_Free__malloc_free_long_11.c":154:32)
#loc250 = loc(fused[#loc65, #loc66])
#loc251 = loc(fused[#loc67, #loc68])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc221)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc222)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc223)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc224)
  cir.func no_proto @CWE415_Double_Free__malloc_free_long_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc226)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc227)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc229)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc229)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc17)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc17)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc20)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc21)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc21)
        %9 = cir.const #cir.int<8> : !u64i loc(#loc231)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc232)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc20)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc233)
        cir.store %12, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc234)
        cir.scope {
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc28)
          %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc29)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc29)
          %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s64i>, !cir.bool loc(#loc236)
          cir.if %19 {
            %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc31)
            %21 = cir.const #cir.int<1> : !s32i loc(#loc32)
            %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc33)
            cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc31)
          } loc(#loc237)
        } loc(#loc235)
        %13 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc34)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc35)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc35)
        cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc34)
      } loc(#loc230)
    } loc(#loc228)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc239)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc239)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc38)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc38)
      cir.if %5 {
        %6 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc41)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc42)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc42)
        cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc41)
      } loc(#loc240)
    } loc(#loc238)
    cir.return loc(#loc10)
  } loc(#loc225)
  cir.func no_proto @CWE415_Double_Free__malloc_free_long_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc242)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc243)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc244)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc49)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc245)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    cir.return loc(#loc44)
  } loc(#loc241)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc246)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc247)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc248)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc62)
  cir.func @main(%arg0: !s32i loc(fused[#loc65, #loc66]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc67, #loc68])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc250)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc251)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc64)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc69)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc69)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc70)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc71)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc71)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc72)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc59)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %8 = cir.get_global @CWE415_Double_Free__malloc_free_long_11_good : !cir.ptr<!cir.func<!void ()>> loc(#loc252)
    cir.call @CWE415_Double_Free__malloc_free_long_11_good() : () -> () loc(#loc74)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc60)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc61)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %13 = cir.get_global @CWE415_Double_Free__malloc_free_long_11_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc253)
    cir.call @CWE415_Double_Free__malloc_free_long_11_bad() : () -> () loc(#loc78)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc62)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc81)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc254)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc254)
    cir.return %17 : !s32i loc(#loc254)
  } loc(#loc249)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc255)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc85)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc257)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc90)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc258)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc260)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc260)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc94)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc94)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc97)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc98)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc98)
        %9 = cir.const #cir.int<8> : !u64i loc(#loc262)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc263)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc97)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc264)
        cir.store %12, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc265)
        cir.scope {
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc105)
          %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc106)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc106)
          %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s64i>, !cir.bool loc(#loc267)
          cir.if %19 {
            %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc108)
            %21 = cir.const #cir.int<1> : !s32i loc(#loc109)
            %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc110)
            cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc108)
          } loc(#loc268)
        } loc(#loc266)
        %13 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc111)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc112)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc112)
        cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc111)
      } loc(#loc261)
    } loc(#loc259)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc270)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc270)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc115)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc115)
      cir.if %5 {
        %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc85)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc85)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc120)
      } else {
      } loc(#loc271)
    } loc(#loc269)
    cir.return loc(#loc87)
  } loc(#loc256)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc273)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc125)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc274)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc276)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc276)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc129)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc129)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc132)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc133)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc133)
        %9 = cir.const #cir.int<8> : !u64i loc(#loc278)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc279)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc132)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc280)
        cir.store %12, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc281)
        cir.scope {
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc140)
          %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc141)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc141)
          %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s64i>, !cir.bool loc(#loc283)
          cir.if %19 {
            %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc143)
            %21 = cir.const #cir.int<1> : !s32i loc(#loc144)
            %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc145)
            cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc143)
          } loc(#loc284)
        } loc(#loc282)
        %13 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc146)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc147)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc147)
        cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc146)
      } loc(#loc277)
    } loc(#loc275)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc286)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc286)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc150)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc150)
      cir.if %5 {
      } loc(#loc287)
    } loc(#loc285)
    cir.return loc(#loc122)
  } loc(#loc272)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc289)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc157)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc290)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc292)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc292)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc161)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc161)
      cir.if %5 {
        %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc166)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc166)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc167)
      } else {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc168)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc169)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc169)
        %9 = cir.const #cir.int<8> : !u64i loc(#loc294)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc295)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc168)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc296)
        cir.store %12, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc297)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc176)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc177)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc177)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s64i>, !cir.bool loc(#loc299)
          cir.if %16 {
            %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc179)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc180)
            %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc181)
            cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc179)
          } loc(#loc300)
        } loc(#loc298)
      } loc(#loc293)
    } loc(#loc291)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc302)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc302)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc184)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc184)
      cir.if %5 {
        %6 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc187)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc188)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc188)
        cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc187)
      } loc(#loc303)
    } loc(#loc301)
    cir.return loc(#loc154)
  } loc(#loc288)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc305)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc193)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc306)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc308)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc308)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc197)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc197)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc200)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc201)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc201)
        %9 = cir.const #cir.int<8> : !u64i loc(#loc310)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc311)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc200)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc312)
        cir.store %12, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc313)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc208)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc209)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc209)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s64i>, !cir.bool loc(#loc315)
          cir.if %16 {
            %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc211)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc212)
            %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc213)
            cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc211)
          } loc(#loc316)
        } loc(#loc314)
      } loc(#loc309)
    } loc(#loc307)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc318)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc318)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc216)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc216)
      cir.if %5 {
        %6 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc219)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc220)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc220)
        cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc219)
      } loc(#loc319)
    } loc(#loc317)
    cir.return loc(#loc190)
  } loc(#loc304)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE415_Double_Free__malloc_free_long_11.c":24:1)
#loc10 = loc("CWE415_Double_Free__malloc_free_long_11.c":41:1)
#loc11 = loc("CWE415_Double_Free__malloc_free_long_11.c":26:5)
#loc12 = loc("CWE415_Double_Free__malloc_free_long_11.c":26:12)
#loc13 = loc("CWE415_Double_Free__malloc_free_long_11.c":28:12)
#loc14 = loc("CWE415_Double_Free__malloc_free_long_11.c":28:5)
#loc15 = loc("CWE415_Double_Free__malloc_free_long_11.c":29:5)
#loc16 = loc("CWE415_Double_Free__malloc_free_long_11.c":35:5)
#loc17 = loc("CWE415_Double_Free__malloc_free_long_11.c":29:8)
#loc18 = loc("CWE415_Double_Free__malloc_free_long_11.c":29:26)
#loc19 = loc("CWE415_Double_Free__malloc_free_long_11.c":30:5)
#loc20 = loc("CWE415_Double_Free__malloc_free_long_11.c":31:24)
#loc21 = loc("CWE415_Double_Free__malloc_free_long_11.c":31:31)
#loc22 = loc("CWE415_Double_Free__malloc_free_long_11.c":31:35)
#loc23 = loc("CWE415_Double_Free__malloc_free_long_11.c":31:46)
#loc24 = loc("CWE415_Double_Free__malloc_free_long_11.c":31:47)
#loc25 = loc("CWE415_Double_Free__malloc_free_long_11.c":31:9)
#loc26 = loc("CWE415_Double_Free__malloc_free_long_11.c":32:9)
#loc27 = loc("CWE415_Double_Free__malloc_free_long_11.c":32:37)
#loc28 = loc("CWE415_Double_Free__malloc_free_long_11.c":32:13)
#loc29 = loc("CWE415_Double_Free__malloc_free_long_11.c":32:21)
#loc30 = loc("CWE415_Double_Free__malloc_free_long_11.c":32:27)
#loc31 = loc("CWE415_Double_Free__malloc_free_long_11.c":32:28)
#loc32 = loc("CWE415_Double_Free__malloc_free_long_11.c":32:34)
#loc33 = loc("CWE415_Double_Free__malloc_free_long_11.c":32:33)
#loc34 = loc("CWE415_Double_Free__malloc_free_long_11.c":34:9)
#loc35 = loc("CWE415_Double_Free__malloc_free_long_11.c":34:14)
#loc36 = loc("CWE415_Double_Free__malloc_free_long_11.c":36:5)
#loc37 = loc("CWE415_Double_Free__malloc_free_long_11.c":40:5)
#loc38 = loc("CWE415_Double_Free__malloc_free_long_11.c":36:8)
#loc39 = loc("CWE415_Double_Free__malloc_free_long_11.c":36:26)
#loc40 = loc("CWE415_Double_Free__malloc_free_long_11.c":37:5)
#loc41 = loc("CWE415_Double_Free__malloc_free_long_11.c":39:9)
#loc42 = loc("CWE415_Double_Free__malloc_free_long_11.c":39:14)
#loc43 = loc("CWE415_Double_Free__malloc_free_long_11.c":137:1)
#loc44 = loc("CWE415_Double_Free__malloc_free_long_11.c":143:1)
#loc45 = loc("CWE415_Double_Free__malloc_free_long_11.c":139:5)
#loc46 = loc("CWE415_Double_Free__malloc_free_long_11.c":139:14)
#loc47 = loc("CWE415_Double_Free__malloc_free_long_11.c":140:5)
#loc48 = loc("CWE415_Double_Free__malloc_free_long_11.c":140:14)
#loc49 = loc("CWE415_Double_Free__malloc_free_long_11.c":141:5)
#loc50 = loc("CWE415_Double_Free__malloc_free_long_11.c":141:14)
#loc51 = loc("CWE415_Double_Free__malloc_free_long_11.c":142:5)
#loc52 = loc("CWE415_Double_Free__malloc_free_long_11.c":142:14)
#loc53 = loc("/usr/include/stdlib.h":575:1)
#loc54 = loc("/usr/include/stdlib.h":575:41)
#loc55 = loc("/usr/include/time.h":76:1)
#loc56 = loc("/usr/include/time.h":76:38)
#loc57 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc58 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc59 = loc("CWE415_Double_Free__malloc_free_long_11.c":159:15)
#loc60 = loc("CWE415_Double_Free__malloc_free_long_11.c":161:15)
#loc61 = loc("CWE415_Double_Free__malloc_free_long_11.c":164:15)
#loc62 = loc("CWE415_Double_Free__malloc_free_long_11.c":166:15)
#loc63 = loc("CWE415_Double_Free__malloc_free_long_11.c":154:1)
#loc64 = loc("CWE415_Double_Free__malloc_free_long_11.c":169:1)
#loc69 = loc("CWE415_Double_Free__malloc_free_long_11.c":155:1)
#loc70 = loc("CWE415_Double_Free__malloc_free_long_11.c":157:27)
#loc71 = loc("CWE415_Double_Free__malloc_free_long_11.c":157:22)
#loc72 = loc("CWE415_Double_Free__malloc_free_long_11.c":157:5)
#loc73 = loc("CWE415_Double_Free__malloc_free_long_11.c":159:5)
#loc74 = loc("CWE415_Double_Free__malloc_free_long_11.c":160:5)
#loc75 = loc("CWE415_Double_Free__malloc_free_long_11.c":160:50)
#loc76 = loc("CWE415_Double_Free__malloc_free_long_11.c":161:5)
#loc77 = loc("CWE415_Double_Free__malloc_free_long_11.c":164:5)
#loc78 = loc("CWE415_Double_Free__malloc_free_long_11.c":165:5)
#loc79 = loc("CWE415_Double_Free__malloc_free_long_11.c":165:49)
#loc80 = loc("CWE415_Double_Free__malloc_free_long_11.c":166:5)
#loc81 = loc("CWE415_Double_Free__malloc_free_long_11.c":168:12)
#loc82 = loc("CWE415_Double_Free__malloc_free_long_11.c":168:5)
#loc83 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc84 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc85 = loc("CWE415_Double_Free__malloc_free_long_11.c":63:19)
#loc86 = loc("CWE415_Double_Free__malloc_free_long_11.c":48:1)
#loc87 = loc("CWE415_Double_Free__malloc_free_long_11.c":71:1)
#loc88 = loc("CWE415_Double_Free__malloc_free_long_11.c":50:5)
#loc89 = loc("CWE415_Double_Free__malloc_free_long_11.c":50:12)
#loc90 = loc("CWE415_Double_Free__malloc_free_long_11.c":52:12)
#loc91 = loc("CWE415_Double_Free__malloc_free_long_11.c":52:5)
#loc92 = loc("CWE415_Double_Free__malloc_free_long_11.c":53:5)
#loc93 = loc("CWE415_Double_Free__malloc_free_long_11.c":59:5)
#loc94 = loc("CWE415_Double_Free__malloc_free_long_11.c":53:8)
#loc95 = loc("CWE415_Double_Free__malloc_free_long_11.c":53:26)
#loc96 = loc("CWE415_Double_Free__malloc_free_long_11.c":54:5)
#loc97 = loc("CWE415_Double_Free__malloc_free_long_11.c":55:24)
#loc98 = loc("CWE415_Double_Free__malloc_free_long_11.c":55:31)
#loc99 = loc("CWE415_Double_Free__malloc_free_long_11.c":55:35)
#loc100 = loc("CWE415_Double_Free__malloc_free_long_11.c":55:46)
#loc101 = loc("CWE415_Double_Free__malloc_free_long_11.c":55:47)
#loc102 = loc("CWE415_Double_Free__malloc_free_long_11.c":55:9)
#loc103 = loc("CWE415_Double_Free__malloc_free_long_11.c":56:9)
#loc104 = loc("CWE415_Double_Free__malloc_free_long_11.c":56:37)
#loc105 = loc("CWE415_Double_Free__malloc_free_long_11.c":56:13)
#loc106 = loc("CWE415_Double_Free__malloc_free_long_11.c":56:21)
#loc107 = loc("CWE415_Double_Free__malloc_free_long_11.c":56:27)
#loc108 = loc("CWE415_Double_Free__malloc_free_long_11.c":56:28)
#loc109 = loc("CWE415_Double_Free__malloc_free_long_11.c":56:34)
#loc110 = loc("CWE415_Double_Free__malloc_free_long_11.c":56:33)
#loc111 = loc("CWE415_Double_Free__malloc_free_long_11.c":58:9)
#loc112 = loc("CWE415_Double_Free__malloc_free_long_11.c":58:14)
#loc113 = loc("CWE415_Double_Free__malloc_free_long_11.c":60:5)
#loc114 = loc("CWE415_Double_Free__malloc_free_long_11.c":70:5)
#loc115 = loc("CWE415_Double_Free__malloc_free_long_11.c":60:8)
#loc116 = loc("CWE415_Double_Free__malloc_free_long_11.c":60:27)
#loc117 = loc("CWE415_Double_Free__malloc_free_long_11.c":61:5)
#loc118 = loc("CWE415_Double_Free__malloc_free_long_11.c":64:5)
#loc119 = loc("CWE415_Double_Free__malloc_free_long_11.c":66:5)
#loc120 = loc("CWE415_Double_Free__malloc_free_long_11.c":63:9)
#loc121 = loc("CWE415_Double_Free__malloc_free_long_11.c":74:1)
#loc122 = loc("CWE415_Double_Free__malloc_free_long_11.c":92:1)
#loc123 = loc("CWE415_Double_Free__malloc_free_long_11.c":76:5)
#loc124 = loc("CWE415_Double_Free__malloc_free_long_11.c":76:12)
#loc125 = loc("CWE415_Double_Free__malloc_free_long_11.c":78:12)
#loc126 = loc("CWE415_Double_Free__malloc_free_long_11.c":78:5)
#loc127 = loc("CWE415_Double_Free__malloc_free_long_11.c":79:5)
#loc128 = loc("CWE415_Double_Free__malloc_free_long_11.c":85:5)
#loc129 = loc("CWE415_Double_Free__malloc_free_long_11.c":79:8)
#loc130 = loc("CWE415_Double_Free__malloc_free_long_11.c":79:26)
#loc131 = loc("CWE415_Double_Free__malloc_free_long_11.c":80:5)
#loc132 = loc("CWE415_Double_Free__malloc_free_long_11.c":81:24)
#loc133 = loc("CWE415_Double_Free__malloc_free_long_11.c":81:31)
#loc134 = loc("CWE415_Double_Free__malloc_free_long_11.c":81:35)
#loc135 = loc("CWE415_Double_Free__malloc_free_long_11.c":81:46)
#loc136 = loc("CWE415_Double_Free__malloc_free_long_11.c":81:47)
#loc137 = loc("CWE415_Double_Free__malloc_free_long_11.c":81:9)
#loc138 = loc("CWE415_Double_Free__malloc_free_long_11.c":82:9)
#loc139 = loc("CWE415_Double_Free__malloc_free_long_11.c":82:37)
#loc140 = loc("CWE415_Double_Free__malloc_free_long_11.c":82:13)
#loc141 = loc("CWE415_Double_Free__malloc_free_long_11.c":82:21)
#loc142 = loc("CWE415_Double_Free__malloc_free_long_11.c":82:27)
#loc143 = loc("CWE415_Double_Free__malloc_free_long_11.c":82:28)
#loc144 = loc("CWE415_Double_Free__malloc_free_long_11.c":82:34)
#loc145 = loc("CWE415_Double_Free__malloc_free_long_11.c":82:33)
#loc146 = loc("CWE415_Double_Free__malloc_free_long_11.c":84:9)
#loc147 = loc("CWE415_Double_Free__malloc_free_long_11.c":84:14)
#loc148 = loc("CWE415_Double_Free__malloc_free_long_11.c":86:5)
#loc149 = loc("CWE415_Double_Free__malloc_free_long_11.c":91:5)
#loc150 = loc("CWE415_Double_Free__malloc_free_long_11.c":86:8)
#loc151 = loc("CWE415_Double_Free__malloc_free_long_11.c":86:26)
#loc152 = loc("CWE415_Double_Free__malloc_free_long_11.c":87:5)
#loc153 = loc("CWE415_Double_Free__malloc_free_long_11.c":95:1)
#loc154 = loc("CWE415_Double_Free__malloc_free_long_11.c":116:1)
#loc155 = loc("CWE415_Double_Free__malloc_free_long_11.c":97:5)
#loc156 = loc("CWE415_Double_Free__malloc_free_long_11.c":97:12)
#loc157 = loc("CWE415_Double_Free__malloc_free_long_11.c":99:12)
#loc158 = loc("CWE415_Double_Free__malloc_free_long_11.c":99:5)
#loc159 = loc("CWE415_Double_Free__malloc_free_long_11.c":100:5)
#loc160 = loc("CWE415_Double_Free__malloc_free_long_11.c":110:5)
#loc161 = loc("CWE415_Double_Free__malloc_free_long_11.c":100:8)
#loc162 = loc("CWE415_Double_Free__malloc_free_long_11.c":100:27)
#loc163 = loc("CWE415_Double_Free__malloc_free_long_11.c":101:5)
#loc164 = loc("CWE415_Double_Free__malloc_free_long_11.c":104:5)
#loc165 = loc("CWE415_Double_Free__malloc_free_long_11.c":106:5)
#loc166 = loc("CWE415_Double_Free__malloc_free_long_11.c":103:19)
#loc167 = loc("CWE415_Double_Free__malloc_free_long_11.c":103:9)
#loc168 = loc("CWE415_Double_Free__malloc_free_long_11.c":107:24)
#loc169 = loc("CWE415_Double_Free__malloc_free_long_11.c":107:31)
#loc170 = loc("CWE415_Double_Free__malloc_free_long_11.c":107:35)
#loc171 = loc("CWE415_Double_Free__malloc_free_long_11.c":107:46)
#loc172 = loc("CWE415_Double_Free__malloc_free_long_11.c":107:47)
#loc173 = loc("CWE415_Double_Free__malloc_free_long_11.c":107:9)
#loc174 = loc("CWE415_Double_Free__malloc_free_long_11.c":108:9)
#loc175 = loc("CWE415_Double_Free__malloc_free_long_11.c":108:37)
#loc176 = loc("CWE415_Double_Free__malloc_free_long_11.c":108:13)
#loc177 = loc("CWE415_Double_Free__malloc_free_long_11.c":108:21)
#loc178 = loc("CWE415_Double_Free__malloc_free_long_11.c":108:27)
#loc179 = loc("CWE415_Double_Free__malloc_free_long_11.c":108:28)
#loc180 = loc("CWE415_Double_Free__malloc_free_long_11.c":108:34)
#loc181 = loc("CWE415_Double_Free__malloc_free_long_11.c":108:33)
#loc182 = loc("CWE415_Double_Free__malloc_free_long_11.c":111:5)
#loc183 = loc("CWE415_Double_Free__malloc_free_long_11.c":115:5)
#loc184 = loc("CWE415_Double_Free__malloc_free_long_11.c":111:8)
#loc185 = loc("CWE415_Double_Free__malloc_free_long_11.c":111:26)
#loc186 = loc("CWE415_Double_Free__malloc_free_long_11.c":112:5)
#loc187 = loc("CWE415_Double_Free__malloc_free_long_11.c":114:9)
#loc188 = loc("CWE415_Double_Free__malloc_free_long_11.c":114:14)
#loc189 = loc("CWE415_Double_Free__malloc_free_long_11.c":119:1)
#loc190 = loc("CWE415_Double_Free__malloc_free_long_11.c":135:1)
#loc191 = loc("CWE415_Double_Free__malloc_free_long_11.c":121:5)
#loc192 = loc("CWE415_Double_Free__malloc_free_long_11.c":121:12)
#loc193 = loc("CWE415_Double_Free__malloc_free_long_11.c":123:12)
#loc194 = loc("CWE415_Double_Free__malloc_free_long_11.c":123:5)
#loc195 = loc("CWE415_Double_Free__malloc_free_long_11.c":124:5)
#loc196 = loc("CWE415_Double_Free__malloc_free_long_11.c":129:5)
#loc197 = loc("CWE415_Double_Free__malloc_free_long_11.c":124:8)
#loc198 = loc("CWE415_Double_Free__malloc_free_long_11.c":124:26)
#loc199 = loc("CWE415_Double_Free__malloc_free_long_11.c":125:5)
#loc200 = loc("CWE415_Double_Free__malloc_free_long_11.c":126:24)
#loc201 = loc("CWE415_Double_Free__malloc_free_long_11.c":126:31)
#loc202 = loc("CWE415_Double_Free__malloc_free_long_11.c":126:35)
#loc203 = loc("CWE415_Double_Free__malloc_free_long_11.c":126:46)
#loc204 = loc("CWE415_Double_Free__malloc_free_long_11.c":126:47)
#loc205 = loc("CWE415_Double_Free__malloc_free_long_11.c":126:9)
#loc206 = loc("CWE415_Double_Free__malloc_free_long_11.c":127:9)
#loc207 = loc("CWE415_Double_Free__malloc_free_long_11.c":127:37)
#loc208 = loc("CWE415_Double_Free__malloc_free_long_11.c":127:13)
#loc209 = loc("CWE415_Double_Free__malloc_free_long_11.c":127:21)
#loc210 = loc("CWE415_Double_Free__malloc_free_long_11.c":127:27)
#loc211 = loc("CWE415_Double_Free__malloc_free_long_11.c":127:28)
#loc212 = loc("CWE415_Double_Free__malloc_free_long_11.c":127:34)
#loc213 = loc("CWE415_Double_Free__malloc_free_long_11.c":127:33)
#loc214 = loc("CWE415_Double_Free__malloc_free_long_11.c":130:5)
#loc215 = loc("CWE415_Double_Free__malloc_free_long_11.c":134:5)
#loc216 = loc("CWE415_Double_Free__malloc_free_long_11.c":130:8)
#loc217 = loc("CWE415_Double_Free__malloc_free_long_11.c":130:26)
#loc218 = loc("CWE415_Double_Free__malloc_free_long_11.c":131:5)
#loc219 = loc("CWE415_Double_Free__malloc_free_long_11.c":133:9)
#loc220 = loc("CWE415_Double_Free__malloc_free_long_11.c":133:14)
#loc221 = loc(fused[#loc1, #loc2])
#loc222 = loc(fused[#loc3, #loc4])
#loc223 = loc(fused[#loc5, #loc6])
#loc224 = loc(fused[#loc7, #loc8])
#loc225 = loc(fused[#loc9, #loc10])
#loc226 = loc(fused[#loc11, #loc12])
#loc227 = loc(fused[#loc14, #loc13])
#loc228 = loc(fused[#loc15, #loc16])
#loc229 = loc(fused[#loc17, #loc18])
#loc230 = loc(fused[#loc19, #loc16])
#loc231 = loc(fused[#loc22, #loc23])
#loc232 = loc(fused[#loc21, #loc23])
#loc233 = loc(fused[#loc20, #loc24])
#loc234 = loc(fused[#loc25, #loc24])
#loc235 = loc(fused[#loc26, #loc27])
#loc236 = loc(fused[#loc28, #loc29])
#loc237 = loc(fused[#loc30, #loc27])
#loc238 = loc(fused[#loc36, #loc37])
#loc239 = loc(fused[#loc38, #loc39])
#loc240 = loc(fused[#loc40, #loc37])
#loc241 = loc(fused[#loc43, #loc44])
#loc242 = loc(fused[#loc45, #loc46])
#loc243 = loc(fused[#loc47, #loc48])
#loc244 = loc(fused[#loc49, #loc50])
#loc245 = loc(fused[#loc51, #loc52])
#loc246 = loc(fused[#loc53, #loc54])
#loc247 = loc(fused[#loc55, #loc56])
#loc248 = loc(fused[#loc57, #loc58])
#loc249 = loc(fused[#loc63, #loc64])
#loc252 = loc(fused[#loc74, #loc75])
#loc253 = loc(fused[#loc78, #loc79])
#loc254 = loc(fused[#loc82, #loc81])
#loc255 = loc(fused[#loc83, #loc84])
#loc256 = loc(fused[#loc86, #loc87])
#loc257 = loc(fused[#loc88, #loc89])
#loc258 = loc(fused[#loc91, #loc90])
#loc259 = loc(fused[#loc92, #loc93])
#loc260 = loc(fused[#loc94, #loc95])
#loc261 = loc(fused[#loc96, #loc93])
#loc262 = loc(fused[#loc99, #loc100])
#loc263 = loc(fused[#loc98, #loc100])
#loc264 = loc(fused[#loc97, #loc101])
#loc265 = loc(fused[#loc102, #loc101])
#loc266 = loc(fused[#loc103, #loc104])
#loc267 = loc(fused[#loc105, #loc106])
#loc268 = loc(fused[#loc107, #loc104])
#loc269 = loc(fused[#loc113, #loc114])
#loc270 = loc(fused[#loc115, #loc116])
#loc271 = loc(fused[#loc117, #loc118, #loc119, #loc114])
#loc272 = loc(fused[#loc121, #loc122])
#loc273 = loc(fused[#loc123, #loc124])
#loc274 = loc(fused[#loc126, #loc125])
#loc275 = loc(fused[#loc127, #loc128])
#loc276 = loc(fused[#loc129, #loc130])
#loc277 = loc(fused[#loc131, #loc128])
#loc278 = loc(fused[#loc134, #loc135])
#loc279 = loc(fused[#loc133, #loc135])
#loc280 = loc(fused[#loc132, #loc136])
#loc281 = loc(fused[#loc137, #loc136])
#loc282 = loc(fused[#loc138, #loc139])
#loc283 = loc(fused[#loc140, #loc141])
#loc284 = loc(fused[#loc142, #loc139])
#loc285 = loc(fused[#loc148, #loc149])
#loc286 = loc(fused[#loc150, #loc151])
#loc287 = loc(fused[#loc152, #loc149])
#loc288 = loc(fused[#loc153, #loc154])
#loc289 = loc(fused[#loc155, #loc156])
#loc290 = loc(fused[#loc158, #loc157])
#loc291 = loc(fused[#loc159, #loc160])
#loc292 = loc(fused[#loc161, #loc162])
#loc293 = loc(fused[#loc163, #loc164, #loc165, #loc160])
#loc294 = loc(fused[#loc170, #loc171])
#loc295 = loc(fused[#loc169, #loc171])
#loc296 = loc(fused[#loc168, #loc172])
#loc297 = loc(fused[#loc173, #loc172])
#loc298 = loc(fused[#loc174, #loc175])
#loc299 = loc(fused[#loc176, #loc177])
#loc300 = loc(fused[#loc178, #loc175])
#loc301 = loc(fused[#loc182, #loc183])
#loc302 = loc(fused[#loc184, #loc185])
#loc303 = loc(fused[#loc186, #loc183])
#loc304 = loc(fused[#loc189, #loc190])
#loc305 = loc(fused[#loc191, #loc192])
#loc306 = loc(fused[#loc194, #loc193])
#loc307 = loc(fused[#loc195, #loc196])
#loc308 = loc(fused[#loc197, #loc198])
#loc309 = loc(fused[#loc199, #loc196])
#loc310 = loc(fused[#loc202, #loc203])
#loc311 = loc(fused[#loc201, #loc203])
#loc312 = loc(fused[#loc200, #loc204])
#loc313 = loc(fused[#loc205, #loc204])
#loc314 = loc(fused[#loc206, #loc207])
#loc315 = loc(fused[#loc208, #loc209])
#loc316 = loc(fused[#loc210, #loc207])
#loc317 = loc(fused[#loc214, #loc215])
#loc318 = loc(fused[#loc216, #loc217])
#loc319 = loc(fused[#loc218, #loc215])
