!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE468_Incorrect_Pointer_Scaling/CWE468_Incorrect_Pointer_Scaling__int_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.good1.intArray = #cir.const_array<[#cir.int<1> : !s32i, #cir.int<2> : !s32i, #cir.int<3> : !s32i, #cir.int<4> : !s32i, #cir.int<5> : !s32i, #cir.int<6> : !s32i, #cir.int<7> : !s32i, #cir.int<8> : !s32i, #cir.int<9> : !s32i, #cir.int<10> : !s32i]> : !cir.array<!s32i x 10> loc(#loc51)
  cir.global "private" constant cir_private @__const.CWE468_Incorrect_Pointer_Scaling__int_16_bad.intArray = #cir.const_array<[#cir.int<1> : !s32i, #cir.int<2> : !s32i, #cir.int<3> : !s32i, #cir.int<4> : !s32i, #cir.int<5> : !s32i, #cir.int<6> : !s32i, #cir.int<7> : !s32i, #cir.int<8> : !s32i, #cir.int<9> : !s32i, #cir.int<10> : !s32i]> : !cir.array<!s32i x 10> loc(#loc52)
  cir.func private @printIntLine(!s32i) loc(#loc53)
  cir.func no_proto @CWE468_Incorrect_Pointer_Scaling__int_16_bad() extra(#fn_attr) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc11)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc11)
        cir.condition(%1) loc(#loc11)
      } do {
        cir.scope {
          cir.scope {
            %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["intArray"] {alignment = 16 : i64} loc(#loc52)
            %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer", init] {alignment = 8 : i64} loc(#loc58)
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["toPrint", init] {alignment = 4 : i64} loc(#loc59)
            %3 = cir.get_global @__const.CWE468_Incorrect_Pointer_Scaling__int_16_bad.intArray : !cir.ptr<!cir.array<!s32i x 10>> loc(#loc52)
            cir.copy %3 to %0 : !cir.ptr<!cir.array<!s32i x 10>> loc(#loc52)
            %4 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc16)
            cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc58)
            %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc19)
            %6 = cir.const #cir.int<2> : !s32i loc(#loc20)
            %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc20)
            %8 = cir.const #cir.int<4> : !u64i loc(#loc60)
            %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc61)
            %10 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %9 : !u64i), !cir.ptr<!s32i> loc(#loc23)
            %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc24)
            cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc59)
            %12 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc25)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc26)
          } loc(#loc57)
          cir.break loc(#loc27)
        } loc(#loc56)
        cir.yield loc(#loc10)
      } loc(#loc55)
    } loc(#loc55)
    cir.return loc(#loc8)
  } loc(#loc54)
  cir.func no_proto @CWE468_Incorrect_Pointer_Scaling__int_16_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc63)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    cir.return loc(#loc29)
  } loc(#loc62)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc36)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc36)
        cir.condition(%1) loc(#loc36)
      } do {
        cir.scope {
          cir.scope {
            %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["intArray"] {alignment = 16 : i64} loc(#loc51)
            %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer", init] {alignment = 8 : i64} loc(#loc68)
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["toPrint", init] {alignment = 4 : i64} loc(#loc69)
            %3 = cir.get_global @__const.good1.intArray : !cir.ptr<!cir.array<!s32i x 10>> loc(#loc51)
            cir.copy %3 to %0 : !cir.ptr<!cir.array<!s32i x 10>> loc(#loc51)
            %4 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc41)
            cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc68)
            %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
            %6 = cir.const #cir.int<2> : !s32i loc(#loc45)
            %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc46)
            %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc47)
            cir.store %8, %2 : !s32i, !cir.ptr<!s32i> loc(#loc69)
            %9 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc48)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc49)
          } loc(#loc67)
          cir.break loc(#loc50)
        } loc(#loc66)
        cir.yield loc(#loc35)
      } loc(#loc65)
    } loc(#loc65)
    cir.return loc(#loc33)
  } loc(#loc64)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE468_Incorrect_Pointer_Scaling/CWE468_Incorrect_Pointer_Scaling__int_16.c":0:0)
#loc1 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":46:13)
#loc2 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":46:64)
#loc3 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":25:13)
#loc4 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":25:64)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":20:1)
#loc8 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":34:1)
#loc9 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":22:5)
#loc10 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":33:5)
#loc11 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":22:11)
#loc12 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":23:5)
#loc13 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":24:9)
#loc14 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":31:9)
#loc15 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":26:13)
#loc16 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":26:31)
#loc17 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":29:13)
#loc18 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":29:55)
#loc19 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":29:29)
#loc20 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":29:41)
#loc21 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":29:43)
#loc22 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":29:53)
#loc23 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":29:39)
#loc24 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":29:27)
#loc25 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":30:26)
#loc26 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":30:13)
#loc27 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":32:9)
#loc28 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":57:1)
#loc29 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":60:1)
#loc30 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":59:5)
#loc31 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":59:11)
#loc32 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":41:1)
#loc33 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":55:1)
#loc34 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":43:5)
#loc35 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":54:5)
#loc36 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":43:11)
#loc37 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":44:5)
#loc38 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":45:9)
#loc39 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":52:9)
#loc40 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":47:13)
#loc41 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":47:31)
#loc42 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":50:13)
#loc43 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":50:41)
#loc44 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":50:29)
#loc45 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":50:40)
#loc46 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":50:39)
#loc47 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":50:27)
#loc48 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":51:26)
#loc49 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":51:13)
#loc50 = loc("CWE468_Incorrect_Pointer_Scaling__int_16.c":53:9)
#loc51 = loc(fused[#loc1, #loc2])
#loc52 = loc(fused[#loc3, #loc4])
#loc53 = loc(fused[#loc5, #loc6])
#loc54 = loc(fused[#loc7, #loc8])
#loc55 = loc(fused[#loc9, #loc10])
#loc56 = loc(fused[#loc12, #loc10])
#loc57 = loc(fused[#loc13, #loc14])
#loc58 = loc(fused[#loc15, #loc16])
#loc59 = loc(fused[#loc17, #loc18])
#loc60 = loc(fused[#loc21, #loc22])
#loc61 = loc(fused[#loc20, #loc22])
#loc62 = loc(fused[#loc28, #loc29])
#loc63 = loc(fused[#loc30, #loc31])
#loc64 = loc(fused[#loc32, #loc33])
#loc65 = loc(fused[#loc34, #loc35])
#loc66 = loc(fused[#loc37, #loc35])
#loc67 = loc(fused[#loc38, #loc39])
#loc68 = loc(fused[#loc40, #loc41])
#loc69 = loc(fused[#loc42, #loc43])
