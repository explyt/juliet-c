!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":125:10)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":125:14)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":125:20)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":125:32)
#loc245 = loc(fused[#loc79, #loc80])
#loc246 = loc(fused[#loc81, #loc82])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc215)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc216)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc217)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc219)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc220)
    %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc13)
    cir.store %2, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc221)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc223)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc223)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc17)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc17)
      cir.if %6 {
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc20)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc20)
        %9 = cir.const #cir.int<65> : !s32i loc(#loc21)
        %10 = cir.const #cir.int<100> : !s32i loc(#loc22)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc23)
        %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc22)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc22)
        cir.libc.memset %13 bytes from %8 set to %9 : !cir.ptr<!void>, !s32i, !u64i loc(#loc225)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc26)
        %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc26)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
        %17 = cir.const #cir.int<100> : !s32i loc(#loc28)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc28)
        %20 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc30)
        cir.store %15, %20 : !s8i, !cir.ptr<!s8i> loc(#loc226)
      } loc(#loc224)
    } loc(#loc222)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc228)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc229)
      %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc230)
      %6 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc228)
      cir.store %6, %3 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc228)
      %7 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc38)
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc39)
      %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc38)
      cir.store %9, %5 : !u64i, !cir.ptr<!u64i> loc(#loc231)
      cir.scope {
        %18 = cir.const #cir.int<0> : !s32i loc(#loc44)
        %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc44)
        cir.store %19, %4 : !u64i, !cir.ptr<!u64i> loc(#loc233)
        cir.for : cond {
          %20 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc46)
          %21 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc47)
          %22 = cir.cmp(lt, %20, %21) : !u64i, !cir.bool loc(#loc234)
          cir.condition(%22) loc(#loc48)
        } body {
          cir.scope {
            %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
            %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc51)
            %22 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %21 : !u64i), !cir.ptr<!s8i> loc(#loc52)
            %23 = cir.load %22 : !cir.ptr<!s8i>, !s8i loc(#loc50)
            %24 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc53)
            %25 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc54)
            %26 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %24 : !u64i), !cir.ptr<!s8i> loc(#loc54)
            cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc236)
          } loc(#loc235)
          cir.yield loc(#loc43)
        } step {
          %20 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc55)
          %21 = cir.unary(inc, %20) : !u64i, !u64i loc(#loc56)
          cir.store %21, %4 : !u64i, !cir.ptr<!u64i> loc(#loc237)
          cir.yield loc(#loc232)
        } loc(#loc232)
      } loc(#loc232)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc57)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc57)
      %12 = cir.const #cir.int<50> : !s32i loc(#loc58)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc59)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc58)
      %15 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc60)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc60)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc238)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
      cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    } loc(#loc227)
    cir.return loc(#loc8)
  } loc(#loc218)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc240)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc65)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc241)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc67)
    cir.return loc(#loc64)
  } loc(#loc239)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc242)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc243)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc76)
  cir.func @main(%arg0: !s32i loc(fused[#loc79, #loc80]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc81, #loc82])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc245)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc246)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc78)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc83)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc84)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc85)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc85)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc86)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc73)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11_good : !cir.ptr<!cir.func<!void ()>> loc(#loc247)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11_good() : () -> () loc(#loc88)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc74)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc75)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc248)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11_bad() : () -> () loc(#loc92)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc76)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc95)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc249)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc249)
    cir.return %17 : !s32i loc(#loc249)
  } loc(#loc244)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc250)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc99)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc252)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc253)
    %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc106)
    cir.store %2, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc254)
    cir.scope {
      %3 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc256)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc256)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc110)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc110)
      cir.if %6 {
        %7 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc99)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc99)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc115)
      } else {
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc116)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc116)
        %9 = cir.const #cir.int<65> : !s32i loc(#loc117)
        %10 = cir.const #cir.int<50> : !s32i loc(#loc118)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc119)
        %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc118)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc118)
        cir.libc.memset %13 bytes from %8 set to %9 : !cir.ptr<!void>, !s32i, !u64i loc(#loc258)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc122)
        %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc122)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
        %17 = cir.const #cir.int<50> : !s32i loc(#loc124)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc125)
        %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc124)
        %20 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc126)
        cir.store %15, %20 : !s8i, !cir.ptr<!s8i> loc(#loc259)
      } loc(#loc257)
    } loc(#loc255)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc261)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc262)
      %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc263)
      %6 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc261)
      cir.store %6, %3 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc261)
      %7 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc134)
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc135)
      %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc134)
      cir.store %9, %5 : !u64i, !cir.ptr<!u64i> loc(#loc264)
      cir.scope {
        %18 = cir.const #cir.int<0> : !s32i loc(#loc140)
        %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc140)
        cir.store %19, %4 : !u64i, !cir.ptr<!u64i> loc(#loc266)
        cir.for : cond {
          %20 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc142)
          %21 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc143)
          %22 = cir.cmp(lt, %20, %21) : !u64i, !cir.bool loc(#loc267)
          cir.condition(%22) loc(#loc144)
        } body {
          cir.scope {
            %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc146)
            %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc147)
            %22 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %21 : !u64i), !cir.ptr<!s8i> loc(#loc148)
            %23 = cir.load %22 : !cir.ptr<!s8i>, !s8i loc(#loc146)
            %24 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc149)
            %25 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc150)
            %26 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %24 : !u64i), !cir.ptr<!s8i> loc(#loc150)
            cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc269)
          } loc(#loc268)
          cir.yield loc(#loc139)
        } step {
          %20 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc151)
          %21 = cir.unary(inc, %20) : !u64i, !u64i loc(#loc152)
          cir.store %21, %4 : !u64i, !cir.ptr<!u64i> loc(#loc270)
          cir.yield loc(#loc265)
        } loc(#loc265)
      } loc(#loc265)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc153)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc153)
      %12 = cir.const #cir.int<50> : !s32i loc(#loc154)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc155)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc154)
      %15 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc156)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc156)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc271)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc157)
      cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc158)
    } loc(#loc260)
    cir.return loc(#loc101)
  } loc(#loc251)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc273)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc274)
    %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc165)
    cir.store %2, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc275)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc277)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc277)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc169)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc169)
      cir.if %6 {
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc172)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc172)
        %9 = cir.const #cir.int<65> : !s32i loc(#loc173)
        %10 = cir.const #cir.int<50> : !s32i loc(#loc174)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc175)
        %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc174)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc174)
        cir.libc.memset %13 bytes from %8 set to %9 : !cir.ptr<!void>, !s32i, !u64i loc(#loc279)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc178)
        %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc178)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc179)
        %17 = cir.const #cir.int<50> : !s32i loc(#loc180)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc181)
        %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc180)
        %20 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc182)
        cir.store %15, %20 : !s8i, !cir.ptr<!s8i> loc(#loc280)
      } loc(#loc278)
    } loc(#loc276)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc282)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc283)
      %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc284)
      %6 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc282)
      cir.store %6, %3 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc282)
      %7 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc190)
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc191)
      %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc190)
      cir.store %9, %5 : !u64i, !cir.ptr<!u64i> loc(#loc285)
      cir.scope {
        %18 = cir.const #cir.int<0> : !s32i loc(#loc196)
        %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc196)
        cir.store %19, %4 : !u64i, !cir.ptr<!u64i> loc(#loc287)
        cir.for : cond {
          %20 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc198)
          %21 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc199)
          %22 = cir.cmp(lt, %20, %21) : !u64i, !cir.bool loc(#loc288)
          cir.condition(%22) loc(#loc200)
        } body {
          cir.scope {
            %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc202)
            %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc203)
            %22 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %21 : !u64i), !cir.ptr<!s8i> loc(#loc204)
            %23 = cir.load %22 : !cir.ptr<!s8i>, !s8i loc(#loc202)
            %24 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc205)
            %25 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc206)
            %26 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %24 : !u64i), !cir.ptr<!s8i> loc(#loc206)
            cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc290)
          } loc(#loc289)
          cir.yield loc(#loc195)
        } step {
          %20 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc207)
          %21 = cir.unary(inc, %20) : !u64i, !u64i loc(#loc208)
          cir.store %21, %4 : !u64i, !cir.ptr<!u64i> loc(#loc291)
          cir.yield loc(#loc286)
        } loc(#loc286)
      } loc(#loc286)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc209)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc209)
      %12 = cir.const #cir.int<50> : !s32i loc(#loc210)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc211)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc210)
      %15 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc212)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc212)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc292)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc213)
      cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc214)
    } loc(#loc281)
    cir.return loc(#loc160)
  } loc(#loc272)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/string.h":407:1)
#loc4 = loc("/usr/include/string.h":408:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":23:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":46:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":25:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":25:12)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":26:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":26:24)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":27:12)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":27:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":28:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":33:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":28:8)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":28:26)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":29:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":31:16)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":31:22)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":31:27)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":31:31)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":31:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":31:32)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":32:23)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":32:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":32:14)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":32:18)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":32:19)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":34:5)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":45:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":35:9)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":35:25)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":36:9)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":36:16)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":36:19)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":37:19)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":37:26)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":37:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":37:30)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":39:9)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":42:9)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":39:18)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":39:14)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":39:21)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":39:25)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":39:23)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":40:9)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":41:23)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":41:28)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":41:29)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":41:18)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":41:13)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":39:35)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":39:34)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":43:22)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":43:14)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":43:17)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":43:9)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":44:19)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":44:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":109:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":113:1)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":111:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":111:14)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":112:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":112:14)
#loc69 = loc("/usr/include/stdlib.h":575:1)
#loc70 = loc("/usr/include/stdlib.h":575:41)
#loc71 = loc("/usr/include/time.h":76:1)
#loc72 = loc("/usr/include/time.h":76:38)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":130:15)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":132:15)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":135:15)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":137:15)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":125:1)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":140:1)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":126:1)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":128:27)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":128:22)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":128:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":130:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":131:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":131:74)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":132:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":135:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":136:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":136:73)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":137:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":139:12)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":139:5)
#loc97 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc98 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":61:19)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":53:1)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":81:1)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":55:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":55:12)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":56:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":56:24)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":57:12)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":57:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":58:5)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":68:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":58:8)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":58:27)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":59:5)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":62:5)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":64:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":61:9)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":66:16)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":66:22)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":66:27)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":66:30)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":66:9)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":66:31)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":67:22)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":67:9)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":67:14)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":67:17)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":67:18)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":69:5)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":80:5)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":70:9)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":70:25)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":71:9)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":71:16)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":71:19)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":72:19)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":72:26)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":72:9)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":72:30)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":74:9)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":77:9)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":74:18)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":74:14)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":74:21)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":74:25)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":74:23)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":75:9)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":76:23)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":76:28)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":76:29)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":76:18)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":76:13)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":74:35)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":74:34)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":78:22)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":78:14)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":78:17)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":78:9)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":79:19)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":79:9)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":84:1)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":107:1)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":86:5)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":86:12)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":87:5)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":87:24)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":88:12)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":88:5)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":89:5)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":94:5)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":89:8)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":89:26)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":90:5)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":92:16)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":92:22)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":92:27)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":92:30)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":92:9)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":92:31)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":93:22)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":93:9)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":93:14)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":93:17)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":93:18)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":95:5)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":106:5)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":96:9)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":96:25)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":97:9)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":97:16)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":97:19)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":98:19)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":98:26)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":98:9)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":98:30)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":100:9)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":103:9)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":100:18)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":100:14)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":100:21)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":100:25)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":100:23)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":101:9)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":102:23)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":102:28)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":102:29)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":102:18)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":102:13)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":100:35)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":100:34)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":104:22)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":104:14)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":104:17)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":104:9)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":105:19)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c":105:9)
#loc215 = loc(fused[#loc1, #loc2])
#loc216 = loc(fused[#loc3, #loc4])
#loc217 = loc(fused[#loc5, #loc6])
#loc218 = loc(fused[#loc7, #loc8])
#loc219 = loc(fused[#loc9, #loc10])
#loc220 = loc(fused[#loc11, #loc12])
#loc221 = loc(fused[#loc14, #loc13])
#loc222 = loc(fused[#loc15, #loc16])
#loc223 = loc(fused[#loc17, #loc18])
#loc224 = loc(fused[#loc19, #loc16])
#loc225 = loc(fused[#loc24, #loc25])
#loc226 = loc(fused[#loc27, #loc26])
#loc227 = loc(fused[#loc31, #loc32])
#loc228 = loc(fused[#loc33, #loc34])
#loc229 = loc(fused[#loc35, #loc36])
#loc230 = loc(fused[#loc35, #loc37])
#loc231 = loc(fused[#loc40, #loc41])
#loc232 = loc(fused[#loc42, #loc43])
#loc233 = loc(fused[#loc45, #loc44])
#loc234 = loc(fused[#loc46, #loc47])
#loc235 = loc(fused[#loc49, #loc43])
#loc236 = loc(fused[#loc54, #loc52])
#loc237 = loc(fused[#loc56, #loc55])
#loc238 = loc(fused[#loc60, #loc57])
#loc239 = loc(fused[#loc63, #loc64])
#loc240 = loc(fused[#loc65, #loc66])
#loc241 = loc(fused[#loc67, #loc68])
#loc242 = loc(fused[#loc69, #loc70])
#loc243 = loc(fused[#loc71, #loc72])
#loc244 = loc(fused[#loc77, #loc78])
#loc247 = loc(fused[#loc88, #loc89])
#loc248 = loc(fused[#loc92, #loc93])
#loc249 = loc(fused[#loc96, #loc95])
#loc250 = loc(fused[#loc97, #loc98])
#loc251 = loc(fused[#loc100, #loc101])
#loc252 = loc(fused[#loc102, #loc103])
#loc253 = loc(fused[#loc104, #loc105])
#loc254 = loc(fused[#loc107, #loc106])
#loc255 = loc(fused[#loc108, #loc109])
#loc256 = loc(fused[#loc110, #loc111])
#loc257 = loc(fused[#loc112, #loc113, #loc114, #loc109])
#loc258 = loc(fused[#loc120, #loc121])
#loc259 = loc(fused[#loc123, #loc122])
#loc260 = loc(fused[#loc127, #loc128])
#loc261 = loc(fused[#loc129, #loc130])
#loc262 = loc(fused[#loc131, #loc132])
#loc263 = loc(fused[#loc131, #loc133])
#loc264 = loc(fused[#loc136, #loc137])
#loc265 = loc(fused[#loc138, #loc139])
#loc266 = loc(fused[#loc141, #loc140])
#loc267 = loc(fused[#loc142, #loc143])
#loc268 = loc(fused[#loc145, #loc139])
#loc269 = loc(fused[#loc150, #loc148])
#loc270 = loc(fused[#loc152, #loc151])
#loc271 = loc(fused[#loc156, #loc153])
#loc272 = loc(fused[#loc159, #loc160])
#loc273 = loc(fused[#loc161, #loc162])
#loc274 = loc(fused[#loc163, #loc164])
#loc275 = loc(fused[#loc166, #loc165])
#loc276 = loc(fused[#loc167, #loc168])
#loc277 = loc(fused[#loc169, #loc170])
#loc278 = loc(fused[#loc171, #loc168])
#loc279 = loc(fused[#loc176, #loc177])
#loc280 = loc(fused[#loc179, #loc178])
#loc281 = loc(fused[#loc183, #loc184])
#loc282 = loc(fused[#loc185, #loc186])
#loc283 = loc(fused[#loc187, #loc188])
#loc284 = loc(fused[#loc187, #loc189])
#loc285 = loc(fused[#loc192, #loc193])
#loc286 = loc(fused[#loc194, #loc195])
#loc287 = loc(fused[#loc197, #loc196])
#loc288 = loc(fused[#loc198, #loc199])
#loc289 = loc(fused[#loc201, #loc195])
#loc290 = loc(fused[#loc206, #loc204])
#loc291 = loc(fused[#loc208, #loc207])
#loc292 = loc(fused[#loc212, #loc209])
