!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc198)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc199)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%hd\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc200)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc8)
  cir.func private @printIntLine(!s32i) loc(#loc201)
  cir.func no_proto @CWE190_Integer_Overflow__short_fscanf_square_15_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc203)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc204)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc17)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc17)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc205)
    cir.br ^bb1 loc(#loc206)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<6> : !s32i loc(#loc21)
    cir.br ^bb2 loc(#loc19)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %4 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc19)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc22)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc23)
    %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc199)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc24)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc5)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc5)
    %10 = cir.call @__isoc99_fscanf(%7, %9, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc23)
    cir.br ^bb6 loc(#loc25)
  ^bb5:  // pred: ^bb2
    %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc8)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc8)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc26)
    cir.br ^bb6 loc(#loc27)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc20)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc207)
  ^bb8:  // pred: ^bb7
    %13 = cir.const #cir.int<7> : !s32i loc(#loc30)
    cir.br ^bb9 loc(#loc28)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %13 : !s32i, ^bb14 [
      7: ^bb11
    ] loc(#loc28)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc31)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc208)
  ^bb12:  // pred: ^bb11
    %14 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc34)
    %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc34)
    %16 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc14)
    %17 = cir.cast(integral, %16 : !s16i), !s32i loc(#loc14)
    %18 = cir.binop(mul, %15, %17) nsw : !s32i loc(#loc34)
    %19 = cir.cast(integral, %18 : !s32i), !s16i loc(#loc34)
    cir.store %19, %0 : !s16i, !cir.ptr<!s16i> loc(#loc203)
    %20 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc35)
    %21 = cir.cast(integral, %20 : !s16i), !s32i loc(#loc35)
    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc36)
    cir.br ^bb13 loc(#loc33)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc37)
  ^bb14:  // pred: ^bb9
    %22 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc38)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc39)
    cir.br ^bb15 loc(#loc40)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc29)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc12)
  } loc(#loc202)
  cir.func no_proto @CWE190_Integer_Overflow__short_fscanf_square_15_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc210)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc43)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc211)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc45)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc212)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc47)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc213)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc49)
    cir.return loc(#loc42)
  } loc(#loc209)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc52)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc215)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc216)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc59)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc59)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc217)
    cir.br ^bb1 loc(#loc218)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<6> : !s32i loc(#loc63)
    cir.br ^bb2 loc(#loc61)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %4 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc61)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc64)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc65)
    %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc199)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc66)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc67)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc67)
    %10 = cir.call @__isoc99_fscanf(%7, %9, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc65)
    cir.br ^bb6 loc(#loc68)
  ^bb5:  // pred: ^bb2
    %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc69)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    cir.br ^bb6 loc(#loc71)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc62)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc219)
  ^bb8:  // pred: ^bb7
    %13 = cir.const #cir.int<8> : !s32i loc(#loc74)
    cir.br ^bb9 loc(#loc72)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %13 : !s32i, ^bb12 [
      7: ^bb11
    ] loc(#loc72)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc75)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc76)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    cir.br ^bb18 loc(#loc78)
  ^bb12:  // pred: ^bb9
    cir.br ^bb13 loc(#loc220)
  ^bb13:  // pred: ^bb12
    %16 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc81)
    %17 = cir.cast(integral, %16 : !s16i), !s64i loc(#loc81)
    %18 = cir.cast(integral, %17 : !s64i), !s32i loc(#loc81)
    %19 = cir.abs %18 poison : !s32i loc(#loc82)
    %20 = cir.cast(integral, %19 : !s32i), !s64i loc(#loc82)
    %21 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc83)
    %22 = cir.const #cir.int<32767> : !s32i loc(#loc84)
    %23 = cir.cast(int_to_float, %22 : !s32i), !cir.double loc(#loc84)
    %24 = cir.call @sqrt(%23) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc83)
    %25 = cir.cast(float_to_int, %24 : !cir.double), !s64i loc(#loc83)
    %26 = cir.cmp(le, %20, %25) : !s64i, !cir.bool loc(#loc221)
    cir.brcond %26 ^bb14, ^bb15 loc(#loc222)
  ^bb14:  // pred: ^bb13
    %27 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc89)
    %28 = cir.cast(integral, %27 : !s16i), !s32i loc(#loc89)
    %29 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc56)
    %30 = cir.cast(integral, %29 : !s16i), !s32i loc(#loc56)
    %31 = cir.binop(mul, %28, %30) nsw : !s32i loc(#loc89)
    %32 = cir.cast(integral, %31 : !s32i), !s16i loc(#loc89)
    cir.store %32, %0 : !s16i, !cir.ptr<!s16i> loc(#loc215)
    %33 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc90)
    %34 = cir.cast(integral, %33 : !s16i), !s32i loc(#loc90)
    cir.call @printIntLine(%34) : (!s32i) -> () loc(#loc91)
    cir.br ^bb16 loc(#loc87)
  ^bb15:  // pred: ^bb13
    %35 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc52)
    %36 = cir.cast(array_to_ptrdecay, %35 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%36) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    cir.br ^bb16 loc(#loc80)
  ^bb16:  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc80)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc93)
  ^bb18:  // 2 preds: ^bb11, ^bb17
    cir.br ^bb19 loc(#loc73)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc54)
  } loc(#loc214)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc224)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc225)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc100)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc100)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc226)
    cir.br ^bb1 loc(#loc227)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<6> : !s32i loc(#loc104)
    cir.br ^bb2 loc(#loc102)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %4 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc102)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc105)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc106)
    %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc199)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc107)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc108)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc108)
    %10 = cir.call @__isoc99_fscanf(%7, %9, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc106)
    cir.br ^bb6 loc(#loc109)
  ^bb5:  // pred: ^bb2
    %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc110)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc110)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc111)
    cir.br ^bb6 loc(#loc112)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc103)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc228)
  ^bb8:  // pred: ^bb7
    %13 = cir.const #cir.int<7> : !s32i loc(#loc115)
    cir.br ^bb9 loc(#loc113)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %13 : !s32i, ^bb17 [
      7: ^bb11
    ] loc(#loc113)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc116)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc229)
  ^bb12:  // pred: ^bb11
    %14 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc119)
    %15 = cir.cast(integral, %14 : !s16i), !s64i loc(#loc119)
    %16 = cir.cast(integral, %15 : !s64i), !s32i loc(#loc119)
    %17 = cir.abs %16 poison : !s32i loc(#loc120)
    %18 = cir.cast(integral, %17 : !s32i), !s64i loc(#loc120)
    %19 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc121)
    %20 = cir.const #cir.int<32767> : !s32i loc(#loc122)
    %21 = cir.cast(int_to_float, %20 : !s32i), !cir.double loc(#loc122)
    %22 = cir.call @sqrt(%21) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc121)
    %23 = cir.cast(float_to_int, %22 : !cir.double), !s64i loc(#loc121)
    %24 = cir.cmp(le, %18, %23) : !s64i, !cir.bool loc(#loc230)
    cir.brcond %24 ^bb13, ^bb14 loc(#loc231)
  ^bb13:  // pred: ^bb12
    %25 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc127)
    %26 = cir.cast(integral, %25 : !s16i), !s32i loc(#loc127)
    %27 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc97)
    %28 = cir.cast(integral, %27 : !s16i), !s32i loc(#loc97)
    %29 = cir.binop(mul, %26, %28) nsw : !s32i loc(#loc127)
    %30 = cir.cast(integral, %29 : !s32i), !s16i loc(#loc127)
    cir.store %30, %0 : !s16i, !cir.ptr<!s16i> loc(#loc224)
    %31 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc128)
    %32 = cir.cast(integral, %31 : !s16i), !s32i loc(#loc128)
    cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc129)
    cir.br ^bb15 loc(#loc125)
  ^bb14:  // pred: ^bb12
    %33 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc130)
    %34 = cir.cast(array_to_ptrdecay, %33 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc130)
    cir.call @printLine(%34) : (!cir.ptr<!s8i>) -> () loc(#loc131)
    cir.br ^bb15 loc(#loc118)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc118)
  ^bb16:  // pred: ^bb15
    cir.br ^bb18 loc(#loc132)
  ^bb17:  // pred: ^bb9
    %35 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc133)
    %36 = cir.cast(array_to_ptrdecay, %35 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc133)
    cir.call @printLine(%36) : (!cir.ptr<!s8i>) -> () loc(#loc134)
    cir.br ^bb18 loc(#loc135)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc114)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc95)
  } loc(#loc223)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc233)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc234)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc142)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc142)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc235)
    cir.br ^bb1 loc(#loc236)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<5> : !s32i loc(#loc146)
    cir.br ^bb2 loc(#loc144)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %4 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc144)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc147)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc148)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc148)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc149)
    cir.br ^bb6 loc(#loc150)
  ^bb5:  // pred: ^bb2
    %7 = cir.const #cir.int<2> : !s32i loc(#loc151)
    %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc151)
    cir.store %8, %1 : !s16i, !cir.ptr<!s16i> loc(#loc237)
    cir.br ^bb6 loc(#loc153)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc145)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc238)
  ^bb8:  // pred: ^bb7
    %9 = cir.const #cir.int<7> : !s32i loc(#loc156)
    cir.br ^bb9 loc(#loc154)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %9 : !s32i, ^bb14 [
      7: ^bb11
    ] loc(#loc154)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc157)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc239)
  ^bb12:  // pred: ^bb11
    %10 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc160)
    %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc160)
    %12 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc139)
    %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc139)
    %14 = cir.binop(mul, %11, %13) nsw : !s32i loc(#loc160)
    %15 = cir.cast(integral, %14 : !s32i), !s16i loc(#loc160)
    cir.store %15, %0 : !s16i, !cir.ptr<!s16i> loc(#loc233)
    %16 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc161)
    %17 = cir.cast(integral, %16 : !s16i), !s32i loc(#loc161)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc162)
    cir.br ^bb13 loc(#loc159)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc163)
  ^bb14:  // pred: ^bb9
    %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc164)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc164)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc165)
    cir.br ^bb15 loc(#loc166)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc155)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc137)
  } loc(#loc232)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc241)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc242)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc173)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc173)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc243)
    cir.br ^bb1 loc(#loc244)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<6> : !s32i loc(#loc177)
    cir.br ^bb2 loc(#loc175)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %4 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc175)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc178)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %5 = cir.const #cir.int<2> : !s32i loc(#loc179)
    %6 = cir.cast(integral, %5 : !s32i), !s16i loc(#loc179)
    cir.store %6, %1 : !s16i, !cir.ptr<!s16i> loc(#loc245)
    cir.br ^bb6 loc(#loc181)
  ^bb5:  // pred: ^bb2
    %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc182)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc182)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc183)
    cir.br ^bb6 loc(#loc184)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc176)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc246)
  ^bb8:  // pred: ^bb7
    %9 = cir.const #cir.int<7> : !s32i loc(#loc187)
    cir.br ^bb9 loc(#loc185)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %9 : !s32i, ^bb14 [
      7: ^bb11
    ] loc(#loc185)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc188)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc247)
  ^bb12:  // pred: ^bb11
    %10 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc191)
    %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc191)
    %12 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc170)
    %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc170)
    %14 = cir.binop(mul, %11, %13) nsw : !s32i loc(#loc191)
    %15 = cir.cast(integral, %14 : !s32i), !s16i loc(#loc191)
    cir.store %15, %0 : !s16i, !cir.ptr<!s16i> loc(#loc241)
    %16 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc192)
    %17 = cir.cast(integral, %16 : !s16i), !s32i loc(#loc192)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc193)
    cir.br ^bb13 loc(#loc190)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc194)
  ^bb14:  // pred: ^bb9
    %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc195)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc195)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc196)
    cir.br ^bb15 loc(#loc197)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc186)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc168)
  } loc(#loc240)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":32:24)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":36:19)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc11 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":24:1)
#loc12 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":53:1)
#loc13 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":44:9)
#loc14 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":44:31)
#loc15 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":26:5)
#loc16 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":26:11)
#loc17 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":27:12)
#loc18 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":27:5)
#loc19 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":28:5)
#loc20 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":38:5)
#loc21 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":28:12)
#loc22 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":30:5)
#loc23 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":32:9)
#loc24 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":32:17)
#loc25 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":33:9)
#loc26 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":36:9)
#loc27 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":37:9)
#loc28 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":39:5)
#loc29 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":52:5)
#loc30 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":39:12)
#loc31 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":41:5)
#loc32 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":42:5)
#loc33 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":46:5)
#loc34 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":44:24)
#loc35 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":45:22)
#loc36 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":45:9)
#loc37 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":47:5)
#loc38 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":50:19)
#loc39 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":50:9)
#loc40 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":51:9)
#loc41 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":197:1)
#loc42 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":203:1)
#loc43 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":199:5)
#loc44 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":199:14)
#loc45 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":200:5)
#loc46 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":200:14)
#loc47 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":201:5)
#loc48 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":201:14)
#loc49 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":202:5)
#loc50 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":202:14)
#loc51 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc52 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":90:23)
#loc53 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":60:1)
#loc54 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":94:1)
#loc55 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":85:13)
#loc56 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":85:35)
#loc57 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":62:5)
#loc58 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":62:11)
#loc59 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":63:12)
#loc60 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":63:5)
#loc61 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":64:5)
#loc62 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":74:5)
#loc63 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":64:12)
#loc64 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":66:5)
#loc65 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":68:9)
#loc66 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":68:17)
#loc67 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":68:24)
#loc68 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":69:9)
#loc69 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":72:19)
#loc70 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":72:9)
#loc71 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":73:9)
#loc72 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":75:5)
#loc73 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":93:5)
#loc74 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":75:12)
#loc75 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":77:5)
#loc76 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":79:19)
#loc77 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":79:9)
#loc78 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":80:9)
#loc79 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":83:9)
#loc80 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":91:9)
#loc81 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":83:23)
#loc82 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":83:13)
#loc83 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":83:38)
#loc84 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":83:51)
#loc85 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":83:59)
#loc86 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":84:9)
#loc87 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":87:9)
#loc88 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":89:9)
#loc89 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":85:28)
#loc90 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":86:26)
#loc91 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":86:13)
#loc92 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":90:13)
#loc93 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":92:9)
#loc94 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":97:1)
#loc95 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":131:1)
#loc96 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":118:13)
#loc97 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":118:35)
#loc98 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":99:5)
#loc99 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":99:11)
#loc100 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":100:12)
#loc101 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":100:5)
#loc102 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":101:5)
#loc103 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":111:5)
#loc104 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":101:12)
#loc105 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":103:5)
#loc106 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":105:9)
#loc107 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":105:17)
#loc108 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":105:24)
#loc109 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":106:9)
#loc110 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":109:19)
#loc111 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":109:9)
#loc112 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":110:9)
#loc113 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":112:5)
#loc114 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":130:5)
#loc115 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":112:12)
#loc116 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":114:5)
#loc117 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":116:9)
#loc118 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":124:9)
#loc119 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":116:23)
#loc120 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":116:13)
#loc121 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":116:38)
#loc122 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":116:51)
#loc123 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":116:59)
#loc124 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":117:9)
#loc125 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":120:9)
#loc126 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":122:9)
#loc127 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":118:28)
#loc128 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":119:26)
#loc129 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":119:13)
#loc130 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":123:23)
#loc131 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":123:13)
#loc132 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":125:9)
#loc133 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":128:19)
#loc134 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":128:9)
#loc135 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":129:9)
#loc136 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":134:1)
#loc137 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":163:1)
#loc138 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":154:9)
#loc139 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":154:31)
#loc140 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":136:5)
#loc141 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":136:11)
#loc142 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":137:12)
#loc143 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":137:5)
#loc144 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":138:5)
#loc145 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":148:5)
#loc146 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":138:12)
#loc147 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":140:5)
#loc148 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":142:19)
#loc149 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":142:9)
#loc150 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":143:9)
#loc151 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":146:16)
#loc152 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":146:9)
#loc153 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":147:9)
#loc154 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":149:5)
#loc155 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":162:5)
#loc156 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":149:12)
#loc157 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":151:5)
#loc158 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":152:5)
#loc159 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":156:5)
#loc160 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":154:24)
#loc161 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":155:22)
#loc162 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":155:9)
#loc163 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":157:5)
#loc164 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":160:19)
#loc165 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":160:9)
#loc166 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":161:9)
#loc167 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":166:1)
#loc168 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":195:1)
#loc169 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":186:9)
#loc170 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":186:31)
#loc171 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":168:5)
#loc172 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":168:11)
#loc173 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":169:12)
#loc174 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":169:5)
#loc175 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":170:5)
#loc176 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":180:5)
#loc177 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":170:12)
#loc178 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":172:5)
#loc179 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":174:16)
#loc180 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":174:9)
#loc181 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":175:9)
#loc182 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":178:19)
#loc183 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":178:9)
#loc184 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":179:9)
#loc185 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":181:5)
#loc186 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":194:5)
#loc187 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":181:12)
#loc188 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":183:5)
#loc189 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":184:5)
#loc190 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":188:5)
#loc191 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":186:24)
#loc192 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":187:22)
#loc193 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":187:9)
#loc194 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":189:5)
#loc195 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":192:19)
#loc196 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":192:9)
#loc197 = loc("CWE190_Integer_Overflow__short_fscanf_square_15.c":193:9)
#loc198 = loc(fused[#loc1, #loc2])
#loc199 = loc(fused[#loc3, #loc4])
#loc200 = loc(fused[#loc6, #loc7])
#loc201 = loc(fused[#loc9, #loc10])
#loc202 = loc(fused[#loc11, #loc12])
#loc203 = loc(fused[#loc13, #loc14])
#loc204 = loc(fused[#loc15, #loc16])
#loc205 = loc(fused[#loc18, #loc17])
#loc206 = loc(fused[#loc19, #loc20])
#loc207 = loc(fused[#loc28, #loc29])
#loc208 = loc(fused[#loc32, #loc33])
#loc209 = loc(fused[#loc41, #loc42])
#loc210 = loc(fused[#loc43, #loc44])
#loc211 = loc(fused[#loc45, #loc46])
#loc212 = loc(fused[#loc47, #loc48])
#loc213 = loc(fused[#loc49, #loc50])
#loc214 = loc(fused[#loc53, #loc54])
#loc215 = loc(fused[#loc55, #loc56])
#loc216 = loc(fused[#loc57, #loc58])
#loc217 = loc(fused[#loc60, #loc59])
#loc218 = loc(fused[#loc61, #loc62])
#loc219 = loc(fused[#loc72, #loc73])
#loc220 = loc(fused[#loc79, #loc80])
#loc221 = loc(fused[#loc82, #loc85])
#loc222 = loc(fused[#loc86, #loc87, #loc88, #loc80])
#loc223 = loc(fused[#loc94, #loc95])
#loc224 = loc(fused[#loc96, #loc97])
#loc225 = loc(fused[#loc98, #loc99])
#loc226 = loc(fused[#loc101, #loc100])
#loc227 = loc(fused[#loc102, #loc103])
#loc228 = loc(fused[#loc113, #loc114])
#loc229 = loc(fused[#loc117, #loc118])
#loc230 = loc(fused[#loc120, #loc123])
#loc231 = loc(fused[#loc124, #loc125, #loc126, #loc118])
#loc232 = loc(fused[#loc136, #loc137])
#loc233 = loc(fused[#loc138, #loc139])
#loc234 = loc(fused[#loc140, #loc141])
#loc235 = loc(fused[#loc143, #loc142])
#loc236 = loc(fused[#loc144, #loc145])
#loc237 = loc(fused[#loc152, #loc151])
#loc238 = loc(fused[#loc154, #loc155])
#loc239 = loc(fused[#loc158, #loc159])
#loc240 = loc(fused[#loc167, #loc168])
#loc241 = loc(fused[#loc169, #loc170])
#loc242 = loc(fused[#loc171, #loc172])
#loc243 = loc(fused[#loc174, #loc173])
#loc244 = loc(fused[#loc175, #loc176])
#loc245 = loc(fused[#loc180, #loc179])
#loc246 = loc(fused[#loc185, #loc186])
#loc247 = loc(fused[#loc189, #loc190])
