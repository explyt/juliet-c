!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":77:10)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":77:14)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":77:20)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":77:32)
#loc113 = loc(fused[#loc47, #loc48])
#loc114 = loc(fused[#loc49, #loc50])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65b_badSink(!cir.ptr<!s8i>) loc(#loc93)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc94)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc95)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc97)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc98)
    %2 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65b_badSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc12)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>> loc(#loc98)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc13)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc99)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc15)
    %5 = cir.const #cir.int<10> : !s32i loc(#loc16)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc16)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc100)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc101)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc15)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc102)
    cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc103)
    cir.br ^bb1 loc(#loc104)
  ^bb1:  // pred: ^bb0
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc24)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc24)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc105)
    cir.brcond %14 ^bb2, ^bb3 loc(#loc106)
  ^bb2:  // pred: ^bb1
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc26)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc28)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc26)
    cir.br ^bb3 loc(#loc22)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc22)
  ^bb4:  // pred: ^bb3
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc29)
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
    cir.call %18(%19) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc29)
    cir.return loc(#loc8)
  } loc(#loc96)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc108)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    cir.return loc(#loc32)
  } loc(#loc107)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc109)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc110)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc111)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc44)
  cir.func @main(%arg0: !s32i loc(fused[#loc47, #loc48]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc49, #loc50])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc113)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc114)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc46)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc51)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc51)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc52)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc53)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc53)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc54)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc41)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65_good : !cir.ptr<!cir.func<!void ()>> loc(#loc115)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65_good() : () -> () loc(#loc56)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc42)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc43)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc116)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65_bad() : () -> () loc(#loc60)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc44)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc63)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc117)
    cir.return %17 : !s32i loc(#loc117)
  } loc(#loc112)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65b_goodG2BSink(!cir.ptr<!s8i>) loc(#loc118)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc120)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc121)
    %2 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65b_goodG2BSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc72)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>> loc(#loc121)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc73)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc122)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc75)
    %5 = cir.const #cir.int<10> : !s32i loc(#loc76)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc77)
    %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc76)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc76)
    %9 = cir.const #cir.int<1> : !u64i loc(#loc123)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc124)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc75)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc125)
    cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc126)
    cir.br ^bb1 loc(#loc127)
  ^bb1:  // pred: ^bb0
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc85)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc86)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc86)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc128)
    cir.brcond %16 ^bb2, ^bb3 loc(#loc129)
  ^bb2:  // pred: ^bb1
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc88)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc89)
    %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc90)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc88)
    cir.br ^bb3 loc(#loc84)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc84)
  ^bb4:  // pred: ^bb3
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc91)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc92)
    cir.call %20(%21) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc91)
    cir.return loc(#loc68)
  } loc(#loc119)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":29:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":29:86)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":31:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":42:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":33:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":33:12)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":35:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":35:32)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":36:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":36:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":38:20)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":38:27)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":38:30)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":38:41)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":38:42)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":38:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":39:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":39:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":39:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":39:17)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":39:23)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":39:24)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":39:30)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":39:29)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":41:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":41:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":62:1)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":65:1)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":64:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":64:13)
#loc35 = loc("/usr/include/stdlib.h":575:1)
#loc36 = loc("/usr/include/stdlib.h":575:41)
#loc37 = loc("/usr/include/time.h":76:1)
#loc38 = loc("/usr/include/time.h":76:38)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":82:15)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":84:15)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":87:15)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":89:15)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":77:1)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":92:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":78:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":80:27)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":80:22)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":80:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":82:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":83:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":83:70)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":84:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":87:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":88:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":88:69)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":89:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":91:12)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":91:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":49:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":49:90)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":51:1)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":60:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":53:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":53:12)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":54:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":54:32)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":55:12)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":55:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":57:20)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":57:28)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":57:31)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":57:34)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":57:45)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":57:27)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":57:46)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":57:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":58:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":58:33)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":58:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":58:17)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":58:23)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":58:24)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":58:30)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":58:29)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":59:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c":59:13)
#loc93 = loc(fused[#loc1, #loc2])
#loc94 = loc(fused[#loc3, #loc4])
#loc95 = loc(fused[#loc5, #loc6])
#loc96 = loc(fused[#loc7, #loc8])
#loc97 = loc(fused[#loc9, #loc10])
#loc98 = loc(fused[#loc11, #loc12])
#loc99 = loc(fused[#loc14, #loc13])
#loc100 = loc(fused[#loc17, #loc18])
#loc101 = loc(fused[#loc16, #loc18])
#loc102 = loc(fused[#loc15, #loc19])
#loc103 = loc(fused[#loc20, #loc19])
#loc104 = loc(fused[#loc21, #loc22])
#loc105 = loc(fused[#loc23, #loc24])
#loc106 = loc(fused[#loc25, #loc22])
#loc107 = loc(fused[#loc31, #loc32])
#loc108 = loc(fused[#loc33, #loc34])
#loc109 = loc(fused[#loc35, #loc36])
#loc110 = loc(fused[#loc37, #loc38])
#loc111 = loc(fused[#loc39, #loc40])
#loc112 = loc(fused[#loc45, #loc46])
#loc115 = loc(fused[#loc56, #loc57])
#loc116 = loc(fused[#loc60, #loc61])
#loc117 = loc(fused[#loc64, #loc63])
#loc118 = loc(fused[#loc65, #loc66])
#loc119 = loc(fused[#loc67, #loc68])
#loc120 = loc(fused[#loc69, #loc70])
#loc121 = loc(fused[#loc71, #loc72])
#loc122 = loc(fused[#loc74, #loc73])
#loc123 = loc(fused[#loc78, #loc79])
#loc124 = loc(fused[#loc80, #loc79])
#loc125 = loc(fused[#loc75, #loc81])
#loc126 = loc(fused[#loc82, #loc81])
#loc127 = loc(fused[#loc83, #loc84])
#loc128 = loc(fused[#loc85, #loc86])
#loc129 = loc(fused[#loc87, #loc84])
