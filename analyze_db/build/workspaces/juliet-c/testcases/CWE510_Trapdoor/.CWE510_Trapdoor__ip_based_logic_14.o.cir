!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_14.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @globalFive : !s32i {alignment = 4 : i64} loc(#loc387)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc388)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc389)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc390)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc391)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc392)
  cir.func private @getsockname(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc393)
  cir.func private @strcmp(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc394)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"192.168.30.123\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc17)
  cir.func private @inet_ntoa(!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc395)
  cir.func private @send(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc396)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Welcome, admin!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc22)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Welcome!\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc23)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc397)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Send failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc26)
  cir.func private @close(!s32i) -> !s32i loc(#loc398)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_14_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc387)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc34)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc401)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc404)
          %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["acceptService"] {alignment = 4 : i64} loc(#loc405)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptServiceLen", init] {alignment = 4 : i64} loc(#loc406)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc407)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc408)
          %9 = cir.const #cir.int<16> : !u64i loc(#loc409)
          %10 = cir.cast(integral, %9 : !u64i), !s32i loc(#loc409)
          cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc406)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc44)
          %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc44)
          cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc407)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc46)
          %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc46)
          cir.store %14, %8 : !s32i, !cir.ptr<!s32i> loc(#loc408)
          cir.scope {
            cir.do {
              cir.scope {
                %15 = cir.const #cir.int<2> : !s32i loc(#loc52)
                %16 = cir.const #cir.int<1> : !s32i loc(#loc53)
                %17 = cir.const #cir.int<6> : !s32i loc(#loc54)
                %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc55)
                cir.store %18, %7 : !s32i, !cir.ptr<!s32i> loc(#loc412)
                cir.scope {
                  %37 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc60)
                  %38 = cir.const #cir.int<1> : !s32i loc(#loc61)
                  %39 = cir.unary(minus, %38) nsw : !s32i, !s32i loc(#loc61)
                  %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc414)
                  cir.if %40 {
                    cir.break loc(#loc63)
                  } loc(#loc415)
                } loc(#loc413)
                %19 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc416)
                %20 = cir.const #cir.int<0> : !s32i loc(#loc66)
                %21 = cir.const #cir.int<16> : !u64i loc(#loc417)
                cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc418)
                %22 = cir.const #cir.int<2> : !s32i loc(#loc71)
                %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc71)
                %24 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
                cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc419)
                %25 = cir.const #cir.int<0> : !s32i loc(#loc74)
                %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc74)
                %27 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc75)
                %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc76)
                cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc420)
                %29 = cir.const #cir.int<20000> : !s32i loc(#loc78)
                %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc78)
                %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc79)
                %32 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
                cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc421)
                cir.scope {
                  %37 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc85)
                  %38 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc423)
                  %39 = cir.const #cir.int<16> : !u64i loc(#loc424)
                  %40 = cir.cast(integral, %39 : !u64i), !u32i loc(#loc424)
                  %41 = cir.call @bind(%37, %38, %40) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc90)
                  %42 = cir.const #cir.int<1> : !s32i loc(#loc91)
                  %43 = cir.unary(minus, %42) nsw : !s32i, !s32i loc(#loc91)
                  %44 = cir.cmp(eq, %41, %43) : !s32i, !cir.bool loc(#loc425)
                  cir.if %44 {
                    cir.break loc(#loc93)
                  } loc(#loc426)
                } loc(#loc422)
                cir.scope {
                  %37 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc96)
                  %38 = cir.const #cir.int<5> : !s32i loc(#loc97)
                  %39 = cir.call @listen(%37, %38) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc98)
                  %40 = cir.const #cir.int<1> : !s32i loc(#loc99)
                  %41 = cir.unary(minus, %40) nsw : !s32i, !s32i loc(#loc99)
                  %42 = cir.cmp(eq, %39, %41) : !s32i, !cir.bool loc(#loc428)
                  cir.if %42 {
                    cir.break loc(#loc101)
                  } loc(#loc429)
                } loc(#loc427)
                %33 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc102)
                %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc103)
                %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc104)
                %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc105)
                cir.store %36, %8 : !s32i, !cir.ptr<!s32i> loc(#loc430)
                cir.scope {
                  %37 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc110)
                  %38 = cir.const #cir.int<1> : !s32i loc(#loc111)
                  %39 = cir.unary(minus, %38) nsw : !s32i, !s32i loc(#loc111)
                  %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc432)
                  cir.if %40 {
                    cir.break loc(#loc113)
                  } loc(#loc433)
                } loc(#loc431)
                cir.scope {
                  %37 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                  %38 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc435)
                  %39 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!u32i> loc(#loc436)
                  %40 = cir.call @getsockname(%37, %38, %39) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc121)
                  %41 = cir.const #cir.int<1> : !s32i loc(#loc122)
                  %42 = cir.unary(minus, %41) nsw : !s32i, !s32i loc(#loc123)
                  %43 = cir.cmp(eq, %40, %42) : !s32i, !cir.bool loc(#loc437)
                  cir.if %43 {
                    cir.break loc(#loc125)
                  } loc(#loc438)
                } loc(#loc434)
                cir.scope {
                  %37 = cir.get_global @strcmp : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i>> loc(#loc128)
                  %38 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc17)
                  %39 = cir.cast(array_to_ptrdecay, %38 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc17)
                  %40 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc75)
                  %41 = cir.load %40 : !cir.ptr<!ty_in_addr>, !ty_in_addr loc(#loc129)
                  %42 = cir.call @inet_ntoa(%41) : (!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc129)
                  %43 = cir.call @strcmp(%39, %42) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc128)
                  %44 = cir.const #cir.int<0> : !s32i loc(#loc130)
                  %45 = cir.cmp(eq, %43, %44) : !s32i, !cir.bool loc(#loc440)
                  cir.if %45 {
                    cir.scope {
                      %46 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc136)
                      %47 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc22)
                      %48 = cir.cast(array_to_ptrdecay, %47 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc22)
                      %49 = cir.cast(bitcast, %48 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc22)
                      %50 = cir.const #cir.int<15> : !u64i loc(#loc443)
                      %51 = cir.const #cir.int<0> : !s32i loc(#loc139)
                      %52 = cir.call @send(%46, %49, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc140)
                      %53 = cir.const #cir.int<1> : !s32i loc(#loc141)
                      %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc141)
                      %55 = cir.cast(integral, %54 : !s32i), !s64i loc(#loc141)
                      %56 = cir.cmp(eq, %52, %55) : !s64i, !cir.bool loc(#loc444)
                      cir.if %56 {
                        cir.break loc(#loc143)
                      } loc(#loc445)
                    } loc(#loc442)
                  } else {
                    cir.scope {
                      %46 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc146)
                      %47 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc23)
                      %48 = cir.cast(array_to_ptrdecay, %47 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc23)
                      %49 = cir.cast(bitcast, %48 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc23)
                      %50 = cir.const #cir.int<8> : !u64i loc(#loc447)
                      %51 = cir.const #cir.int<0> : !s32i loc(#loc149)
                      %52 = cir.call @send(%46, %49, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc150)
                      %53 = cir.const #cir.int<1> : !s32i loc(#loc151)
                      %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc151)
                      %55 = cir.cast(integral, %54 : !s32i), !s64i loc(#loc151)
                      %56 = cir.cmp(eq, %52, %55) : !s64i, !cir.bool loc(#loc448)
                      cir.if %56 {
                        %57 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc26)
                        %58 = cir.cast(array_to_ptrdecay, %57 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc26)
                        cir.call @printLine(%58) : (!cir.ptr<!s8i>) -> () loc(#loc153)
                      } loc(#loc449)
                    } loc(#loc446)
                  } loc(#loc441)
                } loc(#loc439)
              } loc(#loc411)
              cir.yield loc(#loc49)
            } while {
              %15 = cir.const #cir.int<0> : !s32i loc(#loc154)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc154)
              cir.condition(%16) loc(#loc154)
            } loc(#loc410)
          } loc(#loc410)
          cir.scope {
            %15 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc157)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc158)
            %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc158)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc451)
            cir.if %18 {
              %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc160)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc161)
            } loc(#loc452)
          } loc(#loc450)
          cir.scope {
            %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc164)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc165)
            %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc165)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc454)
            cir.if %18 {
              %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc167)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc168)
            } loc(#loc455)
          } loc(#loc453)
        } loc(#loc403)
      } loc(#loc402)
    } loc(#loc400)
    cir.return loc(#loc30)
  } loc(#loc399)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_14_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc457)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc171)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc458)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc173)
    cir.return loc(#loc170)
  } loc(#loc456)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc175)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc387)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc180)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc181)
      %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc461)
      cir.if %3 {
        %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc175)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc175)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc185)
      } else {
        cir.scope {
          %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc464)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc465)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc466)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc191)
          %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc191)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc465)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc193)
          %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc193)
          cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc466)
          cir.scope {
            cir.do {
              cir.scope {
                %11 = cir.const #cir.int<2> : !s32i loc(#loc198)
                %12 = cir.const #cir.int<1> : !s32i loc(#loc199)
                %13 = cir.const #cir.int<6> : !s32i loc(#loc200)
                %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc201)
                cir.store %14, %5 : !s32i, !cir.ptr<!s32i> loc(#loc469)
                cir.scope {
                  %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc206)
                  %34 = cir.const #cir.int<1> : !s32i loc(#loc207)
                  %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc207)
                  %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc471)
                  cir.if %36 {
                    cir.break loc(#loc209)
                  } loc(#loc472)
                } loc(#loc470)
                %15 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc473)
                %16 = cir.const #cir.int<0> : !s32i loc(#loc212)
                %17 = cir.const #cir.int<16> : !u64i loc(#loc474)
                cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc475)
                %18 = cir.const #cir.int<2> : !s32i loc(#loc217)
                %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc217)
                %20 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
                cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc476)
                %21 = cir.const #cir.int<0> : !s32i loc(#loc219)
                %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc219)
                %23 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc75)
                %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc76)
                cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc477)
                %25 = cir.const #cir.int<20000> : !s32i loc(#loc221)
                %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc221)
                %27 = cir.call @htons(%26) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc222)
                %28 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
                cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc478)
                cir.scope {
                  %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc227)
                  %34 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc480)
                  %35 = cir.const #cir.int<16> : !u64i loc(#loc481)
                  %36 = cir.cast(integral, %35 : !u64i), !u32i loc(#loc481)
                  %37 = cir.call @bind(%33, %34, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc232)
                  %38 = cir.const #cir.int<1> : !s32i loc(#loc233)
                  %39 = cir.unary(minus, %38) nsw : !s32i, !s32i loc(#loc233)
                  %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc482)
                  cir.if %40 {
                    cir.break loc(#loc235)
                  } loc(#loc483)
                } loc(#loc479)
                cir.scope {
                  %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc238)
                  %34 = cir.const #cir.int<5> : !s32i loc(#loc239)
                  %35 = cir.call @listen(%33, %34) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc240)
                  %36 = cir.const #cir.int<1> : !s32i loc(#loc241)
                  %37 = cir.unary(minus, %36) nsw : !s32i, !s32i loc(#loc241)
                  %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc485)
                  cir.if %38 {
                    cir.break loc(#loc243)
                  } loc(#loc486)
                } loc(#loc484)
                %29 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc244)
                %30 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc245)
                %31 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc246)
                %32 = cir.call @accept(%29, %30, %31) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc247)
                cir.store %32, %6 : !s32i, !cir.ptr<!s32i> loc(#loc487)
                cir.scope {
                  %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc252)
                  %34 = cir.const #cir.int<1> : !s32i loc(#loc253)
                  %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc253)
                  %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc489)
                  cir.if %36 {
                    cir.break loc(#loc255)
                  } loc(#loc490)
                } loc(#loc488)
                cir.scope {
                  %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc258)
                  %34 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc259)
                  %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc259)
                  %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc259)
                  %37 = cir.const #cir.int<8> : !u64i loc(#loc492)
                  %38 = cir.const #cir.int<0> : !s32i loc(#loc262)
                  %39 = cir.call @send(%33, %36, %37, %38) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc263)
                  %40 = cir.const #cir.int<1> : !s32i loc(#loc264)
                  %41 = cir.unary(minus, %40) nsw : !s32i, !s32i loc(#loc264)
                  %42 = cir.cast(integral, %41 : !s32i), !s64i loc(#loc264)
                  %43 = cir.cmp(eq, %39, %42) : !s64i, !cir.bool loc(#loc493)
                  cir.if %43 {
                    %44 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc266)
                    %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc266)
                    cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc267)
                  } loc(#loc494)
                } loc(#loc491)
              } loc(#loc468)
              cir.yield loc(#loc195)
            } while {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc268)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc268)
              cir.condition(%12) loc(#loc268)
            } loc(#loc467)
          } loc(#loc467)
          cir.scope {
            %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc271)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc272)
            %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc272)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc496)
            cir.if %14 {
              %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc274)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc275)
            } loc(#loc497)
          } loc(#loc495)
          cir.scope {
            %11 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc278)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc279)
            %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc279)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc499)
            cir.if %14 {
              %15 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc281)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc282)
            } loc(#loc500)
          } loc(#loc498)
        } loc(#loc463)
      } loc(#loc462)
    } loc(#loc460)
    cir.return loc(#loc177)
  } loc(#loc459)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc387)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc287)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc288)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc503)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc506)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc507)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc508)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc295)
          %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc295)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc507)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc297)
          %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc297)
          cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc508)
          cir.scope {
            cir.do {
              cir.scope {
                %11 = cir.const #cir.int<2> : !s32i loc(#loc302)
                %12 = cir.const #cir.int<1> : !s32i loc(#loc303)
                %13 = cir.const #cir.int<6> : !s32i loc(#loc304)
                %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc305)
                cir.store %14, %5 : !s32i, !cir.ptr<!s32i> loc(#loc511)
                cir.scope {
                  %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc310)
                  %34 = cir.const #cir.int<1> : !s32i loc(#loc311)
                  %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc311)
                  %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc513)
                  cir.if %36 {
                    cir.break loc(#loc313)
                  } loc(#loc514)
                } loc(#loc512)
                %15 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc515)
                %16 = cir.const #cir.int<0> : !s32i loc(#loc316)
                %17 = cir.const #cir.int<16> : !u64i loc(#loc516)
                cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc517)
                %18 = cir.const #cir.int<2> : !s32i loc(#loc321)
                %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc321)
                %20 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
                cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc518)
                %21 = cir.const #cir.int<0> : !s32i loc(#loc323)
                %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc323)
                %23 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc75)
                %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc76)
                cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc519)
                %25 = cir.const #cir.int<20000> : !s32i loc(#loc325)
                %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc325)
                %27 = cir.call @htons(%26) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc326)
                %28 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
                cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc520)
                cir.scope {
                  %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc331)
                  %34 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc522)
                  %35 = cir.const #cir.int<16> : !u64i loc(#loc523)
                  %36 = cir.cast(integral, %35 : !u64i), !u32i loc(#loc523)
                  %37 = cir.call @bind(%33, %34, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc336)
                  %38 = cir.const #cir.int<1> : !s32i loc(#loc337)
                  %39 = cir.unary(minus, %38) nsw : !s32i, !s32i loc(#loc337)
                  %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc524)
                  cir.if %40 {
                    cir.break loc(#loc339)
                  } loc(#loc525)
                } loc(#loc521)
                cir.scope {
                  %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc342)
                  %34 = cir.const #cir.int<5> : !s32i loc(#loc343)
                  %35 = cir.call @listen(%33, %34) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc344)
                  %36 = cir.const #cir.int<1> : !s32i loc(#loc345)
                  %37 = cir.unary(minus, %36) nsw : !s32i, !s32i loc(#loc345)
                  %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc527)
                  cir.if %38 {
                    cir.break loc(#loc347)
                  } loc(#loc528)
                } loc(#loc526)
                %29 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc348)
                %30 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc349)
                %31 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc350)
                %32 = cir.call @accept(%29, %30, %31) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc351)
                cir.store %32, %6 : !s32i, !cir.ptr<!s32i> loc(#loc529)
                cir.scope {
                  %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc356)
                  %34 = cir.const #cir.int<1> : !s32i loc(#loc357)
                  %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc357)
                  %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc531)
                  cir.if %36 {
                    cir.break loc(#loc359)
                  } loc(#loc532)
                } loc(#loc530)
                cir.scope {
                  %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc362)
                  %34 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc363)
                  %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc363)
                  %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc363)
                  %37 = cir.const #cir.int<8> : !u64i loc(#loc534)
                  %38 = cir.const #cir.int<0> : !s32i loc(#loc366)
                  %39 = cir.call @send(%33, %36, %37, %38) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc367)
                  %40 = cir.const #cir.int<1> : !s32i loc(#loc368)
                  %41 = cir.unary(minus, %40) nsw : !s32i, !s32i loc(#loc368)
                  %42 = cir.cast(integral, %41 : !s32i), !s64i loc(#loc368)
                  %43 = cir.cmp(eq, %39, %42) : !s64i, !cir.bool loc(#loc535)
                  cir.if %43 {
                    %44 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc370)
                    %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc370)
                    cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc371)
                  } loc(#loc536)
                } loc(#loc533)
              } loc(#loc510)
              cir.yield loc(#loc299)
            } while {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc372)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc372)
              cir.condition(%12) loc(#loc372)
            } loc(#loc509)
          } loc(#loc509)
          cir.scope {
            %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc375)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc376)
            %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc376)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc538)
            cir.if %14 {
              %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc378)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc379)
            } loc(#loc539)
          } loc(#loc537)
          cir.scope {
            %11 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc382)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc383)
            %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc383)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc541)
            cir.if %14 {
              %15 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc385)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc386)
            } loc(#loc542)
          } loc(#loc540)
        } loc(#loc505)
      } loc(#loc504)
    } loc(#loc502)
    cir.return loc(#loc284)
  } loc(#loc501)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_14.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":118:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":118:12)
#loc3 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc4 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc5 = loc("/usr/include/netinet/in.h":402:1)
#loc6 = loc("/usr/include/netinet/in.h":403:40)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc13 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":116:1)
#loc14 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":117:33)
#loc15 = loc("/usr/include/string.h":156:1)
#loc16 = loc("/usr/include/string.h":157:33)
#loc17 = loc("CWE510_Trapdoor__ip_based_logic_14.c":90:28)
#loc18 = loc("/usr/include/arpa/inet.h":53:1)
#loc19 = loc("/usr/include/arpa/inet.h":53:46)
#loc20 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":138:1)
#loc21 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":138:74)
#loc22 = loc("CWE510_Trapdoor__ip_based_logic_14.c":92:44)
#loc23 = loc("CWE510_Trapdoor__ip_based_logic_14.c":100:44)
#loc24 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc25 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc26 = loc("CWE510_Trapdoor__ip_based_logic_14.c":102:35)
#loc27 = loc("/usr/include/unistd.h":358:1)
#loc28 = loc("/usr/include/unistd.h":358:27)
#loc29 = loc("CWE510_Trapdoor__ip_based_logic_14.c":41:1)
#loc30 = loc("CWE510_Trapdoor__ip_based_logic_14.c":123:1)
#loc31 = loc("CWE510_Trapdoor__ip_based_logic_14.c":43:5)
#loc32 = loc("CWE510_Trapdoor__ip_based_logic_14.c":122:5)
#loc33 = loc("CWE510_Trapdoor__ip_based_logic_14.c":43:8)
#loc34 = loc("CWE510_Trapdoor__ip_based_logic_14.c":43:20)
#loc35 = loc("CWE510_Trapdoor__ip_based_logic_14.c":44:5)
#loc36 = loc("CWE510_Trapdoor__ip_based_logic_14.c":45:9)
#loc37 = loc("CWE510_Trapdoor__ip_based_logic_14.c":121:9)
#loc38 = loc("CWE510_Trapdoor__ip_based_logic_14.c":50:13)
#loc39 = loc("CWE510_Trapdoor__ip_based_logic_14.c":50:32)
#loc40 = loc("CWE510_Trapdoor__ip_based_logic_14.c":50:41)
#loc41 = loc("CWE510_Trapdoor__ip_based_logic_14.c":51:13)
#loc42 = loc("CWE510_Trapdoor__ip_based_logic_14.c":51:56)
#loc43 = loc("CWE510_Trapdoor__ip_based_logic_14.c":52:13)
#loc44 = loc("CWE510_Trapdoor__ip_based_logic_14.c":52:35)
#loc45 = loc("CWE510_Trapdoor__ip_based_logic_14.c":53:13)
#loc46 = loc("CWE510_Trapdoor__ip_based_logic_14.c":53:35)
#loc47 = loc("CWE510_Trapdoor__ip_based_logic_14.c":51:36)
#loc48 = loc("CWE510_Trapdoor__ip_based_logic_14.c":54:13)
#loc49 = loc("CWE510_Trapdoor__ip_based_logic_14.c":106:21)
#loc50 = loc("CWE510_Trapdoor__ip_based_logic_14.c":55:13)
#loc51 = loc("CWE510_Trapdoor__ip_based_logic_14.c":105:13)
#loc52 = loc("CWE510_Trapdoor__ip_based_logic_14.c":63:39)
#loc53 = loc("CWE510_Trapdoor__ip_based_logic_14.c":63:48)
#loc54 = loc("CWE510_Trapdoor__ip_based_logic_14.c":63:61)
#loc55 = loc("CWE510_Trapdoor__ip_based_logic_14.c":63:32)
#loc56 = loc("CWE510_Trapdoor__ip_based_logic_14.c":63:17)
#loc57 = loc("CWE510_Trapdoor__ip_based_logic_14.c":63:72)
#loc58 = loc("CWE510_Trapdoor__ip_based_logic_14.c":64:17)
#loc59 = loc("CWE510_Trapdoor__ip_based_logic_14.c":67:17)
#loc60 = loc("CWE510_Trapdoor__ip_based_logic_14.c":64:21)
#loc61 = loc("CWE510_Trapdoor__ip_based_logic_14.c":64:37)
#loc62 = loc("CWE510_Trapdoor__ip_based_logic_14.c":65:17)
#loc63 = loc("CWE510_Trapdoor__ip_based_logic_14.c":66:21)
#loc64 = loc("CWE510_Trapdoor__ip_based_logic_14.c":68:24)
#loc65 = loc("CWE510_Trapdoor__ip_based_logic_14.c":68:25)
#loc66 = loc("CWE510_Trapdoor__ip_based_logic_14.c":68:34)
#loc67 = loc("CWE510_Trapdoor__ip_based_logic_14.c":68:37)
#loc68 = loc("CWE510_Trapdoor__ip_based_logic_14.c":68:51)
#loc69 = loc("CWE510_Trapdoor__ip_based_logic_14.c":68:17)
#loc70 = loc("CWE510_Trapdoor__ip_based_logic_14.c":68:52)
#loc71 = loc("CWE510_Trapdoor__ip_based_logic_14.c":69:38)
#loc72 = loc("/usr/include/netinet/in.h":249:5)
#loc73 = loc("CWE510_Trapdoor__ip_based_logic_14.c":69:17)
#loc74 = loc("CWE510_Trapdoor__ip_based_logic_14.c":70:43)
#loc75 = loc("/usr/include/netinet/in.h":251:20)
#loc76 = loc("/usr/include/netinet/in.h":33:15)
#loc77 = loc("CWE510_Trapdoor__ip_based_logic_14.c":70:17)
#loc78 = loc("CWE510_Trapdoor__ip_based_logic_14.c":71:42)
#loc79 = loc("CWE510_Trapdoor__ip_based_logic_14.c":71:36)
#loc80 = loc("/usr/include/netinet/in.h":250:15)
#loc81 = loc("CWE510_Trapdoor__ip_based_logic_14.c":71:17)
#loc82 = loc("CWE510_Trapdoor__ip_based_logic_14.c":71:47)
#loc83 = loc("CWE510_Trapdoor__ip_based_logic_14.c":72:17)
#loc84 = loc("CWE510_Trapdoor__ip_based_logic_14.c":75:17)
#loc85 = loc("CWE510_Trapdoor__ip_based_logic_14.c":72:26)
#loc86 = loc("CWE510_Trapdoor__ip_based_logic_14.c":72:58)
#loc87 = loc("CWE510_Trapdoor__ip_based_logic_14.c":72:59)
#loc88 = loc("CWE510_Trapdoor__ip_based_logic_14.c":72:68)
#loc89 = loc("CWE510_Trapdoor__ip_based_logic_14.c":72:82)
#loc90 = loc("CWE510_Trapdoor__ip_based_logic_14.c":72:21)
#loc91 = loc("CWE510_Trapdoor__ip_based_logic_14.c":72:88)
#loc92 = loc("CWE510_Trapdoor__ip_based_logic_14.c":73:17)
#loc93 = loc("CWE510_Trapdoor__ip_based_logic_14.c":74:21)
#loc94 = loc("CWE510_Trapdoor__ip_based_logic_14.c":76:17)
#loc95 = loc("CWE510_Trapdoor__ip_based_logic_14.c":79:17)
#loc96 = loc("CWE510_Trapdoor__ip_based_logic_14.c":76:28)
#loc97 = loc("CWE510_Trapdoor__ip_based_logic_14.c":76:42)
#loc98 = loc("CWE510_Trapdoor__ip_based_logic_14.c":76:21)
#loc99 = loc("CWE510_Trapdoor__ip_based_logic_14.c":76:48)
#loc100 = loc("CWE510_Trapdoor__ip_based_logic_14.c":77:17)
#loc101 = loc("CWE510_Trapdoor__ip_based_logic_14.c":78:21)
#loc102 = loc("CWE510_Trapdoor__ip_based_logic_14.c":80:39)
#loc103 = loc("CWE510_Trapdoor__ip_based_logic_14.c":80:53)
#loc104 = loc("CWE510_Trapdoor__ip_based_logic_14.c":80:59)
#loc105 = loc("CWE510_Trapdoor__ip_based_logic_14.c":80:32)
#loc106 = loc("CWE510_Trapdoor__ip_based_logic_14.c":80:17)
#loc107 = loc("CWE510_Trapdoor__ip_based_logic_14.c":80:63)
#loc108 = loc("CWE510_Trapdoor__ip_based_logic_14.c":81:17)
#loc109 = loc("CWE510_Trapdoor__ip_based_logic_14.c":84:17)
#loc110 = loc("CWE510_Trapdoor__ip_based_logic_14.c":81:21)
#loc111 = loc("CWE510_Trapdoor__ip_based_logic_14.c":81:37)
#loc112 = loc("CWE510_Trapdoor__ip_based_logic_14.c":82:17)
#loc113 = loc("CWE510_Trapdoor__ip_based_logic_14.c":83:21)
#loc114 = loc("CWE510_Trapdoor__ip_based_logic_14.c":85:17)
#loc115 = loc("CWE510_Trapdoor__ip_based_logic_14.c":88:17)
#loc116 = loc("CWE510_Trapdoor__ip_based_logic_14.c":85:33)
#loc117 = loc("CWE510_Trapdoor__ip_based_logic_14.c":85:66)
#loc118 = loc("CWE510_Trapdoor__ip_based_logic_14.c":85:67)
#loc119 = loc("CWE510_Trapdoor__ip_based_logic_14.c":85:82)
#loc120 = loc("CWE510_Trapdoor__ip_based_logic_14.c":85:83)
#loc121 = loc("CWE510_Trapdoor__ip_based_logic_14.c":85:21)
#loc122 = loc("CWE510_Trapdoor__ip_based_logic_14.c":85:105)
#loc123 = loc("CWE510_Trapdoor__ip_based_logic_14.c":85:104)
#loc124 = loc("CWE510_Trapdoor__ip_based_logic_14.c":86:17)
#loc125 = loc("CWE510_Trapdoor__ip_based_logic_14.c":87:21)
#loc126 = loc("CWE510_Trapdoor__ip_based_logic_14.c":90:17)
#loc127 = loc("CWE510_Trapdoor__ip_based_logic_14.c":104:17)
#loc128 = loc("CWE510_Trapdoor__ip_based_logic_14.c":90:21)
#loc129 = loc("CWE510_Trapdoor__ip_based_logic_14.c":90:46)
#loc130 = loc("CWE510_Trapdoor__ip_based_logic_14.c":90:84)
#loc131 = loc("CWE510_Trapdoor__ip_based_logic_14.c":91:17)
#loc132 = loc("CWE510_Trapdoor__ip_based_logic_14.c":97:17)
#loc133 = loc("CWE510_Trapdoor__ip_based_logic_14.c":99:17)
#loc134 = loc("CWE510_Trapdoor__ip_based_logic_14.c":92:21)
#loc135 = loc("CWE510_Trapdoor__ip_based_logic_14.c":96:21)
#loc136 = loc("CWE510_Trapdoor__ip_based_logic_14.c":92:30)
#loc137 = loc("CWE510_Trapdoor__ip_based_logic_14.c":92:59)
#loc138 = loc("CWE510_Trapdoor__ip_based_logic_14.c":92:79)
#loc139 = loc("CWE510_Trapdoor__ip_based_logic_14.c":92:82)
#loc140 = loc("CWE510_Trapdoor__ip_based_logic_14.c":92:25)
#loc141 = loc("CWE510_Trapdoor__ip_based_logic_14.c":92:89)
#loc142 = loc("CWE510_Trapdoor__ip_based_logic_14.c":93:21)
#loc143 = loc("CWE510_Trapdoor__ip_based_logic_14.c":95:25)
#loc144 = loc("CWE510_Trapdoor__ip_based_logic_14.c":100:21)
#loc145 = loc("CWE510_Trapdoor__ip_based_logic_14.c":103:21)
#loc146 = loc("CWE510_Trapdoor__ip_based_logic_14.c":100:30)
#loc147 = loc("CWE510_Trapdoor__ip_based_logic_14.c":100:61)
#loc148 = loc("CWE510_Trapdoor__ip_based_logic_14.c":100:83)
#loc149 = loc("CWE510_Trapdoor__ip_based_logic_14.c":100:86)
#loc150 = loc("CWE510_Trapdoor__ip_based_logic_14.c":100:25)
#loc151 = loc("CWE510_Trapdoor__ip_based_logic_14.c":100:92)
#loc152 = loc("CWE510_Trapdoor__ip_based_logic_14.c":101:21)
#loc153 = loc("CWE510_Trapdoor__ip_based_logic_14.c":102:25)
#loc154 = loc("CWE510_Trapdoor__ip_based_logic_14.c":106:20)
#loc155 = loc("CWE510_Trapdoor__ip_based_logic_14.c":107:13)
#loc156 = loc("CWE510_Trapdoor__ip_based_logic_14.c":110:13)
#loc157 = loc("CWE510_Trapdoor__ip_based_logic_14.c":107:17)
#loc158 = loc("CWE510_Trapdoor__ip_based_logic_14.c":107:33)
#loc159 = loc("CWE510_Trapdoor__ip_based_logic_14.c":108:13)
#loc160 = loc("CWE510_Trapdoor__ip_based_logic_14.c":109:30)
#loc161 = loc("CWE510_Trapdoor__ip_based_logic_14.c":109:17)
#loc162 = loc("CWE510_Trapdoor__ip_based_logic_14.c":111:13)
#loc163 = loc("CWE510_Trapdoor__ip_based_logic_14.c":114:13)
#loc164 = loc("CWE510_Trapdoor__ip_based_logic_14.c":111:17)
#loc165 = loc("CWE510_Trapdoor__ip_based_logic_14.c":111:33)
#loc166 = loc("CWE510_Trapdoor__ip_based_logic_14.c":112:13)
#loc167 = loc("CWE510_Trapdoor__ip_based_logic_14.c":113:30)
#loc168 = loc("CWE510_Trapdoor__ip_based_logic_14.c":113:17)
#loc169 = loc("CWE510_Trapdoor__ip_based_logic_14.c":272:1)
#loc170 = loc("CWE510_Trapdoor__ip_based_logic_14.c":276:1)
#loc171 = loc("CWE510_Trapdoor__ip_based_logic_14.c":274:5)
#loc172 = loc("CWE510_Trapdoor__ip_based_logic_14.c":274:11)
#loc173 = loc("CWE510_Trapdoor__ip_based_logic_14.c":275:5)
#loc174 = loc("CWE510_Trapdoor__ip_based_logic_14.c":275:11)
#loc175 = loc("CWE510_Trapdoor__ip_based_logic_14.c":135:19)
#loc176 = loc("CWE510_Trapdoor__ip_based_logic_14.c":130:1)
#loc177 = loc("CWE510_Trapdoor__ip_based_logic_14.c":201:1)
#loc178 = loc("CWE510_Trapdoor__ip_based_logic_14.c":132:5)
#loc179 = loc("CWE510_Trapdoor__ip_based_logic_14.c":200:5)
#loc180 = loc("CWE510_Trapdoor__ip_based_logic_14.c":132:8)
#loc181 = loc("CWE510_Trapdoor__ip_based_logic_14.c":132:20)
#loc182 = loc("CWE510_Trapdoor__ip_based_logic_14.c":133:5)
#loc183 = loc("CWE510_Trapdoor__ip_based_logic_14.c":136:5)
#loc184 = loc("CWE510_Trapdoor__ip_based_logic_14.c":138:5)
#loc185 = loc("CWE510_Trapdoor__ip_based_logic_14.c":135:9)
#loc186 = loc("CWE510_Trapdoor__ip_based_logic_14.c":139:9)
#loc187 = loc("CWE510_Trapdoor__ip_based_logic_14.c":199:9)
#loc188 = loc("CWE510_Trapdoor__ip_based_logic_14.c":144:13)
#loc189 = loc("CWE510_Trapdoor__ip_based_logic_14.c":144:32)
#loc190 = loc("CWE510_Trapdoor__ip_based_logic_14.c":145:13)
#loc191 = loc("CWE510_Trapdoor__ip_based_logic_14.c":145:35)
#loc192 = loc("CWE510_Trapdoor__ip_based_logic_14.c":146:13)
#loc193 = loc("CWE510_Trapdoor__ip_based_logic_14.c":146:35)
#loc194 = loc("CWE510_Trapdoor__ip_based_logic_14.c":147:13)
#loc195 = loc("CWE510_Trapdoor__ip_based_logic_14.c":184:21)
#loc196 = loc("CWE510_Trapdoor__ip_based_logic_14.c":148:13)
#loc197 = loc("CWE510_Trapdoor__ip_based_logic_14.c":183:13)
#loc198 = loc("CWE510_Trapdoor__ip_based_logic_14.c":156:39)
#loc199 = loc("CWE510_Trapdoor__ip_based_logic_14.c":156:48)
#loc200 = loc("CWE510_Trapdoor__ip_based_logic_14.c":156:61)
#loc201 = loc("CWE510_Trapdoor__ip_based_logic_14.c":156:32)
#loc202 = loc("CWE510_Trapdoor__ip_based_logic_14.c":156:17)
#loc203 = loc("CWE510_Trapdoor__ip_based_logic_14.c":156:72)
#loc204 = loc("CWE510_Trapdoor__ip_based_logic_14.c":157:17)
#loc205 = loc("CWE510_Trapdoor__ip_based_logic_14.c":160:17)
#loc206 = loc("CWE510_Trapdoor__ip_based_logic_14.c":157:21)
#loc207 = loc("CWE510_Trapdoor__ip_based_logic_14.c":157:37)
#loc208 = loc("CWE510_Trapdoor__ip_based_logic_14.c":158:17)
#loc209 = loc("CWE510_Trapdoor__ip_based_logic_14.c":159:21)
#loc210 = loc("CWE510_Trapdoor__ip_based_logic_14.c":161:24)
#loc211 = loc("CWE510_Trapdoor__ip_based_logic_14.c":161:25)
#loc212 = loc("CWE510_Trapdoor__ip_based_logic_14.c":161:34)
#loc213 = loc("CWE510_Trapdoor__ip_based_logic_14.c":161:37)
#loc214 = loc("CWE510_Trapdoor__ip_based_logic_14.c":161:51)
#loc215 = loc("CWE510_Trapdoor__ip_based_logic_14.c":161:17)
#loc216 = loc("CWE510_Trapdoor__ip_based_logic_14.c":161:52)
#loc217 = loc("CWE510_Trapdoor__ip_based_logic_14.c":162:38)
#loc218 = loc("CWE510_Trapdoor__ip_based_logic_14.c":162:17)
#loc219 = loc("CWE510_Trapdoor__ip_based_logic_14.c":163:43)
#loc220 = loc("CWE510_Trapdoor__ip_based_logic_14.c":163:17)
#loc221 = loc("CWE510_Trapdoor__ip_based_logic_14.c":164:42)
#loc222 = loc("CWE510_Trapdoor__ip_based_logic_14.c":164:36)
#loc223 = loc("CWE510_Trapdoor__ip_based_logic_14.c":164:17)
#loc224 = loc("CWE510_Trapdoor__ip_based_logic_14.c":164:47)
#loc225 = loc("CWE510_Trapdoor__ip_based_logic_14.c":165:17)
#loc226 = loc("CWE510_Trapdoor__ip_based_logic_14.c":168:17)
#loc227 = loc("CWE510_Trapdoor__ip_based_logic_14.c":165:26)
#loc228 = loc("CWE510_Trapdoor__ip_based_logic_14.c":165:58)
#loc229 = loc("CWE510_Trapdoor__ip_based_logic_14.c":165:59)
#loc230 = loc("CWE510_Trapdoor__ip_based_logic_14.c":165:68)
#loc231 = loc("CWE510_Trapdoor__ip_based_logic_14.c":165:82)
#loc232 = loc("CWE510_Trapdoor__ip_based_logic_14.c":165:21)
#loc233 = loc("CWE510_Trapdoor__ip_based_logic_14.c":165:88)
#loc234 = loc("CWE510_Trapdoor__ip_based_logic_14.c":166:17)
#loc235 = loc("CWE510_Trapdoor__ip_based_logic_14.c":167:21)
#loc236 = loc("CWE510_Trapdoor__ip_based_logic_14.c":169:17)
#loc237 = loc("CWE510_Trapdoor__ip_based_logic_14.c":172:17)
#loc238 = loc("CWE510_Trapdoor__ip_based_logic_14.c":169:28)
#loc239 = loc("CWE510_Trapdoor__ip_based_logic_14.c":169:42)
#loc240 = loc("CWE510_Trapdoor__ip_based_logic_14.c":169:21)
#loc241 = loc("CWE510_Trapdoor__ip_based_logic_14.c":169:48)
#loc242 = loc("CWE510_Trapdoor__ip_based_logic_14.c":170:17)
#loc243 = loc("CWE510_Trapdoor__ip_based_logic_14.c":171:21)
#loc244 = loc("CWE510_Trapdoor__ip_based_logic_14.c":173:39)
#loc245 = loc("CWE510_Trapdoor__ip_based_logic_14.c":173:53)
#loc246 = loc("CWE510_Trapdoor__ip_based_logic_14.c":173:59)
#loc247 = loc("CWE510_Trapdoor__ip_based_logic_14.c":173:32)
#loc248 = loc("CWE510_Trapdoor__ip_based_logic_14.c":173:17)
#loc249 = loc("CWE510_Trapdoor__ip_based_logic_14.c":173:63)
#loc250 = loc("CWE510_Trapdoor__ip_based_logic_14.c":174:17)
#loc251 = loc("CWE510_Trapdoor__ip_based_logic_14.c":177:17)
#loc252 = loc("CWE510_Trapdoor__ip_based_logic_14.c":174:21)
#loc253 = loc("CWE510_Trapdoor__ip_based_logic_14.c":174:37)
#loc254 = loc("CWE510_Trapdoor__ip_based_logic_14.c":175:17)
#loc255 = loc("CWE510_Trapdoor__ip_based_logic_14.c":176:21)
#loc256 = loc("CWE510_Trapdoor__ip_based_logic_14.c":179:17)
#loc257 = loc("CWE510_Trapdoor__ip_based_logic_14.c":182:17)
#loc258 = loc("CWE510_Trapdoor__ip_based_logic_14.c":179:26)
#loc259 = loc("CWE510_Trapdoor__ip_based_logic_14.c":179:40)
#loc260 = loc("CWE510_Trapdoor__ip_based_logic_14.c":179:57)
#loc261 = loc("CWE510_Trapdoor__ip_based_logic_14.c":179:79)
#loc262 = loc("CWE510_Trapdoor__ip_based_logic_14.c":179:82)
#loc263 = loc("CWE510_Trapdoor__ip_based_logic_14.c":179:21)
#loc264 = loc("CWE510_Trapdoor__ip_based_logic_14.c":179:88)
#loc265 = loc("CWE510_Trapdoor__ip_based_logic_14.c":180:17)
#loc266 = loc("CWE510_Trapdoor__ip_based_logic_14.c":181:31)
#loc267 = loc("CWE510_Trapdoor__ip_based_logic_14.c":181:21)
#loc268 = loc("CWE510_Trapdoor__ip_based_logic_14.c":184:20)
#loc269 = loc("CWE510_Trapdoor__ip_based_logic_14.c":185:13)
#loc270 = loc("CWE510_Trapdoor__ip_based_logic_14.c":188:13)
#loc271 = loc("CWE510_Trapdoor__ip_based_logic_14.c":185:17)
#loc272 = loc("CWE510_Trapdoor__ip_based_logic_14.c":185:33)
#loc273 = loc("CWE510_Trapdoor__ip_based_logic_14.c":186:13)
#loc274 = loc("CWE510_Trapdoor__ip_based_logic_14.c":187:30)
#loc275 = loc("CWE510_Trapdoor__ip_based_logic_14.c":187:17)
#loc276 = loc("CWE510_Trapdoor__ip_based_logic_14.c":189:13)
#loc277 = loc("CWE510_Trapdoor__ip_based_logic_14.c":192:13)
#loc278 = loc("CWE510_Trapdoor__ip_based_logic_14.c":189:17)
#loc279 = loc("CWE510_Trapdoor__ip_based_logic_14.c":189:33)
#loc280 = loc("CWE510_Trapdoor__ip_based_logic_14.c":190:13)
#loc281 = loc("CWE510_Trapdoor__ip_based_logic_14.c":191:30)
#loc282 = loc("CWE510_Trapdoor__ip_based_logic_14.c":191:17)
#loc283 = loc("CWE510_Trapdoor__ip_based_logic_14.c":204:1)
#loc284 = loc("CWE510_Trapdoor__ip_based_logic_14.c":270:1)
#loc285 = loc("CWE510_Trapdoor__ip_based_logic_14.c":206:5)
#loc286 = loc("CWE510_Trapdoor__ip_based_logic_14.c":269:5)
#loc287 = loc("CWE510_Trapdoor__ip_based_logic_14.c":206:8)
#loc288 = loc("CWE510_Trapdoor__ip_based_logic_14.c":206:20)
#loc289 = loc("CWE510_Trapdoor__ip_based_logic_14.c":207:5)
#loc290 = loc("CWE510_Trapdoor__ip_based_logic_14.c":208:9)
#loc291 = loc("CWE510_Trapdoor__ip_based_logic_14.c":268:9)
#loc292 = loc("CWE510_Trapdoor__ip_based_logic_14.c":213:13)
#loc293 = loc("CWE510_Trapdoor__ip_based_logic_14.c":213:32)
#loc294 = loc("CWE510_Trapdoor__ip_based_logic_14.c":214:13)
#loc295 = loc("CWE510_Trapdoor__ip_based_logic_14.c":214:35)
#loc296 = loc("CWE510_Trapdoor__ip_based_logic_14.c":215:13)
#loc297 = loc("CWE510_Trapdoor__ip_based_logic_14.c":215:35)
#loc298 = loc("CWE510_Trapdoor__ip_based_logic_14.c":216:13)
#loc299 = loc("CWE510_Trapdoor__ip_based_logic_14.c":253:21)
#loc300 = loc("CWE510_Trapdoor__ip_based_logic_14.c":217:13)
#loc301 = loc("CWE510_Trapdoor__ip_based_logic_14.c":252:13)
#loc302 = loc("CWE510_Trapdoor__ip_based_logic_14.c":225:39)
#loc303 = loc("CWE510_Trapdoor__ip_based_logic_14.c":225:48)
#loc304 = loc("CWE510_Trapdoor__ip_based_logic_14.c":225:61)
#loc305 = loc("CWE510_Trapdoor__ip_based_logic_14.c":225:32)
#loc306 = loc("CWE510_Trapdoor__ip_based_logic_14.c":225:17)
#loc307 = loc("CWE510_Trapdoor__ip_based_logic_14.c":225:72)
#loc308 = loc("CWE510_Trapdoor__ip_based_logic_14.c":226:17)
#loc309 = loc("CWE510_Trapdoor__ip_based_logic_14.c":229:17)
#loc310 = loc("CWE510_Trapdoor__ip_based_logic_14.c":226:21)
#loc311 = loc("CWE510_Trapdoor__ip_based_logic_14.c":226:37)
#loc312 = loc("CWE510_Trapdoor__ip_based_logic_14.c":227:17)
#loc313 = loc("CWE510_Trapdoor__ip_based_logic_14.c":228:21)
#loc314 = loc("CWE510_Trapdoor__ip_based_logic_14.c":230:24)
#loc315 = loc("CWE510_Trapdoor__ip_based_logic_14.c":230:25)
#loc316 = loc("CWE510_Trapdoor__ip_based_logic_14.c":230:34)
#loc317 = loc("CWE510_Trapdoor__ip_based_logic_14.c":230:37)
#loc318 = loc("CWE510_Trapdoor__ip_based_logic_14.c":230:51)
#loc319 = loc("CWE510_Trapdoor__ip_based_logic_14.c":230:17)
#loc320 = loc("CWE510_Trapdoor__ip_based_logic_14.c":230:52)
#loc321 = loc("CWE510_Trapdoor__ip_based_logic_14.c":231:38)
#loc322 = loc("CWE510_Trapdoor__ip_based_logic_14.c":231:17)
#loc323 = loc("CWE510_Trapdoor__ip_based_logic_14.c":232:43)
#loc324 = loc("CWE510_Trapdoor__ip_based_logic_14.c":232:17)
#loc325 = loc("CWE510_Trapdoor__ip_based_logic_14.c":233:42)
#loc326 = loc("CWE510_Trapdoor__ip_based_logic_14.c":233:36)
#loc327 = loc("CWE510_Trapdoor__ip_based_logic_14.c":233:17)
#loc328 = loc("CWE510_Trapdoor__ip_based_logic_14.c":233:47)
#loc329 = loc("CWE510_Trapdoor__ip_based_logic_14.c":234:17)
#loc330 = loc("CWE510_Trapdoor__ip_based_logic_14.c":237:17)
#loc331 = loc("CWE510_Trapdoor__ip_based_logic_14.c":234:26)
#loc332 = loc("CWE510_Trapdoor__ip_based_logic_14.c":234:58)
#loc333 = loc("CWE510_Trapdoor__ip_based_logic_14.c":234:59)
#loc334 = loc("CWE510_Trapdoor__ip_based_logic_14.c":234:68)
#loc335 = loc("CWE510_Trapdoor__ip_based_logic_14.c":234:82)
#loc336 = loc("CWE510_Trapdoor__ip_based_logic_14.c":234:21)
#loc337 = loc("CWE510_Trapdoor__ip_based_logic_14.c":234:88)
#loc338 = loc("CWE510_Trapdoor__ip_based_logic_14.c":235:17)
#loc339 = loc("CWE510_Trapdoor__ip_based_logic_14.c":236:21)
#loc340 = loc("CWE510_Trapdoor__ip_based_logic_14.c":238:17)
#loc341 = loc("CWE510_Trapdoor__ip_based_logic_14.c":241:17)
#loc342 = loc("CWE510_Trapdoor__ip_based_logic_14.c":238:28)
#loc343 = loc("CWE510_Trapdoor__ip_based_logic_14.c":238:42)
#loc344 = loc("CWE510_Trapdoor__ip_based_logic_14.c":238:21)
#loc345 = loc("CWE510_Trapdoor__ip_based_logic_14.c":238:48)
#loc346 = loc("CWE510_Trapdoor__ip_based_logic_14.c":239:17)
#loc347 = loc("CWE510_Trapdoor__ip_based_logic_14.c":240:21)
#loc348 = loc("CWE510_Trapdoor__ip_based_logic_14.c":242:39)
#loc349 = loc("CWE510_Trapdoor__ip_based_logic_14.c":242:53)
#loc350 = loc("CWE510_Trapdoor__ip_based_logic_14.c":242:59)
#loc351 = loc("CWE510_Trapdoor__ip_based_logic_14.c":242:32)
#loc352 = loc("CWE510_Trapdoor__ip_based_logic_14.c":242:17)
#loc353 = loc("CWE510_Trapdoor__ip_based_logic_14.c":242:63)
#loc354 = loc("CWE510_Trapdoor__ip_based_logic_14.c":243:17)
#loc355 = loc("CWE510_Trapdoor__ip_based_logic_14.c":246:17)
#loc356 = loc("CWE510_Trapdoor__ip_based_logic_14.c":243:21)
#loc357 = loc("CWE510_Trapdoor__ip_based_logic_14.c":243:37)
#loc358 = loc("CWE510_Trapdoor__ip_based_logic_14.c":244:17)
#loc359 = loc("CWE510_Trapdoor__ip_based_logic_14.c":245:21)
#loc360 = loc("CWE510_Trapdoor__ip_based_logic_14.c":248:17)
#loc361 = loc("CWE510_Trapdoor__ip_based_logic_14.c":251:17)
#loc362 = loc("CWE510_Trapdoor__ip_based_logic_14.c":248:26)
#loc363 = loc("CWE510_Trapdoor__ip_based_logic_14.c":248:40)
#loc364 = loc("CWE510_Trapdoor__ip_based_logic_14.c":248:57)
#loc365 = loc("CWE510_Trapdoor__ip_based_logic_14.c":248:79)
#loc366 = loc("CWE510_Trapdoor__ip_based_logic_14.c":248:82)
#loc367 = loc("CWE510_Trapdoor__ip_based_logic_14.c":248:21)
#loc368 = loc("CWE510_Trapdoor__ip_based_logic_14.c":248:88)
#loc369 = loc("CWE510_Trapdoor__ip_based_logic_14.c":249:17)
#loc370 = loc("CWE510_Trapdoor__ip_based_logic_14.c":250:31)
#loc371 = loc("CWE510_Trapdoor__ip_based_logic_14.c":250:21)
#loc372 = loc("CWE510_Trapdoor__ip_based_logic_14.c":253:20)
#loc373 = loc("CWE510_Trapdoor__ip_based_logic_14.c":254:13)
#loc374 = loc("CWE510_Trapdoor__ip_based_logic_14.c":257:13)
#loc375 = loc("CWE510_Trapdoor__ip_based_logic_14.c":254:17)
#loc376 = loc("CWE510_Trapdoor__ip_based_logic_14.c":254:33)
#loc377 = loc("CWE510_Trapdoor__ip_based_logic_14.c":255:13)
#loc378 = loc("CWE510_Trapdoor__ip_based_logic_14.c":256:30)
#loc379 = loc("CWE510_Trapdoor__ip_based_logic_14.c":256:17)
#loc380 = loc("CWE510_Trapdoor__ip_based_logic_14.c":258:13)
#loc381 = loc("CWE510_Trapdoor__ip_based_logic_14.c":261:13)
#loc382 = loc("CWE510_Trapdoor__ip_based_logic_14.c":258:17)
#loc383 = loc("CWE510_Trapdoor__ip_based_logic_14.c":258:33)
#loc384 = loc("CWE510_Trapdoor__ip_based_logic_14.c":259:13)
#loc385 = loc("CWE510_Trapdoor__ip_based_logic_14.c":260:30)
#loc386 = loc("CWE510_Trapdoor__ip_based_logic_14.c":260:17)
#loc387 = loc(fused[#loc1, #loc2])
#loc388 = loc(fused[#loc3, #loc4])
#loc389 = loc(fused[#loc5, #loc6])
#loc390 = loc(fused[#loc7, #loc8])
#loc391 = loc(fused[#loc9, #loc10])
#loc392 = loc(fused[#loc11, #loc12])
#loc393 = loc(fused[#loc13, #loc14])
#loc394 = loc(fused[#loc15, #loc16])
#loc395 = loc(fused[#loc18, #loc19])
#loc396 = loc(fused[#loc20, #loc21])
#loc397 = loc(fused[#loc24, #loc25])
#loc398 = loc(fused[#loc27, #loc28])
#loc399 = loc(fused[#loc29, #loc30])
#loc400 = loc(fused[#loc31, #loc32])
#loc401 = loc(fused[#loc33, #loc34])
#loc402 = loc(fused[#loc35, #loc32])
#loc403 = loc(fused[#loc36, #loc37])
#loc404 = loc(fused[#loc38, #loc39])
#loc405 = loc(fused[#loc38, #loc40])
#loc406 = loc(fused[#loc41, #loc42])
#loc407 = loc(fused[#loc43, #loc44])
#loc408 = loc(fused[#loc45, #loc46])
#loc409 = loc(fused[#loc47, #loc42])
#loc410 = loc(fused[#loc48, #loc49])
#loc411 = loc(fused[#loc50, #loc51])
#loc412 = loc(fused[#loc56, #loc57])
#loc413 = loc(fused[#loc58, #loc59])
#loc414 = loc(fused[#loc60, #loc61])
#loc415 = loc(fused[#loc62, #loc59])
#loc416 = loc(fused[#loc64, #loc65])
#loc417 = loc(fused[#loc67, #loc68])
#loc418 = loc(fused[#loc69, #loc70])
#loc419 = loc(fused[#loc73, #loc71])
#loc420 = loc(fused[#loc77, #loc74])
#loc421 = loc(fused[#loc81, #loc82])
#loc422 = loc(fused[#loc83, #loc84])
#loc423 = loc(fused[#loc86, #loc87])
#loc424 = loc(fused[#loc88, #loc89])
#loc425 = loc(fused[#loc90, #loc91])
#loc426 = loc(fused[#loc92, #loc84])
#loc427 = loc(fused[#loc94, #loc95])
#loc428 = loc(fused[#loc98, #loc99])
#loc429 = loc(fused[#loc100, #loc95])
#loc430 = loc(fused[#loc106, #loc107])
#loc431 = loc(fused[#loc108, #loc109])
#loc432 = loc(fused[#loc110, #loc111])
#loc433 = loc(fused[#loc112, #loc109])
#loc434 = loc(fused[#loc114, #loc115])
#loc435 = loc(fused[#loc117, #loc118])
#loc436 = loc(fused[#loc119, #loc120])
#loc437 = loc(fused[#loc121, #loc122])
#loc438 = loc(fused[#loc124, #loc115])
#loc439 = loc(fused[#loc126, #loc127])
#loc440 = loc(fused[#loc128, #loc130])
#loc441 = loc(fused[#loc131, #loc132, #loc133, #loc127])
#loc442 = loc(fused[#loc134, #loc135])
#loc443 = loc(fused[#loc137, #loc138])
#loc444 = loc(fused[#loc140, #loc141])
#loc445 = loc(fused[#loc142, #loc135])
#loc446 = loc(fused[#loc144, #loc145])
#loc447 = loc(fused[#loc147, #loc148])
#loc448 = loc(fused[#loc150, #loc151])
#loc449 = loc(fused[#loc152, #loc145])
#loc450 = loc(fused[#loc155, #loc156])
#loc451 = loc(fused[#loc157, #loc158])
#loc452 = loc(fused[#loc159, #loc156])
#loc453 = loc(fused[#loc162, #loc163])
#loc454 = loc(fused[#loc164, #loc165])
#loc455 = loc(fused[#loc166, #loc163])
#loc456 = loc(fused[#loc169, #loc170])
#loc457 = loc(fused[#loc171, #loc172])
#loc458 = loc(fused[#loc173, #loc174])
#loc459 = loc(fused[#loc176, #loc177])
#loc460 = loc(fused[#loc178, #loc179])
#loc461 = loc(fused[#loc180, #loc181])
#loc462 = loc(fused[#loc182, #loc183, #loc184, #loc179])
#loc463 = loc(fused[#loc186, #loc187])
#loc464 = loc(fused[#loc188, #loc189])
#loc465 = loc(fused[#loc190, #loc191])
#loc466 = loc(fused[#loc192, #loc193])
#loc467 = loc(fused[#loc194, #loc195])
#loc468 = loc(fused[#loc196, #loc197])
#loc469 = loc(fused[#loc202, #loc203])
#loc470 = loc(fused[#loc204, #loc205])
#loc471 = loc(fused[#loc206, #loc207])
#loc472 = loc(fused[#loc208, #loc205])
#loc473 = loc(fused[#loc210, #loc211])
#loc474 = loc(fused[#loc213, #loc214])
#loc475 = loc(fused[#loc215, #loc216])
#loc476 = loc(fused[#loc218, #loc217])
#loc477 = loc(fused[#loc220, #loc219])
#loc478 = loc(fused[#loc223, #loc224])
#loc479 = loc(fused[#loc225, #loc226])
#loc480 = loc(fused[#loc228, #loc229])
#loc481 = loc(fused[#loc230, #loc231])
#loc482 = loc(fused[#loc232, #loc233])
#loc483 = loc(fused[#loc234, #loc226])
#loc484 = loc(fused[#loc236, #loc237])
#loc485 = loc(fused[#loc240, #loc241])
#loc486 = loc(fused[#loc242, #loc237])
#loc487 = loc(fused[#loc248, #loc249])
#loc488 = loc(fused[#loc250, #loc251])
#loc489 = loc(fused[#loc252, #loc253])
#loc490 = loc(fused[#loc254, #loc251])
#loc491 = loc(fused[#loc256, #loc257])
#loc492 = loc(fused[#loc260, #loc261])
#loc493 = loc(fused[#loc263, #loc264])
#loc494 = loc(fused[#loc265, #loc257])
#loc495 = loc(fused[#loc269, #loc270])
#loc496 = loc(fused[#loc271, #loc272])
#loc497 = loc(fused[#loc273, #loc270])
#loc498 = loc(fused[#loc276, #loc277])
#loc499 = loc(fused[#loc278, #loc279])
#loc500 = loc(fused[#loc280, #loc277])
#loc501 = loc(fused[#loc283, #loc284])
#loc502 = loc(fused[#loc285, #loc286])
#loc503 = loc(fused[#loc287, #loc288])
#loc504 = loc(fused[#loc289, #loc286])
#loc505 = loc(fused[#loc290, #loc291])
#loc506 = loc(fused[#loc292, #loc293])
#loc507 = loc(fused[#loc294, #loc295])
#loc508 = loc(fused[#loc296, #loc297])
#loc509 = loc(fused[#loc298, #loc299])
#loc510 = loc(fused[#loc300, #loc301])
#loc511 = loc(fused[#loc306, #loc307])
#loc512 = loc(fused[#loc308, #loc309])
#loc513 = loc(fused[#loc310, #loc311])
#loc514 = loc(fused[#loc312, #loc309])
#loc515 = loc(fused[#loc314, #loc315])
#loc516 = loc(fused[#loc317, #loc318])
#loc517 = loc(fused[#loc319, #loc320])
#loc518 = loc(fused[#loc322, #loc321])
#loc519 = loc(fused[#loc324, #loc323])
#loc520 = loc(fused[#loc327, #loc328])
#loc521 = loc(fused[#loc329, #loc330])
#loc522 = loc(fused[#loc332, #loc333])
#loc523 = loc(fused[#loc334, #loc335])
#loc524 = loc(fused[#loc336, #loc337])
#loc525 = loc(fused[#loc338, #loc330])
#loc526 = loc(fused[#loc340, #loc341])
#loc527 = loc(fused[#loc344, #loc345])
#loc528 = loc(fused[#loc346, #loc341])
#loc529 = loc(fused[#loc352, #loc353])
#loc530 = loc(fused[#loc354, #loc355])
#loc531 = loc(fused[#loc356, #loc357])
#loc532 = loc(fused[#loc358, #loc355])
#loc533 = loc(fused[#loc360, #loc361])
#loc534 = loc(fused[#loc364, #loc365])
#loc535 = loc(fused[#loc367, #loc368])
#loc536 = loc(fused[#loc369, #loc361])
#loc537 = loc(fused[#loc373, #loc374])
#loc538 = loc(fused[#loc375, #loc376])
#loc539 = loc(fused[#loc377, #loc374])
#loc540 = loc(fused[#loc380, #loc381])
#loc541 = loc(fused[#loc382, #loc383])
#loc542 = loc(fused[#loc384, #loc381])
