!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execl_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.global "private" constant cir_private @__const.goodG2B.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc192)
  cir.global "private" constant cir_private @__const.CWE78_OS_Command_Injection__char_connect_socket_execl_16_bad.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc193)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc194)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc195)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc196)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc11)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc197)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc198)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc199)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc200)
  cir.func private @close(!s32i) -> !s32i loc(#loc201)
  cir.func private @execl(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc202)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"/bin/sh\00" : !cir.array<!s8i x 8>> : !cir.array<!s8i x 8> {alignment = 1 : i64} loc(#loc24)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"-c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc25)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_execl_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc204)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc193)
    %2 = cir.get_global @__const.CWE78_OS_Command_Injection__char_connect_socket_execl_16_bad.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc193)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc193)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc30)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc205)
    cir.scope {
      cir.while {
        %13 = cir.const #cir.int<1> : !s32i loc(#loc34)
        %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc34)
        cir.condition(%14) loc(#loc34)
      } do {
        cir.scope {
          cir.scope {
            %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc209)
            %14 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc210)
            %15 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc211)
            %16 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc212)
            %17 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc213)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc45)
            %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc45)
            cir.store %19, %16 : !s32i, !cir.ptr<!s32i> loc(#loc212)
            %20 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc48)
            %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
            %22 = cir.call @strlen(%21) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc48)
            cir.store %22, %17 : !u64i, !cir.ptr<!u64i> loc(#loc213)
            cir.scope {
              cir.do {
                cir.scope {
                  %23 = cir.const #cir.int<2> : !s32i loc(#loc54)
                  %24 = cir.const #cir.int<1> : !s32i loc(#loc55)
                  %25 = cir.const #cir.int<6> : !s32i loc(#loc56)
                  %26 = cir.call @socket(%23, %24, %25) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc57)
                  cir.store %26, %16 : !s32i, !cir.ptr<!s32i> loc(#loc216)
                  cir.scope {
                    %77 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc62)
                    %78 = cir.const #cir.int<1> : !s32i loc(#loc63)
                    %79 = cir.unary(minus, %78) nsw : !s32i, !s32i loc(#loc63)
                    %80 = cir.cmp(eq, %77, %79) : !s32i, !cir.bool loc(#loc218)
                    cir.if %80 {
                      cir.break loc(#loc65)
                    } loc(#loc219)
                  } loc(#loc217)
                  %27 = cir.cast(bitcast, %14 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc220)
                  %28 = cir.const #cir.int<0> : !s32i loc(#loc68)
                  %29 = cir.const #cir.int<16> : !u64i loc(#loc221)
                  cir.libc.memset %29 bytes from %27 set to %28 : !cir.ptr<!void>, !s32i, !u64i loc(#loc222)
                  %30 = cir.const #cir.int<2> : !s32i loc(#loc73)
                  %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc73)
                  %32 = cir.get_member %14[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
                  cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc223)
                  %33 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc11)
                  %34 = cir.cast(array_to_ptrdecay, %33 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc11)
                  %35 = cir.call @inet_addr(%34) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc76)
                  %36 = cir.get_member %14[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc77)
                  %37 = cir.get_member %36[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc78)
                  cir.store %35, %37 : !u32i, !cir.ptr<!u32i> loc(#loc224)
                  %38 = cir.const #cir.int<27015> : !s32i loc(#loc81)
                  %39 = cir.cast(integral, %38 : !s32i), !u16i loc(#loc81)
                  %40 = cir.call @htons(%39) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc82)
                  %41 = cir.get_member %14[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc83)
                  cir.store %40, %41 : !u16i, !cir.ptr<!u16i> loc(#loc225)
                  cir.scope {
                    %77 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc88)
                    %78 = cir.cast(bitcast, %14 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc227)
                    %79 = cir.const #cir.int<16> : !u64i loc(#loc228)
                    %80 = cir.cast(integral, %79 : !u64i), !u32i loc(#loc228)
                    %81 = cir.call @connect(%77, %78, %80) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc93)
                    %82 = cir.const #cir.int<1> : !s32i loc(#loc94)
                    %83 = cir.unary(minus, %82) nsw : !s32i, !s32i loc(#loc94)
                    %84 = cir.cmp(eq, %81, %83) : !s32i, !cir.bool loc(#loc229)
                    cir.if %84 {
                      cir.break loc(#loc96)
                    } loc(#loc230)
                  } loc(#loc226)
                  %42 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc97)
                  %43 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc98)
                  %44 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc99)
                  %45 = cir.ptr_stride(%43 : !cir.ptr<!s8i>, %44 : !u64i), !cir.ptr<!s8i> loc(#loc100)
                  %46 = cir.cast(bitcast, %45 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc231)
                  %47 = cir.const #cir.int<1> : !u64i loc(#loc232)
                  %48 = cir.const #cir.int<100> : !s32i loc(#loc105)
                  %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc105)
                  %50 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc106)
                  %51 = cir.binop(sub, %49, %50) : !u64i loc(#loc233)
                  %52 = cir.const #cir.int<1> : !s32i loc(#loc107)
                  %53 = cir.cast(integral, %52 : !s32i), !u64i loc(#loc107)
                  %54 = cir.binop(sub, %51, %53) : !u64i loc(#loc234)
                  %55 = cir.binop(mul, %47, %54) : !u64i loc(#loc235)
                  %56 = cir.const #cir.int<0> : !s32i loc(#loc109)
                  %57 = cir.call @recv(%42, %46, %55, %56) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc110)
                  %58 = cir.cast(integral, %57 : !s64i), !s32i loc(#loc110)
                  cir.store %58, %13 : !s32i, !cir.ptr<!s32i> loc(#loc236)
                  cir.scope {
                    %77 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc115)
                    %78 = cir.const #cir.int<1> : !s32i loc(#loc116)
                    %79 = cir.unary(minus, %78) nsw : !s32i, !s32i loc(#loc116)
                    %80 = cir.cmp(eq, %77, %79) : !s32i, !cir.bool loc(#loc238)
                    %81 = cir.ternary(%80, true {
                      %82 = cir.const #true loc(#loc117)
                      cir.yield %82 : !cir.bool loc(#loc117)
                    }, false {
                      %82 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc118)
                      %83 = cir.const #cir.int<0> : !s32i loc(#loc119)
                      %84 = cir.cmp(eq, %82, %83) : !s32i, !cir.bool loc(#loc239)
                      %85 = cir.ternary(%84, true {
                        %86 = cir.const #true loc(#loc117)
                        cir.yield %86 : !cir.bool loc(#loc117)
                      }, false {
                        %86 = cir.const #false loc(#loc117)
                        cir.yield %86 : !cir.bool loc(#loc117)
                      }) : (!cir.bool) -> !cir.bool loc(#loc117)
                      cir.yield %85 : !cir.bool loc(#loc117)
                    }) : (!cir.bool) -> !cir.bool loc(#loc117)
                    cir.if %81 {
                      cir.break loc(#loc121)
                    } loc(#loc240)
                  } loc(#loc237)
                  %59 = cir.const #cir.int<0> : !s32i loc(#loc122)
                  %60 = cir.cast(integral, %59 : !s32i), !s8i loc(#loc122)
                  %61 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
                  %62 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc124)
                  %63 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc125)
                  %64 = cir.cast(integral, %63 : !s32i), !u64i loc(#loc125)
                  %65 = cir.const #cir.int<1> : !u64i loc(#loc241)
                  %66 = cir.binop(div, %64, %65) : !u64i loc(#loc242)
                  %67 = cir.binop(add, %62, %66) : !u64i loc(#loc243)
                  %68 = cir.ptr_stride(%61 : !cir.ptr<!s8i>, %67 : !u64i), !cir.ptr<!s8i> loc(#loc128)
                  cir.store %60, %68 : !s8i, !cir.ptr<!s8i> loc(#loc244)
                  %69 = cir.get_global @strchr : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i>>> loc(#loc129)
                  %70 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc130)
                  %71 = cir.const #cir.int<13> : !s32i loc(#loc131)
                  %72 = cir.call @strchr(%70, %71) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc129)
                  cir.store %72, %15 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc245)
                  cir.scope {
                    %77 = cir.load %15 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc136)
                    %78 = cir.cast(ptr_to_bool, %77 : !cir.ptr<!s8i>), !cir.bool loc(#loc136)
                    cir.if %78 {
                      %79 = cir.const #cir.int<0> : !s32i loc(#loc138)
                      %80 = cir.cast(integral, %79 : !s32i), !s8i loc(#loc138)
                      %81 = cir.load deref %15 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc139)
                      cir.store %80, %81 : !s8i, !cir.ptr<!s8i> loc(#loc248)
                    } loc(#loc247)
                  } loc(#loc246)
                  %73 = cir.get_global @strchr : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i>>> loc(#loc141)
                  %74 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc142)
                  %75 = cir.const #cir.int<10> : !s32i loc(#loc143)
                  %76 = cir.call @strchr(%74, %75) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc141)
                  cir.store %76, %15 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc249)
                  cir.scope {
                    %77 = cir.load %15 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc148)
                    %78 = cir.cast(ptr_to_bool, %77 : !cir.ptr<!s8i>), !cir.bool loc(#loc148)
                    cir.if %78 {
                      %79 = cir.const #cir.int<0> : !s32i loc(#loc150)
                      %80 = cir.cast(integral, %79 : !s32i), !s8i loc(#loc150)
                      %81 = cir.load deref %15 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc151)
                      cir.store %80, %81 : !s8i, !cir.ptr<!s8i> loc(#loc252)
                    } loc(#loc251)
                  } loc(#loc250)
                } loc(#loc215)
                cir.yield loc(#loc51)
              } while {
                %23 = cir.const #cir.int<0> : !s32i loc(#loc153)
                %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc153)
                cir.condition(%24) loc(#loc153)
              } loc(#loc214)
            } loc(#loc214)
            cir.scope {
              %23 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc156)
              %24 = cir.const #cir.int<1> : !s32i loc(#loc157)
              %25 = cir.unary(minus, %24) nsw : !s32i, !s32i loc(#loc157)
              %26 = cir.cmp(ne, %23, %25) : !s32i, !cir.bool loc(#loc254)
              cir.if %26 {
                %27 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc159)
                %28 = cir.call @close(%27) : (!s32i) -> !s32i loc(#loc160)
              } loc(#loc255)
            } loc(#loc253)
          } loc(#loc208)
          cir.break loc(#loc161)
        } loc(#loc207)
        cir.yield loc(#loc33)
      } loc(#loc206)
    } loc(#loc206)
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc24)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc24)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc162)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc162)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc25)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc25)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc163)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc164)
    %12 = cir.call @execl(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc165)
    cir.return loc(#loc27)
  } loc(#loc203)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_execl_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc257)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc168)
    cir.return loc(#loc167)
  } loc(#loc256)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc258)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc172)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc260)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc192)
    %2 = cir.get_global @__const.goodG2B.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc192)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc192)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc177)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc261)
    cir.scope {
      cir.while {
        %13 = cir.const #cir.int<1> : !s32i loc(#loc181)
        %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc181)
        cir.condition(%14) loc(#loc181)
      } do {
        cir.scope {
          %13 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc183)
          %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc184)
          %15 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc172)
          %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc172)
          %17 = cir.call @strcat(%14, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc183)
          cir.break loc(#loc185)
        } loc(#loc263)
        cir.yield loc(#loc180)
      } loc(#loc262)
    } loc(#loc262)
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc186)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc186)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc187)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc187)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc188)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc188)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc189)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc190)
    %12 = cir.call @execl(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc191)
    cir.return loc(#loc174)
  } loc(#loc259)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":0:0)
#loc1 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":154:5)
#loc2 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":154:28)
#loc3 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":68:5)
#loc4 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":68:28)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc9 = loc("/usr/include/arpa/inet.h":34:1)
#loc10 = loc("/usr/include/arpa/inet.h":34:47)
#loc11 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":99:53)
#loc12 = loc("/usr/include/netinet/in.h":402:1)
#loc13 = loc("/usr/include/netinet/in.h":403:40)
#loc14 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc15 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc16 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc17 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc18 = loc("/usr/include/string.h":246:1)
#loc19 = loc("/usr/include/string.h":247:33)
#loc20 = loc("/usr/include/unistd.h":358:1)
#loc21 = loc("/usr/include/unistd.h":358:27)
#loc22 = loc("/usr/include/unistd.h":594:1)
#loc23 = loc("/usr/include/unistd.h":595:14)
#loc24 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":143:11)
#loc25 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":143:47)
#loc26 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":65:1)
#loc27 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":144:1)
#loc28 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":67:5)
#loc29 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":67:12)
#loc30 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":69:12)
#loc31 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":69:5)
#loc32 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":70:5)
#loc33 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":140:5)
#loc34 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":70:11)
#loc35 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":71:5)
#loc36 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":72:9)
#loc37 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":138:9)
#loc38 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":77:13)
#loc39 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":77:17)
#loc40 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":78:13)
#loc41 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":78:32)
#loc42 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":79:13)
#loc43 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":79:19)
#loc44 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":80:13)
#loc45 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":80:36)
#loc46 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":81:13)
#loc47 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":81:41)
#loc48 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":81:30)
#loc49 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":81:37)
#loc50 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":82:13)
#loc51 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":127:21)
#loc52 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":83:13)
#loc53 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":126:13)
#loc54 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":92:40)
#loc55 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":92:49)
#loc56 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":92:62)
#loc57 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":92:33)
#loc58 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":92:17)
#loc59 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":92:73)
#loc60 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":93:17)
#loc61 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":96:17)
#loc62 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":93:21)
#loc63 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":93:38)
#loc64 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":94:17)
#loc65 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":95:21)
#loc66 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":97:24)
#loc67 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":97:25)
#loc68 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":97:34)
#loc69 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":97:37)
#loc70 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":97:51)
#loc71 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":97:17)
#loc72 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":97:52)
#loc73 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":98:38)
#loc74 = loc("/usr/include/netinet/in.h":249:5)
#loc75 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":98:17)
#loc76 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":99:43)
#loc77 = loc("/usr/include/netinet/in.h":251:20)
#loc78 = loc("/usr/include/netinet/in.h":33:15)
#loc79 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":99:17)
#loc80 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":99:63)
#loc81 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":100:42)
#loc82 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":100:36)
#loc83 = loc("/usr/include/netinet/in.h":250:15)
#loc84 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":100:17)
#loc85 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":100:50)
#loc86 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":101:17)
#loc87 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":104:17)
#loc88 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":101:29)
#loc89 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":101:62)
#loc90 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":101:63)
#loc91 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":101:72)
#loc92 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":101:86)
#loc93 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":101:21)
#loc94 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":101:92)
#loc95 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":102:17)
#loc96 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":103:21)
#loc97 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":108:35)
#loc98 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":108:59)
#loc99 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":108:66)
#loc100 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":108:64)
#loc101 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":108:50)
#loc102 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":108:73)
#loc103 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":108:76)
#loc104 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":108:87)
#loc105 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":108:92)
#loc106 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":108:98)
#loc107 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":108:108)
#loc108 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":108:109)
#loc109 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":108:112)
#loc110 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":108:30)
#loc111 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":108:17)
#loc112 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":108:113)
#loc113 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":109:17)
#loc114 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":112:17)
#loc115 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":109:21)
#loc116 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":109:35)
#loc117 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":109:48)
#loc118 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":109:51)
#loc119 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":109:65)
#loc120 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":110:17)
#loc121 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":111:21)
#loc122 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":114:61)
#loc123 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":114:17)
#loc124 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":114:22)
#loc125 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":114:32)
#loc126 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":114:45)
#loc127 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":114:56)
#loc128 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":114:57)
#loc129 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":116:27)
#loc130 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":116:34)
#loc131 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":116:40)
#loc132 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":116:17)
#loc133 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":116:44)
#loc134 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":117:17)
#loc135 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":120:17)
#loc136 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":117:21)
#loc137 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":118:17)
#loc138 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":119:32)
#loc139 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":119:22)
#loc140 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":119:21)
#loc141 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":121:27)
#loc142 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":121:34)
#loc143 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":121:40)
#loc144 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":121:17)
#loc145 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":121:44)
#loc146 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":122:17)
#loc147 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":125:17)
#loc148 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":122:21)
#loc149 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":123:17)
#loc150 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":124:32)
#loc151 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":124:22)
#loc152 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":124:21)
#loc153 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":127:20)
#loc154 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":128:13)
#loc155 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":131:13)
#loc156 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":128:17)
#loc157 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":128:34)
#loc158 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":129:13)
#loc159 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":130:30)
#loc160 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":130:17)
#loc161 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":139:9)
#loc162 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":143:29)
#loc163 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":143:61)
#loc164 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":143:75)
#loc165 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":143:5)
#loc166 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":167:1)
#loc167 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":170:1)
#loc168 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":169:5)
#loc169 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":169:13)
#loc170 = loc("/usr/include/string.h":149:1)
#loc171 = loc("/usr/include/string.h":150:14)
#loc172 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":159:22)
#loc173 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":151:1)
#loc174 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":165:1)
#loc175 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":153:5)
#loc176 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":153:12)
#loc177 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":155:12)
#loc178 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":155:5)
#loc179 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":156:5)
#loc180 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":161:5)
#loc181 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":156:11)
#loc182 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":157:5)
#loc183 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":159:9)
#loc184 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":159:16)
#loc185 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":160:9)
#loc186 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":164:11)
#loc187 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":164:29)
#loc188 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":164:47)
#loc189 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":164:61)
#loc190 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":164:75)
#loc191 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_16.c":164:5)
#loc192 = loc(fused[#loc1, #loc2])
#loc193 = loc(fused[#loc3, #loc4])
#loc194 = loc(fused[#loc5, #loc6])
#loc195 = loc(fused[#loc7, #loc8])
#loc196 = loc(fused[#loc9, #loc10])
#loc197 = loc(fused[#loc12, #loc13])
#loc198 = loc(fused[#loc14, #loc15])
#loc199 = loc(fused[#loc16, #loc17])
#loc200 = loc(fused[#loc18, #loc19])
#loc201 = loc(fused[#loc20, #loc21])
#loc202 = loc(fused[#loc22, #loc23])
#loc203 = loc(fused[#loc26, #loc27])
#loc204 = loc(fused[#loc28, #loc29])
#loc205 = loc(fused[#loc31, #loc30])
#loc206 = loc(fused[#loc32, #loc33])
#loc207 = loc(fused[#loc35, #loc33])
#loc208 = loc(fused[#loc36, #loc37])
#loc209 = loc(fused[#loc38, #loc39])
#loc210 = loc(fused[#loc40, #loc41])
#loc211 = loc(fused[#loc42, #loc43])
#loc212 = loc(fused[#loc44, #loc45])
#loc213 = loc(fused[#loc46, #loc47])
#loc214 = loc(fused[#loc50, #loc51])
#loc215 = loc(fused[#loc52, #loc53])
#loc216 = loc(fused[#loc58, #loc59])
#loc217 = loc(fused[#loc60, #loc61])
#loc218 = loc(fused[#loc62, #loc63])
#loc219 = loc(fused[#loc64, #loc61])
#loc220 = loc(fused[#loc66, #loc67])
#loc221 = loc(fused[#loc69, #loc70])
#loc222 = loc(fused[#loc71, #loc72])
#loc223 = loc(fused[#loc75, #loc73])
#loc224 = loc(fused[#loc79, #loc80])
#loc225 = loc(fused[#loc84, #loc85])
#loc226 = loc(fused[#loc86, #loc87])
#loc227 = loc(fused[#loc89, #loc90])
#loc228 = loc(fused[#loc91, #loc92])
#loc229 = loc(fused[#loc93, #loc94])
#loc230 = loc(fused[#loc95, #loc87])
#loc231 = loc(fused[#loc101, #loc102])
#loc232 = loc(fused[#loc103, #loc104])
#loc233 = loc(fused[#loc105, #loc106])
#loc234 = loc(fused[#loc105, #loc107])
#loc235 = loc(fused[#loc103, #loc108])
#loc236 = loc(fused[#loc111, #loc112])
#loc237 = loc(fused[#loc113, #loc114])
#loc238 = loc(fused[#loc115, #loc116])
#loc239 = loc(fused[#loc118, #loc119])
#loc240 = loc(fused[#loc120, #loc114])
#loc241 = loc(fused[#loc126, #loc127])
#loc242 = loc(fused[#loc125, #loc127])
#loc243 = loc(fused[#loc124, #loc127])
#loc244 = loc(fused[#loc123, #loc122])
#loc245 = loc(fused[#loc132, #loc133])
#loc246 = loc(fused[#loc134, #loc135])
#loc247 = loc(fused[#loc137, #loc135])
#loc248 = loc(fused[#loc140, #loc138])
#loc249 = loc(fused[#loc144, #loc145])
#loc250 = loc(fused[#loc146, #loc147])
#loc251 = loc(fused[#loc149, #loc147])
#loc252 = loc(fused[#loc152, #loc150])
#loc253 = loc(fused[#loc154, #loc155])
#loc254 = loc(fused[#loc156, #loc157])
#loc255 = loc(fused[#loc158, #loc155])
#loc256 = loc(fused[#loc166, #loc167])
#loc257 = loc(fused[#loc168, #loc169])
#loc258 = loc(fused[#loc170, #loc171])
#loc259 = loc(fused[#loc173, #loc174])
#loc260 = loc(fused[#loc175, #loc176])
#loc261 = loc(fused[#loc178, #loc177])
#loc262 = loc(fused[#loc179, #loc180])
#loc263 = loc(fused[#loc182, #loc180])
