!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":110:10)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":110:14)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":110:20)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":110:32)
#loc207 = loc(fused[#loc71, #loc72])
#loc208 = loc(fused[#loc73, #loc74])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc181)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc182)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc183)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc184)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc185)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc187)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc188)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc17)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc18)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc18)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc189)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc190)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc17)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc191)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc192)
    cir.br ^bb1 loc(#loc193)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc26)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc26)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc194)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc195)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc28)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc30)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
    cir.br ^bb3 loc(#loc24)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc24)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc196)
  ^bb5:  // pred: ^bb4
    %16 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc33)
    cir.brcond %17 ^bb6, ^bb7 loc(#loc197)
  ^bb6:  // pred: ^bb5
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc35)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc35)
    %20 = cir.const #cir.int<65> : !s32i loc(#loc36)
    %21 = cir.const #cir.int<100> : !s32i loc(#loc37)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc38)
    %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc37)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc37)
    cir.libc.memset %24 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc198)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc41)
    %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc41)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc42)
    %28 = cir.const #cir.int<100> : !s32i loc(#loc43)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc44)
    %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc43)
    %31 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc45)
    cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc199)
    cir.br ^bb7 loc(#loc32)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc32)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc200)
  ^bb9:  // pred: ^bb8
    %32 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc187)
    cir.store %32, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc187)
    %33 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc48)
    %34 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc49)
    %35 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
    %36 = cir.call @strcat(%34, %35) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc48)
    %37 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %38 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc53)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc54)
    %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc54)
    cir.call @free(%40) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc53)
    cir.br ^bb10 loc(#loc47)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc12)
  } loc(#loc186)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc202)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc57)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc203)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc59)
    cir.return loc(#loc56)
  } loc(#loc201)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc204)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc205)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc65)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc66)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc67)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc68)
  cir.func @main(%arg0: !s32i loc(fused[#loc71, #loc72]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc73, #loc74])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc207)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc208)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc70)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc75)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc75)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc76)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc77)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc77)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc78)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc65)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02_good : !cir.ptr<!cir.func<!void ()>> loc(#loc209)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02_good() : () -> () loc(#loc80)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc66)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc67)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc210)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02_bad() : () -> () loc(#loc84)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc68)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc87)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc211)
    cir.return %17 : !s32i loc(#loc211)
  } loc(#loc206)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc89)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc213)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc214)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc96)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc97)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc97)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc215)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc216)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc96)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc217)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc218)
    cir.br ^bb1 loc(#loc219)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc104)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc105)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc105)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc220)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc221)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc107)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc108)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc109)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc107)
    cir.br ^bb3 loc(#loc103)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc103)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc222)
  ^bb5:  // pred: ^bb4
    %16 = cir.const #cir.int<0> : !s32i loc(#loc112)
    %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc112)
    cir.brcond %17 ^bb6, ^bb7 loc(#loc223)
  ^bb6:  // pred: ^bb5
    %18 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc89)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc89)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc116)
    cir.br ^bb8 loc(#loc114)
  ^bb7:  // pred: ^bb5
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc117)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc117)
    %22 = cir.const #cir.int<65> : !s32i loc(#loc118)
    %23 = cir.const #cir.int<50> : !s32i loc(#loc119)
    %24 = cir.const #cir.int<1> : !s32i loc(#loc120)
    %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc119)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc119)
    cir.libc.memset %26 bytes from %21 set to %22 : !cir.ptr<!void>, !s32i, !u64i loc(#loc224)
    %27 = cir.const #cir.int<0> : !s32i loc(#loc123)
    %28 = cir.cast(integral, %27 : !s32i), !s8i loc(#loc123)
    %29 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc124)
    %30 = cir.const #cir.int<50> : !s32i loc(#loc125)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc126)
    %32 = cir.binop(sub, %30, %31) nsw : !s32i loc(#loc125)
    %33 = cir.ptr_stride(%29 : !cir.ptr<!s8i>, %32 : !s32i), !cir.ptr<!s8i> loc(#loc127)
    cir.store %28, %33 : !s8i, !cir.ptr<!s8i> loc(#loc225)
    cir.br ^bb8 loc(#loc111)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc111)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc226)
  ^bb10:  // pred: ^bb9
    %34 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc213)
    cir.store %34, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc213)
    %35 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc130)
    %36 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc131)
    %37 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc132)
    %38 = cir.call @strcat(%36, %37) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc130)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc133)
    cir.call @printLine(%39) : (!cir.ptr<!s8i>) -> () loc(#loc134)
    %40 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc135)
    %41 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc136)
    %42 = cir.cast(bitcast, %41 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc136)
    cir.call @free(%42) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc135)
    cir.br ^bb11 loc(#loc129)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc91)
  } loc(#loc212)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc228)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc229)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc143)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc144)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc144)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc230)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc231)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc143)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc232)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc233)
    cir.br ^bb1 loc(#loc234)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc151)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc152)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc152)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc235)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc236)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc154)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc155)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc156)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc154)
    cir.br ^bb3 loc(#loc150)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc150)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc237)
  ^bb5:  // pred: ^bb4
    %16 = cir.const #cir.int<1> : !s32i loc(#loc159)
    %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc159)
    cir.brcond %17 ^bb6, ^bb7 loc(#loc238)
  ^bb6:  // pred: ^bb5
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc161)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc161)
    %20 = cir.const #cir.int<65> : !s32i loc(#loc162)
    %21 = cir.const #cir.int<50> : !s32i loc(#loc163)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc164)
    %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc163)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc163)
    cir.libc.memset %24 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc239)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc167)
    %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc167)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc168)
    %28 = cir.const #cir.int<50> : !s32i loc(#loc169)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc170)
    %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc169)
    %31 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc171)
    cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc240)
    cir.br ^bb7 loc(#loc158)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc158)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc241)
  ^bb9:  // pred: ^bb8
    %32 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc228)
    cir.store %32, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc228)
    %33 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc174)
    %34 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc175)
    %35 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc176)
    %36 = cir.call @strcat(%34, %35) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc174)
    %37 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc177)
    cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc178)
    %38 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc179)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc180)
    %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc180)
    cir.call @free(%40) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc179)
    cir.br ^bb10 loc(#loc173)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc138)
  } loc(#loc227)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":149:1)
#loc6 = loc("/usr/include/string.h":150:14)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":23:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":41:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":35:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":35:25)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":25:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":25:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":26:20)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":26:27)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":26:31)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":26:42)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":26:43)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":26:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":27:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":27:33)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":27:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":27:17)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":27:23)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":27:24)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":27:30)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":27:29)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":28:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":33:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":28:8)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":29:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":31:16)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":31:22)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":31:27)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":31:31)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":31:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":31:32)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":32:23)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":32:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":32:14)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":32:18)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":32:19)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":34:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":40:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":37:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":37:16)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":37:22)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":38:19)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":38:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":39:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":39:14)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":94:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":98:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":96:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":96:14)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":97:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":97:14)
#loc61 = loc("/usr/include/stdlib.h":575:1)
#loc62 = loc("/usr/include/stdlib.h":575:41)
#loc63 = loc("/usr/include/time.h":76:1)
#loc64 = loc("/usr/include/time.h":76:38)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":115:15)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":117:15)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":120:15)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":122:15)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":110:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":125:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":111:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":113:27)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":113:22)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":113:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":115:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":116:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":116:63)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":117:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":120:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":121:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":121:62)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":122:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":124:12)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":124:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":56:19)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":48:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":71:1)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":65:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":65:25)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":50:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":50:12)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":51:20)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":51:27)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":51:31)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":51:42)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":51:43)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":51:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":52:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":52:33)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":52:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":52:17)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":52:23)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":52:24)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":52:30)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":52:29)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":53:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":63:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":53:8)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":54:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":57:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":59:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":56:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":61:16)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":61:22)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":61:27)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":61:30)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":61:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":61:31)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":62:22)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":62:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":62:14)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":62:17)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":62:18)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":64:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":70:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":67:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":67:16)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":67:22)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":68:19)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":68:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":69:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":69:14)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":74:1)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":92:1)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":86:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":86:25)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":76:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":76:12)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":77:20)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":77:27)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":77:31)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":77:42)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":77:43)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":77:5)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":78:5)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":78:33)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":78:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":78:17)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":78:23)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":78:24)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":78:30)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":78:29)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":79:5)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":84:5)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":79:8)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":80:5)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":82:16)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":82:22)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":82:27)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":82:30)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":82:9)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":82:31)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":83:22)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":83:9)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":83:14)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":83:17)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":83:18)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":85:5)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":91:5)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":88:9)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":88:16)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":88:22)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":89:19)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":89:9)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":90:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c":90:14)
#loc181 = loc(fused[#loc1, #loc2])
#loc182 = loc(fused[#loc3, #loc4])
#loc183 = loc(fused[#loc5, #loc6])
#loc184 = loc(fused[#loc7, #loc8])
#loc185 = loc(fused[#loc9, #loc10])
#loc186 = loc(fused[#loc11, #loc12])
#loc187 = loc(fused[#loc13, #loc14])
#loc188 = loc(fused[#loc15, #loc16])
#loc189 = loc(fused[#loc19, #loc20])
#loc190 = loc(fused[#loc18, #loc20])
#loc191 = loc(fused[#loc17, #loc21])
#loc192 = loc(fused[#loc22, #loc21])
#loc193 = loc(fused[#loc23, #loc24])
#loc194 = loc(fused[#loc25, #loc26])
#loc195 = loc(fused[#loc27, #loc24])
#loc196 = loc(fused[#loc31, #loc32])
#loc197 = loc(fused[#loc34, #loc32])
#loc198 = loc(fused[#loc39, #loc40])
#loc199 = loc(fused[#loc42, #loc41])
#loc200 = loc(fused[#loc46, #loc47])
#loc201 = loc(fused[#loc55, #loc56])
#loc202 = loc(fused[#loc57, #loc58])
#loc203 = loc(fused[#loc59, #loc60])
#loc204 = loc(fused[#loc61, #loc62])
#loc205 = loc(fused[#loc63, #loc64])
#loc206 = loc(fused[#loc69, #loc70])
#loc209 = loc(fused[#loc80, #loc81])
#loc210 = loc(fused[#loc84, #loc85])
#loc211 = loc(fused[#loc88, #loc87])
#loc212 = loc(fused[#loc90, #loc91])
#loc213 = loc(fused[#loc92, #loc93])
#loc214 = loc(fused[#loc94, #loc95])
#loc215 = loc(fused[#loc98, #loc99])
#loc216 = loc(fused[#loc97, #loc99])
#loc217 = loc(fused[#loc96, #loc100])
#loc218 = loc(fused[#loc101, #loc100])
#loc219 = loc(fused[#loc102, #loc103])
#loc220 = loc(fused[#loc104, #loc105])
#loc221 = loc(fused[#loc106, #loc103])
#loc222 = loc(fused[#loc110, #loc111])
#loc223 = loc(fused[#loc113, #loc114, #loc115, #loc111])
#loc224 = loc(fused[#loc121, #loc122])
#loc225 = loc(fused[#loc124, #loc123])
#loc226 = loc(fused[#loc128, #loc129])
#loc227 = loc(fused[#loc137, #loc138])
#loc228 = loc(fused[#loc139, #loc140])
#loc229 = loc(fused[#loc141, #loc142])
#loc230 = loc(fused[#loc145, #loc146])
#loc231 = loc(fused[#loc144, #loc146])
#loc232 = loc(fused[#loc143, #loc147])
#loc233 = loc(fused[#loc148, #loc147])
#loc234 = loc(fused[#loc149, #loc150])
#loc235 = loc(fused[#loc151, #loc152])
#loc236 = loc(fused[#loc153, #loc150])
#loc237 = loc(fused[#loc157, #loc158])
#loc238 = loc(fused[#loc160, #loc158])
#loc239 = loc(fused[#loc165, #loc166])
#loc240 = loc(fused[#loc168, #loc167])
#loc241 = loc(fused[#loc172, #loc173])
