!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc218 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":205:10)
#loc219 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":205:14)
#loc220 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":205:20)
#loc221 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":205:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc345 = loc(fused[#loc218, #loc219])
#loc346 = loc(fused[#loc220, #loc221])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s04/CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private @__const.goodG2B.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc261)
  cir.global "private" constant cir_private @__const.CWE78_OS_Command_Injection__char_listen_socket_execlp_12_bad.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc262)
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc263)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc264)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc265)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc266)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc267)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc268)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc269)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc270)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc271)
  cir.func private @close(!s32i) -> !s32i loc(#loc272)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc273)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc27)
  cir.func private @execlp(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc274)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"sh\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc30)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"-c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc31)
  cir.func no_proto @CWE78_OS_Command_Injection__char_listen_socket_execlp_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc276)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc262)
    %2 = cir.get_global @__const.CWE78_OS_Command_Injection__char_listen_socket_execlp_12_bad.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc262)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc262)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc36)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc277)
    cir.scope {
      %13 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc279)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc279)
      %15 = cir.call %14() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc40)
      %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc40)
      cir.if %16 {
        cir.scope {
          %17 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc282)
          %18 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc283)
          %19 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc284)
          %20 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc285)
          %21 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc286)
          %22 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc287)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc54)
          %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc54)
          cir.store %24, %20 : !s32i, !cir.ptr<!s32i> loc(#loc285)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc56)
          %26 = cir.unary(minus, %25) : !s32i, !s32i loc(#loc56)
          cir.store %26, %21 : !s32i, !cir.ptr<!s32i> loc(#loc286)
          %27 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc59)
          %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
          %29 = cir.call @strlen(%28) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc59)
          cir.store %29, %22 : !u64i, !cir.ptr<!u64i> loc(#loc287)
          cir.scope {
            cir.do {
              %30 = cir.const #cir.int<2> : !s32i loc(#loc63)
              %31 = cir.const #cir.int<1> : !s32i loc(#loc64)
              %32 = cir.const #cir.int<6> : !s32i loc(#loc65)
              %33 = cir.call @socket(%30, %31, %32) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc66)
              cir.store %33, %20 : !s32i, !cir.ptr<!s32i> loc(#loc289)
              cir.scope {
                %87 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc71)
                %88 = cir.const #cir.int<1> : !s32i loc(#loc72)
                %89 = cir.unary(minus, %88) : !s32i, !s32i loc(#loc72)
                %90 = cir.cmp(eq, %87, %89) : !s32i, !cir.bool loc(#loc291)
                cir.if %90 {
                  cir.break loc(#loc74)
                } loc(#loc292)
              } loc(#loc290)
              %34 = cir.cast(bitcast, %18 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc293)
              %35 = cir.const #cir.int<0> : !s32i loc(#loc77)
              %36 = cir.const #cir.int<16> : !u64i loc(#loc294)
              cir.libc.memset %36 bytes from %34 set to %35 : !cir.ptr<!void>, !s32i, !u64i loc(#loc295)
              %37 = cir.const #cir.int<2> : !s32i loc(#loc82)
              %38 = cir.cast(integral, %37 : !s32i), !u16i loc(#loc82)
              %39 = cir.get_member %18[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc83)
              cir.store %38, %39 : !u16i, !cir.ptr<!u16i> loc(#loc296)
              %40 = cir.const #cir.int<0> : !s32i loc(#loc85)
              %41 = cir.cast(integral, %40 : !s32i), !u32i loc(#loc85)
              %42 = cir.get_member %18[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc86)
              %43 = cir.get_member %42[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc87)
              cir.store %41, %43 : !u32i, !cir.ptr<!u32i> loc(#loc297)
              %44 = cir.const #cir.int<27015> : !s32i loc(#loc89)
              %45 = cir.cast(integral, %44 : !s32i), !u16i loc(#loc89)
              %46 = cir.call @htons(%45) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc90)
              %47 = cir.get_member %18[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc91)
              cir.store %46, %47 : !u16i, !cir.ptr<!u16i> loc(#loc298)
              cir.scope {
                %87 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc96)
                %88 = cir.cast(bitcast, %18 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc300)
                %89 = cir.const #cir.int<16> : !u64i loc(#loc301)
                %90 = cir.cast(integral, %89 : !u64i), !u32i loc(#loc301)
                %91 = cir.call @bind(%87, %88, %90) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc101)
                %92 = cir.const #cir.int<1> : !s32i loc(#loc102)
                %93 = cir.unary(minus, %92) : !s32i, !s32i loc(#loc102)
                %94 = cir.cmp(eq, %91, %93) : !s32i, !cir.bool loc(#loc302)
                cir.if %94 {
                  cir.break loc(#loc104)
                } loc(#loc303)
              } loc(#loc299)
              cir.scope {
                %87 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc107)
                %88 = cir.const #cir.int<5> : !s32i loc(#loc108)
                %89 = cir.call @listen(%87, %88) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc109)
                %90 = cir.const #cir.int<1> : !s32i loc(#loc110)
                %91 = cir.unary(minus, %90) : !s32i, !s32i loc(#loc110)
                %92 = cir.cmp(eq, %89, %91) : !s32i, !cir.bool loc(#loc305)
                cir.if %92 {
                  cir.break loc(#loc112)
                } loc(#loc306)
              } loc(#loc304)
              %48 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc113)
              %49 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc114)
              %50 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc115)
              %51 = cir.call @accept(%48, %49, %50) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc116)
              cir.store %51, %21 : !s32i, !cir.ptr<!s32i> loc(#loc307)
              cir.scope {
                %87 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc121)
                %88 = cir.const #cir.int<1> : !s32i loc(#loc122)
                %89 = cir.unary(minus, %88) : !s32i, !s32i loc(#loc122)
                %90 = cir.cmp(eq, %87, %89) : !s32i, !cir.bool loc(#loc309)
                cir.if %90 {
                  cir.break loc(#loc124)
                } loc(#loc310)
              } loc(#loc308)
              %52 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc125)
              %53 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc126)
              %54 = cir.load %22 : !cir.ptr<!u64i>, !u64i loc(#loc127)
              %55 = cir.ptr_stride(%53 : !cir.ptr<!s8i>, %54 : !u64i), !cir.ptr<!s8i> loc(#loc128)
              %56 = cir.cast(bitcast, %55 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc311)
              %57 = cir.const #cir.int<1> : !u64i loc(#loc312)
              %58 = cir.const #cir.int<100> : !s32i loc(#loc133)
              %59 = cir.cast(integral, %58 : !s32i), !u64i loc(#loc133)
              %60 = cir.load %22 : !cir.ptr<!u64i>, !u64i loc(#loc134)
              %61 = cir.binop(sub, %59, %60) : !u64i loc(#loc313)
              %62 = cir.const #cir.int<1> : !s32i loc(#loc135)
              %63 = cir.cast(integral, %62 : !s32i), !u64i loc(#loc135)
              %64 = cir.binop(sub, %61, %63) : !u64i loc(#loc314)
              %65 = cir.binop(mul, %57, %64) : !u64i loc(#loc315)
              %66 = cir.const #cir.int<0> : !s32i loc(#loc137)
              %67 = cir.call @recv(%52, %56, %65, %66) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc138)
              %68 = cir.cast(integral, %67 : !s64i), !s32i loc(#loc138)
              cir.store %68, %17 : !s32i, !cir.ptr<!s32i> loc(#loc316)
              cir.scope {
                %87 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc143)
                %88 = cir.const #cir.int<1> : !s32i loc(#loc144)
                %89 = cir.unary(minus, %88) : !s32i, !s32i loc(#loc144)
                %90 = cir.cmp(eq, %87, %89) : !s32i, !cir.bool loc(#loc318)
                %91 = cir.ternary(%90, true {
                  %92 = cir.const #true loc(#loc145)
                  cir.yield %92 : !cir.bool loc(#loc145)
                }, false {
                  %92 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc146)
                  %93 = cir.const #cir.int<0> : !s32i loc(#loc147)
                  %94 = cir.cmp(eq, %92, %93) : !s32i, !cir.bool loc(#loc319)
                  %95 = cir.ternary(%94, true {
                    %96 = cir.const #true loc(#loc145)
                    cir.yield %96 : !cir.bool loc(#loc145)
                  }, false {
                    %96 = cir.const #false loc(#loc145)
                    cir.yield %96 : !cir.bool loc(#loc145)
                  }) : (!cir.bool) -> !cir.bool loc(#loc145)
                  cir.yield %95 : !cir.bool loc(#loc145)
                }) : (!cir.bool) -> !cir.bool loc(#loc145)
                cir.if %91 {
                  cir.break loc(#loc149)
                } loc(#loc320)
              } loc(#loc317)
              %69 = cir.const #cir.int<0> : !s32i loc(#loc150)
              %70 = cir.cast(integral, %69 : !s32i), !s8i loc(#loc150)
              %71 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc151)
              %72 = cir.load %22 : !cir.ptr<!u64i>, !u64i loc(#loc152)
              %73 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc153)
              %74 = cir.cast(integral, %73 : !s32i), !u64i loc(#loc153)
              %75 = cir.const #cir.int<1> : !u64i loc(#loc321)
              %76 = cir.binop(div, %74, %75) : !u64i loc(#loc322)
              %77 = cir.binop(add, %72, %76) : !u64i loc(#loc323)
              %78 = cir.ptr_stride(%71 : !cir.ptr<!s8i>, %77 : !u64i), !cir.ptr<!s8i> loc(#loc156)
              cir.store %70, %78 : !s8i, !cir.ptr<!s8i> loc(#loc324)
              %79 = cir.get_global @strchr : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !s32i)>> loc(#loc157)
              %80 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc158)
              %81 = cir.const #cir.int<13> : !s32i loc(#loc159)
              %82 = cir.call @strchr(%80, %81) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc157)
              cir.store %82, %19 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc325)
              cir.scope {
                %87 = cir.load %19 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc164)
                %88 = cir.cast(ptr_to_bool, %87 : !cir.ptr<!s8i>), !cir.bool loc(#loc164)
                cir.if %88 {
                  %89 = cir.const #cir.int<0> : !s32i loc(#loc166)
                  %90 = cir.cast(integral, %89 : !s32i), !s8i loc(#loc166)
                  %91 = cir.load deref %19 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc167)
                  cir.store %90, %91 : !s8i, !cir.ptr<!s8i> loc(#loc328)
                } loc(#loc327)
              } loc(#loc326)
              %83 = cir.get_global @strchr : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !s32i)>> loc(#loc169)
              %84 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc170)
              %85 = cir.const #cir.int<10> : !s32i loc(#loc171)
              %86 = cir.call @strchr(%84, %85) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc169)
              cir.store %86, %19 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc329)
              cir.scope {
                %87 = cir.load %19 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc176)
                %88 = cir.cast(ptr_to_bool, %87 : !cir.ptr<!s8i>), !cir.bool loc(#loc176)
                cir.if %88 {
                  %89 = cir.const #cir.int<0> : !s32i loc(#loc178)
                  %90 = cir.cast(integral, %89 : !s32i), !s8i loc(#loc178)
                  %91 = cir.load deref %19 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc179)
                  cir.store %90, %91 : !s8i, !cir.ptr<!s8i> loc(#loc332)
                } loc(#loc331)
              } loc(#loc330)
              cir.yield loc(#loc62)
            } while {
              %30 = cir.const #cir.int<0> : !s32i loc(#loc181)
              %31 = cir.cast(int_to_bool, %30 : !s32i), !cir.bool loc(#loc181)
              cir.condition(%31) loc(#loc181)
            } loc(#loc288)
          } loc(#loc288)
          cir.scope {
            %30 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc184)
            %31 = cir.const #cir.int<1> : !s32i loc(#loc185)
            %32 = cir.unary(minus, %31) : !s32i, !s32i loc(#loc185)
            %33 = cir.cmp(ne, %30, %32) : !s32i, !cir.bool loc(#loc334)
            cir.if %33 {
              %34 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc187)
              %35 = cir.call @close(%34) : (!s32i) -> !s32i loc(#loc188)
            } loc(#loc335)
          } loc(#loc333)
          cir.scope {
            %30 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc191)
            %31 = cir.const #cir.int<1> : !s32i loc(#loc192)
            %32 = cir.unary(minus, %31) : !s32i, !s32i loc(#loc192)
            %33 = cir.cmp(ne, %30, %32) : !s32i, !cir.bool loc(#loc337)
            cir.if %33 {
              %34 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc194)
              %35 = cir.call @close(%34) : (!s32i) -> !s32i loc(#loc195)
            } loc(#loc338)
          } loc(#loc336)
        } loc(#loc281)
      } else {
        %17 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc196)
        %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc197)
        %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc27)
        %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc27)
        %21 = cir.call @strcat(%18, %20) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc196)
      } loc(#loc280)
    } loc(#loc278)
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc30)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc30)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc198)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc198)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc31)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc31)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc199)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc200)
    %12 = cir.call @execlp(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc201)
    cir.return loc(#loc33)
  } loc(#loc275)
  cir.func no_proto @CWE78_OS_Command_Injection__char_listen_socket_execlp_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc340)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc204)
    cir.return loc(#loc203)
  } loc(#loc339)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc341)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc342)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc343)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc212)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc213)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc214)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc215)
  cir.func @main(%arg0: !s32i loc(fused[#loc218, #loc219]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc220, #loc221])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc345)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc346)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc217)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc222)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc222)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc223)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc224)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc224)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc225)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc212)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc212)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc226)
    %8 = cir.get_global @CWE78_OS_Command_Injection__char_listen_socket_execlp_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc347)
    cir.call @CWE78_OS_Command_Injection__char_listen_socket_execlp_12_good() : () -> () loc(#loc227)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc213)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc213)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc229)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc214)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc214)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc230)
    %13 = cir.get_global @CWE78_OS_Command_Injection__char_listen_socket_execlp_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc348)
    cir.call @CWE78_OS_Command_Injection__char_listen_socket_execlp_12_bad() : () -> () loc(#loc231)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc215)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc215)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc233)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc234)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc349)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc349)
    cir.return %17 : !s32i loc(#loc349)
  } loc(#loc344)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc351)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc261)
    %2 = cir.get_global @__const.goodG2B.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc261)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc261)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc240)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc352)
    cir.scope {
      %13 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc354)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc354)
      %15 = cir.call %14() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc244)
      %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc244)
      cir.if %16 {
        %17 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc249)
        %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc250)
        %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc251)
        %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc251)
        %21 = cir.call @strcat(%18, %20) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc249)
      } else {
        %17 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc252)
        %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc253)
        %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc254)
        %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc254)
        %21 = cir.call @strcat(%18, %20) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc252)
      } loc(#loc355)
    } loc(#loc353)
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc255)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc255)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc256)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc256)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc257)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc257)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc258)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc259)
    %12 = cir.call @execlp(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc260)
    cir.return loc(#loc237)
  } loc(#loc350)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s04/CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":0:0)
#loc1 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":172:5)
#loc2 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":172:28)
#loc3 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":68:5)
#loc4 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":68:28)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("/usr/include/sys/socket.h":102:1)
#loc10 = loc("/usr/include/sys/socket.h":102:62)
#loc11 = loc("/usr/include/netinet/in.h":404:1)
#loc12 = loc("/usr/include/netinet/in.h":405:40)
#loc13 = loc("/usr/include/sys/socket.h":112:1)
#loc14 = loc("/usr/include/sys/socket.h":113:6)
#loc15 = loc("/usr/include/sys/socket.h":296:1)
#loc16 = loc("/usr/include/sys/socket.h":296:39)
#loc17 = loc("/usr/include/sys/socket.h":306:1)
#loc18 = loc("/usr/include/sys/socket.h":307:38)
#loc19 = loc("/usr/include/sys/socket.h":145:1)
#loc20 = loc("/usr/include/sys/socket.h":145:68)
#loc21 = loc("/usr/include/string.h":246:1)
#loc22 = loc("/usr/include/string.h":247:33)
#loc23 = loc("/usr/include/unistd.h":358:1)
#loc24 = loc("/usr/include/unistd.h":358:27)
#loc25 = loc("/usr/include/string.h":149:1)
#loc26 = loc("/usr/include/string.h":150:14)
#loc27 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":155:22)
#loc28 = loc("/usr/include/unistd.h":605:1)
#loc29 = loc("/usr/include/unistd.h":606:14)
#loc30 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":160:12)
#loc31 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":160:38)
#loc32 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":65:1)
#loc33 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":161:1)
#loc34 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":67:5)
#loc35 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":67:12)
#loc36 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":69:12)
#loc37 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":69:5)
#loc38 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":70:5)
#loc39 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":156:5)
#loc40 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":70:8)
#loc41 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":70:33)
#loc42 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":71:5)
#loc43 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":151:5)
#loc44 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":153:5)
#loc45 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":72:9)
#loc46 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":150:9)
#loc47 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":77:13)
#loc48 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":77:17)
#loc49 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":78:13)
#loc50 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":78:32)
#loc51 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":79:13)
#loc52 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":79:19)
#loc53 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":80:13)
#loc54 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":80:35)
#loc55 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":81:13)
#loc56 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":81:35)
#loc57 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":82:13)
#loc58 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":82:41)
#loc59 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":82:30)
#loc60 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":82:37)
#loc61 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":83:13)
#loc62 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":135:21)
#loc63 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":93:39)
#loc64 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":93:48)
#loc65 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":93:61)
#loc66 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":93:32)
#loc67 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":93:17)
#loc68 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":93:72)
#loc69 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":94:17)
#loc70 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":97:17)
#loc71 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":94:21)
#loc72 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":94:37)
#loc73 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":95:17)
#loc74 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":96:21)
#loc75 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":98:24)
#loc76 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":98:25)
#loc77 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":98:34)
#loc78 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":98:37)
#loc79 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":98:51)
#loc80 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":98:17)
#loc81 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":98:52)
#loc82 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":99:38)
#loc83 = loc("/usr/include/netinet/in.h":249:5)
#loc84 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":99:17)
#loc85 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":100:43)
#loc86 = loc("/usr/include/netinet/in.h":251:20)
#loc87 = loc("/usr/include/netinet/in.h":33:15)
#loc88 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":100:17)
#loc89 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":101:42)
#loc90 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":101:36)
#loc91 = loc("/usr/include/netinet/in.h":250:15)
#loc92 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":101:17)
#loc93 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":101:50)
#loc94 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":102:17)
#loc95 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":105:17)
#loc96 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":102:26)
#loc97 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":102:58)
#loc98 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":102:59)
#loc99 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":102:68)
#loc100 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":102:82)
#loc101 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":102:21)
#loc102 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":102:88)
#loc103 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":103:17)
#loc104 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":104:21)
#loc105 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":106:17)
#loc106 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":109:17)
#loc107 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":106:28)
#loc108 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":106:42)
#loc109 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":106:21)
#loc110 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":106:61)
#loc111 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":107:17)
#loc112 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":108:21)
#loc113 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":110:39)
#loc114 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":110:53)
#loc115 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":110:59)
#loc116 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":110:32)
#loc117 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":110:17)
#loc118 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":110:63)
#loc119 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":111:17)
#loc120 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":114:17)
#loc121 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":111:21)
#loc122 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":111:37)
#loc123 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":112:17)
#loc124 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":113:21)
#loc125 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":116:35)
#loc126 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":116:58)
#loc127 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":116:65)
#loc128 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":116:63)
#loc129 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":116:49)
#loc130 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":116:72)
#loc131 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":116:75)
#loc132 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":116:86)
#loc133 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":116:91)
#loc134 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":116:97)
#loc135 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":116:107)
#loc136 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":116:108)
#loc137 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":116:111)
#loc138 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":116:30)
#loc139 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":116:17)
#loc140 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":116:112)
#loc141 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":117:17)
#loc142 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":120:17)
#loc143 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":117:21)
#loc144 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":117:35)
#loc145 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":117:48)
#loc146 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":117:51)
#loc147 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":117:65)
#loc148 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":118:17)
#loc149 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":119:21)
#loc150 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":122:61)
#loc151 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":122:17)
#loc152 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":122:22)
#loc153 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":122:32)
#loc154 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":122:45)
#loc155 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":122:56)
#loc156 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":122:57)
#loc157 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":124:27)
#loc158 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":124:34)
#loc159 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":124:40)
#loc160 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":124:17)
#loc161 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":124:44)
#loc162 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":125:17)
#loc163 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":128:17)
#loc164 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":125:21)
#loc165 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":126:17)
#loc166 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":127:32)
#loc167 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":127:22)
#loc168 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":127:21)
#loc169 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":129:27)
#loc170 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":129:34)
#loc171 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":129:40)
#loc172 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":129:17)
#loc173 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":129:44)
#loc174 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":130:17)
#loc175 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":133:17)
#loc176 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":130:21)
#loc177 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":131:17)
#loc178 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":132:32)
#loc179 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":132:22)
#loc180 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":132:21)
#loc181 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":135:20)
#loc182 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":136:13)
#loc183 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":139:13)
#loc184 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":136:17)
#loc185 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":136:33)
#loc186 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":137:13)
#loc187 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":138:30)
#loc188 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":138:17)
#loc189 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":140:13)
#loc190 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":143:13)
#loc191 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":140:17)
#loc192 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":140:33)
#loc193 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":141:13)
#loc194 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":142:30)
#loc195 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":142:17)
#loc196 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":155:9)
#loc197 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":155:16)
#loc198 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":160:25)
#loc199 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":160:52)
#loc200 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":160:66)
#loc201 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":160:5)
#loc202 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":190:1)
#loc203 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":193:1)
#loc204 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":192:5)
#loc205 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":192:13)
#loc206 = loc("/usr/include/stdlib.h":575:1)
#loc207 = loc("/usr/include/stdlib.h":575:41)
#loc208 = loc("/usr/include/time.h":76:1)
#loc209 = loc("/usr/include/time.h":76:38)
#loc210 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc211 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc212 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":210:15)
#loc213 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":212:15)
#loc214 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":215:15)
#loc215 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":217:15)
#loc216 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":205:1)
#loc217 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":220:1)
#loc222 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":206:1)
#loc223 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":208:27)
#loc224 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":208:22)
#loc225 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":208:5)
#loc226 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":210:5)
#loc227 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":211:5)
#loc228 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":211:67)
#loc229 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":212:5)
#loc230 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":215:5)
#loc231 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":216:5)
#loc232 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":216:66)
#loc233 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":217:5)
#loc234 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":219:12)
#loc235 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":219:5)
#loc236 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":169:1)
#loc237 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":188:1)
#loc238 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":171:5)
#loc239 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":171:12)
#loc240 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":173:12)
#loc241 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":173:5)
#loc242 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":174:5)
#loc243 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":183:5)
#loc244 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":174:8)
#loc245 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":174:33)
#loc246 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":175:5)
#loc247 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":178:5)
#loc248 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":180:5)
#loc249 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":177:9)
#loc250 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":177:16)
#loc251 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":177:22)
#loc252 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":182:9)
#loc253 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":182:16)
#loc254 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":182:22)
#loc255 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":187:12)
#loc256 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":187:25)
#loc257 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":187:38)
#loc258 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":187:52)
#loc259 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":187:66)
#loc260 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_12.c":187:5)
#loc261 = loc(fused[#loc1, #loc2])
#loc262 = loc(fused[#loc3, #loc4])
#loc263 = loc(fused[#loc5, #loc6])
#loc264 = loc(fused[#loc7, #loc8])
#loc265 = loc(fused[#loc9, #loc10])
#loc266 = loc(fused[#loc11, #loc12])
#loc267 = loc(fused[#loc13, #loc14])
#loc268 = loc(fused[#loc15, #loc16])
#loc269 = loc(fused[#loc17, #loc18])
#loc270 = loc(fused[#loc19, #loc20])
#loc271 = loc(fused[#loc21, #loc22])
#loc272 = loc(fused[#loc23, #loc24])
#loc273 = loc(fused[#loc25, #loc26])
#loc274 = loc(fused[#loc28, #loc29])
#loc275 = loc(fused[#loc32, #loc33])
#loc276 = loc(fused[#loc34, #loc35])
#loc277 = loc(fused[#loc37, #loc36])
#loc278 = loc(fused[#loc38, #loc39])
#loc279 = loc(fused[#loc40, #loc41])
#loc280 = loc(fused[#loc42, #loc43, #loc44, #loc39])
#loc281 = loc(fused[#loc45, #loc46])
#loc282 = loc(fused[#loc47, #loc48])
#loc283 = loc(fused[#loc49, #loc50])
#loc284 = loc(fused[#loc51, #loc52])
#loc285 = loc(fused[#loc53, #loc54])
#loc286 = loc(fused[#loc55, #loc56])
#loc287 = loc(fused[#loc57, #loc58])
#loc288 = loc(fused[#loc61, #loc62])
#loc289 = loc(fused[#loc67, #loc68])
#loc290 = loc(fused[#loc69, #loc70])
#loc291 = loc(fused[#loc71, #loc72])
#loc292 = loc(fused[#loc73, #loc70])
#loc293 = loc(fused[#loc75, #loc76])
#loc294 = loc(fused[#loc78, #loc79])
#loc295 = loc(fused[#loc80, #loc81])
#loc296 = loc(fused[#loc84, #loc82])
#loc297 = loc(fused[#loc88, #loc85])
#loc298 = loc(fused[#loc92, #loc93])
#loc299 = loc(fused[#loc94, #loc95])
#loc300 = loc(fused[#loc97, #loc98])
#loc301 = loc(fused[#loc99, #loc100])
#loc302 = loc(fused[#loc101, #loc102])
#loc303 = loc(fused[#loc103, #loc95])
#loc304 = loc(fused[#loc105, #loc106])
#loc305 = loc(fused[#loc109, #loc110])
#loc306 = loc(fused[#loc111, #loc106])
#loc307 = loc(fused[#loc117, #loc118])
#loc308 = loc(fused[#loc119, #loc120])
#loc309 = loc(fused[#loc121, #loc122])
#loc310 = loc(fused[#loc123, #loc120])
#loc311 = loc(fused[#loc129, #loc130])
#loc312 = loc(fused[#loc131, #loc132])
#loc313 = loc(fused[#loc133, #loc134])
#loc314 = loc(fused[#loc133, #loc135])
#loc315 = loc(fused[#loc131, #loc136])
#loc316 = loc(fused[#loc139, #loc140])
#loc317 = loc(fused[#loc141, #loc142])
#loc318 = loc(fused[#loc143, #loc144])
#loc319 = loc(fused[#loc146, #loc147])
#loc320 = loc(fused[#loc148, #loc142])
#loc321 = loc(fused[#loc154, #loc155])
#loc322 = loc(fused[#loc153, #loc155])
#loc323 = loc(fused[#loc152, #loc155])
#loc324 = loc(fused[#loc151, #loc150])
#loc325 = loc(fused[#loc160, #loc161])
#loc326 = loc(fused[#loc162, #loc163])
#loc327 = loc(fused[#loc165, #loc163])
#loc328 = loc(fused[#loc168, #loc166])
#loc329 = loc(fused[#loc172, #loc173])
#loc330 = loc(fused[#loc174, #loc175])
#loc331 = loc(fused[#loc177, #loc175])
#loc332 = loc(fused[#loc180, #loc178])
#loc333 = loc(fused[#loc182, #loc183])
#loc334 = loc(fused[#loc184, #loc185])
#loc335 = loc(fused[#loc186, #loc183])
#loc336 = loc(fused[#loc189, #loc190])
#loc337 = loc(fused[#loc191, #loc192])
#loc338 = loc(fused[#loc193, #loc190])
#loc339 = loc(fused[#loc202, #loc203])
#loc340 = loc(fused[#loc204, #loc205])
#loc341 = loc(fused[#loc206, #loc207])
#loc342 = loc(fused[#loc208, #loc209])
#loc343 = loc(fused[#loc210, #loc211])
#loc344 = loc(fused[#loc216, #loc217])
#loc347 = loc(fused[#loc227, #loc228])
#loc348 = loc(fused[#loc231, #loc232])
#loc349 = loc(fused[#loc235, #loc234])
#loc350 = loc(fused[#loc236, #loc237])
#loc351 = loc(fused[#loc238, #loc239])
#loc352 = loc(fused[#loc241, #loc240])
#loc353 = loc(fused[#loc242, #loc243])
#loc354 = loc(fused[#loc244, #loc245])
#loc355 = loc(fused[#loc246, #loc247, #loc248, #loc243])
