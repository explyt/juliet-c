!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc46 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":76:10)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":76:14)
#loc48 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":76:20)
#loc49 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":76:32)
#loc111 = loc(fused[#loc46, #loc47])
#loc112 = loc(fused[#loc48, #loc49])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_case_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc93)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc94)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_case_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc96)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc97)
    cir.br ^bb1 loc(#loc98)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<0> : !s32i loc(#loc14)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    cir.br ^bb2 loc(#loc98)
  ^bb2:  // 2 preds: ^bb1, ^bb14
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc100)
    cir.brcond %5 ^bb3, ^bb15 loc(#loc18)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc101)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc102)
  ^bb5:  // pred: ^bb4
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
    %7 = cir.const #cir.int<3> : !s32i loc(#loc23)
    %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc103)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    cir.br ^bb6 loc(#loc104)
  ^bb6:  // pred: ^bb5
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    cir.br ^bb7 loc(#loc24)
  ^bb7:  // pred: ^bb6
    cir.switch.flat %9 : !s32i, ^bb10 [
      0: ^bb9
    ] loc(#loc24)
  ^bb8:  // no predecessors
    cir.br ^bb9 loc(#loc27)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc28)
  ^bb10:  // 2 preds: ^bb7, ^bb9
    cir.br ^bb11 loc(#loc25)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc21)
  ^bb12:  // pred: ^bb11
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc5)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc29)
    cir.br ^bb13 loc(#loc13)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc13)
  ^bb14:  // pred: ^bb13
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc30)
    %13 = cir.unary(inc, %12) : !s32i, !s32i loc(#loc31)
    cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc105)
    cir.br ^bb2 loc(#loc98)
  ^bb15:  // pred: ^bb2
    cir.br ^bb16 loc(#loc13)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc7)
  } loc(#loc95)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_case_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc107)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc33)
  } loc(#loc106)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc108)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc109)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc43)
  cir.func @main(%arg0: !s32i loc(fused[#loc46, #loc47]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc48, #loc49])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc111)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc112)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc45)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc50)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc50)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc51)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc52)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc52)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc53)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc40)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %8 = cir.get_global @CWE398_Poor_Code_Quality__empty_case_17_good : !cir.ptr<!cir.func<!void ()>> loc(#loc113)
    cir.call @CWE398_Poor_Code_Quality__empty_case_17_good() : () -> () loc(#loc55)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc41)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc42)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %13 = cir.get_global @CWE398_Poor_Code_Quality__empty_case_17_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc114)
    cir.call @CWE398_Poor_Code_Quality__empty_case_17_bad() : () -> () loc(#loc59)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc43)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc62)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc115)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc115)
    cir.return %17 : !s32i loc(#loc115)
  } loc(#loc110)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Inside the case statement\00" : !cir.array<!s8i x 26>> : !cir.array<!s8i x 26> {alignment = 1 : i64} loc(#loc64)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc65)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc117)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc118)
    cir.br ^bb1 loc(#loc119)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<0> : !s32i loc(#loc74)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc120)
    cir.br ^bb2 loc(#loc119)
  ^bb2:  // 2 preds: ^bb1, ^bb14
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc76)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc77)
    %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc121)
    cir.brcond %5 ^bb3, ^bb15 loc(#loc78)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc122)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc123)
  ^bb5:  // pred: ^bb4
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %7 = cir.const #cir.int<3> : !s32i loc(#loc83)
    %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc124)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    cir.br ^bb6 loc(#loc125)
  ^bb6:  // pred: ^bb5
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    cir.br ^bb7 loc(#loc84)
  ^bb7:  // pred: ^bb6
    cir.switch.flat %9 : !s32i, ^bb10 [
      0: ^bb9
    ] loc(#loc84)
  ^bb8:  // no predecessors
    cir.br ^bb9 loc(#loc87)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    %10 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc64)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    cir.br ^bb10 loc(#loc89)
  ^bb10:  // 2 preds: ^bb7, ^bb9
    cir.br ^bb11 loc(#loc85)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc81)
  ^bb12:  // pred: ^bb11
    %12 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc65)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    cir.br ^bb13 loc(#loc73)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc73)
  ^bb14:  // pred: ^bb13
    %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc91)
    %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc92)
    cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    cir.br ^bb2 loc(#loc119)
  ^bb15:  // pred: ^bb2
    cir.br ^bb16 loc(#loc73)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc67)
  } loc(#loc116)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_case_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":34:19)
#loc6 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":20:1)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":36:1)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":27:13)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":27:32)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":22:5)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":22:9)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":23:5)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":35:5)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":23:13)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":23:9)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":23:16)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":23:20)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":23:18)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":24:5)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":26:9)
#loc21 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":33:9)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":27:22)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":27:31)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":28:13)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":32:13)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":28:21)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":30:13)
#loc28 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":31:17)
#loc29 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":34:9)
#loc30 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":23:24)
#loc31 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":23:23)
#loc32 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":62:1)
#loc33 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":65:1)
#loc34 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":64:5)
#loc35 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":64:11)
#loc36 = loc("/usr/include/stdlib.h":575:1)
#loc37 = loc("/usr/include/stdlib.h":575:41)
#loc38 = loc("/usr/include/time.h":76:1)
#loc39 = loc("/usr/include/time.h":76:38)
#loc40 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":81:15)
#loc41 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":83:15)
#loc42 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":86:15)
#loc43 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":88:15)
#loc44 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":76:1)
#loc45 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":91:1)
#loc50 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":77:1)
#loc51 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":79:27)
#loc52 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":79:22)
#loc53 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":79:5)
#loc54 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":81:5)
#loc55 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":82:5)
#loc56 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":82:50)
#loc57 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":83:5)
#loc58 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":86:5)
#loc59 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":87:5)
#loc60 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":87:49)
#loc61 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":88:5)
#loc62 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":90:12)
#loc63 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":90:5)
#loc64 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":54:27)
#loc65 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":58:19)
#loc66 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":43:1)
#loc67 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":60:1)
#loc68 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":50:13)
#loc69 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":50:32)
#loc70 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":45:5)
#loc71 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":45:9)
#loc72 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":46:5)
#loc73 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":59:5)
#loc74 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":46:13)
#loc75 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":46:9)
#loc76 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":46:16)
#loc77 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":46:20)
#loc78 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":46:18)
#loc79 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":47:5)
#loc80 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":49:9)
#loc81 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":57:9)
#loc82 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":50:22)
#loc83 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":50:31)
#loc84 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":51:13)
#loc85 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":56:13)
#loc86 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":51:21)
#loc87 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":53:13)
#loc88 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":54:17)
#loc89 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":55:17)
#loc90 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":58:9)
#loc91 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":46:24)
#loc92 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":46:23)
#loc93 = loc(fused[#loc1, #loc2])
#loc94 = loc(fused[#loc3, #loc4])
#loc95 = loc(fused[#loc6, #loc7])
#loc96 = loc(fused[#loc8, #loc9])
#loc97 = loc(fused[#loc10, #loc11])
#loc98 = loc(fused[#loc12, #loc13])
#loc99 = loc(fused[#loc15, #loc14])
#loc100 = loc(fused[#loc16, #loc17])
#loc101 = loc(fused[#loc19, #loc13])
#loc102 = loc(fused[#loc20, #loc21])
#loc103 = loc(fused[#loc22, #loc23])
#loc104 = loc(fused[#loc24, #loc25])
#loc105 = loc(fused[#loc31, #loc30])
#loc106 = loc(fused[#loc32, #loc33])
#loc107 = loc(fused[#loc34, #loc35])
#loc108 = loc(fused[#loc36, #loc37])
#loc109 = loc(fused[#loc38, #loc39])
#loc110 = loc(fused[#loc44, #loc45])
#loc113 = loc(fused[#loc55, #loc56])
#loc114 = loc(fused[#loc59, #loc60])
#loc115 = loc(fused[#loc63, #loc62])
#loc116 = loc(fused[#loc66, #loc67])
#loc117 = loc(fused[#loc68, #loc69])
#loc118 = loc(fused[#loc70, #loc71])
#loc119 = loc(fused[#loc72, #loc73])
#loc120 = loc(fused[#loc75, #loc74])
#loc121 = loc(fused[#loc76, #loc77])
#loc122 = loc(fused[#loc79, #loc73])
#loc123 = loc(fused[#loc80, #loc81])
#loc124 = loc(fused[#loc82, #loc83])
#loc125 = loc(fused[#loc84, #loc85])
#loc126 = loc(fused[#loc92, #loc91])
