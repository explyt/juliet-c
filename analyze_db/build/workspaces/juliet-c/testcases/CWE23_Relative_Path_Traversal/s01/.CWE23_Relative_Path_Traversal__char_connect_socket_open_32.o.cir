!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE23_Relative_Path_Traversal/s01/CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const._ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_32L7goodG2BEv.dataBuffer = #cir.const_array<"/tmp/" : !cir.array<!s8i x 5>, trailing_zeros> : !cir.array<!s8i x 4096> loc(#loc243)
  cir.global "private" constant cir_private @__const._ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_323badEv.dataBuffer = #cir.const_array<"/tmp/" : !cir.array<!s8i x 5>, trailing_zeros> : !cir.array<!s8i x 4096> loc(#loc244)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc245)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc246)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc247)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc11)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc248)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc249)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc250)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc251)
  cir.func private @close(!s32i) -> !s32i loc(#loc252)
  cir.func private @open(!cir.ptr<!s8i>, !s32i, ...) -> !s32i loc(#loc253)
  cir.func @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_323badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc255)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc256)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc257)
    %3 = cir.alloca !cir.array<!s8i x 4096>, !cir.ptr<!cir.array<!s8i x 4096>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc244)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc256)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc257)
    %4 = cir.get_global @__const._ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_323badEv.dataBuffer : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc244)
    cir.copy %4 to %3 : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc244)
    %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 4096>>), !cir.ptr<!s8i> loc(#loc32)
    cir.store %5, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc258)
    cir.scope {
      %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc260)
      %7 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc37)
      %8 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
      cir.store %8, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc260)
      cir.scope {
        %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc262)
        %12 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc263)
        %13 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc264)
        %14 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc265)
        %15 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc266)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc48)
        %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc48)
        cir.store %17, %14 : !s32i, !cir.ptr<!s32i> loc(#loc265)
        %18 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc51)
        %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
        %20 = cir.call @strlen(%19) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc51)
        cir.store %20, %15 : !u64i, !cir.ptr<!u64i> loc(#loc266)
        cir.scope {
          cir.do {
            cir.scope {
              %21 = cir.const #cir.int<2> : !s32i loc(#loc57)
              %22 = cir.const #cir.int<1> : !u32i loc(#loc58)
              %23 = cir.cast(integral, %22 : !u32i), !s32i loc(#loc58)
              %24 = cir.const #cir.int<6> : !u32i loc(#loc59)
              %25 = cir.cast(integral, %24 : !u32i), !s32i loc(#loc59)
              %26 = cir.call @socket(%21, %23, %25) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc60)
              cir.store %26, %14 : !s32i, !cir.ptr<!s32i> loc(#loc269)
              cir.scope {
                %76 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc65)
                %77 = cir.const #cir.int<1> : !s32i loc(#loc66)
                %78 = cir.unary(minus, %77) nsw : !s32i, !s32i loc(#loc66)
                %79 = cir.cmp(eq, %76, %78) : !s32i, !cir.bool loc(#loc271)
                cir.if %79 {
                  cir.break loc(#loc68)
                } loc(#loc272)
              } loc(#loc270)
              %27 = cir.cast(bitcast, %12 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc273)
              %28 = cir.const #cir.int<0> : !s32i loc(#loc71)
              %29 = cir.const #cir.int<16> : !u64i loc(#loc274)
              cir.libc.memset %29 bytes from %27 set to %28 : !cir.ptr<!void>, !s32i, !u64i loc(#loc275)
              %30 = cir.const #cir.int<2> : !s32i loc(#loc76)
              %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc76)
              %32 = cir.get_member %12[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
              cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc276)
              %33 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc11)
              %34 = cir.cast(array_to_ptrdecay, %33 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc11)
              %35 = cir.call @inet_addr(%34) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc79)
              %36 = cir.get_member %12[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc80)
              %37 = cir.get_member %36[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc81)
              cir.store %35, %37 : !u32i, !cir.ptr<!u32i> loc(#loc277)
              %38 = cir.const #cir.int<27015> : !s32i loc(#loc84)
              %39 = cir.cast(integral, %38 : !s32i), !u16i loc(#loc84)
              %40 = cir.call @htons(%39) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc85)
              %41 = cir.get_member %12[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc86)
              cir.store %40, %41 : !u16i, !cir.ptr<!u16i> loc(#loc278)
              cir.scope {
                %76 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc91)
                %77 = cir.cast(bitcast, %12 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc280)
                %78 = cir.const #cir.int<16> : !u64i loc(#loc281)
                %79 = cir.cast(integral, %78 : !u64i), !u32i loc(#loc281)
                %80 = cir.call @connect(%76, %77, %79) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc96)
                %81 = cir.const #cir.int<1> : !s32i loc(#loc97)
                %82 = cir.unary(minus, %81) nsw : !s32i, !s32i loc(#loc97)
                %83 = cir.cmp(eq, %80, %82) : !s32i, !cir.bool loc(#loc282)
                cir.if %83 {
                  cir.break loc(#loc99)
                } loc(#loc283)
              } loc(#loc279)
              %42 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc100)
              %43 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc101)
              %44 = cir.load %15 : !cir.ptr<!u64i>, !u64i loc(#loc102)
              %45 = cir.ptr_stride(%43 : !cir.ptr<!s8i>, %44 : !u64i), !cir.ptr<!s8i> loc(#loc103)
              %46 = cir.cast(bitcast, %45 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc284)
              %47 = cir.const #cir.int<1> : !u64i loc(#loc285)
              %48 = cir.const #cir.int<4096> : !s32i loc(#loc108)
              %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc108)
              %50 = cir.load %15 : !cir.ptr<!u64i>, !u64i loc(#loc109)
              %51 = cir.binop(sub, %49, %50) : !u64i loc(#loc286)
              %52 = cir.const #cir.int<1> : !s32i loc(#loc110)
              %53 = cir.cast(integral, %52 : !s32i), !u64i loc(#loc110)
              %54 = cir.binop(sub, %51, %53) : !u64i loc(#loc287)
              %55 = cir.binop(mul, %47, %54) : !u64i loc(#loc288)
              %56 = cir.const #cir.int<0> : !s32i loc(#loc112)
              %57 = cir.call @recv(%42, %46, %55, %56) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc113)
              %58 = cir.cast(integral, %57 : !s64i), !s32i loc(#loc113)
              cir.store %58, %11 : !s32i, !cir.ptr<!s32i> loc(#loc289)
              cir.scope {
                %76 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc118)
                %77 = cir.const #cir.int<1> : !s32i loc(#loc119)
                %78 = cir.unary(minus, %77) nsw : !s32i, !s32i loc(#loc119)
                %79 = cir.cmp(eq, %76, %78) : !s32i, !cir.bool loc(#loc291)
                %80 = cir.ternary(%79, true {
                  %81 = cir.const #true loc(#loc120)
                  cir.yield %81 : !cir.bool loc(#loc120)
                }, false {
                  %81 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc121)
                  %82 = cir.const #cir.int<0> : !s32i loc(#loc122)
                  %83 = cir.cmp(eq, %81, %82) : !s32i, !cir.bool loc(#loc292)
                  %84 = cir.ternary(%83, true {
                    %85 = cir.const #true loc(#loc120)
                    cir.yield %85 : !cir.bool loc(#loc120)
                  }, false {
                    %85 = cir.const #false loc(#loc120)
                    cir.yield %85 : !cir.bool loc(#loc120)
                  }) : (!cir.bool) -> !cir.bool loc(#loc120)
                  cir.yield %84 : !cir.bool loc(#loc120)
                }) : (!cir.bool) -> !cir.bool loc(#loc120)
                cir.if %80 {
                  cir.break loc(#loc124)
                } loc(#loc293)
              } loc(#loc290)
              %59 = cir.const #cir.int<0> : !s8i loc(#loc125)
              %60 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc126)
              %61 = cir.load %15 : !cir.ptr<!u64i>, !u64i loc(#loc127)
              %62 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc128)
              %63 = cir.cast(integral, %62 : !s32i), !u64i loc(#loc128)
              %64 = cir.const #cir.int<1> : !u64i loc(#loc294)
              %65 = cir.binop(div, %63, %64) : !u64i loc(#loc295)
              %66 = cir.binop(add, %61, %65) : !u64i loc(#loc296)
              %67 = cir.ptr_stride(%60 : !cir.ptr<!s8i>, %66 : !u64i), !cir.ptr<!s8i> loc(#loc131)
              cir.store %59, %67 : !s8i, !cir.ptr<!s8i> loc(#loc297)
              %68 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc132)
              %69 = cir.const #cir.int<13> : !s8i loc(#loc133)
              %70 = cir.cast(integral, %69 : !s8i), !s32i loc(#loc133)
              %71 = cir.call @strchr(%68, %70) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc134)
              cir.store %71, %13 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc298)
              cir.scope {
                %76 = cir.load %13 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc139)
                %77 = cir.cast(ptr_to_bool, %76 : !cir.ptr<!s8i>), !cir.bool loc(#loc139)
                cir.if %77 {
                  %78 = cir.const #cir.int<0> : !s8i loc(#loc141)
                  %79 = cir.load deref %13 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc142)
                  cir.store %78, %79 : !s8i, !cir.ptr<!s8i> loc(#loc301)
                } loc(#loc300)
              } loc(#loc299)
              %72 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc144)
              %73 = cir.const #cir.int<10> : !s8i loc(#loc145)
              %74 = cir.cast(integral, %73 : !s8i), !s32i loc(#loc145)
              %75 = cir.call @strchr(%72, %74) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc146)
              cir.store %75, %13 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc302)
              cir.scope {
                %76 = cir.load %13 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc151)
                %77 = cir.cast(ptr_to_bool, %76 : !cir.ptr<!s8i>), !cir.bool loc(#loc151)
                cir.if %77 {
                  %78 = cir.const #cir.int<0> : !s8i loc(#loc153)
                  %79 = cir.load deref %13 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc154)
                  cir.store %78, %79 : !s8i, !cir.ptr<!s8i> loc(#loc305)
                } loc(#loc304)
              } loc(#loc303)
            } loc(#loc268)
            cir.yield loc(#loc54)
          } while {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc156)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc156)
            cir.condition(%22) loc(#loc156)
          } loc(#loc267)
        } loc(#loc267)
        cir.scope {
          %21 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc159)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc160)
          %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc160)
          %24 = cir.cmp(ne, %21, %23) : !s32i, !cir.bool loc(#loc307)
          cir.if %24 {
            %25 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc162)
            %26 = cir.call @close(%25) : (!s32i) -> !s32i loc(#loc163)
          } loc(#loc308)
        } loc(#loc306)
      } loc(#loc261)
      %9 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc164)
      %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc165)
      cir.store %9, %10 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc309)
    } loc(#loc259)
    cir.scope {
      %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc311)
      %7 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc170)
      %8 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc171)
      cir.store %8, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc311)
      cir.scope {
        %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["fileDesc"] {alignment = 4 : i64} loc(#loc313)
        %10 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc176)
        %11 = cir.const #cir.int<2> : !s32i loc(#loc177)
        %12 = cir.const #cir.int<64> : !s32i loc(#loc178)
        %13 = cir.binop(or, %11, %12) : !s32i loc(#loc314)
        %14 = cir.const #cir.int<256> : !s32i loc(#loc179)
        %15 = cir.const #cir.int<128> : !s32i loc(#loc180)
        %16 = cir.binop(or, %14, %15) : !s32i loc(#loc315)
        %17 = cir.call @open(%10, %13, %16) : (!cir.ptr<!s8i>, !s32i, !s32i) -> !s32i loc(#loc181)
        cir.store %17, %9 : !s32i, !cir.ptr<!s32i> loc(#loc316)
        cir.scope {
          %18 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc186)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc187)
          %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc188)
          %21 = cir.cmp(ne, %18, %20) : !s32i, !cir.bool loc(#loc318)
          cir.if %21 {
            %22 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc190)
            %23 = cir.call @close(%22) : (!s32i) -> !s32i loc(#loc191)
          } loc(#loc319)
        } loc(#loc317)
      } loc(#loc312)
    } loc(#loc310)
    cir.return loc(#loc25)
  } loc(#loc254)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc320)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"file.txt\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc194)
  cir.func internal private @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_32L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc322)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc323)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc324)
    %3 = cir.alloca !cir.array<!s8i x 4096>, !cir.ptr<!cir.array<!s8i x 4096>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc243)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc323)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc324)
    %4 = cir.get_global @__const._ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_32L7goodG2BEv.dataBuffer : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc243)
    cir.copy %4 to %3 : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc243)
    %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 4096>>), !cir.ptr<!s8i> loc(#loc203)
    cir.store %5, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc325)
    cir.scope {
      %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc327)
      %7 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc208)
      %8 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc209)
      cir.store %8, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc327)
      %9 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc210)
      %10 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc211)
      %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc194)
      %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc194)
      %13 = cir.call @strcat(%10, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc210)
      %14 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc212)
      %15 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc213)
      cir.store %14, %15 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc328)
    } loc(#loc326)
    cir.scope {
      %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc330)
      %7 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc218)
      %8 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc219)
      cir.store %8, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc330)
      cir.scope {
        %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["fileDesc"] {alignment = 4 : i64} loc(#loc332)
        %10 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc224)
        %11 = cir.const #cir.int<2> : !s32i loc(#loc225)
        %12 = cir.const #cir.int<64> : !s32i loc(#loc226)
        %13 = cir.binop(or, %11, %12) : !s32i loc(#loc333)
        %14 = cir.const #cir.int<256> : !s32i loc(#loc227)
        %15 = cir.const #cir.int<128> : !s32i loc(#loc228)
        %16 = cir.binop(or, %14, %15) : !s32i loc(#loc334)
        %17 = cir.call @open(%10, %13, %16) : (!cir.ptr<!s8i>, !s32i, !s32i) -> !s32i loc(#loc229)
        cir.store %17, %9 : !s32i, !cir.ptr<!s32i> loc(#loc335)
        cir.scope {
          %18 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc234)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc235)
          %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc236)
          %21 = cir.cmp(ne, %18, %20) : !s32i, !cir.bool loc(#loc337)
          cir.if %21 {
            %22 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc238)
            %23 = cir.call @close(%22) : (!s32i) -> !s32i loc(#loc239)
          } loc(#loc338)
        } loc(#loc336)
      } loc(#loc331)
    } loc(#loc329)
    cir.return loc(#loc196)
  } loc(#loc321)
  cir.func @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_324goodEv() extra(#fn_attr1) {
    cir.call @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_32L7goodG2BEv() : () -> () loc(#loc242)
    cir.return loc(#loc241)
  } loc(#loc339)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE23_Relative_Path_Traversal/s01/CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":0:0)
#loc1 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":162:5)
#loc2 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":162:37)
#loc3 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":65:5)
#loc4 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":65:37)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc9 = loc("/usr/include/arpa/inet.h":34:1)
#loc10 = loc("/usr/include/arpa/inet.h":34:47)
#loc11 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":96:53)
#loc12 = loc("/usr/include/netinet/in.h":402:1)
#loc13 = loc("/usr/include/netinet/in.h":403:40)
#loc14 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc15 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc16 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc17 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc18 = loc("/usr/include/string.h":226:1)
#loc19 = loc("/usr/include/string.h":227:50)
#loc20 = loc("/usr/include/unistd.h":358:1)
#loc21 = loc("/usr/include/unistd.h":358:27)
#loc22 = loc("/usr/include/fcntl.h":209:1)
#loc23 = loc("/usr/include/fcntl.h":209:56)
#loc24 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":60:1)
#loc25 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":150:1)
#loc26 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":62:5)
#loc27 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":62:12)
#loc28 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":63:5)
#loc29 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":63:25)
#loc30 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":64:5)
#loc31 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":64:25)
#loc32 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":66:12)
#loc33 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":66:5)
#loc34 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":67:5)
#loc35 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":137:5)
#loc36 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":68:9)
#loc37 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":68:24)
#loc38 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":68:23)
#loc39 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":69:9)
#loc40 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":135:9)
#loc41 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":74:13)
#loc42 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":74:17)
#loc43 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":75:13)
#loc44 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":75:32)
#loc45 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":76:13)
#loc46 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":76:19)
#loc47 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":77:13)
#loc48 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":77:36)
#loc49 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":78:13)
#loc50 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":78:41)
#loc51 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":78:30)
#loc52 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":78:37)
#loc53 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":79:13)
#loc54 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":124:21)
#loc55 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":80:13)
#loc56 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":123:13)
#loc57 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":89:40)
#loc58 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":89:49)
#loc59 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":89:62)
#loc60 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":89:33)
#loc61 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":89:17)
#loc62 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":89:73)
#loc63 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":90:17)
#loc64 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":93:17)
#loc65 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":90:21)
#loc66 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":90:38)
#loc67 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":91:17)
#loc68 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":92:21)
#loc69 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":94:24)
#loc70 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":94:25)
#loc71 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":94:34)
#loc72 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":94:37)
#loc73 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":94:51)
#loc74 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":94:17)
#loc75 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":94:52)
#loc76 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":95:38)
#loc77 = loc("/usr/include/netinet/in.h":249:5)
#loc78 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":95:17)
#loc79 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":96:43)
#loc80 = loc("/usr/include/netinet/in.h":251:20)
#loc81 = loc("/usr/include/netinet/in.h":33:15)
#loc82 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":96:17)
#loc83 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":96:63)
#loc84 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":97:42)
#loc85 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":97:36)
#loc86 = loc("/usr/include/netinet/in.h":250:15)
#loc87 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":97:17)
#loc88 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":97:50)
#loc89 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":98:17)
#loc90 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":101:17)
#loc91 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":98:29)
#loc92 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":98:62)
#loc93 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":98:63)
#loc94 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":98:72)
#loc95 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":98:86)
#loc96 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":98:21)
#loc97 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":98:92)
#loc98 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":99:17)
#loc99 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":100:21)
#loc100 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":105:35)
#loc101 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":105:59)
#loc102 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":105:66)
#loc103 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":105:64)
#loc104 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":105:50)
#loc105 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":105:73)
#loc106 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":105:76)
#loc107 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":105:87)
#loc108 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":105:92)
#loc109 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":105:107)
#loc110 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":105:117)
#loc111 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":105:118)
#loc112 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":105:121)
#loc113 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":105:30)
#loc114 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":105:17)
#loc115 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":105:122)
#loc116 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":106:17)
#loc117 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":109:17)
#loc118 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":106:21)
#loc119 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":106:35)
#loc120 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":106:48)
#loc121 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":106:51)
#loc122 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":106:65)
#loc123 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":107:17)
#loc124 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":108:21)
#loc125 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":111:61)
#loc126 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":111:17)
#loc127 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":111:22)
#loc128 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":111:32)
#loc129 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":111:45)
#loc130 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":111:56)
#loc131 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":111:57)
#loc132 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":113:34)
#loc133 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":113:40)
#loc134 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":113:27)
#loc135 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":113:17)
#loc136 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":113:44)
#loc137 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":114:17)
#loc138 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":117:17)
#loc139 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":114:21)
#loc140 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":115:17)
#loc141 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":116:32)
#loc142 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":116:22)
#loc143 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":116:21)
#loc144 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":118:34)
#loc145 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":118:40)
#loc146 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":118:27)
#loc147 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":118:17)
#loc148 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":118:44)
#loc149 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":119:17)
#loc150 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":122:17)
#loc151 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":119:21)
#loc152 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":120:17)
#loc153 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":121:32)
#loc154 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":121:22)
#loc155 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":121:21)
#loc156 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":124:20)
#loc157 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":125:13)
#loc158 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":128:13)
#loc159 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":125:17)
#loc160 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":125:34)
#loc161 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":126:13)
#loc162 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":127:30)
#loc163 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":127:17)
#loc164 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":136:21)
#loc165 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":136:10)
#loc166 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":136:9)
#loc167 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":138:5)
#loc168 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":149:5)
#loc169 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":139:9)
#loc170 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":139:24)
#loc171 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":139:23)
#loc172 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":140:9)
#loc173 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":148:9)
#loc174 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":141:13)
#loc175 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":141:17)
#loc176 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":143:29)
#loc177 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":143:35)
#loc178 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":143:42)
#loc179 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":143:51)
#loc180 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":143:59)
#loc181 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":143:24)
#loc182 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":143:13)
#loc183 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":143:67)
#loc184 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":144:13)
#loc185 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":147:13)
#loc186 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":144:17)
#loc187 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":144:30)
#loc188 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":144:29)
#loc189 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":145:13)
#loc190 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":146:23)
#loc191 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":146:17)
#loc192 = loc("/usr/include/string.h":149:1)
#loc193 = loc("/usr/include/string.h":150:14)
#loc194 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":167:22)
#loc195 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":157:1)
#loc196 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":182:1)
#loc197 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":159:5)
#loc198 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":159:12)
#loc199 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":160:5)
#loc200 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":160:25)
#loc201 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":161:5)
#loc202 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":161:25)
#loc203 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":163:12)
#loc204 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":163:5)
#loc205 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":164:5)
#loc206 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":169:5)
#loc207 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":165:9)
#loc208 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":165:24)
#loc209 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":165:23)
#loc210 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":167:9)
#loc211 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":167:16)
#loc212 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":168:21)
#loc213 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":168:10)
#loc214 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":168:9)
#loc215 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":170:5)
#loc216 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":181:5)
#loc217 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":171:9)
#loc218 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":171:24)
#loc219 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":171:23)
#loc220 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":172:9)
#loc221 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":180:9)
#loc222 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":173:13)
#loc223 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":173:17)
#loc224 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":175:29)
#loc225 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":175:35)
#loc226 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":175:42)
#loc227 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":175:51)
#loc228 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":175:59)
#loc229 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":175:24)
#loc230 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":175:13)
#loc231 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":175:67)
#loc232 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":176:13)
#loc233 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":179:13)
#loc234 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":176:17)
#loc235 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":176:30)
#loc236 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":176:29)
#loc237 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":177:13)
#loc238 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":178:23)
#loc239 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":178:17)
#loc240 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":184:1)
#loc241 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":187:1)
#loc242 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_32.cpp":186:5)
#loc243 = loc(fused[#loc1, #loc2])
#loc244 = loc(fused[#loc3, #loc4])
#loc245 = loc(fused[#loc5, #loc6])
#loc246 = loc(fused[#loc7, #loc8])
#loc247 = loc(fused[#loc9, #loc10])
#loc248 = loc(fused[#loc12, #loc13])
#loc249 = loc(fused[#loc14, #loc15])
#loc250 = loc(fused[#loc16, #loc17])
#loc251 = loc(fused[#loc18, #loc19])
#loc252 = loc(fused[#loc20, #loc21])
#loc253 = loc(fused[#loc22, #loc23])
#loc254 = loc(fused[#loc24, #loc25])
#loc255 = loc(fused[#loc26, #loc27])
#loc256 = loc(fused[#loc28, #loc29])
#loc257 = loc(fused[#loc30, #loc31])
#loc258 = loc(fused[#loc33, #loc32])
#loc259 = loc(fused[#loc34, #loc35])
#loc260 = loc(fused[#loc36, #loc37])
#loc261 = loc(fused[#loc39, #loc40])
#loc262 = loc(fused[#loc41, #loc42])
#loc263 = loc(fused[#loc43, #loc44])
#loc264 = loc(fused[#loc45, #loc46])
#loc265 = loc(fused[#loc47, #loc48])
#loc266 = loc(fused[#loc49, #loc50])
#loc267 = loc(fused[#loc53, #loc54])
#loc268 = loc(fused[#loc55, #loc56])
#loc269 = loc(fused[#loc61, #loc62])
#loc270 = loc(fused[#loc63, #loc64])
#loc271 = loc(fused[#loc65, #loc66])
#loc272 = loc(fused[#loc67, #loc64])
#loc273 = loc(fused[#loc69, #loc70])
#loc274 = loc(fused[#loc72, #loc73])
#loc275 = loc(fused[#loc74, #loc75])
#loc276 = loc(fused[#loc78, #loc76])
#loc277 = loc(fused[#loc82, #loc83])
#loc278 = loc(fused[#loc87, #loc88])
#loc279 = loc(fused[#loc89, #loc90])
#loc280 = loc(fused[#loc92, #loc93])
#loc281 = loc(fused[#loc94, #loc95])
#loc282 = loc(fused[#loc96, #loc97])
#loc283 = loc(fused[#loc98, #loc90])
#loc284 = loc(fused[#loc104, #loc105])
#loc285 = loc(fused[#loc106, #loc107])
#loc286 = loc(fused[#loc108, #loc109])
#loc287 = loc(fused[#loc108, #loc110])
#loc288 = loc(fused[#loc106, #loc111])
#loc289 = loc(fused[#loc114, #loc115])
#loc290 = loc(fused[#loc116, #loc117])
#loc291 = loc(fused[#loc118, #loc119])
#loc292 = loc(fused[#loc121, #loc122])
#loc293 = loc(fused[#loc123, #loc117])
#loc294 = loc(fused[#loc129, #loc130])
#loc295 = loc(fused[#loc128, #loc130])
#loc296 = loc(fused[#loc127, #loc130])
#loc297 = loc(fused[#loc126, #loc125])
#loc298 = loc(fused[#loc135, #loc136])
#loc299 = loc(fused[#loc137, #loc138])
#loc300 = loc(fused[#loc140, #loc138])
#loc301 = loc(fused[#loc143, #loc141])
#loc302 = loc(fused[#loc147, #loc148])
#loc303 = loc(fused[#loc149, #loc150])
#loc304 = loc(fused[#loc152, #loc150])
#loc305 = loc(fused[#loc155, #loc153])
#loc306 = loc(fused[#loc157, #loc158])
#loc307 = loc(fused[#loc159, #loc160])
#loc308 = loc(fused[#loc161, #loc158])
#loc309 = loc(fused[#loc166, #loc164])
#loc310 = loc(fused[#loc167, #loc168])
#loc311 = loc(fused[#loc169, #loc170])
#loc312 = loc(fused[#loc172, #loc173])
#loc313 = loc(fused[#loc174, #loc175])
#loc314 = loc(fused[#loc177, #loc178])
#loc315 = loc(fused[#loc179, #loc180])
#loc316 = loc(fused[#loc182, #loc183])
#loc317 = loc(fused[#loc184, #loc185])
#loc318 = loc(fused[#loc186, #loc187])
#loc319 = loc(fused[#loc189, #loc185])
#loc320 = loc(fused[#loc192, #loc193])
#loc321 = loc(fused[#loc195, #loc196])
#loc322 = loc(fused[#loc197, #loc198])
#loc323 = loc(fused[#loc199, #loc200])
#loc324 = loc(fused[#loc201, #loc202])
#loc325 = loc(fused[#loc204, #loc203])
#loc326 = loc(fused[#loc205, #loc206])
#loc327 = loc(fused[#loc207, #loc208])
#loc328 = loc(fused[#loc214, #loc212])
#loc329 = loc(fused[#loc215, #loc216])
#loc330 = loc(fused[#loc217, #loc218])
#loc331 = loc(fused[#loc220, #loc221])
#loc332 = loc(fused[#loc222, #loc223])
#loc333 = loc(fused[#loc225, #loc226])
#loc334 = loc(fused[#loc227, #loc228])
#loc335 = loc(fused[#loc230, #loc231])
#loc336 = loc(fused[#loc232, #loc233])
#loc337 = loc(fused[#loc234, #loc235])
#loc338 = loc(fused[#loc237, #loc233])
#loc339 = loc(fused[#loc240, #loc241])
