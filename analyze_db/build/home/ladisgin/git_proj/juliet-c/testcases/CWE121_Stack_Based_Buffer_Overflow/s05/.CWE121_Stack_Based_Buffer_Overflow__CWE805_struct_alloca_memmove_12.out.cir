!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":107:10)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":107:14)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":107:20)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":107:32)
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
#loc180 = loc(fused[#loc77, #loc78])
#loc181 = loc(fused[#loc79, #loc80])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s05/CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc149)
  cir.func private @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc150)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc152)
    %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc153)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc10)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc10)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc10)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc10)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %7 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc154)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc10)
    cir.store %9, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc153)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc12)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc12)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc12)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc12)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc12)
    cir.store %16, %7 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc154)
    cir.scope {
      %17 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc156)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc156)
      %19 = cir.call %18() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc15)
      %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc15)
      cir.if %20 {
        %21 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc20)
        cir.store %21, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc158)
      } else {
        %21 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc22)
        cir.store %21, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc159)
      } loc(#loc157)
    } loc(#loc155)
    cir.scope {
      %17 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc161)
      cir.scope {
        %29 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc163)
        cir.scope {
          %30 = cir.const #cir.int<0> : !s32i loc(#loc34)
          %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc34)
          cir.store %31, %29 : !u64i, !cir.ptr<!u64i> loc(#loc165)
          cir.for : cond {
            %32 = cir.load %29 : !cir.ptr<!u64i>, !u64i loc(#loc36)
            %33 = cir.const #cir.int<100> : !s32i loc(#loc37)
            %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc37)
            %35 = cir.cmp(lt, %32, %34) : !u64i, !cir.bool loc(#loc166)
            cir.condition(%35) loc(#loc38)
          } body {
            cir.scope {
              %32 = cir.const #cir.int<0> : !s32i loc(#loc40)
              %33 = cir.load %29 : !cir.ptr<!u64i>, !u64i loc(#loc41)
              %34 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc42)
              %35 = cir.ptr_stride(%34 : !cir.ptr<!ty__twoIntsStruct>, %33 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc42)
              %36 = cir.get_member %35[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc43)
              cir.store %32, %36 : !s32i, !cir.ptr<!s32i> loc(#loc168)
              %37 = cir.const #cir.int<0> : !s32i loc(#loc44)
              %38 = cir.load %29 : !cir.ptr<!u64i>, !u64i loc(#loc45)
              %39 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc46)
              %40 = cir.ptr_stride(%39 : !cir.ptr<!ty__twoIntsStruct>, %38 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc46)
              %41 = cir.get_member %40[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc47)
              cir.store %37, %41 : !s32i, !cir.ptr<!s32i> loc(#loc169)
            } loc(#loc167)
            cir.yield loc(#loc33)
          } step {
            %32 = cir.load %29 : !cir.ptr<!u64i>, !u64i loc(#loc48)
            %33 = cir.unary(inc, %32) : !u64i, !u64i loc(#loc49)
            cir.store %33, %29 : !u64i, !cir.ptr<!u64i> loc(#loc170)
            cir.yield loc(#loc164)
          } loc(#loc164)
        } loc(#loc164)
      } loc(#loc162)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc50)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc50)
      %20 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc51)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc51)
      %22 = cir.const #cir.int<100> : !s32i loc(#loc52)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc52)
      %24 = cir.const #cir.int<8> : !u64i loc(#loc171)
      %25 = cir.binop(mul, %23, %24) : !u64i loc(#loc172)
      cir.libc.memmove %25 bytes from %21 to %19 : !cir.ptr<!void>, !u64i loc(#loc173)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc57)
      %27 = cir.const #cir.int<0> : !s32i loc(#loc58)
      %28 = cir.ptr_stride(%26 : !cir.ptr<!ty__twoIntsStruct>, %27 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc59)
      cir.call @printStructLine(%28) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc60)
    } loc(#loc160)
    cir.return loc(#loc6)
  } loc(#loc151)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc63)
    cir.return loc(#loc62)
  } loc(#loc174)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc176)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc177)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc178)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc72)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc74)
  cir.func @main(%arg0: !s32i loc(fused[#loc77, #loc78]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc79, #loc80])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc180)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc181)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc76)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc81)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc82)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc83)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc83)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc84)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc71)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc182)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12_good() : () -> () loc(#loc86)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc72)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc73)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc183)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12_bad() : () -> () loc(#loc90)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc74)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc93)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc184)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc184)
    cir.return %17 : !s32i loc(#loc184)
  } loc(#loc179)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc186)
    %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc187)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc100)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc100)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc100)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc100)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc100)
    %7 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc188)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc100)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc100)
    cir.store %9, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc187)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc102)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc102)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc102)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc102)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc102)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc102)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc102)
    cir.store %16, %7 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc188)
    cir.scope {
      %17 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc190)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc190)
      %19 = cir.call %18() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc105)
      %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc105)
      cir.if %20 {
        %21 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc110)
        cir.store %21, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc192)
      } else {
        %21 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc112)
        cir.store %21, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc193)
      } loc(#loc191)
    } loc(#loc189)
    cir.scope {
      %17 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc195)
      cir.scope {
        %29 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc197)
        cir.scope {
          %30 = cir.const #cir.int<0> : !s32i loc(#loc124)
          %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc124)
          cir.store %31, %29 : !u64i, !cir.ptr<!u64i> loc(#loc199)
          cir.for : cond {
            %32 = cir.load %29 : !cir.ptr<!u64i>, !u64i loc(#loc126)
            %33 = cir.const #cir.int<100> : !s32i loc(#loc127)
            %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc127)
            %35 = cir.cmp(lt, %32, %34) : !u64i, !cir.bool loc(#loc200)
            cir.condition(%35) loc(#loc128)
          } body {
            cir.scope {
              %32 = cir.const #cir.int<0> : !s32i loc(#loc130)
              %33 = cir.load %29 : !cir.ptr<!u64i>, !u64i loc(#loc131)
              %34 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc132)
              %35 = cir.ptr_stride(%34 : !cir.ptr<!ty__twoIntsStruct>, %33 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc132)
              %36 = cir.get_member %35[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc43)
              cir.store %32, %36 : !s32i, !cir.ptr<!s32i> loc(#loc202)
              %37 = cir.const #cir.int<0> : !s32i loc(#loc133)
              %38 = cir.load %29 : !cir.ptr<!u64i>, !u64i loc(#loc134)
              %39 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc135)
              %40 = cir.ptr_stride(%39 : !cir.ptr<!ty__twoIntsStruct>, %38 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc135)
              %41 = cir.get_member %40[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc47)
              cir.store %37, %41 : !s32i, !cir.ptr<!s32i> loc(#loc203)
            } loc(#loc201)
            cir.yield loc(#loc123)
          } step {
            %32 = cir.load %29 : !cir.ptr<!u64i>, !u64i loc(#loc136)
            %33 = cir.unary(inc, %32) : !u64i, !u64i loc(#loc137)
            cir.store %33, %29 : !u64i, !cir.ptr<!u64i> loc(#loc204)
            cir.yield loc(#loc198)
          } loc(#loc198)
        } loc(#loc198)
      } loc(#loc196)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc138)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc138)
      %20 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc139)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc139)
      %22 = cir.const #cir.int<100> : !s32i loc(#loc140)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc140)
      %24 = cir.const #cir.int<8> : !u64i loc(#loc205)
      %25 = cir.binop(mul, %23, %24) : !u64i loc(#loc206)
      cir.libc.memmove %25 bytes from %21 to %19 : !cir.ptr<!void>, !u64i loc(#loc207)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc145)
      %27 = cir.const #cir.int<0> : !s32i loc(#loc146)
      %28 = cir.ptr_stride(%26 : !cir.ptr<!ty__twoIntsStruct>, %27 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc147)
      cir.call @printStructLine(%28) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc148)
    } loc(#loc194)
    cir.return loc(#loc96)
  } loc(#loc185)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s05/CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":21:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":52:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":23:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":23:21)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":24:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":24:54)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":25:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":25:55)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":26:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":36:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":26:8)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":26:33)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":27:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":31:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":33:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":30:16)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":30:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":35:16)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":35:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":37:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":51:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":38:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":38:33)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":39:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":47:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":40:13)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":40:20)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":42:13)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":46:13)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":42:22)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":42:18)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":42:25)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":42:29)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":42:27)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":43:13)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":44:36)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":44:24)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":44:17)
#loc43 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":45:36)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":45:24)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":45:17)
#loc47 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":42:35)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":42:34)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":49:17)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":49:23)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":49:31)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":49:35)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":49:55)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":49:9)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":49:56)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":50:26)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":50:31)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":50:32)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":50:9)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":92:1)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":95:1)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":94:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":94:13)
#loc65 = loc("/usr/include/stdlib.h":575:1)
#loc66 = loc("/usr/include/stdlib.h":575:41)
#loc67 = loc("/usr/include/time.h":76:1)
#loc68 = loc("/usr/include/time.h":76:38)
#loc69 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc70 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":112:15)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":114:15)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":117:15)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":119:15)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":107:1)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":122:1)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":108:1)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":110:27)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":110:22)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":110:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":112:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":113:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":113:78)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":114:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":117:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":118:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":118:77)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":119:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":121:12)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":121:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":60:1)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":90:1)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":62:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":62:21)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":63:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":63:54)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":64:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":64:55)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":65:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":74:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":65:8)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":65:33)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":66:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":69:5)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":71:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":68:16)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":68:9)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":73:16)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":73:9)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":75:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":89:5)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":76:9)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":76:33)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":77:9)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":85:9)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":78:13)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":78:20)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":80:13)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":84:13)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":80:22)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":80:18)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":80:25)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":80:29)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":80:27)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":81:13)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":82:36)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":82:24)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":82:17)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":83:36)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":83:24)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":83:17)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":80:35)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":80:34)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":87:17)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":87:23)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":87:31)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":87:35)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":87:55)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":87:9)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":87:56)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":88:26)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":88:31)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":88:32)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c":88:9)
#loc149 = loc(fused[#loc1, #loc2])
#loc150 = loc(fused[#loc3, #loc4])
#loc151 = loc(fused[#loc5, #loc6])
#loc152 = loc(fused[#loc7, #loc8])
#loc153 = loc(fused[#loc9, #loc10])
#loc154 = loc(fused[#loc11, #loc12])
#loc155 = loc(fused[#loc13, #loc14])
#loc156 = loc(fused[#loc15, #loc16])
#loc157 = loc(fused[#loc17, #loc18, #loc19, #loc14])
#loc158 = loc(fused[#loc21, #loc20])
#loc159 = loc(fused[#loc23, #loc22])
#loc160 = loc(fused[#loc24, #loc25])
#loc161 = loc(fused[#loc26, #loc27])
#loc162 = loc(fused[#loc28, #loc29])
#loc163 = loc(fused[#loc30, #loc31])
#loc164 = loc(fused[#loc32, #loc33])
#loc165 = loc(fused[#loc35, #loc34])
#loc166 = loc(fused[#loc36, #loc37])
#loc167 = loc(fused[#loc39, #loc33])
#loc168 = loc(fused[#loc42, #loc40])
#loc169 = loc(fused[#loc46, #loc44])
#loc170 = loc(fused[#loc49, #loc48])
#loc171 = loc(fused[#loc53, #loc54])
#loc172 = loc(fused[#loc52, #loc54])
#loc173 = loc(fused[#loc55, #loc56])
#loc174 = loc(fused[#loc61, #loc62])
#loc175 = loc(fused[#loc63, #loc64])
#loc176 = loc(fused[#loc65, #loc66])
#loc177 = loc(fused[#loc67, #loc68])
#loc178 = loc(fused[#loc69, #loc70])
#loc179 = loc(fused[#loc75, #loc76])
#loc182 = loc(fused[#loc86, #loc87])
#loc183 = loc(fused[#loc90, #loc91])
#loc184 = loc(fused[#loc94, #loc93])
#loc185 = loc(fused[#loc95, #loc96])
#loc186 = loc(fused[#loc97, #loc98])
#loc187 = loc(fused[#loc99, #loc100])
#loc188 = loc(fused[#loc101, #loc102])
#loc189 = loc(fused[#loc103, #loc104])
#loc190 = loc(fused[#loc105, #loc106])
#loc191 = loc(fused[#loc107, #loc108, #loc109, #loc104])
#loc192 = loc(fused[#loc111, #loc110])
#loc193 = loc(fused[#loc113, #loc112])
#loc194 = loc(fused[#loc114, #loc115])
#loc195 = loc(fused[#loc116, #loc117])
#loc196 = loc(fused[#loc118, #loc119])
#loc197 = loc(fused[#loc120, #loc121])
#loc198 = loc(fused[#loc122, #loc123])
#loc199 = loc(fused[#loc125, #loc124])
#loc200 = loc(fused[#loc126, #loc127])
#loc201 = loc(fused[#loc129, #loc123])
#loc202 = loc(fused[#loc132, #loc130])
#loc203 = loc(fused[#loc135, #loc133])
#loc204 = loc(fused[#loc137, #loc136])
#loc205 = loc(fused[#loc141, #loc142])
#loc206 = loc(fused[#loc140, #loc142])
#loc207 = loc(fused[#loc143, #loc144])
