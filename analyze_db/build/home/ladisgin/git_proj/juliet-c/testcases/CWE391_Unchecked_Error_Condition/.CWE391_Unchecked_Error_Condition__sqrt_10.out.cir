!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc41 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":101:10)
#loc42 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":101:14)
#loc43 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":101:20)
#loc44 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":101:32)
#loc140 = loc(fused[#loc41, #loc42])
#loc141 = loc(fused[#loc43, #loc44])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_10.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @globalTrue : !s32i {alignment = 4 : i64} loc(#loc125)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc3)
  cir.func private @printDoubleLine(!cir.double) loc(#loc126)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_10_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc128)
    cir.br ^bb1 loc(#loc129)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc125)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc12)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc12)
    cir.brcond %3 ^bb2, ^bb5 loc(#loc130)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc131)
  ^bb3:  // pred: ^bb2
    %4 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc16)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc18)
    %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc18)
    %8 = cir.call @sqrt(%7) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc16)
    cir.store %8, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc132)
    %9 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc21)
    cir.call @printDoubleLine(%9) : (!cir.double) -> () loc(#loc22)
    cir.br ^bb4 loc(#loc15)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc11)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc11)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc7)
  } loc(#loc127)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_10_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc134)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc25)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc135)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    cir.return loc(#loc24)
  } loc(#loc133)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc136)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc137)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc138)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc35)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc36)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc38)
  cir.func @main(%arg0: !s32i loc(fused[#loc41, #loc42]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc43, #loc44])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc140)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc141)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc40)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc45)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc45)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc46)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc47)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc47)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc48)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc35)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    %8 = cir.get_global @CWE391_Unchecked_Error_Condition__sqrt_10_good : !cir.ptr<!cir.func<!void ()>> loc(#loc142)
    cir.call @CWE391_Unchecked_Error_Condition__sqrt_10_good() : () -> () loc(#loc50)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc36)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc37)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    %13 = cir.get_global @CWE391_Unchecked_Error_Condition__sqrt_10_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc143)
    cir.call @CWE391_Unchecked_Error_Condition__sqrt_10_bad() : () -> () loc(#loc54)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc38)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc57)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc144)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc144)
    cir.return %17 : !s32i loc(#loc144)
  } loc(#loc139)
  cir.global "private" external @globalFalse : !s32i {alignment = 4 : i64} loc(#loc145)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc61)
  cir.func private @__errno_location() -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc146)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"sqrt() failed\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc64)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc147)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc149)
    cir.br ^bb1 loc(#loc150)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc145)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc73)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc73)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc151)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc61)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    cir.br ^bb10 loc(#loc75)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc152)
  ^bb4:  // pred: ^bb3
    %6 = cir.const #cir.int<0> : !s32i loc(#loc80)
    %7 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc81)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc153)
    %8 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc82)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc84)
    %11 = cir.cast(int_to_float, %10 : !s32i), !cir.double loc(#loc84)
    %12 = cir.call @sqrt(%11) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc82)
    cir.store %12, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc154)
    cir.br ^bb5 loc(#loc155)
  ^bb5:  // pred: ^bb4
    %13 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc89)
    %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    %15 = cir.const #cir.int<33> : !s32i loc(#loc90)
    %16 = cir.cmp(eq, %14, %15) : !s32i, !cir.bool loc(#loc156)
    cir.brcond %16 ^bb6, ^bb7 loc(#loc157)
  ^bb6:  // pred: ^bb5
    %17 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc64)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc93)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc94)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc93)
    cir.br ^bb7 loc(#loc88)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc88)
  ^bb8:  // pred: ^bb7
    %21 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc95)
    cir.call @printDoubleLine(%21) : (!cir.double) -> () loc(#loc96)
    cir.br ^bb9 loc(#loc79)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc72)
  ^bb10:  // 2 preds: ^bb2, ^bb9
    cir.br ^bb11 loc(#loc72)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc68)
  } loc(#loc148)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc159)
    cir.br ^bb1 loc(#loc160)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc125)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc103)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc103)
    cir.brcond %3 ^bb2, ^bb9 loc(#loc161)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc162)
  ^bb3:  // pred: ^bb2
    %4 = cir.const #cir.int<0> : !s32i loc(#loc107)
    %5 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc108)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc163)
    %6 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc109)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc110)
    %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc111)
    %9 = cir.cast(int_to_float, %8 : !s32i), !cir.double loc(#loc111)
    %10 = cir.call @sqrt(%9) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc109)
    cir.store %10, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc164)
    cir.br ^bb4 loc(#loc165)
  ^bb4:  // pred: ^bb3
    %11 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc116)
    %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc116)
    %13 = cir.const #cir.int<33> : !s32i loc(#loc117)
    %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc166)
    cir.brcond %14 ^bb5, ^bb6 loc(#loc167)
  ^bb5:  // pred: ^bb4
    %15 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc119)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc119)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc120)
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc121)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc122)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc121)
    cir.br ^bb6 loc(#loc115)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc115)
  ^bb7:  // pred: ^bb6
    %19 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc123)
    cir.call @printDoubleLine(%19) : (!cir.double) -> () loc(#loc124)
    cir.br ^bb8 loc(#loc106)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc102)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc102)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc98)
  } loc(#loc158)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_10.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":116:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":116:12)
#loc3 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":38:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":38:41)
#loc6 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":24:1)
#loc7 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":35:1)
#loc8 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":29:13)
#loc9 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":29:20)
#loc10 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":26:5)
#loc11 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":34:5)
#loc12 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":26:8)
#loc13 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":27:5)
#loc14 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":28:9)
#loc15 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":33:9)
#loc16 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":30:36)
#loc17 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":30:50)
#loc18 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":30:49)
#loc19 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":30:13)
#loc20 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":30:51)
#loc21 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":32:29)
#loc22 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":32:13)
#loc23 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":86:1)
#loc24 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":90:1)
#loc25 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":88:5)
#loc26 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":88:11)
#loc27 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":89:5)
#loc28 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":89:11)
#loc29 = loc("/usr/include/stdlib.h":575:1)
#loc30 = loc("/usr/include/stdlib.h":575:41)
#loc31 = loc("/usr/include/time.h":76:1)
#loc32 = loc("/usr/include/time.h":76:38)
#loc33 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc34 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc35 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":106:15)
#loc36 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":108:15)
#loc37 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":111:15)
#loc38 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":113:15)
#loc39 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":101:1)
#loc40 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":116:1)
#loc45 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":102:1)
#loc46 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":104:27)
#loc47 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":104:22)
#loc48 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":104:5)
#loc49 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":106:5)
#loc50 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":107:5)
#loc51 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":107:52)
#loc52 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":108:5)
#loc53 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":111:5)
#loc54 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":112:5)
#loc55 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":112:51)
#loc56 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":113:5)
#loc57 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":115:12)
#loc58 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":115:5)
#loc59 = loc("../../testcasesupport/std_testcase.h":117:1)
#loc60 = loc("../../testcasesupport/std_testcase.h":117:12)
#loc61 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":47:19)
#loc62 = loc("/usr/include/errno.h":37:1)
#loc63 = loc("/usr/include/errno.h":37:45)
#loc64 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":58:27)
#loc65 = loc("/usr/include/stdlib.h":756:1)
#loc66 = loc("/usr/include/stdlib.h":756:70)
#loc67 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":42:1)
#loc68 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":64:1)
#loc69 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":52:13)
#loc70 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":52:20)
#loc71 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":44:5)
#loc72 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":63:5)
#loc73 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":44:8)
#loc74 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":45:5)
#loc75 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":48:5)
#loc76 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":50:5)
#loc77 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":47:9)
#loc78 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":51:9)
#loc79 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":62:9)
#loc80 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":53:21)
#loc81 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":53:13)
#loc82 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":54:36)
#loc83 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":54:50)
#loc84 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":54:49)
#loc85 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":54:13)
#loc86 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":54:51)
#loc87 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":56:13)
#loc88 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":60:13)
#loc89 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":56:17)
#loc90 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":56:26)
#loc91 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":57:13)
#loc92 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":58:17)
#loc93 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":59:17)
#loc94 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":59:22)
#loc95 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":61:29)
#loc96 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":61:13)
#loc97 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":67:1)
#loc98 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":84:1)
#loc99 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":72:13)
#loc100 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":72:20)
#loc101 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":69:5)
#loc102 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":83:5)
#loc103 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":69:8)
#loc104 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":70:5)
#loc105 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":71:9)
#loc106 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":82:9)
#loc107 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":73:21)
#loc108 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":73:13)
#loc109 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":74:36)
#loc110 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":74:50)
#loc111 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":74:49)
#loc112 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":74:13)
#loc113 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":74:51)
#loc114 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":76:13)
#loc115 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":80:13)
#loc116 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":76:17)
#loc117 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":76:26)
#loc118 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":77:13)
#loc119 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":78:27)
#loc120 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":78:17)
#loc121 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":79:17)
#loc122 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":79:22)
#loc123 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":81:29)
#loc124 = loc("CWE391_Unchecked_Error_Condition__sqrt_10.c":81:13)
#loc125 = loc(fused[#loc1, #loc2])
#loc126 = loc(fused[#loc4, #loc5])
#loc127 = loc(fused[#loc6, #loc7])
#loc128 = loc(fused[#loc8, #loc9])
#loc129 = loc(fused[#loc10, #loc11])
#loc130 = loc(fused[#loc13, #loc11])
#loc131 = loc(fused[#loc14, #loc15])
#loc132 = loc(fused[#loc19, #loc20])
#loc133 = loc(fused[#loc23, #loc24])
#loc134 = loc(fused[#loc25, #loc26])
#loc135 = loc(fused[#loc27, #loc28])
#loc136 = loc(fused[#loc29, #loc30])
#loc137 = loc(fused[#loc31, #loc32])
#loc138 = loc(fused[#loc33, #loc34])
#loc139 = loc(fused[#loc39, #loc40])
#loc142 = loc(fused[#loc50, #loc51])
#loc143 = loc(fused[#loc54, #loc55])
#loc144 = loc(fused[#loc58, #loc57])
#loc145 = loc(fused[#loc59, #loc60])
#loc146 = loc(fused[#loc62, #loc63])
#loc147 = loc(fused[#loc65, #loc66])
#loc148 = loc(fused[#loc67, #loc68])
#loc149 = loc(fused[#loc69, #loc70])
#loc150 = loc(fused[#loc71, #loc72])
#loc151 = loc(fused[#loc74, #loc75, #loc76, #loc72])
#loc152 = loc(fused[#loc78, #loc79])
#loc153 = loc(fused[#loc81, #loc80])
#loc154 = loc(fused[#loc85, #loc86])
#loc155 = loc(fused[#loc87, #loc88])
#loc156 = loc(fused[#loc89, #loc90])
#loc157 = loc(fused[#loc91, #loc88])
#loc158 = loc(fused[#loc97, #loc98])
#loc159 = loc(fused[#loc99, #loc100])
#loc160 = loc(fused[#loc101, #loc102])
#loc161 = loc(fused[#loc104, #loc102])
#loc162 = loc(fused[#loc105, #loc106])
#loc163 = loc(fused[#loc108, #loc107])
#loc164 = loc(fused[#loc112, #loc113])
#loc165 = loc(fused[#loc114, #loc115])
#loc166 = loc(fused[#loc116, #loc117])
#loc167 = loc(fused[#loc118, #loc115])
