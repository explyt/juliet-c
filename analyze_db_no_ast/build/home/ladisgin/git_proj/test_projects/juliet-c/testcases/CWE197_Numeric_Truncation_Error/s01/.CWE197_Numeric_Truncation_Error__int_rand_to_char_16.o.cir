!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s01/CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc48)
  cir.func private  @printHexCharLine(!s8i) loc(#loc49)
  cir.func no_proto  @CWE197_Numeric_Truncation_Error__int_rand_to_char_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc51)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc10)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc52)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc14)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc14)
        cir.condition(%4) loc(#loc14)
      } do {
        %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
        %4 = cir.const #cir.int<1> : !s32i loc(#loc15)
        %5 = cir.binop(and, %3, %4) : !s32i loc(#loc15)
        %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc15)
        %7 = cir.ternary(%6, true {
          %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc15)
          %11 = cir.const #cir.int<30> : !s32i loc(#loc15)
          %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc15)
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc15)
          %15 = cir.const #cir.int<15> : !s32i loc(#loc15)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc15)
          %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc15)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc15)
          %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc15)
          cir.yield %20 : !u32i loc(#loc15)
        }, false {
          %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc15)
          %11 = cir.const #cir.int<30> : !s32i loc(#loc15)
          %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc15)
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc15)
          %15 = cir.const #cir.int<15> : !s32i loc(#loc15)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc15)
          %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc15)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc15)
          %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc15)
          %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc15)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc15)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc15)
          %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc15)
          cir.yield %24 : !u32i loc(#loc15)
        }) : (!cir.bool) -> !u32i loc(#loc15)
        %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc15)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc54)
        cir.break loc(#loc17)
      } loc(#loc53)
    } loc(#loc53)
    cir.scope {
      %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc56)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
      %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc21)
      cir.store %5, %3 : !s8i, !cir.ptr<!s8i> loc(#loc56)
      %6 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc22)
      cir.call @printHexCharLine(%6) : (!s8i) -> () loc(#loc23)
    } loc(#loc55)
    cir.return loc(#loc6)
  } loc(#loc50)
  cir.func no_proto  @CWE197_Numeric_Truncation_Error__int_rand_to_char_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc58)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc26)
    cir.return loc(#loc25)
  } loc(#loc57)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc60)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc33)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc61)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc37)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc37)
        cir.condition(%4) loc(#loc37)
      } do {
        %3 = cir.const #cir.int<127> : !s32i loc(#loc38)
        %4 = cir.const #cir.int<5> : !s32i loc(#loc39)
        %5 = cir.binop(sub, %3, %4) nsw : !s32i loc(#loc38)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc63)
        cir.break loc(#loc41)
      } loc(#loc62)
    } loc(#loc62)
    cir.scope {
      %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc65)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc45)
      %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc45)
      cir.store %5, %3 : !s8i, !cir.ptr<!s8i> loc(#loc65)
      %6 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc46)
      cir.call @printHexCharLine(%6) : (!s8i) -> () loc(#loc47)
    } loc(#loc64)
    cir.return loc(#loc29)
  } loc(#loc59)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s01/CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc5 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":21:1)
#loc6 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":37:1)
#loc7 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":23:5)
#loc8 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":23:9)
#loc9 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":25:13)
#loc10 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":25:12)
#loc11 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":25:5)
#loc12 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":26:5)
#loc13 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":31:5)
#loc14 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":26:11)
#loc15 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":29:16)
#loc16 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":29:9)
#loc17 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":30:9)
#loc18 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":32:5)
#loc19 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":36:5)
#loc20 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":34:9)
#loc21 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":34:31)
#loc22 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":35:26)
#loc23 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":35:9)
#loc24 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":62:1)
#loc25 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":65:1)
#loc26 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":64:5)
#loc27 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":64:13)
#loc28 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":44:1)
#loc29 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":60:1)
#loc30 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":46:5)
#loc31 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":46:9)
#loc32 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":48:13)
#loc33 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":48:12)
#loc34 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":48:5)
#loc35 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":49:5)
#loc36 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":54:5)
#loc37 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":49:11)
#loc38 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":52:16)
#loc39 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":52:25)
#loc40 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":52:9)
#loc41 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":53:9)
#loc42 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":55:5)
#loc43 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":59:5)
#loc44 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":57:9)
#loc45 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":57:31)
#loc46 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":58:26)
#loc47 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_16.c":58:9)
#loc48 = loc(fused[#loc1, #loc2])
#loc49 = loc(fused[#loc3, #loc4])
#loc50 = loc(fused[#loc5, #loc6])
#loc51 = loc(fused[#loc7, #loc8])
#loc52 = loc(fused[#loc11, #loc9])
#loc53 = loc(fused[#loc12, #loc13])
#loc54 = loc(fused[#loc16, #loc15])
#loc55 = loc(fused[#loc18, #loc19])
#loc56 = loc(fused[#loc20, #loc21])
#loc57 = loc(fused[#loc24, #loc25])
#loc58 = loc(fused[#loc26, #loc27])
#loc59 = loc(fused[#loc28, #loc29])
#loc60 = loc(fused[#loc30, #loc31])
#loc61 = loc(fused[#loc34, #loc32])
#loc62 = loc(fused[#loc35, #loc36])
#loc63 = loc(fused[#loc40, #loc39])
#loc64 = loc(fused[#loc42, #loc43])
#loc65 = loc(fused[#loc44, #loc45])
