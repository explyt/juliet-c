!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc520)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc521)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc522)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc523)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc524)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc525)
  cir.func private  @printIntLine(!s32i) loc(#loc526)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc16)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc527)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc529)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc24)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc530)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc532)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc28)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc28)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc535)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc535)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc535)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc37)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc38)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc38)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc38)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc38)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc38)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc38)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc38)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc38)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc521)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc39)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc40)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc41)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc41)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !s32i loc(#loc537)
            %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc42)
            cir.if %23 {
              %24 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc46)
              %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc47)
              cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc539)
            } else {
              %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc50)
            } loc(#loc538)
          } loc(#loc536)
        } loc(#loc534)
      } loc(#loc533)
    } loc(#loc531)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc541)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc53)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc53)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc544)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc545)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc62)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc63)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc63)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc546)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc547)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc62)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc548)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc545)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc68)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc69)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc69)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !s32i loc(#loc550)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc70)
            cir.if %22 {
              %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc72)
              %24 = cir.const #cir.int<1> : !s32i loc(#loc73)
              %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc74)
              cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc72)
            } loc(#loc551)
          } loc(#loc549)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc77)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc553)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc79)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc80)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !s32i loc(#loc554)
              %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc81)
              cir.condition(%22) loc(#loc81)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc83)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc84)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc85)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc86)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc556)
              } loc(#loc555)
              cir.yield loc(#loc76)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc87)
              %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc88)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc557)
              cir.yield loc(#loc552)
            } loc(#loc552)
          } loc(#loc552)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc91)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc92)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !s32i loc(#loc559)
            %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc93)
            cir.if %21 {
              %22 = cir.const #cir.int<1> : !s32i loc(#loc97)
              %23 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc98)
              %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc99)
              %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc100)
              cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc561)
              cir.scope {
                %26 = cir.const #cir.int<0> : !s32i loc(#loc103)
                cir.store %26, %6 : !s32i, !cir.ptr<!s32i> loc(#loc563)
                cir.for : cond {
                  %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc105)
                  %28 = cir.const #cir.int<10> : !s32i loc(#loc106)
                  %29 = cir.cmp(lt, %27, %28) : !s32i, !s32i loc(#loc564)
                  %30 = cir.cast(int_to_bool, %29 : !s32i), !cir.bool loc(#loc107)
                  cir.condition(%30) loc(#loc107)
                } body {
                  cir.scope {
                    %27 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc109)
                    %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc110)
                    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc111)
                    %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc109)
                    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc112)
                  } loc(#loc565)
                  cir.yield loc(#loc102)
                } step {
                  %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc113)
                  %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc114)
                  cir.store %28, %6 : !s32i, !cir.ptr<!s32i> loc(#loc566)
                  cir.yield loc(#loc562)
                } loc(#loc562)
              } loc(#loc562)
            } else {
              %22 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc16)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc16)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc115)
            } loc(#loc560)
          } loc(#loc558)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc116)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc117)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc117)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc116)
        } loc(#loc543)
      } loc(#loc542)
    } loc(#loc540)
    cir.return loc(#loc20)
  } loc(#loc528)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc568)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc120)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc569)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc122)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc570)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc124)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc571)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc126)
    cir.return loc(#loc119)
  } loc(#loc567)
  cir.func no_proto internal private  @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc129)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc130)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc573)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc573)
    cir.return %2 : !s32i loc(#loc573)
  } loc(#loc572)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc132)
  cir.global "private"  constant internal dsolocal @".str3" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc133)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc575)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc138)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc139)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc576)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc578)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc143)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc143)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc581)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc581)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc581)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc152)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc153)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc153)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc153)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc153)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc153)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc153)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc153)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc153)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc521)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc154)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc155)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc156)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc156)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !s32i loc(#loc583)
            %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc157)
            cir.if %23 {
              %24 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc161)
              %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc162)
              cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc585)
            } else {
              %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc165)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc165)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc166)
            } loc(#loc584)
          } loc(#loc582)
        } loc(#loc580)
      } loc(#loc579)
    } loc(#loc577)
    cir.scope {
      %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc587)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc169)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc169)
      cir.if %5 {
        %6 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc132)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc132)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc174)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc590)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc591)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc181)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc182)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc182)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc592)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc593)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc181)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc594)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc591)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc187)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc188)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc188)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !s32i loc(#loc596)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc189)
            cir.if %22 {
              %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc191)
              %24 = cir.const #cir.int<1> : !s32i loc(#loc192)
              %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc193)
              cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc191)
            } loc(#loc597)
          } loc(#loc595)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc196)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc599)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc198)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc199)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !s32i loc(#loc600)
              %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc200)
              cir.condition(%22) loc(#loc200)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc202)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc203)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc204)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc205)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc602)
              } loc(#loc601)
              cir.yield loc(#loc195)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc206)
              %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc207)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc603)
              cir.yield loc(#loc598)
            } loc(#loc598)
          } loc(#loc598)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc210)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc211)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !s32i loc(#loc605)
            %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc212)
            %22 = cir.ternary(%21, true {
              %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc214)
              %24 = cir.const #cir.int<10> : !s32i loc(#loc215)
              %25 = cir.cmp(lt, %23, %24) : !s32i, !s32i loc(#loc606)
              %26 = cir.cast(int_to_bool, %25 : !s32i), !cir.bool loc(#loc217)
              %27 = cir.ternary(%26, true {
                %28 = cir.const #true loc(#loc213)
                cir.yield %28 : !cir.bool loc(#loc213)
              }, false {
                %28 = cir.const #false loc(#loc213)
                cir.yield %28 : !cir.bool loc(#loc213)
              }) : (!cir.bool) -> !cir.bool loc(#loc213)
              cir.yield %27 : !cir.bool loc(#loc213)
            }, false {
              %23 = cir.const #false loc(#loc213)
              cir.yield %23 : !cir.bool loc(#loc213)
            }) : (!cir.bool) -> !cir.bool loc(#loc213)
            cir.if %22 {
              %23 = cir.const #cir.int<1> : !s32i loc(#loc221)
              %24 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc222)
              %25 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc223)
              %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc224)
              cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc608)
              cir.scope {
                %27 = cir.const #cir.int<0> : !s32i loc(#loc227)
                cir.store %27, %6 : !s32i, !cir.ptr<!s32i> loc(#loc610)
                cir.for : cond {
                  %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc229)
                  %29 = cir.const #cir.int<10> : !s32i loc(#loc230)
                  %30 = cir.cmp(lt, %28, %29) : !s32i, !s32i loc(#loc611)
                  %31 = cir.cast(int_to_bool, %30 : !s32i), !cir.bool loc(#loc231)
                  cir.condition(%31) loc(#loc231)
                } body {
                  cir.scope {
                    %28 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc233)
                    %29 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc234)
                    %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc235)
                    %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc233)
                    cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc236)
                  } loc(#loc612)
                  cir.yield loc(#loc226)
                } step {
                  %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc237)
                  %29 = cir.unary(inc, %28) : !s32i, !s32i loc(#loc238)
                  cir.store %29, %6 : !s32i, !cir.ptr<!s32i> loc(#loc613)
                  cir.yield loc(#loc609)
                } loc(#loc609)
              } loc(#loc609)
            } else {
              %23 = cir.get_global @".str3" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc133)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc133)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc239)
            } loc(#loc607)
          } loc(#loc604)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc240)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc241)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc241)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc240)
        } loc(#loc589)
      } loc(#loc588)
    } loc(#loc586)
    cir.return loc(#loc135)
  } loc(#loc574)
  cir.func no_proto internal private  @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc243)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc244)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc615)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc615)
    cir.return %2 : !s32i loc(#loc615)
  } loc(#loc614)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc617)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc250)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc251)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc618)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc620)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc255)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc255)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc623)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc623)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc623)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc264)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc265)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc265)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc265)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc265)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc265)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc265)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc265)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc265)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc521)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc266)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc267)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc268)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc268)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !s32i loc(#loc625)
            %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc269)
            cir.if %23 {
              %24 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc273)
              %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc274)
              cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc627)
            } else {
              %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc277)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc277)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc278)
            } loc(#loc626)
          } loc(#loc624)
        } loc(#loc622)
      } loc(#loc621)
    } loc(#loc619)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc629)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc281)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc281)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc632)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc633)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc290)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc291)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc291)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc634)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc635)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc290)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc636)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc633)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc296)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc297)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc297)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !s32i loc(#loc638)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc298)
            cir.if %22 {
              %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc300)
              %24 = cir.const #cir.int<1> : !s32i loc(#loc301)
              %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc302)
              cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc300)
            } loc(#loc639)
          } loc(#loc637)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc305)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc641)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc307)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc308)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !s32i loc(#loc642)
              %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc309)
              cir.condition(%22) loc(#loc309)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc311)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc312)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc313)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc314)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc644)
              } loc(#loc643)
              cir.yield loc(#loc304)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc315)
              %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc316)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc645)
              cir.yield loc(#loc640)
            } loc(#loc640)
          } loc(#loc640)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc319)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc320)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !s32i loc(#loc647)
            %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc321)
            %22 = cir.ternary(%21, true {
              %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc323)
              %24 = cir.const #cir.int<10> : !s32i loc(#loc324)
              %25 = cir.cmp(lt, %23, %24) : !s32i, !s32i loc(#loc648)
              %26 = cir.cast(int_to_bool, %25 : !s32i), !cir.bool loc(#loc326)
              %27 = cir.ternary(%26, true {
                %28 = cir.const #true loc(#loc322)
                cir.yield %28 : !cir.bool loc(#loc322)
              }, false {
                %28 = cir.const #false loc(#loc322)
                cir.yield %28 : !cir.bool loc(#loc322)
              }) : (!cir.bool) -> !cir.bool loc(#loc322)
              cir.yield %27 : !cir.bool loc(#loc322)
            }, false {
              %23 = cir.const #false loc(#loc322)
              cir.yield %23 : !cir.bool loc(#loc322)
            }) : (!cir.bool) -> !cir.bool loc(#loc322)
            cir.if %22 {
              %23 = cir.const #cir.int<1> : !s32i loc(#loc330)
              %24 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc331)
              %25 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc332)
              %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc333)
              cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc650)
              cir.scope {
                %27 = cir.const #cir.int<0> : !s32i loc(#loc336)
                cir.store %27, %6 : !s32i, !cir.ptr<!s32i> loc(#loc652)
                cir.for : cond {
                  %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc338)
                  %29 = cir.const #cir.int<10> : !s32i loc(#loc339)
                  %30 = cir.cmp(lt, %28, %29) : !s32i, !s32i loc(#loc653)
                  %31 = cir.cast(int_to_bool, %30 : !s32i), !cir.bool loc(#loc340)
                  cir.condition(%31) loc(#loc340)
                } body {
                  cir.scope {
                    %28 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc342)
                    %29 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc343)
                    %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc344)
                    %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc342)
                    cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc345)
                  } loc(#loc654)
                  cir.yield loc(#loc335)
                } step {
                  %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc346)
                  %29 = cir.unary(inc, %28) : !s32i, !s32i loc(#loc347)
                  cir.store %29, %6 : !s32i, !cir.ptr<!s32i> loc(#loc655)
                  cir.yield loc(#loc651)
                } loc(#loc651)
              } loc(#loc651)
            } else {
              %23 = cir.get_global @".str3" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc348)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc348)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc349)
            } loc(#loc649)
          } loc(#loc646)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc350)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc351)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc351)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc350)
        } loc(#loc631)
      } loc(#loc630)
    } loc(#loc628)
    cir.return loc(#loc247)
  } loc(#loc616)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc657)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc356)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc357)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc658)
    cir.scope {
      %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc660)
      %4 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc361)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc361)
      cir.if %5 {
        %6 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc366)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc366)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc367)
      } else {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc368)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc662)
      } loc(#loc661)
    } loc(#loc659)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc664)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc372)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc372)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc667)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc668)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc381)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc382)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc382)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc669)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc670)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc381)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc671)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc668)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc387)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc388)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc388)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !s32i loc(#loc673)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc389)
            cir.if %22 {
              %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc391)
              %24 = cir.const #cir.int<1> : !s32i loc(#loc392)
              %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc393)
              cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc391)
            } loc(#loc674)
          } loc(#loc672)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc396)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc676)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc398)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc399)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !s32i loc(#loc677)
              %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc400)
              cir.condition(%22) loc(#loc400)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc402)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc403)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc404)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc405)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc679)
              } loc(#loc678)
              cir.yield loc(#loc395)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc406)
              %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc407)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc680)
              cir.yield loc(#loc675)
            } loc(#loc675)
          } loc(#loc675)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc410)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc411)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !s32i loc(#loc682)
            %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc412)
            cir.if %21 {
              %22 = cir.const #cir.int<1> : !s32i loc(#loc416)
              %23 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc417)
              %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc418)
              %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc419)
              cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc684)
              cir.scope {
                %26 = cir.const #cir.int<0> : !s32i loc(#loc422)
                cir.store %26, %6 : !s32i, !cir.ptr<!s32i> loc(#loc686)
                cir.for : cond {
                  %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc424)
                  %28 = cir.const #cir.int<10> : !s32i loc(#loc425)
                  %29 = cir.cmp(lt, %27, %28) : !s32i, !s32i loc(#loc687)
                  %30 = cir.cast(int_to_bool, %29 : !s32i), !cir.bool loc(#loc426)
                  cir.condition(%30) loc(#loc426)
                } body {
                  cir.scope {
                    %27 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc428)
                    %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc429)
                    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc430)
                    %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc428)
                    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc431)
                  } loc(#loc688)
                  cir.yield loc(#loc421)
                } step {
                  %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc432)
                  %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc433)
                  cir.store %28, %6 : !s32i, !cir.ptr<!s32i> loc(#loc689)
                  cir.yield loc(#loc685)
                } loc(#loc685)
              } loc(#loc685)
            } else {
              %22 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc434)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc434)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc435)
            } loc(#loc683)
          } loc(#loc681)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc436)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc437)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc437)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc436)
        } loc(#loc666)
      } loc(#loc665)
    } loc(#loc663)
    cir.return loc(#loc353)
  } loc(#loc656)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc691)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc442)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc443)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc692)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc694)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc447)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc447)
      cir.if %5 {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc450)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc696)
      } loc(#loc695)
    } loc(#loc693)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc698)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc454)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc454)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc701)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc702)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc463)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc464)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc464)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc703)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc704)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc463)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc705)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc702)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc469)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc470)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc470)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !s32i loc(#loc707)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc471)
            cir.if %22 {
              %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc473)
              %24 = cir.const #cir.int<1> : !s32i loc(#loc474)
              %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc475)
              cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc473)
            } loc(#loc708)
          } loc(#loc706)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc478)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc710)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc480)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc481)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !s32i loc(#loc711)
              %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc482)
              cir.condition(%22) loc(#loc482)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc484)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc485)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc486)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc487)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc713)
              } loc(#loc712)
              cir.yield loc(#loc477)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc488)
              %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc489)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc714)
              cir.yield loc(#loc709)
            } loc(#loc709)
          } loc(#loc709)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc492)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc493)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !s32i loc(#loc716)
            %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc494)
            cir.if %21 {
              %22 = cir.const #cir.int<1> : !s32i loc(#loc498)
              %23 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc499)
              %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc500)
              %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc501)
              cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc718)
              cir.scope {
                %26 = cir.const #cir.int<0> : !s32i loc(#loc504)
                cir.store %26, %6 : !s32i, !cir.ptr<!s32i> loc(#loc720)
                cir.for : cond {
                  %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc506)
                  %28 = cir.const #cir.int<10> : !s32i loc(#loc507)
                  %29 = cir.cmp(lt, %27, %28) : !s32i, !s32i loc(#loc721)
                  %30 = cir.cast(int_to_bool, %29 : !s32i), !cir.bool loc(#loc508)
                  cir.condition(%30) loc(#loc508)
                } body {
                  cir.scope {
                    %27 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc510)
                    %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc511)
                    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc512)
                    %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc510)
                    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc513)
                  } loc(#loc722)
                  cir.yield loc(#loc503)
                } step {
                  %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc514)
                  %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc515)
                  cir.store %28, %6 : !s32i, !cir.ptr<!s32i> loc(#loc723)
                  cir.yield loc(#loc719)
                } loc(#loc719)
              } loc(#loc719)
            } else {
              %22 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc516)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc516)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc517)
            } loc(#loc717)
          } loc(#loc715)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc518)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc519)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc519)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc518)
        } loc(#loc700)
      } loc(#loc699)
    } loc(#loc697)
    cir.return loc(#loc439)
  } loc(#loc690)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":54:27)
#loc10 = loc("/usr/include/stdlib.h":672:1)
#loc11 = loc("/usr/include/stdlib.h":672:45)
#loc12 = loc("/usr/include/stdlib.h":756:1)
#loc13 = loc("/usr/include/stdlib.h":756:70)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":82:27)
#loc17 = loc("/usr/include/stdlib.h":687:1)
#loc18 = loc("/usr/include/stdlib.h":687:32)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":37:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":87:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":39:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":39:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":41:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":41:12)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":41:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":42:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":57:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":42:8)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":42:26)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":43:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":44:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":56:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":45:13)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":45:49)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":47:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":55:13)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":47:23)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":47:36)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":47:53)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":47:17)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":47:63)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":47:60)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":48:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":51:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":53:13)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":50:29)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":50:24)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":50:17)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":50:40)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":54:17)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":58:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":86:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":58:8)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":58:26)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":59:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":60:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":85:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":61:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":61:17)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":62:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":62:58)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":62:35)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":62:42)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":62:47)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":62:57)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":63:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":63:43)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":63:17)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":63:27)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":63:24)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":63:33)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":63:34)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":63:40)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":63:39)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":65:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":68:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":65:22)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":65:18)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":65:25)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":65:29)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":65:27)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":66:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":67:29)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":67:17)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":67:24)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":67:25)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":65:34)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":65:33)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":71:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":83:13)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":71:17)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":71:25)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":71:22)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":72:13)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":79:13)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":81:13)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":73:32)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":73:17)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":73:24)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":73:28)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":75:17)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":78:17)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":75:25)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":75:21)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":75:28)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":75:32)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":75:30)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":76:17)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":77:34)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":77:41)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":77:42)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":77:21)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":75:37)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":75:36)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":82:17)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":84:13)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":84:18)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":293:1)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":299:1)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":295:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":295:14)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":296:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":296:14)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":297:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":297:14)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":298:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":298:14)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":25:1)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":28:1)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":27:12)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":27:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":118:19)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":143:27)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":94:1)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":148:1)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":96:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":96:9)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":98:13)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":98:12)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":98:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":99:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":114:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":99:8)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":99:26)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":100:5)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":101:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":113:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":102:13)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":102:49)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":104:13)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":112:13)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":104:23)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":104:36)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":104:53)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":104:17)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":104:63)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":104:60)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":105:13)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":108:13)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":110:13)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":107:29)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":107:24)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":107:17)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":107:40)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":111:27)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":111:17)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":115:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":147:5)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":115:8)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":115:27)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":116:5)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":119:5)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":121:5)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":118:9)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":122:9)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":146:9)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":123:13)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":123:17)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":124:13)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":124:58)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":124:35)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":124:42)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":124:47)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":124:57)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":125:13)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":125:43)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":125:17)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":125:27)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":125:24)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":125:33)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":125:34)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":125:40)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":125:39)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":127:13)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":130:13)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":127:22)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":127:18)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":127:25)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":127:29)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":127:27)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":128:13)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":129:29)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":129:17)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":129:24)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":129:25)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":127:34)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":127:33)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":132:13)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":144:13)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":132:17)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":132:25)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":132:22)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":132:27)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":132:30)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":132:38)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":132:40)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":132:35)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":133:13)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":140:13)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":142:13)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":134:32)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":134:17)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":134:24)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":134:28)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":136:17)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":139:17)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":136:25)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":136:21)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":136:28)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":136:32)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":136:30)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":137:17)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":138:34)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":138:41)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":138:42)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":138:21)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":136:37)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":136:36)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":143:17)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":145:13)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":145:18)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":30:1)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":33:1)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":32:12)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":32:5)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":151:1)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":200:1)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":153:5)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":153:9)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":155:13)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":155:12)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":155:5)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":156:5)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":171:5)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":156:8)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":156:26)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":157:5)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":158:9)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":170:9)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":159:13)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":159:49)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":161:13)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":169:13)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":161:23)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":161:36)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":161:53)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":161:17)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":161:63)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":161:60)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":162:13)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":165:13)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":167:13)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":164:29)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":164:24)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":164:17)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":164:40)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":168:27)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":168:17)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":172:5)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":199:5)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":172:8)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":172:26)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":173:5)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":174:9)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":198:9)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":175:13)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":175:17)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":176:13)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":176:58)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":176:35)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":176:42)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":176:47)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":176:57)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":177:13)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":177:43)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":177:17)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":177:27)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":177:24)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":177:33)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":177:34)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":177:40)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":177:39)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":179:13)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":182:13)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":179:22)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":179:18)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":179:25)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":179:29)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":179:27)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":180:13)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":181:29)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":181:17)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":181:24)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":181:25)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":179:34)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":179:33)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":184:13)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":196:13)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":184:17)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":184:25)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":184:22)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":184:27)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":184:30)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":184:38)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":184:40)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":184:35)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":185:13)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":192:13)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":194:13)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":186:32)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":186:17)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":186:24)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":186:28)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":188:17)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":191:17)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":188:25)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":188:21)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":188:28)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":188:32)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":188:30)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":189:17)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":190:34)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":190:41)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":190:42)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":190:21)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":188:37)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":188:36)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":195:27)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":195:17)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":197:13)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":197:18)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":203:1)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":248:1)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":205:5)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":205:9)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":207:13)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":207:12)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":207:5)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":208:5)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":218:5)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":208:8)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":208:27)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":209:5)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":212:5)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":214:5)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":211:19)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":211:9)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":217:16)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":217:9)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":219:5)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":247:5)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":219:8)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":219:26)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":220:5)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":221:9)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":246:9)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":222:13)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":222:17)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":223:13)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":223:58)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":223:35)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":223:42)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":223:47)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":223:57)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":224:13)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":224:43)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":224:17)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":224:27)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":224:24)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":224:33)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":224:34)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":224:40)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":224:39)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":226:13)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":229:13)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":226:22)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":226:18)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":226:25)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":226:29)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":226:27)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":227:13)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":228:29)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":228:17)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":228:24)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":228:25)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":226:34)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":226:33)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":232:13)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":244:13)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":232:17)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":232:25)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":232:22)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":233:13)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":240:13)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":242:13)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":234:32)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":234:17)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":234:24)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":234:28)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":236:17)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":239:17)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":236:25)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":236:21)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":236:28)
#loc425 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":236:32)
#loc426 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":236:30)
#loc427 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":237:17)
#loc428 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":238:34)
#loc429 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":238:41)
#loc430 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":238:42)
#loc431 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":238:21)
#loc432 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":236:37)
#loc433 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":236:36)
#loc434 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":243:27)
#loc435 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":243:17)
#loc436 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":245:13)
#loc437 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":245:18)
#loc438 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":251:1)
#loc439 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":291:1)
#loc440 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":253:5)
#loc441 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":253:9)
#loc442 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":255:13)
#loc443 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":255:12)
#loc444 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":255:5)
#loc445 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":256:5)
#loc446 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":261:5)
#loc447 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":256:8)
#loc448 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":256:26)
#loc449 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":257:5)
#loc450 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":260:16)
#loc451 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":260:9)
#loc452 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":262:5)
#loc453 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":290:5)
#loc454 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":262:8)
#loc455 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":262:26)
#loc456 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":263:5)
#loc457 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":264:9)
#loc458 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":289:9)
#loc459 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":265:13)
#loc460 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":265:17)
#loc461 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":266:13)
#loc462 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":266:58)
#loc463 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":266:35)
#loc464 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":266:42)
#loc465 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":266:47)
#loc466 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":266:57)
#loc467 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":267:13)
#loc468 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":267:43)
#loc469 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":267:17)
#loc470 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":267:27)
#loc471 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":267:24)
#loc472 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":267:33)
#loc473 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":267:34)
#loc474 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":267:40)
#loc475 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":267:39)
#loc476 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":269:13)
#loc477 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":272:13)
#loc478 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":269:22)
#loc479 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":269:18)
#loc480 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":269:25)
#loc481 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":269:29)
#loc482 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":269:27)
#loc483 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":270:13)
#loc484 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":271:29)
#loc485 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":271:17)
#loc486 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":271:24)
#loc487 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":271:25)
#loc488 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":269:34)
#loc489 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":269:33)
#loc490 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":275:13)
#loc491 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":287:13)
#loc492 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":275:17)
#loc493 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":275:25)
#loc494 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":275:22)
#loc495 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":276:13)
#loc496 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":283:13)
#loc497 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":285:13)
#loc498 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":277:32)
#loc499 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":277:17)
#loc500 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":277:24)
#loc501 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":277:28)
#loc502 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":279:17)
#loc503 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":282:17)
#loc504 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":279:25)
#loc505 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":279:21)
#loc506 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":279:28)
#loc507 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":279:32)
#loc508 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":279:30)
#loc509 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":280:17)
#loc510 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":281:34)
#loc511 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":281:41)
#loc512 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":281:42)
#loc513 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":281:21)
#loc514 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":279:37)
#loc515 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":279:36)
#loc516 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":286:27)
#loc517 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":286:17)
#loc518 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":288:13)
#loc519 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c":288:18)
#loc520 = loc(fused[#loc1, #loc2])
#loc521 = loc(fused[#loc3, #loc4])
#loc522 = loc(fused[#loc5, #loc6])
#loc523 = loc(fused[#loc7, #loc8])
#loc524 = loc(fused[#loc10, #loc11])
#loc525 = loc(fused[#loc12, #loc13])
#loc526 = loc(fused[#loc14, #loc15])
#loc527 = loc(fused[#loc17, #loc18])
#loc528 = loc(fused[#loc19, #loc20])
#loc529 = loc(fused[#loc21, #loc22])
#loc530 = loc(fused[#loc25, #loc23])
#loc531 = loc(fused[#loc26, #loc27])
#loc532 = loc(fused[#loc28, #loc29])
#loc533 = loc(fused[#loc30, #loc27])
#loc534 = loc(fused[#loc31, #loc32])
#loc535 = loc(fused[#loc33, #loc34])
#loc536 = loc(fused[#loc35, #loc36])
#loc537 = loc(fused[#loc40, #loc41])
#loc538 = loc(fused[#loc43, #loc44, #loc45, #loc36])
#loc539 = loc(fused[#loc48, #loc49])
#loc540 = loc(fused[#loc51, #loc52])
#loc541 = loc(fused[#loc53, #loc54])
#loc542 = loc(fused[#loc55, #loc52])
#loc543 = loc(fused[#loc56, #loc57])
#loc544 = loc(fused[#loc58, #loc59])
#loc545 = loc(fused[#loc60, #loc61])
#loc546 = loc(fused[#loc64, #loc65])
#loc547 = loc(fused[#loc63, #loc65])
#loc548 = loc(fused[#loc62, #loc61])
#loc549 = loc(fused[#loc66, #loc67])
#loc550 = loc(fused[#loc68, #loc69])
#loc551 = loc(fused[#loc71, #loc67])
#loc552 = loc(fused[#loc75, #loc76])
#loc553 = loc(fused[#loc78, #loc77])
#loc554 = loc(fused[#loc79, #loc80])
#loc555 = loc(fused[#loc82, #loc76])
#loc556 = loc(fused[#loc84, #loc83])
#loc557 = loc(fused[#loc88, #loc87])
#loc558 = loc(fused[#loc89, #loc90])
#loc559 = loc(fused[#loc91, #loc92])
#loc560 = loc(fused[#loc94, #loc95, #loc96, #loc90])
#loc561 = loc(fused[#loc98, #loc97])
#loc562 = loc(fused[#loc101, #loc102])
#loc563 = loc(fused[#loc104, #loc103])
#loc564 = loc(fused[#loc105, #loc106])
#loc565 = loc(fused[#loc108, #loc102])
#loc566 = loc(fused[#loc114, #loc113])
#loc567 = loc(fused[#loc118, #loc119])
#loc568 = loc(fused[#loc120, #loc121])
#loc569 = loc(fused[#loc122, #loc123])
#loc570 = loc(fused[#loc124, #loc125])
#loc571 = loc(fused[#loc126, #loc127])
#loc572 = loc(fused[#loc128, #loc129])
#loc573 = loc(fused[#loc131, #loc130])
#loc574 = loc(fused[#loc134, #loc135])
#loc575 = loc(fused[#loc136, #loc137])
#loc576 = loc(fused[#loc140, #loc138])
#loc577 = loc(fused[#loc141, #loc142])
#loc578 = loc(fused[#loc143, #loc144])
#loc579 = loc(fused[#loc145, #loc142])
#loc580 = loc(fused[#loc146, #loc147])
#loc581 = loc(fused[#loc148, #loc149])
#loc582 = loc(fused[#loc150, #loc151])
#loc583 = loc(fused[#loc155, #loc156])
#loc584 = loc(fused[#loc158, #loc159, #loc160, #loc151])
#loc585 = loc(fused[#loc163, #loc164])
#loc586 = loc(fused[#loc167, #loc168])
#loc587 = loc(fused[#loc169, #loc170])
#loc588 = loc(fused[#loc171, #loc172, #loc173, #loc168])
#loc589 = loc(fused[#loc175, #loc176])
#loc590 = loc(fused[#loc177, #loc178])
#loc591 = loc(fused[#loc179, #loc180])
#loc592 = loc(fused[#loc183, #loc184])
#loc593 = loc(fused[#loc182, #loc184])
#loc594 = loc(fused[#loc181, #loc180])
#loc595 = loc(fused[#loc185, #loc186])
#loc596 = loc(fused[#loc187, #loc188])
#loc597 = loc(fused[#loc190, #loc186])
#loc598 = loc(fused[#loc194, #loc195])
#loc599 = loc(fused[#loc197, #loc196])
#loc600 = loc(fused[#loc198, #loc199])
#loc601 = loc(fused[#loc201, #loc195])
#loc602 = loc(fused[#loc203, #loc202])
#loc603 = loc(fused[#loc207, #loc206])
#loc604 = loc(fused[#loc208, #loc209])
#loc605 = loc(fused[#loc210, #loc211])
#loc606 = loc(fused[#loc214, #loc216])
#loc607 = loc(fused[#loc218, #loc219, #loc220, #loc209])
#loc608 = loc(fused[#loc222, #loc221])
#loc609 = loc(fused[#loc225, #loc226])
#loc610 = loc(fused[#loc228, #loc227])
#loc611 = loc(fused[#loc229, #loc230])
#loc612 = loc(fused[#loc232, #loc226])
#loc613 = loc(fused[#loc238, #loc237])
#loc614 = loc(fused[#loc242, #loc243])
#loc615 = loc(fused[#loc245, #loc244])
#loc616 = loc(fused[#loc246, #loc247])
#loc617 = loc(fused[#loc248, #loc249])
#loc618 = loc(fused[#loc252, #loc250])
#loc619 = loc(fused[#loc253, #loc254])
#loc620 = loc(fused[#loc255, #loc256])
#loc621 = loc(fused[#loc257, #loc254])
#loc622 = loc(fused[#loc258, #loc259])
#loc623 = loc(fused[#loc260, #loc261])
#loc624 = loc(fused[#loc262, #loc263])
#loc625 = loc(fused[#loc267, #loc268])
#loc626 = loc(fused[#loc270, #loc271, #loc272, #loc263])
#loc627 = loc(fused[#loc275, #loc276])
#loc628 = loc(fused[#loc279, #loc280])
#loc629 = loc(fused[#loc281, #loc282])
#loc630 = loc(fused[#loc283, #loc280])
#loc631 = loc(fused[#loc284, #loc285])
#loc632 = loc(fused[#loc286, #loc287])
#loc633 = loc(fused[#loc288, #loc289])
#loc634 = loc(fused[#loc292, #loc293])
#loc635 = loc(fused[#loc291, #loc293])
#loc636 = loc(fused[#loc290, #loc289])
#loc637 = loc(fused[#loc294, #loc295])
#loc638 = loc(fused[#loc296, #loc297])
#loc639 = loc(fused[#loc299, #loc295])
#loc640 = loc(fused[#loc303, #loc304])
#loc641 = loc(fused[#loc306, #loc305])
#loc642 = loc(fused[#loc307, #loc308])
#loc643 = loc(fused[#loc310, #loc304])
#loc644 = loc(fused[#loc312, #loc311])
#loc645 = loc(fused[#loc316, #loc315])
#loc646 = loc(fused[#loc317, #loc318])
#loc647 = loc(fused[#loc319, #loc320])
#loc648 = loc(fused[#loc323, #loc325])
#loc649 = loc(fused[#loc327, #loc328, #loc329, #loc318])
#loc650 = loc(fused[#loc331, #loc330])
#loc651 = loc(fused[#loc334, #loc335])
#loc652 = loc(fused[#loc337, #loc336])
#loc653 = loc(fused[#loc338, #loc339])
#loc654 = loc(fused[#loc341, #loc335])
#loc655 = loc(fused[#loc347, #loc346])
#loc656 = loc(fused[#loc352, #loc353])
#loc657 = loc(fused[#loc354, #loc355])
#loc658 = loc(fused[#loc358, #loc356])
#loc659 = loc(fused[#loc359, #loc360])
#loc660 = loc(fused[#loc361, #loc362])
#loc661 = loc(fused[#loc363, #loc364, #loc365, #loc360])
#loc662 = loc(fused[#loc369, #loc368])
#loc663 = loc(fused[#loc370, #loc371])
#loc664 = loc(fused[#loc372, #loc373])
#loc665 = loc(fused[#loc374, #loc371])
#loc666 = loc(fused[#loc375, #loc376])
#loc667 = loc(fused[#loc377, #loc378])
#loc668 = loc(fused[#loc379, #loc380])
#loc669 = loc(fused[#loc383, #loc384])
#loc670 = loc(fused[#loc382, #loc384])
#loc671 = loc(fused[#loc381, #loc380])
#loc672 = loc(fused[#loc385, #loc386])
#loc673 = loc(fused[#loc387, #loc388])
#loc674 = loc(fused[#loc390, #loc386])
#loc675 = loc(fused[#loc394, #loc395])
#loc676 = loc(fused[#loc397, #loc396])
#loc677 = loc(fused[#loc398, #loc399])
#loc678 = loc(fused[#loc401, #loc395])
#loc679 = loc(fused[#loc403, #loc402])
#loc680 = loc(fused[#loc407, #loc406])
#loc681 = loc(fused[#loc408, #loc409])
#loc682 = loc(fused[#loc410, #loc411])
#loc683 = loc(fused[#loc413, #loc414, #loc415, #loc409])
#loc684 = loc(fused[#loc417, #loc416])
#loc685 = loc(fused[#loc420, #loc421])
#loc686 = loc(fused[#loc423, #loc422])
#loc687 = loc(fused[#loc424, #loc425])
#loc688 = loc(fused[#loc427, #loc421])
#loc689 = loc(fused[#loc433, #loc432])
#loc690 = loc(fused[#loc438, #loc439])
#loc691 = loc(fused[#loc440, #loc441])
#loc692 = loc(fused[#loc444, #loc442])
#loc693 = loc(fused[#loc445, #loc446])
#loc694 = loc(fused[#loc447, #loc448])
#loc695 = loc(fused[#loc449, #loc446])
#loc696 = loc(fused[#loc451, #loc450])
#loc697 = loc(fused[#loc452, #loc453])
#loc698 = loc(fused[#loc454, #loc455])
#loc699 = loc(fused[#loc456, #loc453])
#loc700 = loc(fused[#loc457, #loc458])
#loc701 = loc(fused[#loc459, #loc460])
#loc702 = loc(fused[#loc461, #loc462])
#loc703 = loc(fused[#loc465, #loc466])
#loc704 = loc(fused[#loc464, #loc466])
#loc705 = loc(fused[#loc463, #loc462])
#loc706 = loc(fused[#loc467, #loc468])
#loc707 = loc(fused[#loc469, #loc470])
#loc708 = loc(fused[#loc472, #loc468])
#loc709 = loc(fused[#loc476, #loc477])
#loc710 = loc(fused[#loc479, #loc478])
#loc711 = loc(fused[#loc480, #loc481])
#loc712 = loc(fused[#loc483, #loc477])
#loc713 = loc(fused[#loc485, #loc484])
#loc714 = loc(fused[#loc489, #loc488])
#loc715 = loc(fused[#loc490, #loc491])
#loc716 = loc(fused[#loc492, #loc493])
#loc717 = loc(fused[#loc495, #loc496, #loc497, #loc491])
#loc718 = loc(fused[#loc499, #loc498])
#loc719 = loc(fused[#loc502, #loc503])
#loc720 = loc(fused[#loc505, #loc504])
#loc721 = loc(fused[#loc506, #loc507])
#loc722 = loc(fused[#loc509, #loc503])
#loc723 = loc(fused[#loc515, #loc514])
