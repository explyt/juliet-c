!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":28:21)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":28:28)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":58:25)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":58:32)
#loc112 = loc(fused[#loc15, #loc16])
#loc131 = loc(fused[#loc64, #loc65])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.goodG2BSink.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc105)
  cir.global "private" constant cir_private @__const.badSink.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc106)
  cir.func private @strncpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc107)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc108)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc109)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc110)
  cir.func internal private @badSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc15, #loc16])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc106)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc112)
    cir.store %arg0, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc17)
    cir.br ^bb1 loc(#loc113)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @__const.badSink.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc106)
    cir.copy %2 to %0 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc106)
    %3 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc20)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc21)
    %5 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc22)
    %6 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc23)
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc24)
    %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc23)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc25)
    %11 = cir.binop(add, %8, %10) : !u64i loc(#loc114)
    %12 = cir.call @strncpy(%4, %5, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc20)
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc26)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc27)
    %14 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc28)
    %15 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc29)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc29)
    cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc28)
    cir.br ^bb2 loc(#loc19)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc14)
  } loc(#loc111)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc115)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc116)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc118)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc119)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>> loc(#loc39)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>> loc(#loc119)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc40)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc120)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc42)
    %5 = cir.const #cir.int<10> : !s32i loc(#loc43)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc43)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc121)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc122)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc42)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc123)
    cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc124)
    cir.br ^bb1 loc(#loc125)
  ^bb1:  // pred: ^bb0
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc51)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc51)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc126)
    cir.brcond %14 ^bb2, ^bb3 loc(#loc127)
  ^bb2:  // pred: ^bb1
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc53)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc54)
    %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc55)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc53)
    cir.br ^bb3 loc(#loc49)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc49)
  ^bb4:  // pred: ^bb3
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>> loc(#loc56)
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
    cir.call %18(%19) : (!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc56)
    cir.return loc(#loc35)
  } loc(#loc117)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc129)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc60)
    cir.return loc(#loc59)
  } loc(#loc128)
  cir.func internal private @goodG2BSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc64, #loc65])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc105)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc131)
    cir.store %arg0, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc66)
    cir.br ^bb1 loc(#loc132)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @__const.goodG2BSink.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc105)
    cir.copy %2 to %0 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc105)
    %3 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc69)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc70)
    %5 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc71)
    %6 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc72)
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc73)
    %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc72)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc74)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc74)
    %11 = cir.binop(add, %8, %10) : !u64i loc(#loc133)
    %12 = cir.call @strncpy(%4, %5, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc69)
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %14 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc77)
    %15 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc78)
    cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc77)
    cir.br ^bb2 loc(#loc68)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc63)
  } loc(#loc130)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc135)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc136)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>> loc(#loc84)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>> loc(#loc136)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc85)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc137)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc87)
    %5 = cir.const #cir.int<10> : !s32i loc(#loc88)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc89)
    %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc88)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc88)
    %9 = cir.const #cir.int<1> : !u64i loc(#loc138)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc139)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc87)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc140)
    cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc141)
    cir.br ^bb1 loc(#loc142)
  ^bb1:  // pred: ^bb0
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc97)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc98)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc98)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc143)
    cir.brcond %16 ^bb2, ^bb3 loc(#loc144)
  ^bb2:  // pred: ^bb1
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc100)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc101)
    %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc102)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc100)
    cir.br ^bb3 loc(#loc96)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc96)
  ^bb4:  // pred: ^bb3
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>> loc(#loc103)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc104)
    cir.call %20(%21) : (!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc103)
    cir.return loc(#loc80)
  } loc(#loc134)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":61:9)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":61:29)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":31:9)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":31:29)
#loc5 = loc("/usr/include/string.h":144:1)
#loc6 = loc("/usr/include/string.h":146:14)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("/usr/include/stdlib.h":687:1)
#loc12 = loc("/usr/include/stdlib.h":687:32)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":28:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":38:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":29:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":30:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":37:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":34:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":34:17)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":34:23)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":34:31)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":34:38)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":34:48)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":35:19)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":35:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":36:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":36:14)
#loc30 = loc("/usr/include/stdlib.h":672:1)
#loc31 = loc("/usr/include/stdlib.h":672:45)
#loc32 = loc("/usr/include/stdlib.h":756:1)
#loc33 = loc("/usr/include/stdlib.h":756:70)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":40:1)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":51:1)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":42:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":42:12)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":44:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":44:32)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":45:12)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":45:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":47:20)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":47:27)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":47:30)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":47:41)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":47:42)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":47:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":48:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":48:33)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":48:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":48:17)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":48:23)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":48:24)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":48:30)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":48:29)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":50:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":50:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":81:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":84:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":83:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":83:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":58:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":68:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":59:1)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":60:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":67:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":64:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":64:17)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":64:23)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":64:31)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":64:38)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":64:48)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":65:19)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":65:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":66:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":66:14)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":70:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":79:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":72:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":72:12)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":73:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":73:32)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":74:12)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":74:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":76:20)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":76:28)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":76:31)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":76:34)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":76:45)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":76:27)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":76:46)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":76:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":77:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":77:33)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":77:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":77:17)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":77:23)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":77:24)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":77:30)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":77:29)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":78:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c":78:13)
#loc105 = loc(fused[#loc1, #loc2])
#loc106 = loc(fused[#loc3, #loc4])
#loc107 = loc(fused[#loc5, #loc6])
#loc108 = loc(fused[#loc7, #loc8])
#loc109 = loc(fused[#loc9, #loc10])
#loc110 = loc(fused[#loc11, #loc12])
#loc111 = loc(fused[#loc13, #loc14])
#loc113 = loc(fused[#loc18, #loc19])
#loc114 = loc(fused[#loc23, #loc25])
#loc115 = loc(fused[#loc30, #loc31])
#loc116 = loc(fused[#loc32, #loc33])
#loc117 = loc(fused[#loc34, #loc35])
#loc118 = loc(fused[#loc36, #loc37])
#loc119 = loc(fused[#loc38, #loc39])
#loc120 = loc(fused[#loc41, #loc40])
#loc121 = loc(fused[#loc44, #loc45])
#loc122 = loc(fused[#loc43, #loc45])
#loc123 = loc(fused[#loc42, #loc46])
#loc124 = loc(fused[#loc47, #loc46])
#loc125 = loc(fused[#loc48, #loc49])
#loc126 = loc(fused[#loc50, #loc51])
#loc127 = loc(fused[#loc52, #loc49])
#loc128 = loc(fused[#loc58, #loc59])
#loc129 = loc(fused[#loc60, #loc61])
#loc130 = loc(fused[#loc62, #loc63])
#loc132 = loc(fused[#loc67, #loc68])
#loc133 = loc(fused[#loc72, #loc74])
#loc134 = loc(fused[#loc79, #loc80])
#loc135 = loc(fused[#loc81, #loc82])
#loc136 = loc(fused[#loc83, #loc84])
#loc137 = loc(fused[#loc86, #loc85])
#loc138 = loc(fused[#loc90, #loc91])
#loc139 = loc(fused[#loc92, #loc91])
#loc140 = loc(fused[#loc87, #loc93])
#loc141 = loc(fused[#loc94, #loc93])
#loc142 = loc(fused[#loc95, #loc96])
#loc143 = loc(fused[#loc97, #loc98])
#loc144 = loc(fused[#loc99, #loc96])
