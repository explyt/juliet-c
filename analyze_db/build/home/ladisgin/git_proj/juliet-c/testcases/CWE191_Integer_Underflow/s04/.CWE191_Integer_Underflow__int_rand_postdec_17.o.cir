!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc24 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":31:16)
#loc72 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":58:16)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__int_rand_postdec_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc138)
  cir.func private @printIntLine(!s32i) loc(#loc139)
  cir.func no_proto @CWE191_Integer_Underflow__int_rand_postdec_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc141)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc142)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc143)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc144)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc14)
    cir.store %4, %3 : !s32i, !cir.ptr<!s32i> loc(#loc145)
    cir.br ^bb1 loc(#loc146)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<0> : !s32i loc(#loc18)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    cir.br ^bb2 loc(#loc146)
  ^bb2:  // 2 preds: ^bb1, ^bb10
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc148)
    cir.brcond %8 ^bb3, ^bb11 loc(#loc22)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc149)
  ^bb4:  // pred: ^bb3
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %11 = cir.binop(and, %9, %10) : !s32i loc(#loc24)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc24)
    cir.brcond %12 ^bb5, ^bb6 loc(#loc24)
  ^bb5:  // pred: ^bb4
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc24)
    %15 = cir.const #cir.int<30> : !s32i loc(#loc24)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc24)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc24)
    %19 = cir.const #cir.int<15> : !s32i loc(#loc24)
    %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc24)
    %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc24)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc24)
    %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc24)
    cir.br ^bb7(%24 : !u32i) loc(#loc24)
  ^bb6:  // pred: ^bb4
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc24)
    %27 = cir.const #cir.int<30> : !s32i loc(#loc24)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc24)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc24)
    %31 = cir.const #cir.int<15> : !s32i loc(#loc24)
    %32 = cir.shift(left, %30 : !u32i, %31 : !s32i) -> !u32i loc(#loc24)
    %33 = cir.binop(xor, %28, %32) : !u32i loc(#loc24)
    %34 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc24)
    %36 = cir.binop(xor, %33, %35) : !u32i loc(#loc24)
    %37 = cir.unary(minus, %36) : !u32i, !u32i loc(#loc24)
    %38 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %39 = cir.cast(integral, %38 : !s32i), !u32i loc(#loc24)
    %40 = cir.binop(sub, %37, %39) : !u32i loc(#loc24)
    cir.br ^bb7(%40 : !u32i) loc(#loc24)
  ^bb7(%41: !u32i loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":31:16)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc24)
  ^bb8:  // pred: ^bb7
    %42 = cir.cast(integral, %41 : !u32i), !s32i loc(#loc24)
    cir.store %42, %3 : !s32i, !cir.ptr<!s32i> loc(#loc150)
    cir.br ^bb9 loc(#loc17)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc17)
  ^bb10:  // pred: ^bb9
    %43 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    %44 = cir.unary(inc, %43) : !s32i, !s32i loc(#loc27)
    cir.store %44, %1 : !s32i, !cir.ptr<!s32i> loc(#loc151)
    cir.br ^bb2 loc(#loc146)
  ^bb11:  // pred: ^bb2
    cir.br ^bb12 loc(#loc17)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc152)
  ^bb13:  // pred: ^bb12
    %45 = cir.const #cir.int<0> : !s32i loc(#loc30)
    cir.store %45, %2 : !s32i, !cir.ptr<!s32i> loc(#loc153)
    cir.br ^bb14 loc(#loc152)
  ^bb14:  // 2 preds: ^bb13, ^bb20
    %46 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc32)
    %47 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %48 = cir.cmp(lt, %46, %47) : !s32i, !cir.bool loc(#loc154)
    cir.brcond %48 ^bb15, ^bb21 loc(#loc34)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc155)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc156)
  ^bb17:  // pred: ^bb16
    %49 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc38)
    %50 = cir.unary(dec, %49) : !s32i, !s32i loc(#loc39)
    cir.store %50, %3 : !s32i, !cir.ptr<!s32i> loc(#loc157)
    %51 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc8)
    cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc141)
    %52 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc40)
    cir.call @printIntLine(%52) : (!s32i) -> () loc(#loc41)
    cir.br ^bb18 loc(#loc37)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc29)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc29)
  ^bb20:  // pred: ^bb19
    %53 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc42)
    %54 = cir.unary(inc, %53) : !s32i, !s32i loc(#loc43)
    cir.store %54, %2 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    cir.br ^bb14 loc(#loc152)
  ^bb21:  // pred: ^bb14
    cir.br ^bb22 loc(#loc29)
  ^bb22:  // pred: ^bb21
    cir.return loc(#loc6)
  } loc(#loc140)
  cir.func no_proto @CWE191_Integer_Underflow__int_rand_postdec_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc160)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc161)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    cir.return loc(#loc45)
  } loc(#loc159)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc162)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc52)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc164)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc165)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc166)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc167)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc62)
    cir.store %4, %3 : !s32i, !cir.ptr<!s32i> loc(#loc168)
    cir.br ^bb1 loc(#loc169)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<0> : !s32i loc(#loc66)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc170)
    cir.br ^bb2 loc(#loc169)
  ^bb2:  // 2 preds: ^bb1, ^bb10
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc68)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc69)
    %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc171)
    cir.brcond %8 ^bb3, ^bb11 loc(#loc70)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc172)
  ^bb4:  // pred: ^bb3
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc72)
    %11 = cir.binop(and, %9, %10) : !s32i loc(#loc72)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc72)
    cir.brcond %12 ^bb5, ^bb6 loc(#loc72)
  ^bb5:  // pred: ^bb4
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc72)
    %15 = cir.const #cir.int<30> : !s32i loc(#loc72)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc72)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc72)
    %19 = cir.const #cir.int<15> : !s32i loc(#loc72)
    %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc72)
    %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc72)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc72)
    %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc72)
    cir.br ^bb7(%24 : !u32i) loc(#loc72)
  ^bb6:  // pred: ^bb4
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc72)
    %27 = cir.const #cir.int<30> : !s32i loc(#loc72)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc72)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc72)
    %31 = cir.const #cir.int<15> : !s32i loc(#loc72)
    %32 = cir.shift(left, %30 : !u32i, %31 : !s32i) -> !u32i loc(#loc72)
    %33 = cir.binop(xor, %28, %32) : !u32i loc(#loc72)
    %34 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc72)
    %36 = cir.binop(xor, %33, %35) : !u32i loc(#loc72)
    %37 = cir.unary(minus, %36) : !u32i, !u32i loc(#loc72)
    %38 = cir.const #cir.int<1> : !s32i loc(#loc72)
    %39 = cir.cast(integral, %38 : !s32i), !u32i loc(#loc72)
    %40 = cir.binop(sub, %37, %39) : !u32i loc(#loc72)
    cir.br ^bb7(%40 : !u32i) loc(#loc72)
  ^bb7(%41: !u32i loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":58:16)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc72)
  ^bb8:  // pred: ^bb7
    %42 = cir.cast(integral, %41 : !u32i), !s32i loc(#loc72)
    cir.store %42, %3 : !s32i, !cir.ptr<!s32i> loc(#loc173)
    cir.br ^bb9 loc(#loc65)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc65)
  ^bb10:  // pred: ^bb9
    %43 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc74)
    %44 = cir.unary(inc, %43) : !s32i, !s32i loc(#loc75)
    cir.store %44, %1 : !s32i, !cir.ptr<!s32i> loc(#loc174)
    cir.br ^bb2 loc(#loc169)
  ^bb11:  // pred: ^bb2
    cir.br ^bb12 loc(#loc65)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc175)
  ^bb13:  // pred: ^bb12
    %45 = cir.const #cir.int<0> : !s32i loc(#loc78)
    cir.store %45, %2 : !s32i, !cir.ptr<!s32i> loc(#loc176)
    cir.br ^bb14 loc(#loc175)
  ^bb14:  // 2 preds: ^bb13, ^bb23
    %46 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc80)
    %47 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %48 = cir.cmp(lt, %46, %47) : !s32i, !cir.bool loc(#loc177)
    cir.brcond %48 ^bb15, ^bb24 loc(#loc82)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc178)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc179)
  ^bb17:  // pred: ^bb16
    %49 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    %50 = cir.const #cir.int<2147483647> : !s32i loc(#loc87)
    %51 = cir.unary(minus, %50) : !s32i, !s32i loc(#loc87)
    %52 = cir.const #cir.int<1> : !s32i loc(#loc87)
    %53 = cir.binop(sub, %51, %52) nsw : !s32i loc(#loc87)
    %54 = cir.cmp(gt, %49, %53) : !s32i, !cir.bool loc(#loc180)
    cir.brcond %54 ^bb18, ^bb19 loc(#loc181)
  ^bb18:  // pred: ^bb17
    %55 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc91)
    %56 = cir.unary(dec, %55) : !s32i, !s32i loc(#loc92)
    cir.store %56, %3 : !s32i, !cir.ptr<!s32i> loc(#loc182)
    %57 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc56)
    cir.store %57, %0 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    %58 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc93)
    cir.call @printIntLine(%58) : (!s32i) -> () loc(#loc94)
    cir.br ^bb20 loc(#loc89)
  ^bb19:  // pred: ^bb17
    %59 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc52)
    %60 = cir.cast(array_to_ptrdecay, %59 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%60) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    cir.br ^bb20 loc(#loc85)
  ^bb20:  // 2 preds: ^bb18, ^bb19
    cir.br ^bb21 loc(#loc85)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc77)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc77)
  ^bb23:  // pred: ^bb22
    %61 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc96)
    %62 = cir.unary(inc, %61) : !s32i, !s32i loc(#loc97)
    cir.store %62, %2 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    cir.br ^bb14 loc(#loc175)
  ^bb24:  // pred: ^bb14
    cir.br ^bb25 loc(#loc77)
  ^bb25:  // pred: ^bb24
    cir.return loc(#loc54)
  } loc(#loc163)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc185)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc186)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc187)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc188)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc107)
    cir.store %4, %3 : !s32i, !cir.ptr<!s32i> loc(#loc189)
    cir.br ^bb1 loc(#loc190)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<0> : !s32i loc(#loc111)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc191)
    cir.br ^bb2 loc(#loc190)
  ^bb2:  // 2 preds: ^bb1, ^bb6
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc114)
    %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc192)
    cir.brcond %8 ^bb3, ^bb7 loc(#loc115)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc193)
  ^bb4:  // pred: ^bb3
    %9 = cir.const #cir.int<2> : !s32i loc(#loc117)
    %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc118)
    cir.store %10, %3 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    cir.br ^bb5 loc(#loc110)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc110)
  ^bb6:  // pred: ^bb5
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc120)
    %12 = cir.unary(inc, %11) : !s32i, !s32i loc(#loc121)
    cir.store %12, %1 : !s32i, !cir.ptr<!s32i> loc(#loc195)
    cir.br ^bb2 loc(#loc190)
  ^bb7:  // pred: ^bb2
    cir.br ^bb8 loc(#loc110)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc196)
  ^bb9:  // pred: ^bb8
    %13 = cir.const #cir.int<0> : !s32i loc(#loc124)
    cir.store %13, %2 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    cir.br ^bb10 loc(#loc196)
  ^bb10:  // 2 preds: ^bb9, ^bb16
    %14 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc126)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc127)
    %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc198)
    cir.brcond %16 ^bb11, ^bb17 loc(#loc128)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc199)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc200)
  ^bb13:  // pred: ^bb12
    %17 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc132)
    %18 = cir.unary(dec, %17) : !s32i, !s32i loc(#loc133)
    cir.store %18, %3 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    %19 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc101)
    cir.store %19, %0 : !s32i, !cir.ptr<!s32i> loc(#loc185)
    %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc134)
    cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc135)
    cir.br ^bb14 loc(#loc131)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc123)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc123)
  ^bb16:  // pred: ^bb15
    %21 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc136)
    %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc137)
    cir.store %22, %2 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    cir.br ^bb10 loc(#loc196)
  ^bb17:  // pred: ^bb10
    cir.br ^bb18 loc(#loc123)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc99)
  } loc(#loc184)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__int_rand_postdec_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":42:1)
#loc7 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":38:13)
#loc8 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":38:26)
#loc9 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":24:5)
#loc10 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":24:9)
#loc11 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":24:11)
#loc12 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":25:5)
#loc13 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":25:9)
#loc14 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":27:12)
#loc15 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":27:5)
#loc16 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":28:5)
#loc17 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":32:5)
#loc18 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":28:13)
#loc19 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":28:9)
#loc20 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":28:16)
#loc21 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":28:20)
#loc22 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":28:18)
#loc23 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":29:5)
#loc25 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":31:9)
#loc26 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":28:24)
#loc27 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":28:23)
#loc28 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":33:5)
#loc29 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":41:5)
#loc30 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":33:13)
#loc31 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":33:9)
#loc32 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":33:16)
#loc33 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":33:20)
#loc34 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":33:18)
#loc35 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":34:5)
#loc36 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":35:9)
#loc37 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":40:9)
#loc38 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":37:17)
#loc39 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":37:13)
#loc40 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":39:26)
#loc41 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":39:13)
#loc42 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":33:24)
#loc43 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":33:23)
#loc44 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":99:1)
#loc45 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":103:1)
#loc46 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":101:5)
#loc47 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":101:13)
#loc48 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":102:5)
#loc49 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":102:13)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc52 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":71:23)
#loc53 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":49:1)
#loc54 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":74:1)
#loc55 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":66:13)
#loc56 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":66:26)
#loc57 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":51:5)
#loc58 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":51:9)
#loc59 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":51:11)
#loc60 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":52:5)
#loc61 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":52:9)
#loc62 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":54:12)
#loc63 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":54:5)
#loc64 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":55:5)
#loc65 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":59:5)
#loc66 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":55:13)
#loc67 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":55:9)
#loc68 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":55:16)
#loc69 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":55:20)
#loc70 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":55:18)
#loc71 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":56:5)
#loc73 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":58:9)
#loc74 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":55:24)
#loc75 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":55:23)
#loc76 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":60:5)
#loc77 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":73:5)
#loc78 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":60:13)
#loc79 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":60:9)
#loc80 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":60:16)
#loc81 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":60:20)
#loc82 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":60:18)
#loc83 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":61:5)
#loc84 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":63:9)
#loc85 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":72:9)
#loc86 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":63:13)
#loc87 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":63:20)
#loc88 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":64:9)
#loc89 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":68:9)
#loc90 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":70:9)
#loc91 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":65:17)
#loc92 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":65:13)
#loc93 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":67:26)
#loc94 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":67:13)
#loc95 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":71:13)
#loc96 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":60:24)
#loc97 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":60:23)
#loc98 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":77:1)
#loc99 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":97:1)
#loc100 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":93:13)
#loc101 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":93:26)
#loc102 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":79:5)
#loc103 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":79:9)
#loc104 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":79:11)
#loc105 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":80:5)
#loc106 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":80:9)
#loc107 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":82:12)
#loc108 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":82:5)
#loc109 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":83:5)
#loc110 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":87:5)
#loc111 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":83:13)
#loc112 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":83:9)
#loc113 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":83:16)
#loc114 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":83:20)
#loc115 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":83:18)
#loc116 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":84:5)
#loc117 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":86:17)
#loc118 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":86:16)
#loc119 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":86:9)
#loc120 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":83:24)
#loc121 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":83:23)
#loc122 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":88:5)
#loc123 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":96:5)
#loc124 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":88:13)
#loc125 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":88:9)
#loc126 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":88:16)
#loc127 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":88:20)
#loc128 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":88:18)
#loc129 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":89:5)
#loc130 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":90:9)
#loc131 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":95:9)
#loc132 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":92:17)
#loc133 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":92:13)
#loc134 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":94:26)
#loc135 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":94:13)
#loc136 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":88:24)
#loc137 = loc("CWE191_Integer_Underflow__int_rand_postdec_17.c":88:23)
#loc138 = loc(fused[#loc1, #loc2])
#loc139 = loc(fused[#loc3, #loc4])
#loc140 = loc(fused[#loc5, #loc6])
#loc141 = loc(fused[#loc7, #loc8])
#loc142 = loc(fused[#loc9, #loc10])
#loc143 = loc(fused[#loc9, #loc11])
#loc144 = loc(fused[#loc12, #loc13])
#loc145 = loc(fused[#loc15, #loc14])
#loc146 = loc(fused[#loc16, #loc17])
#loc147 = loc(fused[#loc19, #loc18])
#loc148 = loc(fused[#loc20, #loc21])
#loc149 = loc(fused[#loc23, #loc17])
#loc150 = loc(fused[#loc25, #loc24])
#loc151 = loc(fused[#loc27, #loc26])
#loc152 = loc(fused[#loc28, #loc29])
#loc153 = loc(fused[#loc31, #loc30])
#loc154 = loc(fused[#loc32, #loc33])
#loc155 = loc(fused[#loc35, #loc29])
#loc156 = loc(fused[#loc36, #loc37])
#loc157 = loc(fused[#loc39, #loc38])
#loc158 = loc(fused[#loc43, #loc42])
#loc159 = loc(fused[#loc44, #loc45])
#loc160 = loc(fused[#loc46, #loc47])
#loc161 = loc(fused[#loc48, #loc49])
#loc162 = loc(fused[#loc50, #loc51])
#loc163 = loc(fused[#loc53, #loc54])
#loc164 = loc(fused[#loc55, #loc56])
#loc165 = loc(fused[#loc57, #loc58])
#loc166 = loc(fused[#loc57, #loc59])
#loc167 = loc(fused[#loc60, #loc61])
#loc168 = loc(fused[#loc63, #loc62])
#loc169 = loc(fused[#loc64, #loc65])
#loc170 = loc(fused[#loc67, #loc66])
#loc171 = loc(fused[#loc68, #loc69])
#loc172 = loc(fused[#loc71, #loc65])
#loc173 = loc(fused[#loc73, #loc72])
#loc174 = loc(fused[#loc75, #loc74])
#loc175 = loc(fused[#loc76, #loc77])
#loc176 = loc(fused[#loc79, #loc78])
#loc177 = loc(fused[#loc80, #loc81])
#loc178 = loc(fused[#loc83, #loc77])
#loc179 = loc(fused[#loc84, #loc85])
#loc180 = loc(fused[#loc86, #loc87])
#loc181 = loc(fused[#loc88, #loc89, #loc90, #loc85])
#loc182 = loc(fused[#loc92, #loc91])
#loc183 = loc(fused[#loc97, #loc96])
#loc184 = loc(fused[#loc98, #loc99])
#loc185 = loc(fused[#loc100, #loc101])
#loc186 = loc(fused[#loc102, #loc103])
#loc187 = loc(fused[#loc102, #loc104])
#loc188 = loc(fused[#loc105, #loc106])
#loc189 = loc(fused[#loc108, #loc107])
#loc190 = loc(fused[#loc109, #loc110])
#loc191 = loc(fused[#loc112, #loc111])
#loc192 = loc(fused[#loc113, #loc114])
#loc193 = loc(fused[#loc116, #loc110])
#loc194 = loc(fused[#loc119, #loc117])
#loc195 = loc(fused[#loc121, #loc120])
#loc196 = loc(fused[#loc122, #loc123])
#loc197 = loc(fused[#loc125, #loc124])
#loc198 = loc(fused[#loc126, #loc127])
#loc199 = loc(fused[#loc129, #loc123])
#loc200 = loc(fused[#loc130, #loc131])
#loc201 = loc(fused[#loc133, #loc132])
#loc202 = loc(fused[#loc137, #loc136])
