!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":29:68)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":29:132)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":65:72)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":65:136)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":97:72)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":97:136)
#true = #cir.bool<true> : !cir.bool
!ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_structType = !cir.record<struct "_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_structType" {!s32i}>
#loc226 = loc(fused[#loc14, #loc15])
#loc253 = loc(fused[#loc82, #loc83])
#loc280 = loc(fused[#loc151, #loc152])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc220)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc221)
  cir.func private @printIntLine(!s32i) loc(#loc222)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc223)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc9)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc224)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b_badSink(%arg0: !ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_structType loc(fused[#loc14, #loc15])) extra(#fn_attr1) {
    %0 = cir.alloca !ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_structType, !cir.ptr<!ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_structType>, ["myStruct", init] {alignment = 4 : i64} loc(#loc226)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc227)
    cir.store %arg0, %0 : !ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_structType, !cir.ptr<!ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_structType> loc(#loc18)
    %2 = cir.get_member %0[0] {name = "structFirst"} : !cir.ptr<!ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_structType> -> !cir.ptr<!s32i> loc(#loc19)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc227)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc229)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc230)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc26)
      %7 = cir.const #cir.int<10> : !s32i loc(#loc27)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc27)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc231)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc232)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc26)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc233)
      cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc230)
      cir.scope {
        %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc33)
        %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc235)
        cir.if %19 {
          %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc35)
          %21 = cir.const #cir.int<1> : !s32i loc(#loc36)
          %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc37)
          cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc35)
        } loc(#loc236)
      } loc(#loc234)
      cir.scope {
        %16 = cir.const #cir.int<0> : !s32i loc(#loc40)
        cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc238)
        cir.for : cond {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc42)
          %18 = cir.const #cir.int<10> : !s32i loc(#loc43)
          %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc239)
          cir.condition(%19) loc(#loc44)
        } body {
          cir.scope {
            %17 = cir.const #cir.int<0> : !s32i loc(#loc46)
            %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc47)
            %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc48)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc49)
            cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc241)
          } loc(#loc240)
          cir.yield loc(#loc39)
        } step {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc50)
          %18 = cir.unary(inc, %17) nsw : !s32i, !s32i loc(#loc51)
          cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc242)
          cir.yield loc(#loc237)
        } loc(#loc237)
      } loc(#loc237)
      cir.scope {
        %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc54)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc55)
        %18 = cir.cmp(ge, %16, %17) : !s32i, !cir.bool loc(#loc244)
        cir.if %18 {
          %19 = cir.const #cir.int<1> : !s32i loc(#loc59)
          %20 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
          %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc61)
          %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc62)
          cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc246)
          cir.scope {
            %23 = cir.const #cir.int<0> : !s32i loc(#loc65)
            cir.store %23, %4 : !s32i, !cir.ptr<!s32i> loc(#loc248)
            cir.for : cond {
              %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc67)
              %25 = cir.const #cir.int<10> : !s32i loc(#loc68)
              %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc249)
              cir.condition(%26) loc(#loc69)
            } body {
              cir.scope {
                %24 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc71)
                %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc72)
                %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc73)
                %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc71)
                cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc74)
              } loc(#loc250)
              cir.yield loc(#loc64)
            } step {
              %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc75)
              %25 = cir.unary(inc, %24) nsw : !s32i, !s32i loc(#loc76)
              cir.store %25, %4 : !s32i, !cir.ptr<!s32i> loc(#loc251)
              cir.yield loc(#loc247)
            } loc(#loc247)
          } loc(#loc247)
        } else {
          %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc9)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc77)
        } loc(#loc245)
      } loc(#loc243)
      %13 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc78)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc79)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc79)
      cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc78)
    } loc(#loc228)
    cir.return loc(#loc13)
  } loc(#loc225)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b_goodG2BSink(%arg0: !ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_structType loc(fused[#loc82, #loc83])) extra(#fn_attr1) {
    %0 = cir.alloca !ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_structType, !cir.ptr<!ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_structType>, ["myStruct", init] {alignment = 4 : i64} loc(#loc253)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc254)
    cir.store %arg0, %0 : !ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_structType, !cir.ptr<!ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_structType> loc(#loc86)
    %2 = cir.get_member %0[0] {name = "structFirst"} : !cir.ptr<!ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_structType> -> !cir.ptr<!s32i> loc(#loc19)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc254)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc256)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc257)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc93)
      %7 = cir.const #cir.int<10> : !s32i loc(#loc94)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc94)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc258)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc259)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc93)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc260)
      cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc257)
      cir.scope {
        %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc99)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc100)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc100)
        %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc262)
        cir.if %19 {
          %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc102)
          %21 = cir.const #cir.int<1> : !s32i loc(#loc103)
          %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc104)
          cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc102)
        } loc(#loc263)
      } loc(#loc261)
      cir.scope {
        %16 = cir.const #cir.int<0> : !s32i loc(#loc107)
        cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc265)
        cir.for : cond {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc109)
          %18 = cir.const #cir.int<10> : !s32i loc(#loc110)
          %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc266)
          cir.condition(%19) loc(#loc111)
        } body {
          cir.scope {
            %17 = cir.const #cir.int<0> : !s32i loc(#loc113)
            %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc114)
            %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc115)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc116)
            cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc268)
          } loc(#loc267)
          cir.yield loc(#loc106)
        } step {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc117)
          %18 = cir.unary(inc, %17) nsw : !s32i, !s32i loc(#loc118)
          cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc269)
          cir.yield loc(#loc264)
        } loc(#loc264)
      } loc(#loc264)
      cir.scope {
        %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc121)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc122)
        %18 = cir.cmp(ge, %16, %17) : !s32i, !cir.bool loc(#loc271)
        cir.if %18 {
          %19 = cir.const #cir.int<1> : !s32i loc(#loc126)
          %20 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc127)
          %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc128)
          %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc129)
          cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc273)
          cir.scope {
            %23 = cir.const #cir.int<0> : !s32i loc(#loc132)
            cir.store %23, %4 : !s32i, !cir.ptr<!s32i> loc(#loc275)
            cir.for : cond {
              %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc134)
              %25 = cir.const #cir.int<10> : !s32i loc(#loc135)
              %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc276)
              cir.condition(%26) loc(#loc136)
            } body {
              cir.scope {
                %24 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc138)
                %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc139)
                %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc140)
                %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc138)
                cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc141)
              } loc(#loc277)
              cir.yield loc(#loc131)
            } step {
              %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc142)
              %25 = cir.unary(inc, %24) nsw : !s32i, !s32i loc(#loc143)
              cir.store %25, %4 : !s32i, !cir.ptr<!s32i> loc(#loc278)
              cir.yield loc(#loc274)
            } loc(#loc274)
          } loc(#loc274)
        } else {
          %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc144)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc144)
          cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc145)
        } loc(#loc272)
      } loc(#loc270)
      %13 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc146)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc147)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc147)
      cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc146)
    } loc(#loc255)
    cir.return loc(#loc81)
  } loc(#loc252)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc148)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b_goodB2GSink(%arg0: !ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_structType loc(fused[#loc151, #loc152])) extra(#fn_attr1) {
    %0 = cir.alloca !ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_structType, !cir.ptr<!ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_structType>, ["myStruct", init] {alignment = 4 : i64} loc(#loc280)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc281)
    cir.store %arg0, %0 : !ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_structType, !cir.ptr<!ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_structType> loc(#loc155)
    %2 = cir.get_member %0[0] {name = "structFirst"} : !cir.ptr<!ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_structType> -> !cir.ptr<!s32i> loc(#loc19)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc154)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc281)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc283)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc284)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc162)
      %7 = cir.const #cir.int<10> : !s32i loc(#loc163)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc163)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc285)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc286)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc162)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc287)
      cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc284)
      cir.scope {
        %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc168)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc169)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc169)
        %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc289)
        cir.if %19 {
          %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc171)
          %21 = cir.const #cir.int<1> : !s32i loc(#loc172)
          %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc173)
          cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc171)
        } loc(#loc290)
      } loc(#loc288)
      cir.scope {
        %16 = cir.const #cir.int<0> : !s32i loc(#loc176)
        cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc292)
        cir.for : cond {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc178)
          %18 = cir.const #cir.int<10> : !s32i loc(#loc179)
          %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc293)
          cir.condition(%19) loc(#loc180)
        } body {
          cir.scope {
            %17 = cir.const #cir.int<0> : !s32i loc(#loc182)
            %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc183)
            %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc184)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc185)
            cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc295)
          } loc(#loc294)
          cir.yield loc(#loc175)
        } step {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc186)
          %18 = cir.unary(inc, %17) nsw : !s32i, !s32i loc(#loc187)
          cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc296)
          cir.yield loc(#loc291)
        } loc(#loc291)
      } loc(#loc291)
      cir.scope {
        %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc190)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc191)
        %18 = cir.cmp(ge, %16, %17) : !s32i, !cir.bool loc(#loc298)
        %19 = cir.ternary(%18, true {
          %20 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc193)
          %21 = cir.const #cir.int<10> : !s32i loc(#loc194)
          %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc299)
          %23 = cir.ternary(%22, true {
            %24 = cir.const #true loc(#loc192)
            cir.yield %24 : !cir.bool loc(#loc192)
          }, false {
            %24 = cir.const #false loc(#loc192)
            cir.yield %24 : !cir.bool loc(#loc192)
          }) : (!cir.bool) -> !cir.bool loc(#loc192)
          cir.yield %23 : !cir.bool loc(#loc192)
        }, false {
          %20 = cir.const #false loc(#loc192)
          cir.yield %20 : !cir.bool loc(#loc192)
        }) : (!cir.bool) -> !cir.bool loc(#loc192)
        cir.if %19 {
          %20 = cir.const #cir.int<1> : !s32i loc(#loc199)
          %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc200)
          %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc201)
          %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc202)
          cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc301)
          cir.scope {
            %24 = cir.const #cir.int<0> : !s32i loc(#loc205)
            cir.store %24, %4 : !s32i, !cir.ptr<!s32i> loc(#loc303)
            cir.for : cond {
              %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc207)
              %26 = cir.const #cir.int<10> : !s32i loc(#loc208)
              %27 = cir.cmp(lt, %25, %26) : !s32i, !cir.bool loc(#loc304)
              cir.condition(%27) loc(#loc209)
            } body {
              cir.scope {
                %25 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc211)
                %26 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc212)
                %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc213)
                %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc211)
                cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc214)
              } loc(#loc305)
              cir.yield loc(#loc204)
            } step {
              %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc215)
              %26 = cir.unary(inc, %25) nsw : !s32i, !s32i loc(#loc216)
              cir.store %26, %4 : !s32i, !cir.ptr<!s32i> loc(#loc306)
              cir.yield loc(#loc302)
            } loc(#loc302)
          } loc(#loc302)
        } else {
          %20 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc148)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc148)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc217)
        } loc(#loc300)
      } loc(#loc297)
      %13 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc218)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc219)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc219)
      cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc218)
    } loc(#loc282)
    cir.return loc(#loc150)
  } loc(#loc279)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":54:23)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":29:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":58:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":31:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":31:25)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":30:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":24:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":32:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":57:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":33:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":33:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":34:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":34:54)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":34:31)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":34:38)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":34:43)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":34:53)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":35:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":35:39)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":35:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":35:23)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":35:29)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":35:30)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":35:36)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":35:35)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":37:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":40:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":37:18)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":37:14)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":37:21)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":37:25)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":37:23)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":38:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":39:25)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":39:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":39:20)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":39:21)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":37:30)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":37:29)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":43:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":55:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":43:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":43:21)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":44:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":51:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":53:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":45:28)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":45:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":45:20)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":45:24)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":47:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":50:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":47:21)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":47:17)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":47:24)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":47:28)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":47:26)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":48:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":49:30)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":49:37)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":49:38)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":49:17)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":47:33)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":47:32)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":54:13)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":56:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":56:14)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":65:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":94:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":67:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":67:25)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":66:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":68:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":93:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":69:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":69:13)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":70:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":70:54)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":70:31)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":70:38)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":70:43)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":70:53)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":71:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":71:39)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":71:13)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":71:23)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":71:29)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":71:30)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":71:36)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":71:35)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":73:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":76:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":73:18)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":73:14)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":73:21)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":73:25)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":73:23)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":74:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":75:25)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":75:13)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":75:20)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":75:21)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":73:30)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":73:29)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":79:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":91:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":79:13)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":79:21)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":80:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":87:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":89:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":81:28)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":81:13)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":81:20)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":81:24)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":83:13)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":86:13)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":83:21)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":83:17)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":83:24)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":83:28)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":83:26)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":84:13)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":85:30)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":85:37)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":85:38)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":85:17)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":83:33)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":83:32)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":90:23)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":90:13)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":92:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":92:14)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":121:23)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":97:1)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":125:1)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":99:5)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":99:25)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":98:1)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":100:5)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":124:5)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":101:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":101:13)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":102:9)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":102:54)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":102:31)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":102:38)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":102:43)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":102:53)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":103:9)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":103:39)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":103:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":103:23)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":103:29)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":103:30)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":103:36)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":103:35)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":105:9)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":108:9)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":105:18)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":105:14)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":105:21)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":105:25)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":105:23)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":106:9)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":107:25)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":107:13)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":107:20)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":107:21)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":105:30)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":105:29)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":110:9)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":122:9)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":110:13)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":110:21)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":110:23)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":110:26)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":110:34)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":110:36)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":111:9)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":118:9)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":120:9)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":112:28)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":112:13)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":112:20)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":112:24)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":114:13)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":117:13)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":114:21)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":114:17)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":114:24)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":114:28)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":114:26)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":115:13)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":116:30)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":116:37)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":116:38)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":116:17)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":114:33)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":114:32)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":121:13)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":123:9)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c":123:14)
#loc220 = loc(fused[#loc1, #loc2])
#loc221 = loc(fused[#loc3, #loc4])
#loc222 = loc(fused[#loc5, #loc6])
#loc223 = loc(fused[#loc7, #loc8])
#loc224 = loc(fused[#loc10, #loc11])
#loc225 = loc(fused[#loc12, #loc13])
#loc227 = loc(fused[#loc16, #loc17])
#loc228 = loc(fused[#loc20, #loc21])
#loc229 = loc(fused[#loc22, #loc23])
#loc230 = loc(fused[#loc24, #loc25])
#loc231 = loc(fused[#loc28, #loc29])
#loc232 = loc(fused[#loc27, #loc29])
#loc233 = loc(fused[#loc26, #loc25])
#loc234 = loc(fused[#loc30, #loc31])
#loc235 = loc(fused[#loc32, #loc33])
#loc236 = loc(fused[#loc34, #loc31])
#loc237 = loc(fused[#loc38, #loc39])
#loc238 = loc(fused[#loc41, #loc40])
#loc239 = loc(fused[#loc42, #loc43])
#loc240 = loc(fused[#loc45, #loc39])
#loc241 = loc(fused[#loc47, #loc46])
#loc242 = loc(fused[#loc51, #loc50])
#loc243 = loc(fused[#loc52, #loc53])
#loc244 = loc(fused[#loc54, #loc55])
#loc245 = loc(fused[#loc56, #loc57, #loc58, #loc53])
#loc246 = loc(fused[#loc60, #loc59])
#loc247 = loc(fused[#loc63, #loc64])
#loc248 = loc(fused[#loc66, #loc65])
#loc249 = loc(fused[#loc67, #loc68])
#loc250 = loc(fused[#loc70, #loc64])
#loc251 = loc(fused[#loc76, #loc75])
#loc252 = loc(fused[#loc80, #loc81])
#loc254 = loc(fused[#loc84, #loc85])
#loc255 = loc(fused[#loc87, #loc88])
#loc256 = loc(fused[#loc89, #loc90])
#loc257 = loc(fused[#loc91, #loc92])
#loc258 = loc(fused[#loc95, #loc96])
#loc259 = loc(fused[#loc94, #loc96])
#loc260 = loc(fused[#loc93, #loc92])
#loc261 = loc(fused[#loc97, #loc98])
#loc262 = loc(fused[#loc99, #loc100])
#loc263 = loc(fused[#loc101, #loc98])
#loc264 = loc(fused[#loc105, #loc106])
#loc265 = loc(fused[#loc108, #loc107])
#loc266 = loc(fused[#loc109, #loc110])
#loc267 = loc(fused[#loc112, #loc106])
#loc268 = loc(fused[#loc114, #loc113])
#loc269 = loc(fused[#loc118, #loc117])
#loc270 = loc(fused[#loc119, #loc120])
#loc271 = loc(fused[#loc121, #loc122])
#loc272 = loc(fused[#loc123, #loc124, #loc125, #loc120])
#loc273 = loc(fused[#loc127, #loc126])
#loc274 = loc(fused[#loc130, #loc131])
#loc275 = loc(fused[#loc133, #loc132])
#loc276 = loc(fused[#loc134, #loc135])
#loc277 = loc(fused[#loc137, #loc131])
#loc278 = loc(fused[#loc143, #loc142])
#loc279 = loc(fused[#loc149, #loc150])
#loc281 = loc(fused[#loc153, #loc154])
#loc282 = loc(fused[#loc156, #loc157])
#loc283 = loc(fused[#loc158, #loc159])
#loc284 = loc(fused[#loc160, #loc161])
#loc285 = loc(fused[#loc164, #loc165])
#loc286 = loc(fused[#loc163, #loc165])
#loc287 = loc(fused[#loc162, #loc161])
#loc288 = loc(fused[#loc166, #loc167])
#loc289 = loc(fused[#loc168, #loc169])
#loc290 = loc(fused[#loc170, #loc167])
#loc291 = loc(fused[#loc174, #loc175])
#loc292 = loc(fused[#loc177, #loc176])
#loc293 = loc(fused[#loc178, #loc179])
#loc294 = loc(fused[#loc181, #loc175])
#loc295 = loc(fused[#loc183, #loc182])
#loc296 = loc(fused[#loc187, #loc186])
#loc297 = loc(fused[#loc188, #loc189])
#loc298 = loc(fused[#loc190, #loc191])
#loc299 = loc(fused[#loc193, #loc195])
#loc300 = loc(fused[#loc196, #loc197, #loc198, #loc189])
#loc301 = loc(fused[#loc200, #loc199])
#loc302 = loc(fused[#loc203, #loc204])
#loc303 = loc(fused[#loc206, #loc205])
#loc304 = loc(fused[#loc207, #loc208])
#loc305 = loc(fused[#loc210, #loc204])
#loc306 = loc(fused[#loc216, #loc215])
