!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_for_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc93)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_for_08_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc96)
      %1 = cir.call %0() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc8)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc8)
      cir.if %2 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc99)
          cir.scope {
            %6 = cir.const #cir.int<0> : !s32i loc(#loc17)
            cir.store %6, %5 : !s32i, !cir.ptr<!s32i> loc(#loc101)
            cir.for : cond {
              %7 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc19)
              %8 = cir.const #cir.int<10> : !s32i loc(#loc20)
              %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc102)
              cir.condition(%9) loc(#loc21)
            } body {
              cir.yield loc(#loc16)
            } step {
              %7 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc22)
              %8 = cir.unary(inc, %7) nsw : !s32i, !s32i loc(#loc23)
              cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc103)
              cir.yield loc(#loc100)
            } loc(#loc100)
          } loc(#loc100)
        } loc(#loc98)
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc3)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc3)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc24)
      } loc(#loc97)
    } loc(#loc95)
    cir.return loc(#loc5)
  } loc(#loc94)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_for_08_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc105)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc27)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc106)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    cir.return loc(#loc26)
  } loc(#loc104)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc32)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc33)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc108)
    cir.return %2 : !s32i loc(#loc108)
  } loc(#loc107)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc35)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Inside the for statement\00" : !cir.array<!s8i x 25>> : !cir.array<!s8i x 25> {alignment = 1 : i64} loc(#loc36)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc37)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc111)
      %1 = cir.call %0() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc42)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc42)
      cir.if %2 {
        %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc35)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc35)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc47)
      } else {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc114)
          cir.scope {
            %6 = cir.const #cir.int<0> : !s32i loc(#loc54)
            cir.store %6, %5 : !s32i, !cir.ptr<!s32i> loc(#loc116)
            cir.for : cond {
              %7 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc56)
              %8 = cir.const #cir.int<10> : !s32i loc(#loc57)
              %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc117)
              cir.condition(%9) loc(#loc58)
            } body {
              cir.scope {
                %7 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc36)
                %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc36)
                cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc60)
              } loc(#loc118)
              cir.yield loc(#loc53)
            } step {
              %7 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc61)
              %8 = cir.unary(inc, %7) nsw : !s32i, !s32i loc(#loc62)
              cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc119)
              cir.yield loc(#loc115)
            } loc(#loc115)
          } loc(#loc115)
        } loc(#loc113)
        %3 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc37)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc37)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc63)
      } loc(#loc112)
    } loc(#loc110)
    cir.return loc(#loc39)
  } loc(#loc109)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc65)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc66)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc121)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc121)
    cir.return %2 : !s32i loc(#loc121)
  } loc(#loc120)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc124)
      %1 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc72)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc72)
      cir.if %2 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc127)
          cir.scope {
            %6 = cir.const #cir.int<0> : !s32i loc(#loc81)
            cir.store %6, %5 : !s32i, !cir.ptr<!s32i> loc(#loc129)
            cir.for : cond {
              %7 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc83)
              %8 = cir.const #cir.int<10> : !s32i loc(#loc84)
              %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc130)
              cir.condition(%9) loc(#loc85)
            } body {
              cir.scope {
                %7 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc87)
                %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc87)
                cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc88)
              } loc(#loc131)
              cir.yield loc(#loc80)
            } step {
              %7 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc89)
              %8 = cir.unary(inc, %7) nsw : !s32i, !s32i loc(#loc90)
              cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc132)
              cir.yield loc(#loc128)
            } loc(#loc128)
          } loc(#loc128)
        } loc(#loc126)
        %3 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc91)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc91)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc92)
      } loc(#loc125)
    } loc(#loc123)
    cir.return loc(#loc69)
  } loc(#loc122)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_for_08.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":44:19)
#loc4 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":33:1)
#loc5 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":46:1)
#loc6 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":35:5)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":45:5)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":35:8)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":35:26)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":36:5)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":38:9)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":43:9)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":39:13)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":39:17)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":40:13)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":42:13)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":40:22)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":40:18)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":40:25)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":40:29)
#loc21 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":40:27)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":40:34)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":40:33)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":44:9)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":91:1)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":95:1)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":93:5)
#loc28 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":93:11)
#loc29 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":94:5)
#loc30 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":94:11)
#loc31 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":21:1)
#loc32 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":24:1)
#loc33 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":23:12)
#loc34 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":23:5)
#loc35 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":58:19)
#loc36 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":67:27)
#loc37 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":70:19)
#loc38 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":53:1)
#loc39 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":72:1)
#loc40 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":55:5)
#loc41 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":71:5)
#loc42 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":55:8)
#loc43 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":55:27)
#loc44 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":56:5)
#loc45 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":59:5)
#loc46 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":61:5)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":58:9)
#loc48 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":63:9)
#loc49 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":69:9)
#loc50 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":64:13)
#loc51 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":64:17)
#loc52 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":65:13)
#loc53 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":68:13)
#loc54 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":65:22)
#loc55 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":65:18)
#loc56 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":65:25)
#loc57 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":65:29)
#loc58 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":65:27)
#loc59 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":66:13)
#loc60 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":67:17)
#loc61 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":65:34)
#loc62 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":65:33)
#loc63 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":70:9)
#loc64 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":26:1)
#loc65 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":29:1)
#loc66 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":28:12)
#loc67 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":28:5)
#loc68 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":75:1)
#loc69 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":89:1)
#loc70 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":77:5)
#loc71 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":88:5)
#loc72 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":77:8)
#loc73 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":77:26)
#loc74 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":78:5)
#loc75 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":80:9)
#loc76 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":86:9)
#loc77 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":81:13)
#loc78 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":81:17)
#loc79 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":82:13)
#loc80 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":85:13)
#loc81 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":82:22)
#loc82 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":82:18)
#loc83 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":82:25)
#loc84 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":82:29)
#loc85 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":82:27)
#loc86 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":83:13)
#loc87 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":84:27)
#loc88 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":84:17)
#loc89 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":82:34)
#loc90 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":82:33)
#loc91 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":87:19)
#loc92 = loc("CWE398_Poor_Code_Quality__empty_for_08.c":87:9)
#loc93 = loc(fused[#loc1, #loc2])
#loc94 = loc(fused[#loc4, #loc5])
#loc95 = loc(fused[#loc6, #loc7])
#loc96 = loc(fused[#loc8, #loc9])
#loc97 = loc(fused[#loc10, #loc7])
#loc98 = loc(fused[#loc11, #loc12])
#loc99 = loc(fused[#loc13, #loc14])
#loc100 = loc(fused[#loc15, #loc16])
#loc101 = loc(fused[#loc18, #loc17])
#loc102 = loc(fused[#loc19, #loc20])
#loc103 = loc(fused[#loc23, #loc22])
#loc104 = loc(fused[#loc25, #loc26])
#loc105 = loc(fused[#loc27, #loc28])
#loc106 = loc(fused[#loc29, #loc30])
#loc107 = loc(fused[#loc31, #loc32])
#loc108 = loc(fused[#loc34, #loc33])
#loc109 = loc(fused[#loc38, #loc39])
#loc110 = loc(fused[#loc40, #loc41])
#loc111 = loc(fused[#loc42, #loc43])
#loc112 = loc(fused[#loc44, #loc45, #loc46, #loc41])
#loc113 = loc(fused[#loc48, #loc49])
#loc114 = loc(fused[#loc50, #loc51])
#loc115 = loc(fused[#loc52, #loc53])
#loc116 = loc(fused[#loc55, #loc54])
#loc117 = loc(fused[#loc56, #loc57])
#loc118 = loc(fused[#loc59, #loc53])
#loc119 = loc(fused[#loc62, #loc61])
#loc120 = loc(fused[#loc64, #loc65])
#loc121 = loc(fused[#loc67, #loc66])
#loc122 = loc(fused[#loc68, #loc69])
#loc123 = loc(fused[#loc70, #loc71])
#loc124 = loc(fused[#loc72, #loc73])
#loc125 = loc(fused[#loc74, #loc71])
#loc126 = loc(fused[#loc75, #loc76])
#loc127 = loc(fused[#loc77, #loc78])
#loc128 = loc(fused[#loc79, #loc80])
#loc129 = loc(fused[#loc82, #loc81])
#loc130 = loc(fused[#loc83, #loc84])
#loc131 = loc(fused[#loc86, #loc80])
#loc132 = loc(fused[#loc90, #loc89])
