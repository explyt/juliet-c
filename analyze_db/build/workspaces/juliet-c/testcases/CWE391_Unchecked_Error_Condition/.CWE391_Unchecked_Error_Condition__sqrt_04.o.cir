!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc1)
  cir.func private @printDoubleLine(!cir.double) loc(#loc93)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_04_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc8)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc8)
      cir.if %1 {
        cir.scope {
          %2 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc98)
          %3 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc14)
          %4 = cir.const #cir.int<1> : !s32i loc(#loc15)
          %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc16)
          %6 = cir.cast(int_to_float, %5 : !s32i), !cir.double loc(#loc16)
          %7 = cir.call @sqrt(%6) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc14)
          cir.store %7, %2 : !cir.double, !cir.ptr<!cir.double> loc(#loc99)
          %8 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc19)
          cir.call @printDoubleLine(%8) : (!cir.double) -> () loc(#loc20)
        } loc(#loc97)
      } loc(#loc96)
    } loc(#loc95)
    cir.return loc(#loc5)
  } loc(#loc94)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc101)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc23)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc102)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc25)
    cir.return loc(#loc22)
  } loc(#loc100)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc103)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc29)
  cir.func private @__errno_location() -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"sqrt() failed\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc32)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc105)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<0> : !s32i loc(#loc39)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc39)
      cir.if %1 {
        %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc29)
        %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc29)
        cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc43)
      } else {
        cir.scope {
          %2 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc110)
          %3 = cir.const #cir.int<0> : !s32i loc(#loc48)
          %4 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc49)
          cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc111)
          %5 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc50)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc51)
          %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc52)
          %8 = cir.cast(int_to_float, %7 : !s32i), !cir.double loc(#loc52)
          %9 = cir.call @sqrt(%8) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc50)
          cir.store %9, %2 : !cir.double, !cir.ptr<!cir.double> loc(#loc112)
          cir.scope {
            %11 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc57)
            %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc57)
            %13 = cir.const #cir.int<33> : !s32i loc(#loc58)
            %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc114)
            cir.if %14 {
              %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc32)
              %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc32)
              cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc60)
              %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc61)
              %18 = cir.const #cir.int<1> : !s32i loc(#loc62)
              cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc61)
            } loc(#loc115)
          } loc(#loc113)
          %10 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc63)
          cir.call @printDoubleLine(%10) : (!cir.double) -> () loc(#loc64)
        } loc(#loc109)
      } loc(#loc108)
    } loc(#loc107)
    cir.return loc(#loc36)
  } loc(#loc106)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc69)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc69)
      cir.if %1 {
        cir.scope {
          %2 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc120)
          %3 = cir.const #cir.int<0> : !s32i loc(#loc75)
          %4 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc76)
          cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc121)
          %5 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc77)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc78)
          %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc79)
          %8 = cir.cast(int_to_float, %7 : !s32i), !cir.double loc(#loc79)
          %9 = cir.call @sqrt(%8) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc77)
          cir.store %9, %2 : !cir.double, !cir.ptr<!cir.double> loc(#loc122)
          cir.scope {
            %11 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc84)
            %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc84)
            %13 = cir.const #cir.int<33> : !s32i loc(#loc85)
            %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc124)
            cir.if %14 {
              %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc87)
              %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc87)
              cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc88)
              %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc89)
              %18 = cir.const #cir.int<1> : !s32i loc(#loc90)
              cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc89)
            } loc(#loc125)
          } loc(#loc123)
          %10 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc91)
          cir.call @printDoubleLine(%10) : (!cir.double) -> () loc(#loc92)
        } loc(#loc119)
      } loc(#loc118)
    } loc(#loc117)
    cir.return loc(#loc66)
  } loc(#loc116)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_04.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":38:1)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":38:41)
#loc4 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":30:1)
#loc5 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":41:1)
#loc6 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":32:5)
#loc7 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":40:5)
#loc8 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":32:8)
#loc9 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":33:5)
#loc10 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":34:9)
#loc11 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":39:9)
#loc12 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":35:13)
#loc13 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":35:20)
#loc14 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":36:36)
#loc15 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":36:50)
#loc16 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":36:49)
#loc17 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":36:13)
#loc18 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":36:51)
#loc19 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":38:29)
#loc20 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":38:13)
#loc21 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":92:1)
#loc22 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":96:1)
#loc23 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":94:5)
#loc24 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":94:11)
#loc25 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":95:5)
#loc26 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":95:11)
#loc27 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc28 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc29 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":53:19)
#loc30 = loc("/usr/include/errno.h":37:1)
#loc31 = loc("/usr/include/errno.h":37:45)
#loc32 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":64:27)
#loc33 = loc("/usr/include/stdlib.h":756:1)
#loc34 = loc("/usr/include/stdlib.h":756:70)
#loc35 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":48:1)
#loc36 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":70:1)
#loc37 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":50:5)
#loc38 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":69:5)
#loc39 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":50:8)
#loc40 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":51:5)
#loc41 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":54:5)
#loc42 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":56:5)
#loc43 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":53:9)
#loc44 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":57:9)
#loc45 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":68:9)
#loc46 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":58:13)
#loc47 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":58:20)
#loc48 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":59:21)
#loc49 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":59:13)
#loc50 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":60:36)
#loc51 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":60:50)
#loc52 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":60:49)
#loc53 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":60:13)
#loc54 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":60:51)
#loc55 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":62:13)
#loc56 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":66:13)
#loc57 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":62:17)
#loc58 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":62:26)
#loc59 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":63:13)
#loc60 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":64:17)
#loc61 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":65:17)
#loc62 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":65:22)
#loc63 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":67:29)
#loc64 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":67:13)
#loc65 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":73:1)
#loc66 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":90:1)
#loc67 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":75:5)
#loc68 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":89:5)
#loc69 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":75:8)
#loc70 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":76:5)
#loc71 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":77:9)
#loc72 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":88:9)
#loc73 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":78:13)
#loc74 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":78:20)
#loc75 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":79:21)
#loc76 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":79:13)
#loc77 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":80:36)
#loc78 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":80:50)
#loc79 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":80:49)
#loc80 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":80:13)
#loc81 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":80:51)
#loc82 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":82:13)
#loc83 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":86:13)
#loc84 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":82:17)
#loc85 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":82:26)
#loc86 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":83:13)
#loc87 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":84:27)
#loc88 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":84:17)
#loc89 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":85:17)
#loc90 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":85:22)
#loc91 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":87:29)
#loc92 = loc("CWE391_Unchecked_Error_Condition__sqrt_04.c":87:13)
#loc93 = loc(fused[#loc2, #loc3])
#loc94 = loc(fused[#loc4, #loc5])
#loc95 = loc(fused[#loc6, #loc7])
#loc96 = loc(fused[#loc9, #loc7])
#loc97 = loc(fused[#loc10, #loc11])
#loc98 = loc(fused[#loc12, #loc13])
#loc99 = loc(fused[#loc17, #loc18])
#loc100 = loc(fused[#loc21, #loc22])
#loc101 = loc(fused[#loc23, #loc24])
#loc102 = loc(fused[#loc25, #loc26])
#loc103 = loc(fused[#loc27, #loc28])
#loc104 = loc(fused[#loc30, #loc31])
#loc105 = loc(fused[#loc33, #loc34])
#loc106 = loc(fused[#loc35, #loc36])
#loc107 = loc(fused[#loc37, #loc38])
#loc108 = loc(fused[#loc40, #loc41, #loc42, #loc38])
#loc109 = loc(fused[#loc44, #loc45])
#loc110 = loc(fused[#loc46, #loc47])
#loc111 = loc(fused[#loc49, #loc48])
#loc112 = loc(fused[#loc53, #loc54])
#loc113 = loc(fused[#loc55, #loc56])
#loc114 = loc(fused[#loc57, #loc58])
#loc115 = loc(fused[#loc59, #loc56])
#loc116 = loc(fused[#loc65, #loc66])
#loc117 = loc(fused[#loc67, #loc68])
#loc118 = loc(fused[#loc70, #loc68])
#loc119 = loc(fused[#loc71, #loc72])
#loc120 = loc(fused[#loc73, #loc74])
#loc121 = loc(fused[#loc76, #loc75])
#loc122 = loc(fused[#loc80, #loc81])
#loc123 = loc(fused[#loc82, #loc83])
#loc124 = loc(fused[#loc84, #loc85])
#loc125 = loc(fused[#loc86, #loc83])
