!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__char_calloc_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc112)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc113)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc114)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"A String\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc115)
  cir.func no_proto @CWE401_Memory_Leak__char_calloc_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc117)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc14)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc118)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc18)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc18)
        cir.condition(%3) loc(#loc18)
      } do {
        cir.scope {
          %2 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc20)
          %3 = cir.const #cir.int<100> : !s32i loc(#loc21)
          %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc21)
          %5 = cir.const #cir.int<1> : !u64i loc(#loc121)
          %6 = cir.call @calloc(%4, %5) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc20)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc122)
          cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc123)
          cir.scope {
            %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
            %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc29)
            %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc29)
            %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc125)
            cir.if %17 {
              %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc31)
              %19 = cir.const #cir.int<1> : !s32i loc(#loc32)
              %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc33)
              cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc31)
            } loc(#loc126)
          } loc(#loc124)
          %8 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc34)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc35)
          %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc7)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc7)
          %12 = cir.call @strcpy(%9, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc34)
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc37)
          cir.break loc(#loc38)
        } loc(#loc120)
        cir.yield loc(#loc17)
      } loc(#loc119)
    } loc(#loc119)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc41)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc41)
        cir.condition(%3) loc(#loc41)
      } do {
        cir.scope {
          cir.break loc(#loc43)
        } loc(#loc128)
        cir.yield loc(#loc40)
      } loc(#loc127)
    } loc(#loc127)
    cir.return loc(#loc11)
  } loc(#loc116)
  cir.func no_proto @CWE401_Memory_Leak__char_calloc_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc130)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc46)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc131)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc48)
    cir.return loc(#loc45)
  } loc(#loc129)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc132)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc134)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc56)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc135)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc60)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc60)
        cir.condition(%3) loc(#loc60)
      } do {
        cir.scope {
          %2 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc62)
          %3 = cir.const #cir.int<100> : !s32i loc(#loc63)
          %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc63)
          %5 = cir.const #cir.int<1> : !u64i loc(#loc138)
          %6 = cir.call @calloc(%4, %5) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc62)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc139)
          cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc140)
          cir.scope {
            %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc70)
            %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc71)
            %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc71)
            %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc142)
            cir.if %17 {
              %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc73)
              %19 = cir.const #cir.int<1> : !s32i loc(#loc74)
              %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc75)
              cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc73)
            } loc(#loc143)
          } loc(#loc141)
          %8 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc76)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc77)
          %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc78)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc78)
          %12 = cir.call @strcpy(%9, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc76)
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc79)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc80)
          cir.break loc(#loc81)
        } loc(#loc137)
        cir.yield loc(#loc59)
      } loc(#loc136)
    } loc(#loc136)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc84)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc84)
        cir.condition(%3) loc(#loc84)
      } do {
        cir.scope {
          %2 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc86)
          %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc87)
          %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc87)
          cir.call @free(%4) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc86)
          cir.break loc(#loc88)
        } loc(#loc145)
        cir.yield loc(#loc83)
      } loc(#loc144)
    } loc(#loc144)
    cir.return loc(#loc53)
  } loc(#loc133)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc147)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc93)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc148)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc97)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc97)
        cir.condition(%3) loc(#loc97)
      } do {
        cir.scope {
          %2 = cir.const #cir.int<100> : !s32i loc(#loc99)
          %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc99)
          %4 = cir.const #cir.int<1> : !u64i loc(#loc99)
          %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc99)
          %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc99)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc99)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc99)
          cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc151)
          %9 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc101)
          %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc102)
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc103)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc103)
          %13 = cir.call @strcpy(%10, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc101)
          %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc104)
          cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc105)
          cir.break loc(#loc106)
        } loc(#loc150)
        cir.yield loc(#loc96)
      } loc(#loc149)
    } loc(#loc149)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc109)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc109)
        cir.condition(%3) loc(#loc109)
      } do {
        cir.scope {
          cir.break loc(#loc111)
        } loc(#loc153)
        cir.yield loc(#loc108)
      } loc(#loc152)
    } loc(#loc152)
    cir.return loc(#loc90)
  } loc(#loc146)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__char_calloc_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":675:1)
#loc2 = loc("/usr/include/stdlib.h":676:14)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":141:1)
#loc6 = loc("/usr/include/string.h":142:14)
#loc7 = loc("CWE401_Memory_Leak__char_calloc_16.c":34:22)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE401_Memory_Leak__char_calloc_16.c":24:1)
#loc11 = loc("CWE401_Memory_Leak__char_calloc_16.c":44:1)
#loc12 = loc("CWE401_Memory_Leak__char_calloc_16.c":26:5)
#loc13 = loc("CWE401_Memory_Leak__char_calloc_16.c":26:12)
#loc14 = loc("CWE401_Memory_Leak__char_calloc_16.c":27:12)
#loc15 = loc("CWE401_Memory_Leak__char_calloc_16.c":27:5)
#loc16 = loc("CWE401_Memory_Leak__char_calloc_16.c":28:5)
#loc17 = loc("CWE401_Memory_Leak__char_calloc_16.c":37:5)
#loc18 = loc("CWE401_Memory_Leak__char_calloc_16.c":28:11)
#loc19 = loc("CWE401_Memory_Leak__char_calloc_16.c":29:5)
#loc20 = loc("CWE401_Memory_Leak__char_calloc_16.c":31:24)
#loc21 = loc("CWE401_Memory_Leak__char_calloc_16.c":31:31)
#loc22 = loc("CWE401_Memory_Leak__char_calloc_16.c":31:36)
#loc23 = loc("CWE401_Memory_Leak__char_calloc_16.c":31:47)
#loc24 = loc("CWE401_Memory_Leak__char_calloc_16.c":31:48)
#loc25 = loc("CWE401_Memory_Leak__char_calloc_16.c":31:9)
#loc26 = loc("CWE401_Memory_Leak__char_calloc_16.c":32:9)
#loc27 = loc("CWE401_Memory_Leak__char_calloc_16.c":32:37)
#loc28 = loc("CWE401_Memory_Leak__char_calloc_16.c":32:13)
#loc29 = loc("CWE401_Memory_Leak__char_calloc_16.c":32:21)
#loc30 = loc("CWE401_Memory_Leak__char_calloc_16.c":32:27)
#loc31 = loc("CWE401_Memory_Leak__char_calloc_16.c":32:28)
#loc32 = loc("CWE401_Memory_Leak__char_calloc_16.c":32:34)
#loc33 = loc("CWE401_Memory_Leak__char_calloc_16.c":32:33)
#loc34 = loc("CWE401_Memory_Leak__char_calloc_16.c":34:9)
#loc35 = loc("CWE401_Memory_Leak__char_calloc_16.c":34:16)
#loc36 = loc("CWE401_Memory_Leak__char_calloc_16.c":35:19)
#loc37 = loc("CWE401_Memory_Leak__char_calloc_16.c":35:9)
#loc38 = loc("CWE401_Memory_Leak__char_calloc_16.c":36:9)
#loc39 = loc("CWE401_Memory_Leak__char_calloc_16.c":38:5)
#loc40 = loc("CWE401_Memory_Leak__char_calloc_16.c":43:5)
#loc41 = loc("CWE401_Memory_Leak__char_calloc_16.c":38:11)
#loc42 = loc("CWE401_Memory_Leak__char_calloc_16.c":39:5)
#loc43 = loc("CWE401_Memory_Leak__char_calloc_16.c":42:9)
#loc44 = loc("CWE401_Memory_Leak__char_calloc_16.c":95:1)
#loc45 = loc("CWE401_Memory_Leak__char_calloc_16.c":99:1)
#loc46 = loc("CWE401_Memory_Leak__char_calloc_16.c":97:5)
#loc47 = loc("CWE401_Memory_Leak__char_calloc_16.c":97:13)
#loc48 = loc("CWE401_Memory_Leak__char_calloc_16.c":98:5)
#loc49 = loc("CWE401_Memory_Leak__char_calloc_16.c":98:13)
#loc50 = loc("/usr/include/stdlib.h":687:1)
#loc51 = loc("/usr/include/stdlib.h":687:32)
#loc52 = loc("CWE401_Memory_Leak__char_calloc_16.c":51:1)
#loc53 = loc("CWE401_Memory_Leak__char_calloc_16.c":71:1)
#loc54 = loc("CWE401_Memory_Leak__char_calloc_16.c":53:5)
#loc55 = loc("CWE401_Memory_Leak__char_calloc_16.c":53:12)
#loc56 = loc("CWE401_Memory_Leak__char_calloc_16.c":54:12)
#loc57 = loc("CWE401_Memory_Leak__char_calloc_16.c":54:5)
#loc58 = loc("CWE401_Memory_Leak__char_calloc_16.c":55:5)
#loc59 = loc("CWE401_Memory_Leak__char_calloc_16.c":64:5)
#loc60 = loc("CWE401_Memory_Leak__char_calloc_16.c":55:11)
#loc61 = loc("CWE401_Memory_Leak__char_calloc_16.c":56:5)
#loc62 = loc("CWE401_Memory_Leak__char_calloc_16.c":58:24)
#loc63 = loc("CWE401_Memory_Leak__char_calloc_16.c":58:31)
#loc64 = loc("CWE401_Memory_Leak__char_calloc_16.c":58:36)
#loc65 = loc("CWE401_Memory_Leak__char_calloc_16.c":58:47)
#loc66 = loc("CWE401_Memory_Leak__char_calloc_16.c":58:48)
#loc67 = loc("CWE401_Memory_Leak__char_calloc_16.c":58:9)
#loc68 = loc("CWE401_Memory_Leak__char_calloc_16.c":59:9)
#loc69 = loc("CWE401_Memory_Leak__char_calloc_16.c":59:37)
#loc70 = loc("CWE401_Memory_Leak__char_calloc_16.c":59:13)
#loc71 = loc("CWE401_Memory_Leak__char_calloc_16.c":59:21)
#loc72 = loc("CWE401_Memory_Leak__char_calloc_16.c":59:27)
#loc73 = loc("CWE401_Memory_Leak__char_calloc_16.c":59:28)
#loc74 = loc("CWE401_Memory_Leak__char_calloc_16.c":59:34)
#loc75 = loc("CWE401_Memory_Leak__char_calloc_16.c":59:33)
#loc76 = loc("CWE401_Memory_Leak__char_calloc_16.c":61:9)
#loc77 = loc("CWE401_Memory_Leak__char_calloc_16.c":61:16)
#loc78 = loc("CWE401_Memory_Leak__char_calloc_16.c":61:22)
#loc79 = loc("CWE401_Memory_Leak__char_calloc_16.c":62:19)
#loc80 = loc("CWE401_Memory_Leak__char_calloc_16.c":62:9)
#loc81 = loc("CWE401_Memory_Leak__char_calloc_16.c":63:9)
#loc82 = loc("CWE401_Memory_Leak__char_calloc_16.c":65:5)
#loc83 = loc("CWE401_Memory_Leak__char_calloc_16.c":70:5)
#loc84 = loc("CWE401_Memory_Leak__char_calloc_16.c":65:11)
#loc85 = loc("CWE401_Memory_Leak__char_calloc_16.c":66:5)
#loc86 = loc("CWE401_Memory_Leak__char_calloc_16.c":68:9)
#loc87 = loc("CWE401_Memory_Leak__char_calloc_16.c":68:14)
#loc88 = loc("CWE401_Memory_Leak__char_calloc_16.c":69:9)
#loc89 = loc("CWE401_Memory_Leak__char_calloc_16.c":74:1)
#loc90 = loc("CWE401_Memory_Leak__char_calloc_16.c":93:1)
#loc91 = loc("CWE401_Memory_Leak__char_calloc_16.c":76:5)
#loc92 = loc("CWE401_Memory_Leak__char_calloc_16.c":76:12)
#loc93 = loc("CWE401_Memory_Leak__char_calloc_16.c":77:12)
#loc94 = loc("CWE401_Memory_Leak__char_calloc_16.c":77:5)
#loc95 = loc("CWE401_Memory_Leak__char_calloc_16.c":78:5)
#loc96 = loc("CWE401_Memory_Leak__char_calloc_16.c":86:5)
#loc97 = loc("CWE401_Memory_Leak__char_calloc_16.c":78:11)
#loc98 = loc("CWE401_Memory_Leak__char_calloc_16.c":79:5)
#loc99 = loc("CWE401_Memory_Leak__char_calloc_16.c":81:24)
#loc100 = loc("CWE401_Memory_Leak__char_calloc_16.c":81:9)
#loc101 = loc("CWE401_Memory_Leak__char_calloc_16.c":83:9)
#loc102 = loc("CWE401_Memory_Leak__char_calloc_16.c":83:16)
#loc103 = loc("CWE401_Memory_Leak__char_calloc_16.c":83:22)
#loc104 = loc("CWE401_Memory_Leak__char_calloc_16.c":84:19)
#loc105 = loc("CWE401_Memory_Leak__char_calloc_16.c":84:9)
#loc106 = loc("CWE401_Memory_Leak__char_calloc_16.c":85:9)
#loc107 = loc("CWE401_Memory_Leak__char_calloc_16.c":87:5)
#loc108 = loc("CWE401_Memory_Leak__char_calloc_16.c":92:5)
#loc109 = loc("CWE401_Memory_Leak__char_calloc_16.c":87:11)
#loc110 = loc("CWE401_Memory_Leak__char_calloc_16.c":88:5)
#loc111 = loc("CWE401_Memory_Leak__char_calloc_16.c":91:9)
#loc112 = loc(fused[#loc1, #loc2])
#loc113 = loc(fused[#loc3, #loc4])
#loc114 = loc(fused[#loc5, #loc6])
#loc115 = loc(fused[#loc8, #loc9])
#loc116 = loc(fused[#loc10, #loc11])
#loc117 = loc(fused[#loc12, #loc13])
#loc118 = loc(fused[#loc15, #loc14])
#loc119 = loc(fused[#loc16, #loc17])
#loc120 = loc(fused[#loc19, #loc17])
#loc121 = loc(fused[#loc22, #loc23])
#loc122 = loc(fused[#loc20, #loc24])
#loc123 = loc(fused[#loc25, #loc24])
#loc124 = loc(fused[#loc26, #loc27])
#loc125 = loc(fused[#loc28, #loc29])
#loc126 = loc(fused[#loc30, #loc27])
#loc127 = loc(fused[#loc39, #loc40])
#loc128 = loc(fused[#loc42, #loc40])
#loc129 = loc(fused[#loc44, #loc45])
#loc130 = loc(fused[#loc46, #loc47])
#loc131 = loc(fused[#loc48, #loc49])
#loc132 = loc(fused[#loc50, #loc51])
#loc133 = loc(fused[#loc52, #loc53])
#loc134 = loc(fused[#loc54, #loc55])
#loc135 = loc(fused[#loc57, #loc56])
#loc136 = loc(fused[#loc58, #loc59])
#loc137 = loc(fused[#loc61, #loc59])
#loc138 = loc(fused[#loc64, #loc65])
#loc139 = loc(fused[#loc62, #loc66])
#loc140 = loc(fused[#loc67, #loc66])
#loc141 = loc(fused[#loc68, #loc69])
#loc142 = loc(fused[#loc70, #loc71])
#loc143 = loc(fused[#loc72, #loc69])
#loc144 = loc(fused[#loc82, #loc83])
#loc145 = loc(fused[#loc85, #loc83])
#loc146 = loc(fused[#loc89, #loc90])
#loc147 = loc(fused[#loc91, #loc92])
#loc148 = loc(fused[#loc94, #loc93])
#loc149 = loc(fused[#loc95, #loc96])
#loc150 = loc(fused[#loc98, #loc96])
#loc151 = loc(fused[#loc100, #loc99])
#loc152 = loc(fused[#loc107, #loc108])
#loc153 = loc(fused[#loc110, #loc108])
