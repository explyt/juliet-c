!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":304:10)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":304:14)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":304:20)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":304:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc576 = loc(fused[#loc214, #loc215])
#loc577 = loc(fused[#loc216, #loc217])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc492)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc493)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc494)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc495)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc496)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc497)
  cir.func private @close(!s32i) -> !s32i loc(#loc498)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc499)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc500)
  cir.func private @printIntLine(!s32i) loc(#loc501)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc502)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc24)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc503)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc505)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc506)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc507)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc506)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc507)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc35)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc36)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc508)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc510)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc41)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc42)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc510)
      cir.scope {
        %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc512)
        %11 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc513)
        %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc514)
        %13 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc515)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc50)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc50)
        cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc514)
        cir.scope {
          cir.do {
            %16 = cir.const #cir.int<2> : !s32i loc(#loc55)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc56)
            %18 = cir.const #cir.int<6> : !s32i loc(#loc57)
            %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc58)
            cir.store %19, %12 : !s32i, !cir.ptr<!s32i> loc(#loc517)
            cir.scope {
              %58 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc63)
              %59 = cir.const #cir.int<1> : !s32i loc(#loc64)
              %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc64)
              %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc519)
              cir.if %61 {
                cir.break loc(#loc66)
              } loc(#loc520)
            } loc(#loc518)
            %20 = cir.cast(bitcast, %11 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc521)
            %21 = cir.const #cir.int<0> : !s32i loc(#loc69)
            %22 = cir.const #cir.int<16> : !u64i loc(#loc522)
            cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc523)
            %23 = cir.const #cir.int<2> : !s32i loc(#loc74)
            %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc74)
            %25 = cir.get_member %11[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
            cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc524)
            %26 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
            %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
            %28 = cir.call @inet_addr(%27) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc77)
            %29 = cir.get_member %11[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc78)
            %30 = cir.get_member %29[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc79)
            cir.store %28, %30 : !u32i, !cir.ptr<!u32i> loc(#loc525)
            %31 = cir.const #cir.int<27015> : !s32i loc(#loc82)
            %32 = cir.cast(integral, %31 : !s32i), !u16i loc(#loc82)
            %33 = cir.call @htons(%32) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc83)
            %34 = cir.get_member %11[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc84)
            cir.store %33, %34 : !u16i, !cir.ptr<!u16i> loc(#loc526)
            cir.scope {
              %58 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc89)
              %59 = cir.cast(bitcast, %11 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc528)
              %60 = cir.const #cir.int<16> : !u64i loc(#loc529)
              %61 = cir.cast(integral, %60 : !u64i), !u32i loc(#loc529)
              %62 = cir.call @connect(%58, %59, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc94)
              %63 = cir.const #cir.int<1> : !s32i loc(#loc95)
              %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc95)
              %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc530)
              cir.if %65 {
                cir.break loc(#loc97)
              } loc(#loc531)
            } loc(#loc527)
            %35 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc98)
            %36 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc99)
            %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc99)
            %38 = cir.const #cir.int<3> : !s32i loc(#loc100)
            %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc100)
            %40 = cir.const #cir.int<4> : !u64i loc(#loc100)
            %41 = cir.binop(mul, %39, %40) : !u64i loc(#loc100)
            %42 = cir.const #cir.int<2> : !s32i loc(#loc100)
            %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc100)
            %44 = cir.binop(add, %41, %43) : !u64i loc(#loc100)
            %45 = cir.const #cir.int<1> : !s32i loc(#loc101)
            %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc101)
            %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc532)
            %48 = cir.const #cir.int<0> : !s32i loc(#loc102)
            %49 = cir.call @recv(%35, %37, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc103)
            %50 = cir.cast(integral, %49 : !s64i), !s32i loc(#loc103)
            cir.store %50, %10 : !s32i, !cir.ptr<!s32i> loc(#loc533)
            cir.scope {
              %58 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc108)
              %59 = cir.const #cir.int<1> : !s32i loc(#loc109)
              %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc109)
              %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc535)
              %62 = cir.ternary(%61, true {
                %63 = cir.const #true loc(#loc110)
                cir.yield %63 : !cir.bool loc(#loc110)
              }, false {
                %63 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc111)
                %64 = cir.const #cir.int<0> : !s32i loc(#loc112)
                %65 = cir.cmp(eq, %63, %64) : !s32i, !cir.bool loc(#loc536)
                %66 = cir.ternary(%65, true {
                  %67 = cir.const #true loc(#loc110)
                  cir.yield %67 : !cir.bool loc(#loc110)
                }, false {
                  %67 = cir.const #false loc(#loc110)
                  cir.yield %67 : !cir.bool loc(#loc110)
                }) : (!cir.bool) -> !cir.bool loc(#loc110)
                cir.yield %66 : !cir.bool loc(#loc110)
              }) : (!cir.bool) -> !cir.bool loc(#loc110)
              cir.if %62 {
                cir.break loc(#loc114)
              } loc(#loc537)
            } loc(#loc534)
            %51 = cir.const #cir.int<0> : !s32i loc(#loc115)
            %52 = cir.cast(integral, %51 : !s32i), !s8i loc(#loc115)
            %53 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc116)
            %54 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc117)
            %55 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %53 : !s32i), !cir.ptr<!s8i> loc(#loc117)
            cir.store %52, %55 : !s8i, !cir.ptr<!s8i> loc(#loc538)
            %56 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc118)
            %57 = cir.call @atoi(%56) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc119)
            cir.store %57, %5 : !s32i, !cir.ptr<!s32i> loc(#loc539)
            cir.yield loc(#loc54)
          } while {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc122)
            %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc122)
            cir.condition(%17) loc(#loc122)
          } loc(#loc516)
        } loc(#loc516)
        cir.scope {
          %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc125)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc126)
          %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc126)
          %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc541)
          cir.if %19 {
            %20 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc128)
            %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc129)
          } loc(#loc542)
        } loc(#loc540)
      } loc(#loc511)
      %8 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc130)
      %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc131)
      cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc543)
    } loc(#loc509)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc545)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc136)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc137)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc545)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc547)
        %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc548)
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc144)
        %11 = cir.const #cir.int<10> : !s32i loc(#loc145)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc145)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc549)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc550)
        %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc144)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc551)
        cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc548)
        cir.scope {
          %20 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc150)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc151)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc151)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !cir.bool loc(#loc553)
          cir.if %23 {
            %24 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc153)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc154)
            %26 = cir.unary(minus, %25) : !s32i, !s32i loc(#loc155)
            cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc153)
          } loc(#loc554)
        } loc(#loc552)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc158)
          cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc556)
          cir.for : cond {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc160)
            %22 = cir.const #cir.int<10> : !s32i loc(#loc161)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc557)
            cir.condition(%23) loc(#loc162)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc164)
              %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc165)
              %23 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc166)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc167)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc559)
            } loc(#loc558)
            cir.yield loc(#loc157)
          } step {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc168)
            %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc169)
            cir.store %22, %8 : !s32i, !cir.ptr<!s32i> loc(#loc560)
            cir.yield loc(#loc555)
          } loc(#loc555)
        } loc(#loc555)
        cir.scope {
          %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc172)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc173)
          %22 = cir.cmp(ge, %20, %21) : !s32i, !cir.bool loc(#loc562)
          cir.if %22 {
            %23 = cir.const #cir.int<1> : !s32i loc(#loc177)
            %24 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc178)
            %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc179)
            %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc180)
            cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc564)
            cir.scope {
              %27 = cir.const #cir.int<0> : !s32i loc(#loc183)
              cir.store %27, %8 : !s32i, !cir.ptr<!s32i> loc(#loc566)
              cir.for : cond {
                %28 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc185)
                %29 = cir.const #cir.int<10> : !s32i loc(#loc186)
                %30 = cir.cmp(lt, %28, %29) : !s32i, !cir.bool loc(#loc567)
                cir.condition(%30) loc(#loc187)
              } body {
                cir.scope {
                  %28 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc189)
                  %29 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc190)
                  %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc191)
                  %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc189)
                  cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc192)
                } loc(#loc568)
                cir.yield loc(#loc182)
              } step {
                %28 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc193)
                %29 = cir.unary(inc, %28) : !s32i, !s32i loc(#loc194)
                cir.store %29, %8 : !s32i, !cir.ptr<!s32i> loc(#loc569)
                cir.yield loc(#loc565)
              } loc(#loc565)
            } loc(#loc565)
          } else {
            %23 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc24)
            %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc24)
            cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc195)
          } loc(#loc563)
        } loc(#loc561)
        %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc196)
        %18 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc197)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc197)
        cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc196)
      } loc(#loc546)
    } loc(#loc544)
    cir.return loc(#loc28)
  } loc(#loc504)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc571)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc200)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc572)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc202)
    cir.return loc(#loc199)
  } loc(#loc570)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc573)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc574)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc208)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc209)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc210)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc211)
  cir.func @main(%arg0: !s32i loc(fused[#loc214, #loc215]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc216, #loc217])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc576)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc577)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc213)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc218)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc218)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc219)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc220)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc220)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc221)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc208)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc208)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc222)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32_good : !cir.ptr<!cir.func<!void ()>> loc(#loc578)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32_good() : () -> () loc(#loc223)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc209)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc209)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc225)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc210)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc210)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc226)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc579)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32_bad() : () -> () loc(#loc227)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc211)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc211)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc229)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc230)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc580)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc580)
    cir.return %17 : !s32i loc(#loc580)
  } loc(#loc575)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc582)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc583)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc584)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc583)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc584)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc240)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc241)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc585)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc587)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc246)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc247)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc587)
      %8 = cir.const #cir.int<7> : !s32i loc(#loc248)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc588)
      %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc250)
      %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc251)
      cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc589)
    } loc(#loc586)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc591)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc256)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc257)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc591)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc593)
        %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc594)
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc264)
        %11 = cir.const #cir.int<10> : !s32i loc(#loc265)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc265)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc595)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc596)
        %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc264)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc597)
        cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc594)
        cir.scope {
          %20 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc270)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc271)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc271)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !cir.bool loc(#loc599)
          cir.if %23 {
            %24 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc273)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc274)
            %26 = cir.unary(minus, %25) : !s32i, !s32i loc(#loc275)
            cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc273)
          } loc(#loc600)
        } loc(#loc598)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc278)
          cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc602)
          cir.for : cond {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc280)
            %22 = cir.const #cir.int<10> : !s32i loc(#loc281)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc603)
            cir.condition(%23) loc(#loc282)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc284)
              %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc285)
              %23 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc286)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc287)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc605)
            } loc(#loc604)
            cir.yield loc(#loc277)
          } step {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc288)
            %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc289)
            cir.store %22, %8 : !s32i, !cir.ptr<!s32i> loc(#loc606)
            cir.yield loc(#loc601)
          } loc(#loc601)
        } loc(#loc601)
        cir.scope {
          %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc292)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc293)
          %22 = cir.cmp(ge, %20, %21) : !s32i, !cir.bool loc(#loc608)
          cir.if %22 {
            %23 = cir.const #cir.int<1> : !s32i loc(#loc297)
            %24 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc298)
            %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc299)
            %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc300)
            cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc610)
            cir.scope {
              %27 = cir.const #cir.int<0> : !s32i loc(#loc303)
              cir.store %27, %8 : !s32i, !cir.ptr<!s32i> loc(#loc612)
              cir.for : cond {
                %28 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc305)
                %29 = cir.const #cir.int<10> : !s32i loc(#loc306)
                %30 = cir.cmp(lt, %28, %29) : !s32i, !cir.bool loc(#loc613)
                cir.condition(%30) loc(#loc307)
              } body {
                cir.scope {
                  %28 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc309)
                  %29 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc310)
                  %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc311)
                  %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc309)
                  cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc312)
                } loc(#loc614)
                cir.yield loc(#loc302)
              } step {
                %28 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc313)
                %29 = cir.unary(inc, %28) : !s32i, !s32i loc(#loc314)
                cir.store %29, %8 : !s32i, !cir.ptr<!s32i> loc(#loc615)
                cir.yield loc(#loc611)
              } loc(#loc611)
            } loc(#loc611)
          } else {
            %23 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc315)
            %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc315)
            cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc316)
          } loc(#loc609)
        } loc(#loc607)
        %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc317)
        %18 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc318)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc318)
        cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc317)
      } loc(#loc592)
    } loc(#loc590)
    cir.return loc(#loc233)
  } loc(#loc581)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc319)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc617)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc618)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc619)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc618)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc619)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc328)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc329)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc620)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc622)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc334)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc335)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc622)
      cir.scope {
        %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc624)
        %11 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc625)
        %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc626)
        %13 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc627)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc343)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc343)
        cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc626)
        cir.scope {
          cir.do {
            %16 = cir.const #cir.int<2> : !s32i loc(#loc348)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc349)
            %18 = cir.const #cir.int<6> : !s32i loc(#loc350)
            %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc351)
            cir.store %19, %12 : !s32i, !cir.ptr<!s32i> loc(#loc629)
            cir.scope {
              %58 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc356)
              %59 = cir.const #cir.int<1> : !s32i loc(#loc357)
              %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc357)
              %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc631)
              cir.if %61 {
                cir.break loc(#loc359)
              } loc(#loc632)
            } loc(#loc630)
            %20 = cir.cast(bitcast, %11 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc633)
            %21 = cir.const #cir.int<0> : !s32i loc(#loc362)
            %22 = cir.const #cir.int<16> : !u64i loc(#loc634)
            cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc635)
            %23 = cir.const #cir.int<2> : !s32i loc(#loc367)
            %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc367)
            %25 = cir.get_member %11[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
            cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc636)
            %26 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc369)
            %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc369)
            %28 = cir.call @inet_addr(%27) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc370)
            %29 = cir.get_member %11[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc78)
            %30 = cir.get_member %29[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc79)
            cir.store %28, %30 : !u32i, !cir.ptr<!u32i> loc(#loc637)
            %31 = cir.const #cir.int<27015> : !s32i loc(#loc373)
            %32 = cir.cast(integral, %31 : !s32i), !u16i loc(#loc373)
            %33 = cir.call @htons(%32) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc374)
            %34 = cir.get_member %11[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc84)
            cir.store %33, %34 : !u16i, !cir.ptr<!u16i> loc(#loc638)
            cir.scope {
              %58 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc379)
              %59 = cir.cast(bitcast, %11 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc640)
              %60 = cir.const #cir.int<16> : !u64i loc(#loc641)
              %61 = cir.cast(integral, %60 : !u64i), !u32i loc(#loc641)
              %62 = cir.call @connect(%58, %59, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc384)
              %63 = cir.const #cir.int<1> : !s32i loc(#loc385)
              %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc385)
              %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc642)
              cir.if %65 {
                cir.break loc(#loc387)
              } loc(#loc643)
            } loc(#loc639)
            %35 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc388)
            %36 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc389)
            %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc389)
            %38 = cir.const #cir.int<3> : !s32i loc(#loc390)
            %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc390)
            %40 = cir.const #cir.int<4> : !u64i loc(#loc390)
            %41 = cir.binop(mul, %39, %40) : !u64i loc(#loc390)
            %42 = cir.const #cir.int<2> : !s32i loc(#loc390)
            %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc390)
            %44 = cir.binop(add, %41, %43) : !u64i loc(#loc390)
            %45 = cir.const #cir.int<1> : !s32i loc(#loc391)
            %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc391)
            %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc644)
            %48 = cir.const #cir.int<0> : !s32i loc(#loc392)
            %49 = cir.call @recv(%35, %37, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc393)
            %50 = cir.cast(integral, %49 : !s64i), !s32i loc(#loc393)
            cir.store %50, %10 : !s32i, !cir.ptr<!s32i> loc(#loc645)
            cir.scope {
              %58 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc398)
              %59 = cir.const #cir.int<1> : !s32i loc(#loc399)
              %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc399)
              %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc647)
              %62 = cir.ternary(%61, true {
                %63 = cir.const #true loc(#loc400)
                cir.yield %63 : !cir.bool loc(#loc400)
              }, false {
                %63 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc401)
                %64 = cir.const #cir.int<0> : !s32i loc(#loc402)
                %65 = cir.cmp(eq, %63, %64) : !s32i, !cir.bool loc(#loc648)
                %66 = cir.ternary(%65, true {
                  %67 = cir.const #true loc(#loc400)
                  cir.yield %67 : !cir.bool loc(#loc400)
                }, false {
                  %67 = cir.const #false loc(#loc400)
                  cir.yield %67 : !cir.bool loc(#loc400)
                }) : (!cir.bool) -> !cir.bool loc(#loc400)
                cir.yield %66 : !cir.bool loc(#loc400)
              }) : (!cir.bool) -> !cir.bool loc(#loc400)
              cir.if %62 {
                cir.break loc(#loc404)
              } loc(#loc649)
            } loc(#loc646)
            %51 = cir.const #cir.int<0> : !s32i loc(#loc405)
            %52 = cir.cast(integral, %51 : !s32i), !s8i loc(#loc405)
            %53 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc406)
            %54 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc407)
            %55 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %53 : !s32i), !cir.ptr<!s8i> loc(#loc407)
            cir.store %52, %55 : !s8i, !cir.ptr<!s8i> loc(#loc650)
            %56 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc408)
            %57 = cir.call @atoi(%56) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc409)
            cir.store %57, %5 : !s32i, !cir.ptr<!s32i> loc(#loc651)
            cir.yield loc(#loc347)
          } while {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc412)
            %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc412)
            cir.condition(%17) loc(#loc412)
          } loc(#loc628)
        } loc(#loc628)
        cir.scope {
          %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc415)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc416)
          %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc416)
          %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc653)
          cir.if %19 {
            %20 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc418)
            %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc419)
          } loc(#loc654)
        } loc(#loc652)
      } loc(#loc623)
      %8 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc420)
      %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc421)
      cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc655)
    } loc(#loc621)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc657)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc426)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc427)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc657)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc659)
        %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc660)
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc434)
        %11 = cir.const #cir.int<10> : !s32i loc(#loc435)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc435)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc661)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc662)
        %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc434)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc663)
        cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc660)
        cir.scope {
          %20 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc440)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc441)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc441)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !cir.bool loc(#loc665)
          cir.if %23 {
            %24 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc443)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc444)
            %26 = cir.unary(minus, %25) : !s32i, !s32i loc(#loc445)
            cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc443)
          } loc(#loc666)
        } loc(#loc664)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc448)
          cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc668)
          cir.for : cond {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc450)
            %22 = cir.const #cir.int<10> : !s32i loc(#loc451)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc669)
            cir.condition(%23) loc(#loc452)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc454)
              %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc455)
              %23 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc456)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc457)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc671)
            } loc(#loc670)
            cir.yield loc(#loc447)
          } step {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc458)
            %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc459)
            cir.store %22, %8 : !s32i, !cir.ptr<!s32i> loc(#loc672)
            cir.yield loc(#loc667)
          } loc(#loc667)
        } loc(#loc667)
        cir.scope {
          %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc462)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc463)
          %22 = cir.cmp(ge, %20, %21) : !s32i, !cir.bool loc(#loc674)
          %23 = cir.ternary(%22, true {
            %24 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc465)
            %25 = cir.const #cir.int<10> : !s32i loc(#loc466)
            %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc675)
            %27 = cir.ternary(%26, true {
              %28 = cir.const #true loc(#loc464)
              cir.yield %28 : !cir.bool loc(#loc464)
            }, false {
              %28 = cir.const #false loc(#loc464)
              cir.yield %28 : !cir.bool loc(#loc464)
            }) : (!cir.bool) -> !cir.bool loc(#loc464)
            cir.yield %27 : !cir.bool loc(#loc464)
          }, false {
            %24 = cir.const #false loc(#loc464)
            cir.yield %24 : !cir.bool loc(#loc464)
          }) : (!cir.bool) -> !cir.bool loc(#loc464)
          cir.if %23 {
            %24 = cir.const #cir.int<1> : !s32i loc(#loc471)
            %25 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc472)
            %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc473)
            %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc474)
            cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc677)
            cir.scope {
              %28 = cir.const #cir.int<0> : !s32i loc(#loc477)
              cir.store %28, %8 : !s32i, !cir.ptr<!s32i> loc(#loc679)
              cir.for : cond {
                %29 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc479)
                %30 = cir.const #cir.int<10> : !s32i loc(#loc480)
                %31 = cir.cmp(lt, %29, %30) : !s32i, !cir.bool loc(#loc680)
                cir.condition(%31) loc(#loc481)
              } body {
                cir.scope {
                  %29 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc483)
                  %30 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc484)
                  %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc485)
                  %32 = cir.load %31 : !cir.ptr<!s32i>, !s32i loc(#loc483)
                  cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc486)
                } loc(#loc681)
                cir.yield loc(#loc476)
              } step {
                %29 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc487)
                %30 = cir.unary(inc, %29) : !s32i, !s32i loc(#loc488)
                cir.store %30, %8 : !s32i, !cir.ptr<!s32i> loc(#loc682)
                cir.yield loc(#loc678)
              } loc(#loc678)
            } loc(#loc678)
          } else {
            %24 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc319)
            %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc319)
            cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc489)
          } loc(#loc676)
        } loc(#loc673)
        %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc490)
        %18 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc491)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc491)
        cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc490)
      } loc(#loc658)
    } loc(#loc656)
    cir.return loc(#loc321)
  } loc(#loc616)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":79:53)
#loc6 = loc("/usr/include/netinet/in.h":404:1)
#loc7 = loc("/usr/include/netinet/in.h":405:40)
#loc8 = loc("/usr/include/sys/socket.h":126:1)
#loc9 = loc("/usr/include/sys/socket.h":126:75)
#loc10 = loc("/usr/include/sys/socket.h":145:1)
#loc11 = loc("/usr/include/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("/usr/include/stdlib.h":672:1)
#loc17 = loc("/usr/include/stdlib.h":672:45)
#loc18 = loc("/usr/include/stdlib.h":756:1)
#loc19 = loc("/usr/include/stdlib.h":756:70)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":135:27)
#loc25 = loc("/usr/include/stdlib.h":687:1)
#loc26 = loc("/usr/include/stdlib.h":687:32)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":44:1)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":140:1)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":46:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":46:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":47:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":47:22)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":48:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":48:22)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":50:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":50:12)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":50:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":51:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":110:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":52:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":52:21)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":52:20)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":53:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":108:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":58:13)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":58:17)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":59:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":59:32)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":60:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":60:36)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":61:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":61:45)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":62:13)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":97:21)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":72:40)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":72:49)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":72:62)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":72:33)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":72:17)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":72:73)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":73:17)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":76:17)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":73:21)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":73:38)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":74:17)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":75:21)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":77:24)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":77:25)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":77:34)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":77:37)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":77:51)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":77:17)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":77:52)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":78:38)
#loc75 = loc("/usr/include/netinet/in.h":249:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":78:17)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":79:43)
#loc78 = loc("/usr/include/netinet/in.h":251:20)
#loc79 = loc("/usr/include/netinet/in.h":33:15)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":79:17)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":79:63)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":80:42)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":80:36)
#loc84 = loc("/usr/include/netinet/in.h":250:15)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":80:17)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":80:50)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":81:17)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":84:17)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":81:29)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":81:62)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":81:63)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":81:72)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":81:86)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":81:21)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":81:92)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":82:17)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":83:21)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":87:35)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":87:50)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":87:63)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":87:81)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":87:84)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":87:30)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":87:17)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":87:85)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":88:17)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":91:17)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":88:21)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":88:35)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":88:48)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":88:51)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":88:65)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":89:17)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":90:21)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":93:43)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":93:29)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":93:17)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":95:29)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":95:24)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":95:17)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":95:40)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":97:20)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":98:13)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":101:13)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":98:17)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":98:34)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":99:13)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":100:30)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":100:17)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":109:21)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":109:10)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":109:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":111:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":139:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":112:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":112:21)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":112:20)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":113:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":138:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":114:13)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":114:17)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":115:13)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":115:58)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":115:35)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":115:42)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":115:47)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":115:57)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":116:13)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":116:43)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":116:17)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":116:27)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":116:33)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":116:34)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":116:40)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":116:39)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":118:13)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":121:13)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":118:22)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":118:18)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":118:25)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":118:29)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":118:27)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":119:13)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":120:29)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":120:17)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":120:24)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":120:25)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":118:34)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":118:33)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":124:13)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":136:13)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":124:17)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":124:25)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":125:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":132:13)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":134:13)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":126:32)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":126:17)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":126:24)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":126:28)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":128:17)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":131:17)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":128:25)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":128:21)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":128:28)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":128:32)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":128:30)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":129:17)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":130:34)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":130:41)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":130:42)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":130:21)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":128:37)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":128:36)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":135:17)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":137:13)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":137:18)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":290:1)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":294:1)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":292:5)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":292:13)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":293:5)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":293:13)
#loc204 = loc("/usr/include/stdlib.h":575:1)
#loc205 = loc("/usr/include/stdlib.h":575:41)
#loc206 = loc("/usr/include/time.h":76:1)
#loc207 = loc("/usr/include/time.h":76:38)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":309:15)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":311:15)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":314:15)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":316:15)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":304:1)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":319:1)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":305:1)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":307:27)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":307:22)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":307:5)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":309:5)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":310:5)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":310:72)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":311:5)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":314:5)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":315:5)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":315:71)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":316:5)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":318:12)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":318:5)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":147:1)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":190:1)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":149:5)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":149:9)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":150:5)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":150:22)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":151:5)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":151:22)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":153:13)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":153:12)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":153:5)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":154:5)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":160:5)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":155:9)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":155:21)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":155:20)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":158:16)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":158:9)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":159:21)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":159:10)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":159:9)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":161:5)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":189:5)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":162:9)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":162:21)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":162:20)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":163:9)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":188:9)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":164:13)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":164:17)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":165:13)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":165:58)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":165:35)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":165:42)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":165:47)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":165:57)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":166:13)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":166:43)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":166:17)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":166:27)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":166:33)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":166:34)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":166:40)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":166:39)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":168:13)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":171:13)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":168:22)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":168:18)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":168:25)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":168:29)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":168:27)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":169:13)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":170:29)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":170:17)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":170:24)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":170:25)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":168:34)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":168:33)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":174:13)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":186:13)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":174:17)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":174:25)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":175:13)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":182:13)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":184:13)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":176:32)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":176:17)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":176:24)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":176:28)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":178:17)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":181:17)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":178:25)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":178:21)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":178:28)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":178:32)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":178:30)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":179:17)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":180:34)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":180:41)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":180:42)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":180:21)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":178:37)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":178:36)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":185:27)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":185:17)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":187:13)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":187:18)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":283:27)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":193:1)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":288:1)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":195:5)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":195:9)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":196:5)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":196:22)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":197:5)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":197:22)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":199:13)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":199:12)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":199:5)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":200:5)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":259:5)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":201:9)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":201:21)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":201:20)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":202:9)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":257:9)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":207:13)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":207:17)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":208:13)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":208:32)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":209:13)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":209:36)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":210:13)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":210:45)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":211:13)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":246:21)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":221:40)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":221:49)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":221:62)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":221:33)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":221:17)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":221:73)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":222:17)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":225:17)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":222:21)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":222:38)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":223:17)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":224:21)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":226:24)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":226:25)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":226:34)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":226:37)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":226:51)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":226:17)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":226:52)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":227:38)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":227:17)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":228:53)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":228:43)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":228:17)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":228:63)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":229:42)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":229:36)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":229:17)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":229:50)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":230:17)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":233:17)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":230:29)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":230:62)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":230:63)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":230:72)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":230:86)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":230:21)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":230:92)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":231:17)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":232:21)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":236:35)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":236:50)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":236:63)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":236:81)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":236:84)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":236:30)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":236:17)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":236:85)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":237:17)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":240:17)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":237:21)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":237:35)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":237:48)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":237:51)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":237:65)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":238:17)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":239:21)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":242:43)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":242:29)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":242:17)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":244:29)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":244:24)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":244:17)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":244:40)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":246:20)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":247:13)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":250:13)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":247:17)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":247:34)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":248:13)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":249:30)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":249:17)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":258:21)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":258:10)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":258:9)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":260:5)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":287:5)
#loc425 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":261:9)
#loc426 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":261:21)
#loc427 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":261:20)
#loc428 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":262:9)
#loc429 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":286:9)
#loc430 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":263:13)
#loc431 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":263:17)
#loc432 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":264:13)
#loc433 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":264:58)
#loc434 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":264:35)
#loc435 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":264:42)
#loc436 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":264:47)
#loc437 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":264:57)
#loc438 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":265:13)
#loc439 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":265:43)
#loc440 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":265:17)
#loc441 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":265:27)
#loc442 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":265:33)
#loc443 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":265:34)
#loc444 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":265:40)
#loc445 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":265:39)
#loc446 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":267:13)
#loc447 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":270:13)
#loc448 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":267:22)
#loc449 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":267:18)
#loc450 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":267:25)
#loc451 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":267:29)
#loc452 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":267:27)
#loc453 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":268:13)
#loc454 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":269:29)
#loc455 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":269:17)
#loc456 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":269:24)
#loc457 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":269:25)
#loc458 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":267:34)
#loc459 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":267:33)
#loc460 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":272:13)
#loc461 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":284:13)
#loc462 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":272:17)
#loc463 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":272:25)
#loc464 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":272:27)
#loc465 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":272:30)
#loc466 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":272:38)
#loc467 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":272:40)
#loc468 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":273:13)
#loc469 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":280:13)
#loc470 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":282:13)
#loc471 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":274:32)
#loc472 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":274:17)
#loc473 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":274:24)
#loc474 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":274:28)
#loc475 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":276:17)
#loc476 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":279:17)
#loc477 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":276:25)
#loc478 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":276:21)
#loc479 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":276:28)
#loc480 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":276:32)
#loc481 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":276:30)
#loc482 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":277:17)
#loc483 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":278:34)
#loc484 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":278:41)
#loc485 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":278:42)
#loc486 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":278:21)
#loc487 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":276:37)
#loc488 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":276:36)
#loc489 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":283:17)
#loc490 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":285:13)
#loc491 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c":285:18)
#loc492 = loc(fused[#loc1, #loc2])
#loc493 = loc(fused[#loc3, #loc4])
#loc494 = loc(fused[#loc6, #loc7])
#loc495 = loc(fused[#loc8, #loc9])
#loc496 = loc(fused[#loc10, #loc11])
#loc497 = loc(fused[#loc12, #loc13])
#loc498 = loc(fused[#loc14, #loc15])
#loc499 = loc(fused[#loc16, #loc17])
#loc500 = loc(fused[#loc18, #loc19])
#loc501 = loc(fused[#loc20, #loc21])
#loc502 = loc(fused[#loc22, #loc23])
#loc503 = loc(fused[#loc25, #loc26])
#loc504 = loc(fused[#loc27, #loc28])
#loc505 = loc(fused[#loc29, #loc30])
#loc506 = loc(fused[#loc31, #loc32])
#loc507 = loc(fused[#loc33, #loc34])
#loc508 = loc(fused[#loc37, #loc35])
#loc509 = loc(fused[#loc38, #loc39])
#loc510 = loc(fused[#loc40, #loc41])
#loc511 = loc(fused[#loc43, #loc44])
#loc512 = loc(fused[#loc45, #loc46])
#loc513 = loc(fused[#loc47, #loc48])
#loc514 = loc(fused[#loc49, #loc50])
#loc515 = loc(fused[#loc51, #loc52])
#loc516 = loc(fused[#loc53, #loc54])
#loc517 = loc(fused[#loc59, #loc60])
#loc518 = loc(fused[#loc61, #loc62])
#loc519 = loc(fused[#loc63, #loc64])
#loc520 = loc(fused[#loc65, #loc62])
#loc521 = loc(fused[#loc67, #loc68])
#loc522 = loc(fused[#loc70, #loc71])
#loc523 = loc(fused[#loc72, #loc73])
#loc524 = loc(fused[#loc76, #loc74])
#loc525 = loc(fused[#loc80, #loc81])
#loc526 = loc(fused[#loc85, #loc86])
#loc527 = loc(fused[#loc87, #loc88])
#loc528 = loc(fused[#loc90, #loc91])
#loc529 = loc(fused[#loc92, #loc93])
#loc530 = loc(fused[#loc94, #loc95])
#loc531 = loc(fused[#loc96, #loc88])
#loc532 = loc(fused[#loc100, #loc101])
#loc533 = loc(fused[#loc104, #loc105])
#loc534 = loc(fused[#loc106, #loc107])
#loc535 = loc(fused[#loc108, #loc109])
#loc536 = loc(fused[#loc111, #loc112])
#loc537 = loc(fused[#loc113, #loc107])
#loc538 = loc(fused[#loc117, #loc115])
#loc539 = loc(fused[#loc120, #loc121])
#loc540 = loc(fused[#loc123, #loc124])
#loc541 = loc(fused[#loc125, #loc126])
#loc542 = loc(fused[#loc127, #loc124])
#loc543 = loc(fused[#loc132, #loc130])
#loc544 = loc(fused[#loc133, #loc134])
#loc545 = loc(fused[#loc135, #loc136])
#loc546 = loc(fused[#loc138, #loc139])
#loc547 = loc(fused[#loc140, #loc141])
#loc548 = loc(fused[#loc142, #loc143])
#loc549 = loc(fused[#loc146, #loc147])
#loc550 = loc(fused[#loc145, #loc147])
#loc551 = loc(fused[#loc144, #loc143])
#loc552 = loc(fused[#loc148, #loc149])
#loc553 = loc(fused[#loc150, #loc151])
#loc554 = loc(fused[#loc152, #loc149])
#loc555 = loc(fused[#loc156, #loc157])
#loc556 = loc(fused[#loc159, #loc158])
#loc557 = loc(fused[#loc160, #loc161])
#loc558 = loc(fused[#loc163, #loc157])
#loc559 = loc(fused[#loc165, #loc164])
#loc560 = loc(fused[#loc169, #loc168])
#loc561 = loc(fused[#loc170, #loc171])
#loc562 = loc(fused[#loc172, #loc173])
#loc563 = loc(fused[#loc174, #loc175, #loc176, #loc171])
#loc564 = loc(fused[#loc178, #loc177])
#loc565 = loc(fused[#loc181, #loc182])
#loc566 = loc(fused[#loc184, #loc183])
#loc567 = loc(fused[#loc185, #loc186])
#loc568 = loc(fused[#loc188, #loc182])
#loc569 = loc(fused[#loc194, #loc193])
#loc570 = loc(fused[#loc198, #loc199])
#loc571 = loc(fused[#loc200, #loc201])
#loc572 = loc(fused[#loc202, #loc203])
#loc573 = loc(fused[#loc204, #loc205])
#loc574 = loc(fused[#loc206, #loc207])
#loc575 = loc(fused[#loc212, #loc213])
#loc578 = loc(fused[#loc223, #loc224])
#loc579 = loc(fused[#loc227, #loc228])
#loc580 = loc(fused[#loc231, #loc230])
#loc581 = loc(fused[#loc232, #loc233])
#loc582 = loc(fused[#loc234, #loc235])
#loc583 = loc(fused[#loc236, #loc237])
#loc584 = loc(fused[#loc238, #loc239])
#loc585 = loc(fused[#loc242, #loc240])
#loc586 = loc(fused[#loc243, #loc244])
#loc587 = loc(fused[#loc245, #loc246])
#loc588 = loc(fused[#loc249, #loc248])
#loc589 = loc(fused[#loc252, #loc250])
#loc590 = loc(fused[#loc253, #loc254])
#loc591 = loc(fused[#loc255, #loc256])
#loc592 = loc(fused[#loc258, #loc259])
#loc593 = loc(fused[#loc260, #loc261])
#loc594 = loc(fused[#loc262, #loc263])
#loc595 = loc(fused[#loc266, #loc267])
#loc596 = loc(fused[#loc265, #loc267])
#loc597 = loc(fused[#loc264, #loc263])
#loc598 = loc(fused[#loc268, #loc269])
#loc599 = loc(fused[#loc270, #loc271])
#loc600 = loc(fused[#loc272, #loc269])
#loc601 = loc(fused[#loc276, #loc277])
#loc602 = loc(fused[#loc279, #loc278])
#loc603 = loc(fused[#loc280, #loc281])
#loc604 = loc(fused[#loc283, #loc277])
#loc605 = loc(fused[#loc285, #loc284])
#loc606 = loc(fused[#loc289, #loc288])
#loc607 = loc(fused[#loc290, #loc291])
#loc608 = loc(fused[#loc292, #loc293])
#loc609 = loc(fused[#loc294, #loc295, #loc296, #loc291])
#loc610 = loc(fused[#loc298, #loc297])
#loc611 = loc(fused[#loc301, #loc302])
#loc612 = loc(fused[#loc304, #loc303])
#loc613 = loc(fused[#loc305, #loc306])
#loc614 = loc(fused[#loc308, #loc302])
#loc615 = loc(fused[#loc314, #loc313])
#loc616 = loc(fused[#loc320, #loc321])
#loc617 = loc(fused[#loc322, #loc323])
#loc618 = loc(fused[#loc324, #loc325])
#loc619 = loc(fused[#loc326, #loc327])
#loc620 = loc(fused[#loc330, #loc328])
#loc621 = loc(fused[#loc331, #loc332])
#loc622 = loc(fused[#loc333, #loc334])
#loc623 = loc(fused[#loc336, #loc337])
#loc624 = loc(fused[#loc338, #loc339])
#loc625 = loc(fused[#loc340, #loc341])
#loc626 = loc(fused[#loc342, #loc343])
#loc627 = loc(fused[#loc344, #loc345])
#loc628 = loc(fused[#loc346, #loc347])
#loc629 = loc(fused[#loc352, #loc353])
#loc630 = loc(fused[#loc354, #loc355])
#loc631 = loc(fused[#loc356, #loc357])
#loc632 = loc(fused[#loc358, #loc355])
#loc633 = loc(fused[#loc360, #loc361])
#loc634 = loc(fused[#loc363, #loc364])
#loc635 = loc(fused[#loc365, #loc366])
#loc636 = loc(fused[#loc368, #loc367])
#loc637 = loc(fused[#loc371, #loc372])
#loc638 = loc(fused[#loc375, #loc376])
#loc639 = loc(fused[#loc377, #loc378])
#loc640 = loc(fused[#loc380, #loc381])
#loc641 = loc(fused[#loc382, #loc383])
#loc642 = loc(fused[#loc384, #loc385])
#loc643 = loc(fused[#loc386, #loc378])
#loc644 = loc(fused[#loc390, #loc391])
#loc645 = loc(fused[#loc394, #loc395])
#loc646 = loc(fused[#loc396, #loc397])
#loc647 = loc(fused[#loc398, #loc399])
#loc648 = loc(fused[#loc401, #loc402])
#loc649 = loc(fused[#loc403, #loc397])
#loc650 = loc(fused[#loc407, #loc405])
#loc651 = loc(fused[#loc410, #loc411])
#loc652 = loc(fused[#loc413, #loc414])
#loc653 = loc(fused[#loc415, #loc416])
#loc654 = loc(fused[#loc417, #loc414])
#loc655 = loc(fused[#loc422, #loc420])
#loc656 = loc(fused[#loc423, #loc424])
#loc657 = loc(fused[#loc425, #loc426])
#loc658 = loc(fused[#loc428, #loc429])
#loc659 = loc(fused[#loc430, #loc431])
#loc660 = loc(fused[#loc432, #loc433])
#loc661 = loc(fused[#loc436, #loc437])
#loc662 = loc(fused[#loc435, #loc437])
#loc663 = loc(fused[#loc434, #loc433])
#loc664 = loc(fused[#loc438, #loc439])
#loc665 = loc(fused[#loc440, #loc441])
#loc666 = loc(fused[#loc442, #loc439])
#loc667 = loc(fused[#loc446, #loc447])
#loc668 = loc(fused[#loc449, #loc448])
#loc669 = loc(fused[#loc450, #loc451])
#loc670 = loc(fused[#loc453, #loc447])
#loc671 = loc(fused[#loc455, #loc454])
#loc672 = loc(fused[#loc459, #loc458])
#loc673 = loc(fused[#loc460, #loc461])
#loc674 = loc(fused[#loc462, #loc463])
#loc675 = loc(fused[#loc465, #loc467])
#loc676 = loc(fused[#loc468, #loc469, #loc470, #loc461])
#loc677 = loc(fused[#loc472, #loc471])
#loc678 = loc(fused[#loc475, #loc476])
#loc679 = loc(fused[#loc478, #loc477])
#loc680 = loc(fused[#loc479, #loc480])
#loc681 = loc(fused[#loc482, #loc476])
#loc682 = loc(fused[#loc488, #loc487])
