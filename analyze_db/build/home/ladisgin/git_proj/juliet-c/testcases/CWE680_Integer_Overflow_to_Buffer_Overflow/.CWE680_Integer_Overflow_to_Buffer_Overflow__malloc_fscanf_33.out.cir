!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":101:10)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":101:14)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":101:20)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":101:32)
#loc205 = loc(fused[#loc135, #loc136])
#loc206 = loc(fused[#loc137, #loc138])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc23_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc151)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc152)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc153)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc154)
  cir.func private @printIntLine(!s32i) loc(#loc155)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc156)
  cir.func @_ZN60CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc158)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc159)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc19)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc21)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc160)
    %4 = cir.get_global @__isoc23_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc23)
    %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc152)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc24)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %9 = cir.call @__isoc23_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc23)
    cir.scope {
      %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc162)
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc28)
      %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc28)
      cir.store %12, %10 : !s32i, !cir.ptr<!s32i> loc(#loc162)
      cir.scope {
        %13 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc164)
        %14 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc165)
        %15 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc35)
        %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc36)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc36)
        %18 = cir.const #cir.int<4> : !u64i loc(#loc166)
        %19 = cir.binop(mul, %17, %18) : !u64i loc(#loc167)
        %20 = cir.call @malloc(%19) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc35)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc168)
        cir.store %21, %14 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc169)
        cir.scope {
          %29 = cir.load %14 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
          %30 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc44)
          %31 = cir.cmp(eq, %29, %30) : !cir.ptr<!s32i>, !cir.bool loc(#loc171)
          cir.if %31 {
            %32 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc46)
            %33 = cir.const #cir.int<1> : !s32i loc(#loc47)
            %34 = cir.unary(minus, %33) : !s32i, !s32i loc(#loc48)
            cir.call @exit(%34) : (!s32i) -> () extra(#fn_attr) loc(#loc46)
          } loc(#loc172)
        } loc(#loc170)
        cir.scope {
          %29 = cir.const #cir.int<0> : !s32i loc(#loc51)
          %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc51)
          cir.store %30, %13 : !u64i, !cir.ptr<!u64i> loc(#loc174)
          cir.for : cond {
            %31 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc53)
            %32 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc54)
            %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc54)
            %34 = cir.cmp(lt, %31, %33) : !u64i, !cir.bool loc(#loc175)
            cir.condition(%34) loc(#loc175)
          } body {
            %31 = cir.const #cir.int<0> : !s32i loc(#loc55)
            %32 = cir.load %14 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc56)
            %33 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc57)
            %34 = cir.ptr_stride(%32 : !cir.ptr<!s32i>, %33 : !u64i), !cir.ptr<!s32i> loc(#loc58)
            cir.store %31, %34 : !s32i, !cir.ptr<!s32i> loc(#loc176)
            cir.yield loc(#loc50)
          } step {
            %31 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc59)
            %32 = cir.unary(inc, %31) : !u64i, !u64i loc(#loc60)
            cir.store %32, %13 : !u64i, !cir.ptr<!u64i> loc(#loc177)
            cir.yield loc(#loc173)
          } loc(#loc173)
        } loc(#loc173)
        %22 = cir.load %14 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc61)
        %23 = cir.const #cir.int<0> : !s32i loc(#loc62)
        %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc63)
        %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc61)
        cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc64)
        %26 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc65)
        %27 = cir.load %14 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc66)
        %28 = cir.cast(bitcast, %27 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc66)
        cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc65)
      } loc(#loc163)
    } loc(#loc161)
    cir.return loc(#loc15)
  } loc(#loc157)
  cir.func internal private @_ZN60CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc179)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc180)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc72)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc73)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc74)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc181)
    %4 = cir.const #cir.int<20> : !s32i loc(#loc76)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc182)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc184)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc81)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc81)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc184)
      cir.scope {
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc186)
        %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc187)
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc88)
        %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc89)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc89)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc188)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc189)
        %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc88)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc190)
        cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc191)
        cir.scope {
          %24 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc96)
          %25 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc97)
          %26 = cir.cmp(eq, %24, %25) : !cir.ptr<!s32i>, !cir.bool loc(#loc193)
          cir.if %26 {
            %27 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc99)
            %28 = cir.const #cir.int<1> : !s32i loc(#loc100)
            %29 = cir.unary(minus, %28) : !s32i, !s32i loc(#loc101)
            cir.call @exit(%29) : (!s32i) -> () extra(#fn_attr) loc(#loc99)
          } loc(#loc194)
        } loc(#loc192)
        cir.scope {
          %24 = cir.const #cir.int<0> : !s32i loc(#loc104)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc104)
          cir.store %25, %8 : !u64i, !cir.ptr<!u64i> loc(#loc196)
          cir.for : cond {
            %26 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc106)
            %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc107)
            %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc107)
            %29 = cir.cmp(lt, %26, %28) : !u64i, !cir.bool loc(#loc197)
            cir.condition(%29) loc(#loc197)
          } body {
            %26 = cir.const #cir.int<0> : !s32i loc(#loc108)
            %27 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc109)
            %28 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc110)
            %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !u64i), !cir.ptr<!s32i> loc(#loc111)
            cir.store %26, %29 : !s32i, !cir.ptr<!s32i> loc(#loc198)
            cir.yield loc(#loc103)
          } step {
            %26 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc112)
            %27 = cir.unary(inc, %26) : !u64i, !u64i loc(#loc113)
            cir.store %27, %8 : !u64i, !cir.ptr<!u64i> loc(#loc199)
            cir.yield loc(#loc195)
          } loc(#loc195)
        } loc(#loc195)
        %17 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc114)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc115)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc116)
        %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc114)
        cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc117)
        %21 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc118)
        %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc119)
        %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc119)
        cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc118)
      } loc(#loc185)
    } loc(#loc183)
    cir.return loc(#loc68)
  } loc(#loc178)
  cir.func @_ZN60CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN60CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33L7goodG2BEv() : () -> () loc(#loc122)
    cir.return loc(#loc121)
  } loc(#loc200)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc201)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc202)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc203)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc129)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc130)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc131)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc132)
  cir.func @main(%arg0: !s32i loc(fused[#loc135, #loc136]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc137, #loc138])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc205)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc206)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc134)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc139)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc139)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc140)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc141)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc141)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc142)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc129)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc129)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc143)
    cir.call @_ZN60CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_334goodEv() : () -> () loc(#loc144)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc130)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc130)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc145)
    %10 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc131)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc131)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc146)
    cir.call @_ZN60CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_333badEv() : () -> () loc(#loc147)
    %12 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc132)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc132)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc148)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc149)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc207)
    cir.return %15 : !s32i loc(#loc207)
  } loc(#loc204)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":0:0)
#loc1 = loc("/usr/include/stdio.h":442:1)
#loc2 = loc("/usr/include/stdio.h":444:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":31:19)
#loc6 = loc("/usr/include/stdlib.h":672:1)
#loc7 = loc("/usr/include/stdlib.h":672:45)
#loc8 = loc("/usr/include/stdlib.h":756:1)
#loc9 = loc("/usr/include/stdlib.h":756:70)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("/usr/include/stdlib.h":687:1)
#loc13 = loc("/usr/include/stdlib.h":687:32)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":24:1)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":49:1)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":26:5)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":26:9)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":27:5)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":27:20)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":29:13)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":29:12)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":29:5)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":31:5)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":31:12)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":32:5)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":48:5)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":33:9)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":33:20)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":34:9)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":47:9)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":35:13)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":35:20)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":36:13)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":36:18)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":39:32)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":39:39)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":39:46)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":39:56)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":39:57)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":39:13)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":40:13)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":40:47)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":40:17)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":40:31)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":40:37)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":40:38)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":40:44)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":40:43)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":41:13)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":44:13)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":41:22)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":41:18)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":41:25)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":41:37)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":43:33)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":43:17)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":43:28)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":43:29)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":41:44)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":41:43)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":45:26)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":45:37)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":45:38)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":45:13)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":46:13)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":46:18)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":56:1)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":81:1)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":58:5)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":58:9)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":59:5)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":59:20)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":61:13)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":61:12)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":61:5)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":63:12)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":63:5)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":64:5)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":80:5)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":65:9)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":65:20)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":66:9)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":79:9)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":67:13)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":67:20)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":68:13)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":68:18)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":71:32)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":71:39)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":71:46)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":71:56)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":71:57)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":71:13)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":72:13)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":72:47)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":72:17)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":72:31)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":72:37)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":72:38)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":72:44)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":72:43)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":73:13)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":76:13)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":73:22)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":73:18)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":73:25)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":73:37)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":75:33)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":75:17)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":75:28)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":75:29)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":73:44)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":73:43)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":77:26)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":77:37)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":77:38)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":77:13)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":78:13)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":78:18)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":83:1)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":86:1)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":85:5)
#loc123 = loc("/usr/include/stdlib.h":575:1)
#loc124 = loc("/usr/include/stdlib.h":575:41)
#loc125 = loc("/usr/include/time.h":76:1)
#loc126 = loc("/usr/include/time.h":76:38)
#loc127 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc128 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":106:15)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":108:15)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":111:15)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":113:15)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":101:1)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":116:1)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":102:1)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":104:27)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":104:22)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":104:5)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":106:5)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":107:5)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":108:5)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":111:5)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":112:5)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":113:5)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":115:12)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_33.cpp":115:5)
#loc151 = loc(fused[#loc1, #loc2])
#loc152 = loc(fused[#loc3, #loc4])
#loc153 = loc(fused[#loc6, #loc7])
#loc154 = loc(fused[#loc8, #loc9])
#loc155 = loc(fused[#loc10, #loc11])
#loc156 = loc(fused[#loc12, #loc13])
#loc157 = loc(fused[#loc14, #loc15])
#loc158 = loc(fused[#loc16, #loc17])
#loc159 = loc(fused[#loc18, #loc19])
#loc160 = loc(fused[#loc22, #loc20])
#loc161 = loc(fused[#loc25, #loc26])
#loc162 = loc(fused[#loc27, #loc28])
#loc163 = loc(fused[#loc29, #loc30])
#loc164 = loc(fused[#loc31, #loc32])
#loc165 = loc(fused[#loc33, #loc34])
#loc166 = loc(fused[#loc37, #loc38])
#loc167 = loc(fused[#loc36, #loc38])
#loc168 = loc(fused[#loc35, #loc39])
#loc169 = loc(fused[#loc40, #loc39])
#loc170 = loc(fused[#loc41, #loc42])
#loc171 = loc(fused[#loc43, #loc44])
#loc172 = loc(fused[#loc45, #loc42])
#loc173 = loc(fused[#loc49, #loc50])
#loc174 = loc(fused[#loc52, #loc51])
#loc175 = loc(fused[#loc53, #loc54])
#loc176 = loc(fused[#loc56, #loc55])
#loc177 = loc(fused[#loc60, #loc59])
#loc178 = loc(fused[#loc67, #loc68])
#loc179 = loc(fused[#loc69, #loc70])
#loc180 = loc(fused[#loc71, #loc72])
#loc181 = loc(fused[#loc75, #loc73])
#loc182 = loc(fused[#loc77, #loc76])
#loc183 = loc(fused[#loc78, #loc79])
#loc184 = loc(fused[#loc80, #loc81])
#loc185 = loc(fused[#loc82, #loc83])
#loc186 = loc(fused[#loc84, #loc85])
#loc187 = loc(fused[#loc86, #loc87])
#loc188 = loc(fused[#loc90, #loc91])
#loc189 = loc(fused[#loc89, #loc91])
#loc190 = loc(fused[#loc88, #loc92])
#loc191 = loc(fused[#loc93, #loc92])
#loc192 = loc(fused[#loc94, #loc95])
#loc193 = loc(fused[#loc96, #loc97])
#loc194 = loc(fused[#loc98, #loc95])
#loc195 = loc(fused[#loc102, #loc103])
#loc196 = loc(fused[#loc105, #loc104])
#loc197 = loc(fused[#loc106, #loc107])
#loc198 = loc(fused[#loc109, #loc108])
#loc199 = loc(fused[#loc113, #loc112])
#loc200 = loc(fused[#loc120, #loc121])
#loc201 = loc(fused[#loc123, #loc124])
#loc202 = loc(fused[#loc125, #loc126])
#loc203 = loc(fused[#loc127, #loc128])
#loc204 = loc(fused[#loc133, #loc134])
#loc207 = loc(fused[#loc150, #loc149])
