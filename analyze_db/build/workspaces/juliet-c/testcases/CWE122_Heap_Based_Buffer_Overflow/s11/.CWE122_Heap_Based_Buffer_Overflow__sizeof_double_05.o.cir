!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc118)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc119)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc120)
  cir.func private @printDoubleLine(!cir.double) loc(#loc121)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc122)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc124)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc125)
    cir.scope {
      %7 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc118)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc19)
      cir.if %9 {
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc21)
        %11 = cir.const #cir.int<8> : !u64i loc(#loc128)
        %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc129)
        cir.store %13, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc130)
        cir.scope {
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc28)
          %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc29)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc29)
          %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!cir.double>, !cir.bool loc(#loc132)
          cir.if %19 {
            %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc31)
            %21 = cir.const #cir.int<1> : !s32i loc(#loc32)
            %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc33)
            cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc31)
          } loc(#loc133)
        } loc(#loc131)
        %14 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc34)
        %15 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc35)
        cir.store %14, %15 : !cir.double, !cir.ptr<!cir.double> loc(#loc134)
      } loc(#loc127)
    } loc(#loc126)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc37)
    %3 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc38)
    cir.call @printDoubleLine(%3) : (!cir.double) -> () loc(#loc39)
    %4 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc40)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc41)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.double>), !cir.ptr<!void> loc(#loc41)
    cir.call @free(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc40)
    cir.return loc(#loc12)
  } loc(#loc123)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc136)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc137)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc46)
    cir.return loc(#loc43)
  } loc(#loc135)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc138)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc139)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc52)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc141)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc57)
    cir.store %1, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc142)
    cir.scope {
      %7 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc138)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc61)
      %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc61)
      cir.if %9 {
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc52)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc52)
        cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc65)
      } else {
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc66)
        %11 = cir.const #cir.int<8> : !u64i loc(#loc145)
        %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc66)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc146)
        cir.store %13, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc147)
        cir.scope {
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc73)
          %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc74)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc74)
          %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!cir.double>, !cir.bool loc(#loc149)
          cir.if %19 {
            %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc76)
            %21 = cir.const #cir.int<1> : !s32i loc(#loc77)
            %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc78)
            cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc76)
          } loc(#loc150)
        } loc(#loc148)
        %14 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc79)
        %15 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc80)
        cir.store %14, %15 : !cir.double, !cir.ptr<!cir.double> loc(#loc151)
      } loc(#loc144)
    } loc(#loc143)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc82)
    %3 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc83)
    cir.call @printDoubleLine(%3) : (!cir.double) -> () loc(#loc84)
    %4 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc85)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc86)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.double>), !cir.ptr<!void> loc(#loc86)
    cir.call @free(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc85)
    cir.return loc(#loc54)
  } loc(#loc140)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc153)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc91)
    cir.store %1, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc154)
    cir.scope {
      %7 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc118)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc95)
      %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc95)
      cir.if %9 {
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc97)
        %11 = cir.const #cir.int<8> : !u64i loc(#loc157)
        %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc97)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc158)
        cir.store %13, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc159)
        cir.scope {
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc104)
          %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc105)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc105)
          %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!cir.double>, !cir.bool loc(#loc161)
          cir.if %19 {
            %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc107)
            %21 = cir.const #cir.int<1> : !s32i loc(#loc108)
            %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc109)
            cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc107)
          } loc(#loc162)
        } loc(#loc160)
        %14 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc110)
        %15 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc111)
        cir.store %14, %15 : !cir.double, !cir.ptr<!cir.double> loc(#loc163)
      } loc(#loc156)
    } loc(#loc155)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc113)
    %3 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc114)
    cir.call @printDoubleLine(%3) : (!cir.double) -> () loc(#loc115)
    %4 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc116)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc117)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.double>), !cir.ptr<!void> loc(#loc117)
    cir.call @free(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc116)
    cir.return loc(#loc88)
  } loc(#loc152)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":23:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":23:25)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":38:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":38:41)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":28:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":44:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":30:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":30:14)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":32:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":32:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":33:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":40:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":33:8)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":34:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":37:26)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":37:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":37:44)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":37:45)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":37:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":38:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":38:37)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":38:13)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":38:21)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":38:27)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":38:28)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":38:34)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":38:33)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":39:17)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":39:10)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":39:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":42:22)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":42:21)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":42:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":43:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":43:10)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":91:1)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":95:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":93:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":93:14)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":94:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":94:14)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":24:1)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":24:26)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":59:19)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":51:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":71:1)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":53:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":53:14)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":55:12)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":55:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":56:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":67:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":56:8)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":57:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":60:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":62:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":59:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":64:26)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":64:33)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":64:45)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":64:46)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":64:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":65:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":65:37)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":65:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":65:21)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":65:27)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":65:28)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":65:34)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":65:33)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":66:17)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":66:10)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":66:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":69:22)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":69:21)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":69:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":70:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":70:10)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":74:1)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":89:1)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":76:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":76:14)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":78:12)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":78:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":79:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":85:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":79:8)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":80:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":82:26)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":82:33)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":82:45)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":82:46)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":82:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":83:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":83:37)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":83:13)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":83:21)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":83:27)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":83:28)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":83:34)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":83:33)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":84:17)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":84:10)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":84:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":87:22)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":87:21)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":87:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":88:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c":88:10)
#loc118 = loc(fused[#loc1, #loc2])
#loc119 = loc(fused[#loc3, #loc4])
#loc120 = loc(fused[#loc5, #loc6])
#loc121 = loc(fused[#loc7, #loc8])
#loc122 = loc(fused[#loc9, #loc10])
#loc123 = loc(fused[#loc11, #loc12])
#loc124 = loc(fused[#loc13, #loc14])
#loc125 = loc(fused[#loc16, #loc15])
#loc126 = loc(fused[#loc17, #loc18])
#loc127 = loc(fused[#loc20, #loc18])
#loc128 = loc(fused[#loc22, #loc23])
#loc129 = loc(fused[#loc21, #loc24])
#loc130 = loc(fused[#loc25, #loc24])
#loc131 = loc(fused[#loc26, #loc27])
#loc132 = loc(fused[#loc28, #loc29])
#loc133 = loc(fused[#loc30, #loc27])
#loc134 = loc(fused[#loc36, #loc34])
#loc135 = loc(fused[#loc42, #loc43])
#loc136 = loc(fused[#loc44, #loc45])
#loc137 = loc(fused[#loc46, #loc47])
#loc138 = loc(fused[#loc48, #loc49])
#loc139 = loc(fused[#loc50, #loc51])
#loc140 = loc(fused[#loc53, #loc54])
#loc141 = loc(fused[#loc55, #loc56])
#loc142 = loc(fused[#loc58, #loc57])
#loc143 = loc(fused[#loc59, #loc60])
#loc144 = loc(fused[#loc62, #loc63, #loc64, #loc60])
#loc145 = loc(fused[#loc67, #loc68])
#loc146 = loc(fused[#loc66, #loc69])
#loc147 = loc(fused[#loc70, #loc69])
#loc148 = loc(fused[#loc71, #loc72])
#loc149 = loc(fused[#loc73, #loc74])
#loc150 = loc(fused[#loc75, #loc72])
#loc151 = loc(fused[#loc81, #loc79])
#loc152 = loc(fused[#loc87, #loc88])
#loc153 = loc(fused[#loc89, #loc90])
#loc154 = loc(fused[#loc92, #loc91])
#loc155 = loc(fused[#loc93, #loc94])
#loc156 = loc(fused[#loc96, #loc94])
#loc157 = loc(fused[#loc98, #loc99])
#loc158 = loc(fused[#loc97, #loc100])
#loc159 = loc(fused[#loc101, #loc100])
#loc160 = loc(fused[#loc102, #loc103])
#loc161 = loc(fused[#loc104, #loc105])
#loc162 = loc(fused[#loc106, #loc103])
#loc163 = loc(fused[#loc112, #loc110])
