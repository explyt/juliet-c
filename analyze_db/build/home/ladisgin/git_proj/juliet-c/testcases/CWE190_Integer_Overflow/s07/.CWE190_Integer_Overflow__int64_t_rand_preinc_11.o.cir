!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":29:25)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":54:25)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":85:25)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int64_t_rand_preinc_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc173)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc174)
  cir.func private @printLongLongLine(!s64i) loc(#loc175)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_preinc_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc177)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc178)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc13)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc179)
    cir.br ^bb1 loc(#loc180)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc181)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc181)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc17)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc182)
  ^bb2:  // pred: ^bb1
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %9 = cir.binop(and, %7, %8) : !s32i loc(#loc20)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc20)
  ^bb3:  // pred: ^bb2
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc20)
    %13 = cir.const #cir.int<60> : !s32i loc(#loc20)
    %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc20)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc20)
    %17 = cir.const #cir.int<45> : !s32i loc(#loc20)
    %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc20)
    %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc20)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc20)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc20)
    %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc20)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc20)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc20)
    %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc20)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc20)
    %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc20)
    cir.br ^bb5(%32 : !u64i) loc(#loc20)
  ^bb4:  // pred: ^bb2
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc20)
    %35 = cir.const #cir.int<60> : !s32i loc(#loc20)
    %36 = cir.shift(left, %34 : !u64i, %35 : !s32i) -> !u64i loc(#loc20)
    %37 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc20)
    %39 = cir.const #cir.int<45> : !s32i loc(#loc20)
    %40 = cir.shift(left, %38 : !u64i, %39 : !s32i) -> !u64i loc(#loc20)
    %41 = cir.binop(xor, %36, %40) : !u64i loc(#loc20)
    %42 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc20)
    %44 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %45 = cir.shift(left, %43 : !u64i, %44 : !s32i) -> !u64i loc(#loc20)
    %46 = cir.binop(xor, %41, %45) : !u64i loc(#loc20)
    %47 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc20)
    %49 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %50 = cir.shift(left, %48 : !u64i, %49 : !s32i) -> !u64i loc(#loc20)
    %51 = cir.binop(xor, %46, %50) : !u64i loc(#loc20)
    %52 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %53 = cir.cast(integral, %52 : !s32i), !u64i loc(#loc20)
    %54 = cir.binop(xor, %51, %53) : !u64i loc(#loc20)
    %55 = cir.unary(minus, %54) : !u64i, !u64i loc(#loc20)
    %56 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %57 = cir.cast(integral, %56 : !s32i), !u64i loc(#loc20)
    %58 = cir.binop(sub, %55, %57) : !u64i loc(#loc20)
    cir.br ^bb5(%58 : !u64i) loc(#loc20)
  ^bb5(%59: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":29:25)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc20)
  ^bb6:  // pred: ^bb5
    %60 = cir.cast(integral, %59 : !u64i), !s64i loc(#loc20)
    cir.store %60, %1 : !s64i, !cir.ptr<!s64i> loc(#loc183)
    cir.br ^bb7 loc(#loc16)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc16)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc184)
  ^bb9:  // pred: ^bb8
    %61 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc185)
    %62 = cir.cast(bitcast, %61 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc185)
    %63 = cir.call %62() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc24)
    %64 = cir.cast(int_to_bool, %63 : !s32i), !cir.bool loc(#loc24)
    cir.brcond %64 ^bb10, ^bb13 loc(#loc186)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc187)
  ^bb11:  // pred: ^bb10
    %65 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc29)
    %66 = cir.unary(inc, %65) : !s64i, !s64i loc(#loc29)
    cir.store %66, %1 : !s64i, !cir.ptr<!s64i> loc(#loc188)
    %67 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc10)
    cir.store %67, %0 : !s64i, !cir.ptr<!s64i> loc(#loc177)
    %68 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc31)
    cir.call @printLongLongLine(%68) : (!s64i) -> () loc(#loc32)
    cir.br ^bb12 loc(#loc28)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc23)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc23)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc8)
  } loc(#loc176)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_preinc_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc190)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc191)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc192)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc193)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    cir.return loc(#loc34)
  } loc(#loc189)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc194)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc195)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc48)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc197)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc198)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc55)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc199)
    cir.br ^bb1 loc(#loc200)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc201)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc201)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc59)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc59)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc202)
  ^bb2:  // pred: ^bb1
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %9 = cir.binop(and, %7, %8) : !s32i loc(#loc62)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc62)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc62)
  ^bb3:  // pred: ^bb2
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc62)
    %13 = cir.const #cir.int<60> : !s32i loc(#loc62)
    %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc62)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc62)
    %17 = cir.const #cir.int<45> : !s32i loc(#loc62)
    %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc62)
    %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc62)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc62)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc62)
    %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc62)
    %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc62)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc62)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc62)
    %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc62)
    %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc62)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc62)
    %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc62)
    cir.br ^bb5(%32 : !u64i) loc(#loc62)
  ^bb4:  // pred: ^bb2
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc62)
    %35 = cir.const #cir.int<60> : !s32i loc(#loc62)
    %36 = cir.shift(left, %34 : !u64i, %35 : !s32i) -> !u64i loc(#loc62)
    %37 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc62)
    %39 = cir.const #cir.int<45> : !s32i loc(#loc62)
    %40 = cir.shift(left, %38 : !u64i, %39 : !s32i) -> !u64i loc(#loc62)
    %41 = cir.binop(xor, %36, %40) : !u64i loc(#loc62)
    %42 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc62)
    %44 = cir.const #cir.int<30> : !s32i loc(#loc62)
    %45 = cir.shift(left, %43 : !u64i, %44 : !s32i) -> !u64i loc(#loc62)
    %46 = cir.binop(xor, %41, %45) : !u64i loc(#loc62)
    %47 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc62)
    %49 = cir.const #cir.int<15> : !s32i loc(#loc62)
    %50 = cir.shift(left, %48 : !u64i, %49 : !s32i) -> !u64i loc(#loc62)
    %51 = cir.binop(xor, %46, %50) : !u64i loc(#loc62)
    %52 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %53 = cir.cast(integral, %52 : !s32i), !u64i loc(#loc62)
    %54 = cir.binop(xor, %51, %53) : !u64i loc(#loc62)
    %55 = cir.unary(minus, %54) : !u64i, !u64i loc(#loc62)
    %56 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %57 = cir.cast(integral, %56 : !s32i), !u64i loc(#loc62)
    %58 = cir.binop(sub, %55, %57) : !u64i loc(#loc62)
    cir.br ^bb5(%58 : !u64i) loc(#loc62)
  ^bb5(%59: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":54:25)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc62)
  ^bb6:  // pred: ^bb5
    %60 = cir.cast(integral, %59 : !u64i), !s64i loc(#loc62)
    cir.store %60, %1 : !s64i, !cir.ptr<!s64i> loc(#loc203)
    cir.br ^bb7 loc(#loc58)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc58)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc204)
  ^bb9:  // pred: ^bb8
    %61 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc205)
    %62 = cir.cast(bitcast, %61 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc205)
    %63 = cir.call %62() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc66)
    %64 = cir.cast(int_to_bool, %63 : !s32i), !cir.bool loc(#loc66)
    cir.brcond %64 ^bb10, ^bb11 loc(#loc206)
  ^bb10:  // pred: ^bb9
    %65 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc47)
    %66 = cir.cast(array_to_ptrdecay, %65 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%66) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    cir.br ^bb17 loc(#loc69)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc207)
  ^bb12:  // pred: ^bb11
    %67 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc74)
    %68 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc75)
    %69 = cir.cmp(lt, %67, %68) : !s64i, !cir.bool loc(#loc208)
    cir.brcond %69 ^bb13, ^bb14 loc(#loc209)
  ^bb13:  // pred: ^bb12
    %70 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc79)
    %71 = cir.unary(inc, %70) : !s64i, !s64i loc(#loc79)
    cir.store %71, %1 : !s64i, !cir.ptr<!s64i> loc(#loc210)
    %72 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc52)
    cir.store %72, %0 : !s64i, !cir.ptr<!s64i> loc(#loc197)
    %73 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc81)
    cir.call @printLongLongLine(%73) : (!s64i) -> () loc(#loc82)
    cir.br ^bb15 loc(#loc77)
  ^bb14:  // pred: ^bb12
    %74 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc48)
    %75 = cir.cast(array_to_ptrdecay, %74 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%75) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    cir.br ^bb15 loc(#loc73)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc73)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc65)
  ^bb17:  // 2 preds: ^bb10, ^bb16
    cir.br ^bb18 loc(#loc65)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc50)
  } loc(#loc196)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc212)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc213)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc90)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc214)
    cir.br ^bb1 loc(#loc215)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc216)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc216)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc94)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc94)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc217)
  ^bb2:  // pred: ^bb1
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc97)
    %9 = cir.binop(and, %7, %8) : !s32i loc(#loc97)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc97)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc97)
  ^bb3:  // pred: ^bb2
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc97)
    %13 = cir.const #cir.int<60> : !s32i loc(#loc97)
    %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc97)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc97)
    %17 = cir.const #cir.int<45> : !s32i loc(#loc97)
    %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc97)
    %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc97)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc97)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc97)
    %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc97)
    %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc97)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc97)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc97)
    %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc97)
    %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc97)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc97)
    %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc97)
    cir.br ^bb5(%32 : !u64i) loc(#loc97)
  ^bb4:  // pred: ^bb2
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
    %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc97)
    %35 = cir.const #cir.int<60> : !s32i loc(#loc97)
    %36 = cir.shift(left, %34 : !u64i, %35 : !s32i) -> !u64i loc(#loc97)
    %37 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
    %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc97)
    %39 = cir.const #cir.int<45> : !s32i loc(#loc97)
    %40 = cir.shift(left, %38 : !u64i, %39 : !s32i) -> !u64i loc(#loc97)
    %41 = cir.binop(xor, %36, %40) : !u64i loc(#loc97)
    %42 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
    %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc97)
    %44 = cir.const #cir.int<30> : !s32i loc(#loc97)
    %45 = cir.shift(left, %43 : !u64i, %44 : !s32i) -> !u64i loc(#loc97)
    %46 = cir.binop(xor, %41, %45) : !u64i loc(#loc97)
    %47 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
    %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc97)
    %49 = cir.const #cir.int<15> : !s32i loc(#loc97)
    %50 = cir.shift(left, %48 : !u64i, %49 : !s32i) -> !u64i loc(#loc97)
    %51 = cir.binop(xor, %46, %50) : !u64i loc(#loc97)
    %52 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
    %53 = cir.cast(integral, %52 : !s32i), !u64i loc(#loc97)
    %54 = cir.binop(xor, %51, %53) : !u64i loc(#loc97)
    %55 = cir.unary(minus, %54) : !u64i, !u64i loc(#loc97)
    %56 = cir.const #cir.int<1> : !s32i loc(#loc97)
    %57 = cir.cast(integral, %56 : !s32i), !u64i loc(#loc97)
    %58 = cir.binop(sub, %55, %57) : !u64i loc(#loc97)
    cir.br ^bb5(%58 : !u64i) loc(#loc97)
  ^bb5(%59: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":85:25)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc97)
  ^bb6:  // pred: ^bb5
    %60 = cir.cast(integral, %59 : !u64i), !s64i loc(#loc97)
    cir.store %60, %1 : !s64i, !cir.ptr<!s64i> loc(#loc218)
    cir.br ^bb7 loc(#loc93)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc93)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc219)
  ^bb9:  // pred: ^bb8
    %61 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc220)
    %62 = cir.cast(bitcast, %61 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc220)
    %63 = cir.call %62() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc101)
    %64 = cir.cast(int_to_bool, %63 : !s32i), !cir.bool loc(#loc101)
    cir.brcond %64 ^bb10, ^bb16 loc(#loc221)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc222)
  ^bb11:  // pred: ^bb10
    %65 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc106)
    %66 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc107)
    %67 = cir.cmp(lt, %65, %66) : !s64i, !cir.bool loc(#loc223)
    cir.brcond %67 ^bb12, ^bb13 loc(#loc224)
  ^bb12:  // pred: ^bb11
    %68 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc111)
    %69 = cir.unary(inc, %68) : !s64i, !s64i loc(#loc111)
    cir.store %69, %1 : !s64i, !cir.ptr<!s64i> loc(#loc225)
    %70 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc87)
    cir.store %70, %0 : !s64i, !cir.ptr<!s64i> loc(#loc212)
    %71 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc113)
    cir.call @printLongLongLine(%71) : (!s64i) -> () loc(#loc114)
    cir.br ^bb14 loc(#loc109)
  ^bb13:  // pred: ^bb11
    %72 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc115)
    %73 = cir.cast(array_to_ptrdecay, %72 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc115)
    cir.call @printLine(%73) : (!cir.ptr<!s8i>) -> () loc(#loc116)
    cir.br ^bb14 loc(#loc105)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc105)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc100)
  ^bb16:  // 2 preds: ^bb9, ^bb15
    cir.br ^bb17 loc(#loc100)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc85)
  } loc(#loc211)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc227)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc228)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc123)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc229)
    cir.br ^bb1 loc(#loc230)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc231)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc231)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc127)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc127)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc232)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc132)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc132)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc133)
    cir.br ^bb4 loc(#loc130)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<2> : !s32i loc(#loc134)
    %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc134)
    cir.store %10, %1 : !s64i, !cir.ptr<!s64i> loc(#loc233)
    cir.br ^bb4 loc(#loc126)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc126)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc234)
  ^bb6:  // pred: ^bb5
    %11 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc235)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc235)
    %13 = cir.call %12() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc138)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc138)
    cir.brcond %14 ^bb7, ^bb10 loc(#loc236)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc237)
  ^bb8:  // pred: ^bb7
    %15 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc143)
    %16 = cir.unary(inc, %15) : !s64i, !s64i loc(#loc143)
    cir.store %16, %1 : !s64i, !cir.ptr<!s64i> loc(#loc238)
    %17 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc120)
    cir.store %17, %0 : !s64i, !cir.ptr<!s64i> loc(#loc227)
    %18 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc145)
    cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc146)
    cir.br ^bb9 loc(#loc142)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc137)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc137)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc118)
  } loc(#loc226)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc240)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc241)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc153)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc242)
    cir.br ^bb1 loc(#loc243)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc244)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc244)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc157)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc157)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc245)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<2> : !s32i loc(#loc160)
    %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc160)
    cir.store %8, %1 : !s64i, !cir.ptr<!s64i> loc(#loc246)
    cir.br ^bb3 loc(#loc156)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc156)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc247)
  ^bb5:  // pred: ^bb4
    %9 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc248)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc248)
    %11 = cir.call %10() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc164)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc164)
    cir.brcond %12 ^bb6, ^bb9 loc(#loc249)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc250)
  ^bb7:  // pred: ^bb6
    %13 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc169)
    %14 = cir.unary(inc, %13) : !s64i, !s64i loc(#loc169)
    cir.store %14, %1 : !s64i, !cir.ptr<!s64i> loc(#loc251)
    %15 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc150)
    cir.store %15, %0 : !s64i, !cir.ptr<!s64i> loc(#loc240)
    %16 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc171)
    cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc172)
    cir.br ^bb8 loc(#loc168)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc163)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc163)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc148)
  } loc(#loc239)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":22:1)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":40:1)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":36:13)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":36:30)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":24:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":24:13)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":25:12)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":25:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":26:5)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":30:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":26:8)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":26:26)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":27:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":29:9)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":31:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":39:5)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":31:8)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":31:26)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":32:5)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":33:9)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":38:9)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":35:13)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":35:15)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":37:31)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":37:13)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":150:1)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":156:1)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":152:5)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":152:14)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":153:5)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":153:14)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":154:5)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":154:14)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":155:5)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":155:14)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":59:19)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":72:23)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":47:1)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":75:1)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":67:13)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":67:30)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":49:5)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":49:13)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":50:12)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":50:5)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":51:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":55:5)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":51:8)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":51:26)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":52:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":54:9)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":56:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":74:5)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":56:8)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":56:27)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":57:5)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":60:5)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":62:5)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":59:9)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":64:9)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":73:9)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":64:13)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":64:20)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":65:9)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":69:9)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":71:9)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":66:13)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":66:15)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":68:31)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":68:13)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":72:13)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":78:1)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":101:1)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":93:13)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":93:30)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":80:5)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":80:13)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":81:12)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":81:5)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":82:5)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":86:5)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":82:8)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":82:26)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":83:5)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":85:9)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":87:5)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":100:5)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":87:8)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":87:26)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":88:5)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":90:9)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":99:9)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":90:13)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":90:20)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":91:9)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":95:9)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":97:9)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":92:13)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":92:15)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":94:31)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":94:13)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":98:23)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":98:13)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":104:1)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":127:1)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":123:13)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":123:30)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":106:5)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":106:13)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":107:12)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":107:5)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":108:5)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":117:5)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":108:8)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":108:27)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":109:5)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":112:5)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":114:5)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":111:19)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":111:9)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":116:16)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":116:9)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":118:5)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":126:5)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":118:8)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":118:26)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":119:5)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":120:9)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":125:9)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":122:13)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":122:15)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":124:31)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":124:13)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":130:1)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":148:1)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":144:13)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":144:30)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":132:5)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":132:13)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":133:12)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":133:5)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":134:5)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":138:5)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":134:8)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":134:26)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":135:5)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":137:16)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":137:9)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":139:5)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":147:5)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":139:8)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":139:26)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":140:5)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":141:9)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":146:9)
#loc169 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":143:13)
#loc170 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":143:15)
#loc171 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":145:31)
#loc172 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_11.c":145:13)
#loc173 = loc(fused[#loc1, #loc2])
#loc174 = loc(fused[#loc3, #loc4])
#loc175 = loc(fused[#loc5, #loc6])
#loc176 = loc(fused[#loc7, #loc8])
#loc177 = loc(fused[#loc9, #loc10])
#loc178 = loc(fused[#loc11, #loc12])
#loc179 = loc(fused[#loc14, #loc13])
#loc180 = loc(fused[#loc15, #loc16])
#loc181 = loc(fused[#loc17, #loc18])
#loc182 = loc(fused[#loc19, #loc16])
#loc183 = loc(fused[#loc21, #loc20])
#loc184 = loc(fused[#loc22, #loc23])
#loc185 = loc(fused[#loc24, #loc25])
#loc186 = loc(fused[#loc26, #loc23])
#loc187 = loc(fused[#loc27, #loc28])
#loc188 = loc(fused[#loc29, #loc30])
#loc189 = loc(fused[#loc33, #loc34])
#loc190 = loc(fused[#loc35, #loc36])
#loc191 = loc(fused[#loc37, #loc38])
#loc192 = loc(fused[#loc39, #loc40])
#loc193 = loc(fused[#loc41, #loc42])
#loc194 = loc(fused[#loc43, #loc44])
#loc195 = loc(fused[#loc45, #loc46])
#loc196 = loc(fused[#loc49, #loc50])
#loc197 = loc(fused[#loc51, #loc52])
#loc198 = loc(fused[#loc53, #loc54])
#loc199 = loc(fused[#loc56, #loc55])
#loc200 = loc(fused[#loc57, #loc58])
#loc201 = loc(fused[#loc59, #loc60])
#loc202 = loc(fused[#loc61, #loc58])
#loc203 = loc(fused[#loc63, #loc62])
#loc204 = loc(fused[#loc64, #loc65])
#loc205 = loc(fused[#loc66, #loc67])
#loc206 = loc(fused[#loc68, #loc69, #loc70, #loc65])
#loc207 = loc(fused[#loc72, #loc73])
#loc208 = loc(fused[#loc74, #loc75])
#loc209 = loc(fused[#loc76, #loc77, #loc78, #loc73])
#loc210 = loc(fused[#loc79, #loc80])
#loc211 = loc(fused[#loc84, #loc85])
#loc212 = loc(fused[#loc86, #loc87])
#loc213 = loc(fused[#loc88, #loc89])
#loc214 = loc(fused[#loc91, #loc90])
#loc215 = loc(fused[#loc92, #loc93])
#loc216 = loc(fused[#loc94, #loc95])
#loc217 = loc(fused[#loc96, #loc93])
#loc218 = loc(fused[#loc98, #loc97])
#loc219 = loc(fused[#loc99, #loc100])
#loc220 = loc(fused[#loc101, #loc102])
#loc221 = loc(fused[#loc103, #loc100])
#loc222 = loc(fused[#loc104, #loc105])
#loc223 = loc(fused[#loc106, #loc107])
#loc224 = loc(fused[#loc108, #loc109, #loc110, #loc105])
#loc225 = loc(fused[#loc111, #loc112])
#loc226 = loc(fused[#loc117, #loc118])
#loc227 = loc(fused[#loc119, #loc120])
#loc228 = loc(fused[#loc121, #loc122])
#loc229 = loc(fused[#loc124, #loc123])
#loc230 = loc(fused[#loc125, #loc126])
#loc231 = loc(fused[#loc127, #loc128])
#loc232 = loc(fused[#loc129, #loc130, #loc131, #loc126])
#loc233 = loc(fused[#loc135, #loc134])
#loc234 = loc(fused[#loc136, #loc137])
#loc235 = loc(fused[#loc138, #loc139])
#loc236 = loc(fused[#loc140, #loc137])
#loc237 = loc(fused[#loc141, #loc142])
#loc238 = loc(fused[#loc143, #loc144])
#loc239 = loc(fused[#loc147, #loc148])
#loc240 = loc(fused[#loc149, #loc150])
#loc241 = loc(fused[#loc151, #loc152])
#loc242 = loc(fused[#loc154, #loc153])
#loc243 = loc(fused[#loc155, #loc156])
#loc244 = loc(fused[#loc157, #loc158])
#loc245 = loc(fused[#loc159, #loc156])
#loc246 = loc(fused[#loc161, #loc160])
#loc247 = loc(fused[#loc162, #loc163])
#loc248 = loc(fused[#loc164, #loc165])
#loc249 = loc(fused[#loc166, #loc163])
#loc250 = loc(fused[#loc167, #loc168])
#loc251 = loc(fused[#loc169, #loc170])
