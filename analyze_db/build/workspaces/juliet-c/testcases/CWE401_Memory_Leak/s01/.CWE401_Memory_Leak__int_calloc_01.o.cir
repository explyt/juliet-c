!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int_calloc_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc89)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc90)
  cir.func private @printIntLine(!s32i) loc(#loc91)
  cir.func no_proto @CWE401_Memory_Leak__int_calloc_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc93)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc11)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc94)
    %2 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc13)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc14)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc14)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc95)
    %6 = cir.call @calloc(%4, %5) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc13)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc96)
    cir.store %7, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc97)
    cir.br ^bb1 loc(#loc98)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc21)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc22)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc22)
    %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s32i>, !cir.bool loc(#loc99)
    cir.brcond %11 ^bb2, ^bb3 loc(#loc100)
  ^bb2:  // pred: ^bb1
    %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc24)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc26)
    cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc24)
    cir.br ^bb3 loc(#loc20)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc20)
  ^bb4:  // pred: ^bb3
    %15 = cir.const #cir.int<5> : !s32i loc(#loc27)
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc28)
    %17 = cir.const #cir.int<0> : !s32i loc(#loc29)
    %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc30)
    cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc31)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc32)
    %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc33)
    %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc34)
    cir.return loc(#loc8)
  } loc(#loc92)
  cir.func no_proto @CWE401_Memory_Leak__int_calloc_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc103)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc104)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    cir.return loc(#loc36)
  } loc(#loc102)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc106)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc45)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc107)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc47)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc47)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc47)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc47)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc47)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc47)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc47)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc108)
    %9 = cir.const #cir.int<5> : !s32i loc(#loc49)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc50)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc51)
    %12 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc52)
    cir.store %9, %12 : !s32i, !cir.ptr<!s32i> loc(#loc109)
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc53)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc54)
    %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc55)
    %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc56)
    cir.return loc(#loc42)
  } loc(#loc105)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc110)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc112)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc63)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc113)
    %2 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc65)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc66)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc66)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc114)
    %6 = cir.call @calloc(%4, %5) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc65)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc115)
    cir.store %7, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc116)
    cir.br ^bb1 loc(#loc117)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc73)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc74)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc74)
    %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s32i>, !cir.bool loc(#loc118)
    cir.brcond %11 ^bb2, ^bb3 loc(#loc119)
  ^bb2:  // pred: ^bb1
    %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc76)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc77)
    %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc78)
    cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc76)
    cir.br ^bb3 loc(#loc72)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc72)
  ^bb4:  // pred: ^bb3
    %15 = cir.const #cir.int<5> : !s32i loc(#loc79)
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc80)
    %17 = cir.const #cir.int<0> : !s32i loc(#loc81)
    %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc82)
    cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc120)
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc83)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc84)
    %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc85)
    %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc83)
    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc86)
    %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc87)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc87)
    cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc88)
    cir.return loc(#loc60)
  } loc(#loc111)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int_calloc_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":675:1)
#loc2 = loc("/usr/include/stdlib.h":676:14)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE401_Memory_Leak__int_calloc_01.c":24:1)
#loc8 = loc("CWE401_Memory_Leak__int_calloc_01.c":36:1)
#loc9 = loc("CWE401_Memory_Leak__int_calloc_01.c":26:5)
#loc10 = loc("CWE401_Memory_Leak__int_calloc_01.c":26:11)
#loc11 = loc("CWE401_Memory_Leak__int_calloc_01.c":27:12)
#loc12 = loc("CWE401_Memory_Leak__int_calloc_01.c":27:5)
#loc13 = loc("CWE401_Memory_Leak__int_calloc_01.c":29:19)
#loc14 = loc("CWE401_Memory_Leak__int_calloc_01.c":29:26)
#loc15 = loc("CWE401_Memory_Leak__int_calloc_01.c":29:31)
#loc16 = loc("CWE401_Memory_Leak__int_calloc_01.c":29:41)
#loc17 = loc("CWE401_Memory_Leak__int_calloc_01.c":29:42)
#loc18 = loc("CWE401_Memory_Leak__int_calloc_01.c":29:5)
#loc19 = loc("CWE401_Memory_Leak__int_calloc_01.c":30:5)
#loc20 = loc("CWE401_Memory_Leak__int_calloc_01.c":30:33)
#loc21 = loc("CWE401_Memory_Leak__int_calloc_01.c":30:9)
#loc22 = loc("CWE401_Memory_Leak__int_calloc_01.c":30:17)
#loc23 = loc("CWE401_Memory_Leak__int_calloc_01.c":30:23)
#loc24 = loc("CWE401_Memory_Leak__int_calloc_01.c":30:24)
#loc25 = loc("CWE401_Memory_Leak__int_calloc_01.c":30:30)
#loc26 = loc("CWE401_Memory_Leak__int_calloc_01.c":30:29)
#loc27 = loc("CWE401_Memory_Leak__int_calloc_01.c":32:15)
#loc28 = loc("CWE401_Memory_Leak__int_calloc_01.c":32:5)
#loc29 = loc("CWE401_Memory_Leak__int_calloc_01.c":32:10)
#loc30 = loc("CWE401_Memory_Leak__int_calloc_01.c":32:11)
#loc31 = loc("CWE401_Memory_Leak__int_calloc_01.c":33:18)
#loc32 = loc("CWE401_Memory_Leak__int_calloc_01.c":33:23)
#loc33 = loc("CWE401_Memory_Leak__int_calloc_01.c":33:24)
#loc34 = loc("CWE401_Memory_Leak__int_calloc_01.c":33:5)
#loc35 = loc("CWE401_Memory_Leak__int_calloc_01.c":71:1)
#loc36 = loc("CWE401_Memory_Leak__int_calloc_01.c":75:1)
#loc37 = loc("CWE401_Memory_Leak__int_calloc_01.c":73:5)
#loc38 = loc("CWE401_Memory_Leak__int_calloc_01.c":73:13)
#loc39 = loc("CWE401_Memory_Leak__int_calloc_01.c":74:5)
#loc40 = loc("CWE401_Memory_Leak__int_calloc_01.c":74:13)
#loc41 = loc("CWE401_Memory_Leak__int_calloc_01.c":43:1)
#loc42 = loc("CWE401_Memory_Leak__int_calloc_01.c":54:1)
#loc43 = loc("CWE401_Memory_Leak__int_calloc_01.c":45:5)
#loc44 = loc("CWE401_Memory_Leak__int_calloc_01.c":45:11)
#loc45 = loc("CWE401_Memory_Leak__int_calloc_01.c":46:12)
#loc46 = loc("CWE401_Memory_Leak__int_calloc_01.c":46:5)
#loc47 = loc("CWE401_Memory_Leak__int_calloc_01.c":48:19)
#loc48 = loc("CWE401_Memory_Leak__int_calloc_01.c":48:5)
#loc49 = loc("CWE401_Memory_Leak__int_calloc_01.c":50:15)
#loc50 = loc("CWE401_Memory_Leak__int_calloc_01.c":50:5)
#loc51 = loc("CWE401_Memory_Leak__int_calloc_01.c":50:10)
#loc52 = loc("CWE401_Memory_Leak__int_calloc_01.c":50:11)
#loc53 = loc("CWE401_Memory_Leak__int_calloc_01.c":51:18)
#loc54 = loc("CWE401_Memory_Leak__int_calloc_01.c":51:23)
#loc55 = loc("CWE401_Memory_Leak__int_calloc_01.c":51:24)
#loc56 = loc("CWE401_Memory_Leak__int_calloc_01.c":51:5)
#loc57 = loc("/usr/include/stdlib.h":687:1)
#loc58 = loc("/usr/include/stdlib.h":687:32)
#loc59 = loc("CWE401_Memory_Leak__int_calloc_01.c":57:1)
#loc60 = loc("CWE401_Memory_Leak__int_calloc_01.c":69:1)
#loc61 = loc("CWE401_Memory_Leak__int_calloc_01.c":59:5)
#loc62 = loc("CWE401_Memory_Leak__int_calloc_01.c":59:11)
#loc63 = loc("CWE401_Memory_Leak__int_calloc_01.c":60:12)
#loc64 = loc("CWE401_Memory_Leak__int_calloc_01.c":60:5)
#loc65 = loc("CWE401_Memory_Leak__int_calloc_01.c":62:19)
#loc66 = loc("CWE401_Memory_Leak__int_calloc_01.c":62:26)
#loc67 = loc("CWE401_Memory_Leak__int_calloc_01.c":62:31)
#loc68 = loc("CWE401_Memory_Leak__int_calloc_01.c":62:41)
#loc69 = loc("CWE401_Memory_Leak__int_calloc_01.c":62:42)
#loc70 = loc("CWE401_Memory_Leak__int_calloc_01.c":62:5)
#loc71 = loc("CWE401_Memory_Leak__int_calloc_01.c":63:5)
#loc72 = loc("CWE401_Memory_Leak__int_calloc_01.c":63:33)
#loc73 = loc("CWE401_Memory_Leak__int_calloc_01.c":63:9)
#loc74 = loc("CWE401_Memory_Leak__int_calloc_01.c":63:17)
#loc75 = loc("CWE401_Memory_Leak__int_calloc_01.c":63:23)
#loc76 = loc("CWE401_Memory_Leak__int_calloc_01.c":63:24)
#loc77 = loc("CWE401_Memory_Leak__int_calloc_01.c":63:30)
#loc78 = loc("CWE401_Memory_Leak__int_calloc_01.c":63:29)
#loc79 = loc("CWE401_Memory_Leak__int_calloc_01.c":65:15)
#loc80 = loc("CWE401_Memory_Leak__int_calloc_01.c":65:5)
#loc81 = loc("CWE401_Memory_Leak__int_calloc_01.c":65:10)
#loc82 = loc("CWE401_Memory_Leak__int_calloc_01.c":65:11)
#loc83 = loc("CWE401_Memory_Leak__int_calloc_01.c":66:18)
#loc84 = loc("CWE401_Memory_Leak__int_calloc_01.c":66:23)
#loc85 = loc("CWE401_Memory_Leak__int_calloc_01.c":66:24)
#loc86 = loc("CWE401_Memory_Leak__int_calloc_01.c":66:5)
#loc87 = loc("CWE401_Memory_Leak__int_calloc_01.c":68:10)
#loc88 = loc("CWE401_Memory_Leak__int_calloc_01.c":68:5)
#loc89 = loc(fused[#loc1, #loc2])
#loc90 = loc(fused[#loc3, #loc4])
#loc91 = loc(fused[#loc5, #loc6])
#loc92 = loc(fused[#loc7, #loc8])
#loc93 = loc(fused[#loc9, #loc10])
#loc94 = loc(fused[#loc12, #loc11])
#loc95 = loc(fused[#loc15, #loc16])
#loc96 = loc(fused[#loc13, #loc17])
#loc97 = loc(fused[#loc18, #loc17])
#loc98 = loc(fused[#loc19, #loc20])
#loc99 = loc(fused[#loc21, #loc22])
#loc100 = loc(fused[#loc23, #loc20])
#loc101 = loc(fused[#loc28, #loc27])
#loc102 = loc(fused[#loc35, #loc36])
#loc103 = loc(fused[#loc37, #loc38])
#loc104 = loc(fused[#loc39, #loc40])
#loc105 = loc(fused[#loc41, #loc42])
#loc106 = loc(fused[#loc43, #loc44])
#loc107 = loc(fused[#loc46, #loc45])
#loc108 = loc(fused[#loc48, #loc47])
#loc109 = loc(fused[#loc50, #loc49])
#loc110 = loc(fused[#loc57, #loc58])
#loc111 = loc(fused[#loc59, #loc60])
#loc112 = loc(fused[#loc61, #loc62])
#loc113 = loc(fused[#loc64, #loc63])
#loc114 = loc(fused[#loc67, #loc68])
#loc115 = loc(fused[#loc65, #loc69])
#loc116 = loc(fused[#loc70, #loc69])
#loc117 = loc(fused[#loc71, #loc72])
#loc118 = loc(fused[#loc73, #loc74])
#loc119 = loc(fused[#loc75, #loc72])
#loc120 = loc(fused[#loc80, #loc79])
