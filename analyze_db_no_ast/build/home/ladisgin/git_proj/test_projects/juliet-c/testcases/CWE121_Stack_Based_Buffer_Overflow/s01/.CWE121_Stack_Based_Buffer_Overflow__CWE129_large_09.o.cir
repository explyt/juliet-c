!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  constant external @GLOBAL_CONST_TRUE : !s32i {alignment = 4 : i64} loc(#loc282)
  cir.func private  @printIntLine(!s32i) loc(#loc283)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc284)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc286)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc287)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc282)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc17)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc17)
      cir.if %5 {
        %6 = cir.const #cir.int<10> : !s32i loc(#loc19)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc290)
      } loc(#loc289)
    } loc(#loc288)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc282)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc23)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc23)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc294)
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc295)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc295)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc295)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc34)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !s32i loc(#loc297)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc35)
            cir.if %12 {
              %13 = cir.const #cir.int<1> : !s32i loc(#loc39)
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc40)
              %15 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc41)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc41)
              cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc299)
              cir.scope {
                %17 = cir.const #cir.int<0> : !s32i loc(#loc44)
                cir.store %17, %6 : !s32i, !cir.ptr<!s32i> loc(#loc301)
                cir.for : cond {
                  %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc46)
                  %19 = cir.const #cir.int<10> : !s32i loc(#loc47)
                  %20 = cir.cmp(lt, %18, %19) : !s32i, !s32i loc(#loc302)
                  %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc48)
                  cir.condition(%21) loc(#loc48)
                } body {
                  cir.scope {
                    %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc50)
                    %19 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc51)
                    %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc51)
                    %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc51)
                    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc52)
                  } loc(#loc303)
                  cir.yield loc(#loc43)
                } step {
                  %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc53)
                  %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc54)
                  cir.store %19, %6 : !s32i, !cir.ptr<!s32i> loc(#loc304)
                  cir.yield loc(#loc300)
                } loc(#loc300)
              } loc(#loc300)
            } else {
              %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc7)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc7)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc55)
            } loc(#loc298)
          } loc(#loc296)
        } loc(#loc293)
      } loc(#loc292)
    } loc(#loc291)
    cir.return loc(#loc9)
  } loc(#loc285)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc306)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc307)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc60)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc308)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc62)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc309)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc64)
    cir.return loc(#loc57)
  } loc(#loc305)
  cir.global "private"  constant external @GLOBAL_CONST_FALSE : !s32i {alignment = 4 : i64} loc(#loc310)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc68)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc69)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc312)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc74)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc75)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc313)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc282)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc79)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc79)
      cir.if %5 {
        %6 = cir.const #cir.int<10> : !s32i loc(#loc81)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc316)
      } loc(#loc315)
    } loc(#loc314)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc310)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc85)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc85)
      cir.if %5 {
        %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc68)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc68)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc89)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc320)
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc321)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc321)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc321)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc98)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc99)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !s32i loc(#loc323)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc100)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc102)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc103)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc324)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc105)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc101)
                cir.yield %19 : !cir.bool loc(#loc101)
              }, false {
                %19 = cir.const #false loc(#loc101)
                cir.yield %19 : !cir.bool loc(#loc101)
              }) : (!cir.bool) -> !cir.bool loc(#loc101)
              cir.yield %18 : !cir.bool loc(#loc101)
            }, false {
              %14 = cir.const #false loc(#loc101)
              cir.yield %14 : !cir.bool loc(#loc101)
            }) : (!cir.bool) -> !cir.bool loc(#loc101)
            cir.if %13 {
              %14 = cir.const #cir.int<1> : !s32i loc(#loc109)
              %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
              %16 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc111)
              %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc111)
              cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc326)
              cir.scope {
                %18 = cir.const #cir.int<0> : !s32i loc(#loc114)
                cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc328)
                cir.for : cond {
                  %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                  %20 = cir.const #cir.int<10> : !s32i loc(#loc117)
                  %21 = cir.cmp(lt, %19, %20) : !s32i, !s32i loc(#loc329)
                  %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc118)
                  cir.condition(%22) loc(#loc118)
                } body {
                  cir.scope {
                    %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc120)
                    %20 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc121)
                    %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc121)
                    %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc121)
                    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc122)
                  } loc(#loc330)
                  cir.yield loc(#loc113)
                } step {
                  %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc123)
                  %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc124)
                  cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc331)
                  cir.yield loc(#loc327)
                } loc(#loc327)
              } loc(#loc327)
            } else {
              %14 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc69)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc69)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc125)
            } loc(#loc325)
          } loc(#loc322)
        } loc(#loc319)
      } loc(#loc318)
    } loc(#loc317)
    cir.return loc(#loc71)
  } loc(#loc311)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc333)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc130)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc131)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc334)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc282)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc135)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc135)
      cir.if %5 {
        %6 = cir.const #cir.int<10> : !s32i loc(#loc137)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc337)
      } loc(#loc336)
    } loc(#loc335)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc282)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc141)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc141)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc341)
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc342)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc342)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc342)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc151)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc152)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !s32i loc(#loc344)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc153)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc155)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc156)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc345)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc158)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc154)
                cir.yield %19 : !cir.bool loc(#loc154)
              }, false {
                %19 = cir.const #false loc(#loc154)
                cir.yield %19 : !cir.bool loc(#loc154)
              }) : (!cir.bool) -> !cir.bool loc(#loc154)
              cir.yield %18 : !cir.bool loc(#loc154)
            }, false {
              %14 = cir.const #false loc(#loc154)
              cir.yield %14 : !cir.bool loc(#loc154)
            }) : (!cir.bool) -> !cir.bool loc(#loc154)
            cir.if %13 {
              %14 = cir.const #cir.int<1> : !s32i loc(#loc162)
              %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc163)
              %16 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc164)
              %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc164)
              cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc347)
              cir.scope {
                %18 = cir.const #cir.int<0> : !s32i loc(#loc167)
                cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc349)
                cir.for : cond {
                  %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc169)
                  %20 = cir.const #cir.int<10> : !s32i loc(#loc170)
                  %21 = cir.cmp(lt, %19, %20) : !s32i, !s32i loc(#loc350)
                  %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc171)
                  cir.condition(%22) loc(#loc171)
                } body {
                  cir.scope {
                    %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc173)
                    %20 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc174)
                    %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc174)
                    %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc174)
                    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc175)
                  } loc(#loc351)
                  cir.yield loc(#loc166)
                } step {
                  %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc176)
                  %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc177)
                  cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc352)
                  cir.yield loc(#loc348)
                } loc(#loc348)
              } loc(#loc348)
            } else {
              %14 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc178)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc178)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc179)
            } loc(#loc346)
          } loc(#loc343)
        } loc(#loc340)
      } loc(#loc339)
    } loc(#loc338)
    cir.return loc(#loc127)
  } loc(#loc332)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc354)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc184)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc185)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc355)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc310)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc189)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc189)
      cir.if %5 {
        %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc193)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc193)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc194)
      } else {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc195)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc358)
      } loc(#loc357)
    } loc(#loc356)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc282)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc199)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc199)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc362)
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc363)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc363)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc363)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc209)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc210)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !s32i loc(#loc365)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc211)
            cir.if %12 {
              %13 = cir.const #cir.int<1> : !s32i loc(#loc215)
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc216)
              %15 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc217)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc217)
              cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc367)
              cir.scope {
                %17 = cir.const #cir.int<0> : !s32i loc(#loc220)
                cir.store %17, %6 : !s32i, !cir.ptr<!s32i> loc(#loc369)
                cir.for : cond {
                  %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc222)
                  %19 = cir.const #cir.int<10> : !s32i loc(#loc223)
                  %20 = cir.cmp(lt, %18, %19) : !s32i, !s32i loc(#loc370)
                  %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc224)
                  cir.condition(%21) loc(#loc224)
                } body {
                  cir.scope {
                    %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc226)
                    %19 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc227)
                    %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc227)
                    %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc227)
                    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc228)
                  } loc(#loc371)
                  cir.yield loc(#loc219)
                } step {
                  %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc229)
                  %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc230)
                  cir.store %19, %6 : !s32i, !cir.ptr<!s32i> loc(#loc372)
                  cir.yield loc(#loc368)
                } loc(#loc368)
              } loc(#loc368)
            } else {
              %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc231)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc231)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc232)
            } loc(#loc366)
          } loc(#loc364)
        } loc(#loc361)
      } loc(#loc360)
    } loc(#loc359)
    cir.return loc(#loc181)
  } loc(#loc353)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc374)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc237)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc238)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc375)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc282)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc242)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc242)
      cir.if %5 {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc244)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc378)
      } loc(#loc377)
    } loc(#loc376)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc282)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc248)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc248)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc382)
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc383)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc383)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc383)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc258)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc259)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !s32i loc(#loc385)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc260)
            cir.if %12 {
              %13 = cir.const #cir.int<1> : !s32i loc(#loc264)
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc265)
              %15 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc266)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc266)
              cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc387)
              cir.scope {
                %17 = cir.const #cir.int<0> : !s32i loc(#loc269)
                cir.store %17, %6 : !s32i, !cir.ptr<!s32i> loc(#loc389)
                cir.for : cond {
                  %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc271)
                  %19 = cir.const #cir.int<10> : !s32i loc(#loc272)
                  %20 = cir.cmp(lt, %18, %19) : !s32i, !s32i loc(#loc390)
                  %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc273)
                  cir.condition(%21) loc(#loc273)
                } body {
                  cir.scope {
                    %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc275)
                    %19 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc276)
                    %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc276)
                    %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc276)
                    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc277)
                  } loc(#loc391)
                  cir.yield loc(#loc268)
                } step {
                  %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc278)
                  %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc279)
                  cir.store %19, %6 : !s32i, !cir.ptr<!s32i> loc(#loc392)
                  cir.yield loc(#loc388)
                } loc(#loc388)
              } loc(#loc388)
            } else {
              %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc280)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc280)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc281)
            } loc(#loc386)
          } loc(#loc384)
        } loc(#loc381)
      } loc(#loc380)
    } loc(#loc379)
    cir.return loc(#loc234)
  } loc(#loc373)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":109:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":109:18)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":50:27)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":22:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":54:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":24:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":24:9)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":26:13)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":26:12)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":26:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":27:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":31:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":27:8)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":28:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":30:16)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":30:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":32:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":53:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":32:8)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":33:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":34:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":52:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":35:13)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":35:17)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":36:13)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":36:34)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":39:13)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":51:13)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":39:17)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":39:25)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":39:22)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":40:13)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":47:13)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":49:13)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":41:32)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":41:24)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":41:17)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":43:17)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":46:17)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":43:25)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":43:21)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":43:28)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":43:32)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":43:30)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":44:17)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":45:41)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":45:34)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":45:21)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":43:37)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":43:36)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":50:17)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":210:1)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":216:1)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":212:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":212:14)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":213:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":213:14)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":214:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":214:14)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":215:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":215:14)
#loc66 = loc("../../../testcasesupport/std_testcase.h":110:1)
#loc67 = loc("../../../testcasesupport/std_testcase.h":110:18)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":74:19)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":93:27)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":61:1)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":97:1)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":63:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":63:9)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":65:13)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":65:12)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":65:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":66:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":70:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":66:8)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":67:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":69:16)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":69:9)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":71:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":96:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":71:8)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":72:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":75:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":77:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":74:9)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":78:9)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":95:9)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":79:13)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":79:17)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":80:13)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":80:34)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":82:13)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":94:13)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":82:17)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":82:25)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":82:22)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":82:27)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":82:30)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":82:38)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":82:40)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":82:35)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":83:13)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":90:13)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":92:13)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":84:32)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":84:24)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":84:17)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":86:17)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":89:17)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":86:25)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":86:21)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":86:28)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":86:32)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":86:30)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":87:17)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":88:41)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":88:34)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":88:21)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":86:37)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":86:36)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":93:17)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":100:1)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":131:1)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":102:5)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":102:9)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":104:13)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":104:12)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":104:5)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":105:5)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":109:5)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":105:8)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":106:5)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":108:16)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":108:9)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":110:5)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":130:5)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":110:8)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":111:5)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":112:9)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":129:9)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":113:13)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":113:17)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":114:13)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":114:34)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":116:13)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":128:13)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":116:17)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":116:25)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":116:22)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":116:27)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":116:30)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":116:38)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":116:40)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":116:35)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":117:13)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":124:13)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":126:13)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":118:32)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":118:24)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":118:17)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":120:17)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":123:17)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":120:25)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":120:21)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":120:28)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":120:32)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":120:30)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":121:17)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":122:41)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":122:34)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":122:21)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":120:37)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":120:36)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":127:27)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":127:17)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":134:1)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":172:1)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":136:5)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":136:9)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":138:13)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":138:12)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":138:5)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":139:5)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":149:5)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":139:8)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":140:5)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":143:5)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":145:5)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":142:19)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":142:9)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":148:16)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":148:9)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":150:5)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":171:5)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":150:8)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":151:5)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":152:9)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":170:9)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":153:13)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":153:17)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":154:13)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":154:34)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":157:13)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":169:13)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":157:17)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":157:25)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":157:22)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":158:13)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":165:13)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":167:13)
#loc215 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":159:32)
#loc216 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":159:24)
#loc217 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":159:17)
#loc218 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":161:17)
#loc219 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":164:17)
#loc220 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":161:25)
#loc221 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":161:21)
#loc222 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":161:28)
#loc223 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":161:32)
#loc224 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":161:30)
#loc225 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":162:17)
#loc226 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":163:41)
#loc227 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":163:34)
#loc228 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":163:21)
#loc229 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":161:37)
#loc230 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":161:36)
#loc231 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":168:27)
#loc232 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":168:17)
#loc233 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":175:1)
#loc234 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":208:1)
#loc235 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":177:5)
#loc236 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":177:9)
#loc237 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":179:13)
#loc238 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":179:12)
#loc239 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":179:5)
#loc240 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":180:5)
#loc241 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":185:5)
#loc242 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":180:8)
#loc243 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":181:5)
#loc244 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":184:16)
#loc245 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":184:9)
#loc246 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":186:5)
#loc247 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":207:5)
#loc248 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":186:8)
#loc249 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":187:5)
#loc250 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":188:9)
#loc251 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":206:9)
#loc252 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":189:13)
#loc253 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":189:17)
#loc254 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":190:13)
#loc255 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":190:34)
#loc256 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":193:13)
#loc257 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":205:13)
#loc258 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":193:17)
#loc259 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":193:25)
#loc260 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":193:22)
#loc261 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":194:13)
#loc262 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":201:13)
#loc263 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":203:13)
#loc264 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":195:32)
#loc265 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":195:24)
#loc266 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":195:17)
#loc267 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":197:17)
#loc268 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":200:17)
#loc269 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":197:25)
#loc270 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":197:21)
#loc271 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":197:28)
#loc272 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":197:32)
#loc273 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":197:30)
#loc274 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":198:17)
#loc275 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":199:41)
#loc276 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":199:34)
#loc277 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":199:21)
#loc278 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":197:37)
#loc279 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":197:36)
#loc280 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":204:27)
#loc281 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c":204:17)
#loc282 = loc(fused[#loc1, #loc2])
#loc283 = loc(fused[#loc3, #loc4])
#loc284 = loc(fused[#loc5, #loc6])
#loc285 = loc(fused[#loc8, #loc9])
#loc286 = loc(fused[#loc10, #loc11])
#loc287 = loc(fused[#loc14, #loc12])
#loc288 = loc(fused[#loc15, #loc16])
#loc289 = loc(fused[#loc18, #loc16])
#loc290 = loc(fused[#loc20, #loc19])
#loc291 = loc(fused[#loc21, #loc22])
#loc292 = loc(fused[#loc24, #loc22])
#loc293 = loc(fused[#loc25, #loc26])
#loc294 = loc(fused[#loc27, #loc28])
#loc295 = loc(fused[#loc29, #loc30])
#loc296 = loc(fused[#loc31, #loc32])
#loc297 = loc(fused[#loc33, #loc34])
#loc298 = loc(fused[#loc36, #loc37, #loc38, #loc32])
#loc299 = loc(fused[#loc41, #loc39])
#loc300 = loc(fused[#loc42, #loc43])
#loc301 = loc(fused[#loc45, #loc44])
#loc302 = loc(fused[#loc46, #loc47])
#loc303 = loc(fused[#loc49, #loc43])
#loc304 = loc(fused[#loc54, #loc53])
#loc305 = loc(fused[#loc56, #loc57])
#loc306 = loc(fused[#loc58, #loc59])
#loc307 = loc(fused[#loc60, #loc61])
#loc308 = loc(fused[#loc62, #loc63])
#loc309 = loc(fused[#loc64, #loc65])
#loc310 = loc(fused[#loc66, #loc67])
#loc311 = loc(fused[#loc70, #loc71])
#loc312 = loc(fused[#loc72, #loc73])
#loc313 = loc(fused[#loc76, #loc74])
#loc314 = loc(fused[#loc77, #loc78])
#loc315 = loc(fused[#loc80, #loc78])
#loc316 = loc(fused[#loc82, #loc81])
#loc317 = loc(fused[#loc83, #loc84])
#loc318 = loc(fused[#loc86, #loc87, #loc88, #loc84])
#loc319 = loc(fused[#loc90, #loc91])
#loc320 = loc(fused[#loc92, #loc93])
#loc321 = loc(fused[#loc94, #loc95])
#loc322 = loc(fused[#loc96, #loc97])
#loc323 = loc(fused[#loc98, #loc99])
#loc324 = loc(fused[#loc102, #loc104])
#loc325 = loc(fused[#loc106, #loc107, #loc108, #loc97])
#loc326 = loc(fused[#loc111, #loc109])
#loc327 = loc(fused[#loc112, #loc113])
#loc328 = loc(fused[#loc115, #loc114])
#loc329 = loc(fused[#loc116, #loc117])
#loc330 = loc(fused[#loc119, #loc113])
#loc331 = loc(fused[#loc124, #loc123])
#loc332 = loc(fused[#loc126, #loc127])
#loc333 = loc(fused[#loc128, #loc129])
#loc334 = loc(fused[#loc132, #loc130])
#loc335 = loc(fused[#loc133, #loc134])
#loc336 = loc(fused[#loc136, #loc134])
#loc337 = loc(fused[#loc138, #loc137])
#loc338 = loc(fused[#loc139, #loc140])
#loc339 = loc(fused[#loc142, #loc140])
#loc340 = loc(fused[#loc143, #loc144])
#loc341 = loc(fused[#loc145, #loc146])
#loc342 = loc(fused[#loc147, #loc148])
#loc343 = loc(fused[#loc149, #loc150])
#loc344 = loc(fused[#loc151, #loc152])
#loc345 = loc(fused[#loc155, #loc157])
#loc346 = loc(fused[#loc159, #loc160, #loc161, #loc150])
#loc347 = loc(fused[#loc164, #loc162])
#loc348 = loc(fused[#loc165, #loc166])
#loc349 = loc(fused[#loc168, #loc167])
#loc350 = loc(fused[#loc169, #loc170])
#loc351 = loc(fused[#loc172, #loc166])
#loc352 = loc(fused[#loc177, #loc176])
#loc353 = loc(fused[#loc180, #loc181])
#loc354 = loc(fused[#loc182, #loc183])
#loc355 = loc(fused[#loc186, #loc184])
#loc356 = loc(fused[#loc187, #loc188])
#loc357 = loc(fused[#loc190, #loc191, #loc192, #loc188])
#loc358 = loc(fused[#loc196, #loc195])
#loc359 = loc(fused[#loc197, #loc198])
#loc360 = loc(fused[#loc200, #loc198])
#loc361 = loc(fused[#loc201, #loc202])
#loc362 = loc(fused[#loc203, #loc204])
#loc363 = loc(fused[#loc205, #loc206])
#loc364 = loc(fused[#loc207, #loc208])
#loc365 = loc(fused[#loc209, #loc210])
#loc366 = loc(fused[#loc212, #loc213, #loc214, #loc208])
#loc367 = loc(fused[#loc217, #loc215])
#loc368 = loc(fused[#loc218, #loc219])
#loc369 = loc(fused[#loc221, #loc220])
#loc370 = loc(fused[#loc222, #loc223])
#loc371 = loc(fused[#loc225, #loc219])
#loc372 = loc(fused[#loc230, #loc229])
#loc373 = loc(fused[#loc233, #loc234])
#loc374 = loc(fused[#loc235, #loc236])
#loc375 = loc(fused[#loc239, #loc237])
#loc376 = loc(fused[#loc240, #loc241])
#loc377 = loc(fused[#loc243, #loc241])
#loc378 = loc(fused[#loc245, #loc244])
#loc379 = loc(fused[#loc246, #loc247])
#loc380 = loc(fused[#loc249, #loc247])
#loc381 = loc(fused[#loc250, #loc251])
#loc382 = loc(fused[#loc252, #loc253])
#loc383 = loc(fused[#loc254, #loc255])
#loc384 = loc(fused[#loc256, #loc257])
#loc385 = loc(fused[#loc258, #loc259])
#loc386 = loc(fused[#loc261, #loc262, #loc263, #loc257])
#loc387 = loc(fused[#loc266, #loc264])
#loc388 = loc(fused[#loc267, #loc268])
#loc389 = loc(fused[#loc270, #loc269])
#loc390 = loc(fused[#loc271, #loc272])
#loc391 = loc(fused[#loc274, #loc268])
#loc392 = loc(fused[#loc279, #loc278])
