!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":21:21)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":21:31)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":56:25)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":56:35)
#loc136 = loc(fused[#loc7, #loc8])
#loc163 = loc(fused[#loc75, #loc76])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printLongLongLine(!s64i) loc(#loc133)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc134)
  cir.func internal private  @badSink(%arg0: !cir.ptr<!s64i> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc136)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc9)
    cir.scope {
      %1 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc138)
      %2 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc138)
      cir.store %2, %1 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc138)
      cir.scope {
        %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc140)
        cir.scope {
          %11 = cir.const #cir.int<0> : !s32i loc(#loc20)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc20)
          cir.store %12, %3 : !u64i, !cir.ptr<!u64i> loc(#loc142)
          cir.for : cond {
            %13 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc22)
            %14 = cir.const #cir.int<100> : !s32i loc(#loc23)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc23)
            %16 = cir.cmp(lt, %13, %15) : !u64i, !s32i loc(#loc143)
            %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc24)
            cir.condition(%17) loc(#loc24)
          } body {
            cir.scope {
              %13 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc26)
              %14 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc27)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s64i>, %13 : !u64i), !cir.ptr<!s64i> loc(#loc27)
              %16 = cir.load %15 : !cir.ptr<!s64i>, !s64i loc(#loc27)
              %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc28)
              %18 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc29)
              %19 = cir.ptr_stride(%17 : !cir.ptr<!s64i>, %18 : !u64i), !cir.ptr<!s64i> loc(#loc30)
              cir.store %16, %19 : !s64i, !cir.ptr<!s64i> loc(#loc145)
            } loc(#loc144)
            cir.yield loc(#loc19)
          } step {
            %13 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc32)
            %14 = cir.unary(inc, %13) : !u64i, !u64i loc(#loc33)
            cir.store %14, %3 : !u64i, !cir.ptr<!u64i> loc(#loc146)
            cir.yield loc(#loc141)
          } loc(#loc141)
        } loc(#loc141)
        %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc34)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc35)
        %6 = cir.ptr_stride(%4 : !cir.ptr<!s64i>, %5 : !s32i), !cir.ptr<!s64i> loc(#loc36)
        %7 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc34)
        cir.call @printLongLongLine(%7) : (!s64i) -> () loc(#loc37)
        %8 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc38)
        %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc39)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc39)
        cir.call @free(%10) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc38)
      } loc(#loc139)
    } loc(#loc137)
    cir.return loc(#loc6)
  } loc(#loc135)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc147)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc148)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc150)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s64i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s64i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc151)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s64i>)>> loc(#loc49)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s64i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s64i>)>>> loc(#loc151)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc50)
    cir.store %3, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc152)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc52)
    %5 = cir.const #cir.int<50> : !s32i loc(#loc53)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc53)
    %7 = cir.const #cir.int<8> : !u64i loc(#loc153)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc154)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc52)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc155)
    cir.store %10, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc156)
    cir.scope {
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc60)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc61)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc61)
      %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s64i>, !s32i loc(#loc158)
      %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc62)
      cir.if %17 {
        %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc64)
        %19 = cir.const #cir.int<1> : !s32i loc(#loc65)
        %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc66)
        cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc64)
      } loc(#loc159)
    } loc(#loc157)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s64i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s64i>)>> loc(#loc67)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc68)
    cir.call %11(%12) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s64i>)>>, !cir.ptr<!s64i>) -> () loc(#loc67)
    cir.return loc(#loc45)
  } loc(#loc149)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc161)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc71)
    cir.return loc(#loc70)
  } loc(#loc160)
  cir.func internal private  @goodG2BSink(%arg0: !cir.ptr<!s64i> loc(fused[#loc75, #loc76])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc163)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc77)
    cir.scope {
      %1 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc165)
      %2 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc165)
      cir.store %2, %1 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc165)
      cir.scope {
        %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc167)
        cir.scope {
          %11 = cir.const #cir.int<0> : !s32i loc(#loc88)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc88)
          cir.store %12, %3 : !u64i, !cir.ptr<!u64i> loc(#loc169)
          cir.for : cond {
            %13 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc90)
            %14 = cir.const #cir.int<100> : !s32i loc(#loc91)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc91)
            %16 = cir.cmp(lt, %13, %15) : !u64i, !s32i loc(#loc170)
            %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc92)
            cir.condition(%17) loc(#loc92)
          } body {
            cir.scope {
              %13 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc94)
              %14 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc95)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s64i>, %13 : !u64i), !cir.ptr<!s64i> loc(#loc95)
              %16 = cir.load %15 : !cir.ptr<!s64i>, !s64i loc(#loc95)
              %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc96)
              %18 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc97)
              %19 = cir.ptr_stride(%17 : !cir.ptr<!s64i>, %18 : !u64i), !cir.ptr<!s64i> loc(#loc98)
              cir.store %16, %19 : !s64i, !cir.ptr<!s64i> loc(#loc172)
            } loc(#loc171)
            cir.yield loc(#loc87)
          } step {
            %13 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc100)
            %14 = cir.unary(inc, %13) : !u64i, !u64i loc(#loc101)
            cir.store %14, %3 : !u64i, !cir.ptr<!u64i> loc(#loc173)
            cir.yield loc(#loc168)
          } loc(#loc168)
        } loc(#loc168)
        %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc102)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc103)
        %6 = cir.ptr_stride(%4 : !cir.ptr<!s64i>, %5 : !s32i), !cir.ptr<!s64i> loc(#loc104)
        %7 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc102)
        cir.call @printLongLongLine(%7) : (!s64i) -> () loc(#loc105)
        %8 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc106)
        %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc107)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc107)
        cir.call @free(%10) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc106)
      } loc(#loc166)
    } loc(#loc164)
    cir.return loc(#loc74)
  } loc(#loc162)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc175)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s64i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s64i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc176)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s64i>)>> loc(#loc113)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s64i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s64i>)>>> loc(#loc176)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc114)
    cir.store %3, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc177)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc116)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc117)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc117)
    %7 = cir.const #cir.int<8> : !u64i loc(#loc178)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc179)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc116)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc180)
    cir.store %10, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc181)
    cir.scope {
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc124)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc125)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc125)
      %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s64i>, !s32i loc(#loc183)
      %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc126)
      cir.if %17 {
        %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc128)
        %19 = cir.const #cir.int<1> : !s32i loc(#loc129)
        %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc130)
        cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc128)
      } loc(#loc184)
    } loc(#loc182)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s64i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s64i>)>> loc(#loc131)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc132)
    cir.call %11(%12) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s64i>)>>, !cir.ptr<!s64i>) -> () loc(#loc131)
    cir.return loc(#loc109)
  } loc(#loc174)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":36:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":22:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":23:5)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":35:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":24:9)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":24:33)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":25:9)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":34:9)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":26:13)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":26:20)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":28:13)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":31:13)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":28:22)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":28:18)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":28:25)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":28:29)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":28:27)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":29:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":30:34)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":30:27)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":30:17)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":30:22)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":30:23)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":30:35)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":28:35)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":28:34)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":32:31)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":32:36)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":32:37)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":32:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":33:13)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":33:18)
#loc40 = loc("/usr/include/stdlib.h":672:1)
#loc41 = loc("/usr/include/stdlib.h":672:45)
#loc42 = loc("/usr/include/stdlib.h":756:1)
#loc43 = loc("/usr/include/stdlib.h":756:70)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":38:1)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":49:1)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":40:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":40:15)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":42:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":42:35)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":43:12)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":43:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":45:23)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":45:30)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":45:33)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":45:47)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":45:48)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":45:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":46:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":46:33)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":46:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":46:17)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":46:14)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":46:23)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":46:24)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":46:30)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":46:29)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":48:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":48:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":84:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":87:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":86:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":86:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":56:1)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":71:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":57:1)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":58:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":70:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":59:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":59:33)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":60:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":69:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":61:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":61:20)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":63:13)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":66:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":63:22)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":63:18)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":63:25)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":63:29)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":63:27)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":64:13)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":65:34)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":65:27)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":65:17)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":65:22)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":65:23)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":65:35)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":63:35)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":63:34)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":67:31)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":67:36)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":67:37)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":67:13)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":68:13)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":68:18)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":73:1)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":82:1)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":75:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":75:15)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":76:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":76:35)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":77:12)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":77:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":79:23)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":79:30)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":79:34)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":79:48)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":79:49)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":79:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":80:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":80:33)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":80:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":80:17)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":80:14)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":80:23)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":80:24)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":80:30)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":80:29)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":81:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c":81:13)
#loc133 = loc(fused[#loc1, #loc2])
#loc134 = loc(fused[#loc3, #loc4])
#loc135 = loc(fused[#loc5, #loc6])
#loc137 = loc(fused[#loc10, #loc11])
#loc138 = loc(fused[#loc12, #loc13])
#loc139 = loc(fused[#loc14, #loc15])
#loc140 = loc(fused[#loc16, #loc17])
#loc141 = loc(fused[#loc18, #loc19])
#loc142 = loc(fused[#loc21, #loc20])
#loc143 = loc(fused[#loc22, #loc23])
#loc144 = loc(fused[#loc25, #loc19])
#loc145 = loc(fused[#loc28, #loc31])
#loc146 = loc(fused[#loc33, #loc32])
#loc147 = loc(fused[#loc40, #loc41])
#loc148 = loc(fused[#loc42, #loc43])
#loc149 = loc(fused[#loc44, #loc45])
#loc150 = loc(fused[#loc46, #loc47])
#loc151 = loc(fused[#loc48, #loc49])
#loc152 = loc(fused[#loc51, #loc50])
#loc153 = loc(fused[#loc54, #loc55])
#loc154 = loc(fused[#loc53, #loc55])
#loc155 = loc(fused[#loc52, #loc56])
#loc156 = loc(fused[#loc57, #loc56])
#loc157 = loc(fused[#loc58, #loc59])
#loc158 = loc(fused[#loc60, #loc61])
#loc159 = loc(fused[#loc63, #loc59])
#loc160 = loc(fused[#loc69, #loc70])
#loc161 = loc(fused[#loc71, #loc72])
#loc162 = loc(fused[#loc73, #loc74])
#loc164 = loc(fused[#loc78, #loc79])
#loc165 = loc(fused[#loc80, #loc81])
#loc166 = loc(fused[#loc82, #loc83])
#loc167 = loc(fused[#loc84, #loc85])
#loc168 = loc(fused[#loc86, #loc87])
#loc169 = loc(fused[#loc89, #loc88])
#loc170 = loc(fused[#loc90, #loc91])
#loc171 = loc(fused[#loc93, #loc87])
#loc172 = loc(fused[#loc96, #loc99])
#loc173 = loc(fused[#loc101, #loc100])
#loc174 = loc(fused[#loc108, #loc109])
#loc175 = loc(fused[#loc110, #loc111])
#loc176 = loc(fused[#loc112, #loc113])
#loc177 = loc(fused[#loc115, #loc114])
#loc178 = loc(fused[#loc118, #loc119])
#loc179 = loc(fused[#loc117, #loc119])
#loc180 = loc(fused[#loc116, #loc120])
#loc181 = loc(fused[#loc121, #loc120])
#loc182 = loc(fused[#loc122, #loc123])
#loc183 = loc(fused[#loc124, #loc125])
#loc184 = loc(fused[#loc127, #loc123])
