!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc56 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":124:10)
#loc57 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":124:14)
#loc58 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":124:20)
#loc59 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":124:32)
#loc178 = loc(fused[#loc56, #loc57])
#loc179 = loc(fused[#loc58, #loc59])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE196_Unsigned_to_Signed_Conversion_Error/CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc156)
  cir.func private @printIntLine(!s32i) loc(#loc157)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc158)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE196_Unsigned_to_Signed_Conversion_Error__basic_15_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc12)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc162)
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc163)
            %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
            %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc20)
            cir.store %4, %1 : !u32i, !cir.ptr<!u32i> loc(#loc164)
            cir.scope {
              %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc25)
              %9 = cir.const #cir.int<2> : !s32i loc(#loc26)
              %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc166)
              %11 = cir.const #cir.int<0> : !s32i loc(#loc27)
              %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc167)
              cir.if %12 {
                %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc29)
                %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc29)
                %15 = cir.const #cir.int<2> : !u32i loc(#loc29)
                %16 = cir.binop(mul, %14, %15) : !u32i loc(#loc29)
                %17 = cir.const #cir.int<1> : !u32i loc(#loc29)
                %18 = cir.binop(add, %16, %17) : !u32i loc(#loc29)
                %19 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc30)
                %20 = cir.binop(sub, %18, %19) : !u32i loc(#loc169)
                cir.store %20, %1 : !u32i, !cir.ptr<!u32i> loc(#loc170)
              } loc(#loc168)
            } loc(#loc165)
            %5 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc32)
            %6 = cir.cast(integral, %5 : !u32i), !s32i loc(#loc32)
            cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc171)
            %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc34)
            cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc35)
          } loc(#loc161)
          cir.break loc(#loc36)
        } loc(#loc13)
        cir.case(default, []) {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc7)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc7)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc38)
          cir.break loc(#loc39)
        } loc(#loc37)
        cir.yield loc(#loc10)
      } loc(#loc10)
    } loc(#loc160)
    cir.return loc(#loc9)
  } loc(#loc159)
  cir.func no_proto @CWE196_Unsigned_to_Signed_Conversion_Error__basic_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc173)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc174)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    cir.return loc(#loc41)
  } loc(#loc172)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc175)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc176)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc53)
  cir.func @main(%arg0: !s32i loc(fused[#loc56, #loc57]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc58, #loc59])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc178)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc179)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc55)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc60)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc60)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc61)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc62)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc62)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc63)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc50)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %8 = cir.get_global @CWE196_Unsigned_to_Signed_Conversion_Error__basic_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc180)
    cir.call @CWE196_Unsigned_to_Signed_Conversion_Error__basic_15_good() : () -> () loc(#loc65)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc51)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc52)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %13 = cir.get_global @CWE196_Unsigned_to_Signed_Conversion_Error__basic_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc181)
    cir.call @CWE196_Unsigned_to_Signed_Conversion_Error__basic_15_bad() : () -> () loc(#loc69)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc53)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc72)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc182)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc182)
    cir.return %17 : !s32i loc(#loc182)
  } loc(#loc177)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc183)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc80)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc82)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc82)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc83)
          cir.break loc(#loc84)
        } loc(#loc81)
        cir.case(default, []) {
          cir.scope {
            %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc187)
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc188)
            %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
            %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc92)
            cir.store %4, %1 : !u32i, !cir.ptr<!u32i> loc(#loc189)
            cir.scope {
              %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
              %9 = cir.const #cir.int<2> : !s32i loc(#loc98)
              %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc191)
              %11 = cir.const #cir.int<0> : !s32i loc(#loc99)
              %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc192)
              cir.if %12 {
                %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc101)
                %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc101)
                %15 = cir.const #cir.int<2> : !u32i loc(#loc101)
                %16 = cir.binop(mul, %14, %15) : !u32i loc(#loc101)
                %17 = cir.const #cir.int<1> : !u32i loc(#loc101)
                %18 = cir.binop(add, %16, %17) : !u32i loc(#loc101)
                %19 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc102)
                %20 = cir.binop(sub, %18, %19) : !u32i loc(#loc194)
                cir.store %20, %1 : !u32i, !cir.ptr<!u32i> loc(#loc195)
              } loc(#loc193)
            } loc(#loc190)
            cir.scope {
              %8 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc106)
              %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc107)
              %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc107)
              %11 = cir.cmp(gt, %8, %10) : !u32i, !cir.bool loc(#loc197)
              cir.if %11 {
                %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc109)
                %13 = cir.const #cir.int<1> : !s32i loc(#loc110)
                cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc109)
              } loc(#loc198)
            } loc(#loc196)
            %5 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc111)
            %6 = cir.cast(integral, %5 : !u32i), !s32i loc(#loc111)
            cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc199)
            %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc113)
            cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc114)
          } loc(#loc186)
          cir.break loc(#loc115)
        } loc(#loc85)
        cir.yield loc(#loc78)
      } loc(#loc78)
    } loc(#loc185)
    cir.return loc(#loc77)
  } loc(#loc184)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc120)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc203)
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc204)
            %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc128)
            %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc128)
            cir.store %4, %1 : !u32i, !cir.ptr<!u32i> loc(#loc205)
            cir.scope {
              %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc133)
              %9 = cir.const #cir.int<2> : !s32i loc(#loc134)
              %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc207)
              %11 = cir.const #cir.int<0> : !s32i loc(#loc135)
              %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc208)
              cir.if %12 {
                %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc137)
                %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc137)
                %15 = cir.const #cir.int<2> : !u32i loc(#loc137)
                %16 = cir.binop(mul, %14, %15) : !u32i loc(#loc137)
                %17 = cir.const #cir.int<1> : !u32i loc(#loc137)
                %18 = cir.binop(add, %16, %17) : !u32i loc(#loc137)
                %19 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc138)
                %20 = cir.binop(sub, %18, %19) : !u32i loc(#loc210)
                cir.store %20, %1 : !u32i, !cir.ptr<!u32i> loc(#loc211)
              } loc(#loc209)
            } loc(#loc206)
            cir.scope {
              %8 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc142)
              %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc143)
              %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc143)
              %11 = cir.cmp(gt, %8, %10) : !u32i, !cir.bool loc(#loc213)
              cir.if %11 {
                %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc145)
                %13 = cir.const #cir.int<1> : !s32i loc(#loc146)
                cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc145)
              } loc(#loc214)
            } loc(#loc212)
            %5 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc147)
            %6 = cir.cast(integral, %5 : !u32i), !s32i loc(#loc147)
            cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc215)
            %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc149)
            cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc150)
          } loc(#loc202)
          cir.break loc(#loc151)
        } loc(#loc121)
        cir.case(default, []) {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc153)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc153)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc154)
          cir.break loc(#loc155)
        } loc(#loc152)
        cir.yield loc(#loc118)
      } loc(#loc118)
    } loc(#loc201)
    cir.return loc(#loc117)
  } loc(#loc200)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE196_Unsigned_to_Signed_Conversion_Error/CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":40:19)
#loc8 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":20:1)
#loc9 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":43:1)
#loc10 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":22:5)
#loc11 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":42:5)
#loc12 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":22:12)
#loc13 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":24:5)
#loc14 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":25:5)
#loc15 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":36:5)
#loc16 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":26:9)
#loc17 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":26:18)
#loc18 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":27:9)
#loc19 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":27:13)
#loc20 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":28:23)
#loc21 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":28:9)
#loc22 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":28:28)
#loc23 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":29:9)
#loc24 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":32:9)
#loc25 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":29:13)
#loc26 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":29:22)
#loc27 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":29:27)
#loc28 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":30:9)
#loc29 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":31:27)
#loc30 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":31:38)
#loc31 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":31:13)
#loc32 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":34:21)
#loc33 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":34:9)
#loc34 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":35:22)
#loc35 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":35:9)
#loc36 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":37:5)
#loc37 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":38:5)
#loc38 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":40:9)
#loc39 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":41:9)
#loc40 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":109:1)
#loc41 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":113:1)
#loc42 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":111:5)
#loc43 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":111:11)
#loc44 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":112:5)
#loc45 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":112:11)
#loc46 = loc("/usr/include/stdlib.h":575:1)
#loc47 = loc("/usr/include/stdlib.h":575:41)
#loc48 = loc("/usr/include/time.h":76:1)
#loc49 = loc("/usr/include/time.h":76:38)
#loc50 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":129:15)
#loc51 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":131:15)
#loc52 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":134:15)
#loc53 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":136:15)
#loc54 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":124:1)
#loc55 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":139:1)
#loc60 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":125:1)
#loc61 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":127:27)
#loc62 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":127:22)
#loc63 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":127:5)
#loc64 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":129:5)
#loc65 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":130:5)
#loc66 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":130:63)
#loc67 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":131:5)
#loc68 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":134:5)
#loc69 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":135:5)
#loc70 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":135:62)
#loc71 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":136:5)
#loc72 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":138:12)
#loc73 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":138:5)
#loc74 = loc("/usr/include/stdlib.h":756:1)
#loc75 = loc("/usr/include/stdlib.h":756:70)
#loc76 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":50:1)
#loc77 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":77:1)
#loc78 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":52:5)
#loc79 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":76:5)
#loc80 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":52:12)
#loc81 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":54:5)
#loc82 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":56:19)
#loc83 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":56:9)
#loc84 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":57:9)
#loc85 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":58:5)
#loc86 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":59:5)
#loc87 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":74:5)
#loc88 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":60:9)
#loc89 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":60:18)
#loc90 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":61:9)
#loc91 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":61:13)
#loc92 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":62:23)
#loc93 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":62:9)
#loc94 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":62:28)
#loc95 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":63:9)
#loc96 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":66:9)
#loc97 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":63:13)
#loc98 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":63:22)
#loc99 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":63:27)
#loc100 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":64:9)
#loc101 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":65:27)
#loc102 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":65:38)
#loc103 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":65:13)
#loc104 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":68:9)
#loc105 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":71:9)
#loc106 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":68:13)
#loc107 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":68:27)
#loc108 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":69:9)
#loc109 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":70:13)
#loc110 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":70:18)
#loc111 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":72:21)
#loc112 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":72:9)
#loc113 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":73:22)
#loc114 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":73:9)
#loc115 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":75:5)
#loc116 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":80:1)
#loc117 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":107:1)
#loc118 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":82:5)
#loc119 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":106:5)
#loc120 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":82:12)
#loc121 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":84:5)
#loc122 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":85:5)
#loc123 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":100:5)
#loc124 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":86:9)
#loc125 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":86:18)
#loc126 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":87:9)
#loc127 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":87:13)
#loc128 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":88:23)
#loc129 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":88:9)
#loc130 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":88:28)
#loc131 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":89:9)
#loc132 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":92:9)
#loc133 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":89:13)
#loc134 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":89:22)
#loc135 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":89:27)
#loc136 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":90:9)
#loc137 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":91:27)
#loc138 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":91:38)
#loc139 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":91:13)
#loc140 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":94:9)
#loc141 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":97:9)
#loc142 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":94:13)
#loc143 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":94:27)
#loc144 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":95:9)
#loc145 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":96:13)
#loc146 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":96:18)
#loc147 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":98:21)
#loc148 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":98:9)
#loc149 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":99:22)
#loc150 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":99:9)
#loc151 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":101:5)
#loc152 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":102:5)
#loc153 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":104:19)
#loc154 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":104:9)
#loc155 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":105:9)
#loc156 = loc(fused[#loc1, #loc2])
#loc157 = loc(fused[#loc3, #loc4])
#loc158 = loc(fused[#loc5, #loc6])
#loc159 = loc(fused[#loc8, #loc9])
#loc160 = loc(fused[#loc10, #loc11])
#loc161 = loc(fused[#loc14, #loc15])
#loc162 = loc(fused[#loc16, #loc17])
#loc163 = loc(fused[#loc18, #loc19])
#loc164 = loc(fused[#loc21, #loc22])
#loc165 = loc(fused[#loc23, #loc24])
#loc166 = loc(fused[#loc25, #loc26])
#loc167 = loc(fused[#loc25, #loc27])
#loc168 = loc(fused[#loc28, #loc24])
#loc169 = loc(fused[#loc29, #loc30])
#loc170 = loc(fused[#loc31, #loc30])
#loc171 = loc(fused[#loc33, #loc32])
#loc172 = loc(fused[#loc40, #loc41])
#loc173 = loc(fused[#loc42, #loc43])
#loc174 = loc(fused[#loc44, #loc45])
#loc175 = loc(fused[#loc46, #loc47])
#loc176 = loc(fused[#loc48, #loc49])
#loc177 = loc(fused[#loc54, #loc55])
#loc180 = loc(fused[#loc65, #loc66])
#loc181 = loc(fused[#loc69, #loc70])
#loc182 = loc(fused[#loc73, #loc72])
#loc183 = loc(fused[#loc74, #loc75])
#loc184 = loc(fused[#loc76, #loc77])
#loc185 = loc(fused[#loc78, #loc79])
#loc186 = loc(fused[#loc86, #loc87])
#loc187 = loc(fused[#loc88, #loc89])
#loc188 = loc(fused[#loc90, #loc91])
#loc189 = loc(fused[#loc93, #loc94])
#loc190 = loc(fused[#loc95, #loc96])
#loc191 = loc(fused[#loc97, #loc98])
#loc192 = loc(fused[#loc97, #loc99])
#loc193 = loc(fused[#loc100, #loc96])
#loc194 = loc(fused[#loc101, #loc102])
#loc195 = loc(fused[#loc103, #loc102])
#loc196 = loc(fused[#loc104, #loc105])
#loc197 = loc(fused[#loc106, #loc107])
#loc198 = loc(fused[#loc108, #loc105])
#loc199 = loc(fused[#loc112, #loc111])
#loc200 = loc(fused[#loc116, #loc117])
#loc201 = loc(fused[#loc118, #loc119])
#loc202 = loc(fused[#loc122, #loc123])
#loc203 = loc(fused[#loc124, #loc125])
#loc204 = loc(fused[#loc126, #loc127])
#loc205 = loc(fused[#loc129, #loc130])
#loc206 = loc(fused[#loc131, #loc132])
#loc207 = loc(fused[#loc133, #loc134])
#loc208 = loc(fused[#loc133, #loc135])
#loc209 = loc(fused[#loc136, #loc132])
#loc210 = loc(fused[#loc137, #loc138])
#loc211 = loc(fused[#loc139, #loc138])
#loc212 = loc(fused[#loc140, #loc141])
#loc213 = loc(fused[#loc142, #loc143])
#loc214 = loc(fused[#loc144, #loc141])
#loc215 = loc(fused[#loc148, #loc147])
