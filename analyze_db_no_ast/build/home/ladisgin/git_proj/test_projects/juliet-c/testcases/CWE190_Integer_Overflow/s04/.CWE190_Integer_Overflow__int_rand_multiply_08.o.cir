!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_multiply_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc202)
  cir.func private  @printIntLine(!s32i) loc(#loc203)
  cir.func no_proto  @CWE190_Integer_Overflow__int_rand_multiply_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc205)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc206)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc208)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc13)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc13)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc16)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc16)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc16)
        %9 = cir.ternary(%8, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc16)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc16)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc16)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc16)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc16)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc16)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc16)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc16)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc16)
          cir.yield %22 : !u32i loc(#loc16)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc16)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc16)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc16)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc16)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc16)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc16)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc16)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc16)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc16)
          %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc16)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc16)
          %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc16)
          %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc16)
          cir.yield %26 : !u32i loc(#loc16)
        }) : (!cir.bool) -> !u32i loc(#loc16)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc16)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc210)
      } loc(#loc209)
    } loc(#loc207)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc212)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc20)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc20)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc26)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !s32i loc(#loc215)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc27)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc217)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc30)
            %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc31)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc217)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc32)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc33)
          } loc(#loc216)
        } loc(#loc214)
      } loc(#loc213)
    } loc(#loc211)
    cir.return loc(#loc6)
  } loc(#loc204)
  cir.func no_proto  @CWE190_Integer_Overflow__int_rand_multiply_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc219)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc220)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc221)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc222)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    cir.return loc(#loc35)
  } loc(#loc218)
  cir.func no_proto internal private  @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc45)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc46)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc224)
    cir.return %2 : !s32i loc(#loc224)
  } loc(#loc223)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc225)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc50)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc51)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc227)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc56)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc228)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc230)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc60)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc60)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc63)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc63)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc63)
        %9 = cir.ternary(%8, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc63)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc63)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc63)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc63)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc63)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc63)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc63)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc63)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc63)
          cir.yield %22 : !u32i loc(#loc63)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc63)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc63)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc63)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc63)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc63)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc63)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc63)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc63)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc63)
          %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc63)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc63)
          %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc63)
          %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc63)
          cir.yield %26 : !u32i loc(#loc63)
        }) : (!cir.bool) -> !u32i loc(#loc63)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc63)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc232)
      } loc(#loc231)
    } loc(#loc229)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc234)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc67)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc67)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc50)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc50)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc72)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc76)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !s32i loc(#loc237)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc77)
          cir.if %8 {
            cir.scope {
              %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc81)
              %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc82)
              %11 = cir.const #cir.int<2> : !s32i loc(#loc83)
              %12 = cir.binop(div, %10, %11) : !s32i loc(#loc240)
              %13 = cir.cmp(lt, %9, %12) : !s32i, !s32i loc(#loc241)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc85)
              cir.if %14 {
                %15 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc243)
                %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc91)
                %17 = cir.const #cir.int<2> : !s32i loc(#loc90)
                %18 = cir.binop(mul, %16, %17) nsw : !s32i loc(#loc91)
                cir.store %18, %15 : !s32i, !cir.ptr<!s32i> loc(#loc243)
                %19 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc92)
                cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc93)
              } else {
                %15 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc51)
                %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc51)
                cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc94)
              } loc(#loc242)
            } loc(#loc239)
          } loc(#loc238)
        } loc(#loc236)
      } loc(#loc235)
    } loc(#loc233)
    cir.return loc(#loc53)
  } loc(#loc226)
  cir.func no_proto internal private  @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc96)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc97)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc245)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc245)
    cir.return %2 : !s32i loc(#loc245)
  } loc(#loc244)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc247)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc103)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc248)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc250)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc107)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc107)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc110)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc110)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc110)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc110)
        %9 = cir.ternary(%8, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc110)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc110)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc110)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc110)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc110)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc110)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc110)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc110)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc110)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc110)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc110)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc110)
          cir.yield %22 : !u32i loc(#loc110)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc110)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc110)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc110)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc110)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc110)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc110)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc110)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc110)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc110)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc110)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc110)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc110)
          %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc110)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc110)
          %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc110)
          %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc110)
          cir.yield %26 : !u32i loc(#loc110)
        }) : (!cir.bool) -> !u32i loc(#loc110)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc110)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc252)
      } loc(#loc251)
    } loc(#loc249)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc254)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc114)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc114)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc119)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc120)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !s32i loc(#loc257)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc121)
          cir.if %8 {
            cir.scope {
              %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc125)
              %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc126)
              %11 = cir.const #cir.int<2> : !s32i loc(#loc127)
              %12 = cir.binop(div, %10, %11) : !s32i loc(#loc260)
              %13 = cir.cmp(lt, %9, %12) : !s32i, !s32i loc(#loc261)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc129)
              cir.if %14 {
                %15 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc263)
                %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc135)
                %17 = cir.const #cir.int<2> : !s32i loc(#loc134)
                %18 = cir.binop(mul, %16, %17) nsw : !s32i loc(#loc135)
                cir.store %18, %15 : !s32i, !cir.ptr<!s32i> loc(#loc263)
                %19 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc136)
                cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc137)
              } else {
                %15 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc138)
                %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc138)
                cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc139)
              } loc(#loc262)
            } loc(#loc259)
          } loc(#loc258)
        } loc(#loc256)
      } loc(#loc255)
    } loc(#loc253)
    cir.return loc(#loc100)
  } loc(#loc246)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc265)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc144)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc266)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc268)
      %3 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc148)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc148)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc153)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc153)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc154)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc155)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc270)
      } loc(#loc269)
    } loc(#loc267)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc272)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc159)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc159)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc164)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc165)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !s32i loc(#loc275)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc166)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc277)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc170)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc169)
            %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc170)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc277)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc171)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc172)
          } loc(#loc276)
        } loc(#loc274)
      } loc(#loc273)
    } loc(#loc271)
    cir.return loc(#loc141)
  } loc(#loc264)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc279)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc177)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc280)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc282)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc181)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc181)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc184)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc284)
      } loc(#loc283)
    } loc(#loc281)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc286)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc188)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc188)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc193)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc194)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !s32i loc(#loc289)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc195)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc291)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc199)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc198)
            %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc199)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc291)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc200)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc201)
          } loc(#loc290)
        } loc(#loc288)
      } loc(#loc287)
    } loc(#loc285)
    cir.return loc(#loc174)
  } loc(#loc278)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_multiply_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":35:1)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":54:1)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":37:5)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":37:9)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":39:12)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":39:5)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":40:5)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":44:5)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":40:8)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":40:26)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":41:5)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":43:16)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":43:9)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":45:5)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":53:5)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":45:8)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":45:26)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":46:5)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":47:9)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":52:9)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":47:12)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":47:19)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":47:17)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":48:9)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":50:13)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":50:33)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":50:26)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":51:26)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":51:13)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":172:1)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":178:1)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":174:5)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":174:14)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":175:5)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":175:14)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":176:5)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":176:14)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":177:5)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":177:14)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":23:1)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":26:1)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":25:12)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":25:5)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":74:19)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":88:27)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":61:1)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":92:1)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":63:5)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":63:9)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":65:12)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":65:5)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":66:5)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":70:5)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":66:8)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":66:26)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":67:5)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":69:16)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":69:9)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":71:5)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":91:5)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":71:8)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":71:27)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":72:5)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":75:5)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":77:5)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":74:9)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":78:9)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":90:9)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":78:12)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":78:19)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":78:17)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":79:9)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":81:13)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":89:13)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":81:17)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":81:25)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":81:33)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":81:34)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":81:22)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":82:13)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":85:13)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":87:13)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":83:17)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":83:37)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":83:30)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":84:30)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":84:17)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":88:17)
#loc95 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":28:1)
#loc96 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":31:1)
#loc97 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":30:12)
#loc98 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":30:5)
#loc99 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":95:1)
#loc100 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":121:1)
#loc101 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":97:5)
#loc102 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":97:9)
#loc103 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":99:12)
#loc104 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":99:5)
#loc105 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":100:5)
#loc106 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":104:5)
#loc107 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":100:8)
#loc108 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":100:26)
#loc109 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":101:5)
#loc110 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":103:16)
#loc111 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":103:9)
#loc112 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":105:5)
#loc113 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":120:5)
#loc114 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":105:8)
#loc115 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":105:26)
#loc116 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":106:5)
#loc117 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":107:9)
#loc118 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":119:9)
#loc119 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":107:12)
#loc120 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":107:19)
#loc121 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":107:17)
#loc122 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":108:9)
#loc123 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":110:13)
#loc124 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":118:13)
#loc125 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":110:17)
#loc126 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":110:25)
#loc127 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":110:33)
#loc128 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":110:34)
#loc129 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":110:22)
#loc130 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":111:13)
#loc131 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":114:13)
#loc132 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":116:13)
#loc133 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":112:17)
#loc134 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":112:37)
#loc135 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":112:30)
#loc136 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":113:30)
#loc137 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":113:17)
#loc138 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":117:27)
#loc139 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":117:17)
#loc140 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":124:1)
#loc141 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":148:1)
#loc142 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":126:5)
#loc143 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":126:9)
#loc144 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":128:12)
#loc145 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":128:5)
#loc146 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":129:5)
#loc147 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":138:5)
#loc148 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":129:8)
#loc149 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":129:27)
#loc150 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":130:5)
#loc151 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":133:5)
#loc152 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":135:5)
#loc153 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":132:19)
#loc154 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":132:9)
#loc155 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":137:16)
#loc156 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":137:9)
#loc157 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":139:5)
#loc158 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":147:5)
#loc159 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":139:8)
#loc160 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":139:26)
#loc161 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":140:5)
#loc162 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":141:9)
#loc163 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":146:9)
#loc164 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":141:12)
#loc165 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":141:19)
#loc166 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":141:17)
#loc167 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":142:9)
#loc168 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":144:13)
#loc169 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":144:33)
#loc170 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":144:26)
#loc171 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":145:26)
#loc172 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":145:13)
#loc173 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":151:1)
#loc174 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":170:1)
#loc175 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":153:5)
#loc176 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":153:9)
#loc177 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":155:12)
#loc178 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":155:5)
#loc179 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":156:5)
#loc180 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":160:5)
#loc181 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":156:8)
#loc182 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":156:26)
#loc183 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":157:5)
#loc184 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":159:16)
#loc185 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":159:9)
#loc186 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":161:5)
#loc187 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":169:5)
#loc188 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":161:8)
#loc189 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":161:26)
#loc190 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":162:5)
#loc191 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":163:9)
#loc192 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":168:9)
#loc193 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":163:12)
#loc194 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":163:19)
#loc195 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":163:17)
#loc196 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":164:9)
#loc197 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":166:13)
#loc198 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":166:33)
#loc199 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":166:26)
#loc200 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":167:26)
#loc201 = loc("CWE190_Integer_Overflow__int_rand_multiply_08.c":167:13)
#loc202 = loc(fused[#loc1, #loc2])
#loc203 = loc(fused[#loc3, #loc4])
#loc204 = loc(fused[#loc5, #loc6])
#loc205 = loc(fused[#loc7, #loc8])
#loc206 = loc(fused[#loc10, #loc9])
#loc207 = loc(fused[#loc11, #loc12])
#loc208 = loc(fused[#loc13, #loc14])
#loc209 = loc(fused[#loc15, #loc12])
#loc210 = loc(fused[#loc17, #loc16])
#loc211 = loc(fused[#loc18, #loc19])
#loc212 = loc(fused[#loc20, #loc21])
#loc213 = loc(fused[#loc22, #loc19])
#loc214 = loc(fused[#loc23, #loc24])
#loc215 = loc(fused[#loc25, #loc26])
#loc216 = loc(fused[#loc28, #loc24])
#loc217 = loc(fused[#loc29, #loc30])
#loc218 = loc(fused[#loc34, #loc35])
#loc219 = loc(fused[#loc36, #loc37])
#loc220 = loc(fused[#loc38, #loc39])
#loc221 = loc(fused[#loc40, #loc41])
#loc222 = loc(fused[#loc42, #loc43])
#loc223 = loc(fused[#loc44, #loc45])
#loc224 = loc(fused[#loc47, #loc46])
#loc225 = loc(fused[#loc48, #loc49])
#loc226 = loc(fused[#loc52, #loc53])
#loc227 = loc(fused[#loc54, #loc55])
#loc228 = loc(fused[#loc57, #loc56])
#loc229 = loc(fused[#loc58, #loc59])
#loc230 = loc(fused[#loc60, #loc61])
#loc231 = loc(fused[#loc62, #loc59])
#loc232 = loc(fused[#loc64, #loc63])
#loc233 = loc(fused[#loc65, #loc66])
#loc234 = loc(fused[#loc67, #loc68])
#loc235 = loc(fused[#loc69, #loc70, #loc71, #loc66])
#loc236 = loc(fused[#loc73, #loc74])
#loc237 = loc(fused[#loc75, #loc76])
#loc238 = loc(fused[#loc78, #loc74])
#loc239 = loc(fused[#loc79, #loc80])
#loc240 = loc(fused[#loc82, #loc83])
#loc241 = loc(fused[#loc81, #loc84])
#loc242 = loc(fused[#loc86, #loc87, #loc88, #loc80])
#loc243 = loc(fused[#loc89, #loc90])
#loc244 = loc(fused[#loc95, #loc96])
#loc245 = loc(fused[#loc98, #loc97])
#loc246 = loc(fused[#loc99, #loc100])
#loc247 = loc(fused[#loc101, #loc102])
#loc248 = loc(fused[#loc104, #loc103])
#loc249 = loc(fused[#loc105, #loc106])
#loc250 = loc(fused[#loc107, #loc108])
#loc251 = loc(fused[#loc109, #loc106])
#loc252 = loc(fused[#loc111, #loc110])
#loc253 = loc(fused[#loc112, #loc113])
#loc254 = loc(fused[#loc114, #loc115])
#loc255 = loc(fused[#loc116, #loc113])
#loc256 = loc(fused[#loc117, #loc118])
#loc257 = loc(fused[#loc119, #loc120])
#loc258 = loc(fused[#loc122, #loc118])
#loc259 = loc(fused[#loc123, #loc124])
#loc260 = loc(fused[#loc126, #loc127])
#loc261 = loc(fused[#loc125, #loc128])
#loc262 = loc(fused[#loc130, #loc131, #loc132, #loc124])
#loc263 = loc(fused[#loc133, #loc134])
#loc264 = loc(fused[#loc140, #loc141])
#loc265 = loc(fused[#loc142, #loc143])
#loc266 = loc(fused[#loc145, #loc144])
#loc267 = loc(fused[#loc146, #loc147])
#loc268 = loc(fused[#loc148, #loc149])
#loc269 = loc(fused[#loc150, #loc151, #loc152, #loc147])
#loc270 = loc(fused[#loc156, #loc155])
#loc271 = loc(fused[#loc157, #loc158])
#loc272 = loc(fused[#loc159, #loc160])
#loc273 = loc(fused[#loc161, #loc158])
#loc274 = loc(fused[#loc162, #loc163])
#loc275 = loc(fused[#loc164, #loc165])
#loc276 = loc(fused[#loc167, #loc163])
#loc277 = loc(fused[#loc168, #loc169])
#loc278 = loc(fused[#loc173, #loc174])
#loc279 = loc(fused[#loc175, #loc176])
#loc280 = loc(fused[#loc178, #loc177])
#loc281 = loc(fused[#loc179, #loc180])
#loc282 = loc(fused[#loc181, #loc182])
#loc283 = loc(fused[#loc183, #loc180])
#loc284 = loc(fused[#loc185, #loc184])
#loc285 = loc(fused[#loc186, #loc187])
#loc286 = loc(fused[#loc188, #loc189])
#loc287 = loc(fused[#loc190, #loc187])
#loc288 = loc(fused[#loc191, #loc192])
#loc289 = loc(fused[#loc193, #loc194])
#loc290 = loc(fused[#loc196, #loc192])
#loc291 = loc(fused[#loc197, #loc198])
