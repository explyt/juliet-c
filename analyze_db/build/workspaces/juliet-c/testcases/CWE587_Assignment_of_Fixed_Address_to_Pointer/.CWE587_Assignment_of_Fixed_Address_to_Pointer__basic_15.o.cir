!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE587_Assignment_of_Fixed_Address_to_Pointer/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printHexCharLine(!s8i) loc(#loc69)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc10)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charPointer", init] {alignment = 8 : i64} loc(#loc74)
            %2 = cir.const #cir.int<4194304> : !s32i loc(#loc15)
            %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc15)
            %4 = cir.cast(int_to_ptr, %3 : !u64i), !cir.ptr<!s8i> loc(#loc15)
            cir.store %4, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc74)
            %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc16)
            %6 = cir.load %5 : !cir.ptr<!s8i>, !s8i loc(#loc17)
            cir.call @printHexCharLine(%6) : (!s8i) -> () loc(#loc18)
          } loc(#loc73)
          cir.break loc(#loc19)
        } loc(#loc11)
        cir.case(default, []) {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc5)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc5)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc21)
          cir.break loc(#loc22)
        } loc(#loc20)
        cir.yield loc(#loc8)
      } loc(#loc8)
    } loc(#loc72)
    cir.return loc(#loc7)
  } loc(#loc71)
  cir.func no_proto @CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc76)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc25)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc77)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc27)
    cir.return loc(#loc24)
  } loc(#loc75)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc33)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc35)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc35)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc36)
          cir.break loc(#loc37)
        } loc(#loc34)
        cir.case(default, []) {
          cir.scope {
            %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charStack", init] {alignment = 1 : i64} loc(#loc81)
            %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charPointer", init] {alignment = 8 : i64} loc(#loc82)
            %3 = cir.const #cir.int<97> : !s32i loc(#loc42)
            %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc42)
            cir.store %4, %1 : !s8i, !cir.ptr<!s8i> loc(#loc81)
            cir.store %1, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc82)
            %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc45)
            %6 = cir.load %5 : !cir.ptr<!s8i>, !s8i loc(#loc46)
            cir.call @printHexCharLine(%6) : (!s8i) -> () loc(#loc47)
          } loc(#loc80)
          cir.break loc(#loc48)
        } loc(#loc38)
        cir.yield loc(#loc31)
      } loc(#loc31)
    } loc(#loc79)
    cir.return loc(#loc30)
  } loc(#loc78)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc53)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charStack", init] {alignment = 1 : i64} loc(#loc86)
            %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charPointer", init] {alignment = 8 : i64} loc(#loc87)
            %3 = cir.const #cir.int<97> : !s32i loc(#loc58)
            %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc58)
            cir.store %4, %1 : !s8i, !cir.ptr<!s8i> loc(#loc86)
            cir.store %1, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc87)
            %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
            %6 = cir.load %5 : !cir.ptr<!s8i>, !s8i loc(#loc62)
            cir.call @printHexCharLine(%6) : (!s8i) -> () loc(#loc63)
          } loc(#loc85)
          cir.break loc(#loc64)
        } loc(#loc54)
        cir.case(default, []) {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc66)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc66)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc67)
          cir.break loc(#loc68)
        } loc(#loc65)
        cir.yield loc(#loc51)
      } loc(#loc51)
    } loc(#loc84)
    cir.return loc(#loc50)
  } loc(#loc83)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE587_Assignment_of_Fixed_Address_to_Pointer/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":30:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":30:35)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":33:19)
#loc6 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":20:1)
#loc7 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":36:1)
#loc8 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":22:5)
#loc9 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":35:5)
#loc10 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":22:12)
#loc11 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":24:5)
#loc12 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":25:5)
#loc13 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":29:5)
#loc14 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":27:9)
#loc15 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":27:36)
#loc16 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":28:27)
#loc17 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":28:26)
#loc18 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":28:9)
#loc19 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":30:5)
#loc20 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":31:5)
#loc21 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":33:9)
#loc22 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":34:9)
#loc23 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":82:1)
#loc24 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":86:1)
#loc25 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":84:5)
#loc26 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":84:11)
#loc27 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":85:5)
#loc28 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":85:11)
#loc29 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":43:1)
#loc30 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":60:1)
#loc31 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":45:5)
#loc32 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":59:5)
#loc33 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":45:12)
#loc34 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":47:5)
#loc35 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":49:19)
#loc36 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":49:9)
#loc37 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":50:9)
#loc38 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":51:5)
#loc39 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":52:5)
#loc40 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":57:5)
#loc41 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":54:9)
#loc42 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":54:26)
#loc43 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":55:9)
#loc44 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":55:30)
#loc45 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":56:27)
#loc46 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":56:26)
#loc47 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":56:9)
#loc48 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":58:5)
#loc49 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":63:1)
#loc50 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":80:1)
#loc51 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":65:5)
#loc52 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":79:5)
#loc53 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":65:12)
#loc54 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":67:5)
#loc55 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":68:5)
#loc56 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":73:5)
#loc57 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":70:9)
#loc58 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":70:26)
#loc59 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":71:9)
#loc60 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":71:30)
#loc61 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":72:27)
#loc62 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":72:26)
#loc63 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":72:9)
#loc64 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":74:5)
#loc65 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":75:5)
#loc66 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":77:19)
#loc67 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":77:9)
#loc68 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c":78:9)
#loc69 = loc(fused[#loc1, #loc2])
#loc70 = loc(fused[#loc3, #loc4])
#loc71 = loc(fused[#loc6, #loc7])
#loc72 = loc(fused[#loc8, #loc9])
#loc73 = loc(fused[#loc12, #loc13])
#loc74 = loc(fused[#loc14, #loc15])
#loc75 = loc(fused[#loc23, #loc24])
#loc76 = loc(fused[#loc25, #loc26])
#loc77 = loc(fused[#loc27, #loc28])
#loc78 = loc(fused[#loc29, #loc30])
#loc79 = loc(fused[#loc31, #loc32])
#loc80 = loc(fused[#loc39, #loc40])
#loc81 = loc(fused[#loc41, #loc42])
#loc82 = loc(fused[#loc43, #loc44])
#loc83 = loc(fused[#loc49, #loc50])
#loc84 = loc(fused[#loc51, #loc52])
#loc85 = loc(fused[#loc55, #loc56])
#loc86 = loc(fused[#loc57, #loc58])
#loc87 = loc(fused[#loc59, #loc60])
