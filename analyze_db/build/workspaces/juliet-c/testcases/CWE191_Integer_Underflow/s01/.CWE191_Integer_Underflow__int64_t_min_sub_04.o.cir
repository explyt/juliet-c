!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_min_sub_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printLongLongLine(!s64i) loc(#loc154)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_min_sub_04_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc156)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc157)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc9)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc158)
    cir.br ^bb1 loc(#loc159)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc160)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc15)
    %6 = cir.unary(minus, %5) nsw : !s64i, !s64i loc(#loc15)
    %7 = cir.const #cir.int<1> : !s64i loc(#loc15)
    %8 = cir.binop(sub, %6, %7) nsw : !s64i loc(#loc15)
    cir.store %8, %1 : !s64i, !cir.ptr<!s64i> loc(#loc161)
    cir.br ^bb3 loc(#loc12)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc12)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc162)
  ^bb5:  // pred: ^bb4
    %9 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %10 ^bb6, ^bb9 loc(#loc163)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc164)
  ^bb7:  // pred: ^bb6
    %11 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc23)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc6)
    %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc6)
    %14 = cir.binop(sub, %11, %13) nsw : !s64i loc(#loc23)
    cir.store %14, %0 : !s64i, !cir.ptr<!s64i> loc(#loc156)
    %15 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc24)
    cir.call @printLongLongLine(%15) : (!s64i) -> () loc(#loc25)
    cir.br ^bb8 loc(#loc22)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc18)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc18)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc4)
  } loc(#loc155)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_min_sub_04_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc166)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc167)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc168)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc169)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    cir.return loc(#loc27)
  } loc(#loc165)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc170)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc39)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc172)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc173)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc46)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc174)
    cir.br ^bb1 loc(#loc175)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc50)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc176)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc52)
    %6 = cir.unary(minus, %5) nsw : !s64i, !s64i loc(#loc52)
    %7 = cir.const #cir.int<1> : !s64i loc(#loc52)
    %8 = cir.binop(sub, %6, %7) nsw : !s64i loc(#loc52)
    cir.store %8, %1 : !s64i, !cir.ptr<!s64i> loc(#loc177)
    cir.br ^bb3 loc(#loc49)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc49)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc178)
  ^bb5:  // pred: ^bb4
    %9 = cir.const #cir.int<0> : !s32i loc(#loc56)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc56)
    cir.brcond %10 ^bb6, ^bb7 loc(#loc179)
  ^bb6:  // pred: ^bb5
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc38)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    cir.br ^bb13 loc(#loc58)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc180)
  ^bb8:  // pred: ^bb7
    %13 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc63)
    %14 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc64)
    %15 = cir.unary(minus, %14) nsw : !s64i, !s64i loc(#loc64)
    %16 = cir.const #cir.int<1> : !s64i loc(#loc64)
    %17 = cir.binop(sub, %15, %16) nsw : !s64i loc(#loc64)
    %18 = cir.cmp(gt, %13, %17) : !s64i, !cir.bool loc(#loc181)
    cir.brcond %18 ^bb9, ^bb10 loc(#loc182)
  ^bb9:  // pred: ^bb8
    %19 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc68)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc43)
    %21 = cir.cast(integral, %20 : !s32i), !s64i loc(#loc43)
    %22 = cir.binop(sub, %19, %21) nsw : !s64i loc(#loc68)
    cir.store %22, %0 : !s64i, !cir.ptr<!s64i> loc(#loc172)
    %23 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc69)
    cir.call @printLongLongLine(%23) : (!s64i) -> () loc(#loc70)
    cir.br ^bb11 loc(#loc66)
  ^bb10:  // pred: ^bb8
    %24 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc39)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    cir.br ^bb11 loc(#loc62)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc62)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc55)
  ^bb13:  // 2 preds: ^bb6, ^bb12
    cir.br ^bb14 loc(#loc55)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc41)
  } loc(#loc171)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc184)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc185)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc78)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc186)
    cir.br ^bb1 loc(#loc187)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc82)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc188)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc84)
    %6 = cir.unary(minus, %5) nsw : !s64i, !s64i loc(#loc84)
    %7 = cir.const #cir.int<1> : !s64i loc(#loc84)
    %8 = cir.binop(sub, %6, %7) nsw : !s64i loc(#loc84)
    cir.store %8, %1 : !s64i, !cir.ptr<!s64i> loc(#loc189)
    cir.br ^bb3 loc(#loc81)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc81)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc190)
  ^bb5:  // pred: ^bb4
    %9 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc88)
    cir.brcond %10 ^bb6, ^bb12 loc(#loc191)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc192)
  ^bb7:  // pred: ^bb6
    %11 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc92)
    %12 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc93)
    %13 = cir.unary(minus, %12) nsw : !s64i, !s64i loc(#loc93)
    %14 = cir.const #cir.int<1> : !s64i loc(#loc93)
    %15 = cir.binop(sub, %13, %14) nsw : !s64i loc(#loc93)
    %16 = cir.cmp(gt, %11, %15) : !s64i, !cir.bool loc(#loc193)
    cir.brcond %16 ^bb8, ^bb9 loc(#loc194)
  ^bb8:  // pred: ^bb7
    %17 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc97)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %19 = cir.cast(integral, %18 : !s32i), !s64i loc(#loc75)
    %20 = cir.binop(sub, %17, %19) nsw : !s64i loc(#loc97)
    cir.store %20, %0 : !s64i, !cir.ptr<!s64i> loc(#loc184)
    %21 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc98)
    cir.call @printLongLongLine(%21) : (!s64i) -> () loc(#loc99)
    cir.br ^bb10 loc(#loc95)
  ^bb9:  // pred: ^bb7
    %22 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc100)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc100)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc101)
    cir.br ^bb10 loc(#loc91)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc91)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc87)
  ^bb12:  // 2 preds: ^bb5, ^bb11
    cir.br ^bb13 loc(#loc87)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc73)
  } loc(#loc183)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc196)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc197)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc108)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc198)
    cir.br ^bb1 loc(#loc199)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<0> : !s32i loc(#loc112)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc112)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc200)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc116)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc116)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc117)
    cir.br ^bb4 loc(#loc114)
  ^bb3:  // pred: ^bb1
    %7 = cir.const #cir.int<2> : !s32i loc(#loc118)
    %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc119)
    %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc119)
    cir.store %9, %1 : !s64i, !cir.ptr<!s64i> loc(#loc201)
    cir.br ^bb4 loc(#loc111)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc111)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc202)
  ^bb6:  // pred: ^bb5
    %10 = cir.const #cir.int<1> : !s32i loc(#loc123)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc123)
    cir.brcond %11 ^bb7, ^bb10 loc(#loc203)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc204)
  ^bb8:  // pred: ^bb7
    %12 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc127)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc105)
    %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc105)
    %15 = cir.binop(sub, %12, %14) nsw : !s64i loc(#loc127)
    cir.store %15, %0 : !s64i, !cir.ptr<!s64i> loc(#loc196)
    %16 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc128)
    cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc129)
    cir.br ^bb9 loc(#loc126)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc122)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc122)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc103)
  } loc(#loc195)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc206)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc207)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc136)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc208)
    cir.br ^bb1 loc(#loc209)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc140)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc140)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc210)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<2> : !s32i loc(#loc142)
    %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc143)
    %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc143)
    cir.store %7, %1 : !s64i, !cir.ptr<!s64i> loc(#loc211)
    cir.br ^bb3 loc(#loc139)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc139)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc212)
  ^bb5:  // pred: ^bb4
    %8 = cir.const #cir.int<1> : !s32i loc(#loc147)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc147)
    cir.brcond %9 ^bb6, ^bb9 loc(#loc213)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc214)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc151)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc133)
    %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc133)
    %13 = cir.binop(sub, %10, %12) nsw : !s64i loc(#loc151)
    cir.store %13, %0 : !s64i, !cir.ptr<!s64i> loc(#loc206)
    %14 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc152)
    cir.call @printLongLongLine(%14) : (!s64i) -> () loc(#loc153)
    cir.br ^bb8 loc(#loc150)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc146)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc146)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc131)
  } loc(#loc205)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_min_sub_04.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":28:1)
#loc4 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":45:1)
#loc5 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":41:13)
#loc6 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":41:37)
#loc7 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":30:5)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":30:13)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":31:12)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":31:5)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":32:5)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":36:5)
#loc13 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":32:8)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":33:5)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":35:16)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":35:9)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":37:5)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":44:5)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":37:8)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":38:5)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":39:9)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":43:9)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":41:30)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":42:31)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":42:13)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":151:1)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":157:1)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":153:5)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":153:14)
#loc30 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":154:5)
#loc31 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":154:14)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":155:5)
#loc33 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":155:14)
#loc34 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":156:5)
#loc35 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":156:14)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc38 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":64:19)
#loc39 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":76:23)
#loc40 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":52:1)
#loc41 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":79:1)
#loc42 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":71:13)
#loc43 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":71:37)
#loc44 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":54:5)
#loc45 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":54:13)
#loc46 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":55:12)
#loc47 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":55:5)
#loc48 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":56:5)
#loc49 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":60:5)
#loc50 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":56:8)
#loc51 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":57:5)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":59:16)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":59:9)
#loc54 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":61:5)
#loc55 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":78:5)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":61:8)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":62:5)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":65:5)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":67:5)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":64:9)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":69:9)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":77:9)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":69:13)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":69:20)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":70:9)
#loc66 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":73:9)
#loc67 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":75:9)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":71:30)
#loc69 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":72:31)
#loc70 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":72:13)
#loc71 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":76:13)
#loc72 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":82:1)
#loc73 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":104:1)
#loc74 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":96:13)
#loc75 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":96:37)
#loc76 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":84:5)
#loc77 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":84:13)
#loc78 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":85:12)
#loc79 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":85:5)
#loc80 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":86:5)
#loc81 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":90:5)
#loc82 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":86:8)
#loc83 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":87:5)
#loc84 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":89:16)
#loc85 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":89:9)
#loc86 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":91:5)
#loc87 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":103:5)
#loc88 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":91:8)
#loc89 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":92:5)
#loc90 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":94:9)
#loc91 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":102:9)
#loc92 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":94:13)
#loc93 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":94:20)
#loc94 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":95:9)
#loc95 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":98:9)
#loc96 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":100:9)
#loc97 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":96:30)
#loc98 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":97:31)
#loc99 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":97:13)
#loc100 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":101:23)
#loc101 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":101:13)
#loc102 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":107:1)
#loc103 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":129:1)
#loc104 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":125:13)
#loc105 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":125:37)
#loc106 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":109:5)
#loc107 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":109:13)
#loc108 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":110:12)
#loc109 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":110:5)
#loc110 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":111:5)
#loc111 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":120:5)
#loc112 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":111:8)
#loc113 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":112:5)
#loc114 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":115:5)
#loc115 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":117:5)
#loc116 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":114:19)
#loc117 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":114:9)
#loc118 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":119:17)
#loc119 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":119:16)
#loc120 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":119:9)
#loc121 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":121:5)
#loc122 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":128:5)
#loc123 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":121:8)
#loc124 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":122:5)
#loc125 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":123:9)
#loc126 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":127:9)
#loc127 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":125:30)
#loc128 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":126:31)
#loc129 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":126:13)
#loc130 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":132:1)
#loc131 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":149:1)
#loc132 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":145:13)
#loc133 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":145:37)
#loc134 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":134:5)
#loc135 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":134:13)
#loc136 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":135:12)
#loc137 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":135:5)
#loc138 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":136:5)
#loc139 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":140:5)
#loc140 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":136:8)
#loc141 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":137:5)
#loc142 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":139:17)
#loc143 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":139:16)
#loc144 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":139:9)
#loc145 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":141:5)
#loc146 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":148:5)
#loc147 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":141:8)
#loc148 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":142:5)
#loc149 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":143:9)
#loc150 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":147:9)
#loc151 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":145:30)
#loc152 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":146:31)
#loc153 = loc("CWE191_Integer_Underflow__int64_t_min_sub_04.c":146:13)
#loc154 = loc(fused[#loc1, #loc2])
#loc155 = loc(fused[#loc3, #loc4])
#loc156 = loc(fused[#loc5, #loc6])
#loc157 = loc(fused[#loc7, #loc8])
#loc158 = loc(fused[#loc10, #loc9])
#loc159 = loc(fused[#loc11, #loc12])
#loc160 = loc(fused[#loc14, #loc12])
#loc161 = loc(fused[#loc16, #loc15])
#loc162 = loc(fused[#loc17, #loc18])
#loc163 = loc(fused[#loc20, #loc18])
#loc164 = loc(fused[#loc21, #loc22])
#loc165 = loc(fused[#loc26, #loc27])
#loc166 = loc(fused[#loc28, #loc29])
#loc167 = loc(fused[#loc30, #loc31])
#loc168 = loc(fused[#loc32, #loc33])
#loc169 = loc(fused[#loc34, #loc35])
#loc170 = loc(fused[#loc36, #loc37])
#loc171 = loc(fused[#loc40, #loc41])
#loc172 = loc(fused[#loc42, #loc43])
#loc173 = loc(fused[#loc44, #loc45])
#loc174 = loc(fused[#loc47, #loc46])
#loc175 = loc(fused[#loc48, #loc49])
#loc176 = loc(fused[#loc51, #loc49])
#loc177 = loc(fused[#loc53, #loc52])
#loc178 = loc(fused[#loc54, #loc55])
#loc179 = loc(fused[#loc57, #loc58, #loc59, #loc55])
#loc180 = loc(fused[#loc61, #loc62])
#loc181 = loc(fused[#loc63, #loc64])
#loc182 = loc(fused[#loc65, #loc66, #loc67, #loc62])
#loc183 = loc(fused[#loc72, #loc73])
#loc184 = loc(fused[#loc74, #loc75])
#loc185 = loc(fused[#loc76, #loc77])
#loc186 = loc(fused[#loc79, #loc78])
#loc187 = loc(fused[#loc80, #loc81])
#loc188 = loc(fused[#loc83, #loc81])
#loc189 = loc(fused[#loc85, #loc84])
#loc190 = loc(fused[#loc86, #loc87])
#loc191 = loc(fused[#loc89, #loc87])
#loc192 = loc(fused[#loc90, #loc91])
#loc193 = loc(fused[#loc92, #loc93])
#loc194 = loc(fused[#loc94, #loc95, #loc96, #loc91])
#loc195 = loc(fused[#loc102, #loc103])
#loc196 = loc(fused[#loc104, #loc105])
#loc197 = loc(fused[#loc106, #loc107])
#loc198 = loc(fused[#loc109, #loc108])
#loc199 = loc(fused[#loc110, #loc111])
#loc200 = loc(fused[#loc113, #loc114, #loc115, #loc111])
#loc201 = loc(fused[#loc120, #loc118])
#loc202 = loc(fused[#loc121, #loc122])
#loc203 = loc(fused[#loc124, #loc122])
#loc204 = loc(fused[#loc125, #loc126])
#loc205 = loc(fused[#loc130, #loc131])
#loc206 = loc(fused[#loc132, #loc133])
#loc207 = loc(fused[#loc134, #loc135])
#loc208 = loc(fused[#loc137, #loc136])
#loc209 = loc(fused[#loc138, #loc139])
#loc210 = loc(fused[#loc141, #loc139])
#loc211 = loc(fused[#loc144, #loc142])
#loc212 = loc(fused[#loc145, #loc146])
#loc213 = loc(fused[#loc148, #loc146])
#loc214 = loc(fused[#loc149, #loc150])
