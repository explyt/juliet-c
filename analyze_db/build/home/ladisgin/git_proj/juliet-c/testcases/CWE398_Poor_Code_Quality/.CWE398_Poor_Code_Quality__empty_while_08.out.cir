!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc38 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":106:10)
#loc39 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":106:14)
#loc40 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":106:20)
#loc41 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":106:32)
#loc126 = loc(fused[#loc38, #loc39])
#loc127 = loc(fused[#loc40, #loc41])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_while_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc110)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_while_08_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc112)
    cir.br ^bb1 loc(#loc113)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc114)
    %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc10)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc10)
    cir.brcond %3 ^bb2, ^bb10 loc(#loc115)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc116)
  ^bb3:  // pred: ^bb2
    %4 = cir.const #cir.int<0> : !s32i loc(#loc7)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    cir.br ^bb4 loc(#loc117)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc117)
  ^bb5:  // 2 preds: ^bb4, ^bb6
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc18)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc19)
    %8 = cir.cmp(lt, %5, %7) : !s32i, !cir.bool loc(#loc119)
    cir.brcond %8 ^bb6, ^bb7 loc(#loc20)
  ^bb6:  // pred: ^bb5
    cir.br ^bb5 loc(#loc16)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc16)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc14)
  ^bb9:  // pred: ^bb8
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc3)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc3)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc21)
    cir.br ^bb10 loc(#loc9)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc9)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc5)
  } loc(#loc111)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_while_08_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc121)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc24)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc122)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc26)
    cir.return loc(#loc23)
  } loc(#loc120)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc123)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc124)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc32)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc33)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc34)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc35)
  cir.func @main(%arg0: !s32i loc(fused[#loc38, #loc39]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc40, #loc41])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc126)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc127)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc37)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc42)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc42)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc43)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc44)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc44)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc45)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc32)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc32)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc46)
    %8 = cir.get_global @CWE398_Poor_Code_Quality__empty_while_08_good : !cir.ptr<!cir.func<!void ()>> loc(#loc128)
    cir.call @CWE398_Poor_Code_Quality__empty_while_08_good() : () -> () loc(#loc47)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc33)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc33)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc34)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc50)
    %13 = cir.get_global @CWE398_Poor_Code_Quality__empty_while_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc129)
    cir.call @CWE398_Poor_Code_Quality__empty_while_08_bad() : () -> () loc(#loc51)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc35)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc54)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc130)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc130)
    cir.return %17 : !s32i loc(#loc130)
  } loc(#loc125)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc57)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc58)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc132)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc132)
    cir.return %2 : !s32i loc(#loc132)
  } loc(#loc131)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Inside the while statement\00" : !cir.array<!s8i x 27>> : !cir.array<!s8i x 27> {alignment = 1 : i64} loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc62)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc134)
    cir.br ^bb1 loc(#loc135)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc136)
    %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc69)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc69)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc137)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc60)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    cir.br ^bb11 loc(#loc72)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc138)
  ^bb4:  // pred: ^bb3
    %6 = cir.const #cir.int<0> : !s32i loc(#loc66)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc134)
    cir.br ^bb5 loc(#loc139)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc139)
  ^bb6:  // 2 preds: ^bb5, ^bb7
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
    %8 = cir.unary(inc, %7) : !s32i, !s32i loc(#loc80)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc140)
    %9 = cir.const #cir.int<10> : !s32i loc(#loc81)
    %10 = cir.cmp(lt, %7, %9) : !s32i, !cir.bool loc(#loc141)
    cir.brcond %10 ^bb7, ^bb8 loc(#loc82)
  ^bb7:  // pred: ^bb6
    %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 27>> loc(#loc61)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 27>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    cir.br ^bb6 loc(#loc78)
  ^bb8:  // pred: ^bb6
    cir.br ^bb9 loc(#loc78)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc76)
  ^bb10:  // pred: ^bb9
    %13 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc62)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc84)
    cir.br ^bb11 loc(#loc68)
  ^bb11:  // 2 preds: ^bb2, ^bb10
    cir.br ^bb12 loc(#loc68)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc64)
  } loc(#loc133)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc86)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc87)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc143)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc143)
    cir.return %2 : !s32i loc(#loc143)
  } loc(#loc142)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc145)
    cir.br ^bb1 loc(#loc146)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc147)
    %2 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc95)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc95)
    cir.brcond %3 ^bb2, ^bb10 loc(#loc148)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc149)
  ^bb3:  // pred: ^bb2
    %4 = cir.const #cir.int<0> : !s32i loc(#loc92)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc145)
    cir.br ^bb4 loc(#loc150)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc150)
  ^bb5:  // 2 preds: ^bb4, ^bb6
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc102)
    %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc103)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc151)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc104)
    %8 = cir.cmp(lt, %5, %7) : !s32i, !cir.bool loc(#loc152)
    cir.brcond %8 ^bb6, ^bb7 loc(#loc105)
  ^bb6:  // pred: ^bb5
    %9 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 27>> loc(#loc106)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 27>>), !cir.ptr<!s8i> loc(#loc106)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc107)
    cir.br ^bb5 loc(#loc101)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc101)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc99)
  ^bb9:  // pred: ^bb8
    %11 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc108)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc108)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc109)
    cir.br ^bb10 loc(#loc94)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc94)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc90)
  } loc(#loc144)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_while_08.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":44:19)
#loc4 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":33:1)
#loc5 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":46:1)
#loc6 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":39:13)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":39:21)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":35:5)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":45:5)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":35:8)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":35:26)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":36:5)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":38:9)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":43:9)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":40:13)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":42:13)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":40:20)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":40:19)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":40:25)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":40:23)
#loc21 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":44:9)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":91:1)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":95:1)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":93:5)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":93:11)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":94:5)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":94:11)
#loc28 = loc("/usr/include/stdlib.h":575:1)
#loc29 = loc("/usr/include/stdlib.h":575:41)
#loc30 = loc("/usr/include/time.h":76:1)
#loc31 = loc("/usr/include/time.h":76:38)
#loc32 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":111:15)
#loc33 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":113:15)
#loc34 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":116:15)
#loc35 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":118:15)
#loc36 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":106:1)
#loc37 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":121:1)
#loc42 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":107:1)
#loc43 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":109:27)
#loc44 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":109:22)
#loc45 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":109:5)
#loc46 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":111:5)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":112:5)
#loc48 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":112:51)
#loc49 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":113:5)
#loc50 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":116:5)
#loc51 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":117:5)
#loc52 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":117:50)
#loc53 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":118:5)
#loc54 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":120:12)
#loc55 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":120:5)
#loc56 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":21:1)
#loc57 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":24:1)
#loc58 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":23:12)
#loc59 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":23:5)
#loc60 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":58:19)
#loc61 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":67:27)
#loc62 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":70:19)
#loc63 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":53:1)
#loc64 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":72:1)
#loc65 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":64:13)
#loc66 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":64:21)
#loc67 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":55:5)
#loc68 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":71:5)
#loc69 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":55:8)
#loc70 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":55:27)
#loc71 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":56:5)
#loc72 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":59:5)
#loc73 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":61:5)
#loc74 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":58:9)
#loc75 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":63:9)
#loc76 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":69:9)
#loc77 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":65:13)
#loc78 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":68:13)
#loc79 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":65:20)
#loc80 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":65:19)
#loc81 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":65:25)
#loc82 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":65:23)
#loc83 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":67:17)
#loc84 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":70:9)
#loc85 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":26:1)
#loc86 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":29:1)
#loc87 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":28:12)
#loc88 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":28:5)
#loc89 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":75:1)
#loc90 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":89:1)
#loc91 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":81:13)
#loc92 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":81:21)
#loc93 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":77:5)
#loc94 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":88:5)
#loc95 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":77:8)
#loc96 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":77:26)
#loc97 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":78:5)
#loc98 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":80:9)
#loc99 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":86:9)
#loc100 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":82:13)
#loc101 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":85:13)
#loc102 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":82:20)
#loc103 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":82:19)
#loc104 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":82:25)
#loc105 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":82:23)
#loc106 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":84:27)
#loc107 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":84:17)
#loc108 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":87:19)
#loc109 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":87:9)
#loc110 = loc(fused[#loc1, #loc2])
#loc111 = loc(fused[#loc4, #loc5])
#loc112 = loc(fused[#loc6, #loc7])
#loc113 = loc(fused[#loc8, #loc9])
#loc114 = loc(fused[#loc10, #loc11])
#loc115 = loc(fused[#loc12, #loc9])
#loc116 = loc(fused[#loc13, #loc14])
#loc117 = loc(fused[#loc15, #loc16])
#loc118 = loc(fused[#loc18, #loc17])
#loc119 = loc(fused[#loc18, #loc19])
#loc120 = loc(fused[#loc22, #loc23])
#loc121 = loc(fused[#loc24, #loc25])
#loc122 = loc(fused[#loc26, #loc27])
#loc123 = loc(fused[#loc28, #loc29])
#loc124 = loc(fused[#loc30, #loc31])
#loc125 = loc(fused[#loc36, #loc37])
#loc128 = loc(fused[#loc47, #loc48])
#loc129 = loc(fused[#loc51, #loc52])
#loc130 = loc(fused[#loc55, #loc54])
#loc131 = loc(fused[#loc56, #loc57])
#loc132 = loc(fused[#loc59, #loc58])
#loc133 = loc(fused[#loc63, #loc64])
#loc134 = loc(fused[#loc65, #loc66])
#loc135 = loc(fused[#loc67, #loc68])
#loc136 = loc(fused[#loc69, #loc70])
#loc137 = loc(fused[#loc71, #loc72, #loc73, #loc68])
#loc138 = loc(fused[#loc75, #loc76])
#loc139 = loc(fused[#loc77, #loc78])
#loc140 = loc(fused[#loc80, #loc79])
#loc141 = loc(fused[#loc80, #loc81])
#loc142 = loc(fused[#loc85, #loc86])
#loc143 = loc(fused[#loc88, #loc87])
#loc144 = loc(fused[#loc89, #loc90])
#loc145 = loc(fused[#loc91, #loc92])
#loc146 = loc(fused[#loc93, #loc94])
#loc147 = loc(fused[#loc95, #loc96])
#loc148 = loc(fused[#loc97, #loc94])
#loc149 = loc(fused[#loc98, #loc99])
#loc150 = loc(fused[#loc100, #loc101])
#loc151 = loc(fused[#loc103, #loc102])
#loc152 = loc(fused[#loc103, #loc104])
