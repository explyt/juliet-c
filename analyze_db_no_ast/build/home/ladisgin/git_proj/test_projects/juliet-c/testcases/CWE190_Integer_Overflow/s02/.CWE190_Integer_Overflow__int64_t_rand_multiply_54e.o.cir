!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":22:65)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":22:73)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":37:69)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":37:77)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":48:69)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":48:77)
#loc67 = loc(fused[#loc5, #loc6])
#loc73 = loc(fused[#loc21, #loc22])
#loc80 = loc(fused[#loc40, #loc41])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printLongLongLine(!s64i) loc(#loc65)
  cir.func  @CWE190_Integer_Overflow__int64_t_rand_multiply_54e_badSink(%arg0: !s64i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc67)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc7)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc10)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
      %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc11)
      %4 = cir.cmp(gt, %1, %3) : !s64i, !s32i loc(#loc69)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc12)
      cir.if %5 {
        %6 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc71)
        %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc16)
        %8 = cir.const #cir.int<2> : !s32i loc(#loc15)
        %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc15)
        %10 = cir.binop(mul, %7, %9) nsw : !s64i loc(#loc16)
        cir.store %10, %6 : !s64i, !cir.ptr<!s64i> loc(#loc71)
        %11 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc17)
        cir.call @printLongLongLine(%11) : (!s64i) -> () loc(#loc18)
      } loc(#loc70)
    } loc(#loc68)
    cir.return loc(#loc4)
  } loc(#loc66)
  cir.func  @CWE190_Integer_Overflow__int64_t_rand_multiply_54e_goodG2BSink(%arg0: !s64i loc(fused[#loc21, #loc22])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc73)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc23)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc26)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc27)
      %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc27)
      %4 = cir.cmp(gt, %1, %3) : !s64i, !s32i loc(#loc75)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc28)
      cir.if %5 {
        %6 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc77)
        %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc32)
        %8 = cir.const #cir.int<2> : !s32i loc(#loc31)
        %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc31)
        %10 = cir.binop(mul, %7, %9) nsw : !s64i loc(#loc32)
        cir.store %10, %6 : !s64i, !cir.ptr<!s64i> loc(#loc77)
        %11 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc33)
        cir.call @printLongLongLine(%11) : (!s64i) -> () loc(#loc34)
      } loc(#loc76)
    } loc(#loc74)
    cir.return loc(#loc20)
  } loc(#loc72)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc78)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc37)
  cir.func  @CWE190_Integer_Overflow__int64_t_rand_multiply_54e_goodB2GSink(%arg0: !s64i loc(fused[#loc40, #loc41])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc80)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc42)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc45)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc46)
      %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc46)
      %4 = cir.cmp(gt, %1, %3) : !s64i, !s32i loc(#loc82)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc47)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc51)
          %7 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc52)
          %8 = cir.const #cir.int<2> : !s32i loc(#loc53)
          %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc53)
          %10 = cir.binop(div, %7, %9) : !s64i loc(#loc85)
          %11 = cir.cmp(lt, %6, %10) : !s64i, !s32i loc(#loc86)
          %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc55)
          cir.if %12 {
            %13 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc88)
            %14 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc61)
            %15 = cir.const #cir.int<2> : !s32i loc(#loc60)
            %16 = cir.cast(integral, %15 : !s32i), !s64i loc(#loc60)
            %17 = cir.binop(mul, %14, %16) nsw : !s64i loc(#loc61)
            cir.store %17, %13 : !s64i, !cir.ptr<!s64i> loc(#loc88)
            %18 = cir.load %13 : !cir.ptr<!s64i>, !s64i loc(#loc62)
            cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc63)
          } else {
            %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc37)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc37)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc64)
          } loc(#loc87)
        } loc(#loc84)
      } loc(#loc83)
    } loc(#loc81)
    cir.return loc(#loc39)
  } loc(#loc79)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":30:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":23:1)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":24:5)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":29:5)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":24:8)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":24:15)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":24:13)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":25:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":27:9)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":27:33)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":27:26)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":28:27)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":28:9)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":37:1)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":45:1)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":38:1)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":39:5)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":44:5)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":39:8)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":39:15)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":39:13)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":40:5)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":42:9)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":42:33)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":42:26)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":43:27)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":43:9)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":60:23)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":48:1)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":63:1)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":49:1)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":50:5)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":62:5)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":50:8)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":50:15)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":50:13)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":51:5)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":53:9)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":61:9)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":53:13)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":53:21)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":53:31)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":53:32)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":53:18)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":54:9)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":57:9)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":59:9)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":55:13)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":55:37)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":55:30)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":56:31)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":56:13)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_54e.c":60:13)
#loc65 = loc(fused[#loc1, #loc2])
#loc66 = loc(fused[#loc3, #loc4])
#loc68 = loc(fused[#loc8, #loc9])
#loc69 = loc(fused[#loc10, #loc11])
#loc70 = loc(fused[#loc13, #loc9])
#loc71 = loc(fused[#loc14, #loc15])
#loc72 = loc(fused[#loc19, #loc20])
#loc74 = loc(fused[#loc24, #loc25])
#loc75 = loc(fused[#loc26, #loc27])
#loc76 = loc(fused[#loc29, #loc25])
#loc77 = loc(fused[#loc30, #loc31])
#loc78 = loc(fused[#loc35, #loc36])
#loc79 = loc(fused[#loc38, #loc39])
#loc81 = loc(fused[#loc43, #loc44])
#loc82 = loc(fused[#loc45, #loc46])
#loc83 = loc(fused[#loc48, #loc44])
#loc84 = loc(fused[#loc49, #loc50])
#loc85 = loc(fused[#loc52, #loc53])
#loc86 = loc(fused[#loc51, #loc54])
#loc87 = loc(fused[#loc56, #loc57, #loc58, #loc50])
#loc88 = loc(fused[#loc59, #loc60])
