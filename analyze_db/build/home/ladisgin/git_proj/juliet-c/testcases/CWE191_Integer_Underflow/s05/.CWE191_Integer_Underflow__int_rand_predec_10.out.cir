!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc19 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":30:16)
#loc53 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":172:10)
#loc54 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":172:14)
#loc55 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":172:20)
#loc56 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":172:32)
#loc87 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":56:16)
#loc120 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":88:16)
#loc216 = loc(fused[#loc53, #loc54])
#loc217 = loc(fused[#loc55, #loc56])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s05/CWE191_Integer_Underflow__int_rand_predec_10.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" external @globalTrue : !s32i {alignment = 4 : i64} loc(#loc193)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc194)
  cir.func private @printIntLine(!s32i) loc(#loc195)
  cir.func no_proto @CWE191_Integer_Underflow__int_rand_predec_10_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc197)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc198)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc13)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc199)
    cir.br ^bb1 loc(#loc200)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc193)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc201)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc19)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc19)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc19)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc19)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc19)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc19)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc19)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc19)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc19)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc19)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc19)
    cir.br ^bb5(%21 : !u32i) loc(#loc19)
  ^bb4:  // pred: ^bb2
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc19)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc19)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc19)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc19)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc19)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc19)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc19)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc19)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc19)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc19)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc19)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc19)
    cir.br ^bb5(%37 : !u32i) loc(#loc19)
  ^bb5(%38: !u32i loc("CWE191_Integer_Underflow__int_rand_predec_10.c":30:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc19)
  ^bb6:  // pred: ^bb5
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc19)
    cir.store %39, %1 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    cir.br ^bb7 loc(#loc16)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc16)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc203)
  ^bb9:  // pred: ^bb8
    %40 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc193)
    %41 = cir.load %40 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    %42 = cir.cast(int_to_bool, %41 : !s32i), !cir.bool loc(#loc23)
    cir.brcond %42 ^bb10, ^bb13 loc(#loc204)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc205)
  ^bb11:  // pred: ^bb10
    %43 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    %44 = cir.unary(dec, %43) : !s32i, !s32i loc(#loc27)
    cir.store %44, %1 : !s32i, !cir.ptr<!s32i> loc(#loc206)
    %45 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    cir.store %45, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    %46 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc29)
    cir.call @printIntLine(%46) : (!s32i) -> () loc(#loc30)
    cir.br ^bb12 loc(#loc26)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc22)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc22)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc8)
  } loc(#loc196)
  cir.func no_proto @CWE191_Integer_Underflow__int_rand_predec_10_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc208)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc209)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc210)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc211)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc32)
  } loc(#loc207)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc212)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc213)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc214)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc50)
  cir.func @main(%arg0: !s32i loc(fused[#loc53, #loc54]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc55, #loc56])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc216)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc217)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc52)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc57)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc57)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc58)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc59)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc59)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc60)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc47)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %8 = cir.get_global @CWE191_Integer_Underflow__int_rand_predec_10_good : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call @CWE191_Integer_Underflow__int_rand_predec_10_good() : () -> () loc(#loc62)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc48)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc49)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %13 = cir.get_global @CWE191_Integer_Underflow__int_rand_predec_10_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc219)
    cir.call @CWE191_Integer_Underflow__int_rand_predec_10_bad() : () -> () loc(#loc66)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc50)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc69)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc220)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc220)
    cir.return %17 : !s32i loc(#loc220)
  } loc(#loc215)
  cir.global "private" external @globalFalse : !s32i {alignment = 4 : i64} loc(#loc221)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc74)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc223)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc224)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc81)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc225)
    cir.br ^bb1 loc(#loc226)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc193)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc85)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc227)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc87)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc87)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc87)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc87)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc87)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc87)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc87)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc87)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc87)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc87)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc87)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc87)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc87)
    cir.br ^bb5(%21 : !u32i) loc(#loc87)
  ^bb4:  // pred: ^bb2
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc87)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc87)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc87)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc87)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc87)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc87)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc87)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc87)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc87)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc87)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc87)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc87)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc87)
    cir.br ^bb5(%37 : !u32i) loc(#loc87)
  ^bb5(%38: !u32i loc("CWE191_Integer_Underflow__int_rand_predec_10.c":56:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc87)
  ^bb6:  // pred: ^bb5
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc87)
    cir.store %39, %1 : !s32i, !cir.ptr<!s32i> loc(#loc228)
    cir.br ^bb7 loc(#loc84)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc84)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc229)
  ^bb9:  // pred: ^bb8
    %40 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc221)
    %41 = cir.load %40 : !cir.ptr<!s32i>, !s32i loc(#loc91)
    %42 = cir.cast(int_to_bool, %41 : !s32i), !cir.bool loc(#loc91)
    cir.brcond %42 ^bb10, ^bb11 loc(#loc230)
  ^bb10:  // pred: ^bb9
    %43 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc73)
    %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    cir.br ^bb17 loc(#loc93)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc231)
  ^bb12:  // pred: ^bb11
    %45 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc98)
    %46 = cir.const #cir.int<2147483647> : !s32i loc(#loc99)
    %47 = cir.unary(minus, %46) : !s32i, !s32i loc(#loc99)
    %48 = cir.const #cir.int<1> : !s32i loc(#loc99)
    %49 = cir.binop(sub, %47, %48) nsw : !s32i loc(#loc99)
    %50 = cir.cmp(gt, %45, %49) : !s32i, !cir.bool loc(#loc232)
    cir.brcond %50 ^bb13, ^bb14 loc(#loc233)
  ^bb13:  // pred: ^bb12
    %51 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc103)
    %52 = cir.unary(dec, %51) : !s32i, !s32i loc(#loc103)
    cir.store %52, %1 : !s32i, !cir.ptr<!s32i> loc(#loc234)
    %53 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc78)
    cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc223)
    %54 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc105)
    cir.call @printIntLine(%54) : (!s32i) -> () loc(#loc106)
    cir.br ^bb15 loc(#loc101)
  ^bb14:  // pred: ^bb12
    %55 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc74)
    %56 = cir.cast(array_to_ptrdecay, %55 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%56) : (!cir.ptr<!s8i>) -> () loc(#loc107)
    cir.br ^bb15 loc(#loc97)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc97)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc90)
  ^bb17:  // 2 preds: ^bb10, ^bb16
    cir.br ^bb18 loc(#loc90)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc76)
  } loc(#loc222)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc236)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc237)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc114)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc238)
    cir.br ^bb1 loc(#loc239)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc193)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc118)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc118)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc240)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc120)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc120)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc120)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc120)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc120)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc120)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc120)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc120)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc120)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc120)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc120)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc120)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc120)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc120)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc120)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc120)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc120)
    cir.br ^bb5(%21 : !u32i) loc(#loc120)
  ^bb4:  // pred: ^bb2
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc120)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc120)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc120)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc120)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc120)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc120)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc120)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc120)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc120)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc120)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc120)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc120)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc120)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc120)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc120)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc120)
    cir.br ^bb5(%37 : !u32i) loc(#loc120)
  ^bb5(%38: !u32i loc("CWE191_Integer_Underflow__int_rand_predec_10.c":88:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc120)
  ^bb6:  // pred: ^bb5
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc120)
    cir.store %39, %1 : !s32i, !cir.ptr<!s32i> loc(#loc241)
    cir.br ^bb7 loc(#loc117)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc117)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc242)
  ^bb9:  // pred: ^bb8
    %40 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc193)
    %41 = cir.load %40 : !cir.ptr<!s32i>, !s32i loc(#loc124)
    %42 = cir.cast(int_to_bool, %41 : !s32i), !cir.bool loc(#loc124)
    cir.brcond %42 ^bb10, ^bb16 loc(#loc243)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc244)
  ^bb11:  // pred: ^bb10
    %43 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc128)
    %44 = cir.const #cir.int<2147483647> : !s32i loc(#loc129)
    %45 = cir.unary(minus, %44) : !s32i, !s32i loc(#loc129)
    %46 = cir.const #cir.int<1> : !s32i loc(#loc129)
    %47 = cir.binop(sub, %45, %46) nsw : !s32i loc(#loc129)
    %48 = cir.cmp(gt, %43, %47) : !s32i, !cir.bool loc(#loc245)
    cir.brcond %48 ^bb12, ^bb13 loc(#loc246)
  ^bb12:  // pred: ^bb11
    %49 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc133)
    %50 = cir.unary(dec, %49) : !s32i, !s32i loc(#loc133)
    cir.store %50, %1 : !s32i, !cir.ptr<!s32i> loc(#loc247)
    %51 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc111)
    cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc236)
    %52 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc135)
    cir.call @printIntLine(%52) : (!s32i) -> () loc(#loc136)
    cir.br ^bb14 loc(#loc131)
  ^bb13:  // pred: ^bb11
    %53 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc137)
    %54 = cir.cast(array_to_ptrdecay, %53 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc137)
    cir.call @printLine(%54) : (!cir.ptr<!s8i>) -> () loc(#loc138)
    cir.br ^bb14 loc(#loc127)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc127)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc123)
  ^bb16:  // 2 preds: ^bb9, ^bb15
    cir.br ^bb17 loc(#loc123)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc109)
  } loc(#loc235)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc249)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc250)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc145)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc251)
    cir.br ^bb1 loc(#loc252)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc221)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc149)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc253)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc153)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc153)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc154)
    cir.br ^bb4 loc(#loc151)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc155)
    %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc156)
    cir.store %9, %1 : !s32i, !cir.ptr<!s32i> loc(#loc254)
    cir.br ^bb4 loc(#loc148)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc148)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc255)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc193)
    %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc160)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc160)
    cir.brcond %12 ^bb7, ^bb10 loc(#loc256)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc257)
  ^bb8:  // pred: ^bb7
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc164)
    %14 = cir.unary(dec, %13) : !s32i, !s32i loc(#loc164)
    cir.store %14, %1 : !s32i, !cir.ptr<!s32i> loc(#loc258)
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc142)
    cir.store %15, %0 : !s32i, !cir.ptr<!s32i> loc(#loc249)
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc166)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc167)
    cir.br ^bb9 loc(#loc163)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc159)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc159)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc140)
  } loc(#loc248)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc260)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc261)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc174)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc262)
    cir.br ^bb1 loc(#loc263)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc193)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc178)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc178)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc264)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<2> : !s32i loc(#loc180)
    %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc181)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc265)
    cir.br ^bb3 loc(#loc177)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc177)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc266)
  ^bb5:  // pred: ^bb4
    %8 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc193)
    %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc185)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc185)
    cir.brcond %10 ^bb6, ^bb9 loc(#loc267)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc268)
  ^bb7:  // pred: ^bb6
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc189)
    %12 = cir.unary(dec, %11) : !s32i, !s32i loc(#loc189)
    cir.store %12, %1 : !s32i, !cir.ptr<!s32i> loc(#loc269)
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc171)
    cir.store %13, %0 : !s32i, !cir.ptr<!s32i> loc(#loc260)
    %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc191)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc192)
    cir.br ^bb8 loc(#loc188)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc184)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc184)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc169)
  } loc(#loc259)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s05/CWE191_Integer_Underflow__int_rand_predec_10.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":116:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":116:12)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":22:1)
#loc8 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":41:1)
#loc9 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":37:13)
#loc10 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":37:26)
#loc11 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":24:5)
#loc12 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":24:9)
#loc13 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":26:12)
#loc14 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":26:5)
#loc15 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":27:5)
#loc16 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":31:5)
#loc17 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":27:8)
#loc18 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":28:5)
#loc20 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":30:9)
#loc21 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":32:5)
#loc22 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":40:5)
#loc23 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":32:8)
#loc24 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":33:5)
#loc25 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":34:9)
#loc26 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":39:9)
#loc27 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":36:13)
#loc28 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":36:15)
#loc29 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":38:26)
#loc30 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":38:13)
#loc31 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":155:1)
#loc32 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":161:1)
#loc33 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":157:5)
#loc34 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":157:14)
#loc35 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":158:5)
#loc36 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":158:14)
#loc37 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":159:5)
#loc38 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":159:14)
#loc39 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":160:5)
#loc40 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":160:14)
#loc41 = loc("/usr/include/stdlib.h":575:1)
#loc42 = loc("/usr/include/stdlib.h":575:41)
#loc43 = loc("/usr/include/time.h":76:1)
#loc44 = loc("/usr/include/time.h":76:38)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc47 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":177:15)
#loc48 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":179:15)
#loc49 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":182:15)
#loc50 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":184:15)
#loc51 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":172:1)
#loc52 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":187:1)
#loc57 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":173:1)
#loc58 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":175:27)
#loc59 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":175:22)
#loc60 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":175:5)
#loc61 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":177:5)
#loc62 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":178:5)
#loc63 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":178:55)
#loc64 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":179:5)
#loc65 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":182:5)
#loc66 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":183:5)
#loc67 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":183:54)
#loc68 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":184:5)
#loc69 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":186:12)
#loc70 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":186:5)
#loc71 = loc("../../../testcasesupport/std_testcase.h":117:1)
#loc72 = loc("../../../testcasesupport/std_testcase.h":117:12)
#loc73 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":61:19)
#loc74 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":74:23)
#loc75 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":48:1)
#loc76 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":77:1)
#loc77 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":69:13)
#loc78 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":69:26)
#loc79 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":50:5)
#loc80 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":50:9)
#loc81 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":52:12)
#loc82 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":52:5)
#loc83 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":53:5)
#loc84 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":57:5)
#loc85 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":53:8)
#loc86 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":54:5)
#loc88 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":56:9)
#loc89 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":58:5)
#loc90 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":76:5)
#loc91 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":58:8)
#loc92 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":59:5)
#loc93 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":62:5)
#loc94 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":64:5)
#loc95 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":61:9)
#loc96 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":66:9)
#loc97 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":75:9)
#loc98 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":66:13)
#loc99 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":66:20)
#loc100 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":67:9)
#loc101 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":71:9)
#loc102 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":73:9)
#loc103 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":68:13)
#loc104 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":68:15)
#loc105 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":70:26)
#loc106 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":70:13)
#loc107 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":74:13)
#loc108 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":80:1)
#loc109 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":104:1)
#loc110 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":96:13)
#loc111 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":96:26)
#loc112 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":82:5)
#loc113 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":82:9)
#loc114 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":84:12)
#loc115 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":84:5)
#loc116 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":85:5)
#loc117 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":89:5)
#loc118 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":85:8)
#loc119 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":86:5)
#loc121 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":88:9)
#loc122 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":90:5)
#loc123 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":103:5)
#loc124 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":90:8)
#loc125 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":91:5)
#loc126 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":93:9)
#loc127 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":102:9)
#loc128 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":93:13)
#loc129 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":93:20)
#loc130 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":94:9)
#loc131 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":98:9)
#loc132 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":100:9)
#loc133 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":95:13)
#loc134 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":95:15)
#loc135 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":97:26)
#loc136 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":97:13)
#loc137 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":101:23)
#loc138 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":101:13)
#loc139 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":107:1)
#loc140 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":131:1)
#loc141 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":127:13)
#loc142 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":127:26)
#loc143 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":109:5)
#loc144 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":109:9)
#loc145 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":111:12)
#loc146 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":111:5)
#loc147 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":112:5)
#loc148 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":121:5)
#loc149 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":112:8)
#loc150 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":113:5)
#loc151 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":116:5)
#loc152 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":118:5)
#loc153 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":115:19)
#loc154 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":115:9)
#loc155 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":120:17)
#loc156 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":120:16)
#loc157 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":120:9)
#loc158 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":122:5)
#loc159 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":130:5)
#loc160 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":122:8)
#loc161 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":123:5)
#loc162 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":124:9)
#loc163 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":129:9)
#loc164 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":126:13)
#loc165 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":126:15)
#loc166 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":128:26)
#loc167 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":128:13)
#loc168 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":134:1)
#loc169 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":153:1)
#loc170 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":149:13)
#loc171 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":149:26)
#loc172 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":136:5)
#loc173 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":136:9)
#loc174 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":138:12)
#loc175 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":138:5)
#loc176 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":139:5)
#loc177 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":143:5)
#loc178 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":139:8)
#loc179 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":140:5)
#loc180 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":142:17)
#loc181 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":142:16)
#loc182 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":142:9)
#loc183 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":144:5)
#loc184 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":152:5)
#loc185 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":144:8)
#loc186 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":145:5)
#loc187 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":146:9)
#loc188 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":151:9)
#loc189 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":148:13)
#loc190 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":148:15)
#loc191 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":150:26)
#loc192 = loc("CWE191_Integer_Underflow__int_rand_predec_10.c":150:13)
#loc193 = loc(fused[#loc1, #loc2])
#loc194 = loc(fused[#loc3, #loc4])
#loc195 = loc(fused[#loc5, #loc6])
#loc196 = loc(fused[#loc7, #loc8])
#loc197 = loc(fused[#loc9, #loc10])
#loc198 = loc(fused[#loc11, #loc12])
#loc199 = loc(fused[#loc14, #loc13])
#loc200 = loc(fused[#loc15, #loc16])
#loc201 = loc(fused[#loc18, #loc16])
#loc202 = loc(fused[#loc20, #loc19])
#loc203 = loc(fused[#loc21, #loc22])
#loc204 = loc(fused[#loc24, #loc22])
#loc205 = loc(fused[#loc25, #loc26])
#loc206 = loc(fused[#loc27, #loc28])
#loc207 = loc(fused[#loc31, #loc32])
#loc208 = loc(fused[#loc33, #loc34])
#loc209 = loc(fused[#loc35, #loc36])
#loc210 = loc(fused[#loc37, #loc38])
#loc211 = loc(fused[#loc39, #loc40])
#loc212 = loc(fused[#loc41, #loc42])
#loc213 = loc(fused[#loc43, #loc44])
#loc214 = loc(fused[#loc45, #loc46])
#loc215 = loc(fused[#loc51, #loc52])
#loc218 = loc(fused[#loc62, #loc63])
#loc219 = loc(fused[#loc66, #loc67])
#loc220 = loc(fused[#loc70, #loc69])
#loc221 = loc(fused[#loc71, #loc72])
#loc222 = loc(fused[#loc75, #loc76])
#loc223 = loc(fused[#loc77, #loc78])
#loc224 = loc(fused[#loc79, #loc80])
#loc225 = loc(fused[#loc82, #loc81])
#loc226 = loc(fused[#loc83, #loc84])
#loc227 = loc(fused[#loc86, #loc84])
#loc228 = loc(fused[#loc88, #loc87])
#loc229 = loc(fused[#loc89, #loc90])
#loc230 = loc(fused[#loc92, #loc93, #loc94, #loc90])
#loc231 = loc(fused[#loc96, #loc97])
#loc232 = loc(fused[#loc98, #loc99])
#loc233 = loc(fused[#loc100, #loc101, #loc102, #loc97])
#loc234 = loc(fused[#loc103, #loc104])
#loc235 = loc(fused[#loc108, #loc109])
#loc236 = loc(fused[#loc110, #loc111])
#loc237 = loc(fused[#loc112, #loc113])
#loc238 = loc(fused[#loc115, #loc114])
#loc239 = loc(fused[#loc116, #loc117])
#loc240 = loc(fused[#loc119, #loc117])
#loc241 = loc(fused[#loc121, #loc120])
#loc242 = loc(fused[#loc122, #loc123])
#loc243 = loc(fused[#loc125, #loc123])
#loc244 = loc(fused[#loc126, #loc127])
#loc245 = loc(fused[#loc128, #loc129])
#loc246 = loc(fused[#loc130, #loc131, #loc132, #loc127])
#loc247 = loc(fused[#loc133, #loc134])
#loc248 = loc(fused[#loc139, #loc140])
#loc249 = loc(fused[#loc141, #loc142])
#loc250 = loc(fused[#loc143, #loc144])
#loc251 = loc(fused[#loc146, #loc145])
#loc252 = loc(fused[#loc147, #loc148])
#loc253 = loc(fused[#loc150, #loc151, #loc152, #loc148])
#loc254 = loc(fused[#loc157, #loc155])
#loc255 = loc(fused[#loc158, #loc159])
#loc256 = loc(fused[#loc161, #loc159])
#loc257 = loc(fused[#loc162, #loc163])
#loc258 = loc(fused[#loc164, #loc165])
#loc259 = loc(fused[#loc168, #loc169])
#loc260 = loc(fused[#loc170, #loc171])
#loc261 = loc(fused[#loc172, #loc173])
#loc262 = loc(fused[#loc175, #loc174])
#loc263 = loc(fused[#loc176, #loc177])
#loc264 = loc(fused[#loc179, #loc177])
#loc265 = loc(fused[#loc182, #loc180])
#loc266 = loc(fused[#loc183, #loc184])
#loc267 = loc(fused[#loc186, #loc184])
#loc268 = loc(fused[#loc187, #loc188])
#loc269 = loc(fused[#loc189, #loc190])
