!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_min_sub_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc158)
  cir.func private @printIntLine(!s32i) loc(#loc159)
  cir.func no_proto @CWE191_Integer_Underflow__short_min_sub_05_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc161)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc162)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc11)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc163)
    cir.br ^bb1 loc(#loc164)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc158)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc15)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc165)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<32767> : !s32i loc(#loc17)
    %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc17)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc17)
    %11 = cir.cast(integral, %10 : !s32i), !s16i loc(#loc17)
    cir.store %11, %1 : !s16i, !cir.ptr<!s16i> loc(#loc166)
    cir.br ^bb3 loc(#loc14)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc14)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc167)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc158)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %14 ^bb6, ^bb9 loc(#loc168)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc169)
  ^bb7:  // pred: ^bb6
    %15 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc25)
    %16 = cir.cast(integral, %15 : !s16i), !s32i loc(#loc25)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc25)
    %19 = cir.cast(integral, %18 : !s32i), !s16i loc(#loc25)
    cir.store %19, %0 : !s16i, !cir.ptr<!s16i> loc(#loc161)
    %20 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc26)
    %21 = cir.cast(integral, %20 : !s16i), !s32i loc(#loc26)
    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc27)
    cir.br ^bb8 loc(#loc24)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc20)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc20)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc6)
  } loc(#loc160)
  cir.func no_proto @CWE191_Integer_Underflow__short_min_sub_05_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc171)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc172)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc173)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc174)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    cir.return loc(#loc29)
  } loc(#loc170)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc175)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc176)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc43)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc178)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc179)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc50)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc50)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc180)
    cir.br ^bb1 loc(#loc181)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc158)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc54)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc54)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc182)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<32767> : !s32i loc(#loc56)
    %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc56)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc56)
    %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc56)
    %11 = cir.cast(integral, %10 : !s32i), !s16i loc(#loc56)
    cir.store %11, %1 : !s16i, !cir.ptr<!s16i> loc(#loc183)
    cir.br ^bb3 loc(#loc53)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc53)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc184)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc175)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc60)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc60)
    cir.brcond %14 ^bb6, ^bb7 loc(#loc185)
  ^bb6:  // pred: ^bb5
    %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc42)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    cir.br ^bb13 loc(#loc62)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc186)
  ^bb8:  // pred: ^bb7
    %17 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc67)
    %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc67)
    %19 = cir.const #cir.int<32767> : !s32i loc(#loc68)
    %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc68)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc68)
    %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc68)
    %23 = cir.cmp(gt, %18, %22) : !s32i, !cir.bool loc(#loc187)
    cir.brcond %23 ^bb9, ^bb10 loc(#loc188)
  ^bb9:  // pred: ^bb8
    %24 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc72)
    %25 = cir.cast(integral, %24 : !s16i), !s32i loc(#loc72)
    %26 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %27 = cir.binop(sub, %25, %26) nsw : !s32i loc(#loc72)
    %28 = cir.cast(integral, %27 : !s32i), !s16i loc(#loc72)
    cir.store %28, %0 : !s16i, !cir.ptr<!s16i> loc(#loc178)
    %29 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc73)
    %30 = cir.cast(integral, %29 : !s16i), !s32i loc(#loc73)
    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc74)
    cir.br ^bb11 loc(#loc70)
  ^bb10:  // pred: ^bb8
    %31 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc43)
    %32 = cir.cast(array_to_ptrdecay, %31 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    cir.br ^bb11 loc(#loc66)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc66)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc59)
  ^bb13:  // 2 preds: ^bb6, ^bb12
    cir.br ^bb14 loc(#loc59)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc45)
  } loc(#loc177)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc190)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc191)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc82)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc82)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc192)
    cir.br ^bb1 loc(#loc193)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc158)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc86)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc194)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<32767> : !s32i loc(#loc88)
    %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc88)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc88)
    %11 = cir.cast(integral, %10 : !s32i), !s16i loc(#loc88)
    cir.store %11, %1 : !s16i, !cir.ptr<!s16i> loc(#loc195)
    cir.br ^bb3 loc(#loc85)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc85)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc196)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc158)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc92)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc92)
    cir.brcond %14 ^bb6, ^bb12 loc(#loc197)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc198)
  ^bb7:  // pred: ^bb6
    %15 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc96)
    %16 = cir.cast(integral, %15 : !s16i), !s32i loc(#loc96)
    %17 = cir.const #cir.int<32767> : !s32i loc(#loc97)
    %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc97)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc97)
    %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc97)
    %21 = cir.cmp(gt, %16, %20) : !s32i, !cir.bool loc(#loc199)
    cir.brcond %21 ^bb8, ^bb9 loc(#loc200)
  ^bb8:  // pred: ^bb7
    %22 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc101)
    %23 = cir.cast(integral, %22 : !s16i), !s32i loc(#loc101)
    %24 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc101)
    %26 = cir.cast(integral, %25 : !s32i), !s16i loc(#loc101)
    cir.store %26, %0 : !s16i, !cir.ptr<!s16i> loc(#loc190)
    %27 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc102)
    %28 = cir.cast(integral, %27 : !s16i), !s32i loc(#loc102)
    cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc103)
    cir.br ^bb10 loc(#loc99)
  ^bb9:  // pred: ^bb7
    %29 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc104)
    %30 = cir.cast(array_to_ptrdecay, %29 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc104)
    cir.call @printLine(%30) : (!cir.ptr<!s8i>) -> () loc(#loc105)
    cir.br ^bb10 loc(#loc95)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc95)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc91)
  ^bb12:  // 2 preds: ^bb5, ^bb11
    cir.br ^bb13 loc(#loc91)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc77)
  } loc(#loc189)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc202)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc203)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc112)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc112)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc204)
    cir.br ^bb1 loc(#loc205)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc175)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc116)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc116)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc206)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc120)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc120)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc121)
    cir.br ^bb4 loc(#loc118)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<2> : !s32i loc(#loc122)
    %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc123)
    %11 = cir.cast(integral, %10 : !s32i), !s16i loc(#loc123)
    cir.store %11, %1 : !s16i, !cir.ptr<!s16i> loc(#loc207)
    cir.br ^bb4 loc(#loc115)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc115)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc208)
  ^bb6:  // pred: ^bb5
    %12 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc158)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc127)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc127)
    cir.brcond %14 ^bb7, ^bb10 loc(#loc209)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc210)
  ^bb8:  // pred: ^bb7
    %15 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc131)
    %16 = cir.cast(integral, %15 : !s16i), !s32i loc(#loc131)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc109)
    %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc131)
    %19 = cir.cast(integral, %18 : !s32i), !s16i loc(#loc131)
    cir.store %19, %0 : !s16i, !cir.ptr<!s16i> loc(#loc202)
    %20 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc132)
    %21 = cir.cast(integral, %20 : !s16i), !s32i loc(#loc132)
    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc133)
    cir.br ^bb9 loc(#loc130)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc126)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc126)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc107)
  } loc(#loc201)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc212)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc213)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc140)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc140)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc214)
    cir.br ^bb1 loc(#loc215)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc158)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc144)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc144)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc216)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<2> : !s32i loc(#loc146)
    %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc147)
    %9 = cir.cast(integral, %8 : !s32i), !s16i loc(#loc147)
    cir.store %9, %1 : !s16i, !cir.ptr<!s16i> loc(#loc217)
    cir.br ^bb3 loc(#loc143)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc143)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc218)
  ^bb5:  // pred: ^bb4
    %10 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc158)
    %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc151)
    cir.brcond %12 ^bb6, ^bb9 loc(#loc219)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc220)
  ^bb7:  // pred: ^bb6
    %13 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc155)
    %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc155)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc137)
    %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc155)
    %17 = cir.cast(integral, %16 : !s32i), !s16i loc(#loc155)
    cir.store %17, %0 : !s16i, !cir.ptr<!s16i> loc(#loc212)
    %18 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc156)
    %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc156)
    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc157)
    cir.br ^bb8 loc(#loc154)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc150)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc150)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc135)
  } loc(#loc211)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_min_sub_05.c":0:0)
#loc1 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":23:1)
#loc2 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":23:25)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":28:1)
#loc6 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":45:1)
#loc7 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":41:13)
#loc8 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":41:35)
#loc9 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":30:5)
#loc10 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":30:11)
#loc11 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":31:12)
#loc12 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":31:5)
#loc13 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":32:5)
#loc14 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":36:5)
#loc15 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":32:8)
#loc16 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":33:5)
#loc17 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":35:16)
#loc18 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":35:9)
#loc19 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":37:5)
#loc20 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":44:5)
#loc21 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":37:8)
#loc22 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":38:5)
#loc23 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":39:9)
#loc24 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":43:9)
#loc25 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":41:28)
#loc26 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":42:26)
#loc27 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":42:13)
#loc28 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":151:1)
#loc29 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":157:1)
#loc30 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":153:5)
#loc31 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":153:14)
#loc32 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":154:5)
#loc33 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":154:14)
#loc34 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":155:5)
#loc35 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":155:14)
#loc36 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":156:5)
#loc37 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":156:14)
#loc38 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":24:1)
#loc39 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":24:26)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc42 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":64:19)
#loc43 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":76:23)
#loc44 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":52:1)
#loc45 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":79:1)
#loc46 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":71:13)
#loc47 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":71:35)
#loc48 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":54:5)
#loc49 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":54:11)
#loc50 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":55:12)
#loc51 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":55:5)
#loc52 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":56:5)
#loc53 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":60:5)
#loc54 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":56:8)
#loc55 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":57:5)
#loc56 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":59:16)
#loc57 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":59:9)
#loc58 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":61:5)
#loc59 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":78:5)
#loc60 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":61:8)
#loc61 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":62:5)
#loc62 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":65:5)
#loc63 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":67:5)
#loc64 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":64:9)
#loc65 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":69:9)
#loc66 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":77:9)
#loc67 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":69:13)
#loc68 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":69:20)
#loc69 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":70:9)
#loc70 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":73:9)
#loc71 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":75:9)
#loc72 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":71:28)
#loc73 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":72:26)
#loc74 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":72:13)
#loc75 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":76:13)
#loc76 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":82:1)
#loc77 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":104:1)
#loc78 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":96:13)
#loc79 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":96:35)
#loc80 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":84:5)
#loc81 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":84:11)
#loc82 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":85:12)
#loc83 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":85:5)
#loc84 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":86:5)
#loc85 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":90:5)
#loc86 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":86:8)
#loc87 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":87:5)
#loc88 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":89:16)
#loc89 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":89:9)
#loc90 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":91:5)
#loc91 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":103:5)
#loc92 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":91:8)
#loc93 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":92:5)
#loc94 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":94:9)
#loc95 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":102:9)
#loc96 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":94:13)
#loc97 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":94:20)
#loc98 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":95:9)
#loc99 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":98:9)
#loc100 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":100:9)
#loc101 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":96:28)
#loc102 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":97:26)
#loc103 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":97:13)
#loc104 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":101:23)
#loc105 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":101:13)
#loc106 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":107:1)
#loc107 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":129:1)
#loc108 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":125:13)
#loc109 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":125:35)
#loc110 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":109:5)
#loc111 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":109:11)
#loc112 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":110:12)
#loc113 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":110:5)
#loc114 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":111:5)
#loc115 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":120:5)
#loc116 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":111:8)
#loc117 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":112:5)
#loc118 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":115:5)
#loc119 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":117:5)
#loc120 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":114:19)
#loc121 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":114:9)
#loc122 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":119:17)
#loc123 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":119:16)
#loc124 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":119:9)
#loc125 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":121:5)
#loc126 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":128:5)
#loc127 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":121:8)
#loc128 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":122:5)
#loc129 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":123:9)
#loc130 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":127:9)
#loc131 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":125:28)
#loc132 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":126:26)
#loc133 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":126:13)
#loc134 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":132:1)
#loc135 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":149:1)
#loc136 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":145:13)
#loc137 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":145:35)
#loc138 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":134:5)
#loc139 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":134:11)
#loc140 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":135:12)
#loc141 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":135:5)
#loc142 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":136:5)
#loc143 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":140:5)
#loc144 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":136:8)
#loc145 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":137:5)
#loc146 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":139:17)
#loc147 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":139:16)
#loc148 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":139:9)
#loc149 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":141:5)
#loc150 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":148:5)
#loc151 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":141:8)
#loc152 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":142:5)
#loc153 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":143:9)
#loc154 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":147:9)
#loc155 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":145:28)
#loc156 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":146:26)
#loc157 = loc("CWE191_Integer_Underflow__short_min_sub_05.c":146:13)
#loc158 = loc(fused[#loc1, #loc2])
#loc159 = loc(fused[#loc3, #loc4])
#loc160 = loc(fused[#loc5, #loc6])
#loc161 = loc(fused[#loc7, #loc8])
#loc162 = loc(fused[#loc9, #loc10])
#loc163 = loc(fused[#loc12, #loc11])
#loc164 = loc(fused[#loc13, #loc14])
#loc165 = loc(fused[#loc16, #loc14])
#loc166 = loc(fused[#loc18, #loc17])
#loc167 = loc(fused[#loc19, #loc20])
#loc168 = loc(fused[#loc22, #loc20])
#loc169 = loc(fused[#loc23, #loc24])
#loc170 = loc(fused[#loc28, #loc29])
#loc171 = loc(fused[#loc30, #loc31])
#loc172 = loc(fused[#loc32, #loc33])
#loc173 = loc(fused[#loc34, #loc35])
#loc174 = loc(fused[#loc36, #loc37])
#loc175 = loc(fused[#loc38, #loc39])
#loc176 = loc(fused[#loc40, #loc41])
#loc177 = loc(fused[#loc44, #loc45])
#loc178 = loc(fused[#loc46, #loc47])
#loc179 = loc(fused[#loc48, #loc49])
#loc180 = loc(fused[#loc51, #loc50])
#loc181 = loc(fused[#loc52, #loc53])
#loc182 = loc(fused[#loc55, #loc53])
#loc183 = loc(fused[#loc57, #loc56])
#loc184 = loc(fused[#loc58, #loc59])
#loc185 = loc(fused[#loc61, #loc62, #loc63, #loc59])
#loc186 = loc(fused[#loc65, #loc66])
#loc187 = loc(fused[#loc67, #loc68])
#loc188 = loc(fused[#loc69, #loc70, #loc71, #loc66])
#loc189 = loc(fused[#loc76, #loc77])
#loc190 = loc(fused[#loc78, #loc79])
#loc191 = loc(fused[#loc80, #loc81])
#loc192 = loc(fused[#loc83, #loc82])
#loc193 = loc(fused[#loc84, #loc85])
#loc194 = loc(fused[#loc87, #loc85])
#loc195 = loc(fused[#loc89, #loc88])
#loc196 = loc(fused[#loc90, #loc91])
#loc197 = loc(fused[#loc93, #loc91])
#loc198 = loc(fused[#loc94, #loc95])
#loc199 = loc(fused[#loc96, #loc97])
#loc200 = loc(fused[#loc98, #loc99, #loc100, #loc95])
#loc201 = loc(fused[#loc106, #loc107])
#loc202 = loc(fused[#loc108, #loc109])
#loc203 = loc(fused[#loc110, #loc111])
#loc204 = loc(fused[#loc113, #loc112])
#loc205 = loc(fused[#loc114, #loc115])
#loc206 = loc(fused[#loc117, #loc118, #loc119, #loc115])
#loc207 = loc(fused[#loc124, #loc122])
#loc208 = loc(fused[#loc125, #loc126])
#loc209 = loc(fused[#loc128, #loc126])
#loc210 = loc(fused[#loc129, #loc130])
#loc211 = loc(fused[#loc134, #loc135])
#loc212 = loc(fused[#loc136, #loc137])
#loc213 = loc(fused[#loc138, #loc139])
#loc214 = loc(fused[#loc141, #loc140])
#loc215 = loc(fused[#loc142, #loc143])
#loc216 = loc(fused[#loc145, #loc143])
#loc217 = loc(fused[#loc148, #loc146])
#loc218 = loc(fused[#loc149, #loc150])
#loc219 = loc(fused[#loc152, #loc150])
#loc220 = loc(fused[#loc153, #loc154])
