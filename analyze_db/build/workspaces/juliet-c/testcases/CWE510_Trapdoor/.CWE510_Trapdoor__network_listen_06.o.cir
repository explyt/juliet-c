!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__network_listen_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc109)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc110)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc111)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc112)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc113)
  cir.func private @close(!s32i) -> !s32i loc(#loc114)
  cir.func no_proto @CWE510_Trapdoor__network_listen_06_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc17)
      %1 = cir.const #cir.int<5> : !s32i loc(#loc18)
      %2 = cir.cmp(eq, %0, %1) : !s32i, !cir.bool loc(#loc117)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc120)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc121)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc122)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc25)
          %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc25)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc121)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc27)
          %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc27)
          cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc122)
          cir.scope {
            cir.do {
              cir.scope {
                %10 = cir.const #cir.int<2> : !s32i loc(#loc32)
                %11 = cir.const #cir.int<1> : !s32i loc(#loc33)
                %12 = cir.const #cir.int<6> : !s32i loc(#loc34)
                %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc35)
                cir.store %13, %4 : !s32i, !cir.ptr<!s32i> loc(#loc125)
                cir.scope {
                  %32 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc40)
                  %33 = cir.const #cir.int<1> : !s32i loc(#loc41)
                  %34 = cir.unary(minus, %33) nsw : !s32i, !s32i loc(#loc41)
                  %35 = cir.cmp(eq, %32, %34) : !s32i, !cir.bool loc(#loc127)
                  cir.if %35 {
                    cir.break loc(#loc43)
                  } loc(#loc128)
                } loc(#loc126)
                %14 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc129)
                %15 = cir.const #cir.int<0> : !s32i loc(#loc46)
                %16 = cir.const #cir.int<16> : !u64i loc(#loc130)
                cir.libc.memset %16 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc131)
                %17 = cir.const #cir.int<2> : !s32i loc(#loc51)
                %18 = cir.cast(integral, %17 : !s32i), !u16i loc(#loc51)
                %19 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc52)
                cir.store %18, %19 : !u16i, !cir.ptr<!u16i> loc(#loc132)
                %20 = cir.const #cir.int<0> : !s32i loc(#loc54)
                %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc54)
                %22 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc55)
                %23 = cir.get_member %22[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc56)
                cir.store %21, %23 : !u32i, !cir.ptr<!u32i> loc(#loc133)
                %24 = cir.const #cir.int<30000> : !s32i loc(#loc58)
                %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc58)
                %26 = cir.call @htons(%25) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc59)
                %27 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc60)
                cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc134)
                cir.scope {
                  %32 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc65)
                  %33 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc136)
                  %34 = cir.const #cir.int<16> : !u64i loc(#loc137)
                  %35 = cir.cast(integral, %34 : !u64i), !u32i loc(#loc137)
                  %36 = cir.call @bind(%32, %33, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc70)
                  %37 = cir.const #cir.int<1> : !s32i loc(#loc71)
                  %38 = cir.unary(minus, %37) nsw : !s32i, !s32i loc(#loc71)
                  %39 = cir.cmp(eq, %36, %38) : !s32i, !cir.bool loc(#loc138)
                  cir.if %39 {
                    cir.break loc(#loc73)
                  } loc(#loc139)
                } loc(#loc135)
                cir.scope {
                  %32 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc76)
                  %33 = cir.const #cir.int<5> : !s32i loc(#loc77)
                  %34 = cir.call @listen(%32, %33) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc78)
                  %35 = cir.const #cir.int<1> : !s32i loc(#loc79)
                  %36 = cir.unary(minus, %35) nsw : !s32i, !s32i loc(#loc79)
                  %37 = cir.cmp(eq, %34, %36) : !s32i, !cir.bool loc(#loc141)
                  cir.if %37 {
                    cir.break loc(#loc81)
                  } loc(#loc142)
                } loc(#loc140)
                %28 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc82)
                %29 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc83)
                %30 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc84)
                %31 = cir.call @accept(%28, %29, %30) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc85)
                cir.store %31, %5 : !s32i, !cir.ptr<!s32i> loc(#loc143)
                cir.scope {
                  %32 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc90)
                  %33 = cir.const #cir.int<1> : !s32i loc(#loc91)
                  %34 = cir.unary(minus, %33) nsw : !s32i, !s32i loc(#loc91)
                  %35 = cir.cmp(eq, %32, %34) : !s32i, !cir.bool loc(#loc145)
                  cir.if %35 {
                    cir.break loc(#loc93)
                  } loc(#loc146)
                } loc(#loc144)
              } loc(#loc124)
              cir.yield loc(#loc29)
            } while {
              %10 = cir.const #cir.int<0> : !s32i loc(#loc94)
              %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc94)
              cir.condition(%11) loc(#loc94)
            } loc(#loc123)
          } loc(#loc123)
          cir.scope {
            %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc97)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc98)
            %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc98)
            %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc148)
            cir.if %13 {
              %14 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc100)
              %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc101)
            } loc(#loc149)
          } loc(#loc147)
          cir.scope {
            %10 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc104)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc105)
            %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc105)
            %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc151)
            cir.if %13 {
              %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc107)
              %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc108)
            } loc(#loc152)
          } loc(#loc150)
        } loc(#loc119)
      } loc(#loc118)
    } loc(#loc116)
    cir.return loc(#loc14)
  } loc(#loc115)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__network_listen_06.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/unistd.h":358:1)
#loc12 = loc("/usr/include/unistd.h":358:27)
#loc13 = loc("CWE510_Trapdoor__network_listen_06.c":44:1)
#loc14 = loc("CWE510_Trapdoor__network_listen_06.c":107:1)
#loc15 = loc("CWE510_Trapdoor__network_listen_06.c":46:5)
#loc16 = loc("CWE510_Trapdoor__network_listen_06.c":106:5)
#loc17 = loc("CWE510_Trapdoor__network_listen_06.c":46:8)
#loc18 = loc("CWE510_Trapdoor__network_listen_06.c":46:27)
#loc19 = loc("CWE510_Trapdoor__network_listen_06.c":47:5)
#loc20 = loc("CWE510_Trapdoor__network_listen_06.c":48:9)
#loc21 = loc("CWE510_Trapdoor__network_listen_06.c":105:9)
#loc22 = loc("CWE510_Trapdoor__network_listen_06.c":53:13)
#loc23 = loc("CWE510_Trapdoor__network_listen_06.c":53:32)
#loc24 = loc("CWE510_Trapdoor__network_listen_06.c":54:13)
#loc25 = loc("CWE510_Trapdoor__network_listen_06.c":54:35)
#loc26 = loc("CWE510_Trapdoor__network_listen_06.c":55:13)
#loc27 = loc("CWE510_Trapdoor__network_listen_06.c":55:35)
#loc28 = loc("CWE510_Trapdoor__network_listen_06.c":56:13)
#loc29 = loc("CWE510_Trapdoor__network_listen_06.c":90:21)
#loc30 = loc("CWE510_Trapdoor__network_listen_06.c":57:13)
#loc31 = loc("CWE510_Trapdoor__network_listen_06.c":89:13)
#loc32 = loc("CWE510_Trapdoor__network_listen_06.c":65:39)
#loc33 = loc("CWE510_Trapdoor__network_listen_06.c":65:48)
#loc34 = loc("CWE510_Trapdoor__network_listen_06.c":65:61)
#loc35 = loc("CWE510_Trapdoor__network_listen_06.c":65:32)
#loc36 = loc("CWE510_Trapdoor__network_listen_06.c":65:17)
#loc37 = loc("CWE510_Trapdoor__network_listen_06.c":65:72)
#loc38 = loc("CWE510_Trapdoor__network_listen_06.c":66:17)
#loc39 = loc("CWE510_Trapdoor__network_listen_06.c":69:17)
#loc40 = loc("CWE510_Trapdoor__network_listen_06.c":66:21)
#loc41 = loc("CWE510_Trapdoor__network_listen_06.c":66:37)
#loc42 = loc("CWE510_Trapdoor__network_listen_06.c":67:17)
#loc43 = loc("CWE510_Trapdoor__network_listen_06.c":68:21)
#loc44 = loc("CWE510_Trapdoor__network_listen_06.c":70:24)
#loc45 = loc("CWE510_Trapdoor__network_listen_06.c":70:25)
#loc46 = loc("CWE510_Trapdoor__network_listen_06.c":70:34)
#loc47 = loc("CWE510_Trapdoor__network_listen_06.c":70:37)
#loc48 = loc("CWE510_Trapdoor__network_listen_06.c":70:51)
#loc49 = loc("CWE510_Trapdoor__network_listen_06.c":70:17)
#loc50 = loc("CWE510_Trapdoor__network_listen_06.c":70:52)
#loc51 = loc("CWE510_Trapdoor__network_listen_06.c":71:38)
#loc52 = loc("/usr/include/netinet/in.h":249:5)
#loc53 = loc("CWE510_Trapdoor__network_listen_06.c":71:17)
#loc54 = loc("CWE510_Trapdoor__network_listen_06.c":72:43)
#loc55 = loc("/usr/include/netinet/in.h":251:20)
#loc56 = loc("/usr/include/netinet/in.h":33:15)
#loc57 = loc("CWE510_Trapdoor__network_listen_06.c":72:17)
#loc58 = loc("CWE510_Trapdoor__network_listen_06.c":73:42)
#loc59 = loc("CWE510_Trapdoor__network_listen_06.c":73:36)
#loc60 = loc("/usr/include/netinet/in.h":250:15)
#loc61 = loc("CWE510_Trapdoor__network_listen_06.c":73:17)
#loc62 = loc("CWE510_Trapdoor__network_listen_06.c":73:47)
#loc63 = loc("CWE510_Trapdoor__network_listen_06.c":74:17)
#loc64 = loc("CWE510_Trapdoor__network_listen_06.c":77:17)
#loc65 = loc("CWE510_Trapdoor__network_listen_06.c":74:26)
#loc66 = loc("CWE510_Trapdoor__network_listen_06.c":74:58)
#loc67 = loc("CWE510_Trapdoor__network_listen_06.c":74:59)
#loc68 = loc("CWE510_Trapdoor__network_listen_06.c":74:68)
#loc69 = loc("CWE510_Trapdoor__network_listen_06.c":74:82)
#loc70 = loc("CWE510_Trapdoor__network_listen_06.c":74:21)
#loc71 = loc("CWE510_Trapdoor__network_listen_06.c":74:88)
#loc72 = loc("CWE510_Trapdoor__network_listen_06.c":75:17)
#loc73 = loc("CWE510_Trapdoor__network_listen_06.c":76:21)
#loc74 = loc("CWE510_Trapdoor__network_listen_06.c":78:17)
#loc75 = loc("CWE510_Trapdoor__network_listen_06.c":81:17)
#loc76 = loc("CWE510_Trapdoor__network_listen_06.c":78:28)
#loc77 = loc("CWE510_Trapdoor__network_listen_06.c":78:42)
#loc78 = loc("CWE510_Trapdoor__network_listen_06.c":78:21)
#loc79 = loc("CWE510_Trapdoor__network_listen_06.c":78:48)
#loc80 = loc("CWE510_Trapdoor__network_listen_06.c":79:17)
#loc81 = loc("CWE510_Trapdoor__network_listen_06.c":80:21)
#loc82 = loc("CWE510_Trapdoor__network_listen_06.c":83:39)
#loc83 = loc("CWE510_Trapdoor__network_listen_06.c":83:53)
#loc84 = loc("CWE510_Trapdoor__network_listen_06.c":83:59)
#loc85 = loc("CWE510_Trapdoor__network_listen_06.c":83:32)
#loc86 = loc("CWE510_Trapdoor__network_listen_06.c":83:17)
#loc87 = loc("CWE510_Trapdoor__network_listen_06.c":83:63)
#loc88 = loc("CWE510_Trapdoor__network_listen_06.c":84:17)
#loc89 = loc("CWE510_Trapdoor__network_listen_06.c":87:17)
#loc90 = loc("CWE510_Trapdoor__network_listen_06.c":84:21)
#loc91 = loc("CWE510_Trapdoor__network_listen_06.c":84:37)
#loc92 = loc("CWE510_Trapdoor__network_listen_06.c":85:17)
#loc93 = loc("CWE510_Trapdoor__network_listen_06.c":86:21)
#loc94 = loc("CWE510_Trapdoor__network_listen_06.c":90:20)
#loc95 = loc("CWE510_Trapdoor__network_listen_06.c":91:13)
#loc96 = loc("CWE510_Trapdoor__network_listen_06.c":94:13)
#loc97 = loc("CWE510_Trapdoor__network_listen_06.c":91:17)
#loc98 = loc("CWE510_Trapdoor__network_listen_06.c":91:33)
#loc99 = loc("CWE510_Trapdoor__network_listen_06.c":92:13)
#loc100 = loc("CWE510_Trapdoor__network_listen_06.c":93:30)
#loc101 = loc("CWE510_Trapdoor__network_listen_06.c":93:17)
#loc102 = loc("CWE510_Trapdoor__network_listen_06.c":95:13)
#loc103 = loc("CWE510_Trapdoor__network_listen_06.c":98:13)
#loc104 = loc("CWE510_Trapdoor__network_listen_06.c":95:17)
#loc105 = loc("CWE510_Trapdoor__network_listen_06.c":95:33)
#loc106 = loc("CWE510_Trapdoor__network_listen_06.c":96:13)
#loc107 = loc("CWE510_Trapdoor__network_listen_06.c":97:30)
#loc108 = loc("CWE510_Trapdoor__network_listen_06.c":97:17)
#loc109 = loc(fused[#loc1, #loc2])
#loc110 = loc(fused[#loc3, #loc4])
#loc111 = loc(fused[#loc5, #loc6])
#loc112 = loc(fused[#loc7, #loc8])
#loc113 = loc(fused[#loc9, #loc10])
#loc114 = loc(fused[#loc11, #loc12])
#loc115 = loc(fused[#loc13, #loc14])
#loc116 = loc(fused[#loc15, #loc16])
#loc117 = loc(fused[#loc17, #loc18])
#loc118 = loc(fused[#loc19, #loc16])
#loc119 = loc(fused[#loc20, #loc21])
#loc120 = loc(fused[#loc22, #loc23])
#loc121 = loc(fused[#loc24, #loc25])
#loc122 = loc(fused[#loc26, #loc27])
#loc123 = loc(fused[#loc28, #loc29])
#loc124 = loc(fused[#loc30, #loc31])
#loc125 = loc(fused[#loc36, #loc37])
#loc126 = loc(fused[#loc38, #loc39])
#loc127 = loc(fused[#loc40, #loc41])
#loc128 = loc(fused[#loc42, #loc39])
#loc129 = loc(fused[#loc44, #loc45])
#loc130 = loc(fused[#loc47, #loc48])
#loc131 = loc(fused[#loc49, #loc50])
#loc132 = loc(fused[#loc53, #loc51])
#loc133 = loc(fused[#loc57, #loc54])
#loc134 = loc(fused[#loc61, #loc62])
#loc135 = loc(fused[#loc63, #loc64])
#loc136 = loc(fused[#loc66, #loc67])
#loc137 = loc(fused[#loc68, #loc69])
#loc138 = loc(fused[#loc70, #loc71])
#loc139 = loc(fused[#loc72, #loc64])
#loc140 = loc(fused[#loc74, #loc75])
#loc141 = loc(fused[#loc78, #loc79])
#loc142 = loc(fused[#loc80, #loc75])
#loc143 = loc(fused[#loc86, #loc87])
#loc144 = loc(fused[#loc88, #loc89])
#loc145 = loc(fused[#loc90, #loc91])
#loc146 = loc(fused[#loc92, #loc89])
#loc147 = loc(fused[#loc95, #loc96])
#loc148 = loc(fused[#loc97, #loc98])
#loc149 = loc(fused[#loc99, #loc96])
#loc150 = loc(fused[#loc102, #loc103])
#loc151 = loc(fused[#loc104, #loc105])
#loc152 = loc(fused[#loc106, #loc103])
