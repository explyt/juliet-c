!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc48 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":109:10)
#loc49 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":109:14)
#loc50 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":109:20)
#loc51 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":109:32)
!ty_CWE190_Integer_Overflow__char_rand_square_34_unionType = !cir.struct<union "CWE190_Integer_Overflow__char_rand_square_34_unionType" {!s8i, !s8i}>
#loc142 = loc(fused[#loc48, #loc49])
#loc143 = loc(fused[#loc50, #loc51])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_34.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc123)
  cir.func private @printHexCharLine(!s8i) loc(#loc124)
  cir.func no_proto @CWE190_Integer_Overflow__char_rand_square_34_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc126)
    %1 = cir.alloca !ty_CWE190_Integer_Overflow__char_rand_square_34_unionType, !cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_34_unionType>, ["myUnion"] {alignment = 1 : i64} loc(#loc127)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc11)
    cir.store %3, %0 : !s8i, !cir.ptr<!s8i> loc(#loc128)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc13)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc13)
    %8 = cir.ternary(%7, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc13)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc13)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc13)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc13)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc13)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc13)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc13)
      cir.yield %24 : !u32i loc(#loc13)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc13)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc13)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc13)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc13)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc13)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc13)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc13)
      %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc13)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc13)
      %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc13)
      %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc13)
      cir.yield %28 : !u32i loc(#loc13)
    }) : (!cir.bool) -> !u32i loc(#loc13)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc13)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc13)
    cir.store %10, %0 : !s8i, !cir.ptr<!s8i> loc(#loc129)
    %11 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc15)
    %12 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_34_unionType> -> !cir.ptr<!s8i> loc(#loc16)
    cir.store %11, %12 : !s8i, !cir.ptr<!s8i> loc(#loc130)
    cir.scope {
      %13 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc132)
      %14 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_34_unionType> -> !cir.ptr<!s8i> loc(#loc22)
      %15 = cir.load %14 : !cir.ptr<!s8i>, !s8i loc(#loc21)
      cir.store %15, %13 : !s8i, !cir.ptr<!s8i> loc(#loc132)
      cir.scope {
        %16 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc134)
        %17 = cir.load %13 : !cir.ptr<!s8i>, !s8i loc(#loc27)
        %18 = cir.cast(integral, %17 : !s8i), !s32i loc(#loc27)
        %19 = cir.load %13 : !cir.ptr<!s8i>, !s8i loc(#loc26)
        %20 = cir.cast(integral, %19 : !s8i), !s32i loc(#loc26)
        %21 = cir.binop(mul, %18, %20) nsw : !s32i loc(#loc27)
        %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc27)
        cir.store %22, %16 : !s8i, !cir.ptr<!s8i> loc(#loc134)
        %23 = cir.load %16 : !cir.ptr<!s8i>, !s8i loc(#loc28)
        cir.call @printHexCharLine(%23) : (!s8i) -> () loc(#loc29)
      } loc(#loc133)
    } loc(#loc131)
    cir.return loc(#loc6)
  } loc(#loc125)
  cir.func no_proto @CWE190_Integer_Overflow__char_rand_square_34_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc136)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc137)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc135)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc138)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc139)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc140)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc45)
  cir.func @main(%arg0: !s32i loc(fused[#loc48, #loc49]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc50, #loc51])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc142)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc143)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc47)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc52)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc52)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc53)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc54)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc54)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc55)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc42)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %8 = cir.get_global @CWE190_Integer_Overflow__char_rand_square_34_good : !cir.ptr<!cir.func<!void ()>> loc(#loc144)
    cir.call @CWE190_Integer_Overflow__char_rand_square_34_good() : () -> () loc(#loc57)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc43)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc44)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %13 = cir.get_global @CWE190_Integer_Overflow__char_rand_square_34_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc145)
    cir.call @CWE190_Integer_Overflow__char_rand_square_34_bad() : () -> () loc(#loc61)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc45)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc64)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc146)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc146)
    cir.return %17 : !s32i loc(#loc146)
  } loc(#loc141)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc148)
    %1 = cir.alloca !ty_CWE190_Integer_Overflow__char_rand_square_34_unionType, !cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_34_unionType>, ["myUnion"] {alignment = 1 : i64} loc(#loc149)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc72)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc72)
    cir.store %3, %0 : !s8i, !cir.ptr<!s8i> loc(#loc150)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc74)
    %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc74)
    cir.store %5, %0 : !s8i, !cir.ptr<!s8i> loc(#loc151)
    %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc76)
    %7 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_34_unionType> -> !cir.ptr<!s8i> loc(#loc16)
    cir.store %6, %7 : !s8i, !cir.ptr<!s8i> loc(#loc152)
    cir.scope {
      %8 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc154)
      %9 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_34_unionType> -> !cir.ptr<!s8i> loc(#loc22)
      %10 = cir.load %9 : !cir.ptr<!s8i>, !s8i loc(#loc81)
      cir.store %10, %8 : !s8i, !cir.ptr<!s8i> loc(#loc154)
      cir.scope {
        %11 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc156)
        %12 = cir.load %8 : !cir.ptr<!s8i>, !s8i loc(#loc86)
        %13 = cir.cast(integral, %12 : !s8i), !s32i loc(#loc86)
        %14 = cir.load %8 : !cir.ptr<!s8i>, !s8i loc(#loc85)
        %15 = cir.cast(integral, %14 : !s8i), !s32i loc(#loc85)
        %16 = cir.binop(mul, %13, %15) nsw : !s32i loc(#loc86)
        %17 = cir.cast(integral, %16 : !s32i), !s8i loc(#loc86)
        cir.store %17, %11 : !s8i, !cir.ptr<!s8i> loc(#loc156)
        %18 = cir.load %11 : !cir.ptr<!s8i>, !s8i loc(#loc87)
        cir.call @printHexCharLine(%18) : (!s8i) -> () loc(#loc88)
      } loc(#loc155)
    } loc(#loc153)
    cir.return loc(#loc67)
  } loc(#loc147)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc89)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc90)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc158)
    %1 = cir.alloca !ty_CWE190_Integer_Overflow__char_rand_square_34_unionType, !cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_34_unionType>, ["myUnion"] {alignment = 1 : i64} loc(#loc159)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc97)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc97)
    cir.store %3, %0 : !s8i, !cir.ptr<!s8i> loc(#loc160)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc99)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc99)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc99)
    %8 = cir.ternary(%7, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc99)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc99)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc99)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc99)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc99)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc99)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc99)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc99)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc99)
      cir.yield %24 : !u32i loc(#loc99)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc99)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc99)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc99)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc99)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc99)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc99)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc99)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc99)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc99)
      %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc99)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc99)
      %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc99)
      %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc99)
      cir.yield %28 : !u32i loc(#loc99)
    }) : (!cir.bool) -> !u32i loc(#loc99)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc99)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc99)
    cir.store %10, %0 : !s8i, !cir.ptr<!s8i> loc(#loc161)
    %11 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc101)
    %12 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_34_unionType> -> !cir.ptr<!s8i> loc(#loc16)
    cir.store %11, %12 : !s8i, !cir.ptr<!s8i> loc(#loc162)
    cir.scope {
      %13 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc164)
      %14 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE190_Integer_Overflow__char_rand_square_34_unionType> -> !cir.ptr<!s8i> loc(#loc22)
      %15 = cir.load %14 : !cir.ptr<!s8i>, !s8i loc(#loc106)
      cir.store %15, %13 : !s8i, !cir.ptr<!s8i> loc(#loc164)
      cir.scope {
        %16 = cir.load %13 : !cir.ptr<!s8i>, !s8i loc(#loc109)
        %17 = cir.cast(integral, %16 : !s8i), !s64i loc(#loc109)
        %18 = cir.cast(integral, %17 : !s64i), !s32i loc(#loc109)
        %19 = cir.abs %18 poison : !s32i loc(#loc110)
        %20 = cir.cast(integral, %19 : !s32i), !s64i loc(#loc110)
        %21 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc111)
        %22 = cir.const #cir.int<127> : !s32i loc(#loc112)
        %23 = cir.cast(int_to_float, %22 : !s32i), !cir.double loc(#loc112)
        %24 = cir.call @sqrt(%23) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc111)
        %25 = cir.cast(float_to_int, %24 : !cir.double), !s64i loc(#loc111)
        %26 = cir.cmp(le, %20, %25) : !s64i, !cir.bool loc(#loc166)
        cir.if %26 {
          %27 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc168)
          %28 = cir.load %13 : !cir.ptr<!s8i>, !s8i loc(#loc119)
          %29 = cir.cast(integral, %28 : !s8i), !s32i loc(#loc119)
          %30 = cir.load %13 : !cir.ptr<!s8i>, !s8i loc(#loc118)
          %31 = cir.cast(integral, %30 : !s8i), !s32i loc(#loc118)
          %32 = cir.binop(mul, %29, %31) nsw : !s32i loc(#loc119)
          %33 = cir.cast(integral, %32 : !s32i), !s8i loc(#loc119)
          cir.store %33, %27 : !s8i, !cir.ptr<!s8i> loc(#loc168)
          %34 = cir.load %27 : !cir.ptr<!s8i>, !s8i loc(#loc120)
          cir.call @printHexCharLine(%34) : (!s8i) -> () loc(#loc121)
        } else {
          %27 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc90)
          %28 = cir.cast(array_to_ptrdecay, %27 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc90)
          cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc122)
        } loc(#loc167)
      } loc(#loc165)
    } loc(#loc163)
    cir.return loc(#loc92)
  } loc(#loc157)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_34.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc5 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":30:1)
#loc6 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":46:1)
#loc7 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":32:5)
#loc8 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":32:10)
#loc9 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":33:5)
#loc10 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":33:60)
#loc11 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":34:12)
#loc12 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":34:5)
#loc13 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":36:18)
#loc14 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":36:5)
#loc15 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":37:26)
#loc16 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":24:10)
#loc17 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":37:5)
#loc18 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":38:5)
#loc19 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":45:5)
#loc20 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":39:9)
#loc21 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":39:29)
#loc22 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":25:10)
#loc23 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":40:9)
#loc24 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":44:9)
#loc25 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":42:13)
#loc26 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":42:34)
#loc27 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":42:27)
#loc28 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":43:30)
#loc29 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":43:13)
#loc30 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":95:1)
#loc31 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":99:1)
#loc32 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":97:5)
#loc33 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":97:13)
#loc34 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":98:5)
#loc35 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":98:13)
#loc36 = loc("/usr/include/stdlib.h":575:1)
#loc37 = loc("/usr/include/stdlib.h":575:41)
#loc38 = loc("/usr/include/time.h":76:1)
#loc39 = loc("/usr/include/time.h":76:38)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc42 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":114:15)
#loc43 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":116:15)
#loc44 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":119:15)
#loc45 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":121:15)
#loc46 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":109:1)
#loc47 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":124:1)
#loc52 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":110:1)
#loc53 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":112:27)
#loc54 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":112:22)
#loc55 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":112:5)
#loc56 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":114:5)
#loc57 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":115:5)
#loc58 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":115:55)
#loc59 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":116:5)
#loc60 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":119:5)
#loc61 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":120:5)
#loc62 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":120:54)
#loc63 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":121:5)
#loc64 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":123:12)
#loc65 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":123:5)
#loc66 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":53:1)
#loc67 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":69:1)
#loc68 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":55:5)
#loc69 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":55:10)
#loc70 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":56:5)
#loc71 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":56:60)
#loc72 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":57:12)
#loc73 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":57:5)
#loc74 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":59:12)
#loc75 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":59:5)
#loc76 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":60:26)
#loc77 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":60:5)
#loc78 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":61:5)
#loc79 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":68:5)
#loc80 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":62:9)
#loc81 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":62:29)
#loc82 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":63:9)
#loc83 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":67:9)
#loc84 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":65:13)
#loc85 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":65:34)
#loc86 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":65:27)
#loc87 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":66:30)
#loc88 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":66:13)
#loc89 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc90 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":90:23)
#loc91 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":72:1)
#loc92 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":93:1)
#loc93 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":74:5)
#loc94 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":74:10)
#loc95 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":75:5)
#loc96 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":75:60)
#loc97 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":76:12)
#loc98 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":76:5)
#loc99 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":78:18)
#loc100 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":78:5)
#loc101 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":79:26)
#loc102 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":79:5)
#loc103 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":80:5)
#loc104 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":92:5)
#loc105 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":81:9)
#loc106 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":81:29)
#loc107 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":83:9)
#loc108 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":91:9)
#loc109 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":83:23)
#loc110 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":83:13)
#loc111 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":83:38)
#loc112 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":83:51)
#loc113 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":83:59)
#loc114 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":84:9)
#loc115 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":87:9)
#loc116 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":89:9)
#loc117 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":85:13)
#loc118 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":85:34)
#loc119 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":85:27)
#loc120 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":86:30)
#loc121 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":86:13)
#loc122 = loc("CWE190_Integer_Overflow__char_rand_square_34.c":90:13)
#loc123 = loc(fused[#loc1, #loc2])
#loc124 = loc(fused[#loc3, #loc4])
#loc125 = loc(fused[#loc5, #loc6])
#loc126 = loc(fused[#loc7, #loc8])
#loc127 = loc(fused[#loc9, #loc10])
#loc128 = loc(fused[#loc12, #loc11])
#loc129 = loc(fused[#loc14, #loc13])
#loc130 = loc(fused[#loc17, #loc15])
#loc131 = loc(fused[#loc18, #loc19])
#loc132 = loc(fused[#loc20, #loc21])
#loc133 = loc(fused[#loc23, #loc24])
#loc134 = loc(fused[#loc25, #loc26])
#loc135 = loc(fused[#loc30, #loc31])
#loc136 = loc(fused[#loc32, #loc33])
#loc137 = loc(fused[#loc34, #loc35])
#loc138 = loc(fused[#loc36, #loc37])
#loc139 = loc(fused[#loc38, #loc39])
#loc140 = loc(fused[#loc40, #loc41])
#loc141 = loc(fused[#loc46, #loc47])
#loc144 = loc(fused[#loc57, #loc58])
#loc145 = loc(fused[#loc61, #loc62])
#loc146 = loc(fused[#loc65, #loc64])
#loc147 = loc(fused[#loc66, #loc67])
#loc148 = loc(fused[#loc68, #loc69])
#loc149 = loc(fused[#loc70, #loc71])
#loc150 = loc(fused[#loc73, #loc72])
#loc151 = loc(fused[#loc75, #loc74])
#loc152 = loc(fused[#loc77, #loc76])
#loc153 = loc(fused[#loc78, #loc79])
#loc154 = loc(fused[#loc80, #loc81])
#loc155 = loc(fused[#loc82, #loc83])
#loc156 = loc(fused[#loc84, #loc85])
#loc157 = loc(fused[#loc91, #loc92])
#loc158 = loc(fused[#loc93, #loc94])
#loc159 = loc(fused[#loc95, #loc96])
#loc160 = loc(fused[#loc98, #loc97])
#loc161 = loc(fused[#loc100, #loc99])
#loc162 = loc(fused[#loc102, #loc101])
#loc163 = loc(fused[#loc103, #loc104])
#loc164 = loc(fused[#loc105, #loc106])
#loc165 = loc(fused[#loc107, #loc108])
#loc166 = loc(fused[#loc110, #loc113])
#loc167 = loc(fused[#loc114, #loc115, #loc116, #loc108])
#loc168 = loc(fused[#loc117, #loc118])
