!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int_fgets_preinc_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc240)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc241)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc242)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc243)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @printIntLine(!s32i) loc(#loc244)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fgets_preinc_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc246)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc16)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc247)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc249)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc20)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc20)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc252)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc252)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc252)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc29)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc30)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc30)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc30)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc30)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc30)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc30)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc30)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc30)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc241)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc31)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc32)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc33)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !s32i loc(#loc254)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc34)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc38)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc39)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc256)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc42)
            } loc(#loc255)
          } loc(#loc253)
        } loc(#loc251)
      } loc(#loc250)
    } loc(#loc248)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc258)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc45)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc45)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc261)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc52)
          %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc52)
          cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc262)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc261)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc54)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc55)
        } loc(#loc260)
      } loc(#loc259)
    } loc(#loc257)
    cir.return loc(#loc13)
  } loc(#loc245)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fgets_preinc_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc264)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc265)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc60)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc266)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc62)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc267)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc64)
    cir.return loc(#loc57)
  } loc(#loc263)
  cir.func no_proto internal private  @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc67)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc68)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc269)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc269)
    cir.return %2 : !s32i loc(#loc269)
  } loc(#loc268)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc70)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc71)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc271)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc76)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc272)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc274)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc80)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc80)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc277)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc277)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc277)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc89)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc90)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc90)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc90)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc90)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc90)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc90)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc90)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc90)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc241)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc91)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc92)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc93)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc93)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !s32i loc(#loc279)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc94)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc98)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc99)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc281)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc102)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc102)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc103)
            } loc(#loc280)
          } loc(#loc278)
        } loc(#loc276)
      } loc(#loc275)
    } loc(#loc273)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc283)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc106)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc106)
      cir.if %4 {
        %5 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc70)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc70)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc111)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc114)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc115)
          %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc286)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc116)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc288)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc122)
            %11 = cir.unary(inc, %10) : !s32i, !s32i loc(#loc122)
            cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc289)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc121)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc288)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc124)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc125)
          } else {
            %9 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc71)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc71)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc126)
          } loc(#loc287)
        } loc(#loc285)
      } loc(#loc284)
    } loc(#loc282)
    cir.return loc(#loc73)
  } loc(#loc270)
  cir.func no_proto internal private  @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc128)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc129)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc291)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc291)
    cir.return %2 : !s32i loc(#loc291)
  } loc(#loc290)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc293)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc135)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc294)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc296)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc139)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc139)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc299)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc299)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc299)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc148)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc149)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc149)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc149)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc149)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc149)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc149)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc149)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc149)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc241)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc150)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc151)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc152)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc152)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !s32i loc(#loc301)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc153)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc157)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc158)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc303)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc161)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc161)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc162)
            } loc(#loc302)
          } loc(#loc300)
        } loc(#loc298)
      } loc(#loc297)
    } loc(#loc295)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc305)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc165)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc165)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc170)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc171)
          %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc308)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc172)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc310)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc178)
            %11 = cir.unary(inc, %10) : !s32i, !s32i loc(#loc178)
            cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc311)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc177)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc310)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc180)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc181)
          } else {
            %9 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc182)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc182)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc183)
          } loc(#loc309)
        } loc(#loc307)
      } loc(#loc306)
    } loc(#loc304)
    cir.return loc(#loc132)
  } loc(#loc292)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc313)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc188)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc314)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc316)
      %3 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc192)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc192)
      cir.if %4 {
        %5 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc197)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc197)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc198)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc199)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc318)
      } loc(#loc317)
    } loc(#loc315)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc320)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc203)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc203)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc323)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc210)
          %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc210)
          cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc324)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc209)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc323)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc212)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc213)
        } loc(#loc322)
      } loc(#loc321)
    } loc(#loc319)
    cir.return loc(#loc185)
  } loc(#loc312)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc326)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc218)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc327)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc329)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc222)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc222)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc225)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc331)
      } loc(#loc330)
    } loc(#loc328)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc333)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc229)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc229)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc336)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc236)
          %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc236)
          cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc337)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc235)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc336)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc238)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc239)
        } loc(#loc335)
      } loc(#loc334)
    } loc(#loc332)
    cir.return loc(#loc215)
  } loc(#loc325)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int_fgets_preinc_08.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":54:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":37:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":67:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":39:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":39:9)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":41:12)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":41:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":42:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":57:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":42:8)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":42:26)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":43:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":44:9)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":56:9)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":45:13)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":45:49)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":47:13)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":55:13)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":47:23)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":47:36)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":47:53)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":47:17)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":47:63)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":47:60)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":48:13)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":51:13)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":53:13)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":50:29)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":50:24)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":50:17)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":50:40)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":54:17)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":58:5)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":66:5)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":58:8)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":58:26)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":59:5)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":60:9)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":65:9)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":63:13)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":63:26)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":62:13)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":62:15)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":64:26)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":64:13)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":203:1)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":209:1)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":205:5)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":205:14)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":206:5)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":206:14)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":207:5)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":207:14)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":208:5)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":208:14)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":25:1)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":28:1)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":27:12)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":27:5)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":98:19)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":111:23)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":74:1)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":114:1)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":76:5)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":76:9)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":78:12)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":78:5)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":79:5)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":94:5)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":79:8)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":79:26)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":80:5)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":81:9)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":93:9)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":82:13)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":82:49)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":84:13)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":92:13)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":84:23)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":84:36)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":84:53)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":84:17)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":84:63)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":84:60)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":85:13)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":88:13)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":90:13)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":87:29)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":87:24)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":87:17)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":87:40)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":91:27)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":91:17)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":95:5)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":113:5)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":95:8)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":95:27)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":96:5)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":99:5)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":101:5)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":98:9)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":103:9)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":112:9)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":103:13)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":103:20)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":103:18)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":104:9)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":108:9)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":110:9)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":106:13)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":106:26)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":105:13)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":105:15)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":107:26)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":107:13)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":111:13)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":30:1)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":33:1)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":32:12)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":32:5)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":117:1)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":152:1)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":119:5)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":119:9)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":121:12)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":121:5)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":122:5)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":137:5)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":122:8)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":122:26)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":123:5)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":124:9)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":136:9)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":125:13)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":125:49)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":127:13)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":135:13)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":127:23)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":127:36)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":127:53)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":127:17)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":127:63)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":127:60)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":128:13)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":131:13)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":133:13)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":130:29)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":130:24)
#loc159 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":130:17)
#loc160 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":130:40)
#loc161 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":134:27)
#loc162 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":134:17)
#loc163 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":138:5)
#loc164 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":151:5)
#loc165 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":138:8)
#loc166 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":138:26)
#loc167 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":139:5)
#loc168 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":141:9)
#loc169 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":150:9)
#loc170 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":141:13)
#loc171 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":141:20)
#loc172 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":141:18)
#loc173 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":142:9)
#loc174 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":146:9)
#loc175 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":148:9)
#loc176 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":144:13)
#loc177 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":144:26)
#loc178 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":143:13)
#loc179 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":143:15)
#loc180 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":145:26)
#loc181 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":145:13)
#loc182 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":149:23)
#loc183 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":149:13)
#loc184 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":155:1)
#loc185 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":179:1)
#loc186 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":157:5)
#loc187 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":157:9)
#loc188 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":159:12)
#loc189 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":159:5)
#loc190 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":160:5)
#loc191 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":169:5)
#loc192 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":160:8)
#loc193 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":160:27)
#loc194 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":161:5)
#loc195 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":164:5)
#loc196 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":166:5)
#loc197 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":163:19)
#loc198 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":163:9)
#loc199 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":168:16)
#loc200 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":168:9)
#loc201 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":170:5)
#loc202 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":178:5)
#loc203 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":170:8)
#loc204 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":170:26)
#loc205 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":171:5)
#loc206 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":172:9)
#loc207 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":177:9)
#loc208 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":175:13)
#loc209 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":175:26)
#loc210 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":174:13)
#loc211 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":174:15)
#loc212 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":176:26)
#loc213 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":176:13)
#loc214 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":182:1)
#loc215 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":201:1)
#loc216 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":184:5)
#loc217 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":184:9)
#loc218 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":186:12)
#loc219 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":186:5)
#loc220 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":187:5)
#loc221 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":191:5)
#loc222 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":187:8)
#loc223 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":187:26)
#loc224 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":188:5)
#loc225 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":190:16)
#loc226 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":190:9)
#loc227 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":192:5)
#loc228 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":200:5)
#loc229 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":192:8)
#loc230 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":192:26)
#loc231 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":193:5)
#loc232 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":194:9)
#loc233 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":199:9)
#loc234 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":197:13)
#loc235 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":197:26)
#loc236 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":196:13)
#loc237 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":196:15)
#loc238 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":198:26)
#loc239 = loc("CWE190_Integer_Overflow__int_fgets_preinc_08.c":198:13)
#loc240 = loc(fused[#loc1, #loc2])
#loc241 = loc(fused[#loc3, #loc4])
#loc242 = loc(fused[#loc5, #loc6])
#loc243 = loc(fused[#loc7, #loc8])
#loc244 = loc(fused[#loc10, #loc11])
#loc245 = loc(fused[#loc12, #loc13])
#loc246 = loc(fused[#loc14, #loc15])
#loc247 = loc(fused[#loc17, #loc16])
#loc248 = loc(fused[#loc18, #loc19])
#loc249 = loc(fused[#loc20, #loc21])
#loc250 = loc(fused[#loc22, #loc19])
#loc251 = loc(fused[#loc23, #loc24])
#loc252 = loc(fused[#loc25, #loc26])
#loc253 = loc(fused[#loc27, #loc28])
#loc254 = loc(fused[#loc32, #loc33])
#loc255 = loc(fused[#loc35, #loc36, #loc37, #loc28])
#loc256 = loc(fused[#loc40, #loc41])
#loc257 = loc(fused[#loc43, #loc44])
#loc258 = loc(fused[#loc45, #loc46])
#loc259 = loc(fused[#loc47, #loc44])
#loc260 = loc(fused[#loc48, #loc49])
#loc261 = loc(fused[#loc50, #loc51])
#loc262 = loc(fused[#loc52, #loc53])
#loc263 = loc(fused[#loc56, #loc57])
#loc264 = loc(fused[#loc58, #loc59])
#loc265 = loc(fused[#loc60, #loc61])
#loc266 = loc(fused[#loc62, #loc63])
#loc267 = loc(fused[#loc64, #loc65])
#loc268 = loc(fused[#loc66, #loc67])
#loc269 = loc(fused[#loc69, #loc68])
#loc270 = loc(fused[#loc72, #loc73])
#loc271 = loc(fused[#loc74, #loc75])
#loc272 = loc(fused[#loc77, #loc76])
#loc273 = loc(fused[#loc78, #loc79])
#loc274 = loc(fused[#loc80, #loc81])
#loc275 = loc(fused[#loc82, #loc79])
#loc276 = loc(fused[#loc83, #loc84])
#loc277 = loc(fused[#loc85, #loc86])
#loc278 = loc(fused[#loc87, #loc88])
#loc279 = loc(fused[#loc92, #loc93])
#loc280 = loc(fused[#loc95, #loc96, #loc97, #loc88])
#loc281 = loc(fused[#loc100, #loc101])
#loc282 = loc(fused[#loc104, #loc105])
#loc283 = loc(fused[#loc106, #loc107])
#loc284 = loc(fused[#loc108, #loc109, #loc110, #loc105])
#loc285 = loc(fused[#loc112, #loc113])
#loc286 = loc(fused[#loc114, #loc115])
#loc287 = loc(fused[#loc117, #loc118, #loc119, #loc113])
#loc288 = loc(fused[#loc120, #loc121])
#loc289 = loc(fused[#loc122, #loc123])
#loc290 = loc(fused[#loc127, #loc128])
#loc291 = loc(fused[#loc130, #loc129])
#loc292 = loc(fused[#loc131, #loc132])
#loc293 = loc(fused[#loc133, #loc134])
#loc294 = loc(fused[#loc136, #loc135])
#loc295 = loc(fused[#loc137, #loc138])
#loc296 = loc(fused[#loc139, #loc140])
#loc297 = loc(fused[#loc141, #loc138])
#loc298 = loc(fused[#loc142, #loc143])
#loc299 = loc(fused[#loc144, #loc145])
#loc300 = loc(fused[#loc146, #loc147])
#loc301 = loc(fused[#loc151, #loc152])
#loc302 = loc(fused[#loc154, #loc155, #loc156, #loc147])
#loc303 = loc(fused[#loc159, #loc160])
#loc304 = loc(fused[#loc163, #loc164])
#loc305 = loc(fused[#loc165, #loc166])
#loc306 = loc(fused[#loc167, #loc164])
#loc307 = loc(fused[#loc168, #loc169])
#loc308 = loc(fused[#loc170, #loc171])
#loc309 = loc(fused[#loc173, #loc174, #loc175, #loc169])
#loc310 = loc(fused[#loc176, #loc177])
#loc311 = loc(fused[#loc178, #loc179])
#loc312 = loc(fused[#loc184, #loc185])
#loc313 = loc(fused[#loc186, #loc187])
#loc314 = loc(fused[#loc189, #loc188])
#loc315 = loc(fused[#loc190, #loc191])
#loc316 = loc(fused[#loc192, #loc193])
#loc317 = loc(fused[#loc194, #loc195, #loc196, #loc191])
#loc318 = loc(fused[#loc200, #loc199])
#loc319 = loc(fused[#loc201, #loc202])
#loc320 = loc(fused[#loc203, #loc204])
#loc321 = loc(fused[#loc205, #loc202])
#loc322 = loc(fused[#loc206, #loc207])
#loc323 = loc(fused[#loc208, #loc209])
#loc324 = loc(fused[#loc210, #loc211])
#loc325 = loc(fused[#loc214, #loc215])
#loc326 = loc(fused[#loc216, #loc217])
#loc327 = loc(fused[#loc219, #loc218])
#loc328 = loc(fused[#loc220, #loc221])
#loc329 = loc(fused[#loc222, #loc223])
#loc330 = loc(fused[#loc224, #loc221])
#loc331 = loc(fused[#loc226, #loc225])
#loc332 = loc(fused[#loc227, #loc228])
#loc333 = loc(fused[#loc229, #loc230])
#loc334 = loc(fused[#loc231, #loc228])
#loc335 = loc(fused[#loc232, #loc233])
#loc336 = loc(fused[#loc234, #loc235])
#loc337 = loc(fused[#loc236, #loc237])
