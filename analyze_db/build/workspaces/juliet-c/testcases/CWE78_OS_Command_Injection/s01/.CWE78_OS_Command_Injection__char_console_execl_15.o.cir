!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_console_execl_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.goodG2B2.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc145)
  cir.global "private" constant cir_private @__const.goodG2B1.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc146)
  cir.global "private" constant cir_private @__const.CWE78_OS_Command_Injection__char_console_execl_15_bad.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc147)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc148)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc149)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc150)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc151)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc15)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc16)
  cir.func private @execl(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc152)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"/bin/sh\00" : !cir.array<!s8i x 8>> : !cir.array<!s8i x 8> {alignment = 1 : i64} loc(#loc19)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"-c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc20)
  cir.func no_proto @CWE78_OS_Command_Injection__char_console_execl_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc154)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc147)
    %2 = cir.get_global @__const.CWE78_OS_Command_Injection__char_console_execl_15_bad.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc147)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc147)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc25)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc155)
    cir.scope {
      %13 = cir.const #cir.int<6> : !s32i loc(#loc29)
      cir.switch (%13 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %14 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc158)
            %15 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc35)
            %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
            %17 = cir.call @strlen(%16) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc35)
            cir.store %17, %14 : !u64i, !cir.ptr<!u64i> loc(#loc158)
            cir.scope {
              %18 = cir.const #cir.int<100> : !s32i loc(#loc39)
              %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc39)
              %20 = cir.load %14 : !cir.ptr<!u64i>, !u64i loc(#loc40)
              %21 = cir.binop(sub, %19, %20) : !u64i loc(#loc160)
              %22 = cir.const #cir.int<1> : !s32i loc(#loc41)
              %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc41)
              %24 = cir.cmp(gt, %21, %23) : !u64i, !cir.bool loc(#loc161)
              cir.if %24 {
                cir.scope {
                  %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc45)
                  %26 = cir.load %14 : !cir.ptr<!u64i>, !u64i loc(#loc46)
                  %27 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %26 : !u64i), !cir.ptr<!s8i> loc(#loc47)
                  %28 = cir.const #cir.int<100> : !s32i loc(#loc48)
                  %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc48)
                  %30 = cir.load %14 : !cir.ptr<!u64i>, !u64i loc(#loc49)
                  %31 = cir.binop(sub, %29, %30) : !u64i loc(#loc164)
                  %32 = cir.cast(integral, %31 : !u64i), !s32i loc(#loc164)
                  %33 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc150)
                  %34 = cir.load %33 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc50)
                  %35 = cir.call @fgets(%27, %32, %34) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc51)
                  %36 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc52)
                  %37 = cir.cast(bitcast, %36 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc52)
                  %38 = cir.cmp(ne, %35, %37) : !cir.ptr<!s8i>, !cir.bool loc(#loc165)
                  cir.if %38 {
                    %39 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc56)
                    %40 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
                    %41 = cir.call @strlen(%40) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc56)
                    cir.store %41, %14 : !u64i, !cir.ptr<!u64i> loc(#loc167)
                    cir.scope {
                      %42 = cir.load %14 : !cir.ptr<!u64i>, !u64i loc(#loc62)
                      %43 = cir.const #cir.int<0> : !s32i loc(#loc63)
                      %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc63)
                      %45 = cir.cmp(gt, %42, %44) : !u64i, !cir.bool loc(#loc169)
                      %46 = cir.ternary(%45, true {
                        %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc65)
                        %48 = cir.load %14 : !cir.ptr<!u64i>, !u64i loc(#loc66)
                        %49 = cir.const #cir.int<1> : !s32i loc(#loc67)
                        %50 = cir.cast(integral, %49 : !s32i), !u64i loc(#loc67)
                        %51 = cir.binop(sub, %48, %50) : !u64i loc(#loc170)
                        %52 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %51 : !u64i), !cir.ptr<!s8i> loc(#loc68)
                        %53 = cir.load %52 : !cir.ptr<!s8i>, !s8i loc(#loc65)
                        %54 = cir.cast(integral, %53 : !s8i), !s32i loc(#loc65)
                        %55 = cir.const #cir.int<10> : !s32i loc(#loc69)
                        %56 = cir.cmp(eq, %54, %55) : !s32i, !cir.bool loc(#loc171)
                        %57 = cir.ternary(%56, true {
                          %58 = cir.const #true loc(#loc64)
                          cir.yield %58 : !cir.bool loc(#loc64)
                        }, false {
                          %58 = cir.const #false loc(#loc64)
                          cir.yield %58 : !cir.bool loc(#loc64)
                        }) : (!cir.bool) -> !cir.bool loc(#loc64)
                        cir.yield %57 : !cir.bool loc(#loc64)
                      }, false {
                        %47 = cir.const #false loc(#loc64)
                        cir.yield %47 : !cir.bool loc(#loc64)
                      }) : (!cir.bool) -> !cir.bool loc(#loc64)
                      cir.if %46 {
                        %47 = cir.const #cir.int<0> : !s32i loc(#loc71)
                        %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc71)
                        %49 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc72)
                        %50 = cir.load %14 : !cir.ptr<!u64i>, !u64i loc(#loc73)
                        %51 = cir.const #cir.int<1> : !s32i loc(#loc74)
                        %52 = cir.cast(integral, %51 : !s32i), !u64i loc(#loc74)
                        %53 = cir.binop(sub, %50, %52) : !u64i loc(#loc173)
                        %54 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %53 : !u64i), !cir.ptr<!s8i> loc(#loc75)
                        cir.store %48, %54 : !s8i, !cir.ptr<!s8i> loc(#loc174)
                      } loc(#loc172)
                    } loc(#loc168)
                  } else {
                    %39 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc15)
                    %40 = cir.cast(array_to_ptrdecay, %39 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc15)
                    cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc76)
                    %41 = cir.const #cir.int<0> : !s32i loc(#loc77)
                    %42 = cir.cast(integral, %41 : !s32i), !s8i loc(#loc77)
                    %43 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
                    %44 = cir.load %14 : !cir.ptr<!u64i>, !u64i loc(#loc79)
                    %45 = cir.ptr_stride(%43 : !cir.ptr<!s8i>, %44 : !u64i), !cir.ptr<!s8i> loc(#loc80)
                    cir.store %42, %45 : !s8i, !cir.ptr<!s8i> loc(#loc175)
                  } loc(#loc166)
                } loc(#loc163)
              } loc(#loc162)
            } loc(#loc159)
          } loc(#loc157)
          cir.break loc(#loc81)
        } loc(#loc30)
        cir.case(default, []) {
          %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc16)
          %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc16)
          cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc83)
          cir.break loc(#loc84)
        } loc(#loc82)
        cir.yield loc(#loc27)
      } loc(#loc27)
    } loc(#loc156)
    %4 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc19)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc19)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc85)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc85)
    %8 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc20)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc20)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc86)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc87)
    %12 = cir.call @execl(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc88)
    cir.return loc(#loc22)
  } loc(#loc153)
  cir.func no_proto @CWE78_OS_Command_Injection__char_console_execl_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc177)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc91)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc178)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc93)
    cir.return loc(#loc90)
  } loc(#loc176)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc179)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc97)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc181)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc146)
    %2 = cir.get_global @__const.goodG2B1.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc146)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc146)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc102)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc182)
    cir.scope {
      %13 = cir.const #cir.int<5> : !s32i loc(#loc106)
      cir.switch (%13 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc108)
          %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc108)
          cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc109)
          cir.break loc(#loc110)
        } loc(#loc107)
        cir.case(default, []) {
          %14 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc112)
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc113)
          %16 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc97)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc97)
          %18 = cir.call @strcat(%15, %17) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc112)
          cir.break loc(#loc114)
        } loc(#loc111)
        cir.yield loc(#loc104)
      } loc(#loc104)
    } loc(#loc183)
    %4 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc115)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc115)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc116)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc116)
    %8 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc117)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc117)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc118)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc119)
    %12 = cir.call @execl(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc120)
    cir.return loc(#loc99)
  } loc(#loc180)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc185)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc145)
    %2 = cir.get_global @__const.goodG2B2.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc145)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc145)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc125)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc186)
    cir.scope {
      %13 = cir.const #cir.int<6> : !s32i loc(#loc129)
      cir.switch (%13 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %14 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc131)
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc132)
          %16 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc133)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc133)
          %18 = cir.call @strcat(%15, %17) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc131)
          cir.break loc(#loc134)
        } loc(#loc130)
        cir.case(default, []) {
          %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc136)
          %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc136)
          cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc137)
          cir.break loc(#loc138)
        } loc(#loc135)
        cir.yield loc(#loc127)
      } loc(#loc127)
    } loc(#loc187)
    %4 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc139)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc139)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc140)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc140)
    %8 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc141)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc141)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc142)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc143)
    %12 = cir.call @execl(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc144)
    cir.return loc(#loc122)
  } loc(#loc184)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_console_execl_15.c":0:0)
#loc1 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":119:5)
#loc2 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":119:28)
#loc3 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":97:5)
#loc4 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":97:28)
#loc5 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":48:5)
#loc6 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":48:28)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("/usr/include/stdio.h":654:1)
#loc10 = loc("/usr/include/stdio.h":655:59)
#loc11 = loc("/usr/include/stdio.h":149:1)
#loc12 = loc("/usr/include/stdio.h":149:14)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc15 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":72:27)
#loc16 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":81:19)
#loc17 = loc("/usr/include/unistd.h":594:1)
#loc18 = loc("/usr/include/unistd.h":595:14)
#loc19 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":86:11)
#loc20 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":86:47)
#loc21 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":45:1)
#loc22 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":87:1)
#loc23 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":47:5)
#loc24 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":47:12)
#loc25 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":49:12)
#loc26 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":49:5)
#loc27 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":50:5)
#loc28 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":83:5)
#loc29 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":50:12)
#loc30 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":52:5)
#loc31 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":53:5)
#loc32 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":77:5)
#loc33 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":55:9)
#loc34 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":55:37)
#loc35 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":55:26)
#loc36 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":55:33)
#loc37 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":57:9)
#loc38 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":76:9)
#loc39 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":57:13)
#loc40 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":57:17)
#loc41 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":57:27)
#loc42 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":58:9)
#loc43 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":60:13)
#loc44 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":75:13)
#loc45 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":60:23)
#loc46 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":60:28)
#loc47 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":60:27)
#loc48 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":60:43)
#loc49 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":60:47)
#loc50 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":60:57)
#loc51 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":60:17)
#loc52 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":60:67)
#loc53 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":61:13)
#loc54 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":69:13)
#loc55 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":71:13)
#loc56 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":64:27)
#loc57 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":64:34)
#loc58 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":64:17)
#loc59 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":64:38)
#loc60 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":65:17)
#loc61 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":68:17)
#loc62 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":65:21)
#loc63 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":65:31)
#loc64 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":65:33)
#loc65 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":65:36)
#loc66 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":65:41)
#loc67 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":65:49)
#loc68 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":65:50)
#loc69 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":65:55)
#loc70 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":66:17)
#loc71 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":67:39)
#loc72 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":67:21)
#loc73 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":67:26)
#loc74 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":67:34)
#loc75 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":67:35)
#loc76 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":72:17)
#loc77 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":74:33)
#loc78 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":74:17)
#loc79 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":74:22)
#loc80 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":74:29)
#loc81 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":78:5)
#loc82 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":79:5)
#loc83 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":81:9)
#loc84 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":82:9)
#loc85 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":86:29)
#loc86 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":86:61)
#loc87 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":86:75)
#loc88 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":86:5)
#loc89 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":137:1)
#loc90 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":141:1)
#loc91 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":139:5)
#loc92 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":139:14)
#loc93 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":140:5)
#loc94 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":140:14)
#loc95 = loc("/usr/include/string.h":149:1)
#loc96 = loc("/usr/include/string.h":150:14)
#loc97 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":107:22)
#loc98 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":94:1)
#loc99 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":113:1)
#loc100 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":96:5)
#loc101 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":96:12)
#loc102 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":98:12)
#loc103 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":98:5)
#loc104 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":99:5)
#loc105 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":109:5)
#loc106 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":99:12)
#loc107 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":101:5)
#loc108 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":103:19)
#loc109 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":103:9)
#loc110 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":104:9)
#loc111 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":105:5)
#loc112 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":107:9)
#loc113 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":107:16)
#loc114 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":108:9)
#loc115 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":112:11)
#loc116 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":112:29)
#loc117 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":112:47)
#loc118 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":112:61)
#loc119 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":112:75)
#loc120 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":112:5)
#loc121 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":116:1)
#loc122 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":135:1)
#loc123 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":118:5)
#loc124 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":118:12)
#loc125 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":120:12)
#loc126 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":120:5)
#loc127 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":121:5)
#loc128 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":131:5)
#loc129 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":121:12)
#loc130 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":123:5)
#loc131 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":125:9)
#loc132 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":125:16)
#loc133 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":125:22)
#loc134 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":126:9)
#loc135 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":127:5)
#loc136 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":129:19)
#loc137 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":129:9)
#loc138 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":130:9)
#loc139 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":134:11)
#loc140 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":134:29)
#loc141 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":134:47)
#loc142 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":134:61)
#loc143 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":134:75)
#loc144 = loc("CWE78_OS_Command_Injection__char_console_execl_15.c":134:5)
#loc145 = loc(fused[#loc1, #loc2])
#loc146 = loc(fused[#loc3, #loc4])
#loc147 = loc(fused[#loc5, #loc6])
#loc148 = loc(fused[#loc7, #loc8])
#loc149 = loc(fused[#loc9, #loc10])
#loc150 = loc(fused[#loc11, #loc12])
#loc151 = loc(fused[#loc13, #loc14])
#loc152 = loc(fused[#loc17, #loc18])
#loc153 = loc(fused[#loc21, #loc22])
#loc154 = loc(fused[#loc23, #loc24])
#loc155 = loc(fused[#loc26, #loc25])
#loc156 = loc(fused[#loc27, #loc28])
#loc157 = loc(fused[#loc31, #loc32])
#loc158 = loc(fused[#loc33, #loc34])
#loc159 = loc(fused[#loc37, #loc38])
#loc160 = loc(fused[#loc39, #loc40])
#loc161 = loc(fused[#loc39, #loc41])
#loc162 = loc(fused[#loc42, #loc38])
#loc163 = loc(fused[#loc43, #loc44])
#loc164 = loc(fused[#loc48, #loc49])
#loc165 = loc(fused[#loc51, #loc52])
#loc166 = loc(fused[#loc53, #loc54, #loc55, #loc44])
#loc167 = loc(fused[#loc58, #loc59])
#loc168 = loc(fused[#loc60, #loc61])
#loc169 = loc(fused[#loc62, #loc63])
#loc170 = loc(fused[#loc66, #loc67])
#loc171 = loc(fused[#loc65, #loc69])
#loc172 = loc(fused[#loc70, #loc61])
#loc173 = loc(fused[#loc73, #loc74])
#loc174 = loc(fused[#loc72, #loc71])
#loc175 = loc(fused[#loc78, #loc77])
#loc176 = loc(fused[#loc89, #loc90])
#loc177 = loc(fused[#loc91, #loc92])
#loc178 = loc(fused[#loc93, #loc94])
#loc179 = loc(fused[#loc95, #loc96])
#loc180 = loc(fused[#loc98, #loc99])
#loc181 = loc(fused[#loc100, #loc101])
#loc182 = loc(fused[#loc103, #loc102])
#loc183 = loc(fused[#loc104, #loc105])
#loc184 = loc(fused[#loc121, #loc122])
#loc185 = loc(fused[#loc123, #loc124])
#loc186 = loc(fused[#loc126, #loc125])
#loc187 = loc(fused[#loc127, #loc128])
