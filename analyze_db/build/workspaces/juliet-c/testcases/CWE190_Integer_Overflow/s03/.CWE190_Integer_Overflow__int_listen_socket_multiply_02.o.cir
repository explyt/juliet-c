!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_listen_socket_multiply_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc528)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc529)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc530)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc531)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc532)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc533)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc534)
  cir.func private @close(!s32i) -> !s32i loc(#loc535)
  cir.func private @printIntLine(!s32i) loc(#loc536)
  cir.func no_proto @CWE190_Integer_Overflow__int_listen_socket_multiply_02_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc538)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc23)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc539)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc27)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc27)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc543)
          %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc544)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc545)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc546)
          %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc547)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc36)
          %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc36)
          cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc545)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc38)
          %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc38)
          cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc546)
          cir.scope {
            cir.do {
              cir.scope {
                %13 = cir.const #cir.int<2> : !s32i loc(#loc45)
                %14 = cir.const #cir.int<1> : !s32i loc(#loc46)
                %15 = cir.const #cir.int<6> : !s32i loc(#loc47)
                %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc48)
                cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc550)
                cir.scope {
                  %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc53)
                  %59 = cir.const #cir.int<1> : !s32i loc(#loc54)
                  %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc54)
                  %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc552)
                  cir.if %61 {
                    cir.break loc(#loc56)
                  } loc(#loc553)
                } loc(#loc551)
                %17 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc554)
                %18 = cir.const #cir.int<0> : !s32i loc(#loc59)
                %19 = cir.const #cir.int<16> : !u64i loc(#loc555)
                cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc556)
                %20 = cir.const #cir.int<2> : !s32i loc(#loc64)
                %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc64)
                %22 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc65)
                cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc557)
                %23 = cir.const #cir.int<0> : !s32i loc(#loc67)
                %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc67)
                %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc68)
                %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc69)
                cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc558)
                %27 = cir.const #cir.int<27015> : !s32i loc(#loc71)
                %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc71)
                %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc72)
                %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
                cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc559)
                cir.scope {
                  %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc78)
                  %59 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc561)
                  %60 = cir.const #cir.int<16> : !u64i loc(#loc562)
                  %61 = cir.cast(integral, %60 : !u64i), !u32i loc(#loc562)
                  %62 = cir.call @bind(%58, %59, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc83)
                  %63 = cir.const #cir.int<1> : !s32i loc(#loc84)
                  %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc84)
                  %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc563)
                  cir.if %65 {
                    cir.break loc(#loc86)
                  } loc(#loc564)
                } loc(#loc560)
                cir.scope {
                  %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc89)
                  %59 = cir.const #cir.int<5> : !s32i loc(#loc90)
                  %60 = cir.call @listen(%58, %59) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc91)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc92)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc92)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc566)
                  cir.if %63 {
                    cir.break loc(#loc94)
                  } loc(#loc567)
                } loc(#loc565)
                %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc95)
                %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc96)
                %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc97)
                %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc98)
                cir.store %34, %7 : !s32i, !cir.ptr<!s32i> loc(#loc568)
                cir.scope {
                  %58 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc103)
                  %59 = cir.const #cir.int<1> : !s32i loc(#loc104)
                  %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc104)
                  %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc570)
                  cir.if %61 {
                    cir.break loc(#loc106)
                  } loc(#loc571)
                } loc(#loc569)
                %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc107)
                %36 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc108)
                %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc108)
                %38 = cir.const #cir.int<3> : !s32i loc(#loc109)
                %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc109)
                %40 = cir.const #cir.int<4> : !u64i loc(#loc109)
                %41 = cir.binop(mul, %39, %40) : !u64i loc(#loc109)
                %42 = cir.const #cir.int<2> : !s32i loc(#loc109)
                %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc109)
                %44 = cir.binop(add, %41, %43) : !u64i loc(#loc109)
                %45 = cir.const #cir.int<1> : !s32i loc(#loc110)
                %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc110)
                %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc572)
                %48 = cir.const #cir.int<0> : !s32i loc(#loc111)
                %49 = cir.call @recv(%35, %37, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc112)
                %50 = cir.cast(integral, %49 : !s64i), !s32i loc(#loc112)
                cir.store %50, %4 : !s32i, !cir.ptr<!s32i> loc(#loc573)
                cir.scope {
                  %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc117)
                  %59 = cir.const #cir.int<1> : !s32i loc(#loc118)
                  %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc118)
                  %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc575)
                  %62 = cir.ternary(%61, true {
                    %63 = cir.const #true loc(#loc119)
                    cir.yield %63 : !cir.bool loc(#loc119)
                  }, false {
                    %63 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc120)
                    %64 = cir.const #cir.int<0> : !s32i loc(#loc121)
                    %65 = cir.cmp(eq, %63, %64) : !s32i, !cir.bool loc(#loc576)
                    %66 = cir.ternary(%65, true {
                      %67 = cir.const #true loc(#loc119)
                      cir.yield %67 : !cir.bool loc(#loc119)
                    }, false {
                      %67 = cir.const #false loc(#loc119)
                      cir.yield %67 : !cir.bool loc(#loc119)
                    }) : (!cir.bool) -> !cir.bool loc(#loc119)
                    cir.yield %66 : !cir.bool loc(#loc119)
                  }) : (!cir.bool) -> !cir.bool loc(#loc119)
                  cir.if %62 {
                    cir.break loc(#loc123)
                  } loc(#loc577)
                } loc(#loc574)
                %51 = cir.const #cir.int<0> : !s32i loc(#loc124)
                %52 = cir.cast(integral, %51 : !s32i), !s8i loc(#loc124)
                %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc125)
                %54 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc126)
                %55 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %53 : !s32i), !cir.ptr<!s8i> loc(#loc126)
                cir.store %52, %55 : !s8i, !cir.ptr<!s8i> loc(#loc578)
                %56 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc127)
                %57 = cir.call @atoi(%56) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc128)
                cir.store %57, %0 : !s32i, !cir.ptr<!s32i> loc(#loc579)
              } loc(#loc549)
              cir.yield loc(#loc42)
            } while {
              %13 = cir.const #cir.int<0> : !s32i loc(#loc131)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc131)
              cir.condition(%14) loc(#loc131)
            } loc(#loc548)
          } loc(#loc548)
          cir.scope {
            %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc134)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc135)
            %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc135)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc581)
            cir.if %16 {
              %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc137)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc138)
            } loc(#loc582)
          } loc(#loc580)
          cir.scope {
            %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc141)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc142)
            %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc142)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc584)
            cir.if %16 {
              %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc144)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc145)
            } loc(#loc585)
          } loc(#loc583)
        } loc(#loc542)
      } loc(#loc541)
    } loc(#loc540)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc148)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc148)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc152)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc153)
          %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc589)
          cir.if %6 {
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc591)
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc157)
            %9 = cir.const #cir.int<2> : !s32i loc(#loc156)
            %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc157)
            cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc591)
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc158)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc159)
          } loc(#loc590)
        } loc(#loc588)
      } loc(#loc587)
    } loc(#loc586)
    cir.return loc(#loc20)
  } loc(#loc537)
  cir.func no_proto @CWE190_Integer_Overflow__int_listen_socket_multiply_02_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc593)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc162)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc594)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc164)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc595)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc166)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc596)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc168)
    cir.return loc(#loc161)
  } loc(#loc592)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc597)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc172)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc173)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc599)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc178)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc600)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc182)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc182)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc604)
          %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc605)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc606)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc607)
          %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc608)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc191)
          %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc191)
          cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc606)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc193)
          %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc193)
          cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc607)
          cir.scope {
            cir.do {
              cir.scope {
                %13 = cir.const #cir.int<2> : !s32i loc(#loc200)
                %14 = cir.const #cir.int<1> : !s32i loc(#loc201)
                %15 = cir.const #cir.int<6> : !s32i loc(#loc202)
                %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc203)
                cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc611)
                cir.scope {
                  %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc208)
                  %59 = cir.const #cir.int<1> : !s32i loc(#loc209)
                  %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc209)
                  %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc613)
                  cir.if %61 {
                    cir.break loc(#loc211)
                  } loc(#loc614)
                } loc(#loc612)
                %17 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc615)
                %18 = cir.const #cir.int<0> : !s32i loc(#loc214)
                %19 = cir.const #cir.int<16> : !u64i loc(#loc616)
                cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc617)
                %20 = cir.const #cir.int<2> : !s32i loc(#loc219)
                %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc219)
                %22 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc65)
                cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc618)
                %23 = cir.const #cir.int<0> : !s32i loc(#loc221)
                %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc221)
                %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc68)
                %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc69)
                cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc619)
                %27 = cir.const #cir.int<27015> : !s32i loc(#loc223)
                %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc223)
                %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc224)
                %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
                cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc620)
                cir.scope {
                  %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc229)
                  %59 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc622)
                  %60 = cir.const #cir.int<16> : !u64i loc(#loc623)
                  %61 = cir.cast(integral, %60 : !u64i), !u32i loc(#loc623)
                  %62 = cir.call @bind(%58, %59, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc234)
                  %63 = cir.const #cir.int<1> : !s32i loc(#loc235)
                  %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc235)
                  %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc624)
                  cir.if %65 {
                    cir.break loc(#loc237)
                  } loc(#loc625)
                } loc(#loc621)
                cir.scope {
                  %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc240)
                  %59 = cir.const #cir.int<5> : !s32i loc(#loc241)
                  %60 = cir.call @listen(%58, %59) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc242)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc243)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc243)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc627)
                  cir.if %63 {
                    cir.break loc(#loc245)
                  } loc(#loc628)
                } loc(#loc626)
                %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc246)
                %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc247)
                %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc248)
                %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc249)
                cir.store %34, %7 : !s32i, !cir.ptr<!s32i> loc(#loc629)
                cir.scope {
                  %58 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc254)
                  %59 = cir.const #cir.int<1> : !s32i loc(#loc255)
                  %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc255)
                  %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc631)
                  cir.if %61 {
                    cir.break loc(#loc257)
                  } loc(#loc632)
                } loc(#loc630)
                %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc258)
                %36 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc259)
                %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc259)
                %38 = cir.const #cir.int<3> : !s32i loc(#loc260)
                %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc260)
                %40 = cir.const #cir.int<4> : !u64i loc(#loc260)
                %41 = cir.binop(mul, %39, %40) : !u64i loc(#loc260)
                %42 = cir.const #cir.int<2> : !s32i loc(#loc260)
                %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc260)
                %44 = cir.binop(add, %41, %43) : !u64i loc(#loc260)
                %45 = cir.const #cir.int<1> : !s32i loc(#loc261)
                %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc261)
                %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc633)
                %48 = cir.const #cir.int<0> : !s32i loc(#loc262)
                %49 = cir.call @recv(%35, %37, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc263)
                %50 = cir.cast(integral, %49 : !s64i), !s32i loc(#loc263)
                cir.store %50, %4 : !s32i, !cir.ptr<!s32i> loc(#loc634)
                cir.scope {
                  %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc268)
                  %59 = cir.const #cir.int<1> : !s32i loc(#loc269)
                  %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc269)
                  %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc636)
                  %62 = cir.ternary(%61, true {
                    %63 = cir.const #true loc(#loc270)
                    cir.yield %63 : !cir.bool loc(#loc270)
                  }, false {
                    %63 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc271)
                    %64 = cir.const #cir.int<0> : !s32i loc(#loc272)
                    %65 = cir.cmp(eq, %63, %64) : !s32i, !cir.bool loc(#loc637)
                    %66 = cir.ternary(%65, true {
                      %67 = cir.const #true loc(#loc270)
                      cir.yield %67 : !cir.bool loc(#loc270)
                    }, false {
                      %67 = cir.const #false loc(#loc270)
                      cir.yield %67 : !cir.bool loc(#loc270)
                    }) : (!cir.bool) -> !cir.bool loc(#loc270)
                    cir.yield %66 : !cir.bool loc(#loc270)
                  }) : (!cir.bool) -> !cir.bool loc(#loc270)
                  cir.if %62 {
                    cir.break loc(#loc274)
                  } loc(#loc638)
                } loc(#loc635)
                %51 = cir.const #cir.int<0> : !s32i loc(#loc275)
                %52 = cir.cast(integral, %51 : !s32i), !s8i loc(#loc275)
                %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc276)
                %54 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc277)
                %55 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %53 : !s32i), !cir.ptr<!s8i> loc(#loc277)
                cir.store %52, %55 : !s8i, !cir.ptr<!s8i> loc(#loc639)
                %56 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc278)
                %57 = cir.call @atoi(%56) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc279)
                cir.store %57, %0 : !s32i, !cir.ptr<!s32i> loc(#loc640)
              } loc(#loc610)
              cir.yield loc(#loc197)
            } while {
              %13 = cir.const #cir.int<0> : !s32i loc(#loc282)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc282)
              cir.condition(%14) loc(#loc282)
            } loc(#loc609)
          } loc(#loc609)
          cir.scope {
            %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc285)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc286)
            %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc286)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc642)
            cir.if %16 {
              %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc288)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc289)
            } loc(#loc643)
          } loc(#loc641)
          cir.scope {
            %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc292)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc293)
            %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc293)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc645)
            cir.if %16 {
              %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc295)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc296)
            } loc(#loc646)
          } loc(#loc644)
        } loc(#loc603)
      } loc(#loc602)
    } loc(#loc601)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc299)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc299)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc172)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc172)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc303)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc306)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc307)
          %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc650)
          cir.if %6 {
            cir.scope {
              %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc311)
              %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc312)
              %9 = cir.const #cir.int<2> : !s32i loc(#loc313)
              %10 = cir.binop(div, %8, %9) : !s32i loc(#loc653)
              %11 = cir.cmp(lt, %7, %10) : !s32i, !cir.bool loc(#loc654)
              cir.if %11 {
                %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc656)
                %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc320)
                %14 = cir.const #cir.int<2> : !s32i loc(#loc319)
                %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc320)
                cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc656)
                %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc321)
                cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc322)
              } else {
                %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc173)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc173)
                cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc323)
              } loc(#loc655)
            } loc(#loc652)
          } loc(#loc651)
        } loc(#loc649)
      } loc(#loc648)
    } loc(#loc647)
    cir.return loc(#loc175)
  } loc(#loc598)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc658)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc328)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc659)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc332)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc332)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc663)
          %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc664)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc665)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc666)
          %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc667)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc341)
          %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc341)
          cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc665)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc343)
          %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc343)
          cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc666)
          cir.scope {
            cir.do {
              cir.scope {
                %13 = cir.const #cir.int<2> : !s32i loc(#loc350)
                %14 = cir.const #cir.int<1> : !s32i loc(#loc351)
                %15 = cir.const #cir.int<6> : !s32i loc(#loc352)
                %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc353)
                cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc670)
                cir.scope {
                  %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc358)
                  %59 = cir.const #cir.int<1> : !s32i loc(#loc359)
                  %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc359)
                  %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc672)
                  cir.if %61 {
                    cir.break loc(#loc361)
                  } loc(#loc673)
                } loc(#loc671)
                %17 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc674)
                %18 = cir.const #cir.int<0> : !s32i loc(#loc364)
                %19 = cir.const #cir.int<16> : !u64i loc(#loc675)
                cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc676)
                %20 = cir.const #cir.int<2> : !s32i loc(#loc369)
                %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc369)
                %22 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc65)
                cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc677)
                %23 = cir.const #cir.int<0> : !s32i loc(#loc371)
                %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc371)
                %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc68)
                %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc69)
                cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc678)
                %27 = cir.const #cir.int<27015> : !s32i loc(#loc373)
                %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc373)
                %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc374)
                %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
                cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc679)
                cir.scope {
                  %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc379)
                  %59 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc681)
                  %60 = cir.const #cir.int<16> : !u64i loc(#loc682)
                  %61 = cir.cast(integral, %60 : !u64i), !u32i loc(#loc682)
                  %62 = cir.call @bind(%58, %59, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc384)
                  %63 = cir.const #cir.int<1> : !s32i loc(#loc385)
                  %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc385)
                  %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc683)
                  cir.if %65 {
                    cir.break loc(#loc387)
                  } loc(#loc684)
                } loc(#loc680)
                cir.scope {
                  %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc390)
                  %59 = cir.const #cir.int<5> : !s32i loc(#loc391)
                  %60 = cir.call @listen(%58, %59) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc392)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc393)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc393)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc686)
                  cir.if %63 {
                    cir.break loc(#loc395)
                  } loc(#loc687)
                } loc(#loc685)
                %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc396)
                %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc397)
                %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc398)
                %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc399)
                cir.store %34, %7 : !s32i, !cir.ptr<!s32i> loc(#loc688)
                cir.scope {
                  %58 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc404)
                  %59 = cir.const #cir.int<1> : !s32i loc(#loc405)
                  %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc405)
                  %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc690)
                  cir.if %61 {
                    cir.break loc(#loc407)
                  } loc(#loc691)
                } loc(#loc689)
                %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc408)
                %36 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc409)
                %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc409)
                %38 = cir.const #cir.int<3> : !s32i loc(#loc410)
                %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc410)
                %40 = cir.const #cir.int<4> : !u64i loc(#loc410)
                %41 = cir.binop(mul, %39, %40) : !u64i loc(#loc410)
                %42 = cir.const #cir.int<2> : !s32i loc(#loc410)
                %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc410)
                %44 = cir.binop(add, %41, %43) : !u64i loc(#loc410)
                %45 = cir.const #cir.int<1> : !s32i loc(#loc411)
                %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc411)
                %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc692)
                %48 = cir.const #cir.int<0> : !s32i loc(#loc412)
                %49 = cir.call @recv(%35, %37, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc413)
                %50 = cir.cast(integral, %49 : !s64i), !s32i loc(#loc413)
                cir.store %50, %4 : !s32i, !cir.ptr<!s32i> loc(#loc693)
                cir.scope {
                  %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc418)
                  %59 = cir.const #cir.int<1> : !s32i loc(#loc419)
                  %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc419)
                  %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc695)
                  %62 = cir.ternary(%61, true {
                    %63 = cir.const #true loc(#loc420)
                    cir.yield %63 : !cir.bool loc(#loc420)
                  }, false {
                    %63 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc421)
                    %64 = cir.const #cir.int<0> : !s32i loc(#loc422)
                    %65 = cir.cmp(eq, %63, %64) : !s32i, !cir.bool loc(#loc696)
                    %66 = cir.ternary(%65, true {
                      %67 = cir.const #true loc(#loc420)
                      cir.yield %67 : !cir.bool loc(#loc420)
                    }, false {
                      %67 = cir.const #false loc(#loc420)
                      cir.yield %67 : !cir.bool loc(#loc420)
                    }) : (!cir.bool) -> !cir.bool loc(#loc420)
                    cir.yield %66 : !cir.bool loc(#loc420)
                  }) : (!cir.bool) -> !cir.bool loc(#loc420)
                  cir.if %62 {
                    cir.break loc(#loc424)
                  } loc(#loc697)
                } loc(#loc694)
                %51 = cir.const #cir.int<0> : !s32i loc(#loc425)
                %52 = cir.cast(integral, %51 : !s32i), !s8i loc(#loc425)
                %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc426)
                %54 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc427)
                %55 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %53 : !s32i), !cir.ptr<!s8i> loc(#loc427)
                cir.store %52, %55 : !s8i, !cir.ptr<!s8i> loc(#loc698)
                %56 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc428)
                %57 = cir.call @atoi(%56) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc429)
                cir.store %57, %0 : !s32i, !cir.ptr<!s32i> loc(#loc699)
              } loc(#loc669)
              cir.yield loc(#loc347)
            } while {
              %13 = cir.const #cir.int<0> : !s32i loc(#loc432)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc432)
              cir.condition(%14) loc(#loc432)
            } loc(#loc668)
          } loc(#loc668)
          cir.scope {
            %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc435)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc436)
            %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc436)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc701)
            cir.if %16 {
              %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc438)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc439)
            } loc(#loc702)
          } loc(#loc700)
          cir.scope {
            %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc442)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc443)
            %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc443)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc704)
            cir.if %16 {
              %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc445)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc446)
            } loc(#loc705)
          } loc(#loc703)
        } loc(#loc662)
      } loc(#loc661)
    } loc(#loc660)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc449)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc449)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc453)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc454)
          %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc709)
          cir.if %6 {
            cir.scope {
              %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc458)
              %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc459)
              %9 = cir.const #cir.int<2> : !s32i loc(#loc460)
              %10 = cir.binop(div, %8, %9) : !s32i loc(#loc712)
              %11 = cir.cmp(lt, %7, %10) : !s32i, !cir.bool loc(#loc713)
              cir.if %11 {
                %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc715)
                %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc467)
                %14 = cir.const #cir.int<2> : !s32i loc(#loc466)
                %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc467)
                cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc715)
                %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc468)
                cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc469)
              } else {
                %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc470)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc470)
                cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc471)
              } loc(#loc714)
            } loc(#loc711)
          } loc(#loc710)
        } loc(#loc708)
      } loc(#loc707)
    } loc(#loc706)
    cir.return loc(#loc325)
  } loc(#loc657)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc717)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc476)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc718)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc480)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc480)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc484)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc484)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc485)
      } else {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc486)
        cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc721)
      } loc(#loc720)
    } loc(#loc719)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc490)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc490)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc494)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc495)
          %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc725)
          cir.if %6 {
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc727)
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc499)
            %9 = cir.const #cir.int<2> : !s32i loc(#loc498)
            %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc499)
            cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc727)
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc500)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc501)
          } loc(#loc726)
        } loc(#loc724)
      } loc(#loc723)
    } loc(#loc722)
    cir.return loc(#loc473)
  } loc(#loc716)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc729)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc506)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc730)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc510)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc510)
      cir.if %3 {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc512)
        cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc733)
      } loc(#loc732)
    } loc(#loc731)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc516)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc516)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc520)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc521)
          %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc737)
          cir.if %6 {
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc739)
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc525)
            %9 = cir.const #cir.int<2> : !s32i loc(#loc524)
            %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc525)
            cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc739)
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc526)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc527)
          } loc(#loc738)
        } loc(#loc736)
      } loc(#loc735)
    } loc(#loc734)
    cir.return loc(#loc503)
  } loc(#loc728)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc19 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":44:1)
#loc20 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":130:1)
#loc21 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":46:5)
#loc22 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":46:9)
#loc23 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":48:12)
#loc24 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":48:5)
#loc25 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":49:5)
#loc26 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":120:5)
#loc27 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":49:8)
#loc28 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":50:5)
#loc29 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":51:9)
#loc30 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":119:9)
#loc31 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":56:13)
#loc32 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":56:17)
#loc33 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":57:13)
#loc34 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":57:32)
#loc35 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":58:13)
#loc36 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":58:35)
#loc37 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":59:13)
#loc38 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":59:35)
#loc39 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":60:13)
#loc40 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":60:45)
#loc41 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":61:13)
#loc42 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":104:21)
#loc43 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":62:13)
#loc44 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":103:13)
#loc45 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":71:39)
#loc46 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":71:48)
#loc47 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":71:61)
#loc48 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":71:32)
#loc49 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":71:17)
#loc50 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":71:72)
#loc51 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":72:17)
#loc52 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":75:17)
#loc53 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":72:21)
#loc54 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":72:37)
#loc55 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":73:17)
#loc56 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":74:21)
#loc57 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":76:24)
#loc58 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":76:25)
#loc59 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":76:34)
#loc60 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":76:37)
#loc61 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":76:51)
#loc62 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":76:17)
#loc63 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":76:52)
#loc64 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":77:38)
#loc65 = loc("/usr/include/netinet/in.h":249:5)
#loc66 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":77:17)
#loc67 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":78:43)
#loc68 = loc("/usr/include/netinet/in.h":251:20)
#loc69 = loc("/usr/include/netinet/in.h":33:15)
#loc70 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":78:17)
#loc71 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":79:42)
#loc72 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":79:36)
#loc73 = loc("/usr/include/netinet/in.h":250:15)
#loc74 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":79:17)
#loc75 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":79:50)
#loc76 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":80:17)
#loc77 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":83:17)
#loc78 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":80:26)
#loc79 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":80:58)
#loc80 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":80:59)
#loc81 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":80:68)
#loc82 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":80:82)
#loc83 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":80:21)
#loc84 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":80:88)
#loc85 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":81:17)
#loc86 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":82:21)
#loc87 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":84:17)
#loc88 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":87:17)
#loc89 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":84:28)
#loc90 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":84:42)
#loc91 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":84:21)
#loc92 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":84:61)
#loc93 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":85:17)
#loc94 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":86:21)
#loc95 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":88:39)
#loc96 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":88:53)
#loc97 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":88:59)
#loc98 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":88:32)
#loc99 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":88:17)
#loc100 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":88:63)
#loc101 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":89:17)
#loc102 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":92:17)
#loc103 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":89:21)
#loc104 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":89:37)
#loc105 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":90:17)
#loc106 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":91:21)
#loc107 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":94:35)
#loc108 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":94:49)
#loc109 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":94:62)
#loc110 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":94:80)
#loc111 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":94:83)
#loc112 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":94:30)
#loc113 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":94:17)
#loc114 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":94:84)
#loc115 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":95:17)
#loc116 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":98:17)
#loc117 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":95:21)
#loc118 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":95:35)
#loc119 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":95:48)
#loc120 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":95:51)
#loc121 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":95:65)
#loc122 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":96:17)
#loc123 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":97:21)
#loc124 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":100:43)
#loc125 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":100:29)
#loc126 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":100:17)
#loc127 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":102:29)
#loc128 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":102:24)
#loc129 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":102:17)
#loc130 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":102:40)
#loc131 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":104:20)
#loc132 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":105:13)
#loc133 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":108:13)
#loc134 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":105:17)
#loc135 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":105:33)
#loc136 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":106:13)
#loc137 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":107:30)
#loc138 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":107:17)
#loc139 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":109:13)
#loc140 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":112:13)
#loc141 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":109:17)
#loc142 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":109:33)
#loc143 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":110:13)
#loc144 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":111:30)
#loc145 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":111:17)
#loc146 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":121:5)
#loc147 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":129:5)
#loc148 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":121:8)
#loc149 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":122:5)
#loc150 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":123:9)
#loc151 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":128:9)
#loc152 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":123:12)
#loc153 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":123:19)
#loc154 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":124:9)
#loc155 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":126:13)
#loc156 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":126:33)
#loc157 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":126:26)
#loc158 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":127:26)
#loc159 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":127:13)
#loc160 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":382:1)
#loc161 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":388:1)
#loc162 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":384:5)
#loc163 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":384:14)
#loc164 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":385:5)
#loc165 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":385:14)
#loc166 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":386:5)
#loc167 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":386:14)
#loc168 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":387:5)
#loc169 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":387:14)
#loc170 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc171 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc172 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":217:19)
#loc173 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":231:27)
#loc174 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":137:1)
#loc175 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":235:1)
#loc176 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":139:5)
#loc177 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":139:9)
#loc178 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":141:12)
#loc179 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":141:5)
#loc180 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":142:5)
#loc181 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":213:5)
#loc182 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":142:8)
#loc183 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":143:5)
#loc184 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":144:9)
#loc185 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":212:9)
#loc186 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":149:13)
#loc187 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":149:17)
#loc188 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":150:13)
#loc189 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":150:32)
#loc190 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":151:13)
#loc191 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":151:35)
#loc192 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":152:13)
#loc193 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":152:35)
#loc194 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":153:13)
#loc195 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":153:45)
#loc196 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":154:13)
#loc197 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":197:21)
#loc198 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":155:13)
#loc199 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":196:13)
#loc200 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":164:39)
#loc201 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":164:48)
#loc202 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":164:61)
#loc203 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":164:32)
#loc204 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":164:17)
#loc205 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":164:72)
#loc206 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":165:17)
#loc207 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":168:17)
#loc208 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":165:21)
#loc209 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":165:37)
#loc210 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":166:17)
#loc211 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":167:21)
#loc212 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":169:24)
#loc213 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":169:25)
#loc214 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":169:34)
#loc215 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":169:37)
#loc216 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":169:51)
#loc217 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":169:17)
#loc218 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":169:52)
#loc219 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":170:38)
#loc220 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":170:17)
#loc221 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":171:43)
#loc222 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":171:17)
#loc223 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":172:42)
#loc224 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":172:36)
#loc225 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":172:17)
#loc226 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":172:50)
#loc227 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":173:17)
#loc228 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":176:17)
#loc229 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":173:26)
#loc230 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":173:58)
#loc231 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":173:59)
#loc232 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":173:68)
#loc233 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":173:82)
#loc234 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":173:21)
#loc235 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":173:88)
#loc236 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":174:17)
#loc237 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":175:21)
#loc238 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":177:17)
#loc239 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":180:17)
#loc240 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":177:28)
#loc241 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":177:42)
#loc242 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":177:21)
#loc243 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":177:61)
#loc244 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":178:17)
#loc245 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":179:21)
#loc246 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":181:39)
#loc247 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":181:53)
#loc248 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":181:59)
#loc249 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":181:32)
#loc250 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":181:17)
#loc251 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":181:63)
#loc252 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":182:17)
#loc253 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":185:17)
#loc254 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":182:21)
#loc255 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":182:37)
#loc256 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":183:17)
#loc257 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":184:21)
#loc258 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":187:35)
#loc259 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":187:49)
#loc260 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":187:62)
#loc261 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":187:80)
#loc262 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":187:83)
#loc263 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":187:30)
#loc264 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":187:17)
#loc265 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":187:84)
#loc266 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":188:17)
#loc267 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":191:17)
#loc268 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":188:21)
#loc269 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":188:35)
#loc270 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":188:48)
#loc271 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":188:51)
#loc272 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":188:65)
#loc273 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":189:17)
#loc274 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":190:21)
#loc275 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":193:43)
#loc276 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":193:29)
#loc277 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":193:17)
#loc278 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":195:29)
#loc279 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":195:24)
#loc280 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":195:17)
#loc281 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":195:40)
#loc282 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":197:20)
#loc283 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":198:13)
#loc284 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":201:13)
#loc285 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":198:17)
#loc286 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":198:33)
#loc287 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":199:13)
#loc288 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":200:30)
#loc289 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":200:17)
#loc290 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":202:13)
#loc291 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":205:13)
#loc292 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":202:17)
#loc293 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":202:33)
#loc294 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":203:13)
#loc295 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":204:30)
#loc296 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":204:17)
#loc297 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":214:5)
#loc298 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":234:5)
#loc299 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":214:8)
#loc300 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":215:5)
#loc301 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":218:5)
#loc302 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":220:5)
#loc303 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":217:9)
#loc304 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":221:9)
#loc305 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":233:9)
#loc306 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":221:12)
#loc307 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":221:19)
#loc308 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":222:9)
#loc309 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":224:13)
#loc310 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":232:13)
#loc311 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":224:17)
#loc312 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":224:25)
#loc313 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":224:33)
#loc314 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":224:34)
#loc315 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":225:13)
#loc316 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":228:13)
#loc317 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":230:13)
#loc318 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":226:17)
#loc319 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":226:37)
#loc320 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":226:30)
#loc321 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":227:30)
#loc322 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":227:17)
#loc323 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":231:17)
#loc324 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":238:1)
#loc325 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":331:1)
#loc326 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":240:5)
#loc327 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":240:9)
#loc328 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":242:12)
#loc329 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":242:5)
#loc330 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":243:5)
#loc331 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":314:5)
#loc332 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":243:8)
#loc333 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":244:5)
#loc334 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":245:9)
#loc335 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":313:9)
#loc336 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":250:13)
#loc337 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":250:17)
#loc338 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":251:13)
#loc339 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":251:32)
#loc340 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":252:13)
#loc341 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":252:35)
#loc342 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":253:13)
#loc343 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":253:35)
#loc344 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":254:13)
#loc345 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":254:45)
#loc346 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":255:13)
#loc347 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":298:21)
#loc348 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":256:13)
#loc349 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":297:13)
#loc350 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":265:39)
#loc351 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":265:48)
#loc352 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":265:61)
#loc353 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":265:32)
#loc354 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":265:17)
#loc355 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":265:72)
#loc356 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":266:17)
#loc357 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":269:17)
#loc358 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":266:21)
#loc359 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":266:37)
#loc360 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":267:17)
#loc361 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":268:21)
#loc362 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":270:24)
#loc363 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":270:25)
#loc364 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":270:34)
#loc365 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":270:37)
#loc366 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":270:51)
#loc367 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":270:17)
#loc368 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":270:52)
#loc369 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":271:38)
#loc370 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":271:17)
#loc371 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":272:43)
#loc372 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":272:17)
#loc373 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":273:42)
#loc374 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":273:36)
#loc375 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":273:17)
#loc376 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":273:50)
#loc377 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":274:17)
#loc378 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":277:17)
#loc379 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":274:26)
#loc380 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":274:58)
#loc381 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":274:59)
#loc382 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":274:68)
#loc383 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":274:82)
#loc384 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":274:21)
#loc385 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":274:88)
#loc386 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":275:17)
#loc387 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":276:21)
#loc388 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":278:17)
#loc389 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":281:17)
#loc390 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":278:28)
#loc391 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":278:42)
#loc392 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":278:21)
#loc393 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":278:61)
#loc394 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":279:17)
#loc395 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":280:21)
#loc396 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":282:39)
#loc397 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":282:53)
#loc398 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":282:59)
#loc399 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":282:32)
#loc400 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":282:17)
#loc401 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":282:63)
#loc402 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":283:17)
#loc403 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":286:17)
#loc404 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":283:21)
#loc405 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":283:37)
#loc406 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":284:17)
#loc407 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":285:21)
#loc408 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":288:35)
#loc409 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":288:49)
#loc410 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":288:62)
#loc411 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":288:80)
#loc412 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":288:83)
#loc413 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":288:30)
#loc414 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":288:17)
#loc415 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":288:84)
#loc416 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":289:17)
#loc417 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":292:17)
#loc418 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":289:21)
#loc419 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":289:35)
#loc420 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":289:48)
#loc421 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":289:51)
#loc422 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":289:65)
#loc423 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":290:17)
#loc424 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":291:21)
#loc425 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":294:43)
#loc426 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":294:29)
#loc427 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":294:17)
#loc428 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":296:29)
#loc429 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":296:24)
#loc430 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":296:17)
#loc431 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":296:40)
#loc432 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":298:20)
#loc433 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":299:13)
#loc434 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":302:13)
#loc435 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":299:17)
#loc436 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":299:33)
#loc437 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":300:13)
#loc438 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":301:30)
#loc439 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":301:17)
#loc440 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":303:13)
#loc441 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":306:13)
#loc442 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":303:17)
#loc443 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":303:33)
#loc444 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":304:13)
#loc445 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":305:30)
#loc446 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":305:17)
#loc447 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":315:5)
#loc448 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":330:5)
#loc449 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":315:8)
#loc450 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":316:5)
#loc451 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":317:9)
#loc452 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":329:9)
#loc453 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":317:12)
#loc454 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":317:19)
#loc455 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":318:9)
#loc456 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":320:13)
#loc457 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":328:13)
#loc458 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":320:17)
#loc459 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":320:25)
#loc460 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":320:33)
#loc461 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":320:34)
#loc462 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":321:13)
#loc463 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":324:13)
#loc464 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":326:13)
#loc465 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":322:17)
#loc466 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":322:37)
#loc467 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":322:30)
#loc468 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":323:30)
#loc469 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":323:17)
#loc470 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":327:27)
#loc471 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":327:17)
#loc472 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":334:1)
#loc473 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":358:1)
#loc474 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":336:5)
#loc475 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":336:9)
#loc476 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":338:12)
#loc477 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":338:5)
#loc478 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":339:5)
#loc479 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":348:5)
#loc480 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":339:8)
#loc481 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":340:5)
#loc482 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":343:5)
#loc483 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":345:5)
#loc484 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":342:19)
#loc485 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":342:9)
#loc486 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":347:16)
#loc487 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":347:9)
#loc488 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":349:5)
#loc489 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":357:5)
#loc490 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":349:8)
#loc491 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":350:5)
#loc492 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":351:9)
#loc493 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":356:9)
#loc494 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":351:12)
#loc495 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":351:19)
#loc496 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":352:9)
#loc497 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":354:13)
#loc498 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":354:33)
#loc499 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":354:26)
#loc500 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":355:26)
#loc501 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":355:13)
#loc502 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":361:1)
#loc503 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":380:1)
#loc504 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":363:5)
#loc505 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":363:9)
#loc506 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":365:12)
#loc507 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":365:5)
#loc508 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":366:5)
#loc509 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":370:5)
#loc510 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":366:8)
#loc511 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":367:5)
#loc512 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":369:16)
#loc513 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":369:9)
#loc514 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":371:5)
#loc515 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":379:5)
#loc516 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":371:8)
#loc517 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":372:5)
#loc518 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":373:9)
#loc519 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":378:9)
#loc520 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":373:12)
#loc521 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":373:19)
#loc522 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":374:9)
#loc523 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":376:13)
#loc524 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":376:33)
#loc525 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":376:26)
#loc526 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":377:26)
#loc527 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_02.c":377:13)
#loc528 = loc(fused[#loc1, #loc2])
#loc529 = loc(fused[#loc3, #loc4])
#loc530 = loc(fused[#loc5, #loc6])
#loc531 = loc(fused[#loc7, #loc8])
#loc532 = loc(fused[#loc9, #loc10])
#loc533 = loc(fused[#loc11, #loc12])
#loc534 = loc(fused[#loc13, #loc14])
#loc535 = loc(fused[#loc15, #loc16])
#loc536 = loc(fused[#loc17, #loc18])
#loc537 = loc(fused[#loc19, #loc20])
#loc538 = loc(fused[#loc21, #loc22])
#loc539 = loc(fused[#loc24, #loc23])
#loc540 = loc(fused[#loc25, #loc26])
#loc541 = loc(fused[#loc28, #loc26])
#loc542 = loc(fused[#loc29, #loc30])
#loc543 = loc(fused[#loc31, #loc32])
#loc544 = loc(fused[#loc33, #loc34])
#loc545 = loc(fused[#loc35, #loc36])
#loc546 = loc(fused[#loc37, #loc38])
#loc547 = loc(fused[#loc39, #loc40])
#loc548 = loc(fused[#loc41, #loc42])
#loc549 = loc(fused[#loc43, #loc44])
#loc550 = loc(fused[#loc49, #loc50])
#loc551 = loc(fused[#loc51, #loc52])
#loc552 = loc(fused[#loc53, #loc54])
#loc553 = loc(fused[#loc55, #loc52])
#loc554 = loc(fused[#loc57, #loc58])
#loc555 = loc(fused[#loc60, #loc61])
#loc556 = loc(fused[#loc62, #loc63])
#loc557 = loc(fused[#loc66, #loc64])
#loc558 = loc(fused[#loc70, #loc67])
#loc559 = loc(fused[#loc74, #loc75])
#loc560 = loc(fused[#loc76, #loc77])
#loc561 = loc(fused[#loc79, #loc80])
#loc562 = loc(fused[#loc81, #loc82])
#loc563 = loc(fused[#loc83, #loc84])
#loc564 = loc(fused[#loc85, #loc77])
#loc565 = loc(fused[#loc87, #loc88])
#loc566 = loc(fused[#loc91, #loc92])
#loc567 = loc(fused[#loc93, #loc88])
#loc568 = loc(fused[#loc99, #loc100])
#loc569 = loc(fused[#loc101, #loc102])
#loc570 = loc(fused[#loc103, #loc104])
#loc571 = loc(fused[#loc105, #loc102])
#loc572 = loc(fused[#loc109, #loc110])
#loc573 = loc(fused[#loc113, #loc114])
#loc574 = loc(fused[#loc115, #loc116])
#loc575 = loc(fused[#loc117, #loc118])
#loc576 = loc(fused[#loc120, #loc121])
#loc577 = loc(fused[#loc122, #loc116])
#loc578 = loc(fused[#loc126, #loc124])
#loc579 = loc(fused[#loc129, #loc130])
#loc580 = loc(fused[#loc132, #loc133])
#loc581 = loc(fused[#loc134, #loc135])
#loc582 = loc(fused[#loc136, #loc133])
#loc583 = loc(fused[#loc139, #loc140])
#loc584 = loc(fused[#loc141, #loc142])
#loc585 = loc(fused[#loc143, #loc140])
#loc586 = loc(fused[#loc146, #loc147])
#loc587 = loc(fused[#loc149, #loc147])
#loc588 = loc(fused[#loc150, #loc151])
#loc589 = loc(fused[#loc152, #loc153])
#loc590 = loc(fused[#loc154, #loc151])
#loc591 = loc(fused[#loc155, #loc156])
#loc592 = loc(fused[#loc160, #loc161])
#loc593 = loc(fused[#loc162, #loc163])
#loc594 = loc(fused[#loc164, #loc165])
#loc595 = loc(fused[#loc166, #loc167])
#loc596 = loc(fused[#loc168, #loc169])
#loc597 = loc(fused[#loc170, #loc171])
#loc598 = loc(fused[#loc174, #loc175])
#loc599 = loc(fused[#loc176, #loc177])
#loc600 = loc(fused[#loc179, #loc178])
#loc601 = loc(fused[#loc180, #loc181])
#loc602 = loc(fused[#loc183, #loc181])
#loc603 = loc(fused[#loc184, #loc185])
#loc604 = loc(fused[#loc186, #loc187])
#loc605 = loc(fused[#loc188, #loc189])
#loc606 = loc(fused[#loc190, #loc191])
#loc607 = loc(fused[#loc192, #loc193])
#loc608 = loc(fused[#loc194, #loc195])
#loc609 = loc(fused[#loc196, #loc197])
#loc610 = loc(fused[#loc198, #loc199])
#loc611 = loc(fused[#loc204, #loc205])
#loc612 = loc(fused[#loc206, #loc207])
#loc613 = loc(fused[#loc208, #loc209])
#loc614 = loc(fused[#loc210, #loc207])
#loc615 = loc(fused[#loc212, #loc213])
#loc616 = loc(fused[#loc215, #loc216])
#loc617 = loc(fused[#loc217, #loc218])
#loc618 = loc(fused[#loc220, #loc219])
#loc619 = loc(fused[#loc222, #loc221])
#loc620 = loc(fused[#loc225, #loc226])
#loc621 = loc(fused[#loc227, #loc228])
#loc622 = loc(fused[#loc230, #loc231])
#loc623 = loc(fused[#loc232, #loc233])
#loc624 = loc(fused[#loc234, #loc235])
#loc625 = loc(fused[#loc236, #loc228])
#loc626 = loc(fused[#loc238, #loc239])
#loc627 = loc(fused[#loc242, #loc243])
#loc628 = loc(fused[#loc244, #loc239])
#loc629 = loc(fused[#loc250, #loc251])
#loc630 = loc(fused[#loc252, #loc253])
#loc631 = loc(fused[#loc254, #loc255])
#loc632 = loc(fused[#loc256, #loc253])
#loc633 = loc(fused[#loc260, #loc261])
#loc634 = loc(fused[#loc264, #loc265])
#loc635 = loc(fused[#loc266, #loc267])
#loc636 = loc(fused[#loc268, #loc269])
#loc637 = loc(fused[#loc271, #loc272])
#loc638 = loc(fused[#loc273, #loc267])
#loc639 = loc(fused[#loc277, #loc275])
#loc640 = loc(fused[#loc280, #loc281])
#loc641 = loc(fused[#loc283, #loc284])
#loc642 = loc(fused[#loc285, #loc286])
#loc643 = loc(fused[#loc287, #loc284])
#loc644 = loc(fused[#loc290, #loc291])
#loc645 = loc(fused[#loc292, #loc293])
#loc646 = loc(fused[#loc294, #loc291])
#loc647 = loc(fused[#loc297, #loc298])
#loc648 = loc(fused[#loc300, #loc301, #loc302, #loc298])
#loc649 = loc(fused[#loc304, #loc305])
#loc650 = loc(fused[#loc306, #loc307])
#loc651 = loc(fused[#loc308, #loc305])
#loc652 = loc(fused[#loc309, #loc310])
#loc653 = loc(fused[#loc312, #loc313])
#loc654 = loc(fused[#loc311, #loc314])
#loc655 = loc(fused[#loc315, #loc316, #loc317, #loc310])
#loc656 = loc(fused[#loc318, #loc319])
#loc657 = loc(fused[#loc324, #loc325])
#loc658 = loc(fused[#loc326, #loc327])
#loc659 = loc(fused[#loc329, #loc328])
#loc660 = loc(fused[#loc330, #loc331])
#loc661 = loc(fused[#loc333, #loc331])
#loc662 = loc(fused[#loc334, #loc335])
#loc663 = loc(fused[#loc336, #loc337])
#loc664 = loc(fused[#loc338, #loc339])
#loc665 = loc(fused[#loc340, #loc341])
#loc666 = loc(fused[#loc342, #loc343])
#loc667 = loc(fused[#loc344, #loc345])
#loc668 = loc(fused[#loc346, #loc347])
#loc669 = loc(fused[#loc348, #loc349])
#loc670 = loc(fused[#loc354, #loc355])
#loc671 = loc(fused[#loc356, #loc357])
#loc672 = loc(fused[#loc358, #loc359])
#loc673 = loc(fused[#loc360, #loc357])
#loc674 = loc(fused[#loc362, #loc363])
#loc675 = loc(fused[#loc365, #loc366])
#loc676 = loc(fused[#loc367, #loc368])
#loc677 = loc(fused[#loc370, #loc369])
#loc678 = loc(fused[#loc372, #loc371])
#loc679 = loc(fused[#loc375, #loc376])
#loc680 = loc(fused[#loc377, #loc378])
#loc681 = loc(fused[#loc380, #loc381])
#loc682 = loc(fused[#loc382, #loc383])
#loc683 = loc(fused[#loc384, #loc385])
#loc684 = loc(fused[#loc386, #loc378])
#loc685 = loc(fused[#loc388, #loc389])
#loc686 = loc(fused[#loc392, #loc393])
#loc687 = loc(fused[#loc394, #loc389])
#loc688 = loc(fused[#loc400, #loc401])
#loc689 = loc(fused[#loc402, #loc403])
#loc690 = loc(fused[#loc404, #loc405])
#loc691 = loc(fused[#loc406, #loc403])
#loc692 = loc(fused[#loc410, #loc411])
#loc693 = loc(fused[#loc414, #loc415])
#loc694 = loc(fused[#loc416, #loc417])
#loc695 = loc(fused[#loc418, #loc419])
#loc696 = loc(fused[#loc421, #loc422])
#loc697 = loc(fused[#loc423, #loc417])
#loc698 = loc(fused[#loc427, #loc425])
#loc699 = loc(fused[#loc430, #loc431])
#loc700 = loc(fused[#loc433, #loc434])
#loc701 = loc(fused[#loc435, #loc436])
#loc702 = loc(fused[#loc437, #loc434])
#loc703 = loc(fused[#loc440, #loc441])
#loc704 = loc(fused[#loc442, #loc443])
#loc705 = loc(fused[#loc444, #loc441])
#loc706 = loc(fused[#loc447, #loc448])
#loc707 = loc(fused[#loc450, #loc448])
#loc708 = loc(fused[#loc451, #loc452])
#loc709 = loc(fused[#loc453, #loc454])
#loc710 = loc(fused[#loc455, #loc452])
#loc711 = loc(fused[#loc456, #loc457])
#loc712 = loc(fused[#loc459, #loc460])
#loc713 = loc(fused[#loc458, #loc461])
#loc714 = loc(fused[#loc462, #loc463, #loc464, #loc457])
#loc715 = loc(fused[#loc465, #loc466])
#loc716 = loc(fused[#loc472, #loc473])
#loc717 = loc(fused[#loc474, #loc475])
#loc718 = loc(fused[#loc477, #loc476])
#loc719 = loc(fused[#loc478, #loc479])
#loc720 = loc(fused[#loc481, #loc482, #loc483, #loc479])
#loc721 = loc(fused[#loc487, #loc486])
#loc722 = loc(fused[#loc488, #loc489])
#loc723 = loc(fused[#loc491, #loc489])
#loc724 = loc(fused[#loc492, #loc493])
#loc725 = loc(fused[#loc494, #loc495])
#loc726 = loc(fused[#loc496, #loc493])
#loc727 = loc(fused[#loc497, #loc498])
#loc728 = loc(fused[#loc502, #loc503])
#loc729 = loc(fused[#loc504, #loc505])
#loc730 = loc(fused[#loc507, #loc506])
#loc731 = loc(fused[#loc508, #loc509])
#loc732 = loc(fused[#loc511, #loc509])
#loc733 = loc(fused[#loc513, #loc512])
#loc734 = loc(fused[#loc514, #loc515])
#loc735 = loc(fused[#loc517, #loc515])
#loc736 = loc(fused[#loc518, #loc519])
#loc737 = loc(fused[#loc520, #loc521])
#loc738 = loc(fused[#loc522, #loc519])
#loc739 = loc(fused[#loc523, #loc524])
