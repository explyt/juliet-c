!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":24:74)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":24:84)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":46:79)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":46:89)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":64:79)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":64:89)
#loc102 = loc(fused[#loc9, #loc10])
#loc116 = loc(fused[#loc41, #loc42])
#loc129 = loc(fused[#loc73, #loc74])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22_badGlobal : !s32i {alignment = 4 : i64} loc(#loc98)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc99)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc100)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22_badSource(%arg0: !cir.ptr<!s64i> loc(fused[#loc9, #loc10])) -> !cir.ptr<!s64i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc102)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["__retval"] {alignment = 8 : i64} loc(#loc8)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc11)
    cir.br ^bb1 loc(#loc103)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22_badGlobal : !cir.ptr<!s32i> loc(#loc98)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc14)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc104)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc16)
    %6 = cir.const #cir.int<8> : !u64i loc(#loc105)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc16)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc106)
    cir.store %8, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc107)
    cir.br ^bb3 loc(#loc108)
  ^bb3:  // pred: ^bb2
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc23)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc24)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc24)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s64i>, !cir.bool loc(#loc109)
    cir.brcond %12 ^bb4, ^bb5 loc(#loc110)
  ^bb4:  // pred: ^bb3
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc26)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc28)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc26)
    cir.br ^bb5 loc(#loc22)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc22)
  ^bb6:  // pred: ^bb5
    %16 = cir.const #cir.int<2147483643> : !s64i loc(#loc29)
    %17 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc30)
    cir.store %16, %17 : !s64i, !cir.ptr<!s64i> loc(#loc111)
    cir.br ^bb7 loc(#loc13)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc13)
  ^bb8:  // pred: ^bb7
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc32)
    cir.store %18, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc112)
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc112)
    cir.return %19 : !cir.ptr<!s64i> loc(#loc112)
  } loc(#loc101)
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22_goodG2B1Global : !s32i {alignment = 4 : i64} loc(#loc113)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc114)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc38)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22_goodG2B1Source(%arg0: !cir.ptr<!s64i> loc(fused[#loc41, #loc42])) -> !cir.ptr<!s64i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc116)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["__retval"] {alignment = 8 : i64} loc(#loc40)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc43)
    cir.br ^bb1 loc(#loc117)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22_goodG2B1Global : !cir.ptr<!s32i> loc(#loc113)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc46)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc46)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc118)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc38)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc50)
    cir.br ^bb8 loc(#loc48)
  ^bb3:  // pred: ^bb1
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc51)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc119)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc51)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc120)
    cir.store %10, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc121)
    cir.br ^bb4 loc(#loc122)
  ^bb4:  // pred: ^bb3
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc58)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc59)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc59)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s64i>, !cir.bool loc(#loc123)
    cir.brcond %14 ^bb5, ^bb6 loc(#loc124)
  ^bb5:  // pred: ^bb4
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc61)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc63)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc61)
    cir.br ^bb6 loc(#loc57)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc57)
  ^bb7:  // pred: ^bb6
    %18 = cir.const #cir.int<2147483643> : !s64i loc(#loc64)
    %19 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc65)
    cir.store %18, %19 : !s64i, !cir.ptr<!s64i> loc(#loc125)
    cir.br ^bb8 loc(#loc45)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc45)
  ^bb9:  // pred: ^bb8
    %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc67)
    cir.store %20, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc126)
    %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc126)
    cir.return %21 : !cir.ptr<!s64i> loc(#loc126)
  } loc(#loc115)
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22_goodG2B2Global : !s32i {alignment = 4 : i64} loc(#loc127)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22_goodG2B2Source(%arg0: !cir.ptr<!s64i> loc(fused[#loc73, #loc74])) -> !cir.ptr<!s64i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc129)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["__retval"] {alignment = 8 : i64} loc(#loc72)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc75)
    cir.br ^bb1 loc(#loc130)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22_goodG2B2Global : !cir.ptr<!s32i> loc(#loc127)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc78)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc78)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc131)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc80)
    %6 = cir.const #cir.int<8> : !u64i loc(#loc132)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc80)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc133)
    cir.store %8, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc134)
    cir.br ^bb3 loc(#loc135)
  ^bb3:  // pred: ^bb2
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc87)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc88)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc88)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s64i>, !cir.bool loc(#loc136)
    cir.brcond %12 ^bb4, ^bb5 loc(#loc137)
  ^bb4:  // pred: ^bb3
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc90)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc91)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc92)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc90)
    cir.br ^bb5 loc(#loc86)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc86)
  ^bb6:  // pred: ^bb5
    %16 = cir.const #cir.int<2147483643> : !s64i loc(#loc93)
    %17 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc94)
    cir.store %16, %17 : !s64i, !cir.ptr<!s64i> loc(#loc138)
    cir.br ^bb7 loc(#loc77)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc77)
  ^bb8:  // pred: ^bb7
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc96)
    cir.store %18, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc139)
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc139)
    cir.return %19 : !cir.ptr<!s64i> loc(#loc139)
  } loc(#loc128)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":22:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":22:12)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":24:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":35:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":25:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":26:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":33:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":26:8)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":27:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":30:27)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":30:34)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":30:45)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":30:46)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":30:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":31:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":31:37)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":31:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":31:21)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":31:27)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":31:28)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":31:34)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":31:33)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":32:17)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":32:10)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":32:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":34:12)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":34:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":42:1)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":42:12)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":51:19)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":46:1)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":61:1)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":47:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":48:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":59:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":48:8)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":49:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":52:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":54:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":51:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":56:27)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":56:34)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":56:46)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":56:47)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":56:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":57:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":57:37)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":57:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":57:21)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":57:27)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":57:28)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":57:34)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":57:33)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":58:17)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":58:10)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":58:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":60:12)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":60:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":43:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":43:12)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":64:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":74:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":65:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":66:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":72:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":66:8)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":67:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":69:27)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":69:34)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":69:46)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":69:47)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":69:9)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":70:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":70:37)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":70:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":70:21)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":70:27)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":70:28)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":70:34)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":70:33)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":71:17)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":71:10)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":71:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":73:12)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c":73:5)
#loc98 = loc(fused[#loc1, #loc2])
#loc99 = loc(fused[#loc3, #loc4])
#loc100 = loc(fused[#loc5, #loc6])
#loc101 = loc(fused[#loc7, #loc8])
#loc103 = loc(fused[#loc12, #loc13])
#loc104 = loc(fused[#loc15, #loc13])
#loc105 = loc(fused[#loc17, #loc18])
#loc106 = loc(fused[#loc16, #loc19])
#loc107 = loc(fused[#loc20, #loc19])
#loc108 = loc(fused[#loc21, #loc22])
#loc109 = loc(fused[#loc23, #loc24])
#loc110 = loc(fused[#loc25, #loc22])
#loc111 = loc(fused[#loc31, #loc29])
#loc112 = loc(fused[#loc33, #loc32])
#loc113 = loc(fused[#loc34, #loc35])
#loc114 = loc(fused[#loc36, #loc37])
#loc115 = loc(fused[#loc39, #loc40])
#loc117 = loc(fused[#loc44, #loc45])
#loc118 = loc(fused[#loc47, #loc48, #loc49, #loc45])
#loc119 = loc(fused[#loc52, #loc53])
#loc120 = loc(fused[#loc51, #loc54])
#loc121 = loc(fused[#loc55, #loc54])
#loc122 = loc(fused[#loc56, #loc57])
#loc123 = loc(fused[#loc58, #loc59])
#loc124 = loc(fused[#loc60, #loc57])
#loc125 = loc(fused[#loc66, #loc64])
#loc126 = loc(fused[#loc68, #loc67])
#loc127 = loc(fused[#loc69, #loc70])
#loc128 = loc(fused[#loc71, #loc72])
#loc130 = loc(fused[#loc76, #loc77])
#loc131 = loc(fused[#loc79, #loc77])
#loc132 = loc(fused[#loc81, #loc82])
#loc133 = loc(fused[#loc80, #loc83])
#loc134 = loc(fused[#loc84, #loc83])
#loc135 = loc(fused[#loc85, #loc86])
#loc136 = loc(fused[#loc87, #loc88])
#loc137 = loc(fused[#loc89, #loc86])
#loc138 = loc(fused[#loc95, #loc93])
#loc139 = loc(fused[#loc97, #loc96])
