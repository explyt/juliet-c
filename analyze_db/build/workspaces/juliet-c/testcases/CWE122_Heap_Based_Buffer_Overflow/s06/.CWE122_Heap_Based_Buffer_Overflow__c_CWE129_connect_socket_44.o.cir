!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":44:21)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":44:25)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":146:25)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":146:29)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":189:25)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":189:29)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc450 = loc(fused[#loc14, #loc15])
#loc523 = loc(fused[#loc200, #loc201])
#loc554 = loc(fused[#loc280, #loc281])
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc444)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc445)
  cir.func private @printIntLine(!s32i) loc(#loc446)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc447)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc9)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc448)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc14, #loc15])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc450)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc16)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc452)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc453)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc23)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc24)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc24)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc454)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc455)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc23)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc456)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc453)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc29)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc30)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc458)
        cir.if %16 {
          %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc32)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc33)
          %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc34)
          cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
        } loc(#loc459)
      } loc(#loc457)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc37)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc461)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc39)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc40)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc462)
          cir.condition(%16) loc(#loc41)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc43)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc45)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc46)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc464)
          } loc(#loc463)
          cir.yield loc(#loc36)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc47)
          %15 = cir.unary(inc, %14) nsw : !s32i, !s32i loc(#loc48)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc465)
          cir.yield loc(#loc460)
        } loc(#loc460)
      } loc(#loc460)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc52)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !cir.bool loc(#loc467)
        cir.if %15 {
          %16 = cir.const #cir.int<1> : !s32i loc(#loc56)
          %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc57)
          %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc58)
          %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc59)
          cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc469)
          cir.scope {
            %20 = cir.const #cir.int<0> : !s32i loc(#loc62)
            cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc471)
            cir.for : cond {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc64)
              %22 = cir.const #cir.int<10> : !s32i loc(#loc65)
              %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc472)
              cir.condition(%23) loc(#loc66)
            } body {
              cir.scope {
                %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc68)
                %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc69)
                %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc70)
                %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc68)
                cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc71)
              } loc(#loc473)
              cir.yield loc(#loc61)
            } step {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc72)
              %22 = cir.unary(inc, %21) nsw : !s32i, !s32i loc(#loc73)
              cir.store %22, %1 : !s32i, !cir.ptr<!s32i> loc(#loc474)
              cir.yield loc(#loc470)
            } loc(#loc470)
          } loc(#loc470)
        } else {
          %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc9)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc74)
        } loc(#loc468)
      } loc(#loc466)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc75)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc76)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc76)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc75)
    } loc(#loc451)
    cir.return loc(#loc13)
  } loc(#loc449)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc475)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc476)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc81)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc477)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc478)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc479)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc480)
  cir.func private @close(!s32i) -> !s32i loc(#loc481)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc483)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc484)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<(!s32i)>> loc(#loc97)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>> loc(#loc484)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc98)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc99)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc485)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc487)
      %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc488)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc489)
      %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc490)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc108)
      %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc108)
      cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc489)
      cir.scope {
        cir.do {
          cir.scope {
            %13 = cir.const #cir.int<2> : !s32i loc(#loc115)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc116)
            %15 = cir.const #cir.int<6> : !s32i loc(#loc117)
            %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc118)
            cir.store %16, %9 : !s32i, !cir.ptr<!s32i> loc(#loc493)
            cir.scope {
              %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc123)
              %56 = cir.const #cir.int<1> : !s32i loc(#loc124)
              %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc124)
              %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc495)
              cir.if %58 {
                cir.break loc(#loc126)
              } loc(#loc496)
            } loc(#loc494)
            %17 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc497)
            %18 = cir.const #cir.int<0> : !s32i loc(#loc129)
            %19 = cir.const #cir.int<16> : !u64i loc(#loc498)
            cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc499)
            %20 = cir.const #cir.int<2> : !s32i loc(#loc134)
            %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc134)
            %22 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc135)
            cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc500)
            %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc81)
            %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc81)
            %25 = cir.call @inet_addr(%24) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc137)
            %26 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc138)
            %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc139)
            cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc501)
            %28 = cir.const #cir.int<27015> : !s32i loc(#loc142)
            %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc142)
            %30 = cir.call @htons(%29) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc143)
            %31 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc144)
            cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc502)
            cir.scope {
              %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc149)
              %56 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc504)
              %57 = cir.const #cir.int<16> : !u64i loc(#loc505)
              %58 = cir.cast(integral, %57 : !u64i), !u32i loc(#loc505)
              %59 = cir.call @connect(%55, %56, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc154)
              %60 = cir.const #cir.int<1> : !s32i loc(#loc155)
              %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc155)
              %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc506)
              cir.if %62 {
                cir.break loc(#loc157)
              } loc(#loc507)
            } loc(#loc503)
            %32 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc158)
            %33 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc159)
            %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc159)
            %35 = cir.const #cir.int<3> : !s32i loc(#loc160)
            %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc160)
            %37 = cir.const #cir.int<4> : !u64i loc(#loc160)
            %38 = cir.binop(mul, %36, %37) : !u64i loc(#loc160)
            %39 = cir.const #cir.int<2> : !s32i loc(#loc160)
            %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc160)
            %41 = cir.binop(add, %38, %40) : !u64i loc(#loc160)
            %42 = cir.const #cir.int<1> : !s32i loc(#loc161)
            %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc161)
            %44 = cir.binop(sub, %41, %43) : !u64i loc(#loc508)
            %45 = cir.const #cir.int<0> : !s32i loc(#loc162)
            %46 = cir.call @recv(%32, %34, %44, %45) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc163)
            %47 = cir.cast(integral, %46 : !s64i), !s32i loc(#loc163)
            cir.store %47, %7 : !s32i, !cir.ptr<!s32i> loc(#loc509)
            cir.scope {
              %55 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc168)
              %56 = cir.const #cir.int<1> : !s32i loc(#loc169)
              %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc169)
              %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc511)
              %59 = cir.ternary(%58, true {
                %60 = cir.const #true loc(#loc170)
                cir.yield %60 : !cir.bool loc(#loc170)
              }, false {
                %60 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc171)
                %61 = cir.const #cir.int<0> : !s32i loc(#loc172)
                %62 = cir.cmp(eq, %60, %61) : !s32i, !cir.bool loc(#loc512)
                %63 = cir.ternary(%62, true {
                  %64 = cir.const #true loc(#loc170)
                  cir.yield %64 : !cir.bool loc(#loc170)
                }, false {
                  %64 = cir.const #false loc(#loc170)
                  cir.yield %64 : !cir.bool loc(#loc170)
                }) : (!cir.bool) -> !cir.bool loc(#loc170)
                cir.yield %63 : !cir.bool loc(#loc170)
              }) : (!cir.bool) -> !cir.bool loc(#loc170)
              cir.if %59 {
                cir.break loc(#loc174)
              } loc(#loc513)
            } loc(#loc510)
            %48 = cir.const #cir.int<0> : !s32i loc(#loc175)
            %49 = cir.cast(integral, %48 : !s32i), !s8i loc(#loc175)
            %50 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc176)
            %51 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc177)
            %52 = cir.ptr_stride(%51 : !cir.ptr<!s8i>, %50 : !s32i), !cir.ptr<!s8i> loc(#loc177)
            cir.store %49, %52 : !s8i, !cir.ptr<!s8i> loc(#loc514)
            %53 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc178)
            %54 = cir.call @atoi(%53) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc179)
            cir.store %54, %0 : !s32i, !cir.ptr<!s32i> loc(#loc515)
          } loc(#loc492)
          cir.yield loc(#loc112)
        } while {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc182)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc182)
          cir.condition(%14) loc(#loc182)
        } loc(#loc491)
      } loc(#loc491)
      cir.scope {
        %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc185)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc186)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc186)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc517)
        cir.if %16 {
          %17 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc188)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc189)
        } loc(#loc518)
      } loc(#loc516)
    } loc(#loc486)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, !cir.ptr<!cir.func<(!s32i)>> loc(#loc190)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc191)
    cir.call %5(%6) : (!cir.ptr<!cir.func<(!s32i)>>, !s32i) -> () loc(#loc190)
    cir.return loc(#loc93)
  } loc(#loc482)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc520)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc194)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc521)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc196)
    cir.return loc(#loc193)
  } loc(#loc519)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc200, #loc201])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc523)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc525)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc526)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc209)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc210)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc210)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc527)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc528)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc209)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc529)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc526)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc215)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc216)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc216)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc531)
        cir.if %16 {
          %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc218)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc219)
          %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc220)
          cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc218)
        } loc(#loc532)
      } loc(#loc530)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc223)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc534)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc225)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc226)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc535)
          cir.condition(%16) loc(#loc227)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc229)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc230)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc231)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc232)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc537)
          } loc(#loc536)
          cir.yield loc(#loc222)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc233)
          %15 = cir.unary(inc, %14) nsw : !s32i, !s32i loc(#loc234)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc538)
          cir.yield loc(#loc533)
        } loc(#loc533)
      } loc(#loc533)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc237)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc238)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !cir.bool loc(#loc540)
        cir.if %15 {
          %16 = cir.const #cir.int<1> : !s32i loc(#loc242)
          %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc243)
          %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc244)
          %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc245)
          cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc542)
          cir.scope {
            %20 = cir.const #cir.int<0> : !s32i loc(#loc248)
            cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc544)
            cir.for : cond {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc250)
              %22 = cir.const #cir.int<10> : !s32i loc(#loc251)
              %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc545)
              cir.condition(%23) loc(#loc252)
            } body {
              cir.scope {
                %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc254)
                %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc255)
                %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc256)
                %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc254)
                cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc257)
              } loc(#loc546)
              cir.yield loc(#loc247)
            } step {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc258)
              %22 = cir.unary(inc, %21) nsw : !s32i, !s32i loc(#loc259)
              cir.store %22, %1 : !s32i, !cir.ptr<!s32i> loc(#loc547)
              cir.yield loc(#loc543)
            } loc(#loc543)
          } loc(#loc543)
        } else {
          %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc260)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc260)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc261)
        } loc(#loc541)
      } loc(#loc539)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc262)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc263)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc263)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc262)
    } loc(#loc524)
    cir.return loc(#loc199)
  } loc(#loc522)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc549)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc550)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<(!s32i)>> loc(#loc269)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>> loc(#loc550)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc270)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc271)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc551)
    %5 = cir.const #cir.int<7> : !s32i loc(#loc273)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc552)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, !cir.ptr<!cir.func<(!s32i)>> loc(#loc275)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc276)
    cir.call %6(%7) : (!cir.ptr<!cir.func<(!s32i)>>, !s32i) -> () loc(#loc275)
    cir.return loc(#loc265)
  } loc(#loc548)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc277)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc280, #loc281])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc554)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc282)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc556)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc557)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc289)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc290)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc290)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc558)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc559)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc289)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc560)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc557)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc295)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc296)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc296)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc562)
        cir.if %16 {
          %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc298)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc299)
          %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc300)
          cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc298)
        } loc(#loc563)
      } loc(#loc561)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc303)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc565)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc305)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc306)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc566)
          cir.condition(%16) loc(#loc307)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc309)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc310)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc311)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc312)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc568)
          } loc(#loc567)
          cir.yield loc(#loc302)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc313)
          %15 = cir.unary(inc, %14) nsw : !s32i, !s32i loc(#loc314)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc569)
          cir.yield loc(#loc564)
        } loc(#loc564)
      } loc(#loc564)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc317)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc318)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !cir.bool loc(#loc571)
        %16 = cir.ternary(%15, true {
          %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc320)
          %18 = cir.const #cir.int<10> : !s32i loc(#loc321)
          %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc572)
          %20 = cir.ternary(%19, true {
            %21 = cir.const #true loc(#loc319)
            cir.yield %21 : !cir.bool loc(#loc319)
          }, false {
            %21 = cir.const #false loc(#loc319)
            cir.yield %21 : !cir.bool loc(#loc319)
          }) : (!cir.bool) -> !cir.bool loc(#loc319)
          cir.yield %20 : !cir.bool loc(#loc319)
        }, false {
          %17 = cir.const #false loc(#loc319)
          cir.yield %17 : !cir.bool loc(#loc319)
        }) : (!cir.bool) -> !cir.bool loc(#loc319)
        cir.if %16 {
          %17 = cir.const #cir.int<1> : !s32i loc(#loc326)
          %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc327)
          %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc328)
          %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc329)
          cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc574)
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc332)
            cir.store %21, %1 : !s32i, !cir.ptr<!s32i> loc(#loc576)
            cir.for : cond {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc334)
              %23 = cir.const #cir.int<10> : !s32i loc(#loc335)
              %24 = cir.cmp(lt, %22, %23) : !s32i, !cir.bool loc(#loc577)
              cir.condition(%24) loc(#loc336)
            } body {
              cir.scope {
                %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc338)
                %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc339)
                %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc340)
                %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc338)
                cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc341)
              } loc(#loc578)
              cir.yield loc(#loc331)
            } step {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc342)
              %23 = cir.unary(inc, %22) nsw : !s32i, !s32i loc(#loc343)
              cir.store %23, %1 : !s32i, !cir.ptr<!s32i> loc(#loc579)
              cir.yield loc(#loc575)
            } loc(#loc575)
          } loc(#loc575)
        } else {
          %17 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc277)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc277)
          cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc344)
        } loc(#loc573)
      } loc(#loc570)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc345)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc346)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc346)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc345)
    } loc(#loc555)
    cir.return loc(#loc279)
  } loc(#loc553)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc581)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc582)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<(!s32i)>> loc(#loc352)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>> loc(#loc582)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc353)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc354)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc583)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc585)
      %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc586)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc587)
      %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc588)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc363)
      %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc363)
      cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc587)
      cir.scope {
        cir.do {
          cir.scope {
            %13 = cir.const #cir.int<2> : !s32i loc(#loc370)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc371)
            %15 = cir.const #cir.int<6> : !s32i loc(#loc372)
            %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc373)
            cir.store %16, %9 : !s32i, !cir.ptr<!s32i> loc(#loc591)
            cir.scope {
              %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc378)
              %56 = cir.const #cir.int<1> : !s32i loc(#loc379)
              %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc379)
              %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc593)
              cir.if %58 {
                cir.break loc(#loc381)
              } loc(#loc594)
            } loc(#loc592)
            %17 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc595)
            %18 = cir.const #cir.int<0> : !s32i loc(#loc384)
            %19 = cir.const #cir.int<16> : !u64i loc(#loc596)
            cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc597)
            %20 = cir.const #cir.int<2> : !s32i loc(#loc389)
            %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc389)
            %22 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc135)
            cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc598)
            %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc391)
            %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc391)
            %25 = cir.call @inet_addr(%24) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc392)
            %26 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc138)
            %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc139)
            cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc599)
            %28 = cir.const #cir.int<27015> : !s32i loc(#loc395)
            %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc395)
            %30 = cir.call @htons(%29) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc396)
            %31 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc144)
            cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc600)
            cir.scope {
              %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc401)
              %56 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc602)
              %57 = cir.const #cir.int<16> : !u64i loc(#loc603)
              %58 = cir.cast(integral, %57 : !u64i), !u32i loc(#loc603)
              %59 = cir.call @connect(%55, %56, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc406)
              %60 = cir.const #cir.int<1> : !s32i loc(#loc407)
              %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc407)
              %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc604)
              cir.if %62 {
                cir.break loc(#loc409)
              } loc(#loc605)
            } loc(#loc601)
            %32 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc410)
            %33 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc411)
            %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc411)
            %35 = cir.const #cir.int<3> : !s32i loc(#loc412)
            %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc412)
            %37 = cir.const #cir.int<4> : !u64i loc(#loc412)
            %38 = cir.binop(mul, %36, %37) : !u64i loc(#loc412)
            %39 = cir.const #cir.int<2> : !s32i loc(#loc412)
            %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc412)
            %41 = cir.binop(add, %38, %40) : !u64i loc(#loc412)
            %42 = cir.const #cir.int<1> : !s32i loc(#loc413)
            %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc413)
            %44 = cir.binop(sub, %41, %43) : !u64i loc(#loc606)
            %45 = cir.const #cir.int<0> : !s32i loc(#loc414)
            %46 = cir.call @recv(%32, %34, %44, %45) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc415)
            %47 = cir.cast(integral, %46 : !s64i), !s32i loc(#loc415)
            cir.store %47, %7 : !s32i, !cir.ptr<!s32i> loc(#loc607)
            cir.scope {
              %55 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc420)
              %56 = cir.const #cir.int<1> : !s32i loc(#loc421)
              %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc421)
              %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc609)
              %59 = cir.ternary(%58, true {
                %60 = cir.const #true loc(#loc422)
                cir.yield %60 : !cir.bool loc(#loc422)
              }, false {
                %60 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc423)
                %61 = cir.const #cir.int<0> : !s32i loc(#loc424)
                %62 = cir.cmp(eq, %60, %61) : !s32i, !cir.bool loc(#loc610)
                %63 = cir.ternary(%62, true {
                  %64 = cir.const #true loc(#loc422)
                  cir.yield %64 : !cir.bool loc(#loc422)
                }, false {
                  %64 = cir.const #false loc(#loc422)
                  cir.yield %64 : !cir.bool loc(#loc422)
                }) : (!cir.bool) -> !cir.bool loc(#loc422)
                cir.yield %63 : !cir.bool loc(#loc422)
              }) : (!cir.bool) -> !cir.bool loc(#loc422)
              cir.if %59 {
                cir.break loc(#loc426)
              } loc(#loc611)
            } loc(#loc608)
            %48 = cir.const #cir.int<0> : !s32i loc(#loc427)
            %49 = cir.cast(integral, %48 : !s32i), !s8i loc(#loc427)
            %50 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc428)
            %51 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc429)
            %52 = cir.ptr_stride(%51 : !cir.ptr<!s8i>, %50 : !s32i), !cir.ptr<!s8i> loc(#loc429)
            cir.store %49, %52 : !s8i, !cir.ptr<!s8i> loc(#loc612)
            %53 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc430)
            %54 = cir.call @atoi(%53) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc431)
            cir.store %54, %0 : !s32i, !cir.ptr<!s32i> loc(#loc613)
          } loc(#loc590)
          cir.yield loc(#loc367)
        } while {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc434)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc434)
          cir.condition(%14) loc(#loc434)
        } loc(#loc589)
      } loc(#loc589)
      cir.scope {
        %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc437)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc438)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc438)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc615)
        cir.if %16 {
          %17 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc440)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc441)
        } loc(#loc616)
      } loc(#loc614)
    } loc(#loc584)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, !cir.ptr<!cir.func<(!s32i)>> loc(#loc442)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc443)
    cir.call %5(%6) : (!cir.ptr<!cir.func<(!s32i)>>, !s32i) -> () loc(#loc442)
    cir.return loc(#loc348)
  } loc(#loc580)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":68:23)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":44:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":72:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":45:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":46:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":71:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":47:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":47:13)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":48:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":48:54)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":48:31)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":48:38)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":48:43)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":48:53)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":49:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":49:39)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":49:13)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":49:23)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":49:29)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":49:30)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":49:36)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":49:35)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":51:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":54:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":51:18)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":51:14)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":51:21)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":51:25)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":51:23)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":52:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":53:25)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":53:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":53:20)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":53:21)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":51:30)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":51:29)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":57:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":69:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":57:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":57:21)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":58:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":65:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":67:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":59:28)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":59:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":59:20)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":59:24)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":61:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":64:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":61:21)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":61:17)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":61:24)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":61:28)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":61:26)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":62:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":63:30)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":63:37)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":63:38)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":63:17)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":61:33)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":61:32)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":68:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":70:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":70:14)
#loc77 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc78 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc79 = loc("/usr/include/arpa/inet.h":34:1)
#loc80 = loc("/usr/include/arpa/inet.h":34:47)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":107:49)
#loc82 = loc("/usr/include/netinet/in.h":402:1)
#loc83 = loc("/usr/include/netinet/in.h":403:40)
#loc84 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc85 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc86 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc87 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc88 = loc("/usr/include/stdlib.h":105:1)
#loc89 = loc("/usr/include/stdlib.h":106:33)
#loc90 = loc("/usr/include/unistd.h":358:1)
#loc91 = loc("/usr/include/unistd.h":358:27)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":74:1)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":139:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":76:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":76:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":78:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":78:29)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":80:13)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":80:12)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":80:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":81:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":136:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":86:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":86:13)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":87:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":87:28)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":88:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":88:32)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":89:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":89:41)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":90:9)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":125:17)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":91:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":124:9)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":100:36)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":100:45)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":100:58)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":100:29)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":100:13)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":100:69)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":101:13)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":104:13)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":101:17)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":101:34)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":102:13)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":103:17)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":105:20)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":105:21)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":105:30)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":105:33)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":105:47)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":105:13)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":105:48)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":106:34)
#loc135 = loc("/usr/include/netinet/in.h":249:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":106:13)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":107:39)
#loc138 = loc("/usr/include/netinet/in.h":251:20)
#loc139 = loc("/usr/include/netinet/in.h":33:15)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":107:13)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":107:59)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":108:38)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":108:32)
#loc144 = loc("/usr/include/netinet/in.h":250:15)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":108:13)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":108:46)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":109:13)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":112:13)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":109:25)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":109:58)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":109:59)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":109:68)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":109:82)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":109:17)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":109:88)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":110:13)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":111:17)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":115:31)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":115:46)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":115:59)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":115:77)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":115:80)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":115:26)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":115:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":115:81)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":116:13)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":119:13)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":116:17)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":116:31)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":116:44)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":116:47)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":116:61)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":117:13)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":118:17)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":121:39)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":121:25)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":121:13)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":123:25)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":123:20)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":123:13)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":123:36)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":125:16)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":126:9)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":129:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":126:13)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":126:30)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":127:9)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":128:26)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":128:13)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":138:5)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":138:13)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":283:1)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":287:1)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":285:5)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":285:13)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":286:5)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":286:13)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":146:1)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":174:1)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":147:1)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":148:5)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":173:5)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":149:9)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":149:13)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":150:9)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":150:54)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":150:31)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":150:38)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":150:43)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":150:53)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":151:9)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":151:39)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":151:13)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":151:23)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":151:29)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":151:30)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":151:36)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":151:35)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":153:9)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":156:9)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":153:18)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":153:14)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":153:21)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":153:25)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":153:23)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":154:9)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":155:25)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":155:13)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":155:20)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":155:21)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":153:30)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":153:29)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":159:9)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":171:9)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":159:13)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":159:21)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":160:9)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":167:9)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":169:9)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":161:28)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":161:13)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":161:20)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":161:24)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":163:13)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":166:13)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":163:21)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":163:17)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":163:24)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":163:28)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":163:26)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":164:13)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":165:30)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":165:37)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":165:38)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":165:17)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":163:33)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":163:32)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":170:23)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":170:13)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":172:9)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":172:14)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":176:1)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":186:1)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":178:5)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":178:9)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":179:5)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":179:29)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":181:13)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":181:12)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":181:5)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":184:12)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":184:5)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":185:5)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":185:13)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":212:23)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":189:1)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":216:1)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":190:1)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":191:5)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":215:5)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":192:9)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":192:13)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":193:9)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":193:54)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":193:31)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":193:38)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":193:43)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":193:53)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":194:9)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":194:39)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":194:13)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":194:23)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":194:29)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":194:30)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":194:36)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":194:35)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":196:9)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":199:9)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":196:18)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":196:14)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":196:21)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":196:25)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":196:23)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":197:9)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":198:25)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":198:13)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":198:20)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":198:21)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":196:30)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":196:29)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":201:9)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":213:9)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":201:13)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":201:21)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":201:23)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":201:26)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":201:34)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":201:36)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":202:9)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":209:9)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":211:9)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":203:28)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":203:13)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":203:20)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":203:24)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":205:13)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":208:13)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":205:21)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":205:17)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":205:24)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":205:28)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":205:26)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":206:13)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":207:30)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":207:37)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":207:38)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":207:17)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":205:33)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":205:32)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":212:13)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":214:9)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":214:14)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":218:1)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":281:1)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":220:5)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":220:9)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":221:5)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":221:29)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":223:13)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":223:12)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":223:5)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":224:5)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":279:5)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":229:9)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":229:13)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":230:9)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":230:28)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":231:9)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":231:32)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":232:9)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":232:41)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":233:9)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":268:17)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":234:9)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":267:9)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":243:36)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":243:45)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":243:58)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":243:29)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":243:13)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":243:69)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":244:13)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":247:13)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":244:17)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":244:34)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":245:13)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":246:17)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":248:20)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":248:21)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":248:30)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":248:33)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":248:47)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":248:13)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":248:48)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":249:34)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":249:13)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":250:49)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":250:39)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":250:13)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":250:59)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":251:38)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":251:32)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":251:13)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":251:46)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":252:13)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":255:13)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":252:25)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":252:58)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":252:59)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":252:68)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":252:82)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":252:17)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":252:88)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":253:13)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":254:17)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":258:31)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":258:46)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":258:59)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":258:77)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":258:80)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":258:26)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":258:13)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":258:81)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":259:13)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":262:13)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":259:17)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":259:31)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":259:44)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":259:47)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":259:61)
#loc425 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":260:13)
#loc426 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":261:17)
#loc427 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":264:39)
#loc428 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":264:25)
#loc429 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":264:13)
#loc430 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":266:25)
#loc431 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":266:20)
#loc432 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":266:13)
#loc433 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":266:36)
#loc434 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":268:16)
#loc435 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":269:9)
#loc436 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":272:9)
#loc437 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":269:13)
#loc438 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":269:30)
#loc439 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":270:9)
#loc440 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":271:26)
#loc441 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":271:13)
#loc442 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":280:5)
#loc443 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c":280:13)
#loc444 = loc(fused[#loc1, #loc2])
#loc445 = loc(fused[#loc3, #loc4])
#loc446 = loc(fused[#loc5, #loc6])
#loc447 = loc(fused[#loc7, #loc8])
#loc448 = loc(fused[#loc10, #loc11])
#loc449 = loc(fused[#loc12, #loc13])
#loc451 = loc(fused[#loc17, #loc18])
#loc452 = loc(fused[#loc19, #loc20])
#loc453 = loc(fused[#loc21, #loc22])
#loc454 = loc(fused[#loc25, #loc26])
#loc455 = loc(fused[#loc24, #loc26])
#loc456 = loc(fused[#loc23, #loc22])
#loc457 = loc(fused[#loc27, #loc28])
#loc458 = loc(fused[#loc29, #loc30])
#loc459 = loc(fused[#loc31, #loc28])
#loc460 = loc(fused[#loc35, #loc36])
#loc461 = loc(fused[#loc38, #loc37])
#loc462 = loc(fused[#loc39, #loc40])
#loc463 = loc(fused[#loc42, #loc36])
#loc464 = loc(fused[#loc44, #loc43])
#loc465 = loc(fused[#loc48, #loc47])
#loc466 = loc(fused[#loc49, #loc50])
#loc467 = loc(fused[#loc51, #loc52])
#loc468 = loc(fused[#loc53, #loc54, #loc55, #loc50])
#loc469 = loc(fused[#loc57, #loc56])
#loc470 = loc(fused[#loc60, #loc61])
#loc471 = loc(fused[#loc63, #loc62])
#loc472 = loc(fused[#loc64, #loc65])
#loc473 = loc(fused[#loc67, #loc61])
#loc474 = loc(fused[#loc73, #loc72])
#loc475 = loc(fused[#loc77, #loc78])
#loc476 = loc(fused[#loc79, #loc80])
#loc477 = loc(fused[#loc82, #loc83])
#loc478 = loc(fused[#loc84, #loc85])
#loc479 = loc(fused[#loc86, #loc87])
#loc480 = loc(fused[#loc88, #loc89])
#loc481 = loc(fused[#loc90, #loc91])
#loc482 = loc(fused[#loc92, #loc93])
#loc483 = loc(fused[#loc94, #loc95])
#loc484 = loc(fused[#loc96, #loc97])
#loc485 = loc(fused[#loc100, #loc98])
#loc486 = loc(fused[#loc101, #loc102])
#loc487 = loc(fused[#loc103, #loc104])
#loc488 = loc(fused[#loc105, #loc106])
#loc489 = loc(fused[#loc107, #loc108])
#loc490 = loc(fused[#loc109, #loc110])
#loc491 = loc(fused[#loc111, #loc112])
#loc492 = loc(fused[#loc113, #loc114])
#loc493 = loc(fused[#loc119, #loc120])
#loc494 = loc(fused[#loc121, #loc122])
#loc495 = loc(fused[#loc123, #loc124])
#loc496 = loc(fused[#loc125, #loc122])
#loc497 = loc(fused[#loc127, #loc128])
#loc498 = loc(fused[#loc130, #loc131])
#loc499 = loc(fused[#loc132, #loc133])
#loc500 = loc(fused[#loc136, #loc134])
#loc501 = loc(fused[#loc140, #loc141])
#loc502 = loc(fused[#loc145, #loc146])
#loc503 = loc(fused[#loc147, #loc148])
#loc504 = loc(fused[#loc150, #loc151])
#loc505 = loc(fused[#loc152, #loc153])
#loc506 = loc(fused[#loc154, #loc155])
#loc507 = loc(fused[#loc156, #loc148])
#loc508 = loc(fused[#loc160, #loc161])
#loc509 = loc(fused[#loc164, #loc165])
#loc510 = loc(fused[#loc166, #loc167])
#loc511 = loc(fused[#loc168, #loc169])
#loc512 = loc(fused[#loc171, #loc172])
#loc513 = loc(fused[#loc173, #loc167])
#loc514 = loc(fused[#loc177, #loc175])
#loc515 = loc(fused[#loc180, #loc181])
#loc516 = loc(fused[#loc183, #loc184])
#loc517 = loc(fused[#loc185, #loc186])
#loc518 = loc(fused[#loc187, #loc184])
#loc519 = loc(fused[#loc192, #loc193])
#loc520 = loc(fused[#loc194, #loc195])
#loc521 = loc(fused[#loc196, #loc197])
#loc522 = loc(fused[#loc198, #loc199])
#loc524 = loc(fused[#loc203, #loc204])
#loc525 = loc(fused[#loc205, #loc206])
#loc526 = loc(fused[#loc207, #loc208])
#loc527 = loc(fused[#loc211, #loc212])
#loc528 = loc(fused[#loc210, #loc212])
#loc529 = loc(fused[#loc209, #loc208])
#loc530 = loc(fused[#loc213, #loc214])
#loc531 = loc(fused[#loc215, #loc216])
#loc532 = loc(fused[#loc217, #loc214])
#loc533 = loc(fused[#loc221, #loc222])
#loc534 = loc(fused[#loc224, #loc223])
#loc535 = loc(fused[#loc225, #loc226])
#loc536 = loc(fused[#loc228, #loc222])
#loc537 = loc(fused[#loc230, #loc229])
#loc538 = loc(fused[#loc234, #loc233])
#loc539 = loc(fused[#loc235, #loc236])
#loc540 = loc(fused[#loc237, #loc238])
#loc541 = loc(fused[#loc239, #loc240, #loc241, #loc236])
#loc542 = loc(fused[#loc243, #loc242])
#loc543 = loc(fused[#loc246, #loc247])
#loc544 = loc(fused[#loc249, #loc248])
#loc545 = loc(fused[#loc250, #loc251])
#loc546 = loc(fused[#loc253, #loc247])
#loc547 = loc(fused[#loc259, #loc258])
#loc548 = loc(fused[#loc264, #loc265])
#loc549 = loc(fused[#loc266, #loc267])
#loc550 = loc(fused[#loc268, #loc269])
#loc551 = loc(fused[#loc272, #loc270])
#loc552 = loc(fused[#loc274, #loc273])
#loc553 = loc(fused[#loc278, #loc279])
#loc555 = loc(fused[#loc283, #loc284])
#loc556 = loc(fused[#loc285, #loc286])
#loc557 = loc(fused[#loc287, #loc288])
#loc558 = loc(fused[#loc291, #loc292])
#loc559 = loc(fused[#loc290, #loc292])
#loc560 = loc(fused[#loc289, #loc288])
#loc561 = loc(fused[#loc293, #loc294])
#loc562 = loc(fused[#loc295, #loc296])
#loc563 = loc(fused[#loc297, #loc294])
#loc564 = loc(fused[#loc301, #loc302])
#loc565 = loc(fused[#loc304, #loc303])
#loc566 = loc(fused[#loc305, #loc306])
#loc567 = loc(fused[#loc308, #loc302])
#loc568 = loc(fused[#loc310, #loc309])
#loc569 = loc(fused[#loc314, #loc313])
#loc570 = loc(fused[#loc315, #loc316])
#loc571 = loc(fused[#loc317, #loc318])
#loc572 = loc(fused[#loc320, #loc322])
#loc573 = loc(fused[#loc323, #loc324, #loc325, #loc316])
#loc574 = loc(fused[#loc327, #loc326])
#loc575 = loc(fused[#loc330, #loc331])
#loc576 = loc(fused[#loc333, #loc332])
#loc577 = loc(fused[#loc334, #loc335])
#loc578 = loc(fused[#loc337, #loc331])
#loc579 = loc(fused[#loc343, #loc342])
#loc580 = loc(fused[#loc347, #loc348])
#loc581 = loc(fused[#loc349, #loc350])
#loc582 = loc(fused[#loc351, #loc352])
#loc583 = loc(fused[#loc355, #loc353])
#loc584 = loc(fused[#loc356, #loc357])
#loc585 = loc(fused[#loc358, #loc359])
#loc586 = loc(fused[#loc360, #loc361])
#loc587 = loc(fused[#loc362, #loc363])
#loc588 = loc(fused[#loc364, #loc365])
#loc589 = loc(fused[#loc366, #loc367])
#loc590 = loc(fused[#loc368, #loc369])
#loc591 = loc(fused[#loc374, #loc375])
#loc592 = loc(fused[#loc376, #loc377])
#loc593 = loc(fused[#loc378, #loc379])
#loc594 = loc(fused[#loc380, #loc377])
#loc595 = loc(fused[#loc382, #loc383])
#loc596 = loc(fused[#loc385, #loc386])
#loc597 = loc(fused[#loc387, #loc388])
#loc598 = loc(fused[#loc390, #loc389])
#loc599 = loc(fused[#loc393, #loc394])
#loc600 = loc(fused[#loc397, #loc398])
#loc601 = loc(fused[#loc399, #loc400])
#loc602 = loc(fused[#loc402, #loc403])
#loc603 = loc(fused[#loc404, #loc405])
#loc604 = loc(fused[#loc406, #loc407])
#loc605 = loc(fused[#loc408, #loc400])
#loc606 = loc(fused[#loc412, #loc413])
#loc607 = loc(fused[#loc416, #loc417])
#loc608 = loc(fused[#loc418, #loc419])
#loc609 = loc(fused[#loc420, #loc421])
#loc610 = loc(fused[#loc423, #loc424])
#loc611 = loc(fused[#loc425, #loc419])
#loc612 = loc(fused[#loc429, #loc427])
#loc613 = loc(fused[#loc432, #loc433])
#loc614 = loc(fused[#loc435, #loc436])
#loc615 = loc(fused[#loc437, #loc438])
#loc616 = loc(fused[#loc439, #loc436])
