!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":172:10)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":172:14)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":172:20)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":172:32)
#loc241 = loc(fused[#loc60, #loc61])
#loc242 = loc(fused[#loc62, #loc63])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc216)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc3)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc217)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc218)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc219)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_07_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc221)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc14)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc222)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc216)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc18)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc19)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc224)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc3)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc3)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc3)
        cir.store %8, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc226)
      } loc(#loc225)
    } loc(#loc223)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc216)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc24)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc25)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc228)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc231)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc232)
          %8 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc33)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc34)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc34)
          %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc33)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc231)
          %12 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc32)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc32)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc32)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc32)
          %16 = cir.const #cir.int<4> : !u64i loc(#loc32)
          %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc32)
          %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc32)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc32)
          cir.store %19, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc232)
          %20 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc35)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc35)
          %22 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc36)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc36)
          %24 = cir.call @wcscpy(%21, %23) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc37)
          %25 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc38)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc38)
          cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc39)
        } loc(#loc230)
      } loc(#loc229)
    } loc(#loc227)
    cir.return loc(#loc11)
  } loc(#loc220)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_07_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc234)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc235)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc236)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc237)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    cir.return loc(#loc41)
  } loc(#loc233)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc238)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc239)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc57)
  cir.func @main(%arg0: !s32i loc(fused[#loc60, #loc61]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc62, #loc63])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc241)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc242)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc59)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc64)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc64)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc65)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc66)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc66)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc67)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc54)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_07_good : !cir.ptr<!cir.func<!void ()>> loc(#loc243)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_07_good() : () -> () loc(#loc69)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc55)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc56)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_07_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc244)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_07_bad() : () -> () loc(#loc73)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc57)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc76)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc245)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc245)
    cir.return %17 : !s32i loc(#loc245)
  } loc(#loc240)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc78)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc246)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc247)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc249)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc87)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc250)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc216)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc91)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc92)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc252)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc94)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc94)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc94)
        cir.store %8, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc254)
      } loc(#loc253)
    } loc(#loc251)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc216)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc98)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc99)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc256)
      cir.if %5 {
        %6 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc78)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc78)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc103)
      } else {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc259)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc260)
          %8 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc110)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc111)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc111)
          %11 = cir.call @wcslen(%10) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc110)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc259)
          %12 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc109)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc109)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc109)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc109)
          %16 = cir.const #cir.int<4> : !u64i loc(#loc109)
          %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc109)
          %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc109)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc109)
          cir.store %19, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc260)
          %20 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc112)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc112)
          %22 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc113)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc113)
          %24 = cir.call @wcscpy(%21, %23) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc114)
          %25 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc115)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc115)
          cir.call @printWLine(%26) : (!cir.ptr<!s32i>) -> () loc(#loc116)
        } loc(#loc258)
      } loc(#loc257)
    } loc(#loc255)
    cir.return loc(#loc84)
  } loc(#loc248)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc262)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc121)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc263)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc216)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc125)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc126)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc265)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc128)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc128)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc128)
        cir.store %8, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc267)
      } loc(#loc266)
    } loc(#loc264)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc216)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc132)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc133)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc269)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc272)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc273)
          %8 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc141)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc142)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc142)
          %11 = cir.call @wcslen(%10) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc141)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc272)
          %12 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc140)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc140)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc140)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc140)
          %16 = cir.const #cir.int<4> : !u64i loc(#loc140)
          %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc140)
          %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc140)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc140)
          cir.store %19, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc273)
          %20 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc143)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc143)
          %22 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc144)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc144)
          %24 = cir.call @wcscpy(%21, %23) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc145)
          %25 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc146)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc146)
          cir.call @printWLine(%26) : (!cir.ptr<!s32i>) -> () loc(#loc147)
        } loc(#loc271)
      } loc(#loc270)
    } loc(#loc268)
    cir.return loc(#loc118)
  } loc(#loc261)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc148)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc274)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc276)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc155)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc277)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc216)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc159)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc160)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc279)
      cir.if %5 {
        %6 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc164)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc164)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc165)
      } else {
        %6 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc148)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc148)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc148)
        cir.store %8, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc281)
      } loc(#loc280)
    } loc(#loc278)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc216)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc169)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc170)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc283)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc286)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc287)
          %8 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc178)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc179)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc179)
          %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc178)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc286)
          %12 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc177)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc177)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc177)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc177)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc177)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc177)
          %18 = cir.binop(mul, %15, %17) : !u64i loc(#loc177)
          %19 = cir.alloca !u8i, !cir.ptr<!u8i>, %18 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc177)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc177)
          cir.store %20, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc287)
          %21 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc180)
          %22 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc181)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc181)
          %24 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc182)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc182)
          %26 = cir.call @strcpy(%23, %25) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc180)
          %27 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc183)
          %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc183)
          cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc184)
        } loc(#loc285)
      } loc(#loc284)
    } loc(#loc282)
    cir.return loc(#loc152)
  } loc(#loc275)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc289)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc189)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc290)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc216)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc193)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc194)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc292)
      cir.if %5 {
        %6 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc196)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc196)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc196)
        cir.store %8, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc294)
      } loc(#loc293)
    } loc(#loc291)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc216)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc200)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc201)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc296)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc299)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc300)
          %8 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc209)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc210)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc210)
          %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc209)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc299)
          %12 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc208)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc208)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc208)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc208)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc208)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc208)
          %18 = cir.binop(mul, %15, %17) : !u64i loc(#loc208)
          %19 = cir.alloca !u8i, !cir.ptr<!u8i>, %18 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc208)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc208)
          cir.store %20, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc300)
          %21 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc211)
          %22 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc212)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc212)
          %24 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc213)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc213)
          %26 = cir.call @strcpy(%23, %25) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc211)
          %27 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc214)
          %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc214)
          cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc215)
        } loc(#loc298)
      } loc(#loc297)
    } loc(#loc295)
    cir.return loc(#loc186)
  } loc(#loc288)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":28:1)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":28:25)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":39:24)
#loc4 = loc("/usr/include/string.h":407:1)
#loc5 = loc("/usr/include/string.h":408:33)
#loc6 = loc("/usr/include/wchar.h":98:1)
#loc7 = loc("/usr/include/wchar.h":100:14)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":32:1)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":51:1)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":34:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":34:12)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":35:12)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":35:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":36:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":40:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":36:8)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":36:20)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":37:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":39:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":41:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":50:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":41:8)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":41:20)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":42:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":43:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":49:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":45:13)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":45:49)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":46:13)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":46:35)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":45:30)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":45:45)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":47:26)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":47:32)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":47:19)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":48:31)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":48:13)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":155:1)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":161:1)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":157:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":157:14)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":158:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":158:14)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":159:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":159:14)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":160:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":160:14)
#loc50 = loc("/usr/include/stdlib.h":575:1)
#loc51 = loc("/usr/include/stdlib.h":575:41)
#loc52 = loc("/usr/include/time.h":76:1)
#loc53 = loc("/usr/include/time.h":76:38)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":177:15)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":179:15)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":182:15)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":184:15)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":172:1)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":187:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":173:1)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":175:27)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":175:22)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":175:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":177:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":178:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":178:56)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":179:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":182:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":183:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":183:55)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":184:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":186:12)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":186:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":70:19)
#loc79 = loc("/usr/include/wchar.h":247:1)
#loc80 = loc("/usr/include/wchar.h":247:51)
#loc81 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc82 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":58:1)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":82:1)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":60:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":60:12)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":61:12)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":61:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":62:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":66:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":62:8)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":62:20)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":63:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":65:24)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":65:9)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":67:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":81:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":67:8)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":67:20)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":68:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":71:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":73:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":70:9)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":74:9)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":80:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":76:13)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":76:52)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":77:13)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":77:35)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":76:30)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":76:48)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":78:26)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":78:32)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":78:19)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":79:35)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":79:13)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":85:1)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":104:1)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":87:5)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":87:12)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":88:12)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":88:5)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":89:5)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":93:5)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":89:8)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":89:20)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":90:5)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":92:24)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":92:9)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":94:5)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":103:5)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":94:8)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":94:20)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":95:5)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":96:9)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":102:9)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":98:13)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":98:52)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":99:13)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":99:35)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":98:30)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":98:48)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":100:26)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":100:32)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":100:19)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":101:35)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":101:13)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":119:24)
#loc149 = loc("/usr/include/string.h":141:1)
#loc150 = loc("/usr/include/string.h":142:14)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":107:1)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":131:1)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":109:5)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":109:12)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":110:12)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":110:5)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":111:5)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":120:5)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":111:8)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":111:20)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":112:5)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":115:5)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":117:5)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":114:19)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":114:9)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":119:9)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":121:5)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":130:5)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":121:8)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":121:20)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":122:5)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":123:9)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":129:9)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":125:13)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":125:49)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":126:13)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":126:35)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":125:30)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":125:45)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":127:19)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":127:26)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":127:32)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":128:31)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":128:13)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":134:1)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":153:1)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":136:5)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":136:12)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":137:12)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":137:5)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":138:5)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":142:5)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":138:8)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":138:20)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":139:5)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":141:24)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":141:9)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":143:5)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":152:5)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":143:8)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":143:20)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":144:5)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":145:9)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":151:9)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":147:13)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":147:49)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":148:13)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":148:35)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":147:30)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":147:45)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":149:19)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":149:26)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":149:32)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":150:31)
#loc215 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":150:13)
#loc216 = loc(fused[#loc1, #loc2])
#loc217 = loc(fused[#loc4, #loc5])
#loc218 = loc(fused[#loc6, #loc7])
#loc219 = loc(fused[#loc8, #loc9])
#loc220 = loc(fused[#loc10, #loc11])
#loc221 = loc(fused[#loc12, #loc13])
#loc222 = loc(fused[#loc15, #loc14])
#loc223 = loc(fused[#loc16, #loc17])
#loc224 = loc(fused[#loc18, #loc19])
#loc225 = loc(fused[#loc20, #loc17])
#loc226 = loc(fused[#loc21, #loc3])
#loc227 = loc(fused[#loc22, #loc23])
#loc228 = loc(fused[#loc24, #loc25])
#loc229 = loc(fused[#loc26, #loc23])
#loc230 = loc(fused[#loc27, #loc28])
#loc231 = loc(fused[#loc29, #loc30])
#loc232 = loc(fused[#loc31, #loc32])
#loc233 = loc(fused[#loc40, #loc41])
#loc234 = loc(fused[#loc42, #loc43])
#loc235 = loc(fused[#loc44, #loc45])
#loc236 = loc(fused[#loc46, #loc47])
#loc237 = loc(fused[#loc48, #loc49])
#loc238 = loc(fused[#loc50, #loc51])
#loc239 = loc(fused[#loc52, #loc53])
#loc240 = loc(fused[#loc58, #loc59])
#loc243 = loc(fused[#loc69, #loc70])
#loc244 = loc(fused[#loc73, #loc74])
#loc245 = loc(fused[#loc77, #loc76])
#loc246 = loc(fused[#loc79, #loc80])
#loc247 = loc(fused[#loc81, #loc82])
#loc248 = loc(fused[#loc83, #loc84])
#loc249 = loc(fused[#loc85, #loc86])
#loc250 = loc(fused[#loc88, #loc87])
#loc251 = loc(fused[#loc89, #loc90])
#loc252 = loc(fused[#loc91, #loc92])
#loc253 = loc(fused[#loc93, #loc90])
#loc254 = loc(fused[#loc95, #loc94])
#loc255 = loc(fused[#loc96, #loc97])
#loc256 = loc(fused[#loc98, #loc99])
#loc257 = loc(fused[#loc100, #loc101, #loc102, #loc97])
#loc258 = loc(fused[#loc104, #loc105])
#loc259 = loc(fused[#loc106, #loc107])
#loc260 = loc(fused[#loc108, #loc109])
#loc261 = loc(fused[#loc117, #loc118])
#loc262 = loc(fused[#loc119, #loc120])
#loc263 = loc(fused[#loc122, #loc121])
#loc264 = loc(fused[#loc123, #loc124])
#loc265 = loc(fused[#loc125, #loc126])
#loc266 = loc(fused[#loc127, #loc124])
#loc267 = loc(fused[#loc129, #loc128])
#loc268 = loc(fused[#loc130, #loc131])
#loc269 = loc(fused[#loc132, #loc133])
#loc270 = loc(fused[#loc134, #loc131])
#loc271 = loc(fused[#loc135, #loc136])
#loc272 = loc(fused[#loc137, #loc138])
#loc273 = loc(fused[#loc139, #loc140])
#loc274 = loc(fused[#loc149, #loc150])
#loc275 = loc(fused[#loc151, #loc152])
#loc276 = loc(fused[#loc153, #loc154])
#loc277 = loc(fused[#loc156, #loc155])
#loc278 = loc(fused[#loc157, #loc158])
#loc279 = loc(fused[#loc159, #loc160])
#loc280 = loc(fused[#loc161, #loc162, #loc163, #loc158])
#loc281 = loc(fused[#loc166, #loc148])
#loc282 = loc(fused[#loc167, #loc168])
#loc283 = loc(fused[#loc169, #loc170])
#loc284 = loc(fused[#loc171, #loc168])
#loc285 = loc(fused[#loc172, #loc173])
#loc286 = loc(fused[#loc174, #loc175])
#loc287 = loc(fused[#loc176, #loc177])
#loc288 = loc(fused[#loc185, #loc186])
#loc289 = loc(fused[#loc187, #loc188])
#loc290 = loc(fused[#loc190, #loc189])
#loc291 = loc(fused[#loc191, #loc192])
#loc292 = loc(fused[#loc193, #loc194])
#loc293 = loc(fused[#loc195, #loc192])
#loc294 = loc(fused[#loc197, #loc196])
#loc295 = loc(fused[#loc198, #loc199])
#loc296 = loc(fused[#loc200, #loc201])
#loc297 = loc(fused[#loc202, #loc199])
#loc298 = loc(fused[#loc203, #loc204])
#loc299 = loc(fused[#loc205, #loc206])
#loc300 = loc(fused[#loc207, #loc208])
