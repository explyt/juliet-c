!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__twoIntsStruct = !cir.record<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc135)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc136)
  cir.func private @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc137)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc138)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc140)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc141)
    cir.goto "source" loc(#loc142)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc17)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc18)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc19)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc19)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc143)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc144)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc18)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc145)
    cir.store %8, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc146)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc26)
      %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc27)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc27)
      %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc148)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc29)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc30)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc31)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc29)
      } loc(#loc149)
    } loc(#loc147)
    cir.scope {
      %9 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc151)
      cir.scope {
        %24 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc153)
        cir.scope {
          %25 = cir.const #cir.int<0> : !s32i loc(#loc42)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc42)
          cir.store %26, %24 : !u64i, !cir.ptr<!u64i> loc(#loc155)
          cir.for : cond {
            %27 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc44)
            %28 = cir.const #cir.int<100> : !s32i loc(#loc45)
            %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc45)
            %30 = cir.cmp(lt, %27, %29) : !u64i, !cir.bool loc(#loc156)
            cir.condition(%30) loc(#loc46)
          } body {
            cir.scope {
              %27 = cir.const #cir.int<0> : !s32i loc(#loc48)
              %28 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc49)
              %29 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc50)
              %30 = cir.ptr_stride(%29 : !cir.ptr<!ty__twoIntsStruct>, %28 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc50)
              %31 = cir.get_member %30[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc51)
              cir.store %27, %31 : !s32i, !cir.ptr<!s32i> loc(#loc158)
              %32 = cir.const #cir.int<0> : !s32i loc(#loc52)
              %33 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc53)
              %34 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc54)
              %35 = cir.ptr_stride(%34 : !cir.ptr<!ty__twoIntsStruct>, %33 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc54)
              %36 = cir.get_member %35[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc55)
              cir.store %32, %36 : !s32i, !cir.ptr<!s32i> loc(#loc159)
            } loc(#loc157)
            cir.yield loc(#loc41)
          } step {
            %27 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc56)
            %28 = cir.unary(inc, %27) : !u64i, !u64i loc(#loc57)
            cir.store %28, %24 : !u64i, !cir.ptr<!u64i> loc(#loc160)
            cir.yield loc(#loc154)
          } loc(#loc154)
        } loc(#loc154)
      } loc(#loc152)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc58)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc58)
      %12 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc59)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc59)
      %14 = cir.const #cir.int<100> : !s32i loc(#loc60)
      %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc60)
      %16 = cir.const #cir.int<8> : !u64i loc(#loc161)
      %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc162)
      cir.libc.memmove %17 bytes from %13 to %11 : !cir.ptr<!void>, !u64i loc(#loc163)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc65)
      %19 = cir.const #cir.int<0> : !s32i loc(#loc66)
      %20 = cir.ptr_stride(%18 : !cir.ptr<!ty__twoIntsStruct>, %19 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc67)
      cir.call @printStructLine(%20) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc68)
      %21 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc69)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc70)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc70)
      cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc69)
    } loc(#loc150)
    cir.return loc(#loc10)
  } loc(#loc139)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc165)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc73)
    cir.return loc(#loc72)
  } loc(#loc164)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc167)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc79)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc168)
    cir.goto "source" loc(#loc169)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc83)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc84)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc85)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc85)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc170)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc171)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc84)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc172)
    cir.store %8, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc173)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc92)
      %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc93)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc93)
      %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc175)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc95)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc96)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc97)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc95)
      } loc(#loc176)
    } loc(#loc174)
    cir.scope {
      %9 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc178)
      cir.scope {
        %24 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc180)
        cir.scope {
          %25 = cir.const #cir.int<0> : !s32i loc(#loc108)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc108)
          cir.store %26, %24 : !u64i, !cir.ptr<!u64i> loc(#loc182)
          cir.for : cond {
            %27 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc110)
            %28 = cir.const #cir.int<100> : !s32i loc(#loc111)
            %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc111)
            %30 = cir.cmp(lt, %27, %29) : !u64i, !cir.bool loc(#loc183)
            cir.condition(%30) loc(#loc112)
          } body {
            cir.scope {
              %27 = cir.const #cir.int<0> : !s32i loc(#loc114)
              %28 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc115)
              %29 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc116)
              %30 = cir.ptr_stride(%29 : !cir.ptr<!ty__twoIntsStruct>, %28 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc116)
              %31 = cir.get_member %30[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc51)
              cir.store %27, %31 : !s32i, !cir.ptr<!s32i> loc(#loc185)
              %32 = cir.const #cir.int<0> : !s32i loc(#loc117)
              %33 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc118)
              %34 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc119)
              %35 = cir.ptr_stride(%34 : !cir.ptr<!ty__twoIntsStruct>, %33 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc119)
              %36 = cir.get_member %35[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc55)
              cir.store %32, %36 : !s32i, !cir.ptr<!s32i> loc(#loc186)
            } loc(#loc184)
            cir.yield loc(#loc107)
          } step {
            %27 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc120)
            %28 = cir.unary(inc, %27) : !u64i, !u64i loc(#loc121)
            cir.store %28, %24 : !u64i, !cir.ptr<!u64i> loc(#loc187)
            cir.yield loc(#loc181)
          } loc(#loc181)
        } loc(#loc181)
      } loc(#loc179)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc122)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc122)
      %12 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc123)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc123)
      %14 = cir.const #cir.int<100> : !s32i loc(#loc124)
      %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc124)
      %16 = cir.const #cir.int<8> : !u64i loc(#loc188)
      %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc189)
      cir.libc.memmove %17 bytes from %13 to %11 : !cir.ptr<!void>, !u64i loc(#loc190)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc129)
      %19 = cir.const #cir.int<0> : !s32i loc(#loc130)
      %20 = cir.ptr_stride(%18 : !cir.ptr<!ty__twoIntsStruct>, %19 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc131)
      cir.call @printStructLine(%20) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc132)
      %21 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc133)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc134)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc134)
      cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc133)
    } loc(#loc177)
    cir.return loc(#loc76)
  } loc(#loc166)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":46:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":23:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":23:21)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":24:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":24:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":25:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":25:10)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":26:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":28:29)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":28:36)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":28:39)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":28:59)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":28:60)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":28:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":29:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":29:33)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":29:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":29:17)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":29:23)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":29:24)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":29:30)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":29:29)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":30:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":45:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":31:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":31:33)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":32:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":40:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":33:13)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":33:20)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":35:13)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":39:13)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":35:22)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":35:18)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":35:25)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":35:29)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":35:27)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":36:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":37:36)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":37:24)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":37:17)
#loc51 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":38:36)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":38:24)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":38:17)
#loc55 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":35:35)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":35:34)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":42:17)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":42:23)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":42:31)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":42:35)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":42:55)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":42:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":42:56)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":43:26)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":43:31)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":43:32)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":43:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":44:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":44:14)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":80:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":83:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":82:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":82:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":53:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":78:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":55:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":55:21)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":56:12)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":56:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":57:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":57:10)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":58:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":60:29)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":60:36)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":60:40)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":60:60)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":60:61)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":60:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":61:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":61:33)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":61:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":61:17)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":61:23)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":61:24)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":61:30)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":61:29)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":62:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":77:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":63:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":63:33)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":64:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":72:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":65:13)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":65:20)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":67:13)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":71:13)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":67:22)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":67:18)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":67:25)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":67:29)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":67:27)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":68:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":69:36)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":69:24)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":69:17)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":70:36)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":70:24)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":70:17)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":67:35)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":67:34)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":74:17)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":74:23)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":74:31)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":74:35)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":74:55)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":74:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":74:56)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":75:26)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":75:31)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":75:32)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":75:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":76:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c":76:14)
#loc135 = loc(fused[#loc1, #loc2])
#loc136 = loc(fused[#loc3, #loc4])
#loc137 = loc(fused[#loc5, #loc6])
#loc138 = loc(fused[#loc7, #loc8])
#loc139 = loc(fused[#loc9, #loc10])
#loc140 = loc(fused[#loc11, #loc12])
#loc141 = loc(fused[#loc14, #loc13])
#loc142 = loc(fused[#loc15, #loc16])
#loc143 = loc(fused[#loc20, #loc21])
#loc144 = loc(fused[#loc19, #loc21])
#loc145 = loc(fused[#loc18, #loc22])
#loc146 = loc(fused[#loc23, #loc22])
#loc147 = loc(fused[#loc24, #loc25])
#loc148 = loc(fused[#loc26, #loc27])
#loc149 = loc(fused[#loc28, #loc25])
#loc150 = loc(fused[#loc32, #loc33])
#loc151 = loc(fused[#loc34, #loc35])
#loc152 = loc(fused[#loc36, #loc37])
#loc153 = loc(fused[#loc38, #loc39])
#loc154 = loc(fused[#loc40, #loc41])
#loc155 = loc(fused[#loc43, #loc42])
#loc156 = loc(fused[#loc44, #loc45])
#loc157 = loc(fused[#loc47, #loc41])
#loc158 = loc(fused[#loc50, #loc48])
#loc159 = loc(fused[#loc54, #loc52])
#loc160 = loc(fused[#loc57, #loc56])
#loc161 = loc(fused[#loc61, #loc62])
#loc162 = loc(fused[#loc60, #loc62])
#loc163 = loc(fused[#loc63, #loc64])
#loc164 = loc(fused[#loc71, #loc72])
#loc165 = loc(fused[#loc73, #loc74])
#loc166 = loc(fused[#loc75, #loc76])
#loc167 = loc(fused[#loc77, #loc78])
#loc168 = loc(fused[#loc80, #loc79])
#loc169 = loc(fused[#loc81, #loc82])
#loc170 = loc(fused[#loc86, #loc87])
#loc171 = loc(fused[#loc85, #loc87])
#loc172 = loc(fused[#loc84, #loc88])
#loc173 = loc(fused[#loc89, #loc88])
#loc174 = loc(fused[#loc90, #loc91])
#loc175 = loc(fused[#loc92, #loc93])
#loc176 = loc(fused[#loc94, #loc91])
#loc177 = loc(fused[#loc98, #loc99])
#loc178 = loc(fused[#loc100, #loc101])
#loc179 = loc(fused[#loc102, #loc103])
#loc180 = loc(fused[#loc104, #loc105])
#loc181 = loc(fused[#loc106, #loc107])
#loc182 = loc(fused[#loc109, #loc108])
#loc183 = loc(fused[#loc110, #loc111])
#loc184 = loc(fused[#loc113, #loc107])
#loc185 = loc(fused[#loc116, #loc114])
#loc186 = loc(fused[#loc119, #loc117])
#loc187 = loc(fused[#loc121, #loc120])
#loc188 = loc(fused[#loc125, #loc126])
#loc189 = loc(fused[#loc124, #loc126])
#loc190 = loc(fused[#loc127, #loc128])
