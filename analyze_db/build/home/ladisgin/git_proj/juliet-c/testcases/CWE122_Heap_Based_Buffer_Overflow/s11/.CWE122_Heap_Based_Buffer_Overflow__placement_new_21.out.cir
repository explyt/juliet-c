!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc7 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":28:21)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":28:28)
#loc77 = loc("../../../testcasesupport/std_testcase.h":68:7)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":72:26)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":72:33)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":110:26)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":110:33)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":143:25)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":143:32)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":197:10)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":197:14)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":197:20)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":197:32)
!ty_OneIntClass = !cir.struct<class "OneIntClass" {!s32i} #cir.record.decl.ast>
!ty_TwoIntsClass = !cir.struct<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
#loc301 = loc(fused[#loc14, #loc15])
#loc327 = loc(fused[#loc80, #loc81])
#loc352 = loc(fused[#loc144, #loc145])
#loc377 = loc(fused[#loc204, #loc205])
#loc406 = loc(fused[#loc279, #loc280])
#loc407 = loc(fused[#loc281, #loc282])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc295)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc296)
  cir.global "private" internal dsolocal @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_21L9badStaticE = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc297)
  cir.func linkonce_odr @_ZN12TwoIntsClassC2Ev(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc7)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc7)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc7)
    cir.return loc(#loc7)
  } loc(#loc7)
  cir.func private @printIntLine(!s32i) loc(#loc298)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc299)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_21L7badSinkEPc(%arg0: !cir.ptr<!s8i> loc(fused[#loc14, #loc15])) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc302)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc301)
    cir.store %arg0, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc18)
    cir.br ^bb1 loc(#loc303)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_21L9badStaticE : !cir.ptr<!s32i> loc(#loc297)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %4 ^bb2, ^bb5 loc(#loc304)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc305)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<8> : !u64i loc(#loc306)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc26)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc26)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc306)
    cir.call @_ZN12TwoIntsClassC2Ev(%8) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc17)
    cir.store %8, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc302)
    %9 = cir.const #cir.int<5> : !s32i loc(#loc27)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc28)
    %11 = cir.get_member %10[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc29)
    cir.store %9, %11 : !s32i, !cir.ptr<!s32i> loc(#loc307)
    %12 = cir.const #cir.int<10> : !s32i loc(#loc30)
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc31)
    %14 = cir.get_member %13[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc32)
    cir.store %12, %14 : !s32i, !cir.ptr<!s32i> loc(#loc308)
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc33)
    %16 = cir.get_member %15[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc29)
    %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc34)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc35)
    %18 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc36)
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc37)
    cir.call @free(%20) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc36)
    cir.br ^bb4 loc(#loc24)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc20)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc20)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc13)
  } loc(#loc300)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_213badEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc310)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc311)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc312)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc46)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc313)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc46)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc314)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc311)
    cir.br ^bb1 loc(#loc315)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
    %8 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc52)
    %9 = cir.cmp(eq, %7, %8) : !cir.ptr<!s8i>, !cir.bool loc(#loc316)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc317)
  ^bb2:  // pred: ^bb1
    %10 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc54)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc56)
    cir.call @exit(%12) : (!s32i) -> () extra(#fn_attr) loc(#loc54)
    cir.br ^bb3 loc(#loc50)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc50)
  ^bb4:  // pred: ^bb3
    %13 = cir.const #cir.int<8> : !u64i loc(#loc318)
    %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc59)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc319)
    cir.store %15, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc312)
    cir.br ^bb5 loc(#loc320)
  ^bb5:  // pred: ^bb4
    %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
    %17 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc63)
    %18 = cir.cmp(eq, %16, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc321)
    cir.brcond %18 ^bb6, ^bb7 loc(#loc322)
  ^bb6:  // pred: ^bb5
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc65)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc66)
    %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc67)
    cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc65)
    cir.br ^bb7 loc(#loc61)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc61)
  ^bb8:  // pred: ^bb7
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc68)
    cir.store %22, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc323)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc70)
    %24 = cir.get_global @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_21L9badStaticE : !cir.ptr<!s32i> loc(#loc297)
    cir.store %23, %24 : !s32i, !cir.ptr<!s32i> loc(#loc324)
    %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc72)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_21L7badSinkEPc(%25) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    cir.return loc(#loc39)
  } loc(#loc309)
  cir.global "private" internal dsolocal @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_21L14goodB2G1StaticE = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc325)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc76)
  cir.func linkonce_odr @_ZN11OneIntClassC2Ev(%arg0: !cir.ptr<!ty_OneIntClass> loc("../../../testcasesupport/std_testcase.h":68:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["this", init] {alignment = 8 : i64} loc(#loc77)
    cir.store %arg0, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc77)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc77)
    cir.return loc(#loc77)
  } loc(#loc77)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_21L12goodB2G1SinkEPc(%arg0: !cir.ptr<!s8i> loc(fused[#loc80, #loc81])) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc328)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc327)
    cir.store %arg0, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc84)
    cir.br ^bb1 loc(#loc329)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_21L14goodB2G1StaticE : !cir.ptr<!s32i> loc(#loc325)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc87)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc87)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc330)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc76)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    cir.br ^bb6 loc(#loc89)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc331)
  ^bb4:  // pred: ^bb3
    %7 = cir.const #cir.int<4> : !u64i loc(#loc332)
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc95)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc95)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc332)
    cir.call @_ZN11OneIntClassC2Ev(%10) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc83)
    cir.store %10, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc328)
    %11 = cir.const #cir.int<5> : !s32i loc(#loc96)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc97)
    %13 = cir.get_member %12[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc98)
    cir.store %11, %13 : !s32i, !cir.ptr<!s32i> loc(#loc333)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc99)
    %15 = cir.get_member %14[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc98)
    %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc100)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc101)
    %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc102)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc103)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc103)
    cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc102)
    cir.br ^bb5 loc(#loc93)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc86)
  ^bb6:  // 2 preds: ^bb2, ^bb5
    cir.br ^bb7 loc(#loc86)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc79)
  } loc(#loc326)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_21L8goodB2G1Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc335)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc336)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc337)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc112)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc338)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc112)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc339)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc336)
    cir.br ^bb1 loc(#loc340)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc117)
    %8 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc118)
    %9 = cir.cmp(eq, %7, %8) : !cir.ptr<!s8i>, !cir.bool loc(#loc341)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc342)
  ^bb2:  // pred: ^bb1
    %10 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc120)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc121)
    %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc122)
    cir.call @exit(%12) : (!s32i) -> () extra(#fn_attr) loc(#loc120)
    cir.br ^bb3 loc(#loc116)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc116)
  ^bb4:  // pred: ^bb3
    %13 = cir.const #cir.int<8> : !u64i loc(#loc343)
    %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc125)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc344)
    cir.store %15, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc337)
    cir.br ^bb5 loc(#loc345)
  ^bb5:  // pred: ^bb4
    %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc128)
    %17 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc129)
    %18 = cir.cmp(eq, %16, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc346)
    cir.brcond %18 ^bb6, ^bb7 loc(#loc347)
  ^bb6:  // pred: ^bb5
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc131)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc132)
    %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc133)
    cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc131)
    cir.br ^bb7 loc(#loc127)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc127)
  ^bb8:  // pred: ^bb7
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc134)
    cir.store %22, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc348)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc136)
    %24 = cir.get_global @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_21L14goodB2G1StaticE : !cir.ptr<!s32i> loc(#loc325)
    cir.store %23, %24 : !s32i, !cir.ptr<!s32i> loc(#loc349)
    %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc138)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_21L12goodB2G1SinkEPc(%25) : (!cir.ptr<!s8i>) -> () loc(#loc139)
    cir.return loc(#loc105)
  } loc(#loc334)
  cir.global "private" internal dsolocal @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_21L14goodB2G2StaticE = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc350)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_21L12goodB2G2SinkEPc(%arg0: !cir.ptr<!s8i> loc(fused[#loc144, #loc145])) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc353)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc352)
    cir.store %arg0, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc148)
    cir.br ^bb1 loc(#loc354)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_21L14goodB2G2StaticE : !cir.ptr<!s32i> loc(#loc350)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc151)
    cir.brcond %4 ^bb2, ^bb5 loc(#loc355)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc356)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<4> : !u64i loc(#loc357)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc156)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc156)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc357)
    cir.call @_ZN11OneIntClassC2Ev(%8) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc147)
    cir.store %8, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc353)
    %9 = cir.const #cir.int<5> : !s32i loc(#loc157)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc158)
    %11 = cir.get_member %10[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc98)
    cir.store %9, %11 : !s32i, !cir.ptr<!s32i> loc(#loc358)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc159)
    %13 = cir.get_member %12[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc98)
    %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc160)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc161)
    %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc162)
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc163)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc163)
    cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc162)
    cir.br ^bb4 loc(#loc154)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc150)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc150)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc143)
  } loc(#loc351)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_21L8goodB2G2Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc360)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc361)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc362)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc172)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc363)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc172)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc364)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc361)
    cir.br ^bb1 loc(#loc365)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc177)
    %8 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc178)
    %9 = cir.cmp(eq, %7, %8) : !cir.ptr<!s8i>, !cir.bool loc(#loc366)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc367)
  ^bb2:  // pred: ^bb1
    %10 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc180)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc181)
    %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc182)
    cir.call @exit(%12) : (!s32i) -> () extra(#fn_attr) loc(#loc180)
    cir.br ^bb3 loc(#loc176)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc176)
  ^bb4:  // pred: ^bb3
    %13 = cir.const #cir.int<8> : !u64i loc(#loc368)
    %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc185)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc369)
    cir.store %15, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc362)
    cir.br ^bb5 loc(#loc370)
  ^bb5:  // pred: ^bb4
    %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc188)
    %17 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc189)
    %18 = cir.cmp(eq, %16, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc371)
    cir.brcond %18 ^bb6, ^bb7 loc(#loc372)
  ^bb6:  // pred: ^bb5
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc191)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc192)
    %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc193)
    cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc191)
    cir.br ^bb7 loc(#loc187)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc187)
  ^bb8:  // pred: ^bb7
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc194)
    cir.store %22, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc373)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc196)
    %24 = cir.get_global @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_21L14goodB2G2StaticE : !cir.ptr<!s32i> loc(#loc350)
    cir.store %23, %24 : !s32i, !cir.ptr<!s32i> loc(#loc374)
    %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc198)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_21L12goodB2G2SinkEPc(%25) : (!cir.ptr<!s8i>) -> () loc(#loc199)
    cir.return loc(#loc165)
  } loc(#loc359)
  cir.global "private" internal dsolocal @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_21L13goodG2bStaticE = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc375)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_21L11goodG2BSinkEPc(%arg0: !cir.ptr<!s8i> loc(fused[#loc204, #loc205])) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc378)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc377)
    cir.store %arg0, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc208)
    cir.br ^bb1 loc(#loc379)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_21L13goodG2bStaticE : !cir.ptr<!s32i> loc(#loc375)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc211)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc211)
    cir.brcond %4 ^bb2, ^bb5 loc(#loc380)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc381)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<8> : !u64i loc(#loc382)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc216)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc216)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc382)
    cir.call @_ZN12TwoIntsClassC2Ev(%8) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc207)
    cir.store %8, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc378)
    %9 = cir.const #cir.int<5> : !s32i loc(#loc217)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc218)
    %11 = cir.get_member %10[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc29)
    cir.store %9, %11 : !s32i, !cir.ptr<!s32i> loc(#loc383)
    %12 = cir.const #cir.int<10> : !s32i loc(#loc219)
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc220)
    %14 = cir.get_member %13[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc32)
    cir.store %12, %14 : !s32i, !cir.ptr<!s32i> loc(#loc384)
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc221)
    %16 = cir.get_member %15[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc29)
    %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc222)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc223)
    %18 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc224)
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc225)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc225)
    cir.call @free(%20) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc224)
    cir.br ^bb4 loc(#loc214)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc210)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc210)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc203)
  } loc(#loc376)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_21L7goodG2BEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc386)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc387)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc388)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc234)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc389)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc234)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc390)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc387)
    cir.br ^bb1 loc(#loc391)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc239)
    %8 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc240)
    %9 = cir.cmp(eq, %7, %8) : !cir.ptr<!s8i>, !cir.bool loc(#loc392)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc393)
  ^bb2:  // pred: ^bb1
    %10 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc242)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc243)
    %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc244)
    cir.call @exit(%12) : (!s32i) -> () extra(#fn_attr) loc(#loc242)
    cir.br ^bb3 loc(#loc238)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc238)
  ^bb4:  // pred: ^bb3
    %13 = cir.const #cir.int<8> : !u64i loc(#loc394)
    %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc247)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc395)
    cir.store %15, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc388)
    cir.br ^bb5 loc(#loc396)
  ^bb5:  // pred: ^bb4
    %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc250)
    %17 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc251)
    %18 = cir.cmp(eq, %16, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc397)
    cir.brcond %18 ^bb6, ^bb7 loc(#loc398)
  ^bb6:  // pred: ^bb5
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc253)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc254)
    %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc255)
    cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc253)
    cir.br ^bb7 loc(#loc249)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc249)
  ^bb8:  // pred: ^bb7
    %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc256)
    cir.store %22, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc399)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc258)
    %24 = cir.get_global @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_21L13goodG2bStaticE : !cir.ptr<!s32i> loc(#loc375)
    cir.store %23, %24 : !s32i, !cir.ptr<!s32i> loc(#loc400)
    %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc260)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_21L11goodG2BSinkEPc(%25) : (!cir.ptr<!s8i>) -> () loc(#loc261)
    cir.return loc(#loc227)
  } loc(#loc385)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_214goodEv() extra(#fn_attr2) {
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_21L8goodB2G1Ev() : () -> () loc(#loc264)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_21L8goodB2G2Ev() : () -> () loc(#loc265)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_21L7goodG2BEv() : () -> () loc(#loc266)
    cir.return loc(#loc263)
  } loc(#loc401)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc402)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc403)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc404)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc273)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc274)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc275)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc276)
  cir.func @main(%arg0: !s32i loc(fused[#loc279, #loc280]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc281, #loc282])) -> !s32i extra(#fn_attr2) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc406)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc407)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc278)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc283)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc283)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc284)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc285)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc285)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc286)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc273)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc273)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc287)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_214goodEv() : () -> () loc(#loc288)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc274)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc274)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc289)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc275)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc275)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc290)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_213badEv() : () -> () loc(#loc291)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc276)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc276)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc292)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc293)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc408)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc408)
    cir.return %15 : !s32i loc(#loc408)
  } loc(#loc405)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":26:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":26:24)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":28:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":47:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":38:13)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":38:49)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":29:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":30:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":46:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":30:8)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":31:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":32:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":45:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":38:39)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":38:43)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":40:32)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":40:13)
#loc29 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":41:32)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":41:13)
#loc32 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":42:26)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":42:36)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":42:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":44:13)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":44:18)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":49:1)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":60:1)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":51:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":51:12)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":52:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":52:62)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":54:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":54:64)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":52:36)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":52:43)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":52:61)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":53:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":53:42)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":53:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":53:26)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":53:32)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":53:33)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":53:39)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":53:38)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":54:44)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":54:63)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":54:37)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":55:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":55:43)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":55:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":55:27)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":55:33)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":55:34)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":55:40)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":55:39)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":57:12)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":57:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":58:17)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":58:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":59:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":59:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":67:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":67:29)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":77:19)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":72:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":94:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":87:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":87:48)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":73:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":74:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":93:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":74:8)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":75:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":78:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":80:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":77:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":81:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":92:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":87:38)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":87:42)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":89:32)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":89:13)
#loc98 = loc("../../../testcasesupport/std_testcase.h":71:13)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":90:26)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":90:36)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":90:13)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":91:13)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":91:18)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":96:1)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":107:1)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":98:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":98:12)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":99:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":99:62)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":101:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":101:64)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":99:36)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":99:43)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":99:61)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":100:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":100:42)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":100:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":100:26)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":100:32)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":100:33)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":100:39)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":100:38)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":101:44)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":101:63)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":101:37)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":102:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":102:43)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":102:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":102:27)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":102:33)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":102:34)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":102:40)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":102:39)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":104:12)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":104:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":105:22)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":105:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":106:18)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":106:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":68:1)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":68:29)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":110:1)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":127:1)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":120:13)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":120:48)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":111:1)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":112:5)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":126:5)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":112:8)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":113:5)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":114:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":125:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":120:38)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":120:42)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":122:32)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":122:13)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":123:26)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":123:36)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":123:13)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":124:13)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":124:18)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":129:1)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":140:1)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":131:5)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":131:12)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":132:5)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":132:62)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":134:5)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":134:64)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":132:36)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":132:43)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":132:61)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":133:5)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":133:42)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":133:9)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":133:26)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":133:32)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":133:33)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":133:39)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":133:38)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":134:44)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":134:63)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":134:37)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":135:5)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":135:43)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":135:9)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":135:27)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":135:33)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":135:34)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":135:40)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":135:39)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":137:12)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":137:5)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":138:22)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":138:5)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":139:18)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":139:5)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":69:1)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":69:28)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":143:1)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":162:1)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":153:13)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":153:49)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":144:1)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":145:5)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":161:5)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":145:8)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":146:5)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":147:9)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":160:9)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":153:39)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":153:43)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":155:32)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":155:13)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":156:32)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":156:13)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":157:26)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":157:36)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":157:13)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":159:13)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":159:18)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":164:1)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":175:1)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":166:5)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":166:12)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":167:5)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":167:62)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":169:5)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":169:64)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":167:36)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":167:43)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":167:61)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":168:5)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":168:42)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":168:9)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":168:26)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":168:32)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":168:33)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":168:39)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":168:38)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":169:44)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":169:63)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":169:37)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":170:5)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":170:43)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":170:9)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":170:27)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":170:33)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":170:34)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":170:40)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":170:39)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":172:12)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":172:5)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":173:21)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":173:5)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":174:17)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":174:5)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":177:1)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":182:1)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":179:5)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":180:5)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":181:5)
#loc267 = loc("/usr/include/stdlib.h":575:1)
#loc268 = loc("/usr/include/stdlib.h":575:41)
#loc269 = loc("/usr/include/time.h":76:1)
#loc270 = loc("/usr/include/time.h":76:38)
#loc271 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc272 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":202:15)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":204:15)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":207:15)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":209:15)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":197:1)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":212:1)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":198:1)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":200:27)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":200:22)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":200:5)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":202:5)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":203:5)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":204:5)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":207:5)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":208:5)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":209:5)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":211:12)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_21.cpp":211:5)
#loc295 = loc(fused[#loc1, #loc2])
#loc296 = loc(fused[#loc3, #loc4])
#loc297 = loc(fused[#loc5, #loc6])
#loc298 = loc(fused[#loc8, #loc9])
#loc299 = loc(fused[#loc10, #loc11])
#loc300 = loc(fused[#loc12, #loc13])
#loc302 = loc(fused[#loc16, #loc17])
#loc303 = loc(fused[#loc19, #loc20])
#loc304 = loc(fused[#loc22, #loc20])
#loc305 = loc(fused[#loc23, #loc24])
#loc306 = loc(fused[#loc25, #loc17])
#loc307 = loc(fused[#loc28, #loc27])
#loc308 = loc(fused[#loc31, #loc30])
#loc309 = loc(fused[#loc38, #loc39])
#loc310 = loc(fused[#loc40, #loc41])
#loc311 = loc(fused[#loc42, #loc43])
#loc312 = loc(fused[#loc44, #loc45])
#loc313 = loc(fused[#loc47, #loc48])
#loc314 = loc(fused[#loc46, #loc43])
#loc315 = loc(fused[#loc49, #loc50])
#loc316 = loc(fused[#loc51, #loc52])
#loc317 = loc(fused[#loc53, #loc50])
#loc318 = loc(fused[#loc57, #loc58])
#loc319 = loc(fused[#loc59, #loc45])
#loc320 = loc(fused[#loc60, #loc61])
#loc321 = loc(fused[#loc62, #loc63])
#loc322 = loc(fused[#loc64, #loc61])
#loc323 = loc(fused[#loc69, #loc68])
#loc324 = loc(fused[#loc71, #loc70])
#loc325 = loc(fused[#loc74, #loc75])
#loc326 = loc(fused[#loc78, #loc79])
#loc328 = loc(fused[#loc82, #loc83])
#loc329 = loc(fused[#loc85, #loc86])
#loc330 = loc(fused[#loc88, #loc89, #loc90, #loc86])
#loc331 = loc(fused[#loc92, #loc93])
#loc332 = loc(fused[#loc94, #loc83])
#loc333 = loc(fused[#loc97, #loc96])
#loc334 = loc(fused[#loc104, #loc105])
#loc335 = loc(fused[#loc106, #loc107])
#loc336 = loc(fused[#loc108, #loc109])
#loc337 = loc(fused[#loc110, #loc111])
#loc338 = loc(fused[#loc113, #loc114])
#loc339 = loc(fused[#loc112, #loc109])
#loc340 = loc(fused[#loc115, #loc116])
#loc341 = loc(fused[#loc117, #loc118])
#loc342 = loc(fused[#loc119, #loc116])
#loc343 = loc(fused[#loc123, #loc124])
#loc344 = loc(fused[#loc125, #loc111])
#loc345 = loc(fused[#loc126, #loc127])
#loc346 = loc(fused[#loc128, #loc129])
#loc347 = loc(fused[#loc130, #loc127])
#loc348 = loc(fused[#loc135, #loc134])
#loc349 = loc(fused[#loc137, #loc136])
#loc350 = loc(fused[#loc140, #loc141])
#loc351 = loc(fused[#loc142, #loc143])
#loc353 = loc(fused[#loc146, #loc147])
#loc354 = loc(fused[#loc149, #loc150])
#loc355 = loc(fused[#loc152, #loc150])
#loc356 = loc(fused[#loc153, #loc154])
#loc357 = loc(fused[#loc155, #loc147])
#loc358 = loc(fused[#loc158, #loc157])
#loc359 = loc(fused[#loc164, #loc165])
#loc360 = loc(fused[#loc166, #loc167])
#loc361 = loc(fused[#loc168, #loc169])
#loc362 = loc(fused[#loc170, #loc171])
#loc363 = loc(fused[#loc173, #loc174])
#loc364 = loc(fused[#loc172, #loc169])
#loc365 = loc(fused[#loc175, #loc176])
#loc366 = loc(fused[#loc177, #loc178])
#loc367 = loc(fused[#loc179, #loc176])
#loc368 = loc(fused[#loc183, #loc184])
#loc369 = loc(fused[#loc185, #loc171])
#loc370 = loc(fused[#loc186, #loc187])
#loc371 = loc(fused[#loc188, #loc189])
#loc372 = loc(fused[#loc190, #loc187])
#loc373 = loc(fused[#loc195, #loc194])
#loc374 = loc(fused[#loc197, #loc196])
#loc375 = loc(fused[#loc200, #loc201])
#loc376 = loc(fused[#loc202, #loc203])
#loc378 = loc(fused[#loc206, #loc207])
#loc379 = loc(fused[#loc209, #loc210])
#loc380 = loc(fused[#loc212, #loc210])
#loc381 = loc(fused[#loc213, #loc214])
#loc382 = loc(fused[#loc215, #loc207])
#loc383 = loc(fused[#loc218, #loc217])
#loc384 = loc(fused[#loc220, #loc219])
#loc385 = loc(fused[#loc226, #loc227])
#loc386 = loc(fused[#loc228, #loc229])
#loc387 = loc(fused[#loc230, #loc231])
#loc388 = loc(fused[#loc232, #loc233])
#loc389 = loc(fused[#loc235, #loc236])
#loc390 = loc(fused[#loc234, #loc231])
#loc391 = loc(fused[#loc237, #loc238])
#loc392 = loc(fused[#loc239, #loc240])
#loc393 = loc(fused[#loc241, #loc238])
#loc394 = loc(fused[#loc245, #loc246])
#loc395 = loc(fused[#loc247, #loc233])
#loc396 = loc(fused[#loc248, #loc249])
#loc397 = loc(fused[#loc250, #loc251])
#loc398 = loc(fused[#loc252, #loc249])
#loc399 = loc(fused[#loc257, #loc256])
#loc400 = loc(fused[#loc259, #loc258])
#loc401 = loc(fused[#loc262, #loc263])
#loc402 = loc(fused[#loc267, #loc268])
#loc403 = loc(fused[#loc269, #loc270])
#loc404 = loc(fused[#loc271, #loc272])
#loc405 = loc(fused[#loc277, #loc278])
#loc408 = loc(fused[#loc294, #loc293])
