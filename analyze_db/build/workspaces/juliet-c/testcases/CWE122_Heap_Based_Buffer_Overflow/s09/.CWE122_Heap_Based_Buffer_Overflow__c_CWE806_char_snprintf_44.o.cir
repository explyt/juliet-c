!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":29:21)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":29:28)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":59:25)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":59:32)
#loc126 = loc(fused[#loc12, #loc13])
#loc146 = loc(fused[#loc71, #loc72])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc121)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc122)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc123)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc124)
  cir.func internal private @badSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc12, #loc13])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc126)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc14)
    cir.scope {
      %1 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc128)
      %2 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc128)
      cir.store %2, %1 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc128)
      %3 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc19)
      %4 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc20)
      %5 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc21)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc22)
      %7 = cir.call @strlen(%6) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc21)
      %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
      %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
      %11 = cir.call @snprintf(%4, %7, %9, %10) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc19)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc24)
      cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc25)
      %13 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc26)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc27)
      cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc26)
    } loc(#loc127)
    cir.return loc(#loc11)
  } loc(#loc125)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc129)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc130)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc132)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc133)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>> loc(#loc37)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>> loc(#loc133)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc38)
    %4 = cir.const #cir.int<100> : !s32i loc(#loc39)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc39)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc134)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc135)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc38)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc136)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc137)
    cir.scope {
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc46)
      %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc47)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc47)
      %29 = cir.cmp(eq, %26, %28) : !cir.ptr<!s8i>, !cir.bool loc(#loc139)
      cir.if %29 {
        %30 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc49)
        %31 = cir.const #cir.int<1> : !s32i loc(#loc50)
        %32 = cir.unary(minus, %31) nsw : !s32i, !s32i loc(#loc51)
        cir.call @exit(%32) : (!s32i) -> () extra(#fn_attr) loc(#loc49)
      } loc(#loc140)
    } loc(#loc138)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc52)
    %12 = cir.const #cir.int<65> : !s32i loc(#loc53)
    %13 = cir.const #cir.int<100> : !s32i loc(#loc54)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc54)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc54)
    cir.libc.memset %16 bytes from %11 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc141)
    %17 = cir.const #cir.int<0> : !s32i loc(#loc58)
    %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc58)
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
    %20 = cir.const #cir.int<100> : !s32i loc(#loc60)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc61)
    %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc60)
    %23 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc62)
    cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc142)
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>> loc(#loc63)
    %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
    cir.call %24(%25) : (!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc63)
    cir.return loc(#loc33)
  } loc(#loc131)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc144)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc67)
    cir.return loc(#loc66)
  } loc(#loc143)
  cir.func internal private @goodG2BSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc71, #loc72])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc146)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc73)
    cir.scope {
      %1 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc148)
      %2 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc148)
      cir.store %2, %1 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc148)
      %3 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc78)
      %4 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc79)
      %5 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc80)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc81)
      %7 = cir.call @strlen(%6) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc80)
      %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc82)
      %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc82)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc83)
      %11 = cir.call @snprintf(%4, %7, %9, %10) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc78)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc84)
      cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc85)
      %13 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc86)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc87)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc87)
      cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc86)
    } loc(#loc147)
    cir.return loc(#loc70)
  } loc(#loc145)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc150)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc151)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>> loc(#loc93)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>> loc(#loc151)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc94)
    %4 = cir.const #cir.int<100> : !s32i loc(#loc95)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc95)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc152)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc153)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc94)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc154)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc155)
    cir.scope {
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc102)
      %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc103)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc103)
      %29 = cir.cmp(eq, %26, %28) : !cir.ptr<!s8i>, !cir.bool loc(#loc157)
      cir.if %29 {
        %30 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc105)
        %31 = cir.const #cir.int<1> : !s32i loc(#loc106)
        %32 = cir.unary(minus, %31) nsw : !s32i, !s32i loc(#loc107)
        cir.call @exit(%32) : (!s32i) -> () extra(#fn_attr) loc(#loc105)
      } loc(#loc158)
    } loc(#loc156)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc108)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc108)
    %12 = cir.const #cir.int<65> : !s32i loc(#loc109)
    %13 = cir.const #cir.int<50> : !s32i loc(#loc110)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc111)
    %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc110)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc110)
    cir.libc.memset %16 bytes from %11 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc159)
    %17 = cir.const #cir.int<0> : !s32i loc(#loc114)
    %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc114)
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc115)
    %20 = cir.const #cir.int<50> : !s32i loc(#loc116)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc117)
    %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc116)
    %23 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc118)
    cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc160)
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>> loc(#loc119)
    %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc120)
    cir.call %24(%25) : (!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc119)
    cir.return loc(#loc89)
  } loc(#loc149)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":0:0)
#loc1 = loc("/usr/include/stdio.h":385:1)
#loc2 = loc("/usr/include/stdio.h":387:62)
#loc3 = loc("/usr/include/string.h":407:1)
#loc4 = loc("/usr/include/string.h":408:33)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":34:38)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("/usr/include/stdlib.h":687:1)
#loc9 = loc("/usr/include/stdlib.h":687:32)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":29:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":38:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":30:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":31:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":37:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":32:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":32:25)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":34:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":34:18)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":34:24)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":34:31)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":34:44)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":35:19)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":35:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":36:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":36:14)
#loc28 = loc("/usr/include/stdlib.h":672:1)
#loc29 = loc("/usr/include/stdlib.h":672:45)
#loc30 = loc("/usr/include/stdlib.h":756:1)
#loc31 = loc("/usr/include/stdlib.h":756:70)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":40:1)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":52:1)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":42:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":42:12)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":44:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":44:32)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":45:20)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":45:27)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":45:31)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":45:42)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":45:43)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":45:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":46:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":46:33)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":46:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":46:17)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":46:23)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":46:24)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":46:30)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":46:29)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":48:12)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":48:18)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":48:23)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":48:27)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":48:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":48:28)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":49:19)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":49:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":49:10)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":49:14)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":49:15)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":51:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":51:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":82:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":85:1)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":84:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":84:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":59:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":68:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":60:1)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":61:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":67:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":62:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":62:25)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":64:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":64:18)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":64:24)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":64:31)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":64:38)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":64:44)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":65:19)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":65:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":66:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":66:14)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":70:1)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":80:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":72:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":72:12)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":73:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":73:32)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":74:20)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":74:27)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":74:31)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":74:42)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":74:43)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":74:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":75:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":75:33)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":75:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":75:17)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":75:23)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":75:24)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":75:30)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":75:29)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":77:12)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":77:18)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":77:23)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":77:26)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":77:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":77:27)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":78:18)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":78:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":78:10)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":78:13)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":78:14)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":79:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c":79:13)
#loc121 = loc(fused[#loc1, #loc2])
#loc122 = loc(fused[#loc3, #loc4])
#loc123 = loc(fused[#loc6, #loc7])
#loc124 = loc(fused[#loc8, #loc9])
#loc125 = loc(fused[#loc10, #loc11])
#loc127 = loc(fused[#loc15, #loc16])
#loc128 = loc(fused[#loc17, #loc18])
#loc129 = loc(fused[#loc28, #loc29])
#loc130 = loc(fused[#loc30, #loc31])
#loc131 = loc(fused[#loc32, #loc33])
#loc132 = loc(fused[#loc34, #loc35])
#loc133 = loc(fused[#loc36, #loc37])
#loc134 = loc(fused[#loc40, #loc41])
#loc135 = loc(fused[#loc39, #loc41])
#loc136 = loc(fused[#loc38, #loc42])
#loc137 = loc(fused[#loc43, #loc42])
#loc138 = loc(fused[#loc44, #loc45])
#loc139 = loc(fused[#loc46, #loc47])
#loc140 = loc(fused[#loc48, #loc45])
#loc141 = loc(fused[#loc56, #loc57])
#loc142 = loc(fused[#loc59, #loc58])
#loc143 = loc(fused[#loc65, #loc66])
#loc144 = loc(fused[#loc67, #loc68])
#loc145 = loc(fused[#loc69, #loc70])
#loc147 = loc(fused[#loc74, #loc75])
#loc148 = loc(fused[#loc76, #loc77])
#loc149 = loc(fused[#loc88, #loc89])
#loc150 = loc(fused[#loc90, #loc91])
#loc151 = loc(fused[#loc92, #loc93])
#loc152 = loc(fused[#loc96, #loc97])
#loc153 = loc(fused[#loc95, #loc97])
#loc154 = loc(fused[#loc94, #loc98])
#loc155 = loc(fused[#loc99, #loc98])
#loc156 = loc(fused[#loc100, #loc101])
#loc157 = loc(fused[#loc102, #loc103])
#loc158 = loc(fused[#loc104, #loc101])
#loc159 = loc(fused[#loc112, #loc113])
#loc160 = loc(fused[#loc115, #loc114])
