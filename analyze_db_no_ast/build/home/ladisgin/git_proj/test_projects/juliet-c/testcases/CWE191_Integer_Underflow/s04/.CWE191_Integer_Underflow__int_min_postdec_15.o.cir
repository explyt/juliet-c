!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__int_min_postdec_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc183)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc3)
  cir.func private  @printIntLine(!s32i) loc(#loc184)
  cir.func no_proto  @CWE191_Integer_Underflow__int_min_postdec_15_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc186)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc10)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc14)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc15)
        %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc15)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc15)
        %6 = cir.binop(sub, %4, %5) nsw : !s32i loc(#loc15)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc189)
        cir.break loc(#loc17)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc3)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc3)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc18)
        cir.break loc(#loc19)
      }
      ] loc(#loc12)
    } loc(#loc188)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc22)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc192)
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
          %5 = cir.unary(dec, %4) : !s32i, !s32i loc(#loc28)
          cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc193)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
          cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc192)
          %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc29)
          cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc30)
        } loc(#loc191)
        cir.break loc(#loc31)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc32)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc32)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc33)
        cir.break loc(#loc34)
      }
      ] loc(#loc20)
    } loc(#loc190)
    cir.return loc(#loc7)
  } loc(#loc185)
  cir.func no_proto  @CWE191_Integer_Underflow__int_min_postdec_15_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc195)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc196)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc197)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc198)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    cir.return loc(#loc36)
  } loc(#loc194)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc45)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc200)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc50)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc54)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc55)
        %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc55)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc55)
        %6 = cir.binop(sub, %4, %5) nsw : !s32i loc(#loc55)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc203)
        cir.break loc(#loc57)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc58)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc58)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc59)
        cir.break loc(#loc60)
      }
      ] loc(#loc52)
    } loc(#loc202)
    cir.scope {
      %2 = cir.const #cir.int<8> : !s32i loc(#loc63)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc64)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc64)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc65)
        cir.break loc(#loc66)
      },
      case (default) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
          %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc70)
          %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc70)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc70)
          %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc70)
          %8 = cir.cmp(gt, %3, %7) : !s32i, !s32i loc(#loc206)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc71)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc208)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc77)
            %12 = cir.unary(dec, %11) : !s32i, !s32i loc(#loc78)
            cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc209)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc76)
            cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc208)
            %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc79)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc80)
          } else {
            %10 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc45)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc45)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc81)
          } loc(#loc207)
        } loc(#loc205)
        cir.break loc(#loc82)
      }
      ] loc(#loc61)
    } loc(#loc204)
    cir.return loc(#loc47)
  } loc(#loc199)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc211)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc87)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc91)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc92)
        %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc92)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc92)
        %6 = cir.binop(sub, %4, %5) nsw : !s32i loc(#loc92)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc214)
        cir.break loc(#loc94)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc95)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc95)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc96)
        cir.break loc(#loc97)
      }
      ] loc(#loc89)
    } loc(#loc213)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc100)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
          %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc104)
          %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc104)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc104)
          %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc104)
          %8 = cir.cmp(gt, %3, %7) : !s32i, !s32i loc(#loc217)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc105)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc219)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc111)
            %12 = cir.unary(dec, %11) : !s32i, !s32i loc(#loc112)
            cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc220)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
            cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc219)
            %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc113)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc114)
          } else {
            %10 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc115)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc115)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc116)
          } loc(#loc218)
        } loc(#loc216)
        cir.break loc(#loc117)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc118)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc118)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc119)
        cir.break loc(#loc120)
      }
      ] loc(#loc98)
    } loc(#loc215)
    cir.return loc(#loc84)
  } loc(#loc210)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc222)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc125)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc223)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc129)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc130)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc130)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc131)
        cir.break loc(#loc132)
      },
      case (default) {
        %3 = cir.const #cir.int<2> : !s32i loc(#loc133)
        %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc134)
        cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc225)
        cir.break loc(#loc136)
      }
      ] loc(#loc127)
    } loc(#loc224)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc139)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc228)
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc144)
          %5 = cir.unary(dec, %4) : !s32i, !s32i loc(#loc145)
          cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc229)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc143)
          cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc228)
          %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc146)
          cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc147)
        } loc(#loc227)
        cir.break loc(#loc148)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc149)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc149)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc150)
        cir.break loc(#loc151)
      }
      ] loc(#loc137)
    } loc(#loc226)
    cir.return loc(#loc122)
  } loc(#loc221)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc231)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc156)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc232)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc160)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.const #cir.int<2> : !s32i loc(#loc161)
        %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc162)
        cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc234)
        cir.break loc(#loc164)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc165)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc165)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc166)
        cir.break loc(#loc167)
      }
      ] loc(#loc158)
    } loc(#loc233)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc170)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc237)
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc175)
          %5 = cir.unary(dec, %4) : !s32i, !s32i loc(#loc176)
          cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc238)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc174)
          cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc237)
          %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc177)
          cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc178)
        } loc(#loc236)
        cir.break loc(#loc179)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc180)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc180)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc181)
        cir.break loc(#loc182)
      }
      ] loc(#loc168)
    } loc(#loc235)
    cir.return loc(#loc153)
  } loc(#loc230)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__int_min_postdec_15.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":35:19)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc6 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":22:1)
#loc7 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":53:1)
#loc8 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":24:5)
#loc9 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":24:9)
#loc10 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":26:12)
#loc11 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":26:5)
#loc12 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":27:5)
#loc13 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":37:5)
#loc14 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":27:12)
#loc15 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":31:16)
#loc16 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":31:9)
#loc17 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":32:9)
#loc18 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":35:9)
#loc19 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":36:9)
#loc20 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":38:5)
#loc21 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":52:5)
#loc22 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":38:12)
#loc23 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":41:5)
#loc24 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":46:5)
#loc25 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":44:9)
#loc26 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":44:22)
#loc27 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":43:13)
#loc28 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":43:9)
#loc29 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":45:22)
#loc30 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":45:9)
#loc31 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":47:5)
#loc32 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":50:19)
#loc33 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":50:9)
#loc34 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":51:9)
#loc35 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":205:1)
#loc36 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":211:1)
#loc37 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":207:5)
#loc38 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":207:14)
#loc39 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":208:5)
#loc40 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":208:14)
#loc41 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":209:5)
#loc42 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":209:14)
#loc43 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":210:5)
#loc44 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":210:14)
#loc45 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":92:23)
#loc46 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":60:1)
#loc47 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":96:1)
#loc48 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":62:5)
#loc49 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":62:9)
#loc50 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":64:12)
#loc51 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":64:5)
#loc52 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":65:5)
#loc53 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":75:5)
#loc54 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":65:12)
#loc55 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":69:16)
#loc56 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":69:9)
#loc57 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":70:9)
#loc58 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":73:19)
#loc59 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":73:9)
#loc60 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":74:9)
#loc61 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":76:5)
#loc62 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":95:5)
#loc63 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":76:12)
#loc64 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":80:19)
#loc65 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":80:9)
#loc66 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":81:9)
#loc67 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":84:9)
#loc68 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":93:9)
#loc69 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":84:13)
#loc70 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":84:20)
#loc71 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":84:18)
#loc72 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":85:9)
#loc73 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":89:9)
#loc74 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":91:9)
#loc75 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":87:13)
#loc76 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":87:26)
#loc77 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":86:17)
#loc78 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":86:13)
#loc79 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":88:26)
#loc80 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":88:13)
#loc81 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":92:13)
#loc82 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":94:9)
#loc83 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":99:1)
#loc84 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":135:1)
#loc85 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":101:5)
#loc86 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":101:9)
#loc87 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":103:12)
#loc88 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":103:5)
#loc89 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":104:5)
#loc90 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":114:5)
#loc91 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":104:12)
#loc92 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":108:16)
#loc93 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":108:9)
#loc94 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":109:9)
#loc95 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":112:19)
#loc96 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":112:9)
#loc97 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":113:9)
#loc98 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":115:5)
#loc99 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":134:5)
#loc100 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":115:12)
#loc101 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":119:9)
#loc102 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":128:9)
#loc103 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":119:13)
#loc104 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":119:20)
#loc105 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":119:18)
#loc106 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":120:9)
#loc107 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":124:9)
#loc108 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":126:9)
#loc109 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":122:13)
#loc110 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":122:26)
#loc111 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":121:17)
#loc112 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":121:13)
#loc113 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":123:26)
#loc114 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":123:13)
#loc115 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":127:23)
#loc116 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":127:13)
#loc117 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":129:9)
#loc118 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":132:19)
#loc119 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":132:9)
#loc120 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":133:9)
#loc121 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":138:1)
#loc122 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":169:1)
#loc123 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":140:5)
#loc124 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":140:9)
#loc125 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":142:12)
#loc126 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":142:5)
#loc127 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":143:5)
#loc128 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":153:5)
#loc129 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":143:12)
#loc130 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":147:19)
#loc131 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":147:9)
#loc132 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":148:9)
#loc133 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":151:17)
#loc134 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":151:16)
#loc135 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":151:9)
#loc136 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":152:9)
#loc137 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":154:5)
#loc138 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":168:5)
#loc139 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":154:12)
#loc140 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":157:5)
#loc141 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":162:5)
#loc142 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":160:9)
#loc143 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":160:22)
#loc144 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":159:13)
#loc145 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":159:9)
#loc146 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":161:22)
#loc147 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":161:9)
#loc148 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":163:5)
#loc149 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":166:19)
#loc150 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":166:9)
#loc151 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":167:9)
#loc152 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":172:1)
#loc153 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":203:1)
#loc154 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":174:5)
#loc155 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":174:9)
#loc156 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":176:12)
#loc157 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":176:5)
#loc158 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":177:5)
#loc159 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":187:5)
#loc160 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":177:12)
#loc161 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":181:17)
#loc162 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":181:16)
#loc163 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":181:9)
#loc164 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":182:9)
#loc165 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":185:19)
#loc166 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":185:9)
#loc167 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":186:9)
#loc168 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":188:5)
#loc169 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":202:5)
#loc170 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":188:12)
#loc171 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":191:5)
#loc172 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":196:5)
#loc173 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":194:9)
#loc174 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":194:22)
#loc175 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":193:13)
#loc176 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":193:9)
#loc177 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":195:22)
#loc178 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":195:9)
#loc179 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":197:5)
#loc180 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":200:19)
#loc181 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":200:9)
#loc182 = loc("CWE191_Integer_Underflow__int_min_postdec_15.c":201:9)
#loc183 = loc(fused[#loc1, #loc2])
#loc184 = loc(fused[#loc4, #loc5])
#loc185 = loc(fused[#loc6, #loc7])
#loc186 = loc(fused[#loc8, #loc9])
#loc187 = loc(fused[#loc11, #loc10])
#loc188 = loc(fused[#loc12, #loc13])
#loc189 = loc(fused[#loc16, #loc15])
#loc190 = loc(fused[#loc20, #loc21])
#loc191 = loc(fused[#loc23, #loc24])
#loc192 = loc(fused[#loc25, #loc26])
#loc193 = loc(fused[#loc28, #loc27])
#loc194 = loc(fused[#loc35, #loc36])
#loc195 = loc(fused[#loc37, #loc38])
#loc196 = loc(fused[#loc39, #loc40])
#loc197 = loc(fused[#loc41, #loc42])
#loc198 = loc(fused[#loc43, #loc44])
#loc199 = loc(fused[#loc46, #loc47])
#loc200 = loc(fused[#loc48, #loc49])
#loc201 = loc(fused[#loc51, #loc50])
#loc202 = loc(fused[#loc52, #loc53])
#loc203 = loc(fused[#loc56, #loc55])
#loc204 = loc(fused[#loc61, #loc62])
#loc205 = loc(fused[#loc67, #loc68])
#loc206 = loc(fused[#loc69, #loc70])
#loc207 = loc(fused[#loc72, #loc73, #loc74, #loc68])
#loc208 = loc(fused[#loc75, #loc76])
#loc209 = loc(fused[#loc78, #loc77])
#loc210 = loc(fused[#loc83, #loc84])
#loc211 = loc(fused[#loc85, #loc86])
#loc212 = loc(fused[#loc88, #loc87])
#loc213 = loc(fused[#loc89, #loc90])
#loc214 = loc(fused[#loc93, #loc92])
#loc215 = loc(fused[#loc98, #loc99])
#loc216 = loc(fused[#loc101, #loc102])
#loc217 = loc(fused[#loc103, #loc104])
#loc218 = loc(fused[#loc106, #loc107, #loc108, #loc102])
#loc219 = loc(fused[#loc109, #loc110])
#loc220 = loc(fused[#loc112, #loc111])
#loc221 = loc(fused[#loc121, #loc122])
#loc222 = loc(fused[#loc123, #loc124])
#loc223 = loc(fused[#loc126, #loc125])
#loc224 = loc(fused[#loc127, #loc128])
#loc225 = loc(fused[#loc135, #loc133])
#loc226 = loc(fused[#loc137, #loc138])
#loc227 = loc(fused[#loc140, #loc141])
#loc228 = loc(fused[#loc142, #loc143])
#loc229 = loc(fused[#loc145, #loc144])
#loc230 = loc(fused[#loc152, #loc153])
#loc231 = loc(fused[#loc154, #loc155])
#loc232 = loc(fused[#loc157, #loc156])
#loc233 = loc(fused[#loc158, #loc159])
#loc234 = loc(fused[#loc163, #loc161])
#loc235 = loc(fused[#loc168, #loc169])
#loc236 = loc(fused[#loc171, #loc172])
#loc237 = loc(fused[#loc173, #loc174])
#loc238 = loc(fused[#loc176, #loc175])
