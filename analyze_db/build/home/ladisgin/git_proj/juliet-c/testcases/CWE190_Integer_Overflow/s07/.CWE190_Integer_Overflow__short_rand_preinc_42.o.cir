!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":22:24)
#loc6 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":22:30)
#loc8 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":25:19)
#loc40 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":68:28)
#loc41 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":68:34)
#loc43 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":71:19)
#loc76 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":47:28)
#loc77 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":47:34)
#loc103 = loc(fused[#loc5, #loc6])
#loc118 = loc(fused[#loc40, #loc41])
#loc132 = loc(fused[#loc76, #loc77])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__short_rand_preinc_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc101)
  cir.func internal private @badSource(%arg0: !s16i loc(fused[#loc5, #loc6])) -> !s16i extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc103)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["__retval"] {alignment = 2 : i64} loc(#loc4)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc7)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc8)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc8)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc8)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc8)
    %8 = cir.const #cir.int<30> : !s32i loc(#loc8)
    %9 = cir.shift(left, %7 : !u32i, %8 : !s32i) -> !u32i loc(#loc8)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc8)
    %12 = cir.const #cir.int<15> : !s32i loc(#loc8)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc8)
    %14 = cir.binop(xor, %9, %13) : !u32i loc(#loc8)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc8)
    %17 = cir.binop(xor, %14, %16) : !u32i loc(#loc8)
    cir.br ^bb3(%17 : !u32i) loc(#loc8)
  ^bb2:  // pred: ^bb0
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc8)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc8)
    %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc8)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc8)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc8)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc8)
    %26 = cir.binop(xor, %21, %25) : !u32i loc(#loc8)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc8)
    %29 = cir.binop(xor, %26, %28) : !u32i loc(#loc8)
    %30 = cir.unary(minus, %29) : !u32i, !u32i loc(#loc8)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc8)
    %33 = cir.binop(sub, %30, %32) : !u32i loc(#loc8)
    cir.br ^bb3(%33 : !u32i) loc(#loc8)
  ^bb3(%34: !u32i loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":25:19)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc8)
  ^bb4:  // pred: ^bb3
    %35 = cir.cast(integral, %34 : !u32i), !s32i loc(#loc8)
    %36 = cir.cast(integral, %35 : !s32i), !s16i loc(#loc8)
    cir.store %36, %0 : !s16i, !cir.ptr<!s16i> loc(#loc104)
    %37 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc10)
    cir.store %37, %1 : !s16i, !cir.ptr<!s16i> loc(#loc105)
    %38 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc105)
    cir.return %38 : !s16i loc(#loc105)
  } loc(#loc102)
  cir.func private @printIntLine(!s32i) loc(#loc106)
  cir.func no_proto @CWE190_Integer_Overflow__short_rand_preinc_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc108)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc109)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc20)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc20)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc110)
    %4 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc22)
    %5 = cir.call @badSource(%4) : (!s16i) -> !s16i loc(#loc23)
    cir.store %5, %1 : !s16i, !cir.ptr<!s16i> loc(#loc111)
    cir.br ^bb1 loc(#loc112)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc28)
    %7 = cir.unary(inc, %6) : !s16i, !s16i loc(#loc28)
    cir.store %7, %1 : !s16i, !cir.ptr<!s16i> loc(#loc113)
    %8 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc17)
    cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc108)
    %9 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc30)
    %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc30)
    cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc31)
    cir.br ^bb2 loc(#loc27)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc15)
  } loc(#loc107)
  cir.func no_proto @CWE190_Integer_Overflow__short_rand_preinc_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc115)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc116)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc33)
  } loc(#loc114)
  cir.func internal private @goodB2GSource(%arg0: !s16i loc(fused[#loc40, #loc41])) -> !s16i extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc118)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["__retval"] {alignment = 2 : i64} loc(#loc39)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc42)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc43)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc43)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc43)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc43)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc43)
    %8 = cir.const #cir.int<30> : !s32i loc(#loc43)
    %9 = cir.shift(left, %7 : !u32i, %8 : !s32i) -> !u32i loc(#loc43)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc43)
    %12 = cir.const #cir.int<15> : !s32i loc(#loc43)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc43)
    %14 = cir.binop(xor, %9, %13) : !u32i loc(#loc43)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc43)
    %17 = cir.binop(xor, %14, %16) : !u32i loc(#loc43)
    cir.br ^bb3(%17 : !u32i) loc(#loc43)
  ^bb2:  // pred: ^bb0
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc43)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc43)
    %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc43)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc43)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc43)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc43)
    %26 = cir.binop(xor, %21, %25) : !u32i loc(#loc43)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc43)
    %29 = cir.binop(xor, %26, %28) : !u32i loc(#loc43)
    %30 = cir.unary(minus, %29) : !u32i, !u32i loc(#loc43)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc43)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc43)
    %33 = cir.binop(sub, %30, %32) : !u32i loc(#loc43)
    cir.br ^bb3(%33 : !u32i) loc(#loc43)
  ^bb3(%34: !u32i loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":71:19)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc43)
  ^bb4:  // pred: ^bb3
    %35 = cir.cast(integral, %34 : !u32i), !s32i loc(#loc43)
    %36 = cir.cast(integral, %35 : !s32i), !s16i loc(#loc43)
    cir.store %36, %0 : !s16i, !cir.ptr<!s16i> loc(#loc119)
    %37 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc45)
    cir.store %37, %1 : !s16i, !cir.ptr<!s16i> loc(#loc120)
    %38 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc120)
    cir.return %38 : !s16i loc(#loc120)
  } loc(#loc117)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc121)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc49)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc123)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc124)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc56)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc56)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc125)
    %4 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc58)
    %5 = cir.call @goodB2GSource(%4) : (!s16i) -> !s16i loc(#loc59)
    cir.store %5, %1 : !s16i, !cir.ptr<!s16i> loc(#loc126)
    cir.br ^bb1 loc(#loc127)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc64)
    %7 = cir.cast(integral, %6 : !s16i), !s32i loc(#loc64)
    %8 = cir.const #cir.int<32767> : !s32i loc(#loc65)
    %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc128)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc129)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc69)
    %11 = cir.unary(inc, %10) : !s16i, !s16i loc(#loc69)
    cir.store %11, %1 : !s16i, !cir.ptr<!s16i> loc(#loc130)
    %12 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc53)
    cir.store %12, %0 : !s16i, !cir.ptr<!s16i> loc(#loc123)
    %13 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc71)
    %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc71)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc72)
    cir.br ^bb4 loc(#loc67)
  ^bb3:  // pred: ^bb1
    %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc49)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    cir.br ^bb4 loc(#loc63)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc63)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc51)
  } loc(#loc122)
  cir.func internal private @goodG2BSource(%arg0: !s16i loc(fused[#loc76, #loc77])) -> !s16i extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc132)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["__retval"] {alignment = 2 : i64} loc(#loc75)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc78)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc79)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc79)
    cir.store %3, %0 : !s16i, !cir.ptr<!s16i> loc(#loc133)
    %4 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc81)
    cir.store %4, %1 : !s16i, !cir.ptr<!s16i> loc(#loc134)
    %5 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc134)
    cir.return %5 : !s16i loc(#loc134)
  } loc(#loc131)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc136)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc137)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc89)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc89)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc138)
    %4 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc91)
    %5 = cir.call @goodG2BSource(%4) : (!s16i) -> !s16i loc(#loc92)
    cir.store %5, %1 : !s16i, !cir.ptr<!s16i> loc(#loc139)
    cir.br ^bb1 loc(#loc140)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc97)
    %7 = cir.unary(inc, %6) : !s16i, !s16i loc(#loc97)
    cir.store %7, %1 : !s16i, !cir.ptr<!s16i> loc(#loc141)
    %8 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc86)
    cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc136)
    %9 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc99)
    %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc99)
    cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc100)
    cir.br ^bb2 loc(#loc96)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc84)
  } loc(#loc135)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__short_rand_preinc_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":27:1)
#loc7 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":23:1)
#loc9 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":25:5)
#loc10 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":26:12)
#loc11 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":26:5)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":29:1)
#loc15 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":40:1)
#loc16 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":37:9)
#loc17 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":37:24)
#loc18 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":31:5)
#loc19 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":31:11)
#loc20 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":32:12)
#loc21 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":32:5)
#loc22 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":33:22)
#loc23 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":33:12)
#loc24 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":33:5)
#loc25 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":33:26)
#loc26 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":34:5)
#loc27 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":39:5)
#loc28 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":36:9)
#loc29 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":36:11)
#loc30 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":38:22)
#loc31 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":38:9)
#loc32 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":93:1)
#loc33 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":97:1)
#loc34 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":95:5)
#loc35 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":95:13)
#loc36 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":96:5)
#loc37 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":96:13)
#loc38 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":68:1)
#loc39 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":73:1)
#loc42 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":69:1)
#loc44 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":71:5)
#loc45 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":72:12)
#loc46 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":72:5)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc49 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":89:19)
#loc50 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":75:1)
#loc51 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":91:1)
#loc52 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":84:9)
#loc53 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":84:24)
#loc54 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":77:5)
#loc55 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":77:11)
#loc56 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":78:12)
#loc57 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":78:5)
#loc58 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":79:26)
#loc59 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":79:12)
#loc60 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":79:5)
#loc61 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":79:30)
#loc62 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":81:5)
#loc63 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":90:5)
#loc64 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":81:9)
#loc65 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":81:16)
#loc66 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":82:5)
#loc67 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":86:5)
#loc68 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":88:5)
#loc69 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":83:9)
#loc70 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":83:11)
#loc71 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":85:22)
#loc72 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":85:9)
#loc73 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":89:9)
#loc74 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":47:1)
#loc75 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":52:1)
#loc78 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":48:1)
#loc79 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":50:12)
#loc80 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":50:5)
#loc81 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":51:12)
#loc82 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":51:5)
#loc83 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":54:1)
#loc84 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":65:1)
#loc85 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":62:9)
#loc86 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":62:24)
#loc87 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":56:5)
#loc88 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":56:11)
#loc89 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":57:12)
#loc90 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":57:5)
#loc91 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":58:26)
#loc92 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":58:12)
#loc93 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":58:5)
#loc94 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":58:30)
#loc95 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":59:5)
#loc96 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":64:5)
#loc97 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":61:9)
#loc98 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":61:11)
#loc99 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":63:22)
#loc100 = loc("CWE190_Integer_Overflow__short_rand_preinc_42.c":63:9)
#loc101 = loc(fused[#loc1, #loc2])
#loc102 = loc(fused[#loc3, #loc4])
#loc104 = loc(fused[#loc9, #loc8])
#loc105 = loc(fused[#loc11, #loc10])
#loc106 = loc(fused[#loc12, #loc13])
#loc107 = loc(fused[#loc14, #loc15])
#loc108 = loc(fused[#loc16, #loc17])
#loc109 = loc(fused[#loc18, #loc19])
#loc110 = loc(fused[#loc21, #loc20])
#loc111 = loc(fused[#loc24, #loc25])
#loc112 = loc(fused[#loc26, #loc27])
#loc113 = loc(fused[#loc28, #loc29])
#loc114 = loc(fused[#loc32, #loc33])
#loc115 = loc(fused[#loc34, #loc35])
#loc116 = loc(fused[#loc36, #loc37])
#loc117 = loc(fused[#loc38, #loc39])
#loc119 = loc(fused[#loc44, #loc43])
#loc120 = loc(fused[#loc46, #loc45])
#loc121 = loc(fused[#loc47, #loc48])
#loc122 = loc(fused[#loc50, #loc51])
#loc123 = loc(fused[#loc52, #loc53])
#loc124 = loc(fused[#loc54, #loc55])
#loc125 = loc(fused[#loc57, #loc56])
#loc126 = loc(fused[#loc60, #loc61])
#loc127 = loc(fused[#loc62, #loc63])
#loc128 = loc(fused[#loc64, #loc65])
#loc129 = loc(fused[#loc66, #loc67, #loc68, #loc63])
#loc130 = loc(fused[#loc69, #loc70])
#loc131 = loc(fused[#loc74, #loc75])
#loc133 = loc(fused[#loc80, #loc79])
#loc134 = loc(fused[#loc82, #loc81])
#loc135 = loc(fused[#loc83, #loc84])
#loc136 = loc(fused[#loc85, #loc86])
#loc137 = loc(fused[#loc87, #loc88])
#loc138 = loc(fused[#loc90, #loc89])
#loc139 = loc(fused[#loc93, #loc94])
#loc140 = loc(fused[#loc95, #loc96])
#loc141 = loc(fused[#loc97, #loc98])
