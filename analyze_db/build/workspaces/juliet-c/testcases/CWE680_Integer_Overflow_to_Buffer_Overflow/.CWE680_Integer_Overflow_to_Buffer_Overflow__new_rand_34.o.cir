!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":37:12)
!ty_CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_343A3AunionType = !cir.record<union "CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34::unionType" {!s32i, !s32i}>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc114)
  cir.func private @_Znam(!u64i) -> !cir.ptr<!void> loc(#loc115)
  cir.func private @printIntLine(!s32i) loc(#loc116)
  cir.func @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_343badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc118)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc119)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc120)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc121)
    %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc122)
    %5 = cir.alloca !ty_CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_343A3AunionType, !cir.ptr<!ty_CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_343A3AunionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc123)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc21)
    cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc124)
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %10 = cir.binop(and, %8, %9) : !s32i loc(#loc23)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc23)
    cir.brcond %11 ^bb1, ^bb2 loc(#loc23)
  ^bb1:  // pred: ^bb0
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc23)
    %14 = cir.const #cir.int<30> : !s32i loc(#loc23)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc23)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc23)
    %18 = cir.const #cir.int<15> : !s32i loc(#loc23)
    %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc23)
    %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc23)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc23)
    %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc23)
    cir.br ^bb3(%23 : !u32i) loc(#loc23)
  ^bb2:  // pred: ^bb0
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc23)
    %26 = cir.const #cir.int<30> : !s32i loc(#loc23)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc23)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc23)
    %30 = cir.const #cir.int<15> : !s32i loc(#loc23)
    %31 = cir.shift(left, %29 : !u32i, %30 : !s32i) -> !u32i loc(#loc23)
    %32 = cir.binop(xor, %27, %31) : !u32i loc(#loc23)
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc23)
    %35 = cir.binop(xor, %32, %34) : !u32i loc(#loc23)
    %36 = cir.unary(minus, %35) : !u32i, !u32i loc(#loc23)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc23)
    %39 = cir.binop(sub, %36, %38) : !u32i loc(#loc23)
    cir.br ^bb3(%39 : !u32i) loc(#loc23)
  ^bb3(%40: !u32i loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":37:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc23)
  ^bb4:  // pred: ^bb3
    %41 = cir.cast(integral, %40 : !u32i), !s32i loc(#loc23)
    cir.store %41, %4 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    %42 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    %43 = cir.get_member %5[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_343A3AunionType> -> !cir.ptr<!s32i> loc(#loc26)
    cir.store %42, %43 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    cir.br ^bb5 loc(#loc127)
  ^bb5:  // pred: ^bb4
    %44 = cir.get_member %5[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_343A3AunionType> -> !cir.ptr<!s32i> loc(#loc30)
    %45 = cir.load %44 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    cir.store %45, %0 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    cir.br ^bb6 loc(#loc128)
  ^bb6:  // pred: ^bb5
    %46 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
    %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc33)
    %48 = cir.const #cir.int<4> : !u64i loc(#loc129)
    %49 = cir.binop(mul, %47, %48) : !u64i loc(#loc130)
    cir.store %49, %1 : !u64i, !cir.ptr<!u64i> loc(#loc131)
    %50 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc37)
    %51 = cir.call @_Znam(%50) : (!u64i) -> !cir.ptr<!void> loc(#loc38)
    %52 = cir.cast(bitcast, %51 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc132)
    %53 = cir.cast(bitcast, %52 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc132)
    cir.store %53, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc133)
    cir.br ^bb7 loc(#loc134)
  ^bb7:  // pred: ^bb6
    %54 = cir.const #cir.int<0> : !s32i loc(#loc44)
    %55 = cir.cast(integral, %54 : !s32i), !u64i loc(#loc44)
    cir.store %55, %2 : !u64i, !cir.ptr<!u64i> loc(#loc135)
    cir.br ^bb8 loc(#loc134)
  ^bb8:  // 2 preds: ^bb7, ^bb12
    %56 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc46)
    %57 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc47)
    %58 = cir.cast(integral, %57 : !s32i), !u64i loc(#loc47)
    %59 = cir.cmp(lt, %56, %58) : !u64i, !cir.bool loc(#loc136)
    cir.brcond %59 ^bb9, ^bb13 loc(#loc136)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc137)
  ^bb10:  // pred: ^bb9
    %60 = cir.const #cir.int<0> : !s32i loc(#loc49)
    %61 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc50)
    %62 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc51)
    %63 = cir.ptr_stride(%61 : !cir.ptr<!s32i>, %62 : !u64i), !cir.ptr<!s32i> loc(#loc52)
    cir.store %60, %63 : !s32i, !cir.ptr<!s32i> loc(#loc138)
    cir.br ^bb11 loc(#loc43)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc43)
  ^bb12:  // pred: ^bb11
    %64 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc53)
    %65 = cir.unary(inc, %64) : !u64i, !u64i loc(#loc54)
    cir.store %65, %2 : !u64i, !cir.ptr<!u64i> loc(#loc139)
    cir.br ^bb8 loc(#loc134)
  ^bb13:  // pred: ^bb8
    cir.br ^bb14 loc(#loc43)
  ^bb14:  // pred: ^bb13
    %66 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc55)
    %67 = cir.const #cir.int<0> : !s32i loc(#loc56)
    %68 = cir.ptr_stride(%66 : !cir.ptr<!s32i>, %67 : !s32i), !cir.ptr<!s32i> loc(#loc57)
    %69 = cir.load %68 : !cir.ptr<!s32i>, !s32i loc(#loc55)
    cir.call @printIntLine(%69) : (!s32i) -> () loc(#loc58)
    %70 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc59)
    cir.delete.array %70 : <!s32i> loc(#loc59)
    cir.br ^bb15 loc(#loc32)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc29)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc8)
  } loc(#loc117)
  cir.func internal private @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc141)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc142)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc143)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc144)
    %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc145)
    %5 = cir.alloca !ty_CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_343A3AunionType, !cir.ptr<!ty_CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_343A3AunionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc146)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc73)
    %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc74)
    cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    %8 = cir.const #cir.int<20> : !s32i loc(#loc76)
    cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc148)
    %9 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc78)
    %10 = cir.get_member %5[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_343A3AunionType> -> !cir.ptr<!s32i> loc(#loc26)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    cir.br ^bb1 loc(#loc150)
  ^bb1:  // pred: ^bb0
    %11 = cir.get_member %5[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_343A3AunionType> -> !cir.ptr<!s32i> loc(#loc30)
    %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc63)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc141)
    cir.br ^bb2 loc(#loc151)
  ^bb2:  // pred: ^bb1
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc84)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc84)
    %15 = cir.const #cir.int<4> : !u64i loc(#loc152)
    %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc153)
    cir.store %16, %1 : !u64i, !cir.ptr<!u64i> loc(#loc154)
    %17 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc88)
    %18 = cir.call @_Znam(%17) : (!u64i) -> !cir.ptr<!void> loc(#loc89)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc155)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc155)
    cir.store %20, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc156)
    cir.br ^bb3 loc(#loc157)
  ^bb3:  // pred: ^bb2
    %21 = cir.const #cir.int<0> : !s32i loc(#loc95)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc95)
    cir.store %22, %2 : !u64i, !cir.ptr<!u64i> loc(#loc158)
    cir.br ^bb4 loc(#loc157)
  ^bb4:  // 2 preds: ^bb3, ^bb8
    %23 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc97)
    %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc98)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc98)
    %26 = cir.cmp(lt, %23, %25) : !u64i, !cir.bool loc(#loc159)
    cir.brcond %26 ^bb5, ^bb9 loc(#loc159)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc160)
  ^bb6:  // pred: ^bb5
    %27 = cir.const #cir.int<0> : !s32i loc(#loc100)
    %28 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc101)
    %29 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc102)
    %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !u64i), !cir.ptr<!s32i> loc(#loc103)
    cir.store %27, %30 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    cir.br ^bb7 loc(#loc94)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc94)
  ^bb8:  // pred: ^bb7
    %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc104)
    %32 = cir.unary(inc, %31) : !u64i, !u64i loc(#loc105)
    cir.store %32, %2 : !u64i, !cir.ptr<!u64i> loc(#loc162)
    cir.br ^bb4 loc(#loc157)
  ^bb9:  // pred: ^bb4
    cir.br ^bb10 loc(#loc94)
  ^bb10:  // pred: ^bb9
    %33 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc106)
    %34 = cir.const #cir.int<0> : !s32i loc(#loc107)
    %35 = cir.ptr_stride(%33 : !cir.ptr<!s32i>, %34 : !s32i), !cir.ptr<!s32i> loc(#loc108)
    %36 = cir.load %35 : !cir.ptr<!s32i>, !s32i loc(#loc106)
    cir.call @printIntLine(%36) : (!s32i) -> () loc(#loc109)
    %37 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc110)
    cir.delete.array %37 : <!s32i> loc(#loc110)
    cir.br ^bb11 loc(#loc83)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc81)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc61)
  } loc(#loc140)
  cir.func @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_344goodEv() extra(#fn_attr1) {
    cir.call @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34L7goodG2BEv() : () -> () loc(#loc113)
    cir.return loc(#loc112)
  } loc(#loc163)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":128:20)
#loc4 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":129:41)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":30:1)
#loc8 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":55:1)
#loc9 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":40:9)
#loc10 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":40:28)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":42:13)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":42:20)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":42:30)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":43:13)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":43:18)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":32:5)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":32:9)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":33:5)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":33:15)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":35:13)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":35:12)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":35:5)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":37:5)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":38:26)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":24:9)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":38:5)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":39:5)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":54:5)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":25:9)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":41:9)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":53:9)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":45:25)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":45:32)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":45:42)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":45:13)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":46:41)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":30:6)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":46:32)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":46:50)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":46:13)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":47:13)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":50:13)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":47:22)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":47:18)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":47:25)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":47:37)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":48:13)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":49:33)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":49:17)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":49:28)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":49:29)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":47:44)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":47:43)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":51:26)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":51:37)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":51:38)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":51:13)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":52:23)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":62:1)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":87:1)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":72:9)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":72:28)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":74:13)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":74:20)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":74:30)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":75:13)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":75:18)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":64:5)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":64:9)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":65:5)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":65:15)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":67:13)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":67:12)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":67:5)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":69:12)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":69:5)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":70:26)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":70:5)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":71:5)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":86:5)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":73:9)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":85:9)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":77:25)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":77:32)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":77:42)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":77:13)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":78:41)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":62:13)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":78:32)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":78:50)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":78:13)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":79:13)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":82:13)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":79:22)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":79:18)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":79:25)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":79:37)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":80:13)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":81:33)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":81:17)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":81:28)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":81:29)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":79:44)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":79:43)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":83:26)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":83:37)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":83:38)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":83:13)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":84:23)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":89:1)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":92:1)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":91:5)
#loc114 = loc(fused[#loc1, #loc2])
#loc115 = loc(fused[#loc3, #loc4])
#loc116 = loc(fused[#loc5, #loc6])
#loc117 = loc(fused[#loc7, #loc8])
#loc118 = loc(fused[#loc9, #loc10])
#loc119 = loc(fused[#loc11, #loc12])
#loc120 = loc(fused[#loc11, #loc13])
#loc121 = loc(fused[#loc14, #loc15])
#loc122 = loc(fused[#loc16, #loc17])
#loc123 = loc(fused[#loc18, #loc19])
#loc124 = loc(fused[#loc22, #loc20])
#loc125 = loc(fused[#loc24, #loc23])
#loc126 = loc(fused[#loc27, #loc25])
#loc127 = loc(fused[#loc28, #loc29])
#loc128 = loc(fused[#loc31, #loc32])
#loc129 = loc(fused[#loc34, #loc35])
#loc130 = loc(fused[#loc33, #loc35])
#loc131 = loc(fused[#loc36, #loc35])
#loc132 = loc(fused[#loc39, #loc40])
#loc133 = loc(fused[#loc41, #loc40])
#loc134 = loc(fused[#loc42, #loc43])
#loc135 = loc(fused[#loc45, #loc44])
#loc136 = loc(fused[#loc46, #loc47])
#loc137 = loc(fused[#loc48, #loc43])
#loc138 = loc(fused[#loc50, #loc49])
#loc139 = loc(fused[#loc54, #loc53])
#loc140 = loc(fused[#loc60, #loc61])
#loc141 = loc(fused[#loc62, #loc63])
#loc142 = loc(fused[#loc64, #loc65])
#loc143 = loc(fused[#loc64, #loc66])
#loc144 = loc(fused[#loc67, #loc68])
#loc145 = loc(fused[#loc69, #loc70])
#loc146 = loc(fused[#loc71, #loc72])
#loc147 = loc(fused[#loc75, #loc73])
#loc148 = loc(fused[#loc77, #loc76])
#loc149 = loc(fused[#loc79, #loc78])
#loc150 = loc(fused[#loc80, #loc81])
#loc151 = loc(fused[#loc82, #loc83])
#loc152 = loc(fused[#loc85, #loc86])
#loc153 = loc(fused[#loc84, #loc86])
#loc154 = loc(fused[#loc87, #loc86])
#loc155 = loc(fused[#loc90, #loc91])
#loc156 = loc(fused[#loc92, #loc91])
#loc157 = loc(fused[#loc93, #loc94])
#loc158 = loc(fused[#loc96, #loc95])
#loc159 = loc(fused[#loc97, #loc98])
#loc160 = loc(fused[#loc99, #loc94])
#loc161 = loc(fused[#loc101, #loc100])
#loc162 = loc(fused[#loc105, #loc104])
#loc163 = loc(fused[#loc111, #loc112])
