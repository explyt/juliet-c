!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc60 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":139:10)
#loc61 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":139:14)
#loc62 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":139:20)
#loc63 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":139:32)
#loc116 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":77:40)
#loc158 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":112:40)
#true = #cir.bool<true> : !cir.bool
#loc191 = loc(fused[#loc60, #loc61])
#loc192 = loc(fused[#loc62, #loc63])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant external @GLOBAL_CONST_FIVE : !s32i {alignment = 4 : i64} loc(#loc168)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc169)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc170)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc171)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc172)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private @printIntLine(!s32i) loc(#loc173)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc175)
    %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc176)
    cir.br ^bb1 loc(#loc177)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc168)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc22)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc23)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc178)
    cir.brcond %5 ^bb2, ^bb10 loc(#loc179)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc180)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.int<0> : !s32i loc(#loc19)
    %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc19)
    cir.store %7, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc176)
    cir.br ^bb4 loc(#loc181)
  ^bb4:  // pred: ^bb3
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc29)
    %9 = cir.const #cir.int<256> : !s32i loc(#loc30)
    %10 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc170)
    %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc31)
    %12 = cir.call @fgets(%8, %9, %11) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc32)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc33)
    %15 = cir.cmp(ne, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc182)
    cir.brcond %15 ^bb5, ^bb6 loc(#loc183)
  ^bb5:  // pred: ^bb4
    %16 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc37)
    %17 = cir.call @atof(%16) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc38)
    cir.store %17, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc184)
    cir.br ^bb7 loc(#loc35)
  ^bb6:  // pred: ^bb4
    %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc41)
    cir.br ^bb7 loc(#loc28)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc28)
  ^bb8:  // pred: ^bb7
    %20 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc42)
    %21 = cir.cast(float_to_int, %20 : !cir.double), !s32i loc(#loc42)
    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc43)
    cir.br ^bb9 loc(#loc26)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc21)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc21)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc15)
  } loc(#loc174)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc186)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc187)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    cir.return loc(#loc45)
  } loc(#loc185)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc188)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc189)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc57)
  cir.func @main(%arg0: !s32i loc(fused[#loc60, #loc61]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc62, #loc63])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc191)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc192)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc59)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc64)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc64)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc65)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc66)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc66)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc67)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc54)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %8 = cir.get_global @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13_good : !cir.ptr<!cir.func<!void ()>> loc(#loc193)
    cir.call @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13_good() : () -> () loc(#loc69)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc55)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc56)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %13 = cir.get_global @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc194)
    cir.call @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13_bad() : () -> () loc(#loc73)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc57)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc76)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc195)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc195)
    cir.return %17 : !s32i loc(#loc195)
  } loc(#loc190)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc78)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Value is too small or large to be represented as an int\00" : !cir.array<!s8i x 56>> : !cir.array<!s8i x 56> {alignment = 1 : i64} loc(#loc79)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc197)
    %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc198)
    cir.br ^bb1 loc(#loc199)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc168)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc88)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc89)
    %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc200)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc201)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc78)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    cir.br ^bb24 loc(#loc91)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc202)
  ^bb4:  // pred: ^bb3
    %8 = cir.const #cir.int<0> : !s32i loc(#loc85)
    %9 = cir.cast(int_to_float, %8 : !s32i), !cir.double loc(#loc85)
    cir.store %9, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc198)
    cir.br ^bb5 loc(#loc203)
  ^bb5:  // pred: ^bb4
    %10 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc98)
    %11 = cir.const #cir.int<256> : !s32i loc(#loc99)
    %12 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc170)
    %13 = cir.load %12 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc100)
    %14 = cir.call @fgets(%10, %11, %13) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc101)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc102)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc102)
    %17 = cir.cmp(ne, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc204)
    cir.brcond %17 ^bb6, ^bb7 loc(#loc205)
  ^bb6:  // pred: ^bb5
    %18 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc106)
    %19 = cir.call @atof(%18) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc107)
    cir.store %19, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc206)
    cir.br ^bb8 loc(#loc104)
  ^bb7:  // pred: ^bb5
    %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc110)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc110)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc111)
    cir.br ^bb8 loc(#loc97)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc97)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc207)
  ^bb10:  // pred: ^bb9
    %22 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc114)
    %23 = cir.const #cir.int<2147483647> : !s32i loc(#loc115)
    %24 = cir.cast(int_to_float, %23 : !s32i), !cir.double loc(#loc115)
    %25 = cir.cmp(gt, %22, %24) : !cir.double, !cir.bool loc(#loc208)
    cir.brcond %25 ^bb11, ^bb12 loc(#loc116)
  ^bb11:  // pred: ^bb10
    %26 = cir.const #true loc(#loc116)
    cir.br ^bb17(%26 : !cir.bool) loc(#loc116)
  ^bb12:  // pred: ^bb10
    %27 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc117)
    %28 = cir.const #cir.int<2147483647> : !s32i loc(#loc118)
    %29 = cir.unary(minus, %28) : !s32i, !s32i loc(#loc118)
    %30 = cir.const #cir.int<1> : !s32i loc(#loc118)
    %31 = cir.binop(sub, %29, %30) nsw : !s32i loc(#loc118)
    %32 = cir.cast(int_to_float, %31 : !s32i), !cir.double loc(#loc118)
    %33 = cir.cmp(lt, %27, %32) : !cir.double, !cir.bool loc(#loc209)
    cir.brcond %33 ^bb13, ^bb14 loc(#loc116)
  ^bb13:  // pred: ^bb12
    %34 = cir.const #true loc(#loc116)
    cir.br ^bb15(%34 : !cir.bool) loc(#loc116)
  ^bb14:  // pred: ^bb12
    %35 = cir.const #false loc(#loc116)
    cir.br ^bb15(%35 : !cir.bool) loc(#loc116)
  ^bb15(%36: !cir.bool loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":77:40)):  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc116)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17(%36 : !cir.bool) loc(#loc116)
  ^bb17(%37: !cir.bool loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":77:40)):  // 2 preds: ^bb11, ^bb16
    cir.br ^bb18 loc(#loc116)
  ^bb18:  // pred: ^bb17
    cir.brcond %37 ^bb19, ^bb20 loc(#loc210)
  ^bb19:  // pred: ^bb18
    %38 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 56>> loc(#loc79)
    %39 = cir.cast(array_to_ptrdecay, %38 : !cir.ptr<!cir.array<!s8i x 56>>), !cir.ptr<!s8i> loc(#loc79)
    cir.call @printLine(%39) : (!cir.ptr<!s8i>) -> () loc(#loc122)
    cir.br ^bb21 loc(#loc120)
  ^bb20:  // pred: ^bb18
    %40 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc123)
    %41 = cir.cast(float_to_int, %40 : !cir.double), !s32i loc(#loc123)
    cir.call @printIntLine(%41) : (!s32i) -> () loc(#loc124)
    cir.br ^bb21 loc(#loc113)
  ^bb21:  // 2 preds: ^bb19, ^bb20
    cir.br ^bb22 loc(#loc113)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc95)
  ^bb23:  // pred: ^bb22
    cir.br ^bb24 loc(#loc87)
  ^bb24:  // 2 preds: ^bb2, ^bb23
    cir.br ^bb25 loc(#loc87)
  ^bb25:  // pred: ^bb24
    cir.return loc(#loc81)
  } loc(#loc196)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc212)
    %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc213)
    cir.br ^bb1 loc(#loc214)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc168)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc133)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc134)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc215)
    cir.brcond %5 ^bb2, ^bb23 loc(#loc216)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc217)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.int<0> : !s32i loc(#loc130)
    %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc130)
    cir.store %7, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc213)
    cir.br ^bb4 loc(#loc218)
  ^bb4:  // pred: ^bb3
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc140)
    %9 = cir.const #cir.int<256> : !s32i loc(#loc141)
    %10 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc170)
    %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc142)
    %12 = cir.call @fgets(%8, %9, %11) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc143)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc144)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc144)
    %15 = cir.cmp(ne, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc219)
    cir.brcond %15 ^bb5, ^bb6 loc(#loc220)
  ^bb5:  // pred: ^bb4
    %16 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc148)
    %17 = cir.call @atof(%16) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc149)
    cir.store %17, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc221)
    cir.br ^bb7 loc(#loc146)
  ^bb6:  // pred: ^bb4
    %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc152)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc152)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc153)
    cir.br ^bb7 loc(#loc139)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc139)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc222)
  ^bb9:  // pred: ^bb8
    %20 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc156)
    %21 = cir.const #cir.int<2147483647> : !s32i loc(#loc157)
    %22 = cir.cast(int_to_float, %21 : !s32i), !cir.double loc(#loc157)
    %23 = cir.cmp(gt, %20, %22) : !cir.double, !cir.bool loc(#loc223)
    cir.brcond %23 ^bb10, ^bb11 loc(#loc158)
  ^bb10:  // pred: ^bb9
    %24 = cir.const #true loc(#loc158)
    cir.br ^bb16(%24 : !cir.bool) loc(#loc158)
  ^bb11:  // pred: ^bb9
    %25 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc159)
    %26 = cir.const #cir.int<2147483647> : !s32i loc(#loc160)
    %27 = cir.unary(minus, %26) : !s32i, !s32i loc(#loc160)
    %28 = cir.const #cir.int<1> : !s32i loc(#loc160)
    %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc160)
    %30 = cir.cast(int_to_float, %29 : !s32i), !cir.double loc(#loc160)
    %31 = cir.cmp(lt, %25, %30) : !cir.double, !cir.bool loc(#loc224)
    cir.brcond %31 ^bb12, ^bb13 loc(#loc158)
  ^bb12:  // pred: ^bb11
    %32 = cir.const #true loc(#loc158)
    cir.br ^bb14(%32 : !cir.bool) loc(#loc158)
  ^bb13:  // pred: ^bb11
    %33 = cir.const #false loc(#loc158)
    cir.br ^bb14(%33 : !cir.bool) loc(#loc158)
  ^bb14(%34: !cir.bool loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":112:40)):  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc158)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16(%34 : !cir.bool) loc(#loc158)
  ^bb16(%35: !cir.bool loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":112:40)):  // 2 preds: ^bb10, ^bb15
    cir.br ^bb17 loc(#loc158)
  ^bb17:  // pred: ^bb16
    cir.brcond %35 ^bb18, ^bb19 loc(#loc225)
  ^bb18:  // pred: ^bb17
    %36 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 56>> loc(#loc164)
    %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 56>>), !cir.ptr<!s8i> loc(#loc164)
    cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc165)
    cir.br ^bb20 loc(#loc162)
  ^bb19:  // pred: ^bb17
    %38 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc166)
    %39 = cir.cast(float_to_int, %38 : !cir.double), !s32i loc(#loc166)
    cir.call @printIntLine(%39) : (!s32i) -> () loc(#loc167)
    cir.br ^bb20 loc(#loc155)
  ^bb20:  // 2 preds: ^bb18, ^bb19
    cir.br ^bb21 loc(#loc155)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc137)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc132)
  ^bb23:  // 2 preds: ^bb1, ^bb22
    cir.br ^bb24 loc(#loc132)
  ^bb24:  // pred: ^bb23
    cir.return loc(#loc126)
  } loc(#loc211)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":111:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":111:18)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":102:1)
#loc8 = loc("/usr/include/stdlib.h":103:33)
#loc9 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":37:27)
#loc12 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":22:1)
#loc15 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":43:1)
#loc16 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":27:13)
#loc17 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":27:45)
#loc18 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":28:13)
#loc19 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":28:35)
#loc20 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":24:5)
#loc21 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":42:5)
#loc22 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":24:8)
#loc23 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":24:27)
#loc24 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":25:5)
#loc25 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":26:9)
#loc26 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":41:9)
#loc27 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":30:13)
#loc28 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":38:13)
#loc29 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":30:23)
#loc30 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":30:36)
#loc31 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":30:53)
#loc32 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":30:17)
#loc33 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":30:63)
#loc34 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":31:13)
#loc35 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":34:13)
#loc36 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":36:13)
#loc37 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":33:37)
#loc38 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":33:32)
#loc39 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":33:17)
#loc40 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":33:48)
#loc41 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":37:17)
#loc42 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":40:31)
#loc43 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":40:13)
#loc44 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":124:1)
#loc45 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":128:1)
#loc46 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":126:5)
#loc47 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":126:11)
#loc48 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":127:5)
#loc49 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":127:11)
#loc50 = loc("/usr/include/stdlib.h":575:1)
#loc51 = loc("/usr/include/stdlib.h":575:41)
#loc52 = loc("/usr/include/time.h":76:1)
#loc53 = loc("/usr/include/time.h":76:38)
#loc54 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":144:15)
#loc55 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":146:15)
#loc56 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":149:15)
#loc57 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":151:15)
#loc58 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":139:1)
#loc59 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":154:1)
#loc64 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":140:1)
#loc65 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":142:27)
#loc66 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":142:22)
#loc67 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":142:5)
#loc68 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":144:5)
#loc69 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":145:5)
#loc70 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":145:75)
#loc71 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":146:5)
#loc72 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":149:5)
#loc73 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":150:5)
#loc74 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":150:74)
#loc75 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":151:5)
#loc76 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":153:12)
#loc77 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":153:5)
#loc78 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":55:19)
#loc79 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":79:27)
#loc80 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":50:1)
#loc81 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":87:1)
#loc82 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":60:13)
#loc83 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":60:45)
#loc84 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":61:13)
#loc85 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":61:35)
#loc86 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":52:5)
#loc87 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":86:5)
#loc88 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":52:8)
#loc89 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":52:27)
#loc90 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":53:5)
#loc91 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":56:5)
#loc92 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":58:5)
#loc93 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":55:9)
#loc94 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":59:9)
#loc95 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":85:9)
#loc96 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":67:13)
#loc97 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":75:13)
#loc98 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":67:23)
#loc99 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":67:36)
#loc100 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":67:53)
#loc101 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":67:17)
#loc102 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":67:63)
#loc103 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":68:13)
#loc104 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":71:13)
#loc105 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":73:13)
#loc106 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":70:37)
#loc107 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":70:32)
#loc108 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":70:17)
#loc109 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":70:48)
#loc110 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":74:27)
#loc111 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":74:17)
#loc112 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":77:13)
#loc113 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":84:13)
#loc114 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":77:17)
#loc115 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":77:32)
#loc117 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":77:43)
#loc118 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":77:58)
#loc119 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":78:13)
#loc120 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":80:13)
#loc121 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":82:13)
#loc122 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":79:17)
#loc123 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":83:35)
#loc124 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":83:17)
#loc125 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":90:1)
#loc126 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":122:1)
#loc127 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":95:13)
#loc128 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":95:45)
#loc129 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":96:13)
#loc130 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":96:35)
#loc131 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":92:5)
#loc132 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":121:5)
#loc133 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":92:8)
#loc134 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":92:27)
#loc135 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":93:5)
#loc136 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":94:9)
#loc137 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":120:9)
#loc138 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":102:13)
#loc139 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":110:13)
#loc140 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":102:23)
#loc141 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":102:36)
#loc142 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":102:53)
#loc143 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":102:17)
#loc144 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":102:63)
#loc145 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":103:13)
#loc146 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":106:13)
#loc147 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":108:13)
#loc148 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":105:37)
#loc149 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":105:32)
#loc150 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":105:17)
#loc151 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":105:48)
#loc152 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":109:27)
#loc153 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":109:17)
#loc154 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":112:13)
#loc155 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":119:13)
#loc156 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":112:17)
#loc157 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":112:32)
#loc159 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":112:43)
#loc160 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":112:58)
#loc161 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":113:13)
#loc162 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":115:13)
#loc163 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":117:13)
#loc164 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":114:27)
#loc165 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":114:17)
#loc166 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":118:35)
#loc167 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13.c":118:17)
#loc168 = loc(fused[#loc1, #loc2])
#loc169 = loc(fused[#loc3, #loc4])
#loc170 = loc(fused[#loc5, #loc6])
#loc171 = loc(fused[#loc7, #loc8])
#loc172 = loc(fused[#loc9, #loc10])
#loc173 = loc(fused[#loc12, #loc13])
#loc174 = loc(fused[#loc14, #loc15])
#loc175 = loc(fused[#loc16, #loc17])
#loc176 = loc(fused[#loc18, #loc19])
#loc177 = loc(fused[#loc20, #loc21])
#loc178 = loc(fused[#loc22, #loc23])
#loc179 = loc(fused[#loc24, #loc21])
#loc180 = loc(fused[#loc25, #loc26])
#loc181 = loc(fused[#loc27, #loc28])
#loc182 = loc(fused[#loc32, #loc33])
#loc183 = loc(fused[#loc34, #loc35, #loc36, #loc28])
#loc184 = loc(fused[#loc39, #loc40])
#loc185 = loc(fused[#loc44, #loc45])
#loc186 = loc(fused[#loc46, #loc47])
#loc187 = loc(fused[#loc48, #loc49])
#loc188 = loc(fused[#loc50, #loc51])
#loc189 = loc(fused[#loc52, #loc53])
#loc190 = loc(fused[#loc58, #loc59])
#loc193 = loc(fused[#loc69, #loc70])
#loc194 = loc(fused[#loc73, #loc74])
#loc195 = loc(fused[#loc77, #loc76])
#loc196 = loc(fused[#loc80, #loc81])
#loc197 = loc(fused[#loc82, #loc83])
#loc198 = loc(fused[#loc84, #loc85])
#loc199 = loc(fused[#loc86, #loc87])
#loc200 = loc(fused[#loc88, #loc89])
#loc201 = loc(fused[#loc90, #loc91, #loc92, #loc87])
#loc202 = loc(fused[#loc94, #loc95])
#loc203 = loc(fused[#loc96, #loc97])
#loc204 = loc(fused[#loc101, #loc102])
#loc205 = loc(fused[#loc103, #loc104, #loc105, #loc97])
#loc206 = loc(fused[#loc108, #loc109])
#loc207 = loc(fused[#loc112, #loc113])
#loc208 = loc(fused[#loc114, #loc115])
#loc209 = loc(fused[#loc117, #loc118])
#loc210 = loc(fused[#loc119, #loc120, #loc121, #loc113])
#loc211 = loc(fused[#loc125, #loc126])
#loc212 = loc(fused[#loc127, #loc128])
#loc213 = loc(fused[#loc129, #loc130])
#loc214 = loc(fused[#loc131, #loc132])
#loc215 = loc(fused[#loc133, #loc134])
#loc216 = loc(fused[#loc135, #loc132])
#loc217 = loc(fused[#loc136, #loc137])
#loc218 = loc(fused[#loc138, #loc139])
#loc219 = loc(fused[#loc143, #loc144])
#loc220 = loc(fused[#loc145, #loc146, #loc147, #loc139])
#loc221 = loc(fused[#loc150, #loc151])
#loc222 = loc(fused[#loc154, #loc155])
#loc223 = loc(fused[#loc156, #loc157])
#loc224 = loc(fused[#loc159, #loc160])
#loc225 = loc(fused[#loc161, #loc162, #loc163, #loc155])
