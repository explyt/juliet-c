!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc63 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":118:10)
#loc64 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":118:14)
#loc65 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":118:20)
#loc66 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":118:32)
#loc168 = loc(fused[#loc63, #loc64])
#loc169 = loc(fused[#loc65, #loc66])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fgets_divide_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc144)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc145)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc146)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc147)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc148)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fgets_divide_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc150)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc17)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc151)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc153)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc153)
      cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc153)
      cir.scope {
        %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc25)
        %6 = cir.const #cir.int<3> : !s32i loc(#loc26)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc26)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc26)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc26)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc26)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc26)
        %12 = cir.binop(add, %9, %11) : !u64i loc(#loc26)
        %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc26)
        %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc145)
        %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc27)
        %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc28)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc29)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc29)
        %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc155)
        cir.if %19 {
          %20 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc33)
          %21 = cir.call @atoi(%20) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc34)
          cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc157)
        } else {
          %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc37)
        } loc(#loc156)
      } loc(#loc154)
    } loc(#loc152)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc159)
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc160)
      %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc41)
      cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc159)
      %6 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc43)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc160)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc44)
      %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc45)
      %9 = cir.binop(div, %7, %8) : !s32i loc(#loc161)
      cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc46)
    } loc(#loc158)
    cir.return loc(#loc13)
  } loc(#loc149)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fgets_divide_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc163)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc49)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc164)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    cir.return loc(#loc48)
  } loc(#loc162)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc165)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc166)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc60)
  cir.func @main(%arg0: !s32i loc(fused[#loc63, #loc64]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc65, #loc66])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc168)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc169)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc62)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc67)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc67)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc68)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc69)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc69)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc70)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc57)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_fgets_divide_31_good : !cir.ptr<!cir.func<!void ()>> loc(#loc170)
    cir.call @CWE369_Divide_by_Zero__int_fgets_divide_31_good() : () -> () loc(#loc72)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc58)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc59)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_fgets_divide_31_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc171)
    cir.call @CWE369_Divide_by_Zero__int_fgets_divide_31_bad() : () -> () loc(#loc76)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc60)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc79)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc172)
    cir.return %17 : !s32i loc(#loc172)
  } loc(#loc167)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc174)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc85)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc86)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc88)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc176)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc178)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc179)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc93)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc178)
      %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc95)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc179)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc96)
      %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc97)
      %10 = cir.binop(div, %8, %9) : !s32i loc(#loc180)
      cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc98)
    } loc(#loc177)
    cir.return loc(#loc82)
  } loc(#loc173)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc99)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc182)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc104)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc105)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc185)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc185)
      cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc185)
      cir.scope {
        %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc113)
        %6 = cir.const #cir.int<3> : !s32i loc(#loc114)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc114)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc114)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc114)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc114)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc114)
        %12 = cir.binop(add, %9, %11) : !u64i loc(#loc114)
        %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc114)
        %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc145)
        %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc115)
        %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc116)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc117)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc117)
        %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc187)
        cir.if %19 {
          %20 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc121)
          %21 = cir.call @atoi(%20) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc122)
          cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc189)
        } else {
          %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc125)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc125)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc126)
        } loc(#loc188)
      } loc(#loc186)
    } loc(#loc184)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc191)
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc192)
      %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc130)
      cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc191)
      %6 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc132)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc192)
      cir.scope {
        %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc135)
        %8 = cir.const #cir.int<0> : !s32i loc(#loc136)
        %9 = cir.cmp(ne, %7, %8) : !s32i, !cir.bool loc(#loc194)
        cir.if %9 {
          %10 = cir.const #cir.int<100> : !s32i loc(#loc140)
          %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc141)
          %12 = cir.binop(div, %10, %11) : !s32i loc(#loc196)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc142)
        } else {
          %10 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc99)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc99)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc143)
        } loc(#loc195)
      } loc(#loc193)
    } loc(#loc190)
    cir.return loc(#loc101)
  } loc(#loc181)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fgets_divide_31.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":39:23)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":24:1)
#loc13 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":48:1)
#loc14 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":26:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":26:9)
#loc16 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":28:13)
#loc17 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":28:12)
#loc18 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":28:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":29:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":41:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":30:9)
#loc22 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":30:45)
#loc23 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":32:9)
#loc24 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":40:9)
#loc25 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":32:19)
#loc26 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":32:32)
#loc27 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":32:49)
#loc28 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":32:13)
#loc29 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":32:59)
#loc30 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":33:9)
#loc31 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":36:9)
#loc32 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":38:9)
#loc33 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":35:25)
#loc34 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":35:20)
#loc35 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":35:13)
#loc36 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":35:36)
#loc37 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":39:13)
#loc38 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":42:5)
#loc39 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":47:5)
#loc40 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":43:9)
#loc41 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":43:24)
#loc42 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":44:9)
#loc43 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":44:20)
#loc44 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":46:22)
#loc45 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":46:28)
#loc46 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":46:9)
#loc47 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":104:1)
#loc48 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":108:1)
#loc49 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":106:5)
#loc50 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":106:13)
#loc51 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":107:5)
#loc52 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":107:13)
#loc53 = loc("/usr/include/stdlib.h":575:1)
#loc54 = loc("/usr/include/stdlib.h":575:41)
#loc55 = loc("/usr/include/time.h":76:1)
#loc56 = loc("/usr/include/time.h":76:38)
#loc57 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":123:15)
#loc58 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":125:15)
#loc59 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":128:15)
#loc60 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":130:15)
#loc61 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":118:1)
#loc62 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":133:1)
#loc67 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":119:1)
#loc68 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":121:27)
#loc69 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":121:22)
#loc70 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":121:5)
#loc71 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":123:5)
#loc72 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":124:5)
#loc73 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":124:53)
#loc74 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":125:5)
#loc75 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":128:5)
#loc76 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":129:5)
#loc77 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":129:52)
#loc78 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":130:5)
#loc79 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":132:12)
#loc80 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":132:5)
#loc81 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":55:1)
#loc82 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":68:1)
#loc83 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":57:5)
#loc84 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":57:9)
#loc85 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":59:13)
#loc86 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":59:12)
#loc87 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":59:5)
#loc88 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":61:12)
#loc89 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":61:5)
#loc90 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":62:5)
#loc91 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":67:5)
#loc92 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":63:9)
#loc93 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":63:24)
#loc94 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":64:9)
#loc95 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":64:20)
#loc96 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":66:22)
#loc97 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":66:28)
#loc98 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":66:9)
#loc99 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":99:23)
#loc100 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":71:1)
#loc101 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":102:1)
#loc102 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":73:5)
#loc103 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":73:9)
#loc104 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":75:13)
#loc105 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":75:12)
#loc106 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":75:5)
#loc107 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":76:5)
#loc108 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":88:5)
#loc109 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":77:9)
#loc110 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":77:45)
#loc111 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":79:9)
#loc112 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":87:9)
#loc113 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":79:19)
#loc114 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":79:32)
#loc115 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":79:49)
#loc116 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":79:13)
#loc117 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":79:59)
#loc118 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":80:9)
#loc119 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":83:9)
#loc120 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":85:9)
#loc121 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":82:25)
#loc122 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":82:20)
#loc123 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":82:13)
#loc124 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":82:36)
#loc125 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":86:23)
#loc126 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":86:13)
#loc127 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":89:5)
#loc128 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":101:5)
#loc129 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":90:9)
#loc130 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":90:24)
#loc131 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":91:9)
#loc132 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":91:20)
#loc133 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":93:9)
#loc134 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":100:9)
#loc135 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":93:13)
#loc136 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":93:21)
#loc137 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":94:9)
#loc138 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":96:9)
#loc139 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":98:9)
#loc140 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":95:26)
#loc141 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":95:32)
#loc142 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":95:13)
#loc143 = loc("CWE369_Divide_by_Zero__int_fgets_divide_31.c":99:13)
#loc144 = loc(fused[#loc1, #loc2])
#loc145 = loc(fused[#loc3, #loc4])
#loc146 = loc(fused[#loc5, #loc6])
#loc147 = loc(fused[#loc7, #loc8])
#loc148 = loc(fused[#loc10, #loc11])
#loc149 = loc(fused[#loc12, #loc13])
#loc150 = loc(fused[#loc14, #loc15])
#loc151 = loc(fused[#loc18, #loc16])
#loc152 = loc(fused[#loc19, #loc20])
#loc153 = loc(fused[#loc21, #loc22])
#loc154 = loc(fused[#loc23, #loc24])
#loc155 = loc(fused[#loc28, #loc29])
#loc156 = loc(fused[#loc30, #loc31, #loc32, #loc24])
#loc157 = loc(fused[#loc35, #loc36])
#loc158 = loc(fused[#loc38, #loc39])
#loc159 = loc(fused[#loc40, #loc41])
#loc160 = loc(fused[#loc42, #loc43])
#loc161 = loc(fused[#loc44, #loc45])
#loc162 = loc(fused[#loc47, #loc48])
#loc163 = loc(fused[#loc49, #loc50])
#loc164 = loc(fused[#loc51, #loc52])
#loc165 = loc(fused[#loc53, #loc54])
#loc166 = loc(fused[#loc55, #loc56])
#loc167 = loc(fused[#loc61, #loc62])
#loc170 = loc(fused[#loc72, #loc73])
#loc171 = loc(fused[#loc76, #loc77])
#loc172 = loc(fused[#loc80, #loc79])
#loc173 = loc(fused[#loc81, #loc82])
#loc174 = loc(fused[#loc83, #loc84])
#loc175 = loc(fused[#loc87, #loc85])
#loc176 = loc(fused[#loc89, #loc88])
#loc177 = loc(fused[#loc90, #loc91])
#loc178 = loc(fused[#loc92, #loc93])
#loc179 = loc(fused[#loc94, #loc95])
#loc180 = loc(fused[#loc96, #loc97])
#loc181 = loc(fused[#loc100, #loc101])
#loc182 = loc(fused[#loc102, #loc103])
#loc183 = loc(fused[#loc106, #loc104])
#loc184 = loc(fused[#loc107, #loc108])
#loc185 = loc(fused[#loc109, #loc110])
#loc186 = loc(fused[#loc111, #loc112])
#loc187 = loc(fused[#loc116, #loc117])
#loc188 = loc(fused[#loc118, #loc119, #loc120, #loc112])
#loc189 = loc(fused[#loc123, #loc124])
#loc190 = loc(fused[#loc127, #loc128])
#loc191 = loc(fused[#loc129, #loc130])
#loc192 = loc(fused[#loc131, #loc132])
#loc193 = loc(fused[#loc133, #loc134])
#loc194 = loc(fused[#loc135, #loc136])
#loc195 = loc(fused[#loc137, #loc138, #loc139, #loc134])
#loc196 = loc(fused[#loc140, #loc141])
