!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_657badSinkEPc(!cir.ptr<!s8i>) loc(#loc123)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc124)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc125)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_653badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc127)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc128)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc129)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc130)
    %4 = cir.get_global @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_657badSinkEPc : !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>> loc(#loc12)
    cir.store %4, %1 : !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>> loc(#loc128)
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc17)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc131)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc17)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc132)
    cir.store %8, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc129)
    cir.br ^bb1 loc(#loc133)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc22)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc23)
    %11 = cir.cmp(eq, %9, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc134)
    cir.brcond %11 ^bb2, ^bb3 loc(#loc135)
  ^bb2:  // pred: ^bb1
    %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc25)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc27)
    cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc25)
    cir.br ^bb3 loc(#loc21)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc21)
  ^bb4:  // pred: ^bb3
    %15 = cir.const #cir.int<8> : !u64i loc(#loc136)
    %16 = cir.call @malloc(%15) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc30)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc137)
    cir.store %17, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc130)
    cir.br ^bb5 loc(#loc138)
  ^bb5:  // pred: ^bb4
    %18 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
    %19 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc34)
    %20 = cir.cmp(eq, %18, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc139)
    cir.brcond %20 ^bb6, ^bb7 loc(#loc140)
  ^bb6:  // pred: ^bb5
    %21 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc36)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc38)
    cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc36)
    cir.br ^bb7 loc(#loc32)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc32)
  ^bb8:  // pred: ^bb7
    %24 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc39)
    cir.store %24, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc141)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>> loc(#loc41)
    %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc42)
    cir.call %25(%26) : (!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc41)
    cir.return loc(#loc8)
  } loc(#loc126)
  cir.func private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_6511goodG2BSinkEPc(!cir.ptr<!s8i>) loc(#loc142)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_65L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc144)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc145)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc146)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc147)
    %4 = cir.get_global @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_6511goodG2BSinkEPc : !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>> loc(#loc50)
    cir.store %4, %1 : !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>> loc(#loc145)
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc55)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc148)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc55)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc149)
    cir.store %8, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc146)
    cir.br ^bb1 loc(#loc150)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc61)
    %11 = cir.cmp(eq, %9, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc151)
    cir.brcond %11 ^bb2, ^bb3 loc(#loc152)
  ^bb2:  // pred: ^bb1
    %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc63)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc65)
    cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc63)
    cir.br ^bb3 loc(#loc59)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc59)
  ^bb4:  // pred: ^bb3
    %15 = cir.const #cir.int<8> : !u64i loc(#loc153)
    %16 = cir.call @malloc(%15) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc68)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc154)
    cir.store %17, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc147)
    cir.br ^bb5 loc(#loc155)
  ^bb5:  // pred: ^bb4
    %18 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc71)
    %19 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc72)
    %20 = cir.cmp(eq, %18, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc156)
    cir.brcond %20 ^bb6, ^bb7 loc(#loc157)
  ^bb6:  // pred: ^bb5
    %21 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc74)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc76)
    cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc74)
    cir.br ^bb7 loc(#loc70)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc70)
  ^bb8:  // pred: ^bb7
    %24 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc77)
    cir.store %24, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc158)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>> loc(#loc79)
    %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc80)
    cir.call %25(%26) : (!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc79)
    cir.return loc(#loc46)
  } loc(#loc143)
  cir.func private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_6511goodB2GSinkEPc(!cir.ptr<!s8i>) loc(#loc159)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_65L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc161)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc162)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc163)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc164)
    %4 = cir.get_global @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_6511goodB2GSinkEPc : !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>> loc(#loc88)
    cir.store %4, %1 : !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>> loc(#loc162)
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc93)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc165)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc93)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc166)
    cir.store %8, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc163)
    cir.br ^bb1 loc(#loc167)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc98)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc99)
    %11 = cir.cmp(eq, %9, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc168)
    cir.brcond %11 ^bb2, ^bb3 loc(#loc169)
  ^bb2:  // pred: ^bb1
    %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc101)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc102)
    %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc103)
    cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc101)
    cir.br ^bb3 loc(#loc97)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc97)
  ^bb4:  // pred: ^bb3
    %15 = cir.const #cir.int<8> : !u64i loc(#loc170)
    %16 = cir.call @malloc(%15) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc106)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc171)
    cir.store %17, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc164)
    cir.br ^bb5 loc(#loc172)
  ^bb5:  // pred: ^bb4
    %18 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc109)
    %19 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc110)
    %20 = cir.cmp(eq, %18, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc173)
    cir.brcond %20 ^bb6, ^bb7 loc(#loc174)
  ^bb6:  // pred: ^bb5
    %21 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc112)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc113)
    %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc114)
    cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc112)
    cir.br ^bb7 loc(#loc108)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc108)
  ^bb8:  // pred: ^bb7
    %24 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc115)
    cir.store %24, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc175)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>> loc(#loc117)
    %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc118)
    cir.call %25(%26) : (!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc117)
    cir.return loc(#loc84)
  } loc(#loc160)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_654goodEv() extra(#fn_attr1) {
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_65L7goodG2BEv() : () -> () loc(#loc121)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_65L7goodB2GEv() : () -> () loc(#loc122)
    cir.return loc(#loc120)
  } loc(#loc176)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":26:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":26:25)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":28:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":41:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":30:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":30:12)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":32:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":32:32)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":33:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":33:62)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":35:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":35:64)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":33:36)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":33:43)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":33:61)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":34:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":34:42)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":34:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":34:26)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":34:32)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":34:33)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":34:39)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":34:38)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":35:44)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":35:63)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":35:37)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":36:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":36:43)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":36:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":36:27)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":36:33)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":36:34)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":36:40)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":36:39)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":38:12)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":38:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":40:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":40:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":48:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":48:29)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":50:1)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":61:1)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":52:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":52:12)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":53:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":53:32)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":54:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":54:62)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":56:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":56:64)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":54:36)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":54:43)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":54:61)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":55:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":55:42)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":55:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":55:26)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":55:32)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":55:33)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":55:39)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":55:38)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":56:44)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":56:63)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":56:37)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":57:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":57:43)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":57:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":57:27)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":57:33)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":57:34)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":57:40)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":57:39)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":59:12)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":59:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":60:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":60:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":64:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":64:29)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":66:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":77:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":68:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":68:12)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":69:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":69:32)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":70:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":70:62)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":72:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":72:64)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":70:36)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":70:43)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":70:61)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":71:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":71:42)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":71:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":71:26)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":71:32)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":71:33)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":71:39)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":71:38)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":72:44)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":72:63)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":72:37)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":73:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":73:43)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":73:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":73:27)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":73:33)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":73:34)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":73:40)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":73:39)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":75:12)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":75:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":76:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":76:13)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":79:1)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":83:1)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":81:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_65a.cpp":82:5)
#loc123 = loc(fused[#loc1, #loc2])
#loc124 = loc(fused[#loc3, #loc4])
#loc125 = loc(fused[#loc5, #loc6])
#loc126 = loc(fused[#loc7, #loc8])
#loc127 = loc(fused[#loc9, #loc10])
#loc128 = loc(fused[#loc11, #loc12])
#loc129 = loc(fused[#loc13, #loc14])
#loc130 = loc(fused[#loc15, #loc16])
#loc131 = loc(fused[#loc18, #loc19])
#loc132 = loc(fused[#loc17, #loc14])
#loc133 = loc(fused[#loc20, #loc21])
#loc134 = loc(fused[#loc22, #loc23])
#loc135 = loc(fused[#loc24, #loc21])
#loc136 = loc(fused[#loc28, #loc29])
#loc137 = loc(fused[#loc30, #loc16])
#loc138 = loc(fused[#loc31, #loc32])
#loc139 = loc(fused[#loc33, #loc34])
#loc140 = loc(fused[#loc35, #loc32])
#loc141 = loc(fused[#loc40, #loc39])
#loc142 = loc(fused[#loc43, #loc44])
#loc143 = loc(fused[#loc45, #loc46])
#loc144 = loc(fused[#loc47, #loc48])
#loc145 = loc(fused[#loc49, #loc50])
#loc146 = loc(fused[#loc51, #loc52])
#loc147 = loc(fused[#loc53, #loc54])
#loc148 = loc(fused[#loc56, #loc57])
#loc149 = loc(fused[#loc55, #loc52])
#loc150 = loc(fused[#loc58, #loc59])
#loc151 = loc(fused[#loc60, #loc61])
#loc152 = loc(fused[#loc62, #loc59])
#loc153 = loc(fused[#loc66, #loc67])
#loc154 = loc(fused[#loc68, #loc54])
#loc155 = loc(fused[#loc69, #loc70])
#loc156 = loc(fused[#loc71, #loc72])
#loc157 = loc(fused[#loc73, #loc70])
#loc158 = loc(fused[#loc78, #loc77])
#loc159 = loc(fused[#loc81, #loc82])
#loc160 = loc(fused[#loc83, #loc84])
#loc161 = loc(fused[#loc85, #loc86])
#loc162 = loc(fused[#loc87, #loc88])
#loc163 = loc(fused[#loc89, #loc90])
#loc164 = loc(fused[#loc91, #loc92])
#loc165 = loc(fused[#loc94, #loc95])
#loc166 = loc(fused[#loc93, #loc90])
#loc167 = loc(fused[#loc96, #loc97])
#loc168 = loc(fused[#loc98, #loc99])
#loc169 = loc(fused[#loc100, #loc97])
#loc170 = loc(fused[#loc104, #loc105])
#loc171 = loc(fused[#loc106, #loc92])
#loc172 = loc(fused[#loc107, #loc108])
#loc173 = loc(fused[#loc109, #loc110])
#loc174 = loc(fused[#loc111, #loc108])
#loc175 = loc(fused[#loc116, #loc115])
#loc176 = loc(fused[#loc119, #loc120])
