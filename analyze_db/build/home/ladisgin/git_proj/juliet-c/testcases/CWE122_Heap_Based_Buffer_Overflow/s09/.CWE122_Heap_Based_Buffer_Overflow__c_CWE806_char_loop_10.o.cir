!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc226)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc227)
  cir.global "private" external @globalTrue : !s32i {alignment = 4 : i64} loc(#loc228)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc229)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc230)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc231)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc233)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc234)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc235)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc236)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc22)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc23)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc23)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc237)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc238)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc22)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc239)
    cir.store %10, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc240)
    cir.br ^bb1 loc(#loc241)
  ^bb1:  // pred: ^bb0
    %11 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc31)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc242)
    cir.brcond %14 ^bb2, ^bb3 loc(#loc243)
  ^bb2:  // pred: ^bb1
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc33)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc35)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc33)
    cir.br ^bb3 loc(#loc29)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc29)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc244)
  ^bb5:  // pred: ^bb4
    %18 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc228)
    %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc38)
    %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc38)
    cir.brcond %20 ^bb6, ^bb7 loc(#loc245)
  ^bb6:  // pred: ^bb5
    %21 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc40)
    %23 = cir.const #cir.int<65> : !s32i loc(#loc41)
    %24 = cir.const #cir.int<100> : !s32i loc(#loc42)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc43)
    %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc42)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc42)
    cir.libc.memset %27 bytes from %22 set to %23 : !cir.ptr<!void>, !s32i, !u64i loc(#loc246)
    %28 = cir.const #cir.int<0> : !s32i loc(#loc46)
    %29 = cir.cast(integral, %28 : !s32i), !s8i loc(#loc46)
    %30 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
    %31 = cir.const #cir.int<100> : !s32i loc(#loc48)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %33 = cir.binop(sub, %31, %32) nsw : !s32i loc(#loc48)
    %34 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %33 : !s32i), !cir.ptr<!s8i> loc(#loc50)
    cir.store %29, %34 : !s8i, !cir.ptr<!s8i> loc(#loc247)
    cir.br ^bb7 loc(#loc37)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc37)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc248)
  ^bb9:  // pred: ^bb8
    %35 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc233)
    cir.store %35, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc233)
    %36 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc53)
    %37 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc54)
    %38 = cir.call @strlen(%37) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc53)
    cir.store %38, %2 : !u64i, !cir.ptr<!u64i> loc(#loc249)
    cir.br ^bb10 loc(#loc250)
  ^bb10:  // pred: ^bb9
    %39 = cir.const #cir.int<0> : !s32i loc(#loc59)
    %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc59)
    cir.store %40, %1 : !u64i, !cir.ptr<!u64i> loc(#loc251)
    cir.br ^bb11 loc(#loc250)
  ^bb11:  // 2 preds: ^bb10, ^bb15
    %41 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc61)
    %42 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc62)
    %43 = cir.cmp(lt, %41, %42) : !u64i, !cir.bool loc(#loc252)
    cir.brcond %43 ^bb12, ^bb16 loc(#loc63)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc253)
  ^bb13:  // pred: ^bb12
    %44 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc65)
    %45 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc66)
    %46 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %45 : !u64i), !cir.ptr<!s8i> loc(#loc67)
    %47 = cir.load %46 : !cir.ptr<!s8i>, !s8i loc(#loc65)
    %48 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc68)
    %49 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc69)
    %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !u64i), !cir.ptr<!s8i> loc(#loc69)
    cir.store %47, %50 : !s8i, !cir.ptr<!s8i> loc(#loc254)
    cir.br ^bb14 loc(#loc58)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc58)
  ^bb15:  // pred: ^bb14
    %51 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc70)
    %52 = cir.unary(inc, %51) : !u64i, !u64i loc(#loc71)
    cir.store %52, %1 : !u64i, !cir.ptr<!u64i> loc(#loc255)
    cir.br ^bb11 loc(#loc250)
  ^bb16:  // pred: ^bb11
    cir.br ^bb17 loc(#loc58)
  ^bb17:  // pred: ^bb16
    %53 = cir.const #cir.int<0> : !s32i loc(#loc72)
    %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc72)
    %55 = cir.const #cir.int<50> : !s32i loc(#loc73)
    %56 = cir.const #cir.int<1> : !s32i loc(#loc74)
    %57 = cir.binop(sub, %55, %56) nsw : !s32i loc(#loc73)
    %58 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc75)
    %59 = cir.ptr_stride(%58 : !cir.ptr<!s8i>, %57 : !s32i), !cir.ptr<!s8i> loc(#loc75)
    cir.store %54, %59 : !s8i, !cir.ptr<!s8i> loc(#loc256)
    %60 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%60) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %61 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
    %62 = cir.cast(bitcast, %61 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc78)
    cir.call @free(%62) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc79)
    cir.br ^bb18 loc(#loc52)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc14)
  } loc(#loc232)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc258)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc82)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc259)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc84)
    cir.return loc(#loc81)
  } loc(#loc257)
  cir.global "private" external @globalFalse : !s32i {alignment = 4 : i64} loc(#loc260)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc88)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc262)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc263)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc264)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc265)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc98)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc99)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc99)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc266)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc267)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc98)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc268)
    cir.store %10, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc269)
    cir.br ^bb1 loc(#loc270)
  ^bb1:  // pred: ^bb0
    %11 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc106)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc107)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc107)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc271)
    cir.brcond %14 ^bb2, ^bb3 loc(#loc272)
  ^bb2:  // pred: ^bb1
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc109)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc110)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc111)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc109)
    cir.br ^bb3 loc(#loc105)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc105)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc273)
  ^bb5:  // pred: ^bb4
    %18 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc260)
    %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc114)
    %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc114)
    cir.brcond %20 ^bb6, ^bb7 loc(#loc274)
  ^bb6:  // pred: ^bb5
    %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc88)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc88)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc118)
    cir.br ^bb8 loc(#loc116)
  ^bb7:  // pred: ^bb5
    %23 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc119)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc119)
    %25 = cir.const #cir.int<65> : !s32i loc(#loc120)
    %26 = cir.const #cir.int<50> : !s32i loc(#loc121)
    %27 = cir.const #cir.int<1> : !s32i loc(#loc122)
    %28 = cir.binop(sub, %26, %27) nsw : !s32i loc(#loc121)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc121)
    cir.libc.memset %29 bytes from %24 set to %25 : !cir.ptr<!void>, !s32i, !u64i loc(#loc275)
    %30 = cir.const #cir.int<0> : !s32i loc(#loc125)
    %31 = cir.cast(integral, %30 : !s32i), !s8i loc(#loc125)
    %32 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc126)
    %33 = cir.const #cir.int<50> : !s32i loc(#loc127)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc128)
    %35 = cir.binop(sub, %33, %34) nsw : !s32i loc(#loc127)
    %36 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %35 : !s32i), !cir.ptr<!s8i> loc(#loc129)
    cir.store %31, %36 : !s8i, !cir.ptr<!s8i> loc(#loc276)
    cir.br ^bb8 loc(#loc113)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc113)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc277)
  ^bb10:  // pred: ^bb9
    %37 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc262)
    cir.store %37, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc262)
    %38 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc132)
    %39 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc133)
    %40 = cir.call @strlen(%39) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc132)
    cir.store %40, %2 : !u64i, !cir.ptr<!u64i> loc(#loc278)
    cir.br ^bb11 loc(#loc279)
  ^bb11:  // pred: ^bb10
    %41 = cir.const #cir.int<0> : !s32i loc(#loc138)
    %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc138)
    cir.store %42, %1 : !u64i, !cir.ptr<!u64i> loc(#loc280)
    cir.br ^bb12 loc(#loc279)
  ^bb12:  // 2 preds: ^bb11, ^bb16
    %43 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc140)
    %44 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc141)
    %45 = cir.cmp(lt, %43, %44) : !u64i, !cir.bool loc(#loc281)
    cir.brcond %45 ^bb13, ^bb17 loc(#loc142)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc282)
  ^bb14:  // pred: ^bb13
    %46 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc144)
    %47 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc145)
    %48 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %47 : !u64i), !cir.ptr<!s8i> loc(#loc146)
    %49 = cir.load %48 : !cir.ptr<!s8i>, !s8i loc(#loc144)
    %50 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc147)
    %51 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc148)
    %52 = cir.ptr_stride(%51 : !cir.ptr<!s8i>, %50 : !u64i), !cir.ptr<!s8i> loc(#loc148)
    cir.store %49, %52 : !s8i, !cir.ptr<!s8i> loc(#loc283)
    cir.br ^bb15 loc(#loc137)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc137)
  ^bb16:  // pred: ^bb15
    %53 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc149)
    %54 = cir.unary(inc, %53) : !u64i, !u64i loc(#loc150)
    cir.store %54, %1 : !u64i, !cir.ptr<!u64i> loc(#loc284)
    cir.br ^bb12 loc(#loc279)
  ^bb17:  // pred: ^bb12
    cir.br ^bb18 loc(#loc137)
  ^bb18:  // pred: ^bb17
    %55 = cir.const #cir.int<0> : !s32i loc(#loc151)
    %56 = cir.cast(integral, %55 : !s32i), !s8i loc(#loc151)
    %57 = cir.const #cir.int<50> : !s32i loc(#loc152)
    %58 = cir.const #cir.int<1> : !s32i loc(#loc153)
    %59 = cir.binop(sub, %57, %58) nsw : !s32i loc(#loc152)
    %60 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc154)
    %61 = cir.ptr_stride(%60 : !cir.ptr<!s8i>, %59 : !s32i), !cir.ptr<!s8i> loc(#loc154)
    cir.store %56, %61 : !s8i, !cir.ptr<!s8i> loc(#loc285)
    %62 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc155)
    cir.call @printLine(%62) : (!cir.ptr<!s8i>) -> () loc(#loc156)
    %63 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc157)
    %64 = cir.cast(bitcast, %63 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc157)
    cir.call @free(%64) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc158)
    cir.br ^bb19 loc(#loc131)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc90)
  } loc(#loc261)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc287)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc288)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc289)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc290)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc168)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc169)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc169)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc291)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc292)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc168)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc293)
    cir.store %10, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc294)
    cir.br ^bb1 loc(#loc295)
  ^bb1:  // pred: ^bb0
    %11 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc176)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc177)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc177)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc296)
    cir.brcond %14 ^bb2, ^bb3 loc(#loc297)
  ^bb2:  // pred: ^bb1
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc179)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc180)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc181)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc179)
    cir.br ^bb3 loc(#loc175)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc175)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc298)
  ^bb5:  // pred: ^bb4
    %18 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc228)
    %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc184)
    %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc184)
    cir.brcond %20 ^bb6, ^bb7 loc(#loc299)
  ^bb6:  // pred: ^bb5
    %21 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc186)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc186)
    %23 = cir.const #cir.int<65> : !s32i loc(#loc187)
    %24 = cir.const #cir.int<50> : !s32i loc(#loc188)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc189)
    %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc188)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc188)
    cir.libc.memset %27 bytes from %22 set to %23 : !cir.ptr<!void>, !s32i, !u64i loc(#loc300)
    %28 = cir.const #cir.int<0> : !s32i loc(#loc192)
    %29 = cir.cast(integral, %28 : !s32i), !s8i loc(#loc192)
    %30 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc193)
    %31 = cir.const #cir.int<50> : !s32i loc(#loc194)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc195)
    %33 = cir.binop(sub, %31, %32) nsw : !s32i loc(#loc194)
    %34 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %33 : !s32i), !cir.ptr<!s8i> loc(#loc196)
    cir.store %29, %34 : !s8i, !cir.ptr<!s8i> loc(#loc301)
    cir.br ^bb7 loc(#loc183)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc183)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc302)
  ^bb9:  // pred: ^bb8
    %35 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc287)
    cir.store %35, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc287)
    %36 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc199)
    %37 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc200)
    %38 = cir.call @strlen(%37) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc199)
    cir.store %38, %2 : !u64i, !cir.ptr<!u64i> loc(#loc303)
    cir.br ^bb10 loc(#loc304)
  ^bb10:  // pred: ^bb9
    %39 = cir.const #cir.int<0> : !s32i loc(#loc205)
    %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc205)
    cir.store %40, %1 : !u64i, !cir.ptr<!u64i> loc(#loc305)
    cir.br ^bb11 loc(#loc304)
  ^bb11:  // 2 preds: ^bb10, ^bb15
    %41 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc207)
    %42 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc208)
    %43 = cir.cmp(lt, %41, %42) : !u64i, !cir.bool loc(#loc306)
    cir.brcond %43 ^bb12, ^bb16 loc(#loc209)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc307)
  ^bb13:  // pred: ^bb12
    %44 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc211)
    %45 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc212)
    %46 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %45 : !u64i), !cir.ptr<!s8i> loc(#loc213)
    %47 = cir.load %46 : !cir.ptr<!s8i>, !s8i loc(#loc211)
    %48 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc214)
    %49 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc215)
    %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !u64i), !cir.ptr<!s8i> loc(#loc215)
    cir.store %47, %50 : !s8i, !cir.ptr<!s8i> loc(#loc308)
    cir.br ^bb14 loc(#loc204)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc204)
  ^bb15:  // pred: ^bb14
    %51 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc216)
    %52 = cir.unary(inc, %51) : !u64i, !u64i loc(#loc217)
    cir.store %52, %1 : !u64i, !cir.ptr<!u64i> loc(#loc309)
    cir.br ^bb11 loc(#loc304)
  ^bb16:  // pred: ^bb11
    cir.br ^bb17 loc(#loc204)
  ^bb17:  // pred: ^bb16
    %53 = cir.const #cir.int<0> : !s32i loc(#loc218)
    %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc218)
    %55 = cir.const #cir.int<50> : !s32i loc(#loc219)
    %56 = cir.const #cir.int<1> : !s32i loc(#loc220)
    %57 = cir.binop(sub, %55, %56) nsw : !s32i loc(#loc219)
    %58 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc221)
    %59 = cir.ptr_stride(%58 : !cir.ptr<!s8i>, %57 : !s32i), !cir.ptr<!s8i> loc(#loc221)
    cir.store %54, %59 : !s8i, !cir.ptr<!s8i> loc(#loc310)
    %60 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc222)
    cir.call @printLine(%60) : (!cir.ptr<!s8i>) -> () loc(#loc223)
    %61 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc224)
    %62 = cir.cast(bitcast, %61 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc224)
    cir.call @free(%62) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc225)
    cir.br ^bb18 loc(#loc198)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc160)
  } loc(#loc286)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase.h":116:1)
#loc6 = loc("../../../testcasesupport/std_testcase.h":116:12)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("/usr/include/stdlib.h":687:1)
#loc12 = loc("/usr/include/stdlib.h":687:32)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":23:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":47:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":35:9)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":35:25)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":36:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":36:16)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":36:19)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":25:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":25:12)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":26:20)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":26:27)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":26:31)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":26:42)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":26:43)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":26:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":27:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":27:33)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":27:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":27:17)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":27:23)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":27:24)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":27:30)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":27:29)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":28:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":33:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":28:8)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":29:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":31:16)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":31:22)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":31:27)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":31:31)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":31:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":31:32)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":32:23)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":32:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":32:14)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":32:18)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":32:19)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":34:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":46:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":37:19)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":37:26)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":37:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":37:30)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":39:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":42:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":39:18)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":39:14)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":39:21)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":39:25)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":39:23)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":40:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":41:23)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":41:28)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":41:29)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":41:18)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":41:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":39:35)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":39:34)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":43:22)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":43:14)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":43:17)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":43:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":44:19)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":44:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":45:14)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":45:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":112:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":116:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":114:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":114:14)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":115:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":115:14)
#loc86 = loc("../../../testcasesupport/std_testcase.h":117:1)
#loc87 = loc("../../../testcasesupport/std_testcase.h":117:12)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":62:19)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":54:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":83:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":71:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":71:25)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":72:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":72:16)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":72:19)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":56:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":56:12)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":57:20)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":57:27)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":57:31)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":57:42)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":57:43)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":57:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":58:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":58:33)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":58:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":58:17)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":58:23)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":58:24)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":58:30)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":58:29)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":59:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":69:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":59:8)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":60:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":63:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":65:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":62:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":67:16)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":67:22)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":67:27)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":67:30)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":67:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":67:31)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":68:22)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":68:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":68:14)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":68:17)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":68:18)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":70:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":82:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":73:19)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":73:26)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":73:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":73:30)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":75:9)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":78:9)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":75:18)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":75:14)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":75:21)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":75:25)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":75:23)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":76:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":77:23)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":77:28)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":77:29)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":77:18)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":77:13)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":75:35)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":75:34)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":79:22)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":79:14)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":79:17)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":79:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":80:19)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":80:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":81:14)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":81:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":86:1)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":110:1)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":98:9)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":98:25)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":99:9)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":99:16)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":99:19)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":88:5)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":88:12)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":89:20)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":89:27)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":89:31)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":89:42)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":89:43)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":89:5)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":90:5)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":90:33)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":90:9)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":90:17)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":90:23)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":90:24)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":90:30)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":90:29)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":91:5)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":96:5)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":91:8)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":92:5)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":94:16)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":94:22)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":94:27)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":94:30)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":94:9)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":94:31)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":95:22)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":95:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":95:14)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":95:17)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":95:18)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":97:5)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":109:5)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":100:19)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":100:26)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":100:9)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":100:30)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":102:9)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":105:9)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":102:18)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":102:14)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":102:21)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":102:25)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":102:23)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":103:9)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":104:23)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":104:28)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":104:29)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":104:18)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":104:13)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":102:35)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":102:34)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":106:22)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":106:14)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":106:17)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":106:9)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":107:19)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":107:9)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":108:14)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c":108:9)
#loc226 = loc(fused[#loc1, #loc2])
#loc227 = loc(fused[#loc3, #loc4])
#loc228 = loc(fused[#loc5, #loc6])
#loc229 = loc(fused[#loc7, #loc8])
#loc230 = loc(fused[#loc9, #loc10])
#loc231 = loc(fused[#loc11, #loc12])
#loc232 = loc(fused[#loc13, #loc14])
#loc233 = loc(fused[#loc15, #loc16])
#loc234 = loc(fused[#loc17, #loc18])
#loc235 = loc(fused[#loc17, #loc19])
#loc236 = loc(fused[#loc20, #loc21])
#loc237 = loc(fused[#loc24, #loc25])
#loc238 = loc(fused[#loc23, #loc25])
#loc239 = loc(fused[#loc22, #loc26])
#loc240 = loc(fused[#loc27, #loc26])
#loc241 = loc(fused[#loc28, #loc29])
#loc242 = loc(fused[#loc30, #loc31])
#loc243 = loc(fused[#loc32, #loc29])
#loc244 = loc(fused[#loc36, #loc37])
#loc245 = loc(fused[#loc39, #loc37])
#loc246 = loc(fused[#loc44, #loc45])
#loc247 = loc(fused[#loc47, #loc46])
#loc248 = loc(fused[#loc51, #loc52])
#loc249 = loc(fused[#loc55, #loc56])
#loc250 = loc(fused[#loc57, #loc58])
#loc251 = loc(fused[#loc60, #loc59])
#loc252 = loc(fused[#loc61, #loc62])
#loc253 = loc(fused[#loc64, #loc58])
#loc254 = loc(fused[#loc69, #loc67])
#loc255 = loc(fused[#loc71, #loc70])
#loc256 = loc(fused[#loc75, #loc72])
#loc257 = loc(fused[#loc80, #loc81])
#loc258 = loc(fused[#loc82, #loc83])
#loc259 = loc(fused[#loc84, #loc85])
#loc260 = loc(fused[#loc86, #loc87])
#loc261 = loc(fused[#loc89, #loc90])
#loc262 = loc(fused[#loc91, #loc92])
#loc263 = loc(fused[#loc93, #loc94])
#loc264 = loc(fused[#loc93, #loc95])
#loc265 = loc(fused[#loc96, #loc97])
#loc266 = loc(fused[#loc100, #loc101])
#loc267 = loc(fused[#loc99, #loc101])
#loc268 = loc(fused[#loc98, #loc102])
#loc269 = loc(fused[#loc103, #loc102])
#loc270 = loc(fused[#loc104, #loc105])
#loc271 = loc(fused[#loc106, #loc107])
#loc272 = loc(fused[#loc108, #loc105])
#loc273 = loc(fused[#loc112, #loc113])
#loc274 = loc(fused[#loc115, #loc116, #loc117, #loc113])
#loc275 = loc(fused[#loc123, #loc124])
#loc276 = loc(fused[#loc126, #loc125])
#loc277 = loc(fused[#loc130, #loc131])
#loc278 = loc(fused[#loc134, #loc135])
#loc279 = loc(fused[#loc136, #loc137])
#loc280 = loc(fused[#loc139, #loc138])
#loc281 = loc(fused[#loc140, #loc141])
#loc282 = loc(fused[#loc143, #loc137])
#loc283 = loc(fused[#loc148, #loc146])
#loc284 = loc(fused[#loc150, #loc149])
#loc285 = loc(fused[#loc154, #loc151])
#loc286 = loc(fused[#loc159, #loc160])
#loc287 = loc(fused[#loc161, #loc162])
#loc288 = loc(fused[#loc163, #loc164])
#loc289 = loc(fused[#loc163, #loc165])
#loc290 = loc(fused[#loc166, #loc167])
#loc291 = loc(fused[#loc170, #loc171])
#loc292 = loc(fused[#loc169, #loc171])
#loc293 = loc(fused[#loc168, #loc172])
#loc294 = loc(fused[#loc173, #loc172])
#loc295 = loc(fused[#loc174, #loc175])
#loc296 = loc(fused[#loc176, #loc177])
#loc297 = loc(fused[#loc178, #loc175])
#loc298 = loc(fused[#loc182, #loc183])
#loc299 = loc(fused[#loc185, #loc183])
#loc300 = loc(fused[#loc190, #loc191])
#loc301 = loc(fused[#loc193, #loc192])
#loc302 = loc(fused[#loc197, #loc198])
#loc303 = loc(fused[#loc201, #loc202])
#loc304 = loc(fused[#loc203, #loc204])
#loc305 = loc(fused[#loc206, #loc205])
#loc306 = loc(fused[#loc207, #loc208])
#loc307 = loc(fused[#loc210, #loc204])
#loc308 = loc(fused[#loc215, #loc213])
#loc309 = loc(fused[#loc217, #loc216])
#loc310 = loc(fused[#loc221, #loc218])
