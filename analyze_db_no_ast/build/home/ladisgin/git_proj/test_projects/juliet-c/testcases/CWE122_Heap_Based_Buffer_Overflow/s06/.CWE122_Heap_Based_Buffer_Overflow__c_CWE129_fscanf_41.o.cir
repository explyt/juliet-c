!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":22:21)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":22:25)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":109:25)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":109:29)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":67:25)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":67:29)
#true = #cir.bool<true> : !cir.bool
#loc273 = loc(fused[#loc19, #loc20])
#loc305 = loc(fused[#loc104, #loc105])
#loc335 = loc(fused[#loc188, #loc189])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc265)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc266)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc267)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc268)
  cir.func private  @printIntLine(!s32i) loc(#loc269)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc270)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc14)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc271)
  cir.func internal private  @badSink(%arg0: !s32i loc(fused[#loc19, #loc20])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc273)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc21)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc275)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc276)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc28)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc29)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc29)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc277)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc278)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc28)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc279)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc276)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc34)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc35)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc35)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !s32i loc(#loc281)
        %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc36)
        cir.if %17 {
          %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc38)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc39)
          %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc40)
          cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc38)
        } loc(#loc282)
      } loc(#loc280)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc43)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc284)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc45)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc46)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc285)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc47)
          cir.condition(%17) loc(#loc47)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc49)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc50)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc51)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc52)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc287)
          } loc(#loc286)
          cir.yield loc(#loc42)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc53)
          %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc54)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc288)
          cir.yield loc(#loc283)
        } loc(#loc283)
      } loc(#loc283)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc57)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc58)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !s32i loc(#loc290)
        %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc59)
        cir.if %16 {
          %17 = cir.const #cir.int<1> : !s32i loc(#loc63)
          %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc64)
          %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
          %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc66)
          cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc292)
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc69)
            cir.store %21, %1 : !s32i, !cir.ptr<!s32i> loc(#loc294)
            cir.for : cond {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc71)
              %23 = cir.const #cir.int<10> : !s32i loc(#loc72)
              %24 = cir.cmp(lt, %22, %23) : !s32i, !s32i loc(#loc295)
              %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc73)
              cir.condition(%25) loc(#loc73)
            } body {
              cir.scope {
                %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc75)
                %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc76)
                %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc77)
                %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc75)
                cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc78)
              } loc(#loc296)
              cir.yield loc(#loc68)
            } step {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc79)
              %23 = cir.unary(inc, %22) : !s32i, !s32i loc(#loc80)
              cir.store %23, %1 : !s32i, !cir.ptr<!s32i> loc(#loc297)
              cir.yield loc(#loc293)
            } loc(#loc293)
          } loc(#loc293)
        } else {
          %17 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc14)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc14)
          cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc81)
        } loc(#loc291)
      } loc(#loc289)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc82)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc83)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc83)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc82)
    } loc(#loc274)
    cir.return loc(#loc18)
  } loc(#loc272)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc299)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc89)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc300)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc91)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc266)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc92)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc91)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc93)
    cir.call @badSink(%9) : (!s32i) -> () loc(#loc94)
    cir.return loc(#loc85)
  } loc(#loc298)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc302)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc97)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc303)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc99)
    cir.return loc(#loc96)
  } loc(#loc301)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc101)
  cir.func internal private  @goodB2GSink(%arg0: !s32i loc(fused[#loc104, #loc105])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc305)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc307)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc308)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc113)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc114)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc114)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc309)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc310)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc113)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc311)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc308)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc119)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc120)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc120)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !s32i loc(#loc313)
        %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc121)
        cir.if %17 {
          %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc123)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc124)
          %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc125)
          cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc123)
        } loc(#loc314)
      } loc(#loc312)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc128)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc316)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc130)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc131)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc317)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc132)
          cir.condition(%17) loc(#loc132)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc134)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc135)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc136)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc137)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc319)
          } loc(#loc318)
          cir.yield loc(#loc127)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc138)
          %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc139)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc320)
          cir.yield loc(#loc315)
        } loc(#loc315)
      } loc(#loc315)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc142)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc143)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !s32i loc(#loc322)
        %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc144)
        %17 = cir.ternary(%16, true {
          %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc146)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc147)
          %20 = cir.cmp(lt, %18, %19) : !s32i, !s32i loc(#loc323)
          %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc149)
          %22 = cir.ternary(%21, true {
            %23 = cir.const #true loc(#loc145)
            cir.yield %23 : !cir.bool loc(#loc145)
          }, false {
            %23 = cir.const #false loc(#loc145)
            cir.yield %23 : !cir.bool loc(#loc145)
          }) : (!cir.bool) -> !cir.bool loc(#loc145)
          cir.yield %22 : !cir.bool loc(#loc145)
        }, false {
          %18 = cir.const #false loc(#loc145)
          cir.yield %18 : !cir.bool loc(#loc145)
        }) : (!cir.bool) -> !cir.bool loc(#loc145)
        cir.if %17 {
          %18 = cir.const #cir.int<1> : !s32i loc(#loc153)
          %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc154)
          %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc155)
          %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc156)
          cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc325)
          cir.scope {
            %22 = cir.const #cir.int<0> : !s32i loc(#loc159)
            cir.store %22, %1 : !s32i, !cir.ptr<!s32i> loc(#loc327)
            cir.for : cond {
              %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc161)
              %24 = cir.const #cir.int<10> : !s32i loc(#loc162)
              %25 = cir.cmp(lt, %23, %24) : !s32i, !s32i loc(#loc328)
              %26 = cir.cast(int_to_bool, %25 : !s32i), !cir.bool loc(#loc163)
              cir.condition(%26) loc(#loc163)
            } body {
              cir.scope {
                %23 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc165)
                %24 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc166)
                %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc167)
                %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc165)
                cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc168)
              } loc(#loc329)
              cir.yield loc(#loc158)
            } step {
              %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc169)
              %24 = cir.unary(inc, %23) : !s32i, !s32i loc(#loc170)
              cir.store %24, %1 : !s32i, !cir.ptr<!s32i> loc(#loc330)
              cir.yield loc(#loc326)
            } loc(#loc326)
          } loc(#loc326)
        } else {
          %18 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc101)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc101)
          cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc171)
        } loc(#loc324)
      } loc(#loc321)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc172)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc173)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc173)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc172)
    } loc(#loc306)
    cir.return loc(#loc103)
  } loc(#loc304)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc332)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc178)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc179)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc333)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc181)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc266)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc182)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc183)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc183)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc181)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc184)
    cir.call @goodB2GSink(%9) : (!s32i) -> () loc(#loc185)
    cir.return loc(#loc175)
  } loc(#loc331)
  cir.func internal private  @goodG2BSink(%arg0: !s32i loc(fused[#loc188, #loc189])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc335)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc337)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc338)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc197)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc198)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc198)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc339)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc340)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc197)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc341)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc338)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc203)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc204)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc204)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !s32i loc(#loc343)
        %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc205)
        cir.if %17 {
          %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc207)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc208)
          %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc209)
          cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc207)
        } loc(#loc344)
      } loc(#loc342)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc212)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc346)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc214)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc215)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc347)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc216)
          cir.condition(%17) loc(#loc216)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc218)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc219)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc220)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc221)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc349)
          } loc(#loc348)
          cir.yield loc(#loc211)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc222)
          %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc223)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc350)
          cir.yield loc(#loc345)
        } loc(#loc345)
      } loc(#loc345)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc226)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc227)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !s32i loc(#loc352)
        %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc228)
        cir.if %16 {
          %17 = cir.const #cir.int<1> : !s32i loc(#loc232)
          %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc233)
          %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc234)
          %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc235)
          cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc354)
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc238)
            cir.store %21, %1 : !s32i, !cir.ptr<!s32i> loc(#loc356)
            cir.for : cond {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc240)
              %23 = cir.const #cir.int<10> : !s32i loc(#loc241)
              %24 = cir.cmp(lt, %22, %23) : !s32i, !s32i loc(#loc357)
              %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc242)
              cir.condition(%25) loc(#loc242)
            } body {
              cir.scope {
                %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc244)
                %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc245)
                %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc246)
                %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc244)
                cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc247)
              } loc(#loc358)
              cir.yield loc(#loc237)
            } step {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc248)
              %23 = cir.unary(inc, %22) : !s32i, !s32i loc(#loc249)
              cir.store %23, %1 : !s32i, !cir.ptr<!s32i> loc(#loc359)
              cir.yield loc(#loc355)
            } loc(#loc355)
          } loc(#loc355)
        } else {
          %17 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc250)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc250)
          cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc251)
        } loc(#loc353)
      } loc(#loc351)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc252)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc253)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc253)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc252)
    } loc(#loc336)
    cir.return loc(#loc187)
  } loc(#loc334)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc361)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc258)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc259)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc362)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc261)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc363)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc263)
    cir.call @goodG2BSink(%4) : (!s32i) -> () loc(#loc264)
    cir.return loc(#loc255)
  } loc(#loc360)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":58:19)
#loc6 = loc("/usr/include/stdlib.h":672:1)
#loc7 = loc("/usr/include/stdlib.h":672:45)
#loc8 = loc("/usr/include/stdlib.h":756:1)
#loc9 = loc("/usr/include/stdlib.h":756:70)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":46:23)
#loc15 = loc("/usr/include/stdlib.h":687:1)
#loc16 = loc("/usr/include/stdlib.h":687:32)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":22:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":50:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":23:1)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":24:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":49:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":25:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":25:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":26:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":26:54)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":26:31)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":26:38)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":26:43)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":26:53)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":27:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":27:39)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":27:13)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":27:23)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":27:20)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":27:29)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":27:30)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":27:36)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":27:35)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":29:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":32:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":29:18)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":29:14)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":29:21)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":29:25)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":29:23)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":30:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":31:25)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":31:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":31:20)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":31:21)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":29:30)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":29:29)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":35:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":47:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":35:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":35:21)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":35:18)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":36:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":43:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":45:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":37:28)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":37:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":37:20)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":37:24)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":39:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":42:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":39:21)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":39:17)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":39:24)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":39:28)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":39:26)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":40:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":41:30)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":41:37)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":41:38)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":41:17)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":39:33)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":39:32)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":46:13)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":48:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":48:14)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":52:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":60:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":54:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":54:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":56:13)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":56:12)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":56:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":58:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":58:12)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":59:13)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":59:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":148:1)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":152:1)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":150:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":150:13)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":151:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":151:13)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":132:23)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":109:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":136:1)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":110:1)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":111:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":135:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":112:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":112:13)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":113:9)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":113:54)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":113:31)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":113:38)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":113:43)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":113:53)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":114:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":114:39)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":114:13)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":114:23)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":114:20)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":114:29)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":114:30)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":114:36)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":114:35)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":116:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":119:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":116:18)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":116:14)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":116:21)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":116:25)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":116:23)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":117:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":118:25)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":118:13)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":118:20)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":118:21)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":116:30)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":116:29)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":121:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":133:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":121:13)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":121:21)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":121:18)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":121:23)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":121:26)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":121:34)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":121:36)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":121:31)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":122:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":129:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":131:9)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":123:28)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":123:13)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":123:20)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":123:24)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":125:13)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":128:13)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":125:21)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":125:17)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":125:24)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":125:28)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":125:26)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":126:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":127:30)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":127:37)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":127:38)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":127:17)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":125:33)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":125:32)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":132:13)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":134:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":134:14)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":138:1)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":146:1)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":140:5)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":140:9)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":142:13)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":142:12)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":142:5)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":144:5)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":144:12)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":144:19)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":145:17)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":145:5)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":67:1)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":95:1)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":68:1)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":69:5)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":94:5)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":70:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":70:13)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":71:9)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":71:54)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":71:31)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":71:38)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":71:43)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":71:53)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":72:9)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":72:39)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":72:13)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":72:23)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":72:20)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":72:29)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":72:30)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":72:36)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":72:35)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":74:9)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":77:9)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":74:18)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":74:14)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":74:21)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":74:25)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":74:23)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":75:9)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":76:25)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":76:13)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":76:20)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":76:21)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":74:30)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":74:29)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":80:9)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":92:9)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":80:13)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":80:21)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":80:18)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":81:9)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":88:9)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":90:9)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":82:28)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":82:13)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":82:20)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":82:24)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":84:13)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":87:13)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":84:21)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":84:17)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":84:24)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":84:28)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":84:26)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":85:13)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":86:30)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":86:37)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":86:38)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":86:17)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":84:33)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":84:32)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":91:23)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":91:13)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":93:9)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":93:14)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":97:1)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":106:1)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":99:5)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":99:9)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":101:13)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":101:12)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":101:5)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":104:12)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":104:5)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":105:17)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c":105:5)
#loc265 = loc(fused[#loc1, #loc2])
#loc266 = loc(fused[#loc3, #loc4])
#loc267 = loc(fused[#loc6, #loc7])
#loc268 = loc(fused[#loc8, #loc9])
#loc269 = loc(fused[#loc10, #loc11])
#loc270 = loc(fused[#loc12, #loc13])
#loc271 = loc(fused[#loc15, #loc16])
#loc272 = loc(fused[#loc17, #loc18])
#loc274 = loc(fused[#loc22, #loc23])
#loc275 = loc(fused[#loc24, #loc25])
#loc276 = loc(fused[#loc26, #loc27])
#loc277 = loc(fused[#loc30, #loc31])
#loc278 = loc(fused[#loc29, #loc31])
#loc279 = loc(fused[#loc28, #loc27])
#loc280 = loc(fused[#loc32, #loc33])
#loc281 = loc(fused[#loc34, #loc35])
#loc282 = loc(fused[#loc37, #loc33])
#loc283 = loc(fused[#loc41, #loc42])
#loc284 = loc(fused[#loc44, #loc43])
#loc285 = loc(fused[#loc45, #loc46])
#loc286 = loc(fused[#loc48, #loc42])
#loc287 = loc(fused[#loc50, #loc49])
#loc288 = loc(fused[#loc54, #loc53])
#loc289 = loc(fused[#loc55, #loc56])
#loc290 = loc(fused[#loc57, #loc58])
#loc291 = loc(fused[#loc60, #loc61, #loc62, #loc56])
#loc292 = loc(fused[#loc64, #loc63])
#loc293 = loc(fused[#loc67, #loc68])
#loc294 = loc(fused[#loc70, #loc69])
#loc295 = loc(fused[#loc71, #loc72])
#loc296 = loc(fused[#loc74, #loc68])
#loc297 = loc(fused[#loc80, #loc79])
#loc298 = loc(fused[#loc84, #loc85])
#loc299 = loc(fused[#loc86, #loc87])
#loc300 = loc(fused[#loc90, #loc88])
#loc301 = loc(fused[#loc95, #loc96])
#loc302 = loc(fused[#loc97, #loc98])
#loc303 = loc(fused[#loc99, #loc100])
#loc304 = loc(fused[#loc102, #loc103])
#loc306 = loc(fused[#loc107, #loc108])
#loc307 = loc(fused[#loc109, #loc110])
#loc308 = loc(fused[#loc111, #loc112])
#loc309 = loc(fused[#loc115, #loc116])
#loc310 = loc(fused[#loc114, #loc116])
#loc311 = loc(fused[#loc113, #loc112])
#loc312 = loc(fused[#loc117, #loc118])
#loc313 = loc(fused[#loc119, #loc120])
#loc314 = loc(fused[#loc122, #loc118])
#loc315 = loc(fused[#loc126, #loc127])
#loc316 = loc(fused[#loc129, #loc128])
#loc317 = loc(fused[#loc130, #loc131])
#loc318 = loc(fused[#loc133, #loc127])
#loc319 = loc(fused[#loc135, #loc134])
#loc320 = loc(fused[#loc139, #loc138])
#loc321 = loc(fused[#loc140, #loc141])
#loc322 = loc(fused[#loc142, #loc143])
#loc323 = loc(fused[#loc146, #loc148])
#loc324 = loc(fused[#loc150, #loc151, #loc152, #loc141])
#loc325 = loc(fused[#loc154, #loc153])
#loc326 = loc(fused[#loc157, #loc158])
#loc327 = loc(fused[#loc160, #loc159])
#loc328 = loc(fused[#loc161, #loc162])
#loc329 = loc(fused[#loc164, #loc158])
#loc330 = loc(fused[#loc170, #loc169])
#loc331 = loc(fused[#loc174, #loc175])
#loc332 = loc(fused[#loc176, #loc177])
#loc333 = loc(fused[#loc180, #loc178])
#loc334 = loc(fused[#loc186, #loc187])
#loc336 = loc(fused[#loc191, #loc192])
#loc337 = loc(fused[#loc193, #loc194])
#loc338 = loc(fused[#loc195, #loc196])
#loc339 = loc(fused[#loc199, #loc200])
#loc340 = loc(fused[#loc198, #loc200])
#loc341 = loc(fused[#loc197, #loc196])
#loc342 = loc(fused[#loc201, #loc202])
#loc343 = loc(fused[#loc203, #loc204])
#loc344 = loc(fused[#loc206, #loc202])
#loc345 = loc(fused[#loc210, #loc211])
#loc346 = loc(fused[#loc213, #loc212])
#loc347 = loc(fused[#loc214, #loc215])
#loc348 = loc(fused[#loc217, #loc211])
#loc349 = loc(fused[#loc219, #loc218])
#loc350 = loc(fused[#loc223, #loc222])
#loc351 = loc(fused[#loc224, #loc225])
#loc352 = loc(fused[#loc226, #loc227])
#loc353 = loc(fused[#loc229, #loc230, #loc231, #loc225])
#loc354 = loc(fused[#loc233, #loc232])
#loc355 = loc(fused[#loc236, #loc237])
#loc356 = loc(fused[#loc239, #loc238])
#loc357 = loc(fused[#loc240, #loc241])
#loc358 = loc(fused[#loc243, #loc237])
#loc359 = loc(fused[#loc249, #loc248])
#loc360 = loc(fused[#loc254, #loc255])
#loc361 = loc(fused[#loc256, #loc257])
#loc362 = loc(fused[#loc260, #loc258])
#loc363 = loc(fused[#loc262, #loc261])
