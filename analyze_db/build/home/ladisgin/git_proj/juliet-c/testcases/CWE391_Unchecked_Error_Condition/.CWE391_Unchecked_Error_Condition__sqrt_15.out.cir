!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc43 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":114:10)
#loc44 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":114:14)
#loc45 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":114:20)
#loc46 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":114:32)
#loc142 = loc(fused[#loc43, #loc44])
#loc143 = loc(fused[#loc45, #loc46])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc1)
  cir.func private @printDoubleLine(!cir.double) loc(#loc129)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc130)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc132)
    cir.br ^bb1 loc(#loc133)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<6> : !s32i loc(#loc13)
    cir.br ^bb2 loc(#loc11)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %1 : !s32i, ^bb7 [
      6: ^bb4
    ] loc(#loc11)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc14)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc134)
  ^bb5:  // pred: ^bb4
    %2 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc17)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc19)
    %5 = cir.cast(int_to_float, %4 : !s32i), !cir.double loc(#loc19)
    %6 = cir.call @sqrt(%5) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc17)
    cir.store %6, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc135)
    %7 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc22)
    cir.call @printDoubleLine(%7) : (!cir.double) -> () loc(#loc23)
    cir.br ^bb6 loc(#loc16)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8 loc(#loc24)
  ^bb7:  // pred: ^bb2
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc6)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc6)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc25)
    cir.br ^bb8 loc(#loc26)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc12)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc8)
  } loc(#loc131)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc137)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc138)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc136)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc139)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc140)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc40)
  cir.func @main(%arg0: !s32i loc(fused[#loc43, #loc44]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc45, #loc46])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc142)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc143)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc42)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc47)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc47)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc48)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc49)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc49)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc50)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc37)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    %8 = cir.get_global @CWE391_Unchecked_Error_Condition__sqrt_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc144)
    cir.call @CWE391_Unchecked_Error_Condition__sqrt_15_good() : () -> () loc(#loc52)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc38)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc39)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %13 = cir.get_global @CWE391_Unchecked_Error_Condition__sqrt_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc145)
    cir.call @CWE391_Unchecked_Error_Condition__sqrt_15_bad() : () -> () loc(#loc56)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc40)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc59)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc146)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc146)
    cir.return %17 : !s32i loc(#loc146)
  } loc(#loc141)
  cir.func private @__errno_location() -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc147)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"sqrt() failed\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc63)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc148)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc150)
    cir.br ^bb1 loc(#loc151)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<5> : !s32i loc(#loc72)
    cir.br ^bb2 loc(#loc70)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %1 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc70)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc73)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc74)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    cir.br ^bb12 loc(#loc76)
  ^bb5:  // pred: ^bb2
    cir.br ^bb6 loc(#loc152)
  ^bb6:  // pred: ^bb5
    %4 = cir.const #cir.int<0> : !s32i loc(#loc79)
    %5 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc80)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc153)
    %6 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc81)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc83)
    %9 = cir.cast(int_to_float, %8 : !s32i), !cir.double loc(#loc83)
    %10 = cir.call @sqrt(%9) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc81)
    cir.store %10, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc154)
    cir.br ^bb7 loc(#loc155)
  ^bb7:  // pred: ^bb6
    %11 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc88)
    %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc88)
    %13 = cir.const #cir.int<33> : !s32i loc(#loc89)
    %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc156)
    cir.brcond %14 ^bb8, ^bb9 loc(#loc157)
  ^bb8:  // pred: ^bb7
    %15 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc63)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc92)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc93)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc92)
    cir.br ^bb9 loc(#loc87)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc87)
  ^bb10:  // pred: ^bb9
    %19 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc94)
    cir.call @printDoubleLine(%19) : (!cir.double) -> () loc(#loc95)
    cir.br ^bb11 loc(#loc78)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc96)
  ^bb12:  // 2 preds: ^bb4, ^bb11
    cir.br ^bb13 loc(#loc71)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc67)
  } loc(#loc149)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc159)
    cir.br ^bb1 loc(#loc160)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<6> : !s32i loc(#loc103)
    cir.br ^bb2 loc(#loc101)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %1 : !s32i, ^bb11 [
      6: ^bb4
    ] loc(#loc101)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc104)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc161)
  ^bb5:  // pred: ^bb4
    %2 = cir.const #cir.int<0> : !s32i loc(#loc107)
    %3 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc108)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc162)
    %4 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc109)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc110)
    %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc111)
    %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc111)
    %8 = cir.call @sqrt(%7) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc109)
    cir.store %8, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc163)
    cir.br ^bb6 loc(#loc164)
  ^bb6:  // pred: ^bb5
    %9 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc116)
    %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc116)
    %11 = cir.const #cir.int<33> : !s32i loc(#loc117)
    %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc165)
    cir.brcond %12 ^bb7, ^bb8 loc(#loc166)
  ^bb7:  // pred: ^bb6
    %13 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc119)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc119)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc120)
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc121)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc122)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc121)
    cir.br ^bb8 loc(#loc115)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc115)
  ^bb9:  // pred: ^bb8
    %17 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc123)
    cir.call @printDoubleLine(%17) : (!cir.double) -> () loc(#loc124)
    cir.br ^bb10 loc(#loc106)
  ^bb10:  // pred: ^bb9
    cir.br ^bb12 loc(#loc125)
  ^bb11:  // pred: ^bb2
    %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc126)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc126)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc127)
    cir.br ^bb12 loc(#loc128)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc102)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc98)
  } loc(#loc158)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_15.c":0:0)
#loc1 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":38:1)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":38:41)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc6 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":38:19)
#loc7 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":24:1)
#loc8 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":41:1)
#loc9 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":30:9)
#loc10 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":30:16)
#loc11 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":26:5)
#loc12 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":40:5)
#loc13 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":26:12)
#loc14 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":28:5)
#loc15 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":29:5)
#loc16 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":34:5)
#loc17 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":31:32)
#loc18 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":31:46)
#loc19 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":31:45)
#loc20 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":31:9)
#loc21 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":31:47)
#loc22 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":33:25)
#loc23 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":33:9)
#loc24 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":35:5)
#loc25 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":38:9)
#loc26 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":39:9)
#loc27 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":99:1)
#loc28 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":103:1)
#loc29 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":101:5)
#loc30 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":101:11)
#loc31 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":102:5)
#loc32 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":102:11)
#loc33 = loc("/usr/include/stdlib.h":575:1)
#loc34 = loc("/usr/include/stdlib.h":575:41)
#loc35 = loc("/usr/include/time.h":76:1)
#loc36 = loc("/usr/include/time.h":76:38)
#loc37 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":119:15)
#loc38 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":121:15)
#loc39 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":124:15)
#loc40 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":126:15)
#loc41 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":114:1)
#loc42 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":129:1)
#loc47 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":115:1)
#loc48 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":117:27)
#loc49 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":117:22)
#loc50 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":117:5)
#loc51 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":119:5)
#loc52 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":120:5)
#loc53 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":120:52)
#loc54 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":121:5)
#loc55 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":124:5)
#loc56 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":125:5)
#loc57 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":125:51)
#loc58 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":126:5)
#loc59 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":128:12)
#loc60 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":128:5)
#loc61 = loc("/usr/include/errno.h":37:1)
#loc62 = loc("/usr/include/errno.h":37:45)
#loc63 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":64:23)
#loc64 = loc("/usr/include/stdlib.h":756:1)
#loc65 = loc("/usr/include/stdlib.h":756:70)
#loc66 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":48:1)
#loc67 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":71:1)
#loc68 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":58:9)
#loc69 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":58:16)
#loc70 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":50:5)
#loc71 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":70:5)
#loc72 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":50:12)
#loc73 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":52:5)
#loc74 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":54:19)
#loc75 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":54:9)
#loc76 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":55:9)
#loc77 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":57:5)
#loc78 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":68:5)
#loc79 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":59:17)
#loc80 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":59:9)
#loc81 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":60:32)
#loc82 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":60:46)
#loc83 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":60:45)
#loc84 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":60:9)
#loc85 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":60:47)
#loc86 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":62:9)
#loc87 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":66:9)
#loc88 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":62:13)
#loc89 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":62:22)
#loc90 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":63:9)
#loc91 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":64:13)
#loc92 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":65:13)
#loc93 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":65:18)
#loc94 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":67:25)
#loc95 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":67:9)
#loc96 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":69:5)
#loc97 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":74:1)
#loc98 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":97:1)
#loc99 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":80:9)
#loc100 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":80:16)
#loc101 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":76:5)
#loc102 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":96:5)
#loc103 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":76:12)
#loc104 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":78:5)
#loc105 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":79:5)
#loc106 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":90:5)
#loc107 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":81:17)
#loc108 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":81:9)
#loc109 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":82:32)
#loc110 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":82:46)
#loc111 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":82:45)
#loc112 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":82:9)
#loc113 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":82:47)
#loc114 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":84:9)
#loc115 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":88:9)
#loc116 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":84:13)
#loc117 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":84:22)
#loc118 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":85:9)
#loc119 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":86:23)
#loc120 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":86:13)
#loc121 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":87:13)
#loc122 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":87:18)
#loc123 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":89:25)
#loc124 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":89:9)
#loc125 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":91:5)
#loc126 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":94:19)
#loc127 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":94:9)
#loc128 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":95:9)
#loc129 = loc(fused[#loc2, #loc3])
#loc130 = loc(fused[#loc4, #loc5])
#loc131 = loc(fused[#loc7, #loc8])
#loc132 = loc(fused[#loc9, #loc10])
#loc133 = loc(fused[#loc11, #loc12])
#loc134 = loc(fused[#loc15, #loc16])
#loc135 = loc(fused[#loc20, #loc21])
#loc136 = loc(fused[#loc27, #loc28])
#loc137 = loc(fused[#loc29, #loc30])
#loc138 = loc(fused[#loc31, #loc32])
#loc139 = loc(fused[#loc33, #loc34])
#loc140 = loc(fused[#loc35, #loc36])
#loc141 = loc(fused[#loc41, #loc42])
#loc144 = loc(fused[#loc52, #loc53])
#loc145 = loc(fused[#loc56, #loc57])
#loc146 = loc(fused[#loc60, #loc59])
#loc147 = loc(fused[#loc61, #loc62])
#loc148 = loc(fused[#loc64, #loc65])
#loc149 = loc(fused[#loc66, #loc67])
#loc150 = loc(fused[#loc68, #loc69])
#loc151 = loc(fused[#loc70, #loc71])
#loc152 = loc(fused[#loc77, #loc78])
#loc153 = loc(fused[#loc80, #loc79])
#loc154 = loc(fused[#loc84, #loc85])
#loc155 = loc(fused[#loc86, #loc87])
#loc156 = loc(fused[#loc88, #loc89])
#loc157 = loc(fused[#loc90, #loc87])
#loc158 = loc(fused[#loc97, #loc98])
#loc159 = loc(fused[#loc99, #loc100])
#loc160 = loc(fused[#loc101, #loc102])
#loc161 = loc(fused[#loc105, #loc106])
#loc162 = loc(fused[#loc108, #loc107])
#loc163 = loc(fused[#loc112, #loc113])
#loc164 = loc(fused[#loc114, #loc115])
#loc165 = loc(fused[#loc116, #loc117])
#loc166 = loc(fused[#loc118, #loc115])
