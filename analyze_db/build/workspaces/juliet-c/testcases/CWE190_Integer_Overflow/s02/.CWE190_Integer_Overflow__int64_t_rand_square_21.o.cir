!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":28:21)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":28:29)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":60:26)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":60:34)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":93:26)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":93:34)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":121:25)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":121:33)
#loc166 = loc(fused[#loc9, #loc10])
#loc184 = loc(fused[#loc54, #loc55])
#loc198 = loc(fused[#loc96, #loc97])
#loc212 = loc(fused[#loc136, #loc137])
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc162)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc163)
  cir.func private @printLongLongLine(!s64i) loc(#loc164)
  cir.func internal private @badSink(%arg0: !s64i loc(fused[#loc9, #loc10])) extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc166)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc11)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc163)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc14)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc14)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc170)
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc20)
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc19)
          %7 = cir.binop(mul, %5, %6) nsw : !s64i loc(#loc20)
          cir.store %7, %4 : !s64i, !cir.ptr<!s64i> loc(#loc170)
          %8 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc21)
          cir.call @printLongLongLine(%8) : (!s64i) -> () loc(#loc22)
        } loc(#loc169)
      } loc(#loc168)
    } loc(#loc167)
    cir.return loc(#loc8)
  } loc(#loc165)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_square_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc172)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc27)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc173)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc29)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc29)
    %6 = cir.ternary(%5, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc29)
      %13 = cir.const #cir.int<60> : !s32i loc(#loc29)
      %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc29)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc29)
      %17 = cir.const #cir.int<45> : !s32i loc(#loc29)
      %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc29)
      %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc29)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc29)
      %22 = cir.const #cir.int<30> : !s32i loc(#loc29)
      %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc29)
      %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc29)
      %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
      %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc29)
      %27 = cir.const #cir.int<15> : !s32i loc(#loc29)
      %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc29)
      %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc29)
      %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
      %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc29)
      %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc29)
      cir.yield %32 : !u64i loc(#loc29)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc29)
      %13 = cir.const #cir.int<60> : !s32i loc(#loc29)
      %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc29)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc29)
      %17 = cir.const #cir.int<45> : !s32i loc(#loc29)
      %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc29)
      %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc29)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc29)
      %22 = cir.const #cir.int<30> : !s32i loc(#loc29)
      %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc29)
      %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc29)
      %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
      %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc29)
      %27 = cir.const #cir.int<15> : !s32i loc(#loc29)
      %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc29)
      %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc29)
      %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
      %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc29)
      %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc29)
      %33 = cir.unary(minus, %32) : !u64i, !u64i loc(#loc29)
      %34 = cir.const #cir.int<1> : !s32i loc(#loc29)
      %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc29)
      %36 = cir.binop(sub, %33, %35) : !u64i loc(#loc29)
      cir.yield %36 : !u64i loc(#loc29)
    }) : (!cir.bool) -> !u64i loc(#loc29)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc29)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc174)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %9 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc163)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc33)
    cir.call @badSink(%10) : (!s64i) -> () loc(#loc34)
    cir.return loc(#loc24)
  } loc(#loc171)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_square_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc177)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc178)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc179)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc41)
    cir.return loc(#loc36)
  } loc(#loc176)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc180)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc181)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc47)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr) loc(#loc182)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc51)
  cir.func internal private @goodB2G1Sink(%arg0: !s64i loc(fused[#loc54, #loc55])) extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc184)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc56)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc180)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc59)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc59)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc47)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc47)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc63)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc66)
          %5 = cir.call @imaxabs(%4) : (!s64i) -> !s64i side_effect(const) extra(#fn_attr) loc(#loc67)
          %6 = cir.cast(int_to_float, %5 : !s64i), !cir.long_double<!cir.f80> loc(#loc67)
          %7 = cir.get_global @sqrtl : !cir.ptr<!cir.func<(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80>>> loc(#loc68)
          %8 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc69)
          %9 = cir.cast(int_to_float, %8 : !s64i), !cir.long_double<!cir.f80> loc(#loc69)
          %10 = cir.call @sqrtl(%9) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc68)
          %11 = cir.cmp(le, %6, %10) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc188)
          cir.if %11 {
            %12 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc190)
            %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc76)
            %14 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc75)
            %15 = cir.binop(mul, %13, %14) nsw : !s64i loc(#loc76)
            cir.store %15, %12 : !s64i, !cir.ptr<!s64i> loc(#loc190)
            %16 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc77)
            cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc78)
          } else {
            %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc51)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc51)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc79)
          } loc(#loc189)
        } loc(#loc187)
      } loc(#loc186)
    } loc(#loc185)
    cir.return loc(#loc53)
  } loc(#loc183)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc192)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc84)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc193)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc86)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc86)
    %6 = cir.ternary(%5, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc86)
      %13 = cir.const #cir.int<60> : !s32i loc(#loc86)
      %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc86)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc86)
      %17 = cir.const #cir.int<45> : !s32i loc(#loc86)
      %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc86)
      %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc86)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc86)
      %22 = cir.const #cir.int<30> : !s32i loc(#loc86)
      %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc86)
      %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc86)
      %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
      %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc86)
      %27 = cir.const #cir.int<15> : !s32i loc(#loc86)
      %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc86)
      %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc86)
      %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
      %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc86)
      %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc86)
      cir.yield %32 : !u64i loc(#loc86)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc86)
      %13 = cir.const #cir.int<60> : !s32i loc(#loc86)
      %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc86)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc86)
      %17 = cir.const #cir.int<45> : !s32i loc(#loc86)
      %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc86)
      %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc86)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc86)
      %22 = cir.const #cir.int<30> : !s32i loc(#loc86)
      %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc86)
      %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc86)
      %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
      %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc86)
      %27 = cir.const #cir.int<15> : !s32i loc(#loc86)
      %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc86)
      %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc86)
      %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
      %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc86)
      %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc86)
      %33 = cir.unary(minus, %32) : !u64i, !u64i loc(#loc86)
      %34 = cir.const #cir.int<1> : !s32i loc(#loc86)
      %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc86)
      %36 = cir.binop(sub, %33, %35) : !u64i loc(#loc86)
      cir.yield %36 : !u64i loc(#loc86)
    }) : (!cir.bool) -> !u64i loc(#loc86)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc86)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc194)
    %8 = cir.const #cir.int<0> : !s32i loc(#loc88)
    %9 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc180)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc195)
    %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc90)
    cir.call @goodB2G1Sink(%10) : (!s64i) -> () loc(#loc91)
    cir.return loc(#loc81)
  } loc(#loc191)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc196)
  cir.func internal private @goodB2G2Sink(%arg0: !s64i loc(fused[#loc96, #loc97])) extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc198)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc98)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc196)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc101)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc101)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc105)
          %5 = cir.call @imaxabs(%4) : (!s64i) -> !s64i side_effect(const) extra(#fn_attr) loc(#loc106)
          %6 = cir.cast(int_to_float, %5 : !s64i), !cir.long_double<!cir.f80> loc(#loc106)
          %7 = cir.get_global @sqrtl : !cir.ptr<!cir.func<(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80>>> loc(#loc107)
          %8 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc108)
          %9 = cir.cast(int_to_float, %8 : !s64i), !cir.long_double<!cir.f80> loc(#loc108)
          %10 = cir.call @sqrtl(%9) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc107)
          %11 = cir.cmp(le, %6, %10) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc202)
          cir.if %11 {
            %12 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc204)
            %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc115)
            %14 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc114)
            %15 = cir.binop(mul, %13, %14) nsw : !s64i loc(#loc115)
            cir.store %15, %12 : !s64i, !cir.ptr<!s64i> loc(#loc204)
            %16 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc116)
            cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc117)
          } else {
            %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc118)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc118)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc119)
          } loc(#loc203)
        } loc(#loc201)
      } loc(#loc200)
    } loc(#loc199)
    cir.return loc(#loc95)
  } loc(#loc197)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc206)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc124)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc207)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc126)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc126)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc126)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc126)
    %6 = cir.ternary(%5, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc126)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc126)
      %13 = cir.const #cir.int<60> : !s32i loc(#loc126)
      %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc126)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc126)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc126)
      %17 = cir.const #cir.int<45> : !s32i loc(#loc126)
      %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc126)
      %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc126)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc126)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc126)
      %22 = cir.const #cir.int<30> : !s32i loc(#loc126)
      %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc126)
      %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc126)
      %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc126)
      %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc126)
      %27 = cir.const #cir.int<15> : !s32i loc(#loc126)
      %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc126)
      %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc126)
      %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc126)
      %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc126)
      %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc126)
      cir.yield %32 : !u64i loc(#loc126)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc126)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc126)
      %13 = cir.const #cir.int<60> : !s32i loc(#loc126)
      %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc126)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc126)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc126)
      %17 = cir.const #cir.int<45> : !s32i loc(#loc126)
      %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc126)
      %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc126)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc126)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc126)
      %22 = cir.const #cir.int<30> : !s32i loc(#loc126)
      %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc126)
      %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc126)
      %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc126)
      %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc126)
      %27 = cir.const #cir.int<15> : !s32i loc(#loc126)
      %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc126)
      %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc126)
      %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc126)
      %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc126)
      %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc126)
      %33 = cir.unary(minus, %32) : !u64i, !u64i loc(#loc126)
      %34 = cir.const #cir.int<1> : !s32i loc(#loc126)
      %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc126)
      %36 = cir.binop(sub, %33, %35) : !u64i loc(#loc126)
      cir.yield %36 : !u64i loc(#loc126)
    }) : (!cir.bool) -> !u64i loc(#loc126)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc126)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc208)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc128)
    %9 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc196)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc130)
    cir.call @goodB2G2Sink(%10) : (!s64i) -> () loc(#loc131)
    cir.return loc(#loc121)
  } loc(#loc205)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc210)
  cir.func internal private @goodG2BSink(%arg0: !s64i loc(fused[#loc136, #loc137])) extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc212)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc138)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc210)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc141)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc141)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc216)
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc147)
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc146)
          %7 = cir.binop(mul, %5, %6) nsw : !s64i loc(#loc147)
          cir.store %7, %4 : !s64i, !cir.ptr<!s64i> loc(#loc216)
          %8 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc148)
          cir.call @printLongLongLine(%8) : (!s64i) -> () loc(#loc149)
        } loc(#loc215)
      } loc(#loc214)
    } loc(#loc213)
    cir.return loc(#loc135)
  } loc(#loc211)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc218)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc154)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc219)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc156)
    %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc156)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc220)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc158)
    %5 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc210)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc221)
    %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc160)
    cir.call @goodG2BSink(%6) : (!s64i) -> () loc(#loc161)
    cir.return loc(#loc151)
  } loc(#loc217)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_21.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":26:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":26:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":28:1)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":38:1)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":29:1)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":30:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":37:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":30:8)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":31:5)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":32:9)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":36:9)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":34:13)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":34:37)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":34:30)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":35:31)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":35:13)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":40:1)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":48:1)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":42:5)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":42:13)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":43:12)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":43:5)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":45:21)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":45:5)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":46:17)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":46:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":47:13)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":47:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":143:1)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":148:1)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":145:5)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":145:14)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":146:5)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":146:14)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":147:5)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":147:13)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":55:1)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":55:29)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":65:19)
#loc48 = loc("/usr/include/inttypes.h":351:1)
#loc49 = loc("/usr/include/inttypes.h":351:74)
#loc50 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":77:23)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":60:1)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":80:1)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":61:1)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":62:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":79:5)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":62:8)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":63:5)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":66:5)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":68:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":65:9)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":70:9)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":78:9)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":70:31)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":70:13)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":70:40)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":70:46)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":70:55)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":71:9)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":74:9)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":76:9)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":72:13)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":72:37)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":72:30)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":73:31)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":73:13)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":77:13)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":82:1)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":90:1)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":84:5)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":84:13)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":85:12)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":85:5)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":87:21)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":87:5)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":88:22)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":88:5)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":89:18)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":89:5)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":56:1)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":56:29)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":93:1)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":108:1)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":94:1)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":95:5)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":107:5)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":95:8)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":96:5)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":98:9)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":106:9)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":98:31)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":98:13)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":98:40)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":98:46)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":98:55)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":99:9)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":102:9)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":104:9)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":100:13)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":100:37)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":100:30)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":101:31)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":101:13)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":105:23)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":105:13)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":110:1)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":118:1)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":112:5)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":112:13)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":113:12)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":113:5)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":115:21)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":115:5)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":116:22)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":116:5)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":117:18)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":117:5)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":57:1)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":57:28)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":121:1)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":131:1)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":122:1)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":123:5)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":130:5)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":123:8)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":124:5)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":125:9)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":129:9)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":127:13)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":127:37)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":127:30)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":128:31)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":128:13)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":133:1)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":141:1)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":135:5)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":135:13)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":136:12)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":136:5)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":138:12)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":138:5)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":139:21)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":139:5)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":140:17)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_rand_square_21.c":140:5)
#loc162 = loc(fused[#loc1, #loc2])
#loc163 = loc(fused[#loc3, #loc4])
#loc164 = loc(fused[#loc5, #loc6])
#loc165 = loc(fused[#loc7, #loc8])
#loc167 = loc(fused[#loc12, #loc13])
#loc168 = loc(fused[#loc15, #loc13])
#loc169 = loc(fused[#loc16, #loc17])
#loc170 = loc(fused[#loc18, #loc19])
#loc171 = loc(fused[#loc23, #loc24])
#loc172 = loc(fused[#loc25, #loc26])
#loc173 = loc(fused[#loc28, #loc27])
#loc174 = loc(fused[#loc30, #loc29])
#loc175 = loc(fused[#loc32, #loc31])
#loc176 = loc(fused[#loc35, #loc36])
#loc177 = loc(fused[#loc37, #loc38])
#loc178 = loc(fused[#loc39, #loc40])
#loc179 = loc(fused[#loc41, #loc42])
#loc180 = loc(fused[#loc43, #loc44])
#loc181 = loc(fused[#loc45, #loc46])
#loc182 = loc(fused[#loc48, #loc49])
#loc183 = loc(fused[#loc52, #loc53])
#loc185 = loc(fused[#loc57, #loc58])
#loc186 = loc(fused[#loc60, #loc61, #loc62, #loc58])
#loc187 = loc(fused[#loc64, #loc65])
#loc188 = loc(fused[#loc67, #loc70])
#loc189 = loc(fused[#loc71, #loc72, #loc73, #loc65])
#loc190 = loc(fused[#loc74, #loc75])
#loc191 = loc(fused[#loc80, #loc81])
#loc192 = loc(fused[#loc82, #loc83])
#loc193 = loc(fused[#loc85, #loc84])
#loc194 = loc(fused[#loc87, #loc86])
#loc195 = loc(fused[#loc89, #loc88])
#loc196 = loc(fused[#loc92, #loc93])
#loc197 = loc(fused[#loc94, #loc95])
#loc199 = loc(fused[#loc99, #loc100])
#loc200 = loc(fused[#loc102, #loc100])
#loc201 = loc(fused[#loc103, #loc104])
#loc202 = loc(fused[#loc106, #loc109])
#loc203 = loc(fused[#loc110, #loc111, #loc112, #loc104])
#loc204 = loc(fused[#loc113, #loc114])
#loc205 = loc(fused[#loc120, #loc121])
#loc206 = loc(fused[#loc122, #loc123])
#loc207 = loc(fused[#loc125, #loc124])
#loc208 = loc(fused[#loc127, #loc126])
#loc209 = loc(fused[#loc129, #loc128])
#loc210 = loc(fused[#loc132, #loc133])
#loc211 = loc(fused[#loc134, #loc135])
#loc213 = loc(fused[#loc139, #loc140])
#loc214 = loc(fused[#loc142, #loc140])
#loc215 = loc(fused[#loc143, #loc144])
#loc216 = loc(fused[#loc145, #loc146])
#loc217 = loc(fused[#loc150, #loc151])
#loc218 = loc(fused[#loc152, #loc153])
#loc219 = loc(fused[#loc155, #loc154])
#loc220 = loc(fused[#loc157, #loc156])
#loc221 = loc(fused[#loc159, #loc158])
