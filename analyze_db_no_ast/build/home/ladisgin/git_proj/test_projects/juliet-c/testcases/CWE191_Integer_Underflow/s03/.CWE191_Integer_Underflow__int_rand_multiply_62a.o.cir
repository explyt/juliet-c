!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_multiply_62a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @_ZN46CWE191_Integer_Underflow__int_rand_multiply_629badSourceERi(!cir.ptr<!s32i>) loc(#loc77)
  cir.func private  @printIntLine(!s32i) loc(#loc78)
  cir.func  @_ZN46CWE191_Integer_Underflow__int_rand_multiply_623badEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc80)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    cir.call @_ZN46CWE191_Integer_Underflow__int_rand_multiply_629badSourceERi(%0) : (!cir.ptr<!s32i>) -> () loc(#loc11)
    cir.scope {
      %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc14)
      %3 = cir.const #cir.int<0> : !s32i loc(#loc15)
      %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc83)
      cir.if %4 {
        %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc85)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
        %7 = cir.const #cir.int<2> : !s32i loc(#loc18)
        %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc19)
        cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc85)
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc20)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc21)
      } loc(#loc84)
    } loc(#loc82)
    cir.return loc(#loc6)
  } loc(#loc79)
  cir.func private  @_ZN46CWE191_Integer_Underflow__int_rand_multiply_6213goodG2BSourceERi(!cir.ptr<!s32i>) loc(#loc86)
  cir.func internal private  @_ZN46CWE191_Integer_Underflow__int_rand_multiply_62L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc88)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc28)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc89)
    cir.call @_ZN46CWE191_Integer_Underflow__int_rand_multiply_6213goodG2BSourceERi(%0) : (!cir.ptr<!s32i>) -> () loc(#loc30)
    cir.scope {
      %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
      %3 = cir.const #cir.int<0> : !s32i loc(#loc34)
      %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc91)
      cir.if %4 {
        %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc93)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc38)
        %7 = cir.const #cir.int<2> : !s32i loc(#loc37)
        %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc38)
        cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc93)
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc39)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc40)
      } loc(#loc92)
    } loc(#loc90)
    cir.return loc(#loc25)
  } loc(#loc87)
  cir.func private  @_ZN46CWE191_Integer_Underflow__int_rand_multiply_6213goodB2GSourceERi(!cir.ptr<!s32i>) loc(#loc94)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc95)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc45)
  cir.func internal private  @_ZN46CWE191_Integer_Underflow__int_rand_multiply_62L7goodB2GEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc97)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc50)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc98)
    cir.call @_ZN46CWE191_Integer_Underflow__int_rand_multiply_6213goodB2GSourceERi(%0) : (!cir.ptr<!s32i>) -> () loc(#loc52)
    cir.scope {
      %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc55)
      %3 = cir.const #cir.int<0> : !s32i loc(#loc56)
      %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc100)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc60)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc61)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc61)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc61)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc61)
          %10 = cir.const #cir.int<2> : !s32i loc(#loc62)
          %11 = cir.binop(div, %9, %10) : !s32i loc(#loc103)
          %12 = cir.cmp(gt, %5, %11) : !s32i, !cir.bool loc(#loc104)
          cir.if %12 {
            %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc106)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
            %15 = cir.const #cir.int<2> : !s32i loc(#loc68)
            %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc69)
            cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc106)
            %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc70)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc71)
          } else {
            %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc45)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc45)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc72)
          } loc(#loc105)
        } loc(#loc102)
      } loc(#loc101)
    } loc(#loc99)
    cir.return loc(#loc47)
  } loc(#loc96)
  cir.func  @_ZN46CWE191_Integer_Underflow__int_rand_multiply_624goodEv() extra(#fn_attr) {
    cir.call @_ZN46CWE191_Integer_Underflow__int_rand_multiply_62L7goodG2BEv() : () -> () loc(#loc75)
    cir.call @_ZN46CWE191_Integer_Underflow__int_rand_multiply_62L7goodB2GEv() : () -> () loc(#loc76)
    cir.return loc(#loc74)
  } loc(#loc107)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":0:0)
#loc1 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":26:1)
#loc2 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":26:25)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":28:1)
#loc6 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":40:1)
#loc7 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":30:5)
#loc8 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":30:9)
#loc9 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":32:12)
#loc10 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":32:5)
#loc11 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":33:5)
#loc12 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":34:5)
#loc13 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":39:5)
#loc14 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":34:8)
#loc15 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":34:15)
#loc16 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":35:5)
#loc17 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":37:9)
#loc18 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":37:29)
#loc19 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":37:22)
#loc20 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":38:22)
#loc21 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":38:9)
#loc22 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":47:1)
#loc23 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":47:29)
#loc24 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":49:1)
#loc25 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":61:1)
#loc26 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":51:5)
#loc27 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":51:9)
#loc28 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":53:12)
#loc29 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":53:5)
#loc30 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":54:5)
#loc31 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":55:5)
#loc32 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":60:5)
#loc33 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":55:8)
#loc34 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":55:15)
#loc35 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":56:5)
#loc36 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":58:9)
#loc37 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":58:29)
#loc38 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":58:22)
#loc39 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":59:22)
#loc40 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":59:9)
#loc41 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":64:1)
#loc42 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":64:29)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc45 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":82:23)
#loc46 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":66:1)
#loc47 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":85:1)
#loc48 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":68:5)
#loc49 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":68:9)
#loc50 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":70:12)
#loc51 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":70:5)
#loc52 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":71:5)
#loc53 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":72:5)
#loc54 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":84:5)
#loc55 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":72:8)
#loc56 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":72:15)
#loc57 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":73:5)
#loc58 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":75:9)
#loc59 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":83:9)
#loc60 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":75:13)
#loc61 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":75:21)
#loc62 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":75:29)
#loc63 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":75:30)
#loc64 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":76:9)
#loc65 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":79:9)
#loc66 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":81:9)
#loc67 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":77:13)
#loc68 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":77:33)
#loc69 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":77:26)
#loc70 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":78:26)
#loc71 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":78:13)
#loc72 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":82:13)
#loc73 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":87:1)
#loc74 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":91:1)
#loc75 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":89:5)
#loc76 = loc("CWE191_Integer_Underflow__int_rand_multiply_62a.cpp":90:5)
#loc77 = loc(fused[#loc1, #loc2])
#loc78 = loc(fused[#loc3, #loc4])
#loc79 = loc(fused[#loc5, #loc6])
#loc80 = loc(fused[#loc7, #loc8])
#loc81 = loc(fused[#loc10, #loc9])
#loc82 = loc(fused[#loc12, #loc13])
#loc83 = loc(fused[#loc14, #loc15])
#loc84 = loc(fused[#loc16, #loc13])
#loc85 = loc(fused[#loc17, #loc18])
#loc86 = loc(fused[#loc22, #loc23])
#loc87 = loc(fused[#loc24, #loc25])
#loc88 = loc(fused[#loc26, #loc27])
#loc89 = loc(fused[#loc29, #loc28])
#loc90 = loc(fused[#loc31, #loc32])
#loc91 = loc(fused[#loc33, #loc34])
#loc92 = loc(fused[#loc35, #loc32])
#loc93 = loc(fused[#loc36, #loc37])
#loc94 = loc(fused[#loc41, #loc42])
#loc95 = loc(fused[#loc43, #loc44])
#loc96 = loc(fused[#loc46, #loc47])
#loc97 = loc(fused[#loc48, #loc49])
#loc98 = loc(fused[#loc51, #loc50])
#loc99 = loc(fused[#loc53, #loc54])
#loc100 = loc(fused[#loc55, #loc56])
#loc101 = loc(fused[#loc57, #loc54])
#loc102 = loc(fused[#loc58, #loc59])
#loc103 = loc(fused[#loc61, #loc62])
#loc104 = loc(fused[#loc60, #loc63])
#loc105 = loc(fused[#loc64, #loc65, #loc66, #loc59])
#loc106 = loc(fused[#loc67, #loc68])
#loc107 = loc(fused[#loc73, #loc74])
