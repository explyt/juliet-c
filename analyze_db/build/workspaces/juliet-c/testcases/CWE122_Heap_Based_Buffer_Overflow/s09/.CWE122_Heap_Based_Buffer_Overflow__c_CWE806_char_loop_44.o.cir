!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":23:21)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":23:28)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":59:25)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":59:32)
#loc163 = loc(fused[#loc9, #loc10])
#loc193 = loc(fused[#loc89, #loc90])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc159)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc160)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc161)
  cir.func internal private @badSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc9, #loc10])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc163)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc11)
    cir.scope {
      %1 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc165)
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc166)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc167)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc165)
      cir.store %4, %1 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc165)
      %5 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc19)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc20)
      %7 = cir.call @strlen(%6) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc19)
      cir.store %7, %3 : !u64i, !cir.ptr<!u64i> loc(#loc168)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc25)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc25)
        cir.store %20, %2 : !u64i, !cir.ptr<!u64i> loc(#loc170)
        cir.for : cond {
          %21 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc27)
          %22 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc28)
          %23 = cir.cmp(lt, %21, %22) : !u64i, !cir.bool loc(#loc171)
          cir.condition(%23) loc(#loc29)
        } body {
          cir.scope {
            %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc31)
            %22 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc32)
            %23 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %22 : !u64i), !cir.ptr<!s8i> loc(#loc33)
            %24 = cir.load %23 : !cir.ptr<!s8i>, !s8i loc(#loc31)
            %25 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc34)
            %26 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc35)
            %27 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %25 : !u64i), !cir.ptr<!s8i> loc(#loc35)
            cir.store %24, %27 : !s8i, !cir.ptr<!s8i> loc(#loc173)
          } loc(#loc172)
          cir.yield loc(#loc24)
        } step {
          %21 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc36)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc37)
          cir.store %22, %2 : !u64i, !cir.ptr<!u64i> loc(#loc174)
          cir.yield loc(#loc169)
        } loc(#loc169)
      } loc(#loc169)
      %8 = cir.const #cir.int<0> : !s32i loc(#loc38)
      %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc38)
      %10 = cir.const #cir.int<50> : !s32i loc(#loc39)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc40)
      %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc39)
      %13 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc41)
      %14 = cir.ptr_stride(%13 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc41)
      cir.store %9, %14 : !s8i, !cir.ptr<!s8i> loc(#loc175)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc42)
      cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc43)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc44)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc45)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc45)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc44)
    } loc(#loc164)
    cir.return loc(#loc8)
  } loc(#loc162)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc176)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc177)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc179)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc180)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>> loc(#loc55)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>> loc(#loc180)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc56)
    %4 = cir.const #cir.int<100> : !s32i loc(#loc57)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc57)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc181)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc182)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc56)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc183)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc184)
    cir.scope {
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
      %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc65)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc65)
      %29 = cir.cmp(eq, %26, %28) : !cir.ptr<!s8i>, !cir.bool loc(#loc186)
      cir.if %29 {
        %30 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc67)
        %31 = cir.const #cir.int<1> : !s32i loc(#loc68)
        %32 = cir.unary(minus, %31) nsw : !s32i, !s32i loc(#loc69)
        cir.call @exit(%32) : (!s32i) -> () extra(#fn_attr) loc(#loc67)
      } loc(#loc187)
    } loc(#loc185)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc70)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc70)
    %12 = cir.const #cir.int<65> : !s32i loc(#loc71)
    %13 = cir.const #cir.int<100> : !s32i loc(#loc72)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc73)
    %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc72)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc72)
    cir.libc.memset %16 bytes from %11 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc188)
    %17 = cir.const #cir.int<0> : !s32i loc(#loc76)
    %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc76)
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc77)
    %20 = cir.const #cir.int<100> : !s32i loc(#loc78)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc78)
    %23 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc80)
    cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc189)
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>> loc(#loc81)
    %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc82)
    cir.call %24(%25) : (!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc81)
    cir.return loc(#loc51)
  } loc(#loc178)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc191)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc85)
    cir.return loc(#loc84)
  } loc(#loc190)
  cir.func internal private @goodG2BSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc89, #loc90])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc193)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc91)
    cir.scope {
      %1 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc195)
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc196)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc197)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc195)
      cir.store %4, %1 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc195)
      %5 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc99)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc100)
      %7 = cir.call @strlen(%6) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc99)
      cir.store %7, %3 : !u64i, !cir.ptr<!u64i> loc(#loc198)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc105)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc105)
        cir.store %20, %2 : !u64i, !cir.ptr<!u64i> loc(#loc200)
        cir.for : cond {
          %21 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc107)
          %22 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc108)
          %23 = cir.cmp(lt, %21, %22) : !u64i, !cir.bool loc(#loc201)
          cir.condition(%23) loc(#loc109)
        } body {
          cir.scope {
            %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc111)
            %22 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc112)
            %23 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %22 : !u64i), !cir.ptr<!s8i> loc(#loc113)
            %24 = cir.load %23 : !cir.ptr<!s8i>, !s8i loc(#loc111)
            %25 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc114)
            %26 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc115)
            %27 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %25 : !u64i), !cir.ptr<!s8i> loc(#loc115)
            cir.store %24, %27 : !s8i, !cir.ptr<!s8i> loc(#loc203)
          } loc(#loc202)
          cir.yield loc(#loc104)
        } step {
          %21 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc116)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc117)
          cir.store %22, %2 : !u64i, !cir.ptr<!u64i> loc(#loc204)
          cir.yield loc(#loc199)
        } loc(#loc199)
      } loc(#loc199)
      %8 = cir.const #cir.int<0> : !s32i loc(#loc118)
      %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc118)
      %10 = cir.const #cir.int<50> : !s32i loc(#loc119)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc120)
      %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc119)
      %13 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc121)
      %14 = cir.ptr_stride(%13 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc121)
      cir.store %9, %14 : !s8i, !cir.ptr<!s8i> loc(#loc205)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc122)
      cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc123)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc124)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc125)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc125)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc124)
    } loc(#loc194)
    cir.return loc(#loc88)
  } loc(#loc192)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc207)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc208)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>> loc(#loc131)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>> loc(#loc208)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc132)
    %4 = cir.const #cir.int<100> : !s32i loc(#loc133)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc133)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc209)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc210)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc132)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc211)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc212)
    cir.scope {
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc140)
      %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc141)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc141)
      %29 = cir.cmp(eq, %26, %28) : !cir.ptr<!s8i>, !cir.bool loc(#loc214)
      cir.if %29 {
        %30 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc143)
        %31 = cir.const #cir.int<1> : !s32i loc(#loc144)
        %32 = cir.unary(minus, %31) nsw : !s32i, !s32i loc(#loc145)
        cir.call @exit(%32) : (!s32i) -> () extra(#fn_attr) loc(#loc143)
      } loc(#loc215)
    } loc(#loc213)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc146)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc146)
    %12 = cir.const #cir.int<65> : !s32i loc(#loc147)
    %13 = cir.const #cir.int<50> : !s32i loc(#loc148)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc149)
    %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc148)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc148)
    cir.libc.memset %16 bytes from %11 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc216)
    %17 = cir.const #cir.int<0> : !s32i loc(#loc152)
    %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc152)
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
    %20 = cir.const #cir.int<50> : !s32i loc(#loc154)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc155)
    %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc154)
    %23 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc156)
    cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc217)
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>> loc(#loc157)
    %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc158)
    cir.call %24(%25) : (!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc157)
    cir.return loc(#loc127)
  } loc(#loc206)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("/usr/include/stdlib.h":687:1)
#loc6 = loc("/usr/include/stdlib.h":687:32)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":23:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":38:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":24:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":25:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":37:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":26:9)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":26:25)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":27:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":27:16)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":27:19)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":28:19)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":28:26)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":28:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":28:30)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":30:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":33:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":30:18)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":30:14)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":30:21)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":30:25)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":30:23)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":31:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":32:23)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":32:28)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":32:29)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":32:18)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":32:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":30:35)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":30:34)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":34:22)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":34:14)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":34:17)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":34:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":35:19)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":35:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":36:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":36:14)
#loc46 = loc("/usr/include/stdlib.h":672:1)
#loc47 = loc("/usr/include/stdlib.h":672:45)
#loc48 = loc("/usr/include/stdlib.h":756:1)
#loc49 = loc("/usr/include/stdlib.h":756:70)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":40:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":52:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":42:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":42:12)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":44:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":44:32)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":45:20)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":45:27)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":45:31)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":45:42)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":45:43)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":45:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":46:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":46:33)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":46:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":46:17)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":46:23)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":46:24)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":46:30)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":46:29)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":48:12)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":48:18)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":48:23)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":48:27)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":48:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":48:28)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":49:19)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":49:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":49:10)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":49:14)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":49:15)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":51:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":51:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":88:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":91:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":90:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":90:13)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":59:1)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":74:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":60:1)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":61:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":73:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":62:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":62:25)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":63:9)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":63:16)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":63:19)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":64:19)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":64:26)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":64:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":64:30)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":66:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":69:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":66:18)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":66:14)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":66:21)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":66:25)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":66:23)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":67:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":68:23)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":68:28)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":68:29)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":68:18)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":68:13)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":66:35)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":66:34)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":70:22)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":70:14)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":70:17)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":70:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":71:19)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":71:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":72:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":72:14)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":76:1)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":86:1)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":78:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":78:12)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":79:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":79:32)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":80:20)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":80:27)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":80:31)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":80:42)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":80:43)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":80:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":81:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":81:33)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":81:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":81:17)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":81:23)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":81:24)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":81:30)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":81:29)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":83:12)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":83:18)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":83:23)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":83:26)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":83:5)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":83:27)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":84:18)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":84:5)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":84:10)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":84:13)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":84:14)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":85:5)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c":85:13)
#loc159 = loc(fused[#loc1, #loc2])
#loc160 = loc(fused[#loc3, #loc4])
#loc161 = loc(fused[#loc5, #loc6])
#loc162 = loc(fused[#loc7, #loc8])
#loc164 = loc(fused[#loc12, #loc13])
#loc165 = loc(fused[#loc14, #loc15])
#loc166 = loc(fused[#loc16, #loc17])
#loc167 = loc(fused[#loc16, #loc18])
#loc168 = loc(fused[#loc21, #loc22])
#loc169 = loc(fused[#loc23, #loc24])
#loc170 = loc(fused[#loc26, #loc25])
#loc171 = loc(fused[#loc27, #loc28])
#loc172 = loc(fused[#loc30, #loc24])
#loc173 = loc(fused[#loc35, #loc33])
#loc174 = loc(fused[#loc37, #loc36])
#loc175 = loc(fused[#loc41, #loc38])
#loc176 = loc(fused[#loc46, #loc47])
#loc177 = loc(fused[#loc48, #loc49])
#loc178 = loc(fused[#loc50, #loc51])
#loc179 = loc(fused[#loc52, #loc53])
#loc180 = loc(fused[#loc54, #loc55])
#loc181 = loc(fused[#loc58, #loc59])
#loc182 = loc(fused[#loc57, #loc59])
#loc183 = loc(fused[#loc56, #loc60])
#loc184 = loc(fused[#loc61, #loc60])
#loc185 = loc(fused[#loc62, #loc63])
#loc186 = loc(fused[#loc64, #loc65])
#loc187 = loc(fused[#loc66, #loc63])
#loc188 = loc(fused[#loc74, #loc75])
#loc189 = loc(fused[#loc77, #loc76])
#loc190 = loc(fused[#loc83, #loc84])
#loc191 = loc(fused[#loc85, #loc86])
#loc192 = loc(fused[#loc87, #loc88])
#loc194 = loc(fused[#loc92, #loc93])
#loc195 = loc(fused[#loc94, #loc95])
#loc196 = loc(fused[#loc96, #loc97])
#loc197 = loc(fused[#loc96, #loc98])
#loc198 = loc(fused[#loc101, #loc102])
#loc199 = loc(fused[#loc103, #loc104])
#loc200 = loc(fused[#loc106, #loc105])
#loc201 = loc(fused[#loc107, #loc108])
#loc202 = loc(fused[#loc110, #loc104])
#loc203 = loc(fused[#loc115, #loc113])
#loc204 = loc(fused[#loc117, #loc116])
#loc205 = loc(fused[#loc121, #loc118])
#loc206 = loc(fused[#loc126, #loc127])
#loc207 = loc(fused[#loc128, #loc129])
#loc208 = loc(fused[#loc130, #loc131])
#loc209 = loc(fused[#loc134, #loc135])
#loc210 = loc(fused[#loc133, #loc135])
#loc211 = loc(fused[#loc132, #loc136])
#loc212 = loc(fused[#loc137, #loc136])
#loc213 = loc(fused[#loc138, #loc139])
#loc214 = loc(fused[#loc140, #loc141])
#loc215 = loc(fused[#loc142, #loc139])
#loc216 = loc(fused[#loc150, #loc151])
#loc217 = loc(fused[#loc153, #loc152])
