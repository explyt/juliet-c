!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":77:10)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":77:14)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":77:20)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":77:32)
#loc146 = loc(fused[#loc65, #loc66])
#loc147 = loc(fused[#loc67, #loc68])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc123)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc124)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc125)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc126)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc127)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc129)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc15)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc16)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc16)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc130)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc131)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc15)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc132)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc133)
    cir.scope {
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
      %23 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc24)
      %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc24)
      %25 = cir.cmp(eq, %22, %24) : !cir.ptr<!s8i>, !cir.bool loc(#loc135)
      cir.if %25 {
        %26 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc26)
        %27 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %28 = cir.unary(minus, %27) : !s32i, !s32i loc(#loc28)
        cir.call @exit(%28) : (!s32i) -> () extra(#fn_attr) loc(#loc26)
      } loc(#loc136)
    } loc(#loc134)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc29)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc29)
    %10 = cir.const #cir.int<65> : !s32i loc(#loc30)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc31)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc31)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc31)
    cir.libc.memset %14 bytes from %9 set to %10 : !cir.ptr<!void>, !s32i, !u64i loc(#loc137)
    %15 = cir.const #cir.int<0> : !s32i loc(#loc35)
    %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc35)
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
    %18 = cir.const #cir.int<100> : !s32i loc(#loc37)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc38)
    %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc37)
    %21 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %20 : !s32i), !cir.ptr<!s8i> loc(#loc39)
    cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc138)
    cir.scope {
      %22 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc140)
      %23 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc140)
      cir.store %23, %22 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc140)
      %24 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc44)
      %25 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc45)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc46)
      %27 = cir.call @strcat(%25, %26) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc44)
      %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
      cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc48)
      %29 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc49)
      %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
      %31 = cir.cast(bitcast, %30 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc50)
      cir.call @free(%31) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc49)
    } loc(#loc139)
    cir.return loc(#loc12)
  } loc(#loc128)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc142)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc53)
    cir.return loc(#loc52)
  } loc(#loc141)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc143)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc144)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc62)
  cir.func @main(%arg0: !s32i loc(fused[#loc65, #loc66]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc67, #loc68])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc146)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc147)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc64)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc69)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc69)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc70)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc71)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc71)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc72)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc59)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01_good : !cir.ptr<!cir.func<!void ()>> loc(#loc148)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01_good() : () -> () loc(#loc74)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc60)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc61)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc149)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01_bad() : () -> () loc(#loc78)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc62)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc81)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc150)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc150)
    cir.return %17 : !s32i loc(#loc150)
  } loc(#loc145)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc152)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc87)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc88)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc88)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc153)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc154)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc87)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc155)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc156)
    cir.scope {
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc95)
      %23 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc96)
      %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc96)
      %25 = cir.cmp(eq, %22, %24) : !cir.ptr<!s8i>, !cir.bool loc(#loc158)
      cir.if %25 {
        %26 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc98)
        %27 = cir.const #cir.int<1> : !s32i loc(#loc99)
        %28 = cir.unary(minus, %27) : !s32i, !s32i loc(#loc100)
        cir.call @exit(%28) : (!s32i) -> () extra(#fn_attr) loc(#loc98)
      } loc(#loc159)
    } loc(#loc157)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc101)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc101)
    %10 = cir.const #cir.int<65> : !s32i loc(#loc102)
    %11 = cir.const #cir.int<50> : !s32i loc(#loc103)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc104)
    %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc103)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc103)
    cir.libc.memset %14 bytes from %9 set to %10 : !cir.ptr<!void>, !s32i, !u64i loc(#loc160)
    %15 = cir.const #cir.int<0> : !s32i loc(#loc107)
    %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc107)
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc108)
    %18 = cir.const #cir.int<50> : !s32i loc(#loc109)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc110)
    %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc109)
    %21 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %20 : !s32i), !cir.ptr<!s8i> loc(#loc111)
    cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc161)
    cir.scope {
      %22 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc163)
      %23 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc163)
      cir.store %23, %22 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc163)
      %24 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc116)
      %25 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc117)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc118)
      %27 = cir.call @strcat(%25, %26) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc116)
      %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc119)
      cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc120)
      %29 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc121)
      %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc122)
      %31 = cir.cast(bitcast, %30 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc122)
      cir.call @free(%31) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc121)
    } loc(#loc162)
    cir.return loc(#loc84)
  } loc(#loc151)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":149:1)
#loc6 = loc("/usr/include/string.h":150:14)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":23:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":38:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":25:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":25:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":26:20)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":26:27)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":26:31)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":26:42)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":26:43)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":26:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":27:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":27:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":27:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":27:17)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":27:23)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":27:24)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":27:30)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":27:29)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":29:12)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":29:18)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":29:23)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":29:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":29:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":29:28)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":30:19)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":30:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":30:10)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":30:14)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":30:15)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":31:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":37:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":32:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":32:25)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":34:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":34:16)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":34:22)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":35:19)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":35:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":36:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":36:14)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":62:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":65:1)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":64:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":64:13)
#loc55 = loc("/usr/include/stdlib.h":575:1)
#loc56 = loc("/usr/include/stdlib.h":575:41)
#loc57 = loc("/usr/include/time.h":76:1)
#loc58 = loc("/usr/include/time.h":76:38)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":82:15)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":84:15)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":87:15)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":89:15)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":77:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":92:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":78:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":80:27)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":80:22)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":80:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":82:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":83:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":83:63)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":84:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":87:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":88:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":88:62)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":89:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":91:12)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":91:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":45:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":60:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":47:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":47:12)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":48:20)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":48:27)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":48:31)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":48:42)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":48:43)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":48:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":49:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":49:33)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":49:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":49:17)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":49:23)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":49:24)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":49:30)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":49:29)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":51:12)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":51:18)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":51:23)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":51:26)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":51:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":51:27)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":52:18)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":52:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":52:10)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":52:13)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":52:14)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":53:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":59:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":54:9)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":54:25)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":56:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":56:16)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":56:22)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":57:19)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":57:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":58:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c":58:14)
#loc123 = loc(fused[#loc1, #loc2])
#loc124 = loc(fused[#loc3, #loc4])
#loc125 = loc(fused[#loc5, #loc6])
#loc126 = loc(fused[#loc7, #loc8])
#loc127 = loc(fused[#loc9, #loc10])
#loc128 = loc(fused[#loc11, #loc12])
#loc129 = loc(fused[#loc13, #loc14])
#loc130 = loc(fused[#loc17, #loc18])
#loc131 = loc(fused[#loc16, #loc18])
#loc132 = loc(fused[#loc15, #loc19])
#loc133 = loc(fused[#loc20, #loc19])
#loc134 = loc(fused[#loc21, #loc22])
#loc135 = loc(fused[#loc23, #loc24])
#loc136 = loc(fused[#loc25, #loc22])
#loc137 = loc(fused[#loc33, #loc34])
#loc138 = loc(fused[#loc36, #loc35])
#loc139 = loc(fused[#loc40, #loc41])
#loc140 = loc(fused[#loc42, #loc43])
#loc141 = loc(fused[#loc51, #loc52])
#loc142 = loc(fused[#loc53, #loc54])
#loc143 = loc(fused[#loc55, #loc56])
#loc144 = loc(fused[#loc57, #loc58])
#loc145 = loc(fused[#loc63, #loc64])
#loc148 = loc(fused[#loc74, #loc75])
#loc149 = loc(fused[#loc78, #loc79])
#loc150 = loc(fused[#loc82, #loc81])
#loc151 = loc(fused[#loc83, #loc84])
#loc152 = loc(fused[#loc85, #loc86])
#loc153 = loc(fused[#loc89, #loc90])
#loc154 = loc(fused[#loc88, #loc90])
#loc155 = loc(fused[#loc87, #loc91])
#loc156 = loc(fused[#loc92, #loc91])
#loc157 = loc(fused[#loc93, #loc94])
#loc158 = loc(fused[#loc95, #loc96])
#loc159 = loc(fused[#loc97, #loc94])
#loc160 = loc(fused[#loc105, #loc106])
#loc161 = loc(fused[#loc108, #loc107])
#loc162 = loc(fused[#loc112, #loc113])
#loc163 = loc(fused[#loc114, #loc115])
