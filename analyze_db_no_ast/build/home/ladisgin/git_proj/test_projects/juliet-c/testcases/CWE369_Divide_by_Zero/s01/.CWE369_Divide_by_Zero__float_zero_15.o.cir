!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc183)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc3)
  cir.func private  @printIntLine(!s32i) loc(#loc184)
  cir.func no_proto  @CWE369_Divide_by_Zero__float_zero_15_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc186)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc10)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc187)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc14)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc15)
        cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc189)
        cir.break loc(#loc17)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc3)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc3)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc18)
        cir.break loc(#loc19)
      }
      ] loc(#loc12)
    } loc(#loc188)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc22)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc192)
          %4 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc27)
          %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc28)
          %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc28)
          %7 = cir.binop(div, %4, %6) : !cir.double loc(#loc193)
          %8 = cir.cast(float_to_int, %7 : !cir.double), !s32i loc(#loc193)
          cir.store %8, %3 : !s32i, !cir.ptr<!s32i> loc(#loc192)
          %9 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc29)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc30)
        } loc(#loc191)
        cir.break loc(#loc31)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc32)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc32)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc33)
        cir.break loc(#loc34)
      }
      ] loc(#loc20)
    } loc(#loc190)
    cir.return loc(#loc7)
  } loc(#loc185)
  cir.func no_proto  @CWE369_Divide_by_Zero__float_zero_15_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc195)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc196)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc197)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc198)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    cir.return loc(#loc36)
  } loc(#loc194)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc45)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc200)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc50)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc201)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc54)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc55)
        cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc203)
        cir.break loc(#loc57)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc58)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc58)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc59)
        cir.break loc(#loc60)
      }
      ] loc(#loc52)
    } loc(#loc202)
    cir.scope {
      %2 = cir.const #cir.int<8> : !s32i loc(#loc63)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc64)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc64)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc65)
        cir.break loc(#loc66)
      },
      case (default) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc69)
          %4 = cir.cast(floating, %3 : !cir.float), !cir.double loc(#loc69)
          %5 = cir.fabs %4 : !cir.double loc(#loc69)
          %6 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc70)
          %7 = cir.cmp(gt, %5, %6) : !cir.double, !s32i loc(#loc206)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc72)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc208)
            %10 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc78)
            %11 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc79)
            %12 = cir.cast(floating, %11 : !cir.float), !cir.double loc(#loc79)
            %13 = cir.binop(div, %10, %12) : !cir.double loc(#loc209)
            %14 = cir.cast(float_to_int, %13 : !cir.double), !s32i loc(#loc209)
            cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc208)
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc80)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc81)
          } else {
            %9 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc45)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc45)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc82)
          } loc(#loc207)
        } loc(#loc205)
        cir.break loc(#loc83)
      }
      ] loc(#loc61)
    } loc(#loc204)
    cir.return loc(#loc47)
  } loc(#loc199)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc211)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc88)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc212)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc92)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc93)
        cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc214)
        cir.break loc(#loc95)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc96)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc96)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc97)
        cir.break loc(#loc98)
      }
      ] loc(#loc90)
    } loc(#loc213)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc101)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc104)
          %4 = cir.cast(floating, %3 : !cir.float), !cir.double loc(#loc104)
          %5 = cir.fabs %4 : !cir.double loc(#loc104)
          %6 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc105)
          %7 = cir.cmp(gt, %5, %6) : !cir.double, !s32i loc(#loc217)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc107)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc219)
            %10 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc113)
            %11 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc114)
            %12 = cir.cast(floating, %11 : !cir.float), !cir.double loc(#loc114)
            %13 = cir.binop(div, %10, %12) : !cir.double loc(#loc220)
            %14 = cir.cast(float_to_int, %13 : !cir.double), !s32i loc(#loc220)
            cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc219)
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc115)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc116)
          } else {
            %9 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc117)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc117)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc118)
          } loc(#loc218)
        } loc(#loc216)
        cir.break loc(#loc119)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc120)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc120)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc121)
        cir.break loc(#loc122)
      }
      ] loc(#loc99)
    } loc(#loc215)
    cir.return loc(#loc85)
  } loc(#loc210)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc222)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc127)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc223)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc131)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc132)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc132)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc133)
        cir.break loc(#loc134)
      },
      case (default) {
        %3 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc135)
        cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc225)
        cir.break loc(#loc137)
      }
      ] loc(#loc129)
    } loc(#loc224)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc140)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc228)
          %4 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc145)
          %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc146)
          %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc146)
          %7 = cir.binop(div, %4, %6) : !cir.double loc(#loc229)
          %8 = cir.cast(float_to_int, %7 : !cir.double), !s32i loc(#loc229)
          cir.store %8, %3 : !s32i, !cir.ptr<!s32i> loc(#loc228)
          %9 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc147)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc148)
        } loc(#loc227)
        cir.break loc(#loc149)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc150)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc150)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc151)
        cir.break loc(#loc152)
      }
      ] loc(#loc138)
    } loc(#loc226)
    cir.return loc(#loc124)
  } loc(#loc221)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc231)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc157)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc232)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc161)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc162)
        cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc234)
        cir.break loc(#loc164)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc165)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc165)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc166)
        cir.break loc(#loc167)
      }
      ] loc(#loc159)
    } loc(#loc233)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc170)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc237)
          %4 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc175)
          %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc176)
          %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc176)
          %7 = cir.binop(div, %4, %6) : !cir.double loc(#loc238)
          %8 = cir.cast(float_to_int, %7 : !cir.double), !s32i loc(#loc238)
          cir.store %8, %3 : !s32i, !cir.ptr<!s32i> loc(#loc237)
          %9 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc177)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc178)
        } loc(#loc236)
        cir.break loc(#loc179)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc180)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc180)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc181)
        cir.break loc(#loc182)
      }
      ] loc(#loc168)
    } loc(#loc235)
    cir.return loc(#loc154)
  } loc(#loc230)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_15.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE369_Divide_by_Zero__float_zero_15.c":37:19)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc6 = loc("CWE369_Divide_by_Zero__float_zero_15.c":24:1)
#loc7 = loc("CWE369_Divide_by_Zero__float_zero_15.c":54:1)
#loc8 = loc("CWE369_Divide_by_Zero__float_zero_15.c":26:5)
#loc9 = loc("CWE369_Divide_by_Zero__float_zero_15.c":26:11)
#loc10 = loc("CWE369_Divide_by_Zero__float_zero_15.c":28:12)
#loc11 = loc("CWE369_Divide_by_Zero__float_zero_15.c":28:5)
#loc12 = loc("CWE369_Divide_by_Zero__float_zero_15.c":29:5)
#loc13 = loc("CWE369_Divide_by_Zero__float_zero_15.c":39:5)
#loc14 = loc("CWE369_Divide_by_Zero__float_zero_15.c":29:12)
#loc15 = loc("CWE369_Divide_by_Zero__float_zero_15.c":33:16)
#loc16 = loc("CWE369_Divide_by_Zero__float_zero_15.c":33:9)
#loc17 = loc("CWE369_Divide_by_Zero__float_zero_15.c":34:9)
#loc18 = loc("CWE369_Divide_by_Zero__float_zero_15.c":37:9)
#loc19 = loc("CWE369_Divide_by_Zero__float_zero_15.c":38:9)
#loc20 = loc("CWE369_Divide_by_Zero__float_zero_15.c":40:5)
#loc21 = loc("CWE369_Divide_by_Zero__float_zero_15.c":53:5)
#loc22 = loc("CWE369_Divide_by_Zero__float_zero_15.c":40:12)
#loc23 = loc("CWE369_Divide_by_Zero__float_zero_15.c":43:5)
#loc24 = loc("CWE369_Divide_by_Zero__float_zero_15.c":47:5)
#loc25 = loc("CWE369_Divide_by_Zero__float_zero_15.c":45:9)
#loc26 = loc("CWE369_Divide_by_Zero__float_zero_15.c":45:40)
#loc27 = loc("CWE369_Divide_by_Zero__float_zero_15.c":45:28)
#loc28 = loc("CWE369_Divide_by_Zero__float_zero_15.c":45:36)
#loc29 = loc("CWE369_Divide_by_Zero__float_zero_15.c":46:22)
#loc30 = loc("CWE369_Divide_by_Zero__float_zero_15.c":46:9)
#loc31 = loc("CWE369_Divide_by_Zero__float_zero_15.c":48:5)
#loc32 = loc("CWE369_Divide_by_Zero__float_zero_15.c":51:19)
#loc33 = loc("CWE369_Divide_by_Zero__float_zero_15.c":51:9)
#loc34 = loc("CWE369_Divide_by_Zero__float_zero_15.c":52:9)
#loc35 = loc("CWE369_Divide_by_Zero__float_zero_15.c":202:1)
#loc36 = loc("CWE369_Divide_by_Zero__float_zero_15.c":208:1)
#loc37 = loc("CWE369_Divide_by_Zero__float_zero_15.c":204:5)
#loc38 = loc("CWE369_Divide_by_Zero__float_zero_15.c":204:14)
#loc39 = loc("CWE369_Divide_by_Zero__float_zero_15.c":205:5)
#loc40 = loc("CWE369_Divide_by_Zero__float_zero_15.c":205:14)
#loc41 = loc("CWE369_Divide_by_Zero__float_zero_15.c":206:5)
#loc42 = loc("CWE369_Divide_by_Zero__float_zero_15.c":206:14)
#loc43 = loc("CWE369_Divide_by_Zero__float_zero_15.c":207:5)
#loc44 = loc("CWE369_Divide_by_Zero__float_zero_15.c":207:14)
#loc45 = loc("CWE369_Divide_by_Zero__float_zero_15.c":92:23)
#loc46 = loc("CWE369_Divide_by_Zero__float_zero_15.c":61:1)
#loc47 = loc("CWE369_Divide_by_Zero__float_zero_15.c":96:1)
#loc48 = loc("CWE369_Divide_by_Zero__float_zero_15.c":63:5)
#loc49 = loc("CWE369_Divide_by_Zero__float_zero_15.c":63:11)
#loc50 = loc("CWE369_Divide_by_Zero__float_zero_15.c":65:12)
#loc51 = loc("CWE369_Divide_by_Zero__float_zero_15.c":65:5)
#loc52 = loc("CWE369_Divide_by_Zero__float_zero_15.c":66:5)
#loc53 = loc("CWE369_Divide_by_Zero__float_zero_15.c":76:5)
#loc54 = loc("CWE369_Divide_by_Zero__float_zero_15.c":66:12)
#loc55 = loc("CWE369_Divide_by_Zero__float_zero_15.c":70:16)
#loc56 = loc("CWE369_Divide_by_Zero__float_zero_15.c":70:9)
#loc57 = loc("CWE369_Divide_by_Zero__float_zero_15.c":71:9)
#loc58 = loc("CWE369_Divide_by_Zero__float_zero_15.c":74:19)
#loc59 = loc("CWE369_Divide_by_Zero__float_zero_15.c":74:9)
#loc60 = loc("CWE369_Divide_by_Zero__float_zero_15.c":75:9)
#loc61 = loc("CWE369_Divide_by_Zero__float_zero_15.c":77:5)
#loc62 = loc("CWE369_Divide_by_Zero__float_zero_15.c":95:5)
#loc63 = loc("CWE369_Divide_by_Zero__float_zero_15.c":77:12)
#loc64 = loc("CWE369_Divide_by_Zero__float_zero_15.c":81:19)
#loc65 = loc("CWE369_Divide_by_Zero__float_zero_15.c":81:9)
#loc66 = loc("CWE369_Divide_by_Zero__float_zero_15.c":82:9)
#loc67 = loc("CWE369_Divide_by_Zero__float_zero_15.c":85:9)
#loc68 = loc("CWE369_Divide_by_Zero__float_zero_15.c":93:9)
#loc69 = loc("CWE369_Divide_by_Zero__float_zero_15.c":85:17)
#loc70 = loc("CWE369_Divide_by_Zero__float_zero_15.c":85:25)
#loc71 = loc("CWE369_Divide_by_Zero__float_zero_15.c":85:12)
#loc72 = loc("CWE369_Divide_by_Zero__float_zero_15.c":85:23)
#loc73 = loc("CWE369_Divide_by_Zero__float_zero_15.c":86:9)
#loc74 = loc("CWE369_Divide_by_Zero__float_zero_15.c":89:9)
#loc75 = loc("CWE369_Divide_by_Zero__float_zero_15.c":91:9)
#loc76 = loc("CWE369_Divide_by_Zero__float_zero_15.c":87:13)
#loc77 = loc("CWE369_Divide_by_Zero__float_zero_15.c":87:44)
#loc78 = loc("CWE369_Divide_by_Zero__float_zero_15.c":87:32)
#loc79 = loc("CWE369_Divide_by_Zero__float_zero_15.c":87:40)
#loc80 = loc("CWE369_Divide_by_Zero__float_zero_15.c":88:26)
#loc81 = loc("CWE369_Divide_by_Zero__float_zero_15.c":88:13)
#loc82 = loc("CWE369_Divide_by_Zero__float_zero_15.c":92:13)
#loc83 = loc("CWE369_Divide_by_Zero__float_zero_15.c":94:9)
#loc84 = loc("CWE369_Divide_by_Zero__float_zero_15.c":99:1)
#loc85 = loc("CWE369_Divide_by_Zero__float_zero_15.c":134:1)
#loc86 = loc("CWE369_Divide_by_Zero__float_zero_15.c":101:5)
#loc87 = loc("CWE369_Divide_by_Zero__float_zero_15.c":101:11)
#loc88 = loc("CWE369_Divide_by_Zero__float_zero_15.c":103:12)
#loc89 = loc("CWE369_Divide_by_Zero__float_zero_15.c":103:5)
#loc90 = loc("CWE369_Divide_by_Zero__float_zero_15.c":104:5)
#loc91 = loc("CWE369_Divide_by_Zero__float_zero_15.c":114:5)
#loc92 = loc("CWE369_Divide_by_Zero__float_zero_15.c":104:12)
#loc93 = loc("CWE369_Divide_by_Zero__float_zero_15.c":108:16)
#loc94 = loc("CWE369_Divide_by_Zero__float_zero_15.c":108:9)
#loc95 = loc("CWE369_Divide_by_Zero__float_zero_15.c":109:9)
#loc96 = loc("CWE369_Divide_by_Zero__float_zero_15.c":112:19)
#loc97 = loc("CWE369_Divide_by_Zero__float_zero_15.c":112:9)
#loc98 = loc("CWE369_Divide_by_Zero__float_zero_15.c":113:9)
#loc99 = loc("CWE369_Divide_by_Zero__float_zero_15.c":115:5)
#loc100 = loc("CWE369_Divide_by_Zero__float_zero_15.c":133:5)
#loc101 = loc("CWE369_Divide_by_Zero__float_zero_15.c":115:12)
#loc102 = loc("CWE369_Divide_by_Zero__float_zero_15.c":119:9)
#loc103 = loc("CWE369_Divide_by_Zero__float_zero_15.c":127:9)
#loc104 = loc("CWE369_Divide_by_Zero__float_zero_15.c":119:17)
#loc105 = loc("CWE369_Divide_by_Zero__float_zero_15.c":119:25)
#loc106 = loc("CWE369_Divide_by_Zero__float_zero_15.c":119:12)
#loc107 = loc("CWE369_Divide_by_Zero__float_zero_15.c":119:23)
#loc108 = loc("CWE369_Divide_by_Zero__float_zero_15.c":120:9)
#loc109 = loc("CWE369_Divide_by_Zero__float_zero_15.c":123:9)
#loc110 = loc("CWE369_Divide_by_Zero__float_zero_15.c":125:9)
#loc111 = loc("CWE369_Divide_by_Zero__float_zero_15.c":121:13)
#loc112 = loc("CWE369_Divide_by_Zero__float_zero_15.c":121:44)
#loc113 = loc("CWE369_Divide_by_Zero__float_zero_15.c":121:32)
#loc114 = loc("CWE369_Divide_by_Zero__float_zero_15.c":121:40)
#loc115 = loc("CWE369_Divide_by_Zero__float_zero_15.c":122:26)
#loc116 = loc("CWE369_Divide_by_Zero__float_zero_15.c":122:13)
#loc117 = loc("CWE369_Divide_by_Zero__float_zero_15.c":126:23)
#loc118 = loc("CWE369_Divide_by_Zero__float_zero_15.c":126:13)
#loc119 = loc("CWE369_Divide_by_Zero__float_zero_15.c":128:9)
#loc120 = loc("CWE369_Divide_by_Zero__float_zero_15.c":131:19)
#loc121 = loc("CWE369_Divide_by_Zero__float_zero_15.c":131:9)
#loc122 = loc("CWE369_Divide_by_Zero__float_zero_15.c":132:9)
#loc123 = loc("CWE369_Divide_by_Zero__float_zero_15.c":137:1)
#loc124 = loc("CWE369_Divide_by_Zero__float_zero_15.c":167:1)
#loc125 = loc("CWE369_Divide_by_Zero__float_zero_15.c":139:5)
#loc126 = loc("CWE369_Divide_by_Zero__float_zero_15.c":139:11)
#loc127 = loc("CWE369_Divide_by_Zero__float_zero_15.c":141:12)
#loc128 = loc("CWE369_Divide_by_Zero__float_zero_15.c":141:5)
#loc129 = loc("CWE369_Divide_by_Zero__float_zero_15.c":142:5)
#loc130 = loc("CWE369_Divide_by_Zero__float_zero_15.c":152:5)
#loc131 = loc("CWE369_Divide_by_Zero__float_zero_15.c":142:12)
#loc132 = loc("CWE369_Divide_by_Zero__float_zero_15.c":146:19)
#loc133 = loc("CWE369_Divide_by_Zero__float_zero_15.c":146:9)
#loc134 = loc("CWE369_Divide_by_Zero__float_zero_15.c":147:9)
#loc135 = loc("CWE369_Divide_by_Zero__float_zero_15.c":150:16)
#loc136 = loc("CWE369_Divide_by_Zero__float_zero_15.c":150:9)
#loc137 = loc("CWE369_Divide_by_Zero__float_zero_15.c":151:9)
#loc138 = loc("CWE369_Divide_by_Zero__float_zero_15.c":153:5)
#loc139 = loc("CWE369_Divide_by_Zero__float_zero_15.c":166:5)
#loc140 = loc("CWE369_Divide_by_Zero__float_zero_15.c":153:12)
#loc141 = loc("CWE369_Divide_by_Zero__float_zero_15.c":156:5)
#loc142 = loc("CWE369_Divide_by_Zero__float_zero_15.c":160:5)
#loc143 = loc("CWE369_Divide_by_Zero__float_zero_15.c":158:9)
#loc144 = loc("CWE369_Divide_by_Zero__float_zero_15.c":158:40)
#loc145 = loc("CWE369_Divide_by_Zero__float_zero_15.c":158:28)
#loc146 = loc("CWE369_Divide_by_Zero__float_zero_15.c":158:36)
#loc147 = loc("CWE369_Divide_by_Zero__float_zero_15.c":159:22)
#loc148 = loc("CWE369_Divide_by_Zero__float_zero_15.c":159:9)
#loc149 = loc("CWE369_Divide_by_Zero__float_zero_15.c":161:5)
#loc150 = loc("CWE369_Divide_by_Zero__float_zero_15.c":164:19)
#loc151 = loc("CWE369_Divide_by_Zero__float_zero_15.c":164:9)
#loc152 = loc("CWE369_Divide_by_Zero__float_zero_15.c":165:9)
#loc153 = loc("CWE369_Divide_by_Zero__float_zero_15.c":170:1)
#loc154 = loc("CWE369_Divide_by_Zero__float_zero_15.c":200:1)
#loc155 = loc("CWE369_Divide_by_Zero__float_zero_15.c":172:5)
#loc156 = loc("CWE369_Divide_by_Zero__float_zero_15.c":172:11)
#loc157 = loc("CWE369_Divide_by_Zero__float_zero_15.c":174:12)
#loc158 = loc("CWE369_Divide_by_Zero__float_zero_15.c":174:5)
#loc159 = loc("CWE369_Divide_by_Zero__float_zero_15.c":175:5)
#loc160 = loc("CWE369_Divide_by_Zero__float_zero_15.c":185:5)
#loc161 = loc("CWE369_Divide_by_Zero__float_zero_15.c":175:12)
#loc162 = loc("CWE369_Divide_by_Zero__float_zero_15.c":179:16)
#loc163 = loc("CWE369_Divide_by_Zero__float_zero_15.c":179:9)
#loc164 = loc("CWE369_Divide_by_Zero__float_zero_15.c":180:9)
#loc165 = loc("CWE369_Divide_by_Zero__float_zero_15.c":183:19)
#loc166 = loc("CWE369_Divide_by_Zero__float_zero_15.c":183:9)
#loc167 = loc("CWE369_Divide_by_Zero__float_zero_15.c":184:9)
#loc168 = loc("CWE369_Divide_by_Zero__float_zero_15.c":186:5)
#loc169 = loc("CWE369_Divide_by_Zero__float_zero_15.c":199:5)
#loc170 = loc("CWE369_Divide_by_Zero__float_zero_15.c":186:12)
#loc171 = loc("CWE369_Divide_by_Zero__float_zero_15.c":189:5)
#loc172 = loc("CWE369_Divide_by_Zero__float_zero_15.c":193:5)
#loc173 = loc("CWE369_Divide_by_Zero__float_zero_15.c":191:9)
#loc174 = loc("CWE369_Divide_by_Zero__float_zero_15.c":191:40)
#loc175 = loc("CWE369_Divide_by_Zero__float_zero_15.c":191:28)
#loc176 = loc("CWE369_Divide_by_Zero__float_zero_15.c":191:36)
#loc177 = loc("CWE369_Divide_by_Zero__float_zero_15.c":192:22)
#loc178 = loc("CWE369_Divide_by_Zero__float_zero_15.c":192:9)
#loc179 = loc("CWE369_Divide_by_Zero__float_zero_15.c":194:5)
#loc180 = loc("CWE369_Divide_by_Zero__float_zero_15.c":197:19)
#loc181 = loc("CWE369_Divide_by_Zero__float_zero_15.c":197:9)
#loc182 = loc("CWE369_Divide_by_Zero__float_zero_15.c":198:9)
#loc183 = loc(fused[#loc1, #loc2])
#loc184 = loc(fused[#loc4, #loc5])
#loc185 = loc(fused[#loc6, #loc7])
#loc186 = loc(fused[#loc8, #loc9])
#loc187 = loc(fused[#loc11, #loc10])
#loc188 = loc(fused[#loc12, #loc13])
#loc189 = loc(fused[#loc16, #loc15])
#loc190 = loc(fused[#loc20, #loc21])
#loc191 = loc(fused[#loc23, #loc24])
#loc192 = loc(fused[#loc25, #loc26])
#loc193 = loc(fused[#loc27, #loc28])
#loc194 = loc(fused[#loc35, #loc36])
#loc195 = loc(fused[#loc37, #loc38])
#loc196 = loc(fused[#loc39, #loc40])
#loc197 = loc(fused[#loc41, #loc42])
#loc198 = loc(fused[#loc43, #loc44])
#loc199 = loc(fused[#loc46, #loc47])
#loc200 = loc(fused[#loc48, #loc49])
#loc201 = loc(fused[#loc51, #loc50])
#loc202 = loc(fused[#loc52, #loc53])
#loc203 = loc(fused[#loc56, #loc55])
#loc204 = loc(fused[#loc61, #loc62])
#loc205 = loc(fused[#loc67, #loc68])
#loc206 = loc(fused[#loc71, #loc70])
#loc207 = loc(fused[#loc73, #loc74, #loc75, #loc68])
#loc208 = loc(fused[#loc76, #loc77])
#loc209 = loc(fused[#loc78, #loc79])
#loc210 = loc(fused[#loc84, #loc85])
#loc211 = loc(fused[#loc86, #loc87])
#loc212 = loc(fused[#loc89, #loc88])
#loc213 = loc(fused[#loc90, #loc91])
#loc214 = loc(fused[#loc94, #loc93])
#loc215 = loc(fused[#loc99, #loc100])
#loc216 = loc(fused[#loc102, #loc103])
#loc217 = loc(fused[#loc106, #loc105])
#loc218 = loc(fused[#loc108, #loc109, #loc110, #loc103])
#loc219 = loc(fused[#loc111, #loc112])
#loc220 = loc(fused[#loc113, #loc114])
#loc221 = loc(fused[#loc123, #loc124])
#loc222 = loc(fused[#loc125, #loc126])
#loc223 = loc(fused[#loc128, #loc127])
#loc224 = loc(fused[#loc129, #loc130])
#loc225 = loc(fused[#loc136, #loc135])
#loc226 = loc(fused[#loc138, #loc139])
#loc227 = loc(fused[#loc141, #loc142])
#loc228 = loc(fused[#loc143, #loc144])
#loc229 = loc(fused[#loc145, #loc146])
#loc230 = loc(fused[#loc153, #loc154])
#loc231 = loc(fused[#loc155, #loc156])
#loc232 = loc(fused[#loc158, #loc157])
#loc233 = loc(fused[#loc159, #loc160])
#loc234 = loc(fused[#loc163, #loc162])
#loc235 = loc(fused[#loc168, #loc169])
#loc236 = loc(fused[#loc171, #loc172])
#loc237 = loc(fused[#loc173, #loc174])
#loc238 = loc(fused[#loc175, #loc176])
