!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":25:56)
#loc8 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":25:62)
#loc29 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":47:61)
#loc30 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":47:67)
#loc56 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":70:61)
#loc57 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":70:67)
#loc81 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":88:60)
#loc82 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":88:66)
#loc98 = loc(fused[#loc7, #loc8])
#loc106 = loc(fused[#loc29, #loc30])
#loc115 = loc(fused[#loc56, #loc57])
#loc124 = loc(fused[#loc81, #loc82])
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_add_22b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @CWE190_Integer_Overflow__short_max_add_22_badGlobal : !s32i {alignment = 4 : i64} loc(#loc95)
  cir.func private @printIntLine(!s32i) loc(#loc96)
  cir.func @CWE190_Integer_Overflow__short_max_add_22_badSink(%arg0: !s16i loc(fused[#loc7, #loc8])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc98)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc9)
    cir.scope {
      %1 = cir.get_global @CWE190_Integer_Overflow__short_max_add_22_badGlobal : !cir.ptr<!s32i> loc(#loc95)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc12)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc12)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc102)
          %5 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc18)
          %6 = cir.cast(integral, %5 : !s16i), !s32i loc(#loc18)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc17)
          %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc18)
          %9 = cir.cast(integral, %8 : !s32i), !s16i loc(#loc18)
          cir.store %9, %4 : !s16i, !cir.ptr<!s16i> loc(#loc102)
          %10 = cir.load %4 : !cir.ptr<!s16i>, !s16i loc(#loc19)
          %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc19)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc20)
        } loc(#loc101)
      } loc(#loc100)
    } loc(#loc99)
    cir.return loc(#loc6)
  } loc(#loc97)
  cir.global "private" external @CWE190_Integer_Overflow__short_max_add_22_goodB2G1Global : !s32i {alignment = 4 : i64} loc(#loc103)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc25)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc26)
  cir.func @CWE190_Integer_Overflow__short_max_add_22_goodB2G1Sink(%arg0: !s16i loc(fused[#loc29, #loc30])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc106)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc31)
    cir.scope {
      %1 = cir.get_global @CWE190_Integer_Overflow__short_max_add_22_goodB2G1Global : !cir.ptr<!s32i> loc(#loc103)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc34)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc34)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc25)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc25)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc38)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc41)
          %5 = cir.cast(integral, %4 : !s16i), !s32i loc(#loc41)
          %6 = cir.const #cir.int<32767> : !s32i loc(#loc42)
          %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc110)
          cir.if %7 {
            %8 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc112)
            %9 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc48)
            %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc48)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc47)
            %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc48)
            %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc48)
            cir.store %13, %8 : !s16i, !cir.ptr<!s16i> loc(#loc112)
            %14 = cir.load %8 : !cir.ptr<!s16i>, !s16i loc(#loc49)
            %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc49)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc50)
          } else {
            %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc26)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc26)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc51)
          } loc(#loc111)
        } loc(#loc109)
      } loc(#loc108)
    } loc(#loc107)
    cir.return loc(#loc28)
  } loc(#loc105)
  cir.global "private" external @CWE190_Integer_Overflow__short_max_add_22_goodB2G2Global : !s32i {alignment = 4 : i64} loc(#loc113)
  cir.func @CWE190_Integer_Overflow__short_max_add_22_goodB2G2Sink(%arg0: !s16i loc(fused[#loc56, #loc57])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc115)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc58)
    cir.scope {
      %1 = cir.get_global @CWE190_Integer_Overflow__short_max_add_22_goodB2G2Global : !cir.ptr<!s32i> loc(#loc113)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc61)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc61)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc65)
          %5 = cir.cast(integral, %4 : !s16i), !s32i loc(#loc65)
          %6 = cir.const #cir.int<32767> : !s32i loc(#loc66)
          %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc119)
          cir.if %7 {
            %8 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc121)
            %9 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc72)
            %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc72)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc71)
            %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc72)
            %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc72)
            cir.store %13, %8 : !s16i, !cir.ptr<!s16i> loc(#loc121)
            %14 = cir.load %8 : !cir.ptr<!s16i>, !s16i loc(#loc73)
            %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc73)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc74)
          } else {
            %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc75)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc75)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc76)
          } loc(#loc120)
        } loc(#loc118)
      } loc(#loc117)
    } loc(#loc116)
    cir.return loc(#loc55)
  } loc(#loc114)
  cir.global "private" external @CWE190_Integer_Overflow__short_max_add_22_goodG2BGlobal : !s32i {alignment = 4 : i64} loc(#loc122)
  cir.func @CWE190_Integer_Overflow__short_max_add_22_goodG2BSink(%arg0: !s16i loc(fused[#loc81, #loc82])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc124)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc83)
    cir.scope {
      %1 = cir.get_global @CWE190_Integer_Overflow__short_max_add_22_goodG2BGlobal : !cir.ptr<!s32i> loc(#loc122)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc86)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc86)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc128)
          %5 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc92)
          %6 = cir.cast(integral, %5 : !s16i), !s32i loc(#loc92)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc91)
          %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc92)
          %9 = cir.cast(integral, %8 : !s32i), !s16i loc(#loc92)
          cir.store %9, %4 : !s16i, !cir.ptr<!s16i> loc(#loc128)
          %10 = cir.load %4 : !cir.ptr<!s16i>, !s16i loc(#loc93)
          %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc93)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc94)
        } loc(#loc127)
      } loc(#loc126)
    } loc(#loc125)
    cir.return loc(#loc80)
  } loc(#loc123)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_add_22b.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":23:1)
#loc2 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":23:12)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":25:1)
#loc6 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":35:1)
#loc9 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":26:1)
#loc10 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":27:5)
#loc11 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":34:5)
#loc12 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":27:8)
#loc13 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":28:5)
#loc14 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":29:9)
#loc15 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":33:9)
#loc16 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":31:13)
#loc17 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":31:35)
#loc18 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":31:28)
#loc19 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":32:26)
#loc20 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":32:13)
#loc21 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":42:1)
#loc22 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":42:12)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc24 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc25 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":52:19)
#loc26 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":64:23)
#loc27 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":47:1)
#loc28 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":67:1)
#loc31 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":48:1)
#loc32 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":49:5)
#loc33 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":66:5)
#loc34 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":49:8)
#loc35 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":50:5)
#loc36 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":53:5)
#loc37 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":55:5)
#loc38 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":52:9)
#loc39 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":57:9)
#loc40 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":65:9)
#loc41 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":57:13)
#loc42 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":57:20)
#loc43 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":58:9)
#loc44 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":61:9)
#loc45 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":63:9)
#loc46 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":59:13)
#loc47 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":59:35)
#loc48 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":59:28)
#loc49 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":60:26)
#loc50 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":60:13)
#loc51 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":64:13)
#loc52 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":43:1)
#loc53 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":43:12)
#loc54 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":70:1)
#loc55 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":85:1)
#loc58 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":71:1)
#loc59 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":72:5)
#loc60 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":84:5)
#loc61 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":72:8)
#loc62 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":73:5)
#loc63 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":75:9)
#loc64 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":83:9)
#loc65 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":75:13)
#loc66 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":75:20)
#loc67 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":76:9)
#loc68 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":79:9)
#loc69 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":81:9)
#loc70 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":77:13)
#loc71 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":77:35)
#loc72 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":77:28)
#loc73 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":78:26)
#loc74 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":78:13)
#loc75 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":82:23)
#loc76 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":82:13)
#loc77 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":44:1)
#loc78 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":44:12)
#loc79 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":88:1)
#loc80 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":98:1)
#loc83 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":89:1)
#loc84 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":90:5)
#loc85 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":97:5)
#loc86 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":90:8)
#loc87 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":91:5)
#loc88 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":92:9)
#loc89 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":96:9)
#loc90 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":94:13)
#loc91 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":94:35)
#loc92 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":94:28)
#loc93 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":95:26)
#loc94 = loc("CWE190_Integer_Overflow__short_max_add_22b.c":95:13)
#loc95 = loc(fused[#loc1, #loc2])
#loc96 = loc(fused[#loc3, #loc4])
#loc97 = loc(fused[#loc5, #loc6])
#loc99 = loc(fused[#loc10, #loc11])
#loc100 = loc(fused[#loc13, #loc11])
#loc101 = loc(fused[#loc14, #loc15])
#loc102 = loc(fused[#loc16, #loc17])
#loc103 = loc(fused[#loc21, #loc22])
#loc104 = loc(fused[#loc23, #loc24])
#loc105 = loc(fused[#loc27, #loc28])
#loc107 = loc(fused[#loc32, #loc33])
#loc108 = loc(fused[#loc35, #loc36, #loc37, #loc33])
#loc109 = loc(fused[#loc39, #loc40])
#loc110 = loc(fused[#loc41, #loc42])
#loc111 = loc(fused[#loc43, #loc44, #loc45, #loc40])
#loc112 = loc(fused[#loc46, #loc47])
#loc113 = loc(fused[#loc52, #loc53])
#loc114 = loc(fused[#loc54, #loc55])
#loc116 = loc(fused[#loc59, #loc60])
#loc117 = loc(fused[#loc62, #loc60])
#loc118 = loc(fused[#loc63, #loc64])
#loc119 = loc(fused[#loc65, #loc66])
#loc120 = loc(fused[#loc67, #loc68, #loc69, #loc64])
#loc121 = loc(fused[#loc70, #loc71])
#loc122 = loc(fused[#loc77, #loc78])
#loc123 = loc(fused[#loc79, #loc80])
#loc125 = loc(fused[#loc84, #loc85])
#loc126 = loc(fused[#loc87, #loc85])
#loc127 = loc(fused[#loc88, #loc89])
#loc128 = loc(fused[#loc90, #loc91])
