!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":198:10)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":198:14)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":198:20)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":198:32)
#true = #cir.bool<true> : !cir.bool
#loc406 = loc(fused[#loc138, #loc139])
#loc407 = loc(fused[#loc140, #loc141])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc352)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc353)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc354)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc355)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc356)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc357)
  cir.func private @printIntLine(!s32i) loc(#loc358)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc16)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc359)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc361)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc362)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc363)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc362)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc363)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc28)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc364)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc366)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc33)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc34)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc366)
      cir.scope {
        %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc368)
        %11 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc368)
        cir.store %11, %10 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc368)
        cir.scope {
          %12 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc41)
          %13 = cir.const #cir.int<3> : !s32i loc(#loc42)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc42)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc42)
          %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc42)
          %17 = cir.const #cir.int<2> : !s32i loc(#loc42)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc42)
          %19 = cir.binop(add, %16, %18) : !u64i loc(#loc42)
          %20 = cir.cast(integral, %19 : !u64i), !s32i loc(#loc42)
          %21 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc353)
          %22 = cir.load %21 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc43)
          %23 = cir.call @fgets(%12, %20, %22) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc44)
          %24 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc45)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc45)
          %26 = cir.cmp(ne, %23, %25) : !cir.ptr<!s8i>, !cir.bool loc(#loc370)
          cir.if %26 {
            %27 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc49)
            %28 = cir.call @atoi(%27) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc50)
            cir.store %28, %5 : !s32i, !cir.ptr<!s32i> loc(#loc372)
          } else {
            %27 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
            %28 = cir.cast(array_to_ptrdecay, %27 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
            cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc53)
          } loc(#loc371)
        } loc(#loc369)
      } loc(#loc367)
      %8 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc54)
      %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc55)
      cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc373)
    } loc(#loc365)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc375)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc61)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc375)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc377)
        %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc378)
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc68)
        %11 = cir.const #cir.int<10> : !s32i loc(#loc69)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc69)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc379)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc380)
        %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc68)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc381)
        cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc378)
        cir.scope {
          %20 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc74)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc75)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc75)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !cir.bool loc(#loc383)
          cir.if %23 {
            %24 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc77)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc78)
            %26 = cir.unary(minus, %25) : !s32i, !s32i loc(#loc79)
            cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc77)
          } loc(#loc384)
        } loc(#loc382)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc82)
          cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc386)
          cir.for : cond {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc84)
            %22 = cir.const #cir.int<10> : !s32i loc(#loc85)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc387)
            cir.condition(%23) loc(#loc86)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc88)
              %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc89)
              %23 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc90)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc91)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc389)
            } loc(#loc388)
            cir.yield loc(#loc81)
          } step {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc92)
            %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc93)
            cir.store %22, %8 : !s32i, !cir.ptr<!s32i> loc(#loc390)
            cir.yield loc(#loc385)
          } loc(#loc385)
        } loc(#loc385)
        cir.scope {
          %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc96)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc97)
          %22 = cir.cmp(ge, %20, %21) : !s32i, !cir.bool loc(#loc392)
          cir.if %22 {
            %23 = cir.const #cir.int<1> : !s32i loc(#loc101)
            %24 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc102)
            %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc103)
            %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc104)
            cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc394)
            cir.scope {
              %27 = cir.const #cir.int<0> : !s32i loc(#loc107)
              cir.store %27, %8 : !s32i, !cir.ptr<!s32i> loc(#loc396)
              cir.for : cond {
                %28 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc109)
                %29 = cir.const #cir.int<10> : !s32i loc(#loc110)
                %30 = cir.cmp(lt, %28, %29) : !s32i, !cir.bool loc(#loc397)
                cir.condition(%30) loc(#loc111)
              } body {
                cir.scope {
                  %28 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc113)
                  %29 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc114)
                  %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc115)
                  %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc113)
                  cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc116)
                } loc(#loc398)
                cir.yield loc(#loc106)
              } step {
                %28 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc117)
                %29 = cir.unary(inc, %28) : !s32i, !s32i loc(#loc118)
                cir.store %29, %8 : !s32i, !cir.ptr<!s32i> loc(#loc399)
                cir.yield loc(#loc395)
              } loc(#loc395)
            } loc(#loc395)
          } else {
            %23 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc16)
            %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc16)
            cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc119)
          } loc(#loc393)
        } loc(#loc391)
        %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc120)
        %18 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc121)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc121)
        cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc120)
      } loc(#loc376)
    } loc(#loc374)
    cir.return loc(#loc20)
  } loc(#loc360)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc401)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc124)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc402)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc126)
    cir.return loc(#loc123)
  } loc(#loc400)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc403)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc404)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc132)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc133)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc134)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc135)
  cir.func @main(%arg0: !s32i loc(fused[#loc138, #loc139]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc140, #loc141])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc406)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc407)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc137)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc142)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc142)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc143)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc144)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc144)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc145)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc132)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc132)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc146)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32_good : !cir.ptr<!cir.func<!void ()>> loc(#loc408)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32_good() : () -> () loc(#loc147)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc133)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc133)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc149)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc134)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc134)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc150)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc409)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32_bad() : () -> () loc(#loc151)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc135)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc135)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc153)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc154)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc410)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc410)
    cir.return %17 : !s32i loc(#loc410)
  } loc(#loc405)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc412)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc413)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc414)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc413)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc414)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc164)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc165)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc415)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc417)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc170)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc171)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc417)
      %8 = cir.const #cir.int<7> : !s32i loc(#loc172)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc418)
      %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc174)
      %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc175)
      cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc419)
    } loc(#loc416)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc421)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc180)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc181)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc421)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc423)
        %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc424)
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc188)
        %11 = cir.const #cir.int<10> : !s32i loc(#loc189)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc189)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc425)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc426)
        %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc188)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc427)
        cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc424)
        cir.scope {
          %20 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc194)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc195)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc195)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !cir.bool loc(#loc429)
          cir.if %23 {
            %24 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc197)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc198)
            %26 = cir.unary(minus, %25) : !s32i, !s32i loc(#loc199)
            cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc197)
          } loc(#loc430)
        } loc(#loc428)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc202)
          cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc432)
          cir.for : cond {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc204)
            %22 = cir.const #cir.int<10> : !s32i loc(#loc205)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc433)
            cir.condition(%23) loc(#loc206)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc208)
              %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc209)
              %23 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc210)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc211)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc435)
            } loc(#loc434)
            cir.yield loc(#loc201)
          } step {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc212)
            %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc213)
            cir.store %22, %8 : !s32i, !cir.ptr<!s32i> loc(#loc436)
            cir.yield loc(#loc431)
          } loc(#loc431)
        } loc(#loc431)
        cir.scope {
          %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc216)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc217)
          %22 = cir.cmp(ge, %20, %21) : !s32i, !cir.bool loc(#loc438)
          cir.if %22 {
            %23 = cir.const #cir.int<1> : !s32i loc(#loc221)
            %24 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc222)
            %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc223)
            %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc224)
            cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc440)
            cir.scope {
              %27 = cir.const #cir.int<0> : !s32i loc(#loc227)
              cir.store %27, %8 : !s32i, !cir.ptr<!s32i> loc(#loc442)
              cir.for : cond {
                %28 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc229)
                %29 = cir.const #cir.int<10> : !s32i loc(#loc230)
                %30 = cir.cmp(lt, %28, %29) : !s32i, !cir.bool loc(#loc443)
                cir.condition(%30) loc(#loc231)
              } body {
                cir.scope {
                  %28 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc233)
                  %29 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc234)
                  %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc235)
                  %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc233)
                  cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc236)
                } loc(#loc444)
                cir.yield loc(#loc226)
              } step {
                %28 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc237)
                %29 = cir.unary(inc, %28) : !s32i, !s32i loc(#loc238)
                cir.store %29, %8 : !s32i, !cir.ptr<!s32i> loc(#loc445)
                cir.yield loc(#loc441)
              } loc(#loc441)
            } loc(#loc441)
          } else {
            %23 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc239)
            %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc239)
            cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc240)
          } loc(#loc439)
        } loc(#loc437)
        %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc241)
        %18 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc242)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc242)
        cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc241)
      } loc(#loc422)
    } loc(#loc420)
    cir.return loc(#loc157)
  } loc(#loc411)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc243)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc447)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc448)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc449)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc448)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc449)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc252)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc253)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc450)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc452)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc258)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc259)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc452)
      cir.scope {
        %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc454)
        %11 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc454)
        cir.store %11, %10 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc454)
        cir.scope {
          %12 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc266)
          %13 = cir.const #cir.int<3> : !s32i loc(#loc267)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc267)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc267)
          %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc267)
          %17 = cir.const #cir.int<2> : !s32i loc(#loc267)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc267)
          %19 = cir.binop(add, %16, %18) : !u64i loc(#loc267)
          %20 = cir.cast(integral, %19 : !u64i), !s32i loc(#loc267)
          %21 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc353)
          %22 = cir.load %21 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc268)
          %23 = cir.call @fgets(%12, %20, %22) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc269)
          %24 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc270)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc270)
          %26 = cir.cmp(ne, %23, %25) : !cir.ptr<!s8i>, !cir.bool loc(#loc456)
          cir.if %26 {
            %27 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc274)
            %28 = cir.call @atoi(%27) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc275)
            cir.store %28, %5 : !s32i, !cir.ptr<!s32i> loc(#loc458)
          } else {
            %27 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc278)
            %28 = cir.cast(array_to_ptrdecay, %27 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc278)
            cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc279)
          } loc(#loc457)
        } loc(#loc455)
      } loc(#loc453)
      %8 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc280)
      %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc281)
      cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc459)
    } loc(#loc451)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc461)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc286)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc287)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc461)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc463)
        %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc464)
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc294)
        %11 = cir.const #cir.int<10> : !s32i loc(#loc295)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc295)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc465)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc466)
        %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc294)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc467)
        cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc464)
        cir.scope {
          %20 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc300)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc301)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc301)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !cir.bool loc(#loc469)
          cir.if %23 {
            %24 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc303)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc304)
            %26 = cir.unary(minus, %25) : !s32i, !s32i loc(#loc305)
            cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc303)
          } loc(#loc470)
        } loc(#loc468)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc308)
          cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc472)
          cir.for : cond {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc310)
            %22 = cir.const #cir.int<10> : !s32i loc(#loc311)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc473)
            cir.condition(%23) loc(#loc312)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc314)
              %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc315)
              %23 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc316)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc317)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc475)
            } loc(#loc474)
            cir.yield loc(#loc307)
          } step {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc318)
            %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc319)
            cir.store %22, %8 : !s32i, !cir.ptr<!s32i> loc(#loc476)
            cir.yield loc(#loc471)
          } loc(#loc471)
        } loc(#loc471)
        cir.scope {
          %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc322)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc323)
          %22 = cir.cmp(ge, %20, %21) : !s32i, !cir.bool loc(#loc478)
          %23 = cir.ternary(%22, true {
            %24 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc325)
            %25 = cir.const #cir.int<10> : !s32i loc(#loc326)
            %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc479)
            %27 = cir.ternary(%26, true {
              %28 = cir.const #true loc(#loc324)
              cir.yield %28 : !cir.bool loc(#loc324)
            }, false {
              %28 = cir.const #false loc(#loc324)
              cir.yield %28 : !cir.bool loc(#loc324)
            }) : (!cir.bool) -> !cir.bool loc(#loc324)
            cir.yield %27 : !cir.bool loc(#loc324)
          }, false {
            %24 = cir.const #false loc(#loc324)
            cir.yield %24 : !cir.bool loc(#loc324)
          }) : (!cir.bool) -> !cir.bool loc(#loc324)
          cir.if %23 {
            %24 = cir.const #cir.int<1> : !s32i loc(#loc331)
            %25 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc332)
            %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc333)
            %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc334)
            cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc481)
            cir.scope {
              %28 = cir.const #cir.int<0> : !s32i loc(#loc337)
              cir.store %28, %8 : !s32i, !cir.ptr<!s32i> loc(#loc483)
              cir.for : cond {
                %29 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc339)
                %30 = cir.const #cir.int<10> : !s32i loc(#loc340)
                %31 = cir.cmp(lt, %29, %30) : !s32i, !cir.bool loc(#loc484)
                cir.condition(%31) loc(#loc341)
              } body {
                cir.scope {
                  %29 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc343)
                  %30 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc344)
                  %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc345)
                  %32 = cir.load %31 : !cir.ptr<!s32i>, !s32i loc(#loc343)
                  cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc346)
                } loc(#loc485)
                cir.yield loc(#loc336)
              } step {
                %29 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc347)
                %30 = cir.unary(inc, %29) : !s32i, !s32i loc(#loc348)
                cir.store %30, %8 : !s32i, !cir.ptr<!s32i> loc(#loc486)
                cir.yield loc(#loc482)
              } loc(#loc482)
            } loc(#loc482)
          } else {
            %24 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc243)
            %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc243)
            cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc349)
          } loc(#loc480)
        } loc(#loc477)
        %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc350)
        %18 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc351)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc351)
        cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc350)
      } loc(#loc462)
    } loc(#loc460)
    cir.return loc(#loc245)
  } loc(#loc446)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":43:27)
#loc10 = loc("/usr/include/stdlib.h":672:1)
#loc11 = loc("/usr/include/stdlib.h":672:45)
#loc12 = loc("/usr/include/stdlib.h":756:1)
#loc13 = loc("/usr/include/stdlib.h":756:70)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":72:27)
#loc17 = loc("/usr/include/stdlib.h":687:1)
#loc18 = loc("/usr/include/stdlib.h":687:32)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":24:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":77:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":26:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":26:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":27:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":27:22)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":28:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":28:22)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":30:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":30:12)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":30:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":31:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":47:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":32:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":32:21)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":32:20)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":33:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":45:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":34:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":34:49)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":36:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":44:13)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":36:23)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":36:36)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":36:53)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":36:17)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":36:63)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":37:13)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":40:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":42:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":39:29)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":39:24)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":39:17)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":39:40)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":43:17)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":46:21)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":46:10)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":46:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":48:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":76:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":49:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":49:21)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":49:20)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":50:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":75:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":51:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":51:17)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":52:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":52:58)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":52:35)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":52:42)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":52:47)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":52:57)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":53:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":53:43)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":53:17)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":53:27)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":53:33)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":53:34)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":53:40)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":53:39)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":55:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":58:13)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":55:22)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":55:18)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":55:25)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":55:29)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":55:27)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":56:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":57:29)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":57:17)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":57:24)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":57:25)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":55:34)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":55:33)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":61:13)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":73:13)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":61:17)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":61:25)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":62:13)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":69:13)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":71:13)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":63:32)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":63:17)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":63:24)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":63:28)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":65:17)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":68:17)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":65:25)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":65:21)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":65:28)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":65:32)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":65:30)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":66:17)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":67:34)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":67:41)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":67:42)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":67:21)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":65:37)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":65:36)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":72:17)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":74:13)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":74:18)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":184:1)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":188:1)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":186:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":186:13)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":187:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":187:13)
#loc128 = loc("/usr/include/stdlib.h":575:1)
#loc129 = loc("/usr/include/stdlib.h":575:41)
#loc130 = loc("/usr/include/time.h":76:1)
#loc131 = loc("/usr/include/time.h":76:38)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":203:15)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":205:15)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":208:15)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":210:15)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":198:1)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":213:1)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":199:1)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":201:27)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":201:22)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":201:5)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":203:5)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":204:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":204:63)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":205:5)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":208:5)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":209:5)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":209:62)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":210:5)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":212:12)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":212:5)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":84:1)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":127:1)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":86:5)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":86:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":87:5)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":87:22)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":88:5)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":88:22)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":90:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":90:12)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":90:5)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":91:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":97:5)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":92:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":92:21)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":92:20)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":95:16)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":95:9)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":96:21)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":96:10)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":96:9)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":98:5)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":126:5)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":99:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":99:21)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":99:20)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":100:9)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":125:9)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":101:13)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":101:17)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":102:13)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":102:58)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":102:35)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":102:42)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":102:47)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":102:57)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":103:13)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":103:43)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":103:17)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":103:27)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":103:33)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":103:34)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":103:40)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":103:39)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":105:13)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":108:13)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":105:22)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":105:18)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":105:25)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":105:29)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":105:27)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":106:13)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":107:29)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":107:17)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":107:24)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":107:25)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":105:34)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":105:33)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":111:13)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":123:13)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":111:17)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":111:25)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":112:13)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":119:13)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":121:13)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":113:32)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":113:17)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":113:24)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":113:28)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":115:17)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":118:17)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":115:25)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":115:21)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":115:28)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":115:32)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":115:30)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":116:17)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":117:34)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":117:41)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":117:42)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":117:21)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":115:37)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":115:36)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":122:27)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":122:17)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":124:13)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":124:18)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":177:27)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":130:1)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":182:1)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":132:5)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":132:9)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":133:5)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":133:22)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":134:5)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":134:22)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":136:13)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":136:12)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":136:5)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":137:5)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":153:5)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":138:9)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":138:21)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":138:20)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":139:9)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":151:9)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":140:13)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":140:49)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":142:13)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":150:13)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":142:23)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":142:36)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":142:53)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":142:17)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":142:63)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":143:13)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":146:13)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":148:13)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":145:29)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":145:24)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":145:17)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":145:40)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":149:27)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":149:17)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":152:21)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":152:10)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":152:9)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":154:5)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":181:5)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":155:9)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":155:21)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":155:20)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":156:9)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":180:9)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":157:13)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":157:17)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":158:13)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":158:58)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":158:35)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":158:42)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":158:47)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":158:57)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":159:13)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":159:43)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":159:17)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":159:27)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":159:33)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":159:34)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":159:40)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":159:39)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":161:13)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":164:13)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":161:22)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":161:18)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":161:25)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":161:29)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":161:27)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":162:13)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":163:29)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":163:17)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":163:24)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":163:25)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":161:34)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":161:33)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":166:13)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":178:13)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":166:17)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":166:25)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":166:27)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":166:30)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":166:38)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":166:40)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":167:13)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":174:13)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":176:13)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":168:32)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":168:17)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":168:24)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":168:28)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":170:17)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":173:17)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":170:25)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":170:21)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":170:28)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":170:32)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":170:30)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":171:17)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":172:34)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":172:41)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":172:42)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":172:21)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":170:37)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":170:36)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":177:17)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":179:13)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":179:18)
#loc352 = loc(fused[#loc1, #loc2])
#loc353 = loc(fused[#loc3, #loc4])
#loc354 = loc(fused[#loc5, #loc6])
#loc355 = loc(fused[#loc7, #loc8])
#loc356 = loc(fused[#loc10, #loc11])
#loc357 = loc(fused[#loc12, #loc13])
#loc358 = loc(fused[#loc14, #loc15])
#loc359 = loc(fused[#loc17, #loc18])
#loc360 = loc(fused[#loc19, #loc20])
#loc361 = loc(fused[#loc21, #loc22])
#loc362 = loc(fused[#loc23, #loc24])
#loc363 = loc(fused[#loc25, #loc26])
#loc364 = loc(fused[#loc29, #loc27])
#loc365 = loc(fused[#loc30, #loc31])
#loc366 = loc(fused[#loc32, #loc33])
#loc367 = loc(fused[#loc35, #loc36])
#loc368 = loc(fused[#loc37, #loc38])
#loc369 = loc(fused[#loc39, #loc40])
#loc370 = loc(fused[#loc44, #loc45])
#loc371 = loc(fused[#loc46, #loc47, #loc48, #loc40])
#loc372 = loc(fused[#loc51, #loc52])
#loc373 = loc(fused[#loc56, #loc54])
#loc374 = loc(fused[#loc57, #loc58])
#loc375 = loc(fused[#loc59, #loc60])
#loc376 = loc(fused[#loc62, #loc63])
#loc377 = loc(fused[#loc64, #loc65])
#loc378 = loc(fused[#loc66, #loc67])
#loc379 = loc(fused[#loc70, #loc71])
#loc380 = loc(fused[#loc69, #loc71])
#loc381 = loc(fused[#loc68, #loc67])
#loc382 = loc(fused[#loc72, #loc73])
#loc383 = loc(fused[#loc74, #loc75])
#loc384 = loc(fused[#loc76, #loc73])
#loc385 = loc(fused[#loc80, #loc81])
#loc386 = loc(fused[#loc83, #loc82])
#loc387 = loc(fused[#loc84, #loc85])
#loc388 = loc(fused[#loc87, #loc81])
#loc389 = loc(fused[#loc89, #loc88])
#loc390 = loc(fused[#loc93, #loc92])
#loc391 = loc(fused[#loc94, #loc95])
#loc392 = loc(fused[#loc96, #loc97])
#loc393 = loc(fused[#loc98, #loc99, #loc100, #loc95])
#loc394 = loc(fused[#loc102, #loc101])
#loc395 = loc(fused[#loc105, #loc106])
#loc396 = loc(fused[#loc108, #loc107])
#loc397 = loc(fused[#loc109, #loc110])
#loc398 = loc(fused[#loc112, #loc106])
#loc399 = loc(fused[#loc118, #loc117])
#loc400 = loc(fused[#loc122, #loc123])
#loc401 = loc(fused[#loc124, #loc125])
#loc402 = loc(fused[#loc126, #loc127])
#loc403 = loc(fused[#loc128, #loc129])
#loc404 = loc(fused[#loc130, #loc131])
#loc405 = loc(fused[#loc136, #loc137])
#loc408 = loc(fused[#loc147, #loc148])
#loc409 = loc(fused[#loc151, #loc152])
#loc410 = loc(fused[#loc155, #loc154])
#loc411 = loc(fused[#loc156, #loc157])
#loc412 = loc(fused[#loc158, #loc159])
#loc413 = loc(fused[#loc160, #loc161])
#loc414 = loc(fused[#loc162, #loc163])
#loc415 = loc(fused[#loc166, #loc164])
#loc416 = loc(fused[#loc167, #loc168])
#loc417 = loc(fused[#loc169, #loc170])
#loc418 = loc(fused[#loc173, #loc172])
#loc419 = loc(fused[#loc176, #loc174])
#loc420 = loc(fused[#loc177, #loc178])
#loc421 = loc(fused[#loc179, #loc180])
#loc422 = loc(fused[#loc182, #loc183])
#loc423 = loc(fused[#loc184, #loc185])
#loc424 = loc(fused[#loc186, #loc187])
#loc425 = loc(fused[#loc190, #loc191])
#loc426 = loc(fused[#loc189, #loc191])
#loc427 = loc(fused[#loc188, #loc187])
#loc428 = loc(fused[#loc192, #loc193])
#loc429 = loc(fused[#loc194, #loc195])
#loc430 = loc(fused[#loc196, #loc193])
#loc431 = loc(fused[#loc200, #loc201])
#loc432 = loc(fused[#loc203, #loc202])
#loc433 = loc(fused[#loc204, #loc205])
#loc434 = loc(fused[#loc207, #loc201])
#loc435 = loc(fused[#loc209, #loc208])
#loc436 = loc(fused[#loc213, #loc212])
#loc437 = loc(fused[#loc214, #loc215])
#loc438 = loc(fused[#loc216, #loc217])
#loc439 = loc(fused[#loc218, #loc219, #loc220, #loc215])
#loc440 = loc(fused[#loc222, #loc221])
#loc441 = loc(fused[#loc225, #loc226])
#loc442 = loc(fused[#loc228, #loc227])
#loc443 = loc(fused[#loc229, #loc230])
#loc444 = loc(fused[#loc232, #loc226])
#loc445 = loc(fused[#loc238, #loc237])
#loc446 = loc(fused[#loc244, #loc245])
#loc447 = loc(fused[#loc246, #loc247])
#loc448 = loc(fused[#loc248, #loc249])
#loc449 = loc(fused[#loc250, #loc251])
#loc450 = loc(fused[#loc254, #loc252])
#loc451 = loc(fused[#loc255, #loc256])
#loc452 = loc(fused[#loc257, #loc258])
#loc453 = loc(fused[#loc260, #loc261])
#loc454 = loc(fused[#loc262, #loc263])
#loc455 = loc(fused[#loc264, #loc265])
#loc456 = loc(fused[#loc269, #loc270])
#loc457 = loc(fused[#loc271, #loc272, #loc273, #loc265])
#loc458 = loc(fused[#loc276, #loc277])
#loc459 = loc(fused[#loc282, #loc280])
#loc460 = loc(fused[#loc283, #loc284])
#loc461 = loc(fused[#loc285, #loc286])
#loc462 = loc(fused[#loc288, #loc289])
#loc463 = loc(fused[#loc290, #loc291])
#loc464 = loc(fused[#loc292, #loc293])
#loc465 = loc(fused[#loc296, #loc297])
#loc466 = loc(fused[#loc295, #loc297])
#loc467 = loc(fused[#loc294, #loc293])
#loc468 = loc(fused[#loc298, #loc299])
#loc469 = loc(fused[#loc300, #loc301])
#loc470 = loc(fused[#loc302, #loc299])
#loc471 = loc(fused[#loc306, #loc307])
#loc472 = loc(fused[#loc309, #loc308])
#loc473 = loc(fused[#loc310, #loc311])
#loc474 = loc(fused[#loc313, #loc307])
#loc475 = loc(fused[#loc315, #loc314])
#loc476 = loc(fused[#loc319, #loc318])
#loc477 = loc(fused[#loc320, #loc321])
#loc478 = loc(fused[#loc322, #loc323])
#loc479 = loc(fused[#loc325, #loc327])
#loc480 = loc(fused[#loc328, #loc329, #loc330, #loc321])
#loc481 = loc(fused[#loc332, #loc331])
#loc482 = loc(fused[#loc335, #loc336])
#loc483 = loc(fused[#loc338, #loc337])
#loc484 = loc(fused[#loc339, #loc340])
#loc485 = loc(fused[#loc342, #loc336])
#loc486 = loc(fused[#loc348, #loc347])
