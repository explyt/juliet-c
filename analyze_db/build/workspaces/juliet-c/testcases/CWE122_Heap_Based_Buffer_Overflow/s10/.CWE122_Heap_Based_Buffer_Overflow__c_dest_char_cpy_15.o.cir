!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc179)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc180)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc181)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc7)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc182)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc183)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc185)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc16)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc186)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc20)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc22)
          %4 = cir.const #cir.int<50> : !s32i loc(#loc23)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc23)
          %6 = cir.const #cir.int<1> : !u64i loc(#loc188)
          %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc189)
          %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc22)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc190)
          cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc191)
          cir.scope {
            %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
            %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc31)
            %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc193)
            cir.if %18 {
              %19 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc33)
              %20 = cir.const #cir.int<1> : !s32i loc(#loc34)
              %21 = cir.unary(minus, %20) nsw : !s32i, !s32i loc(#loc35)
              cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc33)
            } loc(#loc194)
          } loc(#loc192)
          %10 = cir.const #cir.int<0> : !s32i loc(#loc36)
          %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc36)
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
          %13 = cir.const #cir.int<0> : !s32i loc(#loc38)
          %14 = cir.ptr_stride(%12 : !cir.ptr<!s8i>, %13 : !s32i), !cir.ptr<!s8i> loc(#loc39)
          cir.store %11, %14 : !s8i, !cir.ptr<!s8i> loc(#loc195)
          cir.break loc(#loc40)
        } loc(#loc21)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc7)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc7)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc42)
          cir.break loc(#loc43)
        } loc(#loc41)
        cir.yield loc(#loc18)
      } loc(#loc18)
    } loc(#loc187)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc197)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc48)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc48)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc49)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc50)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc51)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc50)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc50)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc198)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc54)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc54)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc55)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc56)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc55)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc57)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc57)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc199)
      %17 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc58)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
      %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc60)
      %20 = cir.call @strcpy(%18, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc58)
      %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
      cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc62)
      %22 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc63)
      %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
      %24 = cir.cast(bitcast, %23 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc64)
      cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc63)
    } loc(#loc196)
    cir.return loc(#loc13)
  } loc(#loc184)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc201)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc67)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc202)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc69)
    cir.return loc(#loc66)
  } loc(#loc200)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc204)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc75)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc205)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc79)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc81)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc81)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc82)
          cir.break loc(#loc83)
        } loc(#loc80)
        cir.case(default, []) {
          %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc85)
          %4 = cir.const #cir.int<100> : !s32i loc(#loc86)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc86)
          %6 = cir.const #cir.int<1> : !u64i loc(#loc207)
          %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc208)
          %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc85)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc209)
          cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc210)
          cir.scope {
            %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc93)
            %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc94)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc94)
            %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc212)
            cir.if %18 {
              %19 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc96)
              %20 = cir.const #cir.int<1> : !s32i loc(#loc97)
              %21 = cir.unary(minus, %20) nsw : !s32i, !s32i loc(#loc98)
              cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc96)
            } loc(#loc213)
          } loc(#loc211)
          %10 = cir.const #cir.int<0> : !s32i loc(#loc99)
          %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc99)
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc100)
          %13 = cir.const #cir.int<0> : !s32i loc(#loc101)
          %14 = cir.ptr_stride(%12 : !cir.ptr<!s8i>, %13 : !s32i), !cir.ptr<!s8i> loc(#loc102)
          cir.store %11, %14 : !s8i, !cir.ptr<!s8i> loc(#loc214)
          cir.break loc(#loc103)
        } loc(#loc84)
        cir.yield loc(#loc77)
      } loc(#loc77)
    } loc(#loc206)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc216)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc108)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc108)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc109)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc110)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc111)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc110)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc110)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc217)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc114)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc114)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc115)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc116)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc115)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc117)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc117)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc218)
      %17 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc118)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc119)
      %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc120)
      %20 = cir.call @strcpy(%18, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc118)
      %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc121)
      cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc122)
      %22 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc123)
      %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc124)
      %24 = cir.cast(bitcast, %23 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc124)
      cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc123)
    } loc(#loc215)
    cir.return loc(#loc72)
  } loc(#loc203)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc220)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc129)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc221)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc133)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc135)
          %4 = cir.const #cir.int<100> : !s32i loc(#loc136)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc136)
          %6 = cir.const #cir.int<1> : !u64i loc(#loc223)
          %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc224)
          %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc135)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc225)
          cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc226)
          cir.scope {
            %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc143)
            %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc144)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc144)
            %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc228)
            cir.if %18 {
              %19 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc146)
              %20 = cir.const #cir.int<1> : !s32i loc(#loc147)
              %21 = cir.unary(minus, %20) nsw : !s32i, !s32i loc(#loc148)
              cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc146)
            } loc(#loc229)
          } loc(#loc227)
          %10 = cir.const #cir.int<0> : !s32i loc(#loc149)
          %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc149)
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc150)
          %13 = cir.const #cir.int<0> : !s32i loc(#loc151)
          %14 = cir.ptr_stride(%12 : !cir.ptr<!s8i>, %13 : !s32i), !cir.ptr<!s8i> loc(#loc152)
          cir.store %11, %14 : !s8i, !cir.ptr<!s8i> loc(#loc230)
          cir.break loc(#loc153)
        } loc(#loc134)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc155)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc155)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc156)
          cir.break loc(#loc157)
        } loc(#loc154)
        cir.yield loc(#loc131)
      } loc(#loc131)
    } loc(#loc222)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc232)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc162)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc162)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc163)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc164)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc165)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc164)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc164)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc233)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc168)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc168)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc169)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc170)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc169)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc171)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc171)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc234)
      %17 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc172)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc173)
      %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc174)
      %20 = cir.call @strcpy(%18, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc172)
      %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc175)
      cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc176)
      %22 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc177)
      %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc178)
      %24 = cir.cast(bitcast, %23 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc178)
      cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc177)
    } loc(#loc231)
    cir.return loc(#loc126)
  } loc(#loc219)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":37:19)
#loc8 = loc("/usr/include/string.h":141:1)
#loc9 = loc("/usr/include/string.h":142:14)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":23:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":49:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":25:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":25:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":26:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":26:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":27:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":39:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":27:12)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":29:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":31:24)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":31:31)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":31:34)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":31:45)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":31:46)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":31:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":32:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":32:37)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":32:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":32:21)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":32:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":32:28)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":32:34)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":32:33)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":33:19)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":33:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":33:14)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":33:15)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":34:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":35:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":37:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":38:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":40:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":48:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":41:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":41:24)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":42:16)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":42:24)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":42:29)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":42:33)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":42:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":42:34)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":43:25)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":43:16)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":43:20)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":43:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":45:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":45:16)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":45:22)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":46:19)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":46:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":47:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":47:14)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":113:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":117:1)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":115:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":115:14)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":116:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":116:14)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":56:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":82:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":58:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":58:12)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":59:12)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":59:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":60:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":72:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":60:12)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":62:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":64:19)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":64:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":65:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":66:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":68:24)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":68:31)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":68:35)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":68:46)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":68:47)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":68:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":69:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":69:37)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":69:13)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":69:21)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":69:27)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":69:28)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":69:34)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":69:33)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":70:19)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":70:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":70:14)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":70:15)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":71:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":73:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":81:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":74:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":74:24)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":75:16)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":75:24)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":75:29)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":75:33)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":75:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":75:34)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":76:25)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":76:16)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":76:20)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":76:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":78:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":78:16)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":78:22)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":79:19)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":79:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":80:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":80:14)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":85:1)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":111:1)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":87:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":87:12)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":88:12)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":88:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":89:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":101:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":89:12)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":91:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":93:24)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":93:31)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":93:35)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":93:46)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":93:47)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":93:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":94:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":94:37)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":94:13)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":94:21)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":94:27)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":94:28)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":94:34)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":94:33)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":95:19)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":95:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":95:14)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":95:15)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":96:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":97:5)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":99:19)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":99:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":100:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":102:5)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":110:5)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":103:9)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":103:24)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":104:16)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":104:24)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":104:29)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":104:33)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":104:9)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":104:34)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":105:25)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":105:16)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":105:20)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":105:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":107:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":107:16)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":107:22)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":108:19)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":108:9)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":109:9)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c":109:14)
#loc179 = loc(fused[#loc1, #loc2])
#loc180 = loc(fused[#loc3, #loc4])
#loc181 = loc(fused[#loc5, #loc6])
#loc182 = loc(fused[#loc8, #loc9])
#loc183 = loc(fused[#loc10, #loc11])
#loc184 = loc(fused[#loc12, #loc13])
#loc185 = loc(fused[#loc14, #loc15])
#loc186 = loc(fused[#loc17, #loc16])
#loc187 = loc(fused[#loc18, #loc19])
#loc188 = loc(fused[#loc24, #loc25])
#loc189 = loc(fused[#loc23, #loc25])
#loc190 = loc(fused[#loc22, #loc26])
#loc191 = loc(fused[#loc27, #loc26])
#loc192 = loc(fused[#loc28, #loc29])
#loc193 = loc(fused[#loc30, #loc31])
#loc194 = loc(fused[#loc32, #loc29])
#loc195 = loc(fused[#loc37, #loc36])
#loc196 = loc(fused[#loc44, #loc45])
#loc197 = loc(fused[#loc46, #loc47])
#loc198 = loc(fused[#loc52, #loc53])
#loc199 = loc(fused[#loc57, #loc54])
#loc200 = loc(fused[#loc65, #loc66])
#loc201 = loc(fused[#loc67, #loc68])
#loc202 = loc(fused[#loc69, #loc70])
#loc203 = loc(fused[#loc71, #loc72])
#loc204 = loc(fused[#loc73, #loc74])
#loc205 = loc(fused[#loc76, #loc75])
#loc206 = loc(fused[#loc77, #loc78])
#loc207 = loc(fused[#loc87, #loc88])
#loc208 = loc(fused[#loc86, #loc88])
#loc209 = loc(fused[#loc85, #loc89])
#loc210 = loc(fused[#loc90, #loc89])
#loc211 = loc(fused[#loc91, #loc92])
#loc212 = loc(fused[#loc93, #loc94])
#loc213 = loc(fused[#loc95, #loc92])
#loc214 = loc(fused[#loc100, #loc99])
#loc215 = loc(fused[#loc104, #loc105])
#loc216 = loc(fused[#loc106, #loc107])
#loc217 = loc(fused[#loc112, #loc113])
#loc218 = loc(fused[#loc117, #loc114])
#loc219 = loc(fused[#loc125, #loc126])
#loc220 = loc(fused[#loc127, #loc128])
#loc221 = loc(fused[#loc130, #loc129])
#loc222 = loc(fused[#loc131, #loc132])
#loc223 = loc(fused[#loc137, #loc138])
#loc224 = loc(fused[#loc136, #loc138])
#loc225 = loc(fused[#loc135, #loc139])
#loc226 = loc(fused[#loc140, #loc139])
#loc227 = loc(fused[#loc141, #loc142])
#loc228 = loc(fused[#loc143, #loc144])
#loc229 = loc(fused[#loc145, #loc142])
#loc230 = loc(fused[#loc150, #loc149])
#loc231 = loc(fused[#loc158, #loc159])
#loc232 = loc(fused[#loc160, #loc161])
#loc233 = loc(fused[#loc166, #loc167])
#loc234 = loc(fused[#loc171, #loc168])
