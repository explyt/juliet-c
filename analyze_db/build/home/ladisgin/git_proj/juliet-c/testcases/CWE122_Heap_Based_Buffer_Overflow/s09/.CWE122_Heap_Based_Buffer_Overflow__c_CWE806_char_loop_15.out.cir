!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":141:10)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":141:14)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":141:20)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":141:32)
#loc296 = loc(fused[#loc99, #loc100])
#loc297 = loc(fused[#loc101, #loc102])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc261)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc262)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc263)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc7)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc264)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc265)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc267)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc16)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc17)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc17)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc268)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc269)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc16)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc270)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc271)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc24)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc25)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc25)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc273)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc27)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc28)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc29)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc27)
      } loc(#loc274)
    } loc(#loc272)
    cir.scope {
      %8 = cir.const #cir.int<6> : !s32i loc(#loc32)
      cir.switch (%8 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc34)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc34)
          %11 = cir.const #cir.int<65> : !s32i loc(#loc35)
          %12 = cir.const #cir.int<100> : !s32i loc(#loc36)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc37)
          %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc36)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc36)
          cir.libc.memset %15 bytes from %10 set to %11 : !cir.ptr<!void>, !s32i, !u64i loc(#loc276)
          %16 = cir.const #cir.int<0> : !s32i loc(#loc40)
          %17 = cir.cast(integral, %16 : !s32i), !s8i loc(#loc40)
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
          %19 = cir.const #cir.int<100> : !s32i loc(#loc42)
          %20 = cir.const #cir.int<1> : !s32i loc(#loc43)
          %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc42)
          %22 = cir.ptr_stride(%18 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc44)
          cir.store %17, %22 : !s8i, !cir.ptr<!s8i> loc(#loc277)
          cir.break loc(#loc45)
        } loc(#loc33)
        cir.case(default, []) {
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc7)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc7)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc47)
          cir.break loc(#loc48)
        } loc(#loc46)
        cir.yield loc(#loc30)
      } loc(#loc30)
    } loc(#loc275)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc279)
      %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc280)
      %10 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc281)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc279)
      cir.store %11, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc279)
      %12 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc56)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
      %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc56)
      cir.store %14, %10 : !u64i, !cir.ptr<!u64i> loc(#loc282)
      cir.scope {
        %26 = cir.const #cir.int<0> : !s32i loc(#loc62)
        %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc62)
        cir.store %27, %9 : !u64i, !cir.ptr<!u64i> loc(#loc284)
        cir.for : cond {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc64)
          %29 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc65)
          %30 = cir.cmp(lt, %28, %29) : !u64i, !cir.bool loc(#loc285)
          cir.condition(%30) loc(#loc66)
        } body {
          cir.scope {
            %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc68)
            %29 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc69)
            %30 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc70)
            %31 = cir.load %30 : !cir.ptr<!s8i>, !s8i loc(#loc68)
            %32 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc71)
            %33 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc72)
            %34 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %32 : !u64i), !cir.ptr<!s8i> loc(#loc72)
            cir.store %31, %34 : !s8i, !cir.ptr<!s8i> loc(#loc287)
          } loc(#loc286)
          cir.yield loc(#loc61)
        } step {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc73)
          %29 = cir.unary(inc, %28) : !u64i, !u64i loc(#loc74)
          cir.store %29, %9 : !u64i, !cir.ptr<!u64i> loc(#loc288)
          cir.yield loc(#loc283)
        } loc(#loc283)
      } loc(#loc283)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc75)
      %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc75)
      %17 = cir.const #cir.int<50> : !s32i loc(#loc76)
      %18 = cir.const #cir.int<1> : !s32i loc(#loc77)
      %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc76)
      %20 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc78)
      %21 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc78)
      cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc289)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc79)
      cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc80)
      %23 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc81)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc82)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc82)
      cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc81)
    } loc(#loc278)
    cir.return loc(#loc13)
  } loc(#loc266)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc291)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc85)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc292)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc87)
    cir.return loc(#loc84)
  } loc(#loc290)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc293)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc294)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc93)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc94)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc95)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc96)
  cir.func @main(%arg0: !s32i loc(fused[#loc99, #loc100]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc101, #loc102])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc296)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc297)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc98)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc103)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc103)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc104)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc105)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc105)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc106)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc93)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc93)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc107)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc298)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15_good() : () -> () loc(#loc108)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc94)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc94)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc110)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc95)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc95)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc111)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc299)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15_bad() : () -> () loc(#loc112)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc96)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc96)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc114)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc115)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc300)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc300)
    cir.return %17 : !s32i loc(#loc300)
  } loc(#loc295)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc302)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc121)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc122)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc122)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc303)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc304)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc121)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc305)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc306)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc130)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc130)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc308)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc132)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc133)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc134)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc132)
      } loc(#loc309)
    } loc(#loc307)
    cir.scope {
      %8 = cir.const #cir.int<5> : !s32i loc(#loc137)
      cir.switch (%8 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc139)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc139)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc140)
          cir.break loc(#loc141)
        } loc(#loc138)
        cir.case(default, []) {
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc143)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc143)
          %11 = cir.const #cir.int<65> : !s32i loc(#loc144)
          %12 = cir.const #cir.int<50> : !s32i loc(#loc145)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc146)
          %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc145)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc145)
          cir.libc.memset %15 bytes from %10 set to %11 : !cir.ptr<!void>, !s32i, !u64i loc(#loc311)
          %16 = cir.const #cir.int<0> : !s32i loc(#loc149)
          %17 = cir.cast(integral, %16 : !s32i), !s8i loc(#loc149)
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc150)
          %19 = cir.const #cir.int<50> : !s32i loc(#loc151)
          %20 = cir.const #cir.int<1> : !s32i loc(#loc152)
          %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc151)
          %22 = cir.ptr_stride(%18 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc153)
          cir.store %17, %22 : !s8i, !cir.ptr<!s8i> loc(#loc312)
          cir.break loc(#loc154)
        } loc(#loc142)
        cir.yield loc(#loc135)
      } loc(#loc135)
    } loc(#loc310)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc314)
      %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc315)
      %10 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc316)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc314)
      cir.store %11, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc314)
      %12 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc162)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc163)
      %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc162)
      cir.store %14, %10 : !u64i, !cir.ptr<!u64i> loc(#loc317)
      cir.scope {
        %26 = cir.const #cir.int<0> : !s32i loc(#loc168)
        %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc168)
        cir.store %27, %9 : !u64i, !cir.ptr<!u64i> loc(#loc319)
        cir.for : cond {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc170)
          %29 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc171)
          %30 = cir.cmp(lt, %28, %29) : !u64i, !cir.bool loc(#loc320)
          cir.condition(%30) loc(#loc172)
        } body {
          cir.scope {
            %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc174)
            %29 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc175)
            %30 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc176)
            %31 = cir.load %30 : !cir.ptr<!s8i>, !s8i loc(#loc174)
            %32 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc177)
            %33 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc178)
            %34 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %32 : !u64i), !cir.ptr<!s8i> loc(#loc178)
            cir.store %31, %34 : !s8i, !cir.ptr<!s8i> loc(#loc322)
          } loc(#loc321)
          cir.yield loc(#loc167)
        } step {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc179)
          %29 = cir.unary(inc, %28) : !u64i, !u64i loc(#loc180)
          cir.store %29, %9 : !u64i, !cir.ptr<!u64i> loc(#loc323)
          cir.yield loc(#loc318)
        } loc(#loc318)
      } loc(#loc318)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc181)
      %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc181)
      %17 = cir.const #cir.int<50> : !s32i loc(#loc182)
      %18 = cir.const #cir.int<1> : !s32i loc(#loc183)
      %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc182)
      %20 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc184)
      %21 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc184)
      cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc324)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc185)
      cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc186)
      %23 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc187)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc188)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc188)
      cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc187)
    } loc(#loc313)
    cir.return loc(#loc118)
  } loc(#loc301)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc326)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc193)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc194)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc194)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc327)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc328)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc193)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc329)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc330)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc201)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc202)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc202)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc332)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc204)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc205)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc206)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc204)
      } loc(#loc333)
    } loc(#loc331)
    cir.scope {
      %8 = cir.const #cir.int<6> : !s32i loc(#loc209)
      cir.switch (%8 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc211)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc211)
          %11 = cir.const #cir.int<65> : !s32i loc(#loc212)
          %12 = cir.const #cir.int<50> : !s32i loc(#loc213)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc214)
          %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc213)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc213)
          cir.libc.memset %15 bytes from %10 set to %11 : !cir.ptr<!void>, !s32i, !u64i loc(#loc335)
          %16 = cir.const #cir.int<0> : !s32i loc(#loc217)
          %17 = cir.cast(integral, %16 : !s32i), !s8i loc(#loc217)
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc218)
          %19 = cir.const #cir.int<50> : !s32i loc(#loc219)
          %20 = cir.const #cir.int<1> : !s32i loc(#loc220)
          %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc219)
          %22 = cir.ptr_stride(%18 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc221)
          cir.store %17, %22 : !s8i, !cir.ptr<!s8i> loc(#loc336)
          cir.break loc(#loc222)
        } loc(#loc210)
        cir.case(default, []) {
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc224)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc224)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc225)
          cir.break loc(#loc226)
        } loc(#loc223)
        cir.yield loc(#loc207)
      } loc(#loc207)
    } loc(#loc334)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc338)
      %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc339)
      %10 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc340)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc338)
      cir.store %11, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc338)
      %12 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc234)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc235)
      %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc234)
      cir.store %14, %10 : !u64i, !cir.ptr<!u64i> loc(#loc341)
      cir.scope {
        %26 = cir.const #cir.int<0> : !s32i loc(#loc240)
        %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc240)
        cir.store %27, %9 : !u64i, !cir.ptr<!u64i> loc(#loc343)
        cir.for : cond {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc242)
          %29 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc243)
          %30 = cir.cmp(lt, %28, %29) : !u64i, !cir.bool loc(#loc344)
          cir.condition(%30) loc(#loc244)
        } body {
          cir.scope {
            %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc246)
            %29 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc247)
            %30 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc248)
            %31 = cir.load %30 : !cir.ptr<!s8i>, !s8i loc(#loc246)
            %32 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc249)
            %33 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc250)
            %34 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %32 : !u64i), !cir.ptr<!s8i> loc(#loc250)
            cir.store %31, %34 : !s8i, !cir.ptr<!s8i> loc(#loc346)
          } loc(#loc345)
          cir.yield loc(#loc239)
        } step {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc251)
          %29 = cir.unary(inc, %28) : !u64i, !u64i loc(#loc252)
          cir.store %29, %9 : !u64i, !cir.ptr<!u64i> loc(#loc347)
          cir.yield loc(#loc342)
        } loc(#loc342)
      } loc(#loc342)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc253)
      %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc253)
      %17 = cir.const #cir.int<50> : !s32i loc(#loc254)
      %18 = cir.const #cir.int<1> : !s32i loc(#loc255)
      %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc254)
      %20 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc256)
      %21 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc256)
      cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc348)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc257)
      cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc258)
      %23 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc259)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc260)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc260)
      cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc259)
    } loc(#loc337)
    cir.return loc(#loc190)
  } loc(#loc325)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":37:19)
#loc8 = loc("/usr/include/string.h":407:1)
#loc9 = loc("/usr/include/string.h":408:33)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":23:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":53:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":25:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":25:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":26:20)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":26:27)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":26:31)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":26:42)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":26:43)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":26:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":27:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":27:33)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":27:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":27:17)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":27:23)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":27:24)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":27:30)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":27:29)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":28:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":39:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":28:12)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":30:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":32:16)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":32:22)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":32:27)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":32:31)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":32:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":32:32)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":33:23)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":33:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":33:14)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":33:18)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":33:19)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":34:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":35:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":37:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":38:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":40:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":52:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":41:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":41:25)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":42:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":42:16)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":42:19)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":43:19)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":43:26)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":43:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":43:30)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":45:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":48:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":45:18)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":45:14)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":45:21)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":45:25)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":45:23)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":46:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":47:23)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":47:28)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":47:29)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":47:18)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":47:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":45:35)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":45:34)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":49:22)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":49:14)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":49:17)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":49:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":50:19)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":50:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":51:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":51:14)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":125:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":129:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":127:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":127:14)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":128:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":128:14)
#loc89 = loc("/usr/include/stdlib.h":575:1)
#loc90 = loc("/usr/include/stdlib.h":575:41)
#loc91 = loc("/usr/include/time.h":76:1)
#loc92 = loc("/usr/include/time.h":76:38)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":146:15)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":148:15)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":151:15)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":153:15)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":141:1)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":156:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":142:1)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":144:27)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":144:22)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":144:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":146:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":147:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":147:67)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":148:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":151:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":152:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":152:66)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":153:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":155:12)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":155:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":60:1)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":90:1)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":62:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":62:12)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":63:20)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":63:27)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":63:31)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":63:42)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":63:43)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":63:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":64:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":64:33)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":64:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":64:17)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":64:23)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":64:24)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":64:30)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":64:29)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":65:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":76:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":65:12)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":67:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":69:19)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":69:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":70:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":71:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":73:16)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":73:22)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":73:27)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":73:30)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":73:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":73:31)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":74:22)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":74:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":74:14)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":74:17)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":74:18)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":75:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":77:5)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":89:5)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":78:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":78:25)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":79:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":79:16)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":79:19)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":80:19)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":80:26)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":80:9)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":80:30)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":82:9)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":85:9)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":82:18)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":82:14)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":82:21)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":82:25)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":82:23)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":83:9)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":84:23)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":84:28)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":84:29)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":84:18)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":84:13)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":82:35)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":82:34)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":86:22)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":86:14)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":86:17)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":86:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":87:19)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":87:9)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":88:9)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":88:14)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":93:1)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":123:1)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":95:5)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":95:12)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":96:20)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":96:27)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":96:31)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":96:42)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":96:43)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":96:5)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":97:5)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":97:33)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":97:9)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":97:17)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":97:23)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":97:24)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":97:30)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":97:29)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":98:5)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":109:5)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":98:12)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":100:5)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":102:16)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":102:22)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":102:27)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":102:30)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":102:9)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":102:31)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":103:22)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":103:9)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":103:14)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":103:17)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":103:18)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":104:9)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":105:5)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":107:19)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":107:9)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":108:9)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":110:5)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":122:5)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":111:9)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":111:25)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":112:9)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":112:16)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":112:19)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":113:19)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":113:26)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":113:9)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":113:30)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":115:9)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":118:9)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":115:18)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":115:14)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":115:21)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":115:25)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":115:23)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":116:9)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":117:23)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":117:28)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":117:29)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":117:18)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":117:13)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":115:35)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":115:34)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":119:22)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":119:14)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":119:17)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":119:9)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":120:19)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":120:9)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":121:9)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c":121:14)
#loc261 = loc(fused[#loc1, #loc2])
#loc262 = loc(fused[#loc3, #loc4])
#loc263 = loc(fused[#loc5, #loc6])
#loc264 = loc(fused[#loc8, #loc9])
#loc265 = loc(fused[#loc10, #loc11])
#loc266 = loc(fused[#loc12, #loc13])
#loc267 = loc(fused[#loc14, #loc15])
#loc268 = loc(fused[#loc18, #loc19])
#loc269 = loc(fused[#loc17, #loc19])
#loc270 = loc(fused[#loc16, #loc20])
#loc271 = loc(fused[#loc21, #loc20])
#loc272 = loc(fused[#loc22, #loc23])
#loc273 = loc(fused[#loc24, #loc25])
#loc274 = loc(fused[#loc26, #loc23])
#loc275 = loc(fused[#loc30, #loc31])
#loc276 = loc(fused[#loc38, #loc39])
#loc277 = loc(fused[#loc41, #loc40])
#loc278 = loc(fused[#loc49, #loc50])
#loc279 = loc(fused[#loc51, #loc52])
#loc280 = loc(fused[#loc53, #loc54])
#loc281 = loc(fused[#loc53, #loc55])
#loc282 = loc(fused[#loc58, #loc59])
#loc283 = loc(fused[#loc60, #loc61])
#loc284 = loc(fused[#loc63, #loc62])
#loc285 = loc(fused[#loc64, #loc65])
#loc286 = loc(fused[#loc67, #loc61])
#loc287 = loc(fused[#loc72, #loc70])
#loc288 = loc(fused[#loc74, #loc73])
#loc289 = loc(fused[#loc78, #loc75])
#loc290 = loc(fused[#loc83, #loc84])
#loc291 = loc(fused[#loc85, #loc86])
#loc292 = loc(fused[#loc87, #loc88])
#loc293 = loc(fused[#loc89, #loc90])
#loc294 = loc(fused[#loc91, #loc92])
#loc295 = loc(fused[#loc97, #loc98])
#loc298 = loc(fused[#loc108, #loc109])
#loc299 = loc(fused[#loc112, #loc113])
#loc300 = loc(fused[#loc116, #loc115])
#loc301 = loc(fused[#loc117, #loc118])
#loc302 = loc(fused[#loc119, #loc120])
#loc303 = loc(fused[#loc123, #loc124])
#loc304 = loc(fused[#loc122, #loc124])
#loc305 = loc(fused[#loc121, #loc125])
#loc306 = loc(fused[#loc126, #loc125])
#loc307 = loc(fused[#loc127, #loc128])
#loc308 = loc(fused[#loc129, #loc130])
#loc309 = loc(fused[#loc131, #loc128])
#loc310 = loc(fused[#loc135, #loc136])
#loc311 = loc(fused[#loc147, #loc148])
#loc312 = loc(fused[#loc150, #loc149])
#loc313 = loc(fused[#loc155, #loc156])
#loc314 = loc(fused[#loc157, #loc158])
#loc315 = loc(fused[#loc159, #loc160])
#loc316 = loc(fused[#loc159, #loc161])
#loc317 = loc(fused[#loc164, #loc165])
#loc318 = loc(fused[#loc166, #loc167])
#loc319 = loc(fused[#loc169, #loc168])
#loc320 = loc(fused[#loc170, #loc171])
#loc321 = loc(fused[#loc173, #loc167])
#loc322 = loc(fused[#loc178, #loc176])
#loc323 = loc(fused[#loc180, #loc179])
#loc324 = loc(fused[#loc184, #loc181])
#loc325 = loc(fused[#loc189, #loc190])
#loc326 = loc(fused[#loc191, #loc192])
#loc327 = loc(fused[#loc195, #loc196])
#loc328 = loc(fused[#loc194, #loc196])
#loc329 = loc(fused[#loc193, #loc197])
#loc330 = loc(fused[#loc198, #loc197])
#loc331 = loc(fused[#loc199, #loc200])
#loc332 = loc(fused[#loc201, #loc202])
#loc333 = loc(fused[#loc203, #loc200])
#loc334 = loc(fused[#loc207, #loc208])
#loc335 = loc(fused[#loc215, #loc216])
#loc336 = loc(fused[#loc218, #loc217])
#loc337 = loc(fused[#loc227, #loc228])
#loc338 = loc(fused[#loc229, #loc230])
#loc339 = loc(fused[#loc231, #loc232])
#loc340 = loc(fused[#loc231, #loc233])
#loc341 = loc(fused[#loc236, #loc237])
#loc342 = loc(fused[#loc238, #loc239])
#loc343 = loc(fused[#loc241, #loc240])
#loc344 = loc(fused[#loc242, #loc243])
#loc345 = loc(fused[#loc245, #loc239])
#loc346 = loc(fused[#loc250, #loc248])
#loc347 = loc(fused[#loc252, #loc251])
#loc348 = loc(fused[#loc256, #loc253])
