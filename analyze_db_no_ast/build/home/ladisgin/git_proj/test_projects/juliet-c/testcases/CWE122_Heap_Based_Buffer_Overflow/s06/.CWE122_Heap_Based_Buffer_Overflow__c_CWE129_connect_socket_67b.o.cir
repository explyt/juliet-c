!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":49:77)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":49:150)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":85:81)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":85:154)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":117:81)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":117:154)
#true = #cir.bool<true> : !cir.bool
!ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_structType = !cir.struct<struct "_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_structType" {!s32i}>
#loc233 = loc(fused[#loc14, #loc15])
#loc260 = loc(fused[#loc84, #loc85])
#loc287 = loc(fused[#loc155, #loc156])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc227)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc228)
  cir.func private  @printIntLine(!s32i) loc(#loc229)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc230)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc231)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b_badSink(%arg0: !ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_structType loc(fused[#loc14, #loc15])) extra(#fn_attr1) {
    %0 = cir.alloca !ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_structType, !cir.ptr<!ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_structType>, ["myStruct", init] {alignment = 4 : i64} loc(#loc233)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc234)
    cir.store %arg0, %0 : !ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_structType, !cir.ptr<!ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_structType> loc(#loc18)
    %2 = cir.get_member %0[0] {name = "structFirst"} : !cir.ptr<!ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_structType> -> !cir.ptr<!s32i> loc(#loc19)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc234)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc236)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc237)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc26)
      %7 = cir.const #cir.int<10> : !s32i loc(#loc27)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc27)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc238)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc239)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc26)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc240)
      cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc237)
      cir.scope {
        %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc33)
        %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !s32i loc(#loc242)
        %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc34)
        cir.if %20 {
          %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc36)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc37)
          %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc38)
          cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc36)
        } loc(#loc243)
      } loc(#loc241)
      cir.scope {
        %16 = cir.const #cir.int<0> : !s32i loc(#loc41)
        cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc245)
        cir.for : cond {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc43)
          %18 = cir.const #cir.int<10> : !s32i loc(#loc44)
          %19 = cir.cmp(lt, %17, %18) : !s32i, !s32i loc(#loc246)
          %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc45)
          cir.condition(%20) loc(#loc45)
        } body {
          cir.scope {
            %17 = cir.const #cir.int<0> : !s32i loc(#loc47)
            %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc48)
            %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc49)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc50)
            cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc248)
          } loc(#loc247)
          cir.yield loc(#loc40)
        } step {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc51)
          %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc52)
          cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc249)
          cir.yield loc(#loc244)
        } loc(#loc244)
      } loc(#loc244)
      cir.scope {
        %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc55)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc56)
        %18 = cir.cmp(ge, %16, %17) : !s32i, !s32i loc(#loc251)
        %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc57)
        cir.if %19 {
          %20 = cir.const #cir.int<1> : !s32i loc(#loc61)
          %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc62)
          %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc63)
          %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc64)
          cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc253)
          cir.scope {
            %24 = cir.const #cir.int<0> : !s32i loc(#loc67)
            cir.store %24, %4 : !s32i, !cir.ptr<!s32i> loc(#loc255)
            cir.for : cond {
              %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc69)
              %26 = cir.const #cir.int<10> : !s32i loc(#loc70)
              %27 = cir.cmp(lt, %25, %26) : !s32i, !s32i loc(#loc256)
              %28 = cir.cast(int_to_bool, %27 : !s32i), !cir.bool loc(#loc71)
              cir.condition(%28) loc(#loc71)
            } body {
              cir.scope {
                %25 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc73)
                %26 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc74)
                %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc75)
                %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc73)
                cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc76)
              } loc(#loc257)
              cir.yield loc(#loc66)
            } step {
              %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc77)
              %26 = cir.unary(inc, %25) : !s32i, !s32i loc(#loc78)
              cir.store %26, %4 : !s32i, !cir.ptr<!s32i> loc(#loc258)
              cir.yield loc(#loc254)
            } loc(#loc254)
          } loc(#loc254)
        } else {
          %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc9)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc79)
        } loc(#loc252)
      } loc(#loc250)
      %13 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc80)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc81)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc81)
      cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc80)
    } loc(#loc235)
    cir.return loc(#loc13)
  } loc(#loc232)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b_goodG2BSink(%arg0: !ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_structType loc(fused[#loc84, #loc85])) extra(#fn_attr1) {
    %0 = cir.alloca !ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_structType, !cir.ptr<!ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_structType>, ["myStruct", init] {alignment = 4 : i64} loc(#loc260)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc261)
    cir.store %arg0, %0 : !ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_structType, !cir.ptr<!ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_structType> loc(#loc88)
    %2 = cir.get_member %0[0] {name = "structFirst"} : !cir.ptr<!ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_structType> -> !cir.ptr<!s32i> loc(#loc19)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc87)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc261)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc263)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc264)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc95)
      %7 = cir.const #cir.int<10> : !s32i loc(#loc96)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc96)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc265)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc266)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc95)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc267)
      cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc264)
      cir.scope {
        %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc101)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc102)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc102)
        %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !s32i loc(#loc269)
        %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc103)
        cir.if %20 {
          %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc105)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc106)
          %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc107)
          cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc105)
        } loc(#loc270)
      } loc(#loc268)
      cir.scope {
        %16 = cir.const #cir.int<0> : !s32i loc(#loc110)
        cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc272)
        cir.for : cond {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc112)
          %18 = cir.const #cir.int<10> : !s32i loc(#loc113)
          %19 = cir.cmp(lt, %17, %18) : !s32i, !s32i loc(#loc273)
          %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc114)
          cir.condition(%20) loc(#loc114)
        } body {
          cir.scope {
            %17 = cir.const #cir.int<0> : !s32i loc(#loc116)
            %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc117)
            %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc118)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc119)
            cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc275)
          } loc(#loc274)
          cir.yield loc(#loc109)
        } step {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc120)
          %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc121)
          cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc276)
          cir.yield loc(#loc271)
        } loc(#loc271)
      } loc(#loc271)
      cir.scope {
        %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc124)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc125)
        %18 = cir.cmp(ge, %16, %17) : !s32i, !s32i loc(#loc278)
        %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc126)
        cir.if %19 {
          %20 = cir.const #cir.int<1> : !s32i loc(#loc130)
          %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc131)
          %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc132)
          %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc133)
          cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc280)
          cir.scope {
            %24 = cir.const #cir.int<0> : !s32i loc(#loc136)
            cir.store %24, %4 : !s32i, !cir.ptr<!s32i> loc(#loc282)
            cir.for : cond {
              %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc138)
              %26 = cir.const #cir.int<10> : !s32i loc(#loc139)
              %27 = cir.cmp(lt, %25, %26) : !s32i, !s32i loc(#loc283)
              %28 = cir.cast(int_to_bool, %27 : !s32i), !cir.bool loc(#loc140)
              cir.condition(%28) loc(#loc140)
            } body {
              cir.scope {
                %25 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc142)
                %26 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc143)
                %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc144)
                %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc142)
                cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc145)
              } loc(#loc284)
              cir.yield loc(#loc135)
            } step {
              %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc146)
              %26 = cir.unary(inc, %25) : !s32i, !s32i loc(#loc147)
              cir.store %26, %4 : !s32i, !cir.ptr<!s32i> loc(#loc285)
              cir.yield loc(#loc281)
            } loc(#loc281)
          } loc(#loc281)
        } else {
          %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc148)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc148)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc149)
        } loc(#loc279)
      } loc(#loc277)
      %13 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc150)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc151)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc151)
      cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc150)
    } loc(#loc262)
    cir.return loc(#loc83)
  } loc(#loc259)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc152)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b_goodB2GSink(%arg0: !ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_structType loc(fused[#loc155, #loc156])) extra(#fn_attr1) {
    %0 = cir.alloca !ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_structType, !cir.ptr<!ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_structType>, ["myStruct", init] {alignment = 4 : i64} loc(#loc287)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc288)
    cir.store %arg0, %0 : !ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_structType, !cir.ptr<!ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_structType> loc(#loc159)
    %2 = cir.get_member %0[0] {name = "structFirst"} : !cir.ptr<!ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_structType> -> !cir.ptr<!s32i> loc(#loc19)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc158)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc288)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc290)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc291)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc166)
      %7 = cir.const #cir.int<10> : !s32i loc(#loc167)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc167)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc292)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc293)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc166)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc294)
      cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc291)
      cir.scope {
        %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc172)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc173)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc173)
        %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !s32i loc(#loc296)
        %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc174)
        cir.if %20 {
          %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc176)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc177)
          %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc178)
          cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc176)
        } loc(#loc297)
      } loc(#loc295)
      cir.scope {
        %16 = cir.const #cir.int<0> : !s32i loc(#loc181)
        cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc299)
        cir.for : cond {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc183)
          %18 = cir.const #cir.int<10> : !s32i loc(#loc184)
          %19 = cir.cmp(lt, %17, %18) : !s32i, !s32i loc(#loc300)
          %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc185)
          cir.condition(%20) loc(#loc185)
        } body {
          cir.scope {
            %17 = cir.const #cir.int<0> : !s32i loc(#loc187)
            %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc188)
            %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc189)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc190)
            cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc302)
          } loc(#loc301)
          cir.yield loc(#loc180)
        } step {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc191)
          %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc192)
          cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc303)
          cir.yield loc(#loc298)
        } loc(#loc298)
      } loc(#loc298)
      cir.scope {
        %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc195)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc196)
        %18 = cir.cmp(ge, %16, %17) : !s32i, !s32i loc(#loc305)
        %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc197)
        %20 = cir.ternary(%19, true {
          %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc199)
          %22 = cir.const #cir.int<10> : !s32i loc(#loc200)
          %23 = cir.cmp(lt, %21, %22) : !s32i, !s32i loc(#loc306)
          %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc202)
          %25 = cir.ternary(%24, true {
            %26 = cir.const #true loc(#loc198)
            cir.yield %26 : !cir.bool loc(#loc198)
          }, false {
            %26 = cir.const #false loc(#loc198)
            cir.yield %26 : !cir.bool loc(#loc198)
          }) : (!cir.bool) -> !cir.bool loc(#loc198)
          cir.yield %25 : !cir.bool loc(#loc198)
        }, false {
          %21 = cir.const #false loc(#loc198)
          cir.yield %21 : !cir.bool loc(#loc198)
        }) : (!cir.bool) -> !cir.bool loc(#loc198)
        cir.if %20 {
          %21 = cir.const #cir.int<1> : !s32i loc(#loc206)
          %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc207)
          %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc208)
          %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc209)
          cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc308)
          cir.scope {
            %25 = cir.const #cir.int<0> : !s32i loc(#loc212)
            cir.store %25, %4 : !s32i, !cir.ptr<!s32i> loc(#loc310)
            cir.for : cond {
              %26 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc214)
              %27 = cir.const #cir.int<10> : !s32i loc(#loc215)
              %28 = cir.cmp(lt, %26, %27) : !s32i, !s32i loc(#loc311)
              %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc216)
              cir.condition(%29) loc(#loc216)
            } body {
              cir.scope {
                %26 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc218)
                %27 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc219)
                %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc220)
                %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc218)
                cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc221)
              } loc(#loc312)
              cir.yield loc(#loc211)
            } step {
              %26 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc222)
              %27 = cir.unary(inc, %26) : !s32i, !s32i loc(#loc223)
              cir.store %27, %4 : !s32i, !cir.ptr<!s32i> loc(#loc313)
              cir.yield loc(#loc309)
            } loc(#loc309)
          } loc(#loc309)
        } else {
          %21 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc152)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc152)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc224)
        } loc(#loc307)
      } loc(#loc304)
      %13 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc225)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc226)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc226)
      cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc225)
    } loc(#loc289)
    cir.return loc(#loc154)
  } loc(#loc286)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":74:23)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":49:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":78:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":51:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":51:25)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":50:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":44:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":52:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":77:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":53:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":53:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":54:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":54:54)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":54:31)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":54:38)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":54:43)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":54:53)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":55:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":55:39)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":55:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":55:23)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":55:20)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":55:29)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":55:30)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":55:36)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":55:35)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":57:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":60:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":57:18)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":57:14)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":57:21)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":57:25)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":57:23)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":58:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":59:25)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":59:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":59:20)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":59:21)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":57:30)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":57:29)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":63:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":75:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":63:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":63:21)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":63:18)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":64:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":71:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":73:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":65:28)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":65:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":65:20)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":65:24)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":67:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":70:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":67:21)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":67:17)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":67:24)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":67:28)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":67:26)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":68:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":69:30)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":69:37)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":69:38)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":69:17)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":67:33)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":67:32)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":74:13)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":76:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":76:14)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":85:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":114:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":87:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":87:25)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":86:1)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":88:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":113:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":89:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":89:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":90:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":90:54)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":90:31)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":90:38)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":90:43)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":90:53)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":91:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":91:39)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":91:13)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":91:23)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":91:20)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":91:29)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":91:30)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":91:36)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":91:35)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":93:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":96:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":93:18)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":93:14)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":93:21)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":93:25)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":93:23)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":94:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":95:25)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":95:13)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":95:20)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":95:21)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":93:30)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":93:29)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":99:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":111:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":99:13)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":99:21)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":99:18)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":100:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":107:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":109:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":101:28)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":101:13)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":101:20)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":101:24)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":103:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":106:13)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":103:21)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":103:17)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":103:24)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":103:28)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":103:26)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":104:13)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":105:30)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":105:37)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":105:38)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":105:17)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":103:33)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":103:32)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":110:23)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":110:13)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":112:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":112:14)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":141:23)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":117:1)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":145:1)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":119:5)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":119:25)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":118:1)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":120:5)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":144:5)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":121:9)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":121:13)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":122:9)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":122:54)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":122:31)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":122:38)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":122:43)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":122:53)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":123:9)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":123:39)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":123:13)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":123:23)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":123:20)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":123:29)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":123:30)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":123:36)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":123:35)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":125:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":128:9)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":125:18)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":125:14)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":125:21)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":125:25)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":125:23)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":126:9)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":127:25)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":127:13)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":127:20)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":127:21)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":125:30)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":125:29)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":130:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":142:9)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":130:13)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":130:21)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":130:18)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":130:23)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":130:26)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":130:34)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":130:36)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":130:31)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":131:9)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":138:9)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":140:9)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":132:28)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":132:13)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":132:20)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":132:24)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":134:13)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":137:13)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":134:21)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":134:17)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":134:24)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":134:28)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":134:26)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":135:13)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":136:30)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":136:37)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":136:38)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":136:17)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":134:33)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":134:32)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":141:13)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":143:9)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c":143:14)
#loc227 = loc(fused[#loc1, #loc2])
#loc228 = loc(fused[#loc3, #loc4])
#loc229 = loc(fused[#loc5, #loc6])
#loc230 = loc(fused[#loc7, #loc8])
#loc231 = loc(fused[#loc10, #loc11])
#loc232 = loc(fused[#loc12, #loc13])
#loc234 = loc(fused[#loc16, #loc17])
#loc235 = loc(fused[#loc20, #loc21])
#loc236 = loc(fused[#loc22, #loc23])
#loc237 = loc(fused[#loc24, #loc25])
#loc238 = loc(fused[#loc28, #loc29])
#loc239 = loc(fused[#loc27, #loc29])
#loc240 = loc(fused[#loc26, #loc25])
#loc241 = loc(fused[#loc30, #loc31])
#loc242 = loc(fused[#loc32, #loc33])
#loc243 = loc(fused[#loc35, #loc31])
#loc244 = loc(fused[#loc39, #loc40])
#loc245 = loc(fused[#loc42, #loc41])
#loc246 = loc(fused[#loc43, #loc44])
#loc247 = loc(fused[#loc46, #loc40])
#loc248 = loc(fused[#loc48, #loc47])
#loc249 = loc(fused[#loc52, #loc51])
#loc250 = loc(fused[#loc53, #loc54])
#loc251 = loc(fused[#loc55, #loc56])
#loc252 = loc(fused[#loc58, #loc59, #loc60, #loc54])
#loc253 = loc(fused[#loc62, #loc61])
#loc254 = loc(fused[#loc65, #loc66])
#loc255 = loc(fused[#loc68, #loc67])
#loc256 = loc(fused[#loc69, #loc70])
#loc257 = loc(fused[#loc72, #loc66])
#loc258 = loc(fused[#loc78, #loc77])
#loc259 = loc(fused[#loc82, #loc83])
#loc261 = loc(fused[#loc86, #loc87])
#loc262 = loc(fused[#loc89, #loc90])
#loc263 = loc(fused[#loc91, #loc92])
#loc264 = loc(fused[#loc93, #loc94])
#loc265 = loc(fused[#loc97, #loc98])
#loc266 = loc(fused[#loc96, #loc98])
#loc267 = loc(fused[#loc95, #loc94])
#loc268 = loc(fused[#loc99, #loc100])
#loc269 = loc(fused[#loc101, #loc102])
#loc270 = loc(fused[#loc104, #loc100])
#loc271 = loc(fused[#loc108, #loc109])
#loc272 = loc(fused[#loc111, #loc110])
#loc273 = loc(fused[#loc112, #loc113])
#loc274 = loc(fused[#loc115, #loc109])
#loc275 = loc(fused[#loc117, #loc116])
#loc276 = loc(fused[#loc121, #loc120])
#loc277 = loc(fused[#loc122, #loc123])
#loc278 = loc(fused[#loc124, #loc125])
#loc279 = loc(fused[#loc127, #loc128, #loc129, #loc123])
#loc280 = loc(fused[#loc131, #loc130])
#loc281 = loc(fused[#loc134, #loc135])
#loc282 = loc(fused[#loc137, #loc136])
#loc283 = loc(fused[#loc138, #loc139])
#loc284 = loc(fused[#loc141, #loc135])
#loc285 = loc(fused[#loc147, #loc146])
#loc286 = loc(fused[#loc153, #loc154])
#loc288 = loc(fused[#loc157, #loc158])
#loc289 = loc(fused[#loc160, #loc161])
#loc290 = loc(fused[#loc162, #loc163])
#loc291 = loc(fused[#loc164, #loc165])
#loc292 = loc(fused[#loc168, #loc169])
#loc293 = loc(fused[#loc167, #loc169])
#loc294 = loc(fused[#loc166, #loc165])
#loc295 = loc(fused[#loc170, #loc171])
#loc296 = loc(fused[#loc172, #loc173])
#loc297 = loc(fused[#loc175, #loc171])
#loc298 = loc(fused[#loc179, #loc180])
#loc299 = loc(fused[#loc182, #loc181])
#loc300 = loc(fused[#loc183, #loc184])
#loc301 = loc(fused[#loc186, #loc180])
#loc302 = loc(fused[#loc188, #loc187])
#loc303 = loc(fused[#loc192, #loc191])
#loc304 = loc(fused[#loc193, #loc194])
#loc305 = loc(fused[#loc195, #loc196])
#loc306 = loc(fused[#loc199, #loc201])
#loc307 = loc(fused[#loc203, #loc204, #loc205, #loc194])
#loc308 = loc(fused[#loc207, #loc206])
#loc309 = loc(fused[#loc210, #loc211])
#loc310 = loc(fused[#loc213, #loc212])
#loc311 = loc(fused[#loc214, #loc215])
#loc312 = loc(fused[#loc217, #loc211])
#loc313 = loc(fused[#loc223, #loc222])
