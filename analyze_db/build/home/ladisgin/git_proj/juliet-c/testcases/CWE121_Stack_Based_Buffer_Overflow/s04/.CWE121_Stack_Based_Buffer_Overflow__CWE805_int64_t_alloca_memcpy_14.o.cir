!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" external @globalFive : !s32i {alignment = 4 : i64} loc(#loc107)
  cir.func private @printLongLongLine(!s64i) loc(#loc108)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc110)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc111)
    %2 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc112)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc12)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc12)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc12)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc12)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %8 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc113)
    %9 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc12)
    cir.store %10, %2 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc112)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc14)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc14)
    %13 = cir.const #cir.int<8> : !u64i loc(#loc14)
    %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc14)
    %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc14)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc14)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc14)
    cir.store %17, %8 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc113)
    cir.br ^bb1 loc(#loc114)
  ^bb1:  // pred: ^bb0
    %18 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc107)
    %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %20 = cir.const #cir.int<5> : !s32i loc(#loc18)
    %21 = cir.cmp(eq, %19, %20) : !s32i, !cir.bool loc(#loc115)
    cir.brcond %21 ^bb2, ^bb3 loc(#loc116)
  ^bb2:  // pred: ^bb1
    %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc20)
    cir.store %22, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc117)
    cir.br ^bb3 loc(#loc16)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc16)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc118)
  ^bb5:  // pred: ^bb4
    %23 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc110)
    cir.store %23, %0 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc110)
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc24)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc24)
    %26 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc25)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc25)
    %28 = cir.const #cir.int<100> : !s32i loc(#loc26)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc26)
    %30 = cir.const #cir.int<8> : !u64i loc(#loc119)
    %31 = cir.binop(mul, %29, %30) : !u64i loc(#loc120)
    cir.libc.memcpy %31 bytes from %27 to %25 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc121)
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc31)
    %33 = cir.const #cir.int<0> : !s32i loc(#loc32)
    %34 = cir.ptr_stride(%32 : !cir.ptr<!s64i>, %33 : !s32i), !cir.ptr<!s64i> loc(#loc33)
    %35 = cir.load %34 : !cir.ptr<!s64i>, !s64i loc(#loc31)
    cir.call @printLongLongLine(%35) : (!s64i) -> () loc(#loc34)
    cir.br ^bb6 loc(#loc23)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc6)
  } loc(#loc109)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc123)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc124)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc36)
  } loc(#loc122)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc125)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc43)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc127)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc128)
    %2 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc129)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc51)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc51)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc51)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc51)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc51)
    %8 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc130)
    %9 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc51)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc51)
    cir.store %10, %2 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc129)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc53)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc53)
    %13 = cir.const #cir.int<8> : !u64i loc(#loc53)
    %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc53)
    %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc53)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc53)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc53)
    cir.store %17, %8 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc130)
    cir.br ^bb1 loc(#loc131)
  ^bb1:  // pred: ^bb0
    %18 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc107)
    %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc56)
    %20 = cir.const #cir.int<5> : !s32i loc(#loc57)
    %21 = cir.cmp(ne, %19, %20) : !s32i, !cir.bool loc(#loc132)
    cir.brcond %21 ^bb2, ^bb3 loc(#loc133)
  ^bb2:  // pred: ^bb1
    %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc43)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    cir.br ^bb4 loc(#loc59)
  ^bb3:  // pred: ^bb1
    %24 = cir.load %8 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc62)
    cir.store %24, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc134)
    cir.br ^bb4 loc(#loc55)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc55)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc135)
  ^bb6:  // pred: ^bb5
    %25 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc127)
    cir.store %25, %0 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc127)
    %26 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc66)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc66)
    %28 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc67)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc67)
    %30 = cir.const #cir.int<100> : !s32i loc(#loc68)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc68)
    %32 = cir.const #cir.int<8> : !u64i loc(#loc136)
    %33 = cir.binop(mul, %31, %32) : !u64i loc(#loc137)
    cir.libc.memcpy %33 bytes from %29 to %27 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc138)
    %34 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc73)
    %35 = cir.const #cir.int<0> : !s32i loc(#loc74)
    %36 = cir.ptr_stride(%34 : !cir.ptr<!s64i>, %35 : !s32i), !cir.ptr<!s64i> loc(#loc75)
    %37 = cir.load %36 : !cir.ptr<!s64i>, !s64i loc(#loc73)
    cir.call @printLongLongLine(%37) : (!s64i) -> () loc(#loc76)
    cir.br ^bb7 loc(#loc65)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc45)
  } loc(#loc126)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc140)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc141)
    %2 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc142)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc84)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc84)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc84)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc84)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc84)
    %8 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc143)
    %9 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc84)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc84)
    cir.store %10, %2 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc142)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc86)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc86)
    %13 = cir.const #cir.int<8> : !u64i loc(#loc86)
    %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc86)
    %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc86)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc86)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc86)
    cir.store %17, %8 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc143)
    cir.br ^bb1 loc(#loc144)
  ^bb1:  // pred: ^bb0
    %18 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc107)
    %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    %20 = cir.const #cir.int<5> : !s32i loc(#loc90)
    %21 = cir.cmp(eq, %19, %20) : !s32i, !cir.bool loc(#loc145)
    cir.brcond %21 ^bb2, ^bb3 loc(#loc146)
  ^bb2:  // pred: ^bb1
    %22 = cir.load %8 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc92)
    cir.store %22, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc147)
    cir.br ^bb3 loc(#loc88)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc88)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc148)
  ^bb5:  // pred: ^bb4
    %23 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc140)
    cir.store %23, %0 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc140)
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc96)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc96)
    %26 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc97)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc97)
    %28 = cir.const #cir.int<100> : !s32i loc(#loc98)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc98)
    %30 = cir.const #cir.int<8> : !u64i loc(#loc149)
    %31 = cir.binop(mul, %29, %30) : !u64i loc(#loc150)
    cir.libc.memcpy %31 bytes from %27 to %25 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc151)
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc103)
    %33 = cir.const #cir.int<0> : !s32i loc(#loc104)
    %34 = cir.ptr_stride(%32 : !cir.ptr<!s64i>, %33 : !s32i), !cir.ptr<!s64i> loc(#loc105)
    %35 = cir.load %34 : !cir.ptr<!s64i>, !s64i loc(#loc103)
    cir.call @printLongLongLine(%35) : (!s64i) -> () loc(#loc106)
    cir.br ^bb6 loc(#loc95)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc78)
  } loc(#loc139)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":118:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":118:12)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":21:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":38:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":33:9)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":33:33)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":23:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":23:15)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":24:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":24:42)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":25:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":25:43)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":26:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":31:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":26:8)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":26:20)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":27:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":30:16)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":30:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":32:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":37:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":35:16)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":35:22)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":35:30)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":35:34)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":35:48)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":35:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":35:49)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":36:27)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":36:32)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":36:33)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":36:9)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":87:1)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":91:1)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":89:5)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":89:14)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":90:5)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":90:14)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":53:19)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":45:1)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":66:1)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":61:9)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":61:33)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":47:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":47:15)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":48:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":48:42)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":49:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":49:43)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":50:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":59:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":50:8)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":50:20)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":51:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":54:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":56:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":53:9)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":58:16)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":58:9)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":60:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":65:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":63:16)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":63:22)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":63:30)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":63:34)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":63:48)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":63:9)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":63:49)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":64:27)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":64:32)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":64:33)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":64:9)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":69:1)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":85:1)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":80:9)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":80:33)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":71:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":71:15)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":72:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":72:42)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":73:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":73:43)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":74:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":78:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":74:8)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":74:20)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":75:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":77:16)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":77:9)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":79:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":84:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":82:16)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":82:22)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":82:30)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":82:34)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":82:48)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":82:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":82:49)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":83:27)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":83:32)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":83:33)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c":83:9)
#loc107 = loc(fused[#loc1, #loc2])
#loc108 = loc(fused[#loc3, #loc4])
#loc109 = loc(fused[#loc5, #loc6])
#loc110 = loc(fused[#loc7, #loc8])
#loc111 = loc(fused[#loc9, #loc10])
#loc112 = loc(fused[#loc11, #loc12])
#loc113 = loc(fused[#loc13, #loc14])
#loc114 = loc(fused[#loc15, #loc16])
#loc115 = loc(fused[#loc17, #loc18])
#loc116 = loc(fused[#loc19, #loc16])
#loc117 = loc(fused[#loc21, #loc20])
#loc118 = loc(fused[#loc22, #loc23])
#loc119 = loc(fused[#loc27, #loc28])
#loc120 = loc(fused[#loc26, #loc28])
#loc121 = loc(fused[#loc29, #loc30])
#loc122 = loc(fused[#loc35, #loc36])
#loc123 = loc(fused[#loc37, #loc38])
#loc124 = loc(fused[#loc39, #loc40])
#loc125 = loc(fused[#loc41, #loc42])
#loc126 = loc(fused[#loc44, #loc45])
#loc127 = loc(fused[#loc46, #loc47])
#loc128 = loc(fused[#loc48, #loc49])
#loc129 = loc(fused[#loc50, #loc51])
#loc130 = loc(fused[#loc52, #loc53])
#loc131 = loc(fused[#loc54, #loc55])
#loc132 = loc(fused[#loc56, #loc57])
#loc133 = loc(fused[#loc58, #loc59, #loc60, #loc55])
#loc134 = loc(fused[#loc63, #loc62])
#loc135 = loc(fused[#loc64, #loc65])
#loc136 = loc(fused[#loc69, #loc70])
#loc137 = loc(fused[#loc68, #loc70])
#loc138 = loc(fused[#loc71, #loc72])
#loc139 = loc(fused[#loc77, #loc78])
#loc140 = loc(fused[#loc79, #loc80])
#loc141 = loc(fused[#loc81, #loc82])
#loc142 = loc(fused[#loc83, #loc84])
#loc143 = loc(fused[#loc85, #loc86])
#loc144 = loc(fused[#loc87, #loc88])
#loc145 = loc(fused[#loc89, #loc90])
#loc146 = loc(fused[#loc91, #loc88])
#loc147 = loc(fused[#loc93, #loc92])
#loc148 = loc(fused[#loc94, #loc95])
#loc149 = loc(fused[#loc99, #loc100])
#loc150 = loc(fused[#loc98, #loc100])
#loc151 = loc(fused[#loc101, #loc102])
