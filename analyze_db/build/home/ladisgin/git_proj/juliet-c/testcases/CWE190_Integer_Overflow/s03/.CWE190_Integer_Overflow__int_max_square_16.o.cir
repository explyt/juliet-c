!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc57 = loc("CWE190_Integer_Overflow__int_max_square_16.c":65:28)
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc94)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc96)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc97)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc98)
    cir.br ^bb1 loc(#loc99)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc99)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc13)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc14)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    cir.br ^bb4 loc(#loc16)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc12)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc101)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc101)
  ^bb7:  // pred: ^bb6
    %6 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %7 ^bb8, ^bb11 loc(#loc19)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc102)
  ^bb9:  // pred: ^bb8
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc22)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc6)
    %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc22)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc24)
    cir.br ^bb10 loc(#loc21)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc25)
  ^bb11:  // 2 preds: ^bb7, ^bb10
    cir.br ^bb12 loc(#loc18)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc4)
  } loc(#loc95)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc104)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc105)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    cir.return loc(#loc27)
  } loc(#loc103)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc32)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc106)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc35)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc108)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc109)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc42)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc110)
    cir.br ^bb1 loc(#loc111)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc111)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc46)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc46)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc46)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc47)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    cir.br ^bb4 loc(#loc49)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc45)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc113)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc113)
  ^bb7:  // pred: ^bb6
    %6 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc52)
    cir.brcond %7 ^bb8, ^bb22 loc(#loc52)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc114)
  ^bb9:  // pred: ^bb8
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc55)
    %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc56)
    %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc56)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc56)
    %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc56)
    %13 = cir.cmp(gt, %8, %12) : !s32i, !cir.bool loc(#loc115)
    cir.brcond %13 ^bb10, ^bb15 loc(#loc57)
  ^bb10:  // pred: ^bb9
    %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc58)
    %15 = cir.abs %14 poison : !s32i loc(#loc59)
    %16 = cir.cast(integral, %15 : !s32i), !s64i loc(#loc59)
    %17 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc60)
    %18 = cir.const #cir.int<2147483647> : !s32i loc(#loc61)
    %19 = cir.cast(int_to_float, %18 : !s32i), !cir.double loc(#loc61)
    %20 = cir.call @sqrt(%19) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc60)
    %21 = cir.cast(float_to_int, %20 : !cir.double), !s64i loc(#loc60)
    %22 = cir.cmp(lt, %16, %21) : !s64i, !cir.bool loc(#loc116)
    cir.brcond %22 ^bb11, ^bb12 loc(#loc57)
  ^bb11:  // pred: ^bb10
    %23 = cir.const #true loc(#loc57)
    cir.br ^bb13(%23 : !cir.bool) loc(#loc57)
  ^bb12:  // pred: ^bb10
    %24 = cir.const #false loc(#loc57)
    cir.br ^bb13(%24 : !cir.bool) loc(#loc57)
  ^bb13(%25: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_16.c":65:28)):  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc57)
  ^bb14:  // pred: ^bb13
    cir.br ^bb16(%25 : !cir.bool) loc(#loc57)
  ^bb15:  // pred: ^bb9
    %26 = cir.const #false loc(#loc57)
    cir.br ^bb16(%26 : !cir.bool) loc(#loc57)
  ^bb16(%27: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_16.c":65:28)):  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc57)
  ^bb17:  // pred: ^bb16
    cir.brcond %27 ^bb18, ^bb19 loc(#loc117)
  ^bb18:  // pred: ^bb17
    %28 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    %30 = cir.binop(mul, %28, %29) nsw : !s32i loc(#loc66)
    cir.store %30, %0 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    %31 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc67)
    cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc68)
    cir.br ^bb20 loc(#loc64)
  ^bb19:  // pred: ^bb17
    %32 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc35)
    %33 = cir.cast(array_to_ptrdecay, %32 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%33) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    cir.br ^bb20 loc(#loc54)
  ^bb20:  // 2 preds: ^bb18, ^bb19
    cir.br ^bb21 loc(#loc54)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc70)
  ^bb22:  // 2 preds: ^bb7, ^bb21
    cir.br ^bb23 loc(#loc51)
  ^bb23:  // pred: ^bb22
    cir.return loc(#loc37)
  } loc(#loc107)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc119)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc120)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc77)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc121)
    cir.br ^bb1 loc(#loc122)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc122)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc81)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc81)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<2> : !s32i loc(#loc82)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc123)
    cir.br ^bb4 loc(#loc84)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc80)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc124)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc124)
  ^bb7:  // pred: ^bb6
    %6 = cir.const #cir.int<1> : !s32i loc(#loc87)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc87)
    cir.brcond %7 ^bb8, ^bb11 loc(#loc87)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc125)
  ^bb9:  // pred: ^bb8
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc90)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc74)
    %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc90)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc91)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc92)
    cir.br ^bb10 loc(#loc89)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc93)
  ^bb11:  // 2 preds: ^bb7, ^bb10
    cir.br ^bb12 loc(#loc86)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc72)
  } loc(#loc118)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_16.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_square_16.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__int_max_square_16.c":44:1)
#loc5 = loc("CWE190_Integer_Overflow__int_max_square_16.c":39:13)
#loc6 = loc("CWE190_Integer_Overflow__int_max_square_16.c":39:33)
#loc7 = loc("CWE190_Integer_Overflow__int_max_square_16.c":26:5)
#loc8 = loc("CWE190_Integer_Overflow__int_max_square_16.c":26:9)
#loc9 = loc("CWE190_Integer_Overflow__int_max_square_16.c":28:12)
#loc10 = loc("CWE190_Integer_Overflow__int_max_square_16.c":28:5)
#loc11 = loc("CWE190_Integer_Overflow__int_max_square_16.c":29:5)
#loc12 = loc("CWE190_Integer_Overflow__int_max_square_16.c":34:5)
#loc13 = loc("CWE190_Integer_Overflow__int_max_square_16.c":29:11)
#loc14 = loc("CWE190_Integer_Overflow__int_max_square_16.c":32:16)
#loc15 = loc("CWE190_Integer_Overflow__int_max_square_16.c":32:9)
#loc16 = loc("CWE190_Integer_Overflow__int_max_square_16.c":33:9)
#loc17 = loc("CWE190_Integer_Overflow__int_max_square_16.c":35:5)
#loc18 = loc("CWE190_Integer_Overflow__int_max_square_16.c":43:5)
#loc19 = loc("CWE190_Integer_Overflow__int_max_square_16.c":35:11)
#loc20 = loc("CWE190_Integer_Overflow__int_max_square_16.c":37:9)
#loc21 = loc("CWE190_Integer_Overflow__int_max_square_16.c":41:9)
#loc22 = loc("CWE190_Integer_Overflow__int_max_square_16.c":39:26)
#loc23 = loc("CWE190_Integer_Overflow__int_max_square_16.c":40:26)
#loc24 = loc("CWE190_Integer_Overflow__int_max_square_16.c":40:13)
#loc25 = loc("CWE190_Integer_Overflow__int_max_square_16.c":42:9)
#loc26 = loc("CWE190_Integer_Overflow__int_max_square_16.c":101:1)
#loc27 = loc("CWE190_Integer_Overflow__int_max_square_16.c":105:1)
#loc28 = loc("CWE190_Integer_Overflow__int_max_square_16.c":103:5)
#loc29 = loc("CWE190_Integer_Overflow__int_max_square_16.c":103:13)
#loc30 = loc("CWE190_Integer_Overflow__int_max_square_16.c":104:5)
#loc31 = loc("CWE190_Integer_Overflow__int_max_square_16.c":104:13)
#loc32 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc35 = loc("CWE190_Integer_Overflow__int_max_square_16.c":72:23)
#loc36 = loc("CWE190_Integer_Overflow__int_max_square_16.c":51:1)
#loc37 = loc("CWE190_Integer_Overflow__int_max_square_16.c":76:1)
#loc38 = loc("CWE190_Integer_Overflow__int_max_square_16.c":67:13)
#loc39 = loc("CWE190_Integer_Overflow__int_max_square_16.c":67:33)
#loc40 = loc("CWE190_Integer_Overflow__int_max_square_16.c":53:5)
#loc41 = loc("CWE190_Integer_Overflow__int_max_square_16.c":53:9)
#loc42 = loc("CWE190_Integer_Overflow__int_max_square_16.c":55:12)
#loc43 = loc("CWE190_Integer_Overflow__int_max_square_16.c":55:5)
#loc44 = loc("CWE190_Integer_Overflow__int_max_square_16.c":56:5)
#loc45 = loc("CWE190_Integer_Overflow__int_max_square_16.c":61:5)
#loc46 = loc("CWE190_Integer_Overflow__int_max_square_16.c":56:11)
#loc47 = loc("CWE190_Integer_Overflow__int_max_square_16.c":59:16)
#loc48 = loc("CWE190_Integer_Overflow__int_max_square_16.c":59:9)
#loc49 = loc("CWE190_Integer_Overflow__int_max_square_16.c":60:9)
#loc50 = loc("CWE190_Integer_Overflow__int_max_square_16.c":62:5)
#loc51 = loc("CWE190_Integer_Overflow__int_max_square_16.c":75:5)
#loc52 = loc("CWE190_Integer_Overflow__int_max_square_16.c":62:11)
#loc53 = loc("CWE190_Integer_Overflow__int_max_square_16.c":65:9)
#loc54 = loc("CWE190_Integer_Overflow__int_max_square_16.c":73:9)
#loc55 = loc("CWE190_Integer_Overflow__int_max_square_16.c":65:13)
#loc56 = loc("CWE190_Integer_Overflow__int_max_square_16.c":65:20)
#loc58 = loc("CWE190_Integer_Overflow__int_max_square_16.c":65:35)
#loc59 = loc("CWE190_Integer_Overflow__int_max_square_16.c":65:31)
#loc60 = loc("CWE190_Integer_Overflow__int_max_square_16.c":65:49)
#loc61 = loc("CWE190_Integer_Overflow__int_max_square_16.c":65:62)
#loc62 = loc("CWE190_Integer_Overflow__int_max_square_16.c":65:69)
#loc63 = loc("CWE190_Integer_Overflow__int_max_square_16.c":66:9)
#loc64 = loc("CWE190_Integer_Overflow__int_max_square_16.c":69:9)
#loc65 = loc("CWE190_Integer_Overflow__int_max_square_16.c":71:9)
#loc66 = loc("CWE190_Integer_Overflow__int_max_square_16.c":67:26)
#loc67 = loc("CWE190_Integer_Overflow__int_max_square_16.c":68:26)
#loc68 = loc("CWE190_Integer_Overflow__int_max_square_16.c":68:13)
#loc69 = loc("CWE190_Integer_Overflow__int_max_square_16.c":72:13)
#loc70 = loc("CWE190_Integer_Overflow__int_max_square_16.c":74:9)
#loc71 = loc("CWE190_Integer_Overflow__int_max_square_16.c":79:1)
#loc72 = loc("CWE190_Integer_Overflow__int_max_square_16.c":99:1)
#loc73 = loc("CWE190_Integer_Overflow__int_max_square_16.c":94:13)
#loc74 = loc("CWE190_Integer_Overflow__int_max_square_16.c":94:33)
#loc75 = loc("CWE190_Integer_Overflow__int_max_square_16.c":81:5)
#loc76 = loc("CWE190_Integer_Overflow__int_max_square_16.c":81:9)
#loc77 = loc("CWE190_Integer_Overflow__int_max_square_16.c":83:12)
#loc78 = loc("CWE190_Integer_Overflow__int_max_square_16.c":83:5)
#loc79 = loc("CWE190_Integer_Overflow__int_max_square_16.c":84:5)
#loc80 = loc("CWE190_Integer_Overflow__int_max_square_16.c":89:5)
#loc81 = loc("CWE190_Integer_Overflow__int_max_square_16.c":84:11)
#loc82 = loc("CWE190_Integer_Overflow__int_max_square_16.c":87:16)
#loc83 = loc("CWE190_Integer_Overflow__int_max_square_16.c":87:9)
#loc84 = loc("CWE190_Integer_Overflow__int_max_square_16.c":88:9)
#loc85 = loc("CWE190_Integer_Overflow__int_max_square_16.c":90:5)
#loc86 = loc("CWE190_Integer_Overflow__int_max_square_16.c":98:5)
#loc87 = loc("CWE190_Integer_Overflow__int_max_square_16.c":90:11)
#loc88 = loc("CWE190_Integer_Overflow__int_max_square_16.c":92:9)
#loc89 = loc("CWE190_Integer_Overflow__int_max_square_16.c":96:9)
#loc90 = loc("CWE190_Integer_Overflow__int_max_square_16.c":94:26)
#loc91 = loc("CWE190_Integer_Overflow__int_max_square_16.c":95:26)
#loc92 = loc("CWE190_Integer_Overflow__int_max_square_16.c":95:13)
#loc93 = loc("CWE190_Integer_Overflow__int_max_square_16.c":97:9)
#loc94 = loc(fused[#loc1, #loc2])
#loc95 = loc(fused[#loc3, #loc4])
#loc96 = loc(fused[#loc5, #loc6])
#loc97 = loc(fused[#loc7, #loc8])
#loc98 = loc(fused[#loc10, #loc9])
#loc99 = loc(fused[#loc11, #loc12])
#loc100 = loc(fused[#loc15, #loc14])
#loc101 = loc(fused[#loc17, #loc18])
#loc102 = loc(fused[#loc20, #loc21])
#loc103 = loc(fused[#loc26, #loc27])
#loc104 = loc(fused[#loc28, #loc29])
#loc105 = loc(fused[#loc30, #loc31])
#loc106 = loc(fused[#loc33, #loc34])
#loc107 = loc(fused[#loc36, #loc37])
#loc108 = loc(fused[#loc38, #loc39])
#loc109 = loc(fused[#loc40, #loc41])
#loc110 = loc(fused[#loc43, #loc42])
#loc111 = loc(fused[#loc44, #loc45])
#loc112 = loc(fused[#loc48, #loc47])
#loc113 = loc(fused[#loc50, #loc51])
#loc114 = loc(fused[#loc53, #loc54])
#loc115 = loc(fused[#loc55, #loc56])
#loc116 = loc(fused[#loc59, #loc62])
#loc117 = loc(fused[#loc63, #loc64, #loc65, #loc54])
#loc118 = loc(fused[#loc71, #loc72])
#loc119 = loc(fused[#loc73, #loc74])
#loc120 = loc(fused[#loc75, #loc76])
#loc121 = loc(fused[#loc78, #loc77])
#loc122 = loc(fused[#loc79, #loc80])
#loc123 = loc(fused[#loc83, #loc82])
#loc124 = loc(fused[#loc85, #loc86])
#loc125 = loc(fused[#loc88, #loc89])
