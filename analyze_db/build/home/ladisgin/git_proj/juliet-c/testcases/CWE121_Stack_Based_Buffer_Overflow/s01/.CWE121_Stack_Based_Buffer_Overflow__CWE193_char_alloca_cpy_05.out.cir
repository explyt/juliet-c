!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":122:10)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":122:14)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":122:20)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":122:32)
#loc149 = loc(fused[#loc54, #loc55])
#loc150 = loc(fused[#loc56, #loc57])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private @__const.goodG2B2.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc128)
  cir.global "private" constant cir_private @__const.goodG2B1.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc129)
  cir.global "private" constant cir_private @__const.CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05_bad.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc130)
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc131)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc132)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc133)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc135)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc136)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc18)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc18)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc18)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc18)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc18)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc137)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc18)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc18)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc136)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc20)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc20)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc20)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc20)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc20)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc20)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc20)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc20)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc137)
    cir.scope {
      %19 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc131)
      %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc23)
      %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc23)
      cir.if %21 {
        %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
        cir.store %22, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc140)
        %23 = cir.const #cir.int<0> : !s32i loc(#loc27)
        %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc27)
        %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
        %26 = cir.const #cir.int<0> : !s32i loc(#loc29)
        %27 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc30)
        cir.store %24, %27 : !s8i, !cir.ptr<!s8i> loc(#loc141)
      } loc(#loc139)
    } loc(#loc138)
    cir.scope {
      %19 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc130)
      %20 = cir.get_global @__const.CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05_bad.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc130)
      cir.copy %20 to %19 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc130)
      %21 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc33)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc34)
      %23 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc35)
      %24 = cir.call @strcpy(%22, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc33)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc37)
    } loc(#loc142)
    cir.return loc(#loc14)
  } loc(#loc134)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc144)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc145)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    cir.return loc(#loc39)
  } loc(#loc143)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc146)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc147)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc51)
  cir.func @main(%arg0: !s32i loc(fused[#loc54, #loc55]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc56, #loc57])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc149)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc150)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc53)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc58)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc58)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc59)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc60)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc60)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc61)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc48)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05_good : !cir.ptr<!cir.func<!void ()>> loc(#loc151)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05_good() : () -> () loc(#loc63)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc49)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc50)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc152)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05_bad() : () -> () loc(#loc67)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc51)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc70)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc153)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc153)
    cir.return %17 : !s32i loc(#loc153)
  } loc(#loc148)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc154)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc74)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc156)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc157)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc80)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc80)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc80)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc80)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc80)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc158)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc80)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc80)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc157)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc82)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc82)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc82)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc82)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc82)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc82)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc82)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc82)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc158)
    cir.scope {
      %19 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc154)
      %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc85)
      %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc85)
      cir.if %21 {
        %22 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc74)
        %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc74)
        cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc89)
      } else {
        %22 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc90)
        cir.store %22, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc161)
        %23 = cir.const #cir.int<0> : !s32i loc(#loc92)
        %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc92)
        %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc93)
        %26 = cir.const #cir.int<0> : !s32i loc(#loc94)
        %27 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc95)
        cir.store %24, %27 : !s8i, !cir.ptr<!s8i> loc(#loc162)
      } loc(#loc160)
    } loc(#loc159)
    cir.scope {
      %19 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc129)
      %20 = cir.get_global @__const.goodG2B1.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc129)
      cir.copy %20 to %19 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc129)
      %21 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc98)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc99)
      %23 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc100)
      %24 = cir.call @strcpy(%22, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc98)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc101)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc102)
    } loc(#loc163)
    cir.return loc(#loc76)
  } loc(#loc155)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc165)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc166)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc108)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc108)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc108)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc108)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc108)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc167)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc108)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc108)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc166)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc110)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc110)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc110)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc110)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc110)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc110)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc110)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc110)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc110)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc167)
    cir.scope {
      %19 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc131)
      %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc113)
      %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc113)
      cir.if %21 {
        %22 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc115)
        cir.store %22, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc170)
        %23 = cir.const #cir.int<0> : !s32i loc(#loc117)
        %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc117)
        %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc118)
        %26 = cir.const #cir.int<0> : !s32i loc(#loc119)
        %27 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc120)
        cir.store %24, %27 : !s8i, !cir.ptr<!s8i> loc(#loc171)
      } loc(#loc169)
    } loc(#loc168)
    cir.scope {
      %19 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc128)
      %20 = cir.get_global @__const.goodG2B2.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc128)
      cir.copy %20 to %19 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc128)
      %21 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc123)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc124)
      %23 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc125)
      %24 = cir.call @strcpy(%22, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc123)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc126)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc127)
    } loc(#loc172)
    cir.return loc(#loc104)
  } loc(#loc164)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":99:9)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":99:29)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":78:9)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":78:29)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":48:9)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":48:29)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":30:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":30:25)
#loc9 = loc("/usr/include/string.h":141:1)
#loc10 = loc("/usr/include/string.h":142:14)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":35:1)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":53:1)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":37:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":37:12)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":38:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":38:36)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":39:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":39:37)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":40:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":46:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":40:8)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":41:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":44:16)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":44:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":45:19)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":45:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":45:14)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":45:15)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":47:5)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":52:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":50:9)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":50:16)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":50:22)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":51:19)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":51:9)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":106:1)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":110:1)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":108:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":108:14)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":109:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":109:14)
#loc44 = loc("/usr/include/stdlib.h":575:1)
#loc45 = loc("/usr/include/stdlib.h":575:41)
#loc46 = loc("/usr/include/time.h":76:1)
#loc47 = loc("/usr/include/time.h":76:38)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":127:15)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":129:15)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":132:15)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":134:15)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":122:1)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":137:1)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":123:1)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":125:27)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":125:22)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":125:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":127:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":128:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":128:72)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":129:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":132:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":133:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":133:71)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":134:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":136:12)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":136:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":31:1)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":31:26)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":68:19)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":60:1)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":83:1)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":62:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":62:12)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":63:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":63:36)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":64:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":64:37)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":65:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":76:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":65:8)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":66:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":69:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":71:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":68:9)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":74:16)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":74:9)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":75:19)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":75:9)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":75:14)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":75:15)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":77:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":82:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":80:9)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":80:16)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":80:22)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":81:19)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":81:9)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":86:1)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":104:1)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":88:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":88:12)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":89:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":89:36)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":90:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":90:37)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":91:5)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":97:5)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":91:8)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":92:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":95:16)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":95:9)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":96:19)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":96:9)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":96:14)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":96:15)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":98:5)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":103:5)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":101:9)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":101:16)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":101:22)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":102:19)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c":102:9)
#loc128 = loc(fused[#loc1, #loc2])
#loc129 = loc(fused[#loc3, #loc4])
#loc130 = loc(fused[#loc5, #loc6])
#loc131 = loc(fused[#loc7, #loc8])
#loc132 = loc(fused[#loc9, #loc10])
#loc133 = loc(fused[#loc11, #loc12])
#loc134 = loc(fused[#loc13, #loc14])
#loc135 = loc(fused[#loc15, #loc16])
#loc136 = loc(fused[#loc17, #loc18])
#loc137 = loc(fused[#loc19, #loc20])
#loc138 = loc(fused[#loc21, #loc22])
#loc139 = loc(fused[#loc24, #loc22])
#loc140 = loc(fused[#loc26, #loc25])
#loc141 = loc(fused[#loc28, #loc27])
#loc142 = loc(fused[#loc31, #loc32])
#loc143 = loc(fused[#loc38, #loc39])
#loc144 = loc(fused[#loc40, #loc41])
#loc145 = loc(fused[#loc42, #loc43])
#loc146 = loc(fused[#loc44, #loc45])
#loc147 = loc(fused[#loc46, #loc47])
#loc148 = loc(fused[#loc52, #loc53])
#loc151 = loc(fused[#loc63, #loc64])
#loc152 = loc(fused[#loc67, #loc68])
#loc153 = loc(fused[#loc71, #loc70])
#loc154 = loc(fused[#loc72, #loc73])
#loc155 = loc(fused[#loc75, #loc76])
#loc156 = loc(fused[#loc77, #loc78])
#loc157 = loc(fused[#loc79, #loc80])
#loc158 = loc(fused[#loc81, #loc82])
#loc159 = loc(fused[#loc83, #loc84])
#loc160 = loc(fused[#loc86, #loc87, #loc88, #loc84])
#loc161 = loc(fused[#loc91, #loc90])
#loc162 = loc(fused[#loc93, #loc92])
#loc163 = loc(fused[#loc96, #loc97])
#loc164 = loc(fused[#loc103, #loc104])
#loc165 = loc(fused[#loc105, #loc106])
#loc166 = loc(fused[#loc107, #loc108])
#loc167 = loc(fused[#loc109, #loc110])
#loc168 = loc(fused[#loc111, #loc112])
#loc169 = loc(fused[#loc114, #loc112])
#loc170 = loc(fused[#loc116, #loc115])
#loc171 = loc(fused[#loc118, #loc117])
#loc172 = loc(fused[#loc121, #loc122])
