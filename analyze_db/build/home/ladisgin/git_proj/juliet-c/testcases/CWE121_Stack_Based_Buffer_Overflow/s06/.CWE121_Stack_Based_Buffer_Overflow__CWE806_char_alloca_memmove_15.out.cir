!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":123:10)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":123:14)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":123:20)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":123:32)
#loc198 = loc(fused[#loc67, #loc68])
#loc199 = loc(fused[#loc69, #loc70])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc177)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc3)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc178)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc180)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc181)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc11)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc11)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc11)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc11)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc11)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc11)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc181)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc12)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc182)
    cir.scope {
      %10 = cir.const #cir.int<6> : !s32i loc(#loc16)
      cir.switch (%10 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc18)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc18)
          %13 = cir.const #cir.int<65> : !s32i loc(#loc19)
          %14 = cir.const #cir.int<100> : !s32i loc(#loc20)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc21)
          %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc20)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc20)
          cir.libc.memset %17 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc184)
          %18 = cir.const #cir.int<0> : !s32i loc(#loc24)
          %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc24)
          %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
          %21 = cir.const #cir.int<100> : !s32i loc(#loc26)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc27)
          %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc26)
          %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc28)
          cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc185)
          cir.break loc(#loc29)
        } loc(#loc17)
        cir.case(default, []) {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc3)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc3)
          cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc31)
          cir.break loc(#loc32)
        } loc(#loc30)
        cir.yield loc(#loc14)
      } loc(#loc14)
    } loc(#loc183)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc187)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc187)
      cir.store %11, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc187)
      %12 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc37)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc37)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc38)
      %16 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc39)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
      %18 = cir.call @strlen(%17) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc39)
      %19 = cir.const #cir.int<1> : !u64i loc(#loc188)
      %20 = cir.binop(mul, %18, %19) : !u64i loc(#loc189)
      cir.libc.memmove %20 bytes from %15 to %13 : !cir.ptr<!void>, !u64i loc(#loc190)
      %21 = cir.const #cir.int<0> : !s32i loc(#loc45)
      %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc45)
      %23 = cir.const #cir.int<50> : !s32i loc(#loc46)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc47)
      %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc46)
      %26 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc48)
      %27 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc48)
      cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc191)
      %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
      cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc50)
    } loc(#loc186)
    cir.return loc(#loc7)
  } loc(#loc179)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc193)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc53)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc194)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc55)
    cir.return loc(#loc52)
  } loc(#loc192)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc195)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc196)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc64)
  cir.func @main(%arg0: !s32i loc(fused[#loc67, #loc68]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc69, #loc70])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc198)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc199)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc66)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc71)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc71)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc72)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc73)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc73)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc74)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc61)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc200)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15_good() : () -> () loc(#loc76)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc62)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc63)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc201)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15_bad() : () -> () loc(#loc80)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc64)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc83)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc202)
    cir.return %17 : !s32i loc(#loc202)
  } loc(#loc197)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc204)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc205)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc90)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc90)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc90)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc90)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc90)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc90)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc90)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc205)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc91)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc206)
    cir.scope {
      %10 = cir.const #cir.int<5> : !s32i loc(#loc95)
      cir.switch (%10 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc97)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc97)
          cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc98)
          cir.break loc(#loc99)
        } loc(#loc96)
        cir.case(default, []) {
          %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc101)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc101)
          %13 = cir.const #cir.int<65> : !s32i loc(#loc102)
          %14 = cir.const #cir.int<50> : !s32i loc(#loc103)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc104)
          %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc103)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc103)
          cir.libc.memset %17 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc208)
          %18 = cir.const #cir.int<0> : !s32i loc(#loc107)
          %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc107)
          %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc108)
          %21 = cir.const #cir.int<50> : !s32i loc(#loc109)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc110)
          %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc109)
          %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc111)
          cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc209)
          cir.break loc(#loc112)
        } loc(#loc100)
        cir.yield loc(#loc93)
      } loc(#loc93)
    } loc(#loc207)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc211)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc211)
      cir.store %11, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc211)
      %12 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc117)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc117)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc118)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc118)
      %16 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc119)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc120)
      %18 = cir.call @strlen(%17) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc119)
      %19 = cir.const #cir.int<1> : !u64i loc(#loc212)
      %20 = cir.binop(mul, %18, %19) : !u64i loc(#loc213)
      cir.libc.memmove %20 bytes from %15 to %13 : !cir.ptr<!void>, !u64i loc(#loc214)
      %21 = cir.const #cir.int<0> : !s32i loc(#loc125)
      %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc125)
      %23 = cir.const #cir.int<50> : !s32i loc(#loc126)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc127)
      %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc126)
      %26 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc128)
      %27 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc128)
      cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc215)
      %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
      cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc130)
    } loc(#loc210)
    cir.return loc(#loc86)
  } loc(#loc203)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc217)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc218)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc136)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc136)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc136)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc136)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc136)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc136)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc136)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc218)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc137)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc219)
    cir.scope {
      %10 = cir.const #cir.int<6> : !s32i loc(#loc141)
      cir.switch (%10 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc143)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc143)
          %13 = cir.const #cir.int<65> : !s32i loc(#loc144)
          %14 = cir.const #cir.int<50> : !s32i loc(#loc145)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc146)
          %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc145)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc145)
          cir.libc.memset %17 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc221)
          %18 = cir.const #cir.int<0> : !s32i loc(#loc149)
          %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc149)
          %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc150)
          %21 = cir.const #cir.int<50> : !s32i loc(#loc151)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc152)
          %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc151)
          %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc153)
          cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc222)
          cir.break loc(#loc154)
        } loc(#loc142)
        cir.case(default, []) {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc156)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc156)
          cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc157)
          cir.break loc(#loc158)
        } loc(#loc155)
        cir.yield loc(#loc139)
      } loc(#loc139)
    } loc(#loc220)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc224)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc224)
      cir.store %11, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc224)
      %12 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc163)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc163)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc164)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc164)
      %16 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc165)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc166)
      %18 = cir.call @strlen(%17) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc165)
      %19 = cir.const #cir.int<1> : !u64i loc(#loc225)
      %20 = cir.binop(mul, %18, %19) : !u64i loc(#loc226)
      cir.libc.memmove %20 bytes from %15 to %13 : !cir.ptr<!void>, !u64i loc(#loc227)
      %21 = cir.const #cir.int<0> : !s32i loc(#loc171)
      %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc171)
      %23 = cir.const #cir.int<50> : !s32i loc(#loc172)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc173)
      %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc172)
      %26 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc174)
      %27 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc174)
      cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc228)
      %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc175)
      cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc176)
    } loc(#loc223)
    cir.return loc(#loc132)
  } loc(#loc216)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":37:19)
#loc4 = loc("/usr/include/string.h":407:1)
#loc5 = loc("/usr/include/string.h":408:33)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":23:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":47:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":25:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":25:12)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":26:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":26:33)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":27:12)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":27:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":28:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":39:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":28:12)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":30:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":32:16)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":32:22)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":32:27)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":32:31)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":32:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":32:32)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":33:23)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":33:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":33:14)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":33:18)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":33:19)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":34:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":35:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":37:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":38:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":40:5)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":46:5)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":41:9)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":41:25)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":43:17)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":43:23)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":43:29)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":43:36)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":43:42)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":43:53)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":43:9)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":43:54)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":44:22)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":44:14)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":44:17)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":44:9)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":45:19)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":45:9)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":107:1)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":111:1)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":109:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":109:14)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":110:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":110:14)
#loc57 = loc("/usr/include/stdlib.h":575:1)
#loc58 = loc("/usr/include/stdlib.h":575:41)
#loc59 = loc("/usr/include/time.h":76:1)
#loc60 = loc("/usr/include/time.h":76:38)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":128:15)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":130:15)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":133:15)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":135:15)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":123:1)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":138:1)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":124:1)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":126:27)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":126:22)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":126:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":128:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":129:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":129:76)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":130:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":133:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":134:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":134:75)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":135:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":137:12)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":137:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":54:1)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":78:1)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":56:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":56:12)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":57:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":57:33)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":58:12)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":58:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":59:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":70:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":59:12)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":61:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":63:19)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":63:9)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":64:9)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":65:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":67:16)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":67:22)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":67:27)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":67:30)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":67:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":67:31)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":68:22)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":68:9)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":68:14)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":68:17)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":68:18)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":69:9)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":71:5)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":77:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":72:9)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":72:25)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":74:17)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":74:23)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":74:29)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":74:36)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":74:42)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":74:53)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":74:9)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":74:54)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":75:22)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":75:14)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":75:17)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":75:9)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":76:19)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":76:9)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":81:1)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":105:1)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":83:5)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":83:12)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":84:5)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":84:33)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":85:12)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":85:5)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":86:5)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":97:5)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":86:12)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":88:5)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":90:16)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":90:22)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":90:27)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":90:30)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":90:9)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":90:31)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":91:22)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":91:9)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":91:14)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":91:17)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":91:18)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":92:9)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":93:5)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":95:19)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":95:9)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":96:9)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":98:5)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":104:5)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":99:9)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":99:25)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":101:17)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":101:23)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":101:29)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":101:36)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":101:42)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":101:53)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":101:9)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":101:54)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":102:22)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":102:14)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":102:17)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":102:9)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":103:19)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c":103:9)
#loc177 = loc(fused[#loc1, #loc2])
#loc178 = loc(fused[#loc4, #loc5])
#loc179 = loc(fused[#loc6, #loc7])
#loc180 = loc(fused[#loc8, #loc9])
#loc181 = loc(fused[#loc10, #loc11])
#loc182 = loc(fused[#loc13, #loc12])
#loc183 = loc(fused[#loc14, #loc15])
#loc184 = loc(fused[#loc22, #loc23])
#loc185 = loc(fused[#loc25, #loc24])
#loc186 = loc(fused[#loc33, #loc34])
#loc187 = loc(fused[#loc35, #loc36])
#loc188 = loc(fused[#loc41, #loc42])
#loc189 = loc(fused[#loc39, #loc42])
#loc190 = loc(fused[#loc43, #loc44])
#loc191 = loc(fused[#loc48, #loc45])
#loc192 = loc(fused[#loc51, #loc52])
#loc193 = loc(fused[#loc53, #loc54])
#loc194 = loc(fused[#loc55, #loc56])
#loc195 = loc(fused[#loc57, #loc58])
#loc196 = loc(fused[#loc59, #loc60])
#loc197 = loc(fused[#loc65, #loc66])
#loc200 = loc(fused[#loc76, #loc77])
#loc201 = loc(fused[#loc80, #loc81])
#loc202 = loc(fused[#loc84, #loc83])
#loc203 = loc(fused[#loc85, #loc86])
#loc204 = loc(fused[#loc87, #loc88])
#loc205 = loc(fused[#loc89, #loc90])
#loc206 = loc(fused[#loc92, #loc91])
#loc207 = loc(fused[#loc93, #loc94])
#loc208 = loc(fused[#loc105, #loc106])
#loc209 = loc(fused[#loc108, #loc107])
#loc210 = loc(fused[#loc113, #loc114])
#loc211 = loc(fused[#loc115, #loc116])
#loc212 = loc(fused[#loc121, #loc122])
#loc213 = loc(fused[#loc119, #loc122])
#loc214 = loc(fused[#loc123, #loc124])
#loc215 = loc(fused[#loc128, #loc125])
#loc216 = loc(fused[#loc131, #loc132])
#loc217 = loc(fused[#loc133, #loc134])
#loc218 = loc(fused[#loc135, #loc136])
#loc219 = loc(fused[#loc138, #loc137])
#loc220 = loc(fused[#loc139, #loc140])
#loc221 = loc(fused[#loc147, #loc148])
#loc222 = loc(fused[#loc150, #loc149])
#loc223 = loc(fused[#loc159, #loc160])
#loc224 = loc(fused[#loc161, #loc162])
#loc225 = loc(fused[#loc167, #loc168])
#loc226 = loc(fused[#loc165, #loc168])
#loc227 = loc(fused[#loc169, #loc170])
#loc228 = loc(fused[#loc174, #loc171])
