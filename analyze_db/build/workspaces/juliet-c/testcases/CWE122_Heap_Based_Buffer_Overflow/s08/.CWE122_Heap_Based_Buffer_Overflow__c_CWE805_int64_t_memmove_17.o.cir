!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc111)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc112)
  cir.func private @printLongLongLine(!s64i) loc(#loc113)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc114)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc116)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc117)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc15)
    cir.store %2, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc118)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc19)
      cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc120)
      cir.for : cond {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc121)
        cir.condition(%6) loc(#loc23)
      } body {
        cir.scope {
          %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc25)
          %5 = cir.const #cir.int<50> : !s32i loc(#loc26)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc26)
          %7 = cir.const #cir.int<8> : !u64i loc(#loc123)
          %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc124)
          %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc25)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc125)
          cir.store %10, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc126)
          cir.scope {
            %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc33)
            %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc34)
            %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc34)
            %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s64i>, !cir.bool loc(#loc128)
            cir.if %14 {
              %15 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc36)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc37)
              %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc38)
              cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc36)
            } loc(#loc129)
          } loc(#loc127)
        } loc(#loc122)
        cir.yield loc(#loc18)
      } step {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc39)
        %5 = cir.unary(inc, %4) nsw : !s32i, !s32i loc(#loc40)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc130)
        cir.yield loc(#loc119)
      } loc(#loc119)
    } loc(#loc119)
    cir.scope {
      %3 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc132)
      %4 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc132)
      cir.store %4, %3 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc132)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc45)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc45)
      %7 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc46)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc46)
      %9 = cir.const #cir.int<100> : !s32i loc(#loc47)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc47)
      %11 = cir.const #cir.int<8> : !u64i loc(#loc133)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc134)
      cir.libc.memmove %12 bytes from %8 to %6 : !cir.ptr<!void>, !u64i loc(#loc135)
      %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc52)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc53)
      %15 = cir.ptr_stride(%13 : !cir.ptr<!s64i>, %14 : !s32i), !cir.ptr<!s64i> loc(#loc54)
      %16 = cir.load %15 : !cir.ptr<!s64i>, !s64i loc(#loc52)
      cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc55)
      %17 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc56)
      %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc57)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc57)
      cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc56)
    } loc(#loc131)
    cir.return loc(#loc10)
  } loc(#loc115)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc137)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc60)
    cir.return loc(#loc59)
  } loc(#loc136)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc139)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc140)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc68)
    cir.store %2, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc141)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc72)
      cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc143)
      cir.for : cond {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc74)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc75)
        %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc144)
        cir.condition(%6) loc(#loc76)
      } body {
        cir.scope {
          %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc78)
          %5 = cir.const #cir.int<100> : !s32i loc(#loc79)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc79)
          %7 = cir.const #cir.int<8> : !u64i loc(#loc146)
          %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc147)
          %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc78)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc148)
          cir.store %10, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc149)
          cir.scope {
            %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc86)
            %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc87)
            %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc87)
            %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s64i>, !cir.bool loc(#loc151)
            cir.if %14 {
              %15 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc89)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc90)
              %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc91)
              cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc89)
            } loc(#loc152)
          } loc(#loc150)
        } loc(#loc145)
        cir.yield loc(#loc71)
      } step {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc92)
        %5 = cir.unary(inc, %4) nsw : !s32i, !s32i loc(#loc93)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc153)
        cir.yield loc(#loc142)
      } loc(#loc142)
    } loc(#loc142)
    cir.scope {
      %3 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc155)
      %4 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc155)
      cir.store %4, %3 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc155)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc98)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc98)
      %7 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc99)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc99)
      %9 = cir.const #cir.int<100> : !s32i loc(#loc100)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc100)
      %11 = cir.const #cir.int<8> : !u64i loc(#loc156)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc157)
      cir.libc.memmove %12 bytes from %8 to %6 : !cir.ptr<!void>, !u64i loc(#loc158)
      %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc105)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc106)
      %15 = cir.ptr_stride(%13 : !cir.ptr<!s64i>, %14 : !s32i), !cir.ptr<!s64i> loc(#loc107)
      %16 = cir.load %15 : !cir.ptr<!s64i>, !s64i loc(#loc105)
      cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc108)
      %17 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc109)
      %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc110)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc110)
      cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc109)
    } loc(#loc154)
    cir.return loc(#loc63)
  } loc(#loc138)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":39:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":23:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":23:9)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":24:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":24:15)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":25:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":25:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":26:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":31:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":26:13)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":26:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":26:16)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":26:20)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":26:18)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":27:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":29:27)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":29:34)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":29:37)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":29:51)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":29:52)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":29:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":30:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":30:37)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":30:13)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":30:21)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":30:27)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":30:28)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":30:34)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":30:33)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":26:24)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":26:23)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":32:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":38:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":33:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":33:33)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":35:17)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":35:23)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":35:31)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":35:35)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":35:49)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":35:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":35:50)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":36:27)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":36:32)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":36:33)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":36:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":37:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":37:14)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":66:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":69:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":68:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":68:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":46:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":64:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":48:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":48:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":49:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":49:15)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":50:12)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":50:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":51:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":56:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":51:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":51:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":51:16)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":51:20)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":51:18)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":52:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":54:27)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":54:34)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":54:38)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":54:52)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":54:53)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":54:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":55:9)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":55:37)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":55:13)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":55:21)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":55:27)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":55:28)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":55:34)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":55:33)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":51:24)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":51:23)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":57:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":63:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":58:9)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":58:33)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":60:17)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":60:23)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":60:31)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":60:35)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":60:49)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":60:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":60:50)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":61:27)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":61:32)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":61:33)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":61:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":62:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c":62:14)
#loc111 = loc(fused[#loc1, #loc2])
#loc112 = loc(fused[#loc3, #loc4])
#loc113 = loc(fused[#loc5, #loc6])
#loc114 = loc(fused[#loc7, #loc8])
#loc115 = loc(fused[#loc9, #loc10])
#loc116 = loc(fused[#loc11, #loc12])
#loc117 = loc(fused[#loc13, #loc14])
#loc118 = loc(fused[#loc16, #loc15])
#loc119 = loc(fused[#loc17, #loc18])
#loc120 = loc(fused[#loc20, #loc19])
#loc121 = loc(fused[#loc21, #loc22])
#loc122 = loc(fused[#loc24, #loc18])
#loc123 = loc(fused[#loc27, #loc28])
#loc124 = loc(fused[#loc26, #loc28])
#loc125 = loc(fused[#loc25, #loc29])
#loc126 = loc(fused[#loc30, #loc29])
#loc127 = loc(fused[#loc31, #loc32])
#loc128 = loc(fused[#loc33, #loc34])
#loc129 = loc(fused[#loc35, #loc32])
#loc130 = loc(fused[#loc40, #loc39])
#loc131 = loc(fused[#loc41, #loc42])
#loc132 = loc(fused[#loc43, #loc44])
#loc133 = loc(fused[#loc48, #loc49])
#loc134 = loc(fused[#loc47, #loc49])
#loc135 = loc(fused[#loc50, #loc51])
#loc136 = loc(fused[#loc58, #loc59])
#loc137 = loc(fused[#loc60, #loc61])
#loc138 = loc(fused[#loc62, #loc63])
#loc139 = loc(fused[#loc64, #loc65])
#loc140 = loc(fused[#loc66, #loc67])
#loc141 = loc(fused[#loc69, #loc68])
#loc142 = loc(fused[#loc70, #loc71])
#loc143 = loc(fused[#loc73, #loc72])
#loc144 = loc(fused[#loc74, #loc75])
#loc145 = loc(fused[#loc77, #loc71])
#loc146 = loc(fused[#loc80, #loc81])
#loc147 = loc(fused[#loc79, #loc81])
#loc148 = loc(fused[#loc78, #loc82])
#loc149 = loc(fused[#loc83, #loc82])
#loc150 = loc(fused[#loc84, #loc85])
#loc151 = loc(fused[#loc86, #loc87])
#loc152 = loc(fused[#loc88, #loc85])
#loc153 = loc(fused[#loc93, #loc92])
#loc154 = loc(fused[#loc94, #loc95])
#loc155 = loc(fused[#loc96, #loc97])
#loc156 = loc(fused[#loc101, #loc102])
#loc157 = loc(fused[#loc100, #loc102])
#loc158 = loc(fused[#loc103, #loc104])
