!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc29 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":30:16)
#loc59 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":59:27)
#loc86 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":194:10)
#loc87 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":194:14)
#loc88 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":194:20)
#loc89 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":194:32)
#loc122 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":86:16)
#loc124 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":91:16)
#loc139 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":98:27)
#loc157 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":113:27)
#true = #cir.bool<true> : !cir.bool
#loc258 = loc(fused[#loc86, #loc87])
#loc259 = loc(fused[#loc88, #loc89])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_rand_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc226)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc227)
  cir.func private @printIntLine(!s32i) loc(#loc228)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc229)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc9)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc10)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_rand_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc231)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc232)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc233)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc20)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc234)
    cir.br ^bb1 loc(#loc235)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc236)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc236)
    %7 = cir.call %6() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc24)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc24)
    cir.brcond %8 ^bb2, ^bb7 loc(#loc237)
  ^bb2:  // pred: ^bb1
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %11 = cir.binop(and, %9, %10) : !s32i loc(#loc29)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc29)
    cir.brcond %12 ^bb3, ^bb4 loc(#loc29)
  ^bb3:  // pred: ^bb2
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc29)
    %15 = cir.const #cir.int<30> : !s32i loc(#loc29)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc29)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc29)
    %19 = cir.const #cir.int<15> : !s32i loc(#loc29)
    %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc29)
    %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc29)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc29)
    %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc29)
    cir.br ^bb5(%24 : !u32i) loc(#loc29)
  ^bb4:  // pred: ^bb2
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc29)
    %27 = cir.const #cir.int<30> : !s32i loc(#loc29)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc29)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc29)
    %31 = cir.const #cir.int<15> : !s32i loc(#loc29)
    %32 = cir.shift(left, %30 : !u32i, %31 : !s32i) -> !u32i loc(#loc29)
    %33 = cir.binop(xor, %28, %32) : !u32i loc(#loc29)
    %34 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc29)
    %36 = cir.binop(xor, %33, %35) : !u32i loc(#loc29)
    %37 = cir.unary(minus, %36) : !u32i, !u32i loc(#loc29)
    %38 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %39 = cir.cast(integral, %38 : !s32i), !u32i loc(#loc29)
    %40 = cir.binop(sub, %37, %39) : !u32i loc(#loc29)
    cir.br ^bb5(%40 : !u32i) loc(#loc29)
  ^bb5(%41: !u32i loc("CWE126_Buffer_Overread__CWE129_rand_12.c":30:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc29)
  ^bb6:  // pred: ^bb5
    %42 = cir.cast(integral, %41 : !u32i), !s32i loc(#loc29)
    cir.store %42, %2 : !s32i, !cir.ptr<!s32i> loc(#loc238)
    cir.br ^bb8 loc(#loc27)
  ^bb7:  // pred: ^bb1
    %43 = cir.const #cir.int<7> : !s32i loc(#loc31)
    cir.store %43, %2 : !s32i, !cir.ptr<!s32i> loc(#loc239)
    cir.br ^bb8 loc(#loc23)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc23)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc240)
  ^bb10:  // pred: ^bb9
    %44 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc241)
    %45 = cir.cast(bitcast, %44 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc241)
    %46 = cir.call %45() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc35)
    %47 = cir.cast(int_to_bool, %46 : !s32i), !cir.bool loc(#loc35)
    cir.brcond %47 ^bb11, ^bb19 loc(#loc242)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc243)
  ^bb12:  // pred: ^bb11
    %48 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc231)
    cir.store %48, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc231)
    cir.br ^bb13 loc(#loc244)
  ^bb13:  // pred: ^bb12
    %49 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    %50 = cir.const #cir.int<0> : !s32i loc(#loc45)
    %51 = cir.cmp(ge, %49, %50) : !s32i, !cir.bool loc(#loc245)
    cir.brcond %51 ^bb14, ^bb15 loc(#loc246)
  ^bb14:  // pred: ^bb13
    %52 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc49)
    %53 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc50)
    %54 = cir.ptr_stride(%53 : !cir.ptr<!s32i>, %52 : !s32i), !cir.ptr<!s32i> loc(#loc50)
    %55 = cir.load %54 : !cir.ptr<!s32i>, !s32i loc(#loc50)
    cir.call @printIntLine(%55) : (!s32i) -> () loc(#loc51)
    cir.br ^bb16 loc(#loc47)
  ^bb15:  // pred: ^bb13
    %56 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc9)
    %57 = cir.cast(array_to_ptrdecay, %56 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%57) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    cir.br ^bb16 loc(#loc43)
  ^bb16:  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc43)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc41)
  ^bb18:  // pred: ^bb17
    cir.br ^bb35 loc(#loc38)
  ^bb19:  // pred: ^bb10
    cir.br ^bb20 loc(#loc247)
  ^bb20:  // pred: ^bb19
    %58 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc232)
    cir.store %58, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc232)
    cir.br ^bb21 loc(#loc248)
  ^bb21:  // pred: ^bb20
    %59 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc57)
    %60 = cir.const #cir.int<0> : !s32i loc(#loc58)
    %61 = cir.cmp(ge, %59, %60) : !s32i, !cir.bool loc(#loc249)
    cir.brcond %61 ^bb22, ^bb27 loc(#loc59)
  ^bb22:  // pred: ^bb21
    %62 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc60)
    %63 = cir.const #cir.int<10> : !s32i loc(#loc61)
    %64 = cir.cmp(lt, %62, %63) : !s32i, !cir.bool loc(#loc250)
    cir.brcond %64 ^bb23, ^bb24 loc(#loc59)
  ^bb23:  // pred: ^bb22
    %65 = cir.const #true loc(#loc59)
    cir.br ^bb25(%65 : !cir.bool) loc(#loc59)
  ^bb24:  // pred: ^bb22
    %66 = cir.const #false loc(#loc59)
    cir.br ^bb25(%66 : !cir.bool) loc(#loc59)
  ^bb25(%67: !cir.bool loc("CWE126_Buffer_Overread__CWE129_rand_12.c":59:27)):  // 2 preds: ^bb23, ^bb24
    cir.br ^bb26 loc(#loc59)
  ^bb26:  // pred: ^bb25
    cir.br ^bb28(%67 : !cir.bool) loc(#loc59)
  ^bb27:  // pred: ^bb21
    %68 = cir.const #false loc(#loc59)
    cir.br ^bb28(%68 : !cir.bool) loc(#loc59)
  ^bb28(%69: !cir.bool loc("CWE126_Buffer_Overread__CWE129_rand_12.c":59:27)):  // 2 preds: ^bb26, ^bb27
    cir.br ^bb29 loc(#loc59)
  ^bb29:  // pred: ^bb28
    cir.brcond %69 ^bb30, ^bb31 loc(#loc251)
  ^bb30:  // pred: ^bb29
    %70 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    %71 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc67)
    %72 = cir.ptr_stride(%71 : !cir.ptr<!s32i>, %70 : !s32i), !cir.ptr<!s32i> loc(#loc67)
    %73 = cir.load %72 : !cir.ptr<!s32i>, !s32i loc(#loc67)
    cir.call @printIntLine(%73) : (!s32i) -> () loc(#loc68)
    cir.br ^bb32 loc(#loc64)
  ^bb31:  // pred: ^bb29
    %74 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc10)
    %75 = cir.cast(array_to_ptrdecay, %74 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc10)
    cir.call @printLine(%75) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    cir.br ^bb32 loc(#loc56)
  ^bb32:  // 2 preds: ^bb30, ^bb31
    cir.br ^bb33 loc(#loc56)
  ^bb33:  // pred: ^bb32
    cir.br ^bb34 loc(#loc54)
  ^bb34:  // pred: ^bb33
    cir.br ^bb35 loc(#loc34)
  ^bb35:  // 2 preds: ^bb18, ^bb34
    cir.br ^bb36 loc(#loc34)
  ^bb36:  // pred: ^bb35
    cir.return loc(#loc12)
  } loc(#loc230)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_rand_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc253)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc72)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc254)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc74)
    cir.return loc(#loc71)
  } loc(#loc252)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc255)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc256)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc80)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc81)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc83)
  cir.func @main(%arg0: !s32i loc(fused[#loc86, #loc87]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc88, #loc89])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc258)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc259)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc85)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc90)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc90)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc91)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc92)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc92)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc93)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc80)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc80)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    %8 = cir.get_global @CWE126_Buffer_Overread__CWE129_rand_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc260)
    cir.call @CWE126_Buffer_Overread__CWE129_rand_12_good() : () -> () loc(#loc95)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc81)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc81)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc97)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc82)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc82)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc98)
    %13 = cir.get_global @CWE126_Buffer_Overread__CWE129_rand_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc261)
    cir.call @CWE126_Buffer_Overread__CWE129_rand_12_bad() : () -> () loc(#loc99)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc83)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc83)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc101)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc102)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc262)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc262)
    cir.return %17 : !s32i loc(#loc262)
  } loc(#loc257)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc264)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc265)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc266)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc112)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc113)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc267)
    cir.br ^bb1 loc(#loc268)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc269)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc269)
    %7 = cir.call %6() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc117)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc117)
    cir.brcond %8 ^bb2, ^bb7 loc(#loc270)
  ^bb2:  // pred: ^bb1
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc122)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc122)
    %11 = cir.binop(and, %9, %10) : !s32i loc(#loc122)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc122)
    cir.brcond %12 ^bb3, ^bb4 loc(#loc122)
  ^bb3:  // pred: ^bb2
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc122)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc122)
    %15 = cir.const #cir.int<30> : !s32i loc(#loc122)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc122)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc122)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc122)
    %19 = cir.const #cir.int<15> : !s32i loc(#loc122)
    %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc122)
    %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc122)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc122)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc122)
    %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc122)
    cir.br ^bb5(%24 : !u32i) loc(#loc122)
  ^bb4:  // pred: ^bb2
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc122)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc122)
    %27 = cir.const #cir.int<30> : !s32i loc(#loc122)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc122)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc122)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc122)
    %31 = cir.const #cir.int<15> : !s32i loc(#loc122)
    %32 = cir.shift(left, %30 : !u32i, %31 : !s32i) -> !u32i loc(#loc122)
    %33 = cir.binop(xor, %28, %32) : !u32i loc(#loc122)
    %34 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc122)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc122)
    %36 = cir.binop(xor, %33, %35) : !u32i loc(#loc122)
    %37 = cir.unary(minus, %36) : !u32i, !u32i loc(#loc122)
    %38 = cir.const #cir.int<1> : !s32i loc(#loc122)
    %39 = cir.cast(integral, %38 : !s32i), !u32i loc(#loc122)
    %40 = cir.binop(sub, %37, %39) : !u32i loc(#loc122)
    cir.br ^bb5(%40 : !u32i) loc(#loc122)
  ^bb5(%41: !u32i loc("CWE126_Buffer_Overread__CWE129_rand_12.c":86:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc122)
  ^bb6:  // pred: ^bb5
    %42 = cir.cast(integral, %41 : !u32i), !s32i loc(#loc122)
    cir.store %42, %2 : !s32i, !cir.ptr<!s32i> loc(#loc271)
    cir.br ^bb12 loc(#loc120)
  ^bb7:  // pred: ^bb1
    %43 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
    %44 = cir.const #cir.int<1> : !s32i loc(#loc124)
    %45 = cir.binop(and, %43, %44) : !s32i loc(#loc124)
    %46 = cir.cast(int_to_bool, %45 : !s32i), !cir.bool loc(#loc124)
    cir.brcond %46 ^bb8, ^bb9 loc(#loc124)
  ^bb8:  // pred: ^bb7
    %47 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
    %48 = cir.cast(integral, %47 : !s32i), !u32i loc(#loc124)
    %49 = cir.const #cir.int<30> : !s32i loc(#loc124)
    %50 = cir.shift(left, %48 : !u32i, %49 : !s32i) -> !u32i loc(#loc124)
    %51 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
    %52 = cir.cast(integral, %51 : !s32i), !u32i loc(#loc124)
    %53 = cir.const #cir.int<15> : !s32i loc(#loc124)
    %54 = cir.shift(left, %52 : !u32i, %53 : !s32i) -> !u32i loc(#loc124)
    %55 = cir.binop(xor, %50, %54) : !u32i loc(#loc124)
    %56 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
    %57 = cir.cast(integral, %56 : !s32i), !u32i loc(#loc124)
    %58 = cir.binop(xor, %55, %57) : !u32i loc(#loc124)
    cir.br ^bb10(%58 : !u32i) loc(#loc124)
  ^bb9:  // pred: ^bb7
    %59 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
    %60 = cir.cast(integral, %59 : !s32i), !u32i loc(#loc124)
    %61 = cir.const #cir.int<30> : !s32i loc(#loc124)
    %62 = cir.shift(left, %60 : !u32i, %61 : !s32i) -> !u32i loc(#loc124)
    %63 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
    %64 = cir.cast(integral, %63 : !s32i), !u32i loc(#loc124)
    %65 = cir.const #cir.int<15> : !s32i loc(#loc124)
    %66 = cir.shift(left, %64 : !u32i, %65 : !s32i) -> !u32i loc(#loc124)
    %67 = cir.binop(xor, %62, %66) : !u32i loc(#loc124)
    %68 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
    %69 = cir.cast(integral, %68 : !s32i), !u32i loc(#loc124)
    %70 = cir.binop(xor, %67, %69) : !u32i loc(#loc124)
    %71 = cir.unary(minus, %70) : !u32i, !u32i loc(#loc124)
    %72 = cir.const #cir.int<1> : !s32i loc(#loc124)
    %73 = cir.cast(integral, %72 : !s32i), !u32i loc(#loc124)
    %74 = cir.binop(sub, %71, %73) : !u32i loc(#loc124)
    cir.br ^bb10(%74 : !u32i) loc(#loc124)
  ^bb10(%75: !u32i loc("CWE126_Buffer_Overread__CWE129_rand_12.c":91:16)):  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc124)
  ^bb11:  // pred: ^bb10
    %76 = cir.cast(integral, %75 : !u32i), !s32i loc(#loc124)
    cir.store %76, %2 : !s32i, !cir.ptr<!s32i> loc(#loc272)
    cir.br ^bb12 loc(#loc116)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc116)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc273)
  ^bb14:  // pred: ^bb13
    %77 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc274)
    %78 = cir.cast(bitcast, %77 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc274)
    %79 = cir.call %78() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc128)
    %80 = cir.cast(int_to_bool, %79 : !s32i), !cir.bool loc(#loc128)
    cir.brcond %80 ^bb15, ^bb31 loc(#loc275)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc276)
  ^bb16:  // pred: ^bb15
    %81 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc264)
    cir.store %81, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc264)
    cir.br ^bb17 loc(#loc277)
  ^bb17:  // pred: ^bb16
    %82 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc137)
    %83 = cir.const #cir.int<0> : !s32i loc(#loc138)
    %84 = cir.cmp(ge, %82, %83) : !s32i, !cir.bool loc(#loc278)
    cir.brcond %84 ^bb18, ^bb23 loc(#loc139)
  ^bb18:  // pred: ^bb17
    %85 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc140)
    %86 = cir.const #cir.int<10> : !s32i loc(#loc141)
    %87 = cir.cmp(lt, %85, %86) : !s32i, !cir.bool loc(#loc279)
    cir.brcond %87 ^bb19, ^bb20 loc(#loc139)
  ^bb19:  // pred: ^bb18
    %88 = cir.const #true loc(#loc139)
    cir.br ^bb21(%88 : !cir.bool) loc(#loc139)
  ^bb20:  // pred: ^bb18
    %89 = cir.const #false loc(#loc139)
    cir.br ^bb21(%89 : !cir.bool) loc(#loc139)
  ^bb21(%90: !cir.bool loc("CWE126_Buffer_Overread__CWE129_rand_12.c":98:27)):  // 2 preds: ^bb19, ^bb20
    cir.br ^bb22 loc(#loc139)
  ^bb22:  // pred: ^bb21
    cir.br ^bb24(%90 : !cir.bool) loc(#loc139)
  ^bb23:  // pred: ^bb17
    %91 = cir.const #false loc(#loc139)
    cir.br ^bb24(%91 : !cir.bool) loc(#loc139)
  ^bb24(%92: !cir.bool loc("CWE126_Buffer_Overread__CWE129_rand_12.c":98:27)):  // 2 preds: ^bb22, ^bb23
    cir.br ^bb25 loc(#loc139)
  ^bb25:  // pred: ^bb24
    cir.brcond %92 ^bb26, ^bb27 loc(#loc280)
  ^bb26:  // pred: ^bb25
    %93 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc146)
    %94 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc147)
    %95 = cir.ptr_stride(%94 : !cir.ptr<!s32i>, %93 : !s32i), !cir.ptr<!s32i> loc(#loc147)
    %96 = cir.load %95 : !cir.ptr<!s32i>, !s32i loc(#loc147)
    cir.call @printIntLine(%96) : (!s32i) -> () loc(#loc148)
    cir.br ^bb28 loc(#loc144)
  ^bb27:  // pred: ^bb25
    %97 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc149)
    %98 = cir.cast(array_to_ptrdecay, %97 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc149)
    cir.call @printLine(%98) : (!cir.ptr<!s8i>) -> () loc(#loc150)
    cir.br ^bb28 loc(#loc136)
  ^bb28:  // 2 preds: ^bb26, ^bb27
    cir.br ^bb29 loc(#loc136)
  ^bb29:  // pred: ^bb28
    cir.br ^bb30 loc(#loc134)
  ^bb30:  // pred: ^bb29
    cir.br ^bb47 loc(#loc131)
  ^bb31:  // pred: ^bb14
    cir.br ^bb32 loc(#loc281)
  ^bb32:  // pred: ^bb31
    %99 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc265)
    cir.store %99, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc265)
    cir.br ^bb33 loc(#loc282)
  ^bb33:  // pred: ^bb32
    %100 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc155)
    %101 = cir.const #cir.int<0> : !s32i loc(#loc156)
    %102 = cir.cmp(ge, %100, %101) : !s32i, !cir.bool loc(#loc283)
    cir.brcond %102 ^bb34, ^bb39 loc(#loc157)
  ^bb34:  // pred: ^bb33
    %103 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc158)
    %104 = cir.const #cir.int<10> : !s32i loc(#loc159)
    %105 = cir.cmp(lt, %103, %104) : !s32i, !cir.bool loc(#loc284)
    cir.brcond %105 ^bb35, ^bb36 loc(#loc157)
  ^bb35:  // pred: ^bb34
    %106 = cir.const #true loc(#loc157)
    cir.br ^bb37(%106 : !cir.bool) loc(#loc157)
  ^bb36:  // pred: ^bb34
    %107 = cir.const #false loc(#loc157)
    cir.br ^bb37(%107 : !cir.bool) loc(#loc157)
  ^bb37(%108: !cir.bool loc("CWE126_Buffer_Overread__CWE129_rand_12.c":113:27)):  // 2 preds: ^bb35, ^bb36
    cir.br ^bb38 loc(#loc157)
  ^bb38:  // pred: ^bb37
    cir.br ^bb40(%108 : !cir.bool) loc(#loc157)
  ^bb39:  // pred: ^bb33
    %109 = cir.const #false loc(#loc157)
    cir.br ^bb40(%109 : !cir.bool) loc(#loc157)
  ^bb40(%110: !cir.bool loc("CWE126_Buffer_Overread__CWE129_rand_12.c":113:27)):  // 2 preds: ^bb38, ^bb39
    cir.br ^bb41 loc(#loc157)
  ^bb41:  // pred: ^bb40
    cir.brcond %110 ^bb42, ^bb43 loc(#loc285)
  ^bb42:  // pred: ^bb41
    %111 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc164)
    %112 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc165)
    %113 = cir.ptr_stride(%112 : !cir.ptr<!s32i>, %111 : !s32i), !cir.ptr<!s32i> loc(#loc165)
    %114 = cir.load %113 : !cir.ptr<!s32i>, !s32i loc(#loc165)
    cir.call @printIntLine(%114) : (!s32i) -> () loc(#loc166)
    cir.br ^bb44 loc(#loc162)
  ^bb43:  // pred: ^bb41
    %115 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc167)
    %116 = cir.cast(array_to_ptrdecay, %115 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc167)
    cir.call @printLine(%116) : (!cir.ptr<!s8i>) -> () loc(#loc168)
    cir.br ^bb44 loc(#loc154)
  ^bb44:  // 2 preds: ^bb42, ^bb43
    cir.br ^bb45 loc(#loc154)
  ^bb45:  // pred: ^bb44
    cir.br ^bb46 loc(#loc152)
  ^bb46:  // pred: ^bb45
    cir.br ^bb47 loc(#loc127)
  ^bb47:  // 2 preds: ^bb30, ^bb46
    cir.br ^bb48 loc(#loc127)
  ^bb48:  // pred: ^bb47
    cir.return loc(#loc105)
  } loc(#loc263)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc287)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc288)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc289)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc177)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc178)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc290)
    cir.br ^bb1 loc(#loc291)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc292)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc292)
    %7 = cir.call %6() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc182)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc182)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc293)
  ^bb2:  // pred: ^bb1
    %9 = cir.const #cir.int<7> : !s32i loc(#loc187)
    cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc294)
    cir.br ^bb4 loc(#loc185)
  ^bb3:  // pred: ^bb1
    %10 = cir.const #cir.int<7> : !s32i loc(#loc189)
    cir.store %10, %2 : !s32i, !cir.ptr<!s32i> loc(#loc295)
    cir.br ^bb4 loc(#loc181)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc181)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc296)
  ^bb6:  // pred: ^bb5
    %11 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc297)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc297)
    %13 = cir.call %12() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc193)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc193)
    cir.brcond %14 ^bb7, ^bb15 loc(#loc298)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc299)
  ^bb8:  // pred: ^bb7
    %15 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc287)
    cir.store %15, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc287)
    cir.br ^bb9 loc(#loc300)
  ^bb9:  // pred: ^bb8
    %16 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc202)
    %17 = cir.const #cir.int<0> : !s32i loc(#loc203)
    %18 = cir.cmp(ge, %16, %17) : !s32i, !cir.bool loc(#loc301)
    cir.brcond %18 ^bb10, ^bb11 loc(#loc302)
  ^bb10:  // pred: ^bb9
    %19 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc207)
    %20 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc208)
    %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc208)
    %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc208)
    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc209)
    cir.br ^bb12 loc(#loc205)
  ^bb11:  // pred: ^bb9
    %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc210)
    %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc210)
    cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc211)
    cir.br ^bb12 loc(#loc201)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc201)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc199)
  ^bb14:  // pred: ^bb13
    cir.br ^bb23 loc(#loc196)
  ^bb15:  // pred: ^bb6
    cir.br ^bb16 loc(#loc303)
  ^bb16:  // pred: ^bb15
    %25 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc288)
    cir.store %25, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc288)
    cir.br ^bb17 loc(#loc304)
  ^bb17:  // pred: ^bb16
    %26 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc216)
    %27 = cir.const #cir.int<0> : !s32i loc(#loc217)
    %28 = cir.cmp(ge, %26, %27) : !s32i, !cir.bool loc(#loc305)
    cir.brcond %28 ^bb18, ^bb19 loc(#loc306)
  ^bb18:  // pred: ^bb17
    %29 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc221)
    %30 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc222)
    %31 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc222)
    %32 = cir.load %31 : !cir.ptr<!s32i>, !s32i loc(#loc222)
    cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc223)
    cir.br ^bb20 loc(#loc219)
  ^bb19:  // pred: ^bb17
    %33 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc224)
    %34 = cir.cast(array_to_ptrdecay, %33 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc224)
    cir.call @printLine(%34) : (!cir.ptr<!s8i>) -> () loc(#loc225)
    cir.br ^bb20 loc(#loc215)
  ^bb20:  // 2 preds: ^bb18, ^bb19
    cir.br ^bb21 loc(#loc215)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc213)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc192)
  ^bb23:  // 2 preds: ^bb14, ^bb22
    cir.br ^bb24 loc(#loc192)
  ^bb24:  // pred: ^bb23
    cir.return loc(#loc170)
  } loc(#loc286)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_rand_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":50:27)
#loc10 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":65:27)
#loc11 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":22:1)
#loc12 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":69:1)
#loc13 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":41:13)
#loc14 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":41:34)
#loc15 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":57:13)
#loc16 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":57:34)
#loc17 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":24:5)
#loc18 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":24:9)
#loc19 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":26:13)
#loc20 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":26:12)
#loc21 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":26:5)
#loc22 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":27:5)
#loc23 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":37:5)
#loc24 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":27:8)
#loc25 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":27:33)
#loc26 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":28:5)
#loc27 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":31:5)
#loc28 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":33:5)
#loc30 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":30:9)
#loc31 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":36:16)
#loc32 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":36:9)
#loc33 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":38:5)
#loc34 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":68:5)
#loc35 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":38:8)
#loc36 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":38:33)
#loc37 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":39:5)
#loc38 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":53:5)
#loc39 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":55:5)
#loc40 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":40:9)
#loc41 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":52:9)
#loc42 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":44:13)
#loc43 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":51:13)
#loc44 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":44:17)
#loc45 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":44:25)
#loc46 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":45:13)
#loc47 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":47:13)
#loc48 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":49:13)
#loc49 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":46:37)
#loc50 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":46:30)
#loc51 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":46:17)
#loc52 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":50:17)
#loc53 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":56:9)
#loc54 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":67:9)
#loc55 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":59:13)
#loc56 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":66:13)
#loc57 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":59:17)
#loc58 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":59:25)
#loc60 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":59:30)
#loc61 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":59:38)
#loc62 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":59:40)
#loc63 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":60:13)
#loc64 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":62:13)
#loc65 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":64:13)
#loc66 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":61:37)
#loc67 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":61:30)
#loc68 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":61:17)
#loc69 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":65:17)
#loc70 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":179:1)
#loc71 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":183:1)
#loc72 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":181:5)
#loc73 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":181:13)
#loc74 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":182:5)
#loc75 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":182:13)
#loc76 = loc("/usr/include/stdlib.h":575:1)
#loc77 = loc("/usr/include/stdlib.h":575:41)
#loc78 = loc("/usr/include/time.h":76:1)
#loc79 = loc("/usr/include/time.h":76:38)
#loc80 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":199:15)
#loc81 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":201:15)
#loc82 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":204:15)
#loc83 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":206:15)
#loc84 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":194:1)
#loc85 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":209:1)
#loc90 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":195:1)
#loc91 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":197:27)
#loc92 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":197:22)
#loc93 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":197:5)
#loc94 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":199:5)
#loc95 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":200:5)
#loc96 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":200:49)
#loc97 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":201:5)
#loc98 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":204:5)
#loc99 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":205:5)
#loc100 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":205:48)
#loc101 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":206:5)
#loc102 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":208:12)
#loc103 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":208:5)
#loc104 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":78:1)
#loc105 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":123:1)
#loc106 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":96:13)
#loc107 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":96:34)
#loc108 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":111:13)
#loc109 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":111:34)
#loc110 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":80:5)
#loc111 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":80:9)
#loc112 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":82:13)
#loc113 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":82:12)
#loc114 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":82:5)
#loc115 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":83:5)
#loc116 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":92:5)
#loc117 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":83:8)
#loc118 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":83:33)
#loc119 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":84:5)
#loc120 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":87:5)
#loc121 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":89:5)
#loc123 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":86:9)
#loc125 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":91:9)
#loc126 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":93:5)
#loc127 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":122:5)
#loc128 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":93:8)
#loc129 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":93:33)
#loc130 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":94:5)
#loc131 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":107:5)
#loc132 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":109:5)
#loc133 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":95:9)
#loc134 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":106:9)
#loc135 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":98:13)
#loc136 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":105:13)
#loc137 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":98:17)
#loc138 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":98:25)
#loc140 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":98:30)
#loc141 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":98:38)
#loc142 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":98:40)
#loc143 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":99:13)
#loc144 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":101:13)
#loc145 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":103:13)
#loc146 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":100:37)
#loc147 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":100:30)
#loc148 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":100:17)
#loc149 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":104:27)
#loc150 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":104:17)
#loc151 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":110:9)
#loc152 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":121:9)
#loc153 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":113:13)
#loc154 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":120:13)
#loc155 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":113:17)
#loc156 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":113:25)
#loc158 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":113:30)
#loc159 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":113:38)
#loc160 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":113:40)
#loc161 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":114:13)
#loc162 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":116:13)
#loc163 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":118:13)
#loc164 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":115:37)
#loc165 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":115:30)
#loc166 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":115:17)
#loc167 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":119:27)
#loc168 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":119:17)
#loc169 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":128:1)
#loc170 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":177:1)
#loc171 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":148:13)
#loc172 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":148:34)
#loc173 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":164:13)
#loc174 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":164:34)
#loc175 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":130:5)
#loc176 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":130:9)
#loc177 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":132:13)
#loc178 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":132:12)
#loc179 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":132:5)
#loc180 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":133:5)
#loc181 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":144:5)
#loc182 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":133:8)
#loc183 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":133:33)
#loc184 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":134:5)
#loc185 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":138:5)
#loc186 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":140:5)
#loc187 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":137:16)
#loc188 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":137:9)
#loc189 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":143:16)
#loc190 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":143:9)
#loc191 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":145:5)
#loc192 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":176:5)
#loc193 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":145:8)
#loc194 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":145:33)
#loc195 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":146:5)
#loc196 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":160:5)
#loc197 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":162:5)
#loc198 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":147:9)
#loc199 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":159:9)
#loc200 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":151:13)
#loc201 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":158:13)
#loc202 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":151:17)
#loc203 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":151:25)
#loc204 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":152:13)
#loc205 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":154:13)
#loc206 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":156:13)
#loc207 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":153:37)
#loc208 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":153:30)
#loc209 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":153:17)
#loc210 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":157:27)
#loc211 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":157:17)
#loc212 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":163:9)
#loc213 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":175:9)
#loc214 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":167:13)
#loc215 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":174:13)
#loc216 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":167:17)
#loc217 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":167:25)
#loc218 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":168:13)
#loc219 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":170:13)
#loc220 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":172:13)
#loc221 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":169:37)
#loc222 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":169:30)
#loc223 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":169:17)
#loc224 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":173:27)
#loc225 = loc("CWE126_Buffer_Overread__CWE129_rand_12.c":173:17)
#loc226 = loc(fused[#loc1, #loc2])
#loc227 = loc(fused[#loc3, #loc4])
#loc228 = loc(fused[#loc5, #loc6])
#loc229 = loc(fused[#loc7, #loc8])
#loc230 = loc(fused[#loc11, #loc12])
#loc231 = loc(fused[#loc13, #loc14])
#loc232 = loc(fused[#loc15, #loc16])
#loc233 = loc(fused[#loc17, #loc18])
#loc234 = loc(fused[#loc21, #loc19])
#loc235 = loc(fused[#loc22, #loc23])
#loc236 = loc(fused[#loc24, #loc25])
#loc237 = loc(fused[#loc26, #loc27, #loc28, #loc23])
#loc238 = loc(fused[#loc30, #loc29])
#loc239 = loc(fused[#loc32, #loc31])
#loc240 = loc(fused[#loc33, #loc34])
#loc241 = loc(fused[#loc35, #loc36])
#loc242 = loc(fused[#loc37, #loc38, #loc39, #loc34])
#loc243 = loc(fused[#loc40, #loc41])
#loc244 = loc(fused[#loc42, #loc43])
#loc245 = loc(fused[#loc44, #loc45])
#loc246 = loc(fused[#loc46, #loc47, #loc48, #loc43])
#loc247 = loc(fused[#loc53, #loc54])
#loc248 = loc(fused[#loc55, #loc56])
#loc249 = loc(fused[#loc57, #loc58])
#loc250 = loc(fused[#loc60, #loc62])
#loc251 = loc(fused[#loc63, #loc64, #loc65, #loc56])
#loc252 = loc(fused[#loc70, #loc71])
#loc253 = loc(fused[#loc72, #loc73])
#loc254 = loc(fused[#loc74, #loc75])
#loc255 = loc(fused[#loc76, #loc77])
#loc256 = loc(fused[#loc78, #loc79])
#loc257 = loc(fused[#loc84, #loc85])
#loc260 = loc(fused[#loc95, #loc96])
#loc261 = loc(fused[#loc99, #loc100])
#loc262 = loc(fused[#loc103, #loc102])
#loc263 = loc(fused[#loc104, #loc105])
#loc264 = loc(fused[#loc106, #loc107])
#loc265 = loc(fused[#loc108, #loc109])
#loc266 = loc(fused[#loc110, #loc111])
#loc267 = loc(fused[#loc114, #loc112])
#loc268 = loc(fused[#loc115, #loc116])
#loc269 = loc(fused[#loc117, #loc118])
#loc270 = loc(fused[#loc119, #loc120, #loc121, #loc116])
#loc271 = loc(fused[#loc123, #loc122])
#loc272 = loc(fused[#loc125, #loc124])
#loc273 = loc(fused[#loc126, #loc127])
#loc274 = loc(fused[#loc128, #loc129])
#loc275 = loc(fused[#loc130, #loc131, #loc132, #loc127])
#loc276 = loc(fused[#loc133, #loc134])
#loc277 = loc(fused[#loc135, #loc136])
#loc278 = loc(fused[#loc137, #loc138])
#loc279 = loc(fused[#loc140, #loc142])
#loc280 = loc(fused[#loc143, #loc144, #loc145, #loc136])
#loc281 = loc(fused[#loc151, #loc152])
#loc282 = loc(fused[#loc153, #loc154])
#loc283 = loc(fused[#loc155, #loc156])
#loc284 = loc(fused[#loc158, #loc160])
#loc285 = loc(fused[#loc161, #loc162, #loc163, #loc154])
#loc286 = loc(fused[#loc169, #loc170])
#loc287 = loc(fused[#loc171, #loc172])
#loc288 = loc(fused[#loc173, #loc174])
#loc289 = loc(fused[#loc175, #loc176])
#loc290 = loc(fused[#loc179, #loc177])
#loc291 = loc(fused[#loc180, #loc181])
#loc292 = loc(fused[#loc182, #loc183])
#loc293 = loc(fused[#loc184, #loc185, #loc186, #loc181])
#loc294 = loc(fused[#loc188, #loc187])
#loc295 = loc(fused[#loc190, #loc189])
#loc296 = loc(fused[#loc191, #loc192])
#loc297 = loc(fused[#loc193, #loc194])
#loc298 = loc(fused[#loc195, #loc196, #loc197, #loc192])
#loc299 = loc(fused[#loc198, #loc199])
#loc300 = loc(fused[#loc200, #loc201])
#loc301 = loc(fused[#loc202, #loc203])
#loc302 = loc(fused[#loc204, #loc205, #loc206, #loc201])
#loc303 = loc(fused[#loc212, #loc213])
#loc304 = loc(fused[#loc214, #loc215])
#loc305 = loc(fused[#loc216, #loc217])
#loc306 = loc(fused[#loc218, #loc219, #loc220, #loc215])
