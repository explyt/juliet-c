!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s04/CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.global "private" constant cir_private @__const.goodG2B.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc221)
  cir.global "private" constant cir_private @__const.CWE78_OS_Command_Injection__char_listen_socket_execlp_16_bad.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc222)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc223)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc224)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc225)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc226)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc227)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc228)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc229)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc230)
  cir.func private @close(!s32i) -> !s32i loc(#loc231)
  cir.func private @execlp(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc232)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"sh\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc25)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"-c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc26)
  cir.func no_proto @CWE78_OS_Command_Injection__char_listen_socket_execlp_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc234)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc222)
    %2 = cir.get_global @__const.CWE78_OS_Command_Injection__char_listen_socket_execlp_16_bad.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc222)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc222)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc31)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc235)
    cir.scope {
      cir.while {
        %13 = cir.const #cir.int<1> : !s32i loc(#loc35)
        %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc35)
        cir.condition(%14) loc(#loc35)
      } do {
        cir.scope {
          cir.scope {
            %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc239)
            %14 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc240)
            %15 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc241)
            %16 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc242)
            %17 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc243)
            %18 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc244)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc46)
            %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc46)
            cir.store %20, %16 : !s32i, !cir.ptr<!s32i> loc(#loc242)
            %21 = cir.const #cir.int<1> : !s32i loc(#loc48)
            %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc48)
            cir.store %22, %17 : !s32i, !cir.ptr<!s32i> loc(#loc243)
            %23 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc51)
            %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
            %25 = cir.call @strlen(%24) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc51)
            cir.store %25, %18 : !u64i, !cir.ptr<!u64i> loc(#loc244)
            cir.scope {
              cir.do {
                cir.scope {
                  %26 = cir.const #cir.int<2> : !s32i loc(#loc57)
                  %27 = cir.const #cir.int<1> : !s32i loc(#loc58)
                  %28 = cir.const #cir.int<6> : !s32i loc(#loc59)
                  %29 = cir.call @socket(%26, %27, %28) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc60)
                  cir.store %29, %16 : !s32i, !cir.ptr<!s32i> loc(#loc247)
                  cir.scope {
                    %83 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc65)
                    %84 = cir.const #cir.int<1> : !s32i loc(#loc66)
                    %85 = cir.unary(minus, %84) nsw : !s32i, !s32i loc(#loc66)
                    %86 = cir.cmp(eq, %83, %85) : !s32i, !cir.bool loc(#loc249)
                    cir.if %86 {
                      cir.break loc(#loc68)
                    } loc(#loc250)
                  } loc(#loc248)
                  %30 = cir.cast(bitcast, %14 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc251)
                  %31 = cir.const #cir.int<0> : !s32i loc(#loc71)
                  %32 = cir.const #cir.int<16> : !u64i loc(#loc252)
                  cir.libc.memset %32 bytes from %30 set to %31 : !cir.ptr<!void>, !s32i, !u64i loc(#loc253)
                  %33 = cir.const #cir.int<2> : !s32i loc(#loc76)
                  %34 = cir.cast(integral, %33 : !s32i), !u16i loc(#loc76)
                  %35 = cir.get_member %14[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
                  cir.store %34, %35 : !u16i, !cir.ptr<!u16i> loc(#loc254)
                  %36 = cir.const #cir.int<0> : !s32i loc(#loc79)
                  %37 = cir.cast(integral, %36 : !s32i), !u32i loc(#loc79)
                  %38 = cir.get_member %14[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc80)
                  %39 = cir.get_member %38[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc81)
                  cir.store %37, %39 : !u32i, !cir.ptr<!u32i> loc(#loc255)
                  %40 = cir.const #cir.int<27015> : !s32i loc(#loc83)
                  %41 = cir.cast(integral, %40 : !s32i), !u16i loc(#loc83)
                  %42 = cir.call @htons(%41) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc84)
                  %43 = cir.get_member %14[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc85)
                  cir.store %42, %43 : !u16i, !cir.ptr<!u16i> loc(#loc256)
                  cir.scope {
                    %83 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc90)
                    %84 = cir.cast(bitcast, %14 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc258)
                    %85 = cir.const #cir.int<16> : !u64i loc(#loc259)
                    %86 = cir.cast(integral, %85 : !u64i), !u32i loc(#loc259)
                    %87 = cir.call @bind(%83, %84, %86) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc95)
                    %88 = cir.const #cir.int<1> : !s32i loc(#loc96)
                    %89 = cir.unary(minus, %88) nsw : !s32i, !s32i loc(#loc96)
                    %90 = cir.cmp(eq, %87, %89) : !s32i, !cir.bool loc(#loc260)
                    cir.if %90 {
                      cir.break loc(#loc98)
                    } loc(#loc261)
                  } loc(#loc257)
                  cir.scope {
                    %83 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc101)
                    %84 = cir.const #cir.int<5> : !s32i loc(#loc102)
                    %85 = cir.call @listen(%83, %84) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc103)
                    %86 = cir.const #cir.int<1> : !s32i loc(#loc104)
                    %87 = cir.unary(minus, %86) nsw : !s32i, !s32i loc(#loc104)
                    %88 = cir.cmp(eq, %85, %87) : !s32i, !cir.bool loc(#loc263)
                    cir.if %88 {
                      cir.break loc(#loc106)
                    } loc(#loc264)
                  } loc(#loc262)
                  %44 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc107)
                  %45 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc108)
                  %46 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc109)
                  %47 = cir.call @accept(%44, %45, %46) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc110)
                  cir.store %47, %17 : !s32i, !cir.ptr<!s32i> loc(#loc265)
                  cir.scope {
                    %83 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc115)
                    %84 = cir.const #cir.int<1> : !s32i loc(#loc116)
                    %85 = cir.unary(minus, %84) nsw : !s32i, !s32i loc(#loc116)
                    %86 = cir.cmp(eq, %83, %85) : !s32i, !cir.bool loc(#loc267)
                    cir.if %86 {
                      cir.break loc(#loc118)
                    } loc(#loc268)
                  } loc(#loc266)
                  %48 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc119)
                  %49 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc120)
                  %50 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc121)
                  %51 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %50 : !u64i), !cir.ptr<!s8i> loc(#loc122)
                  %52 = cir.cast(bitcast, %51 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc269)
                  %53 = cir.const #cir.int<1> : !u64i loc(#loc270)
                  %54 = cir.const #cir.int<100> : !s32i loc(#loc127)
                  %55 = cir.cast(integral, %54 : !s32i), !u64i loc(#loc127)
                  %56 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc128)
                  %57 = cir.binop(sub, %55, %56) : !u64i loc(#loc271)
                  %58 = cir.const #cir.int<1> : !s32i loc(#loc129)
                  %59 = cir.cast(integral, %58 : !s32i), !u64i loc(#loc129)
                  %60 = cir.binop(sub, %57, %59) : !u64i loc(#loc272)
                  %61 = cir.binop(mul, %53, %60) : !u64i loc(#loc273)
                  %62 = cir.const #cir.int<0> : !s32i loc(#loc131)
                  %63 = cir.call @recv(%48, %52, %61, %62) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc132)
                  %64 = cir.cast(integral, %63 : !s64i), !s32i loc(#loc132)
                  cir.store %64, %13 : !s32i, !cir.ptr<!s32i> loc(#loc274)
                  cir.scope {
                    %83 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc137)
                    %84 = cir.const #cir.int<1> : !s32i loc(#loc138)
                    %85 = cir.unary(minus, %84) nsw : !s32i, !s32i loc(#loc138)
                    %86 = cir.cmp(eq, %83, %85) : !s32i, !cir.bool loc(#loc276)
                    %87 = cir.ternary(%86, true {
                      %88 = cir.const #true loc(#loc139)
                      cir.yield %88 : !cir.bool loc(#loc139)
                    }, false {
                      %88 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc140)
                      %89 = cir.const #cir.int<0> : !s32i loc(#loc141)
                      %90 = cir.cmp(eq, %88, %89) : !s32i, !cir.bool loc(#loc277)
                      %91 = cir.ternary(%90, true {
                        %92 = cir.const #true loc(#loc139)
                        cir.yield %92 : !cir.bool loc(#loc139)
                      }, false {
                        %92 = cir.const #false loc(#loc139)
                        cir.yield %92 : !cir.bool loc(#loc139)
                      }) : (!cir.bool) -> !cir.bool loc(#loc139)
                      cir.yield %91 : !cir.bool loc(#loc139)
                    }) : (!cir.bool) -> !cir.bool loc(#loc139)
                    cir.if %87 {
                      cir.break loc(#loc143)
                    } loc(#loc278)
                  } loc(#loc275)
                  %65 = cir.const #cir.int<0> : !s32i loc(#loc144)
                  %66 = cir.cast(integral, %65 : !s32i), !s8i loc(#loc144)
                  %67 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
                  %68 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc146)
                  %69 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc147)
                  %70 = cir.cast(integral, %69 : !s32i), !u64i loc(#loc147)
                  %71 = cir.const #cir.int<1> : !u64i loc(#loc279)
                  %72 = cir.binop(div, %70, %71) : !u64i loc(#loc280)
                  %73 = cir.binop(add, %68, %72) : !u64i loc(#loc281)
                  %74 = cir.ptr_stride(%67 : !cir.ptr<!s8i>, %73 : !u64i), !cir.ptr<!s8i> loc(#loc150)
                  cir.store %66, %74 : !s8i, !cir.ptr<!s8i> loc(#loc282)
                  %75 = cir.get_global @strchr : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i>>> loc(#loc151)
                  %76 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc152)
                  %77 = cir.const #cir.int<13> : !s32i loc(#loc153)
                  %78 = cir.call @strchr(%76, %77) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc151)
                  cir.store %78, %15 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc283)
                  cir.scope {
                    %83 = cir.load %15 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc158)
                    %84 = cir.cast(ptr_to_bool, %83 : !cir.ptr<!s8i>), !cir.bool loc(#loc158)
                    cir.if %84 {
                      %85 = cir.const #cir.int<0> : !s32i loc(#loc160)
                      %86 = cir.cast(integral, %85 : !s32i), !s8i loc(#loc160)
                      %87 = cir.load deref %15 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc161)
                      cir.store %86, %87 : !s8i, !cir.ptr<!s8i> loc(#loc286)
                    } loc(#loc285)
                  } loc(#loc284)
                  %79 = cir.get_global @strchr : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i>>> loc(#loc163)
                  %80 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc164)
                  %81 = cir.const #cir.int<10> : !s32i loc(#loc165)
                  %82 = cir.call @strchr(%80, %81) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc163)
                  cir.store %82, %15 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc287)
                  cir.scope {
                    %83 = cir.load %15 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc170)
                    %84 = cir.cast(ptr_to_bool, %83 : !cir.ptr<!s8i>), !cir.bool loc(#loc170)
                    cir.if %84 {
                      %85 = cir.const #cir.int<0> : !s32i loc(#loc172)
                      %86 = cir.cast(integral, %85 : !s32i), !s8i loc(#loc172)
                      %87 = cir.load deref %15 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc173)
                      cir.store %86, %87 : !s8i, !cir.ptr<!s8i> loc(#loc290)
                    } loc(#loc289)
                  } loc(#loc288)
                } loc(#loc246)
                cir.yield loc(#loc54)
              } while {
                %26 = cir.const #cir.int<0> : !s32i loc(#loc175)
                %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc175)
                cir.condition(%27) loc(#loc175)
              } loc(#loc245)
            } loc(#loc245)
            cir.scope {
              %26 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc178)
              %27 = cir.const #cir.int<1> : !s32i loc(#loc179)
              %28 = cir.unary(minus, %27) nsw : !s32i, !s32i loc(#loc179)
              %29 = cir.cmp(ne, %26, %28) : !s32i, !cir.bool loc(#loc292)
              cir.if %29 {
                %30 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc181)
                %31 = cir.call @close(%30) : (!s32i) -> !s32i loc(#loc182)
              } loc(#loc293)
            } loc(#loc291)
            cir.scope {
              %26 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc185)
              %27 = cir.const #cir.int<1> : !s32i loc(#loc186)
              %28 = cir.unary(minus, %27) nsw : !s32i, !s32i loc(#loc186)
              %29 = cir.cmp(ne, %26, %28) : !s32i, !cir.bool loc(#loc295)
              cir.if %29 {
                %30 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc188)
                %31 = cir.call @close(%30) : (!s32i) -> !s32i loc(#loc189)
              } loc(#loc296)
            } loc(#loc294)
          } loc(#loc238)
          cir.break loc(#loc190)
        } loc(#loc237)
        cir.yield loc(#loc34)
      } loc(#loc236)
    } loc(#loc236)
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc25)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc25)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc191)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc191)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc26)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc26)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc192)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc193)
    %12 = cir.call @execlp(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc194)
    cir.return loc(#loc28)
  } loc(#loc233)
  cir.func no_proto @CWE78_OS_Command_Injection__char_listen_socket_execlp_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc298)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc197)
    cir.return loc(#loc196)
  } loc(#loc297)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc299)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc201)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc301)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc221)
    %2 = cir.get_global @__const.goodG2B.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc221)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc221)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc206)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc302)
    cir.scope {
      cir.while {
        %13 = cir.const #cir.int<1> : !s32i loc(#loc210)
        %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc210)
        cir.condition(%14) loc(#loc210)
      } do {
        cir.scope {
          %13 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc212)
          %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc213)
          %15 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc201)
          %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc201)
          %17 = cir.call @strcat(%14, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc212)
          cir.break loc(#loc214)
        } loc(#loc304)
        cir.yield loc(#loc209)
      } loc(#loc303)
    } loc(#loc303)
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc215)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc215)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc216)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc216)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc217)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc217)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc218)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc219)
    %12 = cir.call @execlp(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc220)
    cir.return loc(#loc203)
  } loc(#loc300)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s04/CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":0:0)
#loc1 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":167:5)
#loc2 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":167:28)
#loc3 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":68:5)
#loc4 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":68:28)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc9 = loc("/usr/include/netinet/in.h":402:1)
#loc10 = loc("/usr/include/netinet/in.h":403:40)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc13 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc14 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc15 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc16 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc17 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc18 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc19 = loc("/usr/include/string.h":246:1)
#loc20 = loc("/usr/include/string.h":247:33)
#loc21 = loc("/usr/include/unistd.h":358:1)
#loc22 = loc("/usr/include/unistd.h":358:27)
#loc23 = loc("/usr/include/unistd.h":605:1)
#loc24 = loc("/usr/include/unistd.h":606:14)
#loc25 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":156:12)
#loc26 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":156:38)
#loc27 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":65:1)
#loc28 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":157:1)
#loc29 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":67:5)
#loc30 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":67:12)
#loc31 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":69:12)
#loc32 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":69:5)
#loc33 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":70:5)
#loc34 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":152:5)
#loc35 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":70:11)
#loc36 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":71:5)
#loc37 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":72:9)
#loc38 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":150:9)
#loc39 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":77:13)
#loc40 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":77:17)
#loc41 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":78:13)
#loc42 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":78:32)
#loc43 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":79:13)
#loc44 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":79:19)
#loc45 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":80:13)
#loc46 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":80:35)
#loc47 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":81:13)
#loc48 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":81:35)
#loc49 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":82:13)
#loc50 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":82:41)
#loc51 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":82:30)
#loc52 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":82:37)
#loc53 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":83:13)
#loc54 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":135:21)
#loc55 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":84:13)
#loc56 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":134:13)
#loc57 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":93:39)
#loc58 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":93:48)
#loc59 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":93:61)
#loc60 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":93:32)
#loc61 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":93:17)
#loc62 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":93:72)
#loc63 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":94:17)
#loc64 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":97:17)
#loc65 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":94:21)
#loc66 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":94:37)
#loc67 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":95:17)
#loc68 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":96:21)
#loc69 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":98:24)
#loc70 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":98:25)
#loc71 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":98:34)
#loc72 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":98:37)
#loc73 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":98:51)
#loc74 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":98:17)
#loc75 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":98:52)
#loc76 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":99:38)
#loc77 = loc("/usr/include/netinet/in.h":249:5)
#loc78 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":99:17)
#loc79 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":100:43)
#loc80 = loc("/usr/include/netinet/in.h":251:20)
#loc81 = loc("/usr/include/netinet/in.h":33:15)
#loc82 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":100:17)
#loc83 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":101:42)
#loc84 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":101:36)
#loc85 = loc("/usr/include/netinet/in.h":250:15)
#loc86 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":101:17)
#loc87 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":101:50)
#loc88 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":102:17)
#loc89 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":105:17)
#loc90 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":102:26)
#loc91 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":102:58)
#loc92 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":102:59)
#loc93 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":102:68)
#loc94 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":102:82)
#loc95 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":102:21)
#loc96 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":102:88)
#loc97 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":103:17)
#loc98 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":104:21)
#loc99 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":106:17)
#loc100 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":109:17)
#loc101 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":106:28)
#loc102 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":106:42)
#loc103 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":106:21)
#loc104 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":106:61)
#loc105 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":107:17)
#loc106 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":108:21)
#loc107 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":110:39)
#loc108 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":110:53)
#loc109 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":110:59)
#loc110 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":110:32)
#loc111 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":110:17)
#loc112 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":110:63)
#loc113 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":111:17)
#loc114 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":114:17)
#loc115 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":111:21)
#loc116 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":111:37)
#loc117 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":112:17)
#loc118 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":113:21)
#loc119 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":116:35)
#loc120 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":116:58)
#loc121 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":116:65)
#loc122 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":116:63)
#loc123 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":116:49)
#loc124 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":116:72)
#loc125 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":116:75)
#loc126 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":116:86)
#loc127 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":116:91)
#loc128 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":116:97)
#loc129 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":116:107)
#loc130 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":116:108)
#loc131 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":116:111)
#loc132 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":116:30)
#loc133 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":116:17)
#loc134 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":116:112)
#loc135 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":117:17)
#loc136 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":120:17)
#loc137 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":117:21)
#loc138 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":117:35)
#loc139 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":117:48)
#loc140 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":117:51)
#loc141 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":117:65)
#loc142 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":118:17)
#loc143 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":119:21)
#loc144 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":122:61)
#loc145 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":122:17)
#loc146 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":122:22)
#loc147 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":122:32)
#loc148 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":122:45)
#loc149 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":122:56)
#loc150 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":122:57)
#loc151 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":124:27)
#loc152 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":124:34)
#loc153 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":124:40)
#loc154 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":124:17)
#loc155 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":124:44)
#loc156 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":125:17)
#loc157 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":128:17)
#loc158 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":125:21)
#loc159 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":126:17)
#loc160 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":127:32)
#loc161 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":127:22)
#loc162 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":127:21)
#loc163 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":129:27)
#loc164 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":129:34)
#loc165 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":129:40)
#loc166 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":129:17)
#loc167 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":129:44)
#loc168 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":130:17)
#loc169 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":133:17)
#loc170 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":130:21)
#loc171 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":131:17)
#loc172 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":132:32)
#loc173 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":132:22)
#loc174 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":132:21)
#loc175 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":135:20)
#loc176 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":136:13)
#loc177 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":139:13)
#loc178 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":136:17)
#loc179 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":136:33)
#loc180 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":137:13)
#loc181 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":138:30)
#loc182 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":138:17)
#loc183 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":140:13)
#loc184 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":143:13)
#loc185 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":140:17)
#loc186 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":140:33)
#loc187 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":141:13)
#loc188 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":142:30)
#loc189 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":142:17)
#loc190 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":151:9)
#loc191 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":156:25)
#loc192 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":156:52)
#loc193 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":156:66)
#loc194 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":156:5)
#loc195 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":181:1)
#loc196 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":184:1)
#loc197 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":183:5)
#loc198 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":183:13)
#loc199 = loc("/usr/include/string.h":149:1)
#loc200 = loc("/usr/include/string.h":150:14)
#loc201 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":172:22)
#loc202 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":164:1)
#loc203 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":179:1)
#loc204 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":166:5)
#loc205 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":166:12)
#loc206 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":168:12)
#loc207 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":168:5)
#loc208 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":169:5)
#loc209 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":174:5)
#loc210 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":169:11)
#loc211 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":170:5)
#loc212 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":172:9)
#loc213 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":172:16)
#loc214 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":173:9)
#loc215 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":178:12)
#loc216 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":178:25)
#loc217 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":178:38)
#loc218 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":178:52)
#loc219 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":178:66)
#loc220 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_16.c":178:5)
#loc221 = loc(fused[#loc1, #loc2])
#loc222 = loc(fused[#loc3, #loc4])
#loc223 = loc(fused[#loc5, #loc6])
#loc224 = loc(fused[#loc7, #loc8])
#loc225 = loc(fused[#loc9, #loc10])
#loc226 = loc(fused[#loc11, #loc12])
#loc227 = loc(fused[#loc13, #loc14])
#loc228 = loc(fused[#loc15, #loc16])
#loc229 = loc(fused[#loc17, #loc18])
#loc230 = loc(fused[#loc19, #loc20])
#loc231 = loc(fused[#loc21, #loc22])
#loc232 = loc(fused[#loc23, #loc24])
#loc233 = loc(fused[#loc27, #loc28])
#loc234 = loc(fused[#loc29, #loc30])
#loc235 = loc(fused[#loc32, #loc31])
#loc236 = loc(fused[#loc33, #loc34])
#loc237 = loc(fused[#loc36, #loc34])
#loc238 = loc(fused[#loc37, #loc38])
#loc239 = loc(fused[#loc39, #loc40])
#loc240 = loc(fused[#loc41, #loc42])
#loc241 = loc(fused[#loc43, #loc44])
#loc242 = loc(fused[#loc45, #loc46])
#loc243 = loc(fused[#loc47, #loc48])
#loc244 = loc(fused[#loc49, #loc50])
#loc245 = loc(fused[#loc53, #loc54])
#loc246 = loc(fused[#loc55, #loc56])
#loc247 = loc(fused[#loc61, #loc62])
#loc248 = loc(fused[#loc63, #loc64])
#loc249 = loc(fused[#loc65, #loc66])
#loc250 = loc(fused[#loc67, #loc64])
#loc251 = loc(fused[#loc69, #loc70])
#loc252 = loc(fused[#loc72, #loc73])
#loc253 = loc(fused[#loc74, #loc75])
#loc254 = loc(fused[#loc78, #loc76])
#loc255 = loc(fused[#loc82, #loc79])
#loc256 = loc(fused[#loc86, #loc87])
#loc257 = loc(fused[#loc88, #loc89])
#loc258 = loc(fused[#loc91, #loc92])
#loc259 = loc(fused[#loc93, #loc94])
#loc260 = loc(fused[#loc95, #loc96])
#loc261 = loc(fused[#loc97, #loc89])
#loc262 = loc(fused[#loc99, #loc100])
#loc263 = loc(fused[#loc103, #loc104])
#loc264 = loc(fused[#loc105, #loc100])
#loc265 = loc(fused[#loc111, #loc112])
#loc266 = loc(fused[#loc113, #loc114])
#loc267 = loc(fused[#loc115, #loc116])
#loc268 = loc(fused[#loc117, #loc114])
#loc269 = loc(fused[#loc123, #loc124])
#loc270 = loc(fused[#loc125, #loc126])
#loc271 = loc(fused[#loc127, #loc128])
#loc272 = loc(fused[#loc127, #loc129])
#loc273 = loc(fused[#loc125, #loc130])
#loc274 = loc(fused[#loc133, #loc134])
#loc275 = loc(fused[#loc135, #loc136])
#loc276 = loc(fused[#loc137, #loc138])
#loc277 = loc(fused[#loc140, #loc141])
#loc278 = loc(fused[#loc142, #loc136])
#loc279 = loc(fused[#loc148, #loc149])
#loc280 = loc(fused[#loc147, #loc149])
#loc281 = loc(fused[#loc146, #loc149])
#loc282 = loc(fused[#loc145, #loc144])
#loc283 = loc(fused[#loc154, #loc155])
#loc284 = loc(fused[#loc156, #loc157])
#loc285 = loc(fused[#loc159, #loc157])
#loc286 = loc(fused[#loc162, #loc160])
#loc287 = loc(fused[#loc166, #loc167])
#loc288 = loc(fused[#loc168, #loc169])
#loc289 = loc(fused[#loc171, #loc169])
#loc290 = loc(fused[#loc174, #loc172])
#loc291 = loc(fused[#loc176, #loc177])
#loc292 = loc(fused[#loc178, #loc179])
#loc293 = loc(fused[#loc180, #loc177])
#loc294 = loc(fused[#loc183, #loc184])
#loc295 = loc(fused[#loc185, #loc186])
#loc296 = loc(fused[#loc187, #loc184])
#loc297 = loc(fused[#loc195, #loc196])
#loc298 = loc(fused[#loc197, #loc198])
#loc299 = loc(fused[#loc199, #loc200])
#loc300 = loc(fused[#loc202, #loc203])
#loc301 = loc(fused[#loc204, #loc205])
#loc302 = loc(fused[#loc207, #loc206])
#loc303 = loc(fused[#loc208, #loc209])
#loc304 = loc(fused[#loc211, #loc209])
