!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc20 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":44:21)
#loc21 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":44:25)
#loc139 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":144:25)
#loc140 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":144:29)
#loc252 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":123:25)
#loc253 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":123:29)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc282 = loc(fused[#loc20, #loc21])
#loc327 = loc(fused[#loc139, #loc140])
#loc370 = loc(fused[#loc252, #loc253])
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s06/CWE190_Integer_Overflow__int_connect_socket_postinc_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc273)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc274)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc275)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc276)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc277)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc278)
  cir.func private @close(!s32i) -> !s32i loc(#loc279)
  cir.func private @printIntLine(!s32i) loc(#loc280)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc20, #loc21])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc282)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc22)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc284)
      %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
      %3 = cir.unary(inc, %2) nsw : !s32i, !s32i loc(#loc28)
      cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc285)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc284)
      %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc29)
      cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc30)
    } loc(#loc283)
    cir.return loc(#loc19)
  } loc(#loc281)
  cir.func no_proto @CWE190_Integer_Overflow__int_connect_socket_postinc_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc287)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc35)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc288)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc290)
      %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc291)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc292)
      %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc293)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc44)
      %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc44)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc292)
      cir.scope {
        cir.do {
          cir.scope {
            %9 = cir.const #cir.int<2> : !s32i loc(#loc51)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc52)
            %11 = cir.const #cir.int<6> : !s32i loc(#loc53)
            %12 = cir.call @socket(%9, %10, %11) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc54)
            cir.store %12, %5 : !s32i, !cir.ptr<!s32i> loc(#loc296)
            cir.scope {
              %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc59)
              %52 = cir.const #cir.int<1> : !s32i loc(#loc60)
              %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc60)
              %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc298)
              cir.if %54 {
                cir.break loc(#loc62)
              } loc(#loc299)
            } loc(#loc297)
            %13 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc300)
            %14 = cir.const #cir.int<0> : !s32i loc(#loc65)
            %15 = cir.const #cir.int<16> : !u64i loc(#loc301)
            cir.libc.memset %15 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc302)
            %16 = cir.const #cir.int<2> : !s32i loc(#loc70)
            %17 = cir.cast(integral, %16 : !s32i), !u16i loc(#loc70)
            %18 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
            cir.store %17, %18 : !u16i, !cir.ptr<!u16i> loc(#loc303)
            %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
            %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
            %21 = cir.call @inet_addr(%20) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc73)
            %22 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc74)
            %23 = cir.get_member %22[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc75)
            cir.store %21, %23 : !u32i, !cir.ptr<!u32i> loc(#loc304)
            %24 = cir.const #cir.int<27015> : !s32i loc(#loc78)
            %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc78)
            %26 = cir.call @htons(%25) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc79)
            %27 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
            cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc305)
            cir.scope {
              %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc85)
              %52 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc307)
              %53 = cir.const #cir.int<16> : !u64i loc(#loc308)
              %54 = cir.cast(integral, %53 : !u64i), !u32i loc(#loc308)
              %55 = cir.call @connect(%51, %52, %54) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc90)
              %56 = cir.const #cir.int<1> : !s32i loc(#loc91)
              %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc91)
              %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc309)
              cir.if %58 {
                cir.break loc(#loc93)
              } loc(#loc310)
            } loc(#loc306)
            %28 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc94)
            %29 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc95)
            %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc95)
            %31 = cir.const #cir.int<3> : !s32i loc(#loc96)
            %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc96)
            %33 = cir.const #cir.int<4> : !u64i loc(#loc96)
            %34 = cir.binop(mul, %32, %33) : !u64i loc(#loc96)
            %35 = cir.const #cir.int<2> : !s32i loc(#loc96)
            %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc96)
            %37 = cir.binop(add, %34, %36) : !u64i loc(#loc96)
            %38 = cir.const #cir.int<1> : !s32i loc(#loc97)
            %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc97)
            %40 = cir.binop(sub, %37, %39) : !u64i loc(#loc311)
            %41 = cir.const #cir.int<0> : !s32i loc(#loc98)
            %42 = cir.call @recv(%28, %30, %40, %41) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc99)
            %43 = cir.cast(integral, %42 : !s64i), !s32i loc(#loc99)
            cir.store %43, %3 : !s32i, !cir.ptr<!s32i> loc(#loc312)
            cir.scope {
              %51 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc104)
              %52 = cir.const #cir.int<1> : !s32i loc(#loc105)
              %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc105)
              %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc314)
              %55 = cir.ternary(%54, true {
                %56 = cir.const #true loc(#loc106)
                cir.yield %56 : !cir.bool loc(#loc106)
              }, false {
                %56 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc107)
                %57 = cir.const #cir.int<0> : !s32i loc(#loc108)
                %58 = cir.cmp(eq, %56, %57) : !s32i, !cir.bool loc(#loc315)
                %59 = cir.ternary(%58, true {
                  %60 = cir.const #true loc(#loc106)
                  cir.yield %60 : !cir.bool loc(#loc106)
                }, false {
                  %60 = cir.const #false loc(#loc106)
                  cir.yield %60 : !cir.bool loc(#loc106)
                }) : (!cir.bool) -> !cir.bool loc(#loc106)
                cir.yield %59 : !cir.bool loc(#loc106)
              }) : (!cir.bool) -> !cir.bool loc(#loc106)
              cir.if %55 {
                cir.break loc(#loc110)
              } loc(#loc316)
            } loc(#loc313)
            %44 = cir.const #cir.int<0> : !s32i loc(#loc111)
            %45 = cir.cast(integral, %44 : !s32i), !s8i loc(#loc111)
            %46 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc112)
            %47 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc113)
            %48 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %46 : !s32i), !cir.ptr<!s8i> loc(#loc113)
            cir.store %45, %48 : !s8i, !cir.ptr<!s8i> loc(#loc317)
            %49 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc114)
            %50 = cir.call @atoi(%49) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc115)
            cir.store %50, %0 : !s32i, !cir.ptr<!s32i> loc(#loc318)
          } loc(#loc295)
          cir.yield loc(#loc48)
        } while {
          %9 = cir.const #cir.int<0> : !s32i loc(#loc118)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc118)
          cir.condition(%10) loc(#loc118)
        } loc(#loc294)
      } loc(#loc294)
      cir.scope {
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc121)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc122)
        %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc122)
        %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc320)
        cir.if %12 {
          %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc124)
          %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc125)
        } loc(#loc321)
      } loc(#loc319)
    } loc(#loc289)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc126)
    cir.call @badSink(%2) : (!s32i) -> () loc(#loc127)
    cir.return loc(#loc32)
  } loc(#loc286)
  cir.func no_proto @CWE190_Integer_Overflow__int_connect_socket_postinc_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc323)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc130)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc324)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc132)
    cir.return loc(#loc129)
  } loc(#loc322)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc325)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc136)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc139, #loc140])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc327)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc141)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc144)
      %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc145)
      %3 = cir.cmp(lt, %1, %2) : !s32i, !cir.bool loc(#loc329)
      cir.if %3 {
        %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc331)
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc151)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc152)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc332)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc150)
        cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc331)
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc153)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc154)
      } else {
        %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc136)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc136)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc155)
      } loc(#loc330)
    } loc(#loc328)
    cir.return loc(#loc138)
  } loc(#loc326)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc334)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc160)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc335)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc337)
      %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc338)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc339)
      %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc340)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc169)
      %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc169)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc339)
      cir.scope {
        cir.do {
          cir.scope {
            %9 = cir.const #cir.int<2> : !s32i loc(#loc176)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc177)
            %11 = cir.const #cir.int<6> : !s32i loc(#loc178)
            %12 = cir.call @socket(%9, %10, %11) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc179)
            cir.store %12, %5 : !s32i, !cir.ptr<!s32i> loc(#loc343)
            cir.scope {
              %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc184)
              %52 = cir.const #cir.int<1> : !s32i loc(#loc185)
              %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc185)
              %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc345)
              cir.if %54 {
                cir.break loc(#loc187)
              } loc(#loc346)
            } loc(#loc344)
            %13 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc347)
            %14 = cir.const #cir.int<0> : !s32i loc(#loc190)
            %15 = cir.const #cir.int<16> : !u64i loc(#loc348)
            cir.libc.memset %15 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc349)
            %16 = cir.const #cir.int<2> : !s32i loc(#loc195)
            %17 = cir.cast(integral, %16 : !s32i), !u16i loc(#loc195)
            %18 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
            cir.store %17, %18 : !u16i, !cir.ptr<!u16i> loc(#loc350)
            %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc197)
            %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc197)
            %21 = cir.call @inet_addr(%20) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc198)
            %22 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc74)
            %23 = cir.get_member %22[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc75)
            cir.store %21, %23 : !u32i, !cir.ptr<!u32i> loc(#loc351)
            %24 = cir.const #cir.int<27015> : !s32i loc(#loc201)
            %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc201)
            %26 = cir.call @htons(%25) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc202)
            %27 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
            cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc352)
            cir.scope {
              %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc207)
              %52 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc354)
              %53 = cir.const #cir.int<16> : !u64i loc(#loc355)
              %54 = cir.cast(integral, %53 : !u64i), !u32i loc(#loc355)
              %55 = cir.call @connect(%51, %52, %54) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc212)
              %56 = cir.const #cir.int<1> : !s32i loc(#loc213)
              %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc213)
              %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc356)
              cir.if %58 {
                cir.break loc(#loc215)
              } loc(#loc357)
            } loc(#loc353)
            %28 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc216)
            %29 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc217)
            %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc217)
            %31 = cir.const #cir.int<3> : !s32i loc(#loc218)
            %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc218)
            %33 = cir.const #cir.int<4> : !u64i loc(#loc218)
            %34 = cir.binop(mul, %32, %33) : !u64i loc(#loc218)
            %35 = cir.const #cir.int<2> : !s32i loc(#loc218)
            %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc218)
            %37 = cir.binop(add, %34, %36) : !u64i loc(#loc218)
            %38 = cir.const #cir.int<1> : !s32i loc(#loc219)
            %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc219)
            %40 = cir.binop(sub, %37, %39) : !u64i loc(#loc358)
            %41 = cir.const #cir.int<0> : !s32i loc(#loc220)
            %42 = cir.call @recv(%28, %30, %40, %41) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc221)
            %43 = cir.cast(integral, %42 : !s64i), !s32i loc(#loc221)
            cir.store %43, %3 : !s32i, !cir.ptr<!s32i> loc(#loc359)
            cir.scope {
              %51 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc226)
              %52 = cir.const #cir.int<1> : !s32i loc(#loc227)
              %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc227)
              %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc361)
              %55 = cir.ternary(%54, true {
                %56 = cir.const #true loc(#loc228)
                cir.yield %56 : !cir.bool loc(#loc228)
              }, false {
                %56 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc229)
                %57 = cir.const #cir.int<0> : !s32i loc(#loc230)
                %58 = cir.cmp(eq, %56, %57) : !s32i, !cir.bool loc(#loc362)
                %59 = cir.ternary(%58, true {
                  %60 = cir.const #true loc(#loc228)
                  cir.yield %60 : !cir.bool loc(#loc228)
                }, false {
                  %60 = cir.const #false loc(#loc228)
                  cir.yield %60 : !cir.bool loc(#loc228)
                }) : (!cir.bool) -> !cir.bool loc(#loc228)
                cir.yield %59 : !cir.bool loc(#loc228)
              }) : (!cir.bool) -> !cir.bool loc(#loc228)
              cir.if %55 {
                cir.break loc(#loc232)
              } loc(#loc363)
            } loc(#loc360)
            %44 = cir.const #cir.int<0> : !s32i loc(#loc233)
            %45 = cir.cast(integral, %44 : !s32i), !s8i loc(#loc233)
            %46 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc234)
            %47 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc235)
            %48 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %46 : !s32i), !cir.ptr<!s8i> loc(#loc235)
            cir.store %45, %48 : !s8i, !cir.ptr<!s8i> loc(#loc364)
            %49 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc236)
            %50 = cir.call @atoi(%49) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc237)
            cir.store %50, %0 : !s32i, !cir.ptr<!s32i> loc(#loc365)
          } loc(#loc342)
          cir.yield loc(#loc173)
        } while {
          %9 = cir.const #cir.int<0> : !s32i loc(#loc240)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc240)
          cir.condition(%10) loc(#loc240)
        } loc(#loc341)
      } loc(#loc341)
      cir.scope {
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc243)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc244)
        %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc244)
        %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc367)
        cir.if %12 {
          %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc246)
          %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc247)
        } loc(#loc368)
      } loc(#loc366)
    } loc(#loc336)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc248)
    cir.call @goodB2GSink(%2) : (!s32i) -> () loc(#loc249)
    cir.return loc(#loc157)
  } loc(#loc333)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc252, #loc253])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc370)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc254)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc372)
      %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc259)
      %3 = cir.unary(inc, %2) nsw : !s32i, !s32i loc(#loc260)
      cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc373)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc258)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc372)
      %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc261)
      cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc262)
    } loc(#loc371)
    cir.return loc(#loc251)
  } loc(#loc369)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc375)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc267)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc376)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc269)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc377)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc271)
    cir.call @goodG2BSink(%3) : (!s32i) -> () loc(#loc272)
    cir.return loc(#loc264)
  } loc(#loc374)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s06/CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":85:49)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":44:1)
#loc19 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":52:1)
#loc22 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":45:1)
#loc23 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":46:5)
#loc24 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":51:5)
#loc25 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":49:9)
#loc26 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":49:22)
#loc27 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":48:13)
#loc28 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":48:9)
#loc29 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":50:22)
#loc30 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":50:9)
#loc31 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":54:1)
#loc32 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":116:1)
#loc33 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":56:5)
#loc34 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":56:9)
#loc35 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":58:12)
#loc36 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":58:5)
#loc37 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":59:5)
#loc38 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":114:5)
#loc39 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":64:9)
#loc40 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":64:13)
#loc41 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":65:9)
#loc42 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":65:28)
#loc43 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":66:9)
#loc44 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":66:32)
#loc45 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":67:9)
#loc46 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":67:41)
#loc47 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":68:9)
#loc48 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":103:17)
#loc49 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":69:9)
#loc50 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":102:9)
#loc51 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":78:36)
#loc52 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":78:45)
#loc53 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":78:58)
#loc54 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":78:29)
#loc55 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":78:13)
#loc56 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":78:69)
#loc57 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":79:13)
#loc58 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":82:13)
#loc59 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":79:17)
#loc60 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":79:34)
#loc61 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":80:13)
#loc62 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":81:17)
#loc63 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":83:20)
#loc64 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":83:21)
#loc65 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":83:30)
#loc66 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":83:33)
#loc67 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":83:47)
#loc68 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":83:13)
#loc69 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":83:48)
#loc70 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":84:34)
#loc71 = loc("/usr/include/netinet/in.h":249:5)
#loc72 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":84:13)
#loc73 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":85:39)
#loc74 = loc("/usr/include/netinet/in.h":251:20)
#loc75 = loc("/usr/include/netinet/in.h":33:15)
#loc76 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":85:13)
#loc77 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":85:59)
#loc78 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":86:38)
#loc79 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":86:32)
#loc80 = loc("/usr/include/netinet/in.h":250:15)
#loc81 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":86:13)
#loc82 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":86:46)
#loc83 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":87:13)
#loc84 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":90:13)
#loc85 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":87:25)
#loc86 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":87:58)
#loc87 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":87:59)
#loc88 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":87:68)
#loc89 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":87:82)
#loc90 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":87:17)
#loc91 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":87:88)
#loc92 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":88:13)
#loc93 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":89:17)
#loc94 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":93:31)
#loc95 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":93:46)
#loc96 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":93:59)
#loc97 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":93:77)
#loc98 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":93:80)
#loc99 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":93:26)
#loc100 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":93:13)
#loc101 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":93:81)
#loc102 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":94:13)
#loc103 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":97:13)
#loc104 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":94:17)
#loc105 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":94:31)
#loc106 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":94:44)
#loc107 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":94:47)
#loc108 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":94:61)
#loc109 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":95:13)
#loc110 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":96:17)
#loc111 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":99:39)
#loc112 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":99:25)
#loc113 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":99:13)
#loc114 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":101:25)
#loc115 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":101:20)
#loc116 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":101:13)
#loc117 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":101:36)
#loc118 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":103:16)
#loc119 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":104:9)
#loc120 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":107:9)
#loc121 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":104:13)
#loc122 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":104:30)
#loc123 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":105:9)
#loc124 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":106:26)
#loc125 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":106:13)
#loc126 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":115:13)
#loc127 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":115:5)
#loc128 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":223:1)
#loc129 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":227:1)
#loc130 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":225:5)
#loc131 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":225:13)
#loc132 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":226:5)
#loc133 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":226:13)
#loc134 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc135 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc136 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":155:19)
#loc137 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":144:1)
#loc138 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":157:1)
#loc141 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":145:1)
#loc142 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":147:5)
#loc143 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":156:5)
#loc144 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":147:9)
#loc145 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":147:16)
#loc146 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":148:5)
#loc147 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":152:5)
#loc148 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":154:5)
#loc149 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":150:9)
#loc150 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":150:22)
#loc151 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":149:13)
#loc152 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":149:9)
#loc153 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":151:22)
#loc154 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":151:9)
#loc155 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":155:9)
#loc156 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":159:1)
#loc157 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":221:1)
#loc158 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":161:5)
#loc159 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":161:9)
#loc160 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":163:12)
#loc161 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":163:5)
#loc162 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":164:5)
#loc163 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":219:5)
#loc164 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":169:9)
#loc165 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":169:13)
#loc166 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":170:9)
#loc167 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":170:28)
#loc168 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":171:9)
#loc169 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":171:32)
#loc170 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":172:9)
#loc171 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":172:41)
#loc172 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":173:9)
#loc173 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":208:17)
#loc174 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":174:9)
#loc175 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":207:9)
#loc176 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":183:36)
#loc177 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":183:45)
#loc178 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":183:58)
#loc179 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":183:29)
#loc180 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":183:13)
#loc181 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":183:69)
#loc182 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":184:13)
#loc183 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":187:13)
#loc184 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":184:17)
#loc185 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":184:34)
#loc186 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":185:13)
#loc187 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":186:17)
#loc188 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":188:20)
#loc189 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":188:21)
#loc190 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":188:30)
#loc191 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":188:33)
#loc192 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":188:47)
#loc193 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":188:13)
#loc194 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":188:48)
#loc195 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":189:34)
#loc196 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":189:13)
#loc197 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":190:49)
#loc198 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":190:39)
#loc199 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":190:13)
#loc200 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":190:59)
#loc201 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":191:38)
#loc202 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":191:32)
#loc203 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":191:13)
#loc204 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":191:46)
#loc205 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":192:13)
#loc206 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":195:13)
#loc207 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":192:25)
#loc208 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":192:58)
#loc209 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":192:59)
#loc210 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":192:68)
#loc211 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":192:82)
#loc212 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":192:17)
#loc213 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":192:88)
#loc214 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":193:13)
#loc215 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":194:17)
#loc216 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":198:31)
#loc217 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":198:46)
#loc218 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":198:59)
#loc219 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":198:77)
#loc220 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":198:80)
#loc221 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":198:26)
#loc222 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":198:13)
#loc223 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":198:81)
#loc224 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":199:13)
#loc225 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":202:13)
#loc226 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":199:17)
#loc227 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":199:31)
#loc228 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":199:44)
#loc229 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":199:47)
#loc230 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":199:61)
#loc231 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":200:13)
#loc232 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":201:17)
#loc233 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":204:39)
#loc234 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":204:25)
#loc235 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":204:13)
#loc236 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":206:25)
#loc237 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":206:20)
#loc238 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":206:13)
#loc239 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":206:36)
#loc240 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":208:16)
#loc241 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":209:9)
#loc242 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":212:9)
#loc243 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":209:13)
#loc244 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":209:30)
#loc245 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":210:9)
#loc246 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":211:26)
#loc247 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":211:13)
#loc248 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":220:17)
#loc249 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":220:5)
#loc250 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":123:1)
#loc251 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":131:1)
#loc254 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":124:1)
#loc255 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":125:5)
#loc256 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":130:5)
#loc257 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":128:9)
#loc258 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":128:22)
#loc259 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":127:13)
#loc260 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":127:9)
#loc261 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":129:22)
#loc262 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":129:9)
#loc263 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":133:1)
#loc264 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":141:1)
#loc265 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":135:5)
#loc266 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":135:9)
#loc267 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":137:12)
#loc268 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":137:5)
#loc269 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":139:12)
#loc270 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":139:5)
#loc271 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":140:17)
#loc272 = loc("CWE190_Integer_Overflow__int_connect_socket_postinc_41.c":140:5)
#loc273 = loc(fused[#loc1, #loc2])
#loc274 = loc(fused[#loc3, #loc4])
#loc275 = loc(fused[#loc6, #loc7])
#loc276 = loc(fused[#loc8, #loc9])
#loc277 = loc(fused[#loc10, #loc11])
#loc278 = loc(fused[#loc12, #loc13])
#loc279 = loc(fused[#loc14, #loc15])
#loc280 = loc(fused[#loc16, #loc17])
#loc281 = loc(fused[#loc18, #loc19])
#loc283 = loc(fused[#loc23, #loc24])
#loc284 = loc(fused[#loc25, #loc26])
#loc285 = loc(fused[#loc28, #loc27])
#loc286 = loc(fused[#loc31, #loc32])
#loc287 = loc(fused[#loc33, #loc34])
#loc288 = loc(fused[#loc36, #loc35])
#loc289 = loc(fused[#loc37, #loc38])
#loc290 = loc(fused[#loc39, #loc40])
#loc291 = loc(fused[#loc41, #loc42])
#loc292 = loc(fused[#loc43, #loc44])
#loc293 = loc(fused[#loc45, #loc46])
#loc294 = loc(fused[#loc47, #loc48])
#loc295 = loc(fused[#loc49, #loc50])
#loc296 = loc(fused[#loc55, #loc56])
#loc297 = loc(fused[#loc57, #loc58])
#loc298 = loc(fused[#loc59, #loc60])
#loc299 = loc(fused[#loc61, #loc58])
#loc300 = loc(fused[#loc63, #loc64])
#loc301 = loc(fused[#loc66, #loc67])
#loc302 = loc(fused[#loc68, #loc69])
#loc303 = loc(fused[#loc72, #loc70])
#loc304 = loc(fused[#loc76, #loc77])
#loc305 = loc(fused[#loc81, #loc82])
#loc306 = loc(fused[#loc83, #loc84])
#loc307 = loc(fused[#loc86, #loc87])
#loc308 = loc(fused[#loc88, #loc89])
#loc309 = loc(fused[#loc90, #loc91])
#loc310 = loc(fused[#loc92, #loc84])
#loc311 = loc(fused[#loc96, #loc97])
#loc312 = loc(fused[#loc100, #loc101])
#loc313 = loc(fused[#loc102, #loc103])
#loc314 = loc(fused[#loc104, #loc105])
#loc315 = loc(fused[#loc107, #loc108])
#loc316 = loc(fused[#loc109, #loc103])
#loc317 = loc(fused[#loc113, #loc111])
#loc318 = loc(fused[#loc116, #loc117])
#loc319 = loc(fused[#loc119, #loc120])
#loc320 = loc(fused[#loc121, #loc122])
#loc321 = loc(fused[#loc123, #loc120])
#loc322 = loc(fused[#loc128, #loc129])
#loc323 = loc(fused[#loc130, #loc131])
#loc324 = loc(fused[#loc132, #loc133])
#loc325 = loc(fused[#loc134, #loc135])
#loc326 = loc(fused[#loc137, #loc138])
#loc328 = loc(fused[#loc142, #loc143])
#loc329 = loc(fused[#loc144, #loc145])
#loc330 = loc(fused[#loc146, #loc147, #loc148, #loc143])
#loc331 = loc(fused[#loc149, #loc150])
#loc332 = loc(fused[#loc152, #loc151])
#loc333 = loc(fused[#loc156, #loc157])
#loc334 = loc(fused[#loc158, #loc159])
#loc335 = loc(fused[#loc161, #loc160])
#loc336 = loc(fused[#loc162, #loc163])
#loc337 = loc(fused[#loc164, #loc165])
#loc338 = loc(fused[#loc166, #loc167])
#loc339 = loc(fused[#loc168, #loc169])
#loc340 = loc(fused[#loc170, #loc171])
#loc341 = loc(fused[#loc172, #loc173])
#loc342 = loc(fused[#loc174, #loc175])
#loc343 = loc(fused[#loc180, #loc181])
#loc344 = loc(fused[#loc182, #loc183])
#loc345 = loc(fused[#loc184, #loc185])
#loc346 = loc(fused[#loc186, #loc183])
#loc347 = loc(fused[#loc188, #loc189])
#loc348 = loc(fused[#loc191, #loc192])
#loc349 = loc(fused[#loc193, #loc194])
#loc350 = loc(fused[#loc196, #loc195])
#loc351 = loc(fused[#loc199, #loc200])
#loc352 = loc(fused[#loc203, #loc204])
#loc353 = loc(fused[#loc205, #loc206])
#loc354 = loc(fused[#loc208, #loc209])
#loc355 = loc(fused[#loc210, #loc211])
#loc356 = loc(fused[#loc212, #loc213])
#loc357 = loc(fused[#loc214, #loc206])
#loc358 = loc(fused[#loc218, #loc219])
#loc359 = loc(fused[#loc222, #loc223])
#loc360 = loc(fused[#loc224, #loc225])
#loc361 = loc(fused[#loc226, #loc227])
#loc362 = loc(fused[#loc229, #loc230])
#loc363 = loc(fused[#loc231, #loc225])
#loc364 = loc(fused[#loc235, #loc233])
#loc365 = loc(fused[#loc238, #loc239])
#loc366 = loc(fused[#loc241, #loc242])
#loc367 = loc(fused[#loc243, #loc244])
#loc368 = loc(fused[#loc245, #loc242])
#loc369 = loc(fused[#loc250, #loc251])
#loc371 = loc(fused[#loc255, #loc256])
#loc372 = loc(fused[#loc257, #loc258])
#loc373 = loc(fused[#loc260, #loc259])
#loc374 = loc(fused[#loc263, #loc264])
#loc375 = loc(fused[#loc265, #loc266])
#loc376 = loc(fused[#loc268, #loc267])
#loc377 = loc(fused[#loc270, #loc269])
