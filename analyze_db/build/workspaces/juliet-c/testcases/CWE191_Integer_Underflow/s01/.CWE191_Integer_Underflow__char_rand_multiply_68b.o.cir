!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_rand_multiply_68b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.global "private" external @CWE191_Integer_Underflow__char_rand_multiply_68_badData : !s8i {alignment = 1 : i64} loc(#loc64)
  cir.func private @printHexCharLine(!s8i) loc(#loc65)
  cir.func no_proto @CWE191_Integer_Underflow__char_rand_multiply_68b_badSink() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc67)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc68)
    %2 = cir.get_global @CWE191_Integer_Underflow__char_rand_multiply_68_badData : !cir.ptr<!s8i> loc(#loc64)
    %3 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc10)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc68)
    cir.br ^bb1 loc(#loc69)
  ^bb1:  // pred: ^bb0
    %4 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc13)
    %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc13)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc14)
    %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc70)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc71)
  ^bb2:  // pred: ^bb1
    %8 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc16)
    %9 = cir.cast(integral, %8 : !s8i), !s32i loc(#loc16)
    %10 = cir.const #cir.int<2> : !s32i loc(#loc8)
    %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc16)
    %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc16)
    cir.store %12, %0 : !s8i, !cir.ptr<!s8i> loc(#loc67)
    %13 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc17)
    cir.call @printHexCharLine(%13) : (!s8i) -> () loc(#loc18)
    cir.br ^bb3 loc(#loc12)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc12)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc6)
  } loc(#loc66)
  cir.global "private" external @CWE191_Integer_Underflow__char_rand_multiply_68_goodG2BData : !s8i {alignment = 1 : i64} loc(#loc72)
  cir.func no_proto @CWE191_Integer_Underflow__char_rand_multiply_68b_goodG2BSink() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc74)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc75)
    %2 = cir.get_global @CWE191_Integer_Underflow__char_rand_multiply_68_goodG2BData : !cir.ptr<!s8i> loc(#loc72)
    %3 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc26)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc75)
    cir.br ^bb1 loc(#loc76)
  ^bb1:  // pred: ^bb0
    %4 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc29)
    %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc29)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc30)
    %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc77)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc78)
  ^bb2:  // pred: ^bb1
    %8 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc32)
    %9 = cir.cast(integral, %8 : !s8i), !s32i loc(#loc32)
    %10 = cir.const #cir.int<2> : !s32i loc(#loc24)
    %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc32)
    %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc32)
    cir.store %12, %0 : !s8i, !cir.ptr<!s8i> loc(#loc74)
    %13 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc33)
    cir.call @printHexCharLine(%13) : (!s8i) -> () loc(#loc34)
    cir.br ^bb3 loc(#loc28)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc28)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc22)
  } loc(#loc73)
  cir.global "private" external @CWE191_Integer_Underflow__char_rand_multiply_68_goodB2GData : !s8i {alignment = 1 : i64} loc(#loc79)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc80)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc39)
  cir.func no_proto @CWE191_Integer_Underflow__char_rand_multiply_68b_goodB2GSink() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc82)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc83)
    %2 = cir.get_global @CWE191_Integer_Underflow__char_rand_multiply_68_goodB2GData : !cir.ptr<!s8i> loc(#loc79)
    %3 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc45)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc83)
    cir.br ^bb1 loc(#loc84)
  ^bb1:  // pred: ^bb0
    %4 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc48)
    %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc48)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc49)
    %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc85)
    cir.brcond %7 ^bb2, ^bb8 loc(#loc86)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc87)
  ^bb3:  // pred: ^bb2
    %8 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc53)
    %9 = cir.cast(integral, %8 : !s8i), !s32i loc(#loc53)
    %10 = cir.const #cir.int<127> : !s32i loc(#loc54)
    %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc54)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc54)
    %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc54)
    %14 = cir.const #cir.int<2> : !s32i loc(#loc55)
    %15 = cir.binop(div, %13, %14) : !s32i loc(#loc88)
    %16 = cir.cmp(gt, %9, %15) : !s32i, !cir.bool loc(#loc89)
    cir.brcond %16 ^bb4, ^bb5 loc(#loc90)
  ^bb4:  // pred: ^bb3
    %17 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc60)
    %18 = cir.cast(integral, %17 : !s8i), !s32i loc(#loc60)
    %19 = cir.const #cir.int<2> : !s32i loc(#loc43)
    %20 = cir.binop(mul, %18, %19) nsw : !s32i loc(#loc60)
    %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc60)
    cir.store %21, %0 : !s8i, !cir.ptr<!s8i> loc(#loc82)
    %22 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc61)
    cir.call @printHexCharLine(%22) : (!s8i) -> () loc(#loc62)
    cir.br ^bb6 loc(#loc58)
  ^bb5:  // pred: ^bb3
    %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc39)
    %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    cir.br ^bb6 loc(#loc52)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc52)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc47)
  ^bb8:  // 2 preds: ^bb1, ^bb7
    cir.br ^bb9 loc(#loc47)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc41)
  } loc(#loc81)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_rand_multiply_68b.c":0:0)
#loc1 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":20:1)
#loc2 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":20:13)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc5 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":26:1)
#loc6 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":35:1)
#loc7 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":32:9)
#loc8 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":32:30)
#loc9 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":28:5)
#loc10 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":28:17)
#loc11 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":29:5)
#loc12 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":34:5)
#loc13 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":29:8)
#loc14 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":29:15)
#loc15 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":30:5)
#loc16 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":32:23)
#loc17 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":33:26)
#loc18 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":33:9)
#loc19 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":21:1)
#loc20 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":21:13)
#loc21 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":42:1)
#loc22 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":51:1)
#loc23 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":48:9)
#loc24 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":48:30)
#loc25 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":44:5)
#loc26 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":44:17)
#loc27 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":45:5)
#loc28 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":50:5)
#loc29 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":45:8)
#loc30 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":45:15)
#loc31 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":46:5)
#loc32 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":48:23)
#loc33 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":49:26)
#loc34 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":49:9)
#loc35 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":22:1)
#loc36 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":22:13)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc39 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":67:23)
#loc40 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":54:1)
#loc41 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":70:1)
#loc42 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":62:13)
#loc43 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":62:34)
#loc44 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":56:5)
#loc45 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":56:17)
#loc46 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":57:5)
#loc47 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":69:5)
#loc48 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":57:8)
#loc49 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":57:15)
#loc50 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":58:5)
#loc51 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":60:9)
#loc52 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":68:9)
#loc53 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":60:13)
#loc54 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":60:21)
#loc55 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":60:30)
#loc56 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":60:31)
#loc57 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":61:9)
#loc58 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":64:9)
#loc59 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":66:9)
#loc60 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":62:27)
#loc61 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":63:30)
#loc62 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":63:13)
#loc63 = loc("CWE191_Integer_Underflow__char_rand_multiply_68b.c":67:13)
#loc64 = loc(fused[#loc1, #loc2])
#loc65 = loc(fused[#loc3, #loc4])
#loc66 = loc(fused[#loc5, #loc6])
#loc67 = loc(fused[#loc7, #loc8])
#loc68 = loc(fused[#loc9, #loc10])
#loc69 = loc(fused[#loc11, #loc12])
#loc70 = loc(fused[#loc13, #loc14])
#loc71 = loc(fused[#loc15, #loc12])
#loc72 = loc(fused[#loc19, #loc20])
#loc73 = loc(fused[#loc21, #loc22])
#loc74 = loc(fused[#loc23, #loc24])
#loc75 = loc(fused[#loc25, #loc26])
#loc76 = loc(fused[#loc27, #loc28])
#loc77 = loc(fused[#loc29, #loc30])
#loc78 = loc(fused[#loc31, #loc28])
#loc79 = loc(fused[#loc35, #loc36])
#loc80 = loc(fused[#loc37, #loc38])
#loc81 = loc(fused[#loc40, #loc41])
#loc82 = loc(fused[#loc42, #loc43])
#loc83 = loc(fused[#loc44, #loc45])
#loc84 = loc(fused[#loc46, #loc47])
#loc85 = loc(fused[#loc48, #loc49])
#loc86 = loc(fused[#loc50, #loc47])
#loc87 = loc(fused[#loc51, #loc52])
#loc88 = loc(fused[#loc54, #loc55])
#loc89 = loc(fused[#loc53, #loc56])
#loc90 = loc(fused[#loc57, #loc58, #loc59, #loc52])
