!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":23:78)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":23:88)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":39:82)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":39:92)
#loc52 = loc(fused[#loc7, #loc8])
#loc59 = loc(fused[#loc29, #loc30])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printLongLongLine(!s64i) loc(#loc49)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc50)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d_badSink(%arg0: !cir.ptr<!s64i> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc52)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc9)
    cir.scope {
      %1 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc54)
      %2 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc54)
      cir.store %2, %1 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc54)
      %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc14)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc14)
      %5 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc15)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc15)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc16)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc16)
      %9 = cir.const #cir.int<8> : !u64i loc(#loc55)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc56)
      cir.libc.memmove %10 bytes from %6 to %4 : !cir.ptr<!void>, !u64i loc(#loc57)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc21)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc22)
      %13 = cir.ptr_stride(%11 : !cir.ptr<!s64i>, %12 : !s32i), !cir.ptr<!s64i> loc(#loc23)
      %14 = cir.load %13 : !cir.ptr<!s64i>, !s64i loc(#loc21)
      cir.call @printLongLongLine(%14) : (!s64i) -> () loc(#loc24)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc25)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc26)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc26)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc25)
    } loc(#loc53)
    cir.return loc(#loc6)
  } loc(#loc51)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d_goodG2BSink(%arg0: !cir.ptr<!s64i> loc(fused[#loc29, #loc30])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc59)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc31)
    cir.scope {
      %1 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc61)
      %2 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc61)
      cir.store %2, %1 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc61)
      %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc36)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc36)
      %5 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc37)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc37)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc38)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc38)
      %9 = cir.const #cir.int<8> : !u64i loc(#loc62)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc63)
      cir.libc.memmove %10 bytes from %6 to %4 : !cir.ptr<!void>, !u64i loc(#loc64)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc43)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc44)
      %13 = cir.ptr_stride(%11 : !cir.ptr<!s64i>, %12 : !s32i), !cir.ptr<!s64i> loc(#loc45)
      %14 = cir.load %13 : !cir.ptr<!s64i>, !s64i loc(#loc43)
      cir.call @printLongLongLine(%14) : (!s64i) -> () loc(#loc46)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc47)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc48)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc48)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc47)
    } loc(#loc60)
    cir.return loc(#loc28)
  } loc(#loc58)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":23:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":32:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":24:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":25:5)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":31:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":26:9)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":26:33)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":28:17)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":28:23)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":28:31)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":28:35)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":28:49)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":28:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":28:50)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":29:27)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":29:32)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":29:33)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":29:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":30:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":30:14)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":39:1)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":48:1)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":40:1)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":41:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":47:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":42:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":42:33)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":44:17)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":44:23)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":44:31)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":44:35)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":44:49)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":44:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":44:50)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":45:27)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":45:32)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":45:33)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":45:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":46:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c":46:14)
#loc49 = loc(fused[#loc1, #loc2])
#loc50 = loc(fused[#loc3, #loc4])
#loc51 = loc(fused[#loc5, #loc6])
#loc53 = loc(fused[#loc10, #loc11])
#loc54 = loc(fused[#loc12, #loc13])
#loc55 = loc(fused[#loc17, #loc18])
#loc56 = loc(fused[#loc16, #loc18])
#loc57 = loc(fused[#loc19, #loc20])
#loc58 = loc(fused[#loc27, #loc28])
#loc60 = loc(fused[#loc32, #loc33])
#loc61 = loc(fused[#loc34, #loc35])
#loc62 = loc(fused[#loc39, #loc40])
#loc63 = loc(fused[#loc38, #loc40])
#loc64 = loc(fused[#loc41, #loc42])
