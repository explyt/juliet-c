!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc79 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":241:10)
#loc80 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":241:14)
#loc81 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":241:20)
#loc82 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":241:32)
#loc296 = loc(fused[#loc79, #loc80])
#loc297 = loc(fused[#loc81, #loc82])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fgets_divide_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc271)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc272)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc273)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc274)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc10)
  cir.func private @printIntLine(!s32i) loc(#loc275)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fgets_divide_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc277)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc18)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc278)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc22)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc281)
            %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc281)
            cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc281)
            cir.scope {
              %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc30)
              %7 = cir.const #cir.int<3> : !s32i loc(#loc31)
              %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc31)
              %9 = cir.const #cir.int<4> : !u64i loc(#loc31)
              %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc31)
              %11 = cir.const #cir.int<2> : !s32i loc(#loc31)
              %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc31)
              %13 = cir.binop(add, %10, %12) : !u64i loc(#loc31)
              %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc31)
              %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc272)
              %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc32)
              %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc33)
              %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc34)
              %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc34)
              %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc283)
              cir.if %20 {
                %21 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc38)
                %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc39)
                cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc285)
              } else {
                %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
                %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
                cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc42)
              } loc(#loc284)
            } loc(#loc282)
          } loc(#loc280)
          cir.break loc(#loc43)
        } loc(#loc23)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc10)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc10)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc45)
          cir.break loc(#loc46)
        } loc(#loc44)
        cir.yield loc(#loc20)
      } loc(#loc20)
    } loc(#loc279)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc49)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.const #cir.int<100> : !s32i loc(#loc51)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc52)
          %6 = cir.binop(div, %4, %5) : !s32i loc(#loc287)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc53)
          cir.break loc(#loc54)
        } loc(#loc50)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc56)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc56)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc57)
          cir.break loc(#loc58)
        } loc(#loc55)
        cir.yield loc(#loc47)
      } loc(#loc47)
    } loc(#loc286)
    cir.return loc(#loc14)
  } loc(#loc276)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fgets_divide_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc289)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc61)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc290)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc63)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc291)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc65)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc292)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc67)
    cir.return loc(#loc60)
  } loc(#loc288)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc293)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc294)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc76)
  cir.func @main(%arg0: !s32i loc(fused[#loc79, #loc80]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc81, #loc82])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc296)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc297)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc78)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc83)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc84)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc85)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc85)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc86)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc73)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_fgets_divide_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc298)
    cir.call @CWE369_Divide_by_Zero__int_fgets_divide_15_good() : () -> () loc(#loc88)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc74)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc75)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_fgets_divide_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc299)
    cir.call @CWE369_Divide_by_Zero__int_fgets_divide_15_bad() : () -> () loc(#loc92)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc76)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc95)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc300)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc300)
    cir.return %17 : !s32i loc(#loc300)
  } loc(#loc295)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc97)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc302)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc102)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc103)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc303)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc107)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc306)
            %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc306)
            cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc306)
            cir.scope {
              %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc115)
              %7 = cir.const #cir.int<3> : !s32i loc(#loc116)
              %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc116)
              %9 = cir.const #cir.int<4> : !u64i loc(#loc116)
              %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc116)
              %11 = cir.const #cir.int<2> : !s32i loc(#loc116)
              %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc116)
              %13 = cir.binop(add, %10, %12) : !u64i loc(#loc116)
              %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc116)
              %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc272)
              %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc117)
              %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc118)
              %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc119)
              %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc119)
              %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc308)
              cir.if %20 {
                %21 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc123)
                %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc124)
                cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc310)
              } else {
                %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc127)
                %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc127)
                cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc128)
              } loc(#loc309)
            } loc(#loc307)
          } loc(#loc305)
          cir.break loc(#loc129)
        } loc(#loc108)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc131)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc131)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc132)
          cir.break loc(#loc133)
        } loc(#loc130)
        cir.yield loc(#loc105)
      } loc(#loc105)
    } loc(#loc304)
    cir.scope {
      %3 = cir.const #cir.int<8> : !s32i loc(#loc136)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc138)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc138)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc139)
          cir.break loc(#loc140)
        } loc(#loc137)
        cir.case(default, []) {
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc144)
            %5 = cir.const #cir.int<0> : !s32i loc(#loc145)
            %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc313)
            cir.if %6 {
              %7 = cir.const #cir.int<100> : !s32i loc(#loc149)
              %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc150)
              %9 = cir.binop(div, %7, %8) : !s32i loc(#loc315)
              cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc151)
            } else {
              %7 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc97)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc97)
              cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc152)
            } loc(#loc314)
          } loc(#loc312)
          cir.break loc(#loc153)
        } loc(#loc141)
        cir.yield loc(#loc134)
      } loc(#loc134)
    } loc(#loc311)
    cir.return loc(#loc99)
  } loc(#loc301)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc317)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc158)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc159)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc318)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc163)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc321)
            %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc321)
            cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc321)
            cir.scope {
              %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc171)
              %7 = cir.const #cir.int<3> : !s32i loc(#loc172)
              %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc172)
              %9 = cir.const #cir.int<4> : !u64i loc(#loc172)
              %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc172)
              %11 = cir.const #cir.int<2> : !s32i loc(#loc172)
              %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc172)
              %13 = cir.binop(add, %10, %12) : !u64i loc(#loc172)
              %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc172)
              %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc272)
              %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc173)
              %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc174)
              %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc175)
              %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc175)
              %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc323)
              cir.if %20 {
                %21 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc179)
                %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc180)
                cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc325)
              } else {
                %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc183)
                %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc183)
                cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc184)
              } loc(#loc324)
            } loc(#loc322)
          } loc(#loc320)
          cir.break loc(#loc185)
        } loc(#loc164)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc187)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc187)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc188)
          cir.break loc(#loc189)
        } loc(#loc186)
        cir.yield loc(#loc161)
      } loc(#loc161)
    } loc(#loc319)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc192)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc196)
            %5 = cir.const #cir.int<0> : !s32i loc(#loc197)
            %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc328)
            cir.if %6 {
              %7 = cir.const #cir.int<100> : !s32i loc(#loc201)
              %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc202)
              %9 = cir.binop(div, %7, %8) : !s32i loc(#loc330)
              cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc203)
            } else {
              %7 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc204)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc204)
              cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc205)
            } loc(#loc329)
          } loc(#loc327)
          cir.break loc(#loc206)
        } loc(#loc193)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc208)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc208)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc209)
          cir.break loc(#loc210)
        } loc(#loc207)
        cir.yield loc(#loc190)
      } loc(#loc190)
    } loc(#loc326)
    cir.return loc(#loc155)
  } loc(#loc316)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc332)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc215)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc216)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc333)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc220)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc222)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc222)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc223)
          cir.break loc(#loc224)
        } loc(#loc221)
        cir.case(default, []) {
          %4 = cir.const #cir.int<7> : !s32i loc(#loc226)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc335)
          cir.break loc(#loc228)
        } loc(#loc225)
        cir.yield loc(#loc218)
      } loc(#loc218)
    } loc(#loc334)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc231)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.const #cir.int<100> : !s32i loc(#loc233)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc234)
          %6 = cir.binop(div, %4, %5) : !s32i loc(#loc337)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc235)
          cir.break loc(#loc236)
        } loc(#loc232)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc238)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc238)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc239)
          cir.break loc(#loc240)
        } loc(#loc237)
        cir.yield loc(#loc229)
      } loc(#loc229)
    } loc(#loc336)
    cir.return loc(#loc212)
  } loc(#loc331)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc339)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc245)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc246)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc340)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc250)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<7> : !s32i loc(#loc252)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc342)
          cir.break loc(#loc254)
        } loc(#loc251)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc256)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc256)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc257)
          cir.break loc(#loc258)
        } loc(#loc255)
        cir.yield loc(#loc248)
      } loc(#loc248)
    } loc(#loc341)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc261)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.const #cir.int<100> : !s32i loc(#loc263)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc264)
          %6 = cir.binop(div, %4, %5) : !s32i loc(#loc344)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc265)
          cir.break loc(#loc266)
        } loc(#loc262)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc268)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc268)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc269)
          cir.break loc(#loc270)
        } loc(#loc267)
        cir.yield loc(#loc259)
      } loc(#loc259)
    } loc(#loc343)
    cir.return loc(#loc242)
  } loc(#loc338)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fgets_divide_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":42:23)
#loc10 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":48:19)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc13 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":24:1)
#loc14 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":62:1)
#loc15 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":26:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":26:9)
#loc17 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":28:13)
#loc18 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":28:12)
#loc19 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":28:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":29:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":50:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":29:12)
#loc23 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":31:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":32:5)
#loc25 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":44:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":33:9)
#loc27 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":33:45)
#loc28 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":35:9)
#loc29 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":43:9)
#loc30 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":35:19)
#loc31 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":35:32)
#loc32 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":35:49)
#loc33 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":35:13)
#loc34 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":35:59)
#loc35 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":36:9)
#loc36 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":39:9)
#loc37 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":41:9)
#loc38 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":38:25)
#loc39 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":38:20)
#loc40 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":38:13)
#loc41 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":38:36)
#loc42 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":42:13)
#loc43 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":45:5)
#loc44 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":46:5)
#loc45 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":48:9)
#loc46 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":49:9)
#loc47 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":51:5)
#loc48 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":61:5)
#loc49 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":51:12)
#loc50 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":53:5)
#loc51 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":55:22)
#loc52 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":55:28)
#loc53 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":55:9)
#loc54 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":56:9)
#loc55 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":57:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":59:19)
#loc57 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":59:9)
#loc58 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":60:9)
#loc59 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":224:1)
#loc60 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":230:1)
#loc61 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":226:5)
#loc62 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":226:14)
#loc63 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":227:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":227:14)
#loc65 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":228:5)
#loc66 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":228:14)
#loc67 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":229:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":229:14)
#loc69 = loc("/usr/include/stdlib.h":575:1)
#loc70 = loc("/usr/include/stdlib.h":575:41)
#loc71 = loc("/usr/include/time.h":76:1)
#loc72 = loc("/usr/include/time.h":76:38)
#loc73 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":246:15)
#loc74 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":248:15)
#loc75 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":251:15)
#loc76 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":253:15)
#loc77 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":241:1)
#loc78 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":256:1)
#loc83 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":242:1)
#loc84 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":244:27)
#loc85 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":244:22)
#loc86 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":244:5)
#loc87 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":246:5)
#loc88 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":247:5)
#loc89 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":247:53)
#loc90 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":248:5)
#loc91 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":251:5)
#loc92 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":252:5)
#loc93 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":252:52)
#loc94 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":253:5)
#loc95 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":255:12)
#loc96 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":255:5)
#loc97 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":110:23)
#loc98 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":69:1)
#loc99 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":114:1)
#loc100 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":71:5)
#loc101 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":71:9)
#loc102 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":73:13)
#loc103 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":73:12)
#loc104 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":73:5)
#loc105 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":74:5)
#loc106 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":95:5)
#loc107 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":74:12)
#loc108 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":76:5)
#loc109 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":77:5)
#loc110 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":89:5)
#loc111 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":78:9)
#loc112 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":78:45)
#loc113 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":80:9)
#loc114 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":88:9)
#loc115 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":80:19)
#loc116 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":80:32)
#loc117 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":80:49)
#loc118 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":80:13)
#loc119 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":80:59)
#loc120 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":81:9)
#loc121 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":84:9)
#loc122 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":86:9)
#loc123 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":83:25)
#loc124 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":83:20)
#loc125 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":83:13)
#loc126 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":83:36)
#loc127 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":87:23)
#loc128 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":87:13)
#loc129 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":90:5)
#loc130 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":91:5)
#loc131 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":93:19)
#loc132 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":93:9)
#loc133 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":94:9)
#loc134 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":96:5)
#loc135 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":113:5)
#loc136 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":96:12)
#loc137 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":98:5)
#loc138 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":100:19)
#loc139 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":100:9)
#loc140 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":101:9)
#loc141 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":102:5)
#loc142 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":104:9)
#loc143 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":111:9)
#loc144 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":104:13)
#loc145 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":104:21)
#loc146 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":105:9)
#loc147 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":107:9)
#loc148 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":109:9)
#loc149 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":106:26)
#loc150 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":106:32)
#loc151 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":106:13)
#loc152 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":110:13)
#loc153 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":112:9)
#loc154 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":117:1)
#loc155 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":162:1)
#loc156 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":119:5)
#loc157 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":119:9)
#loc158 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":121:13)
#loc159 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":121:12)
#loc160 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":121:5)
#loc161 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":122:5)
#loc162 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":143:5)
#loc163 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":122:12)
#loc164 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":124:5)
#loc165 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":125:5)
#loc166 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":137:5)
#loc167 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":126:9)
#loc168 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":126:45)
#loc169 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":128:9)
#loc170 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":136:9)
#loc171 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":128:19)
#loc172 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":128:32)
#loc173 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":128:49)
#loc174 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":128:13)
#loc175 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":128:59)
#loc176 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":129:9)
#loc177 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":132:9)
#loc178 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":134:9)
#loc179 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":131:25)
#loc180 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":131:20)
#loc181 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":131:13)
#loc182 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":131:36)
#loc183 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":135:23)
#loc184 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":135:13)
#loc185 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":138:5)
#loc186 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":139:5)
#loc187 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":141:19)
#loc188 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":141:9)
#loc189 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":142:9)
#loc190 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":144:5)
#loc191 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":161:5)
#loc192 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":144:12)
#loc193 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":146:5)
#loc194 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":148:9)
#loc195 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":155:9)
#loc196 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":148:13)
#loc197 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":148:21)
#loc198 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":149:9)
#loc199 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":151:9)
#loc200 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":153:9)
#loc201 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":150:26)
#loc202 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":150:32)
#loc203 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":150:13)
#loc204 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":154:23)
#loc205 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":154:13)
#loc206 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":156:9)
#loc207 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":157:5)
#loc208 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":159:19)
#loc209 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":159:9)
#loc210 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":160:9)
#loc211 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":165:1)
#loc212 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":192:1)
#loc213 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":167:5)
#loc214 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":167:9)
#loc215 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":169:13)
#loc216 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":169:12)
#loc217 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":169:5)
#loc218 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":170:5)
#loc219 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":180:5)
#loc220 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":170:12)
#loc221 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":172:5)
#loc222 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":174:19)
#loc223 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":174:9)
#loc224 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":175:9)
#loc225 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":176:5)
#loc226 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":178:16)
#loc227 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":178:9)
#loc228 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":179:9)
#loc229 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":181:5)
#loc230 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":191:5)
#loc231 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":181:12)
#loc232 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":183:5)
#loc233 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":185:22)
#loc234 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":185:28)
#loc235 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":185:9)
#loc236 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":186:9)
#loc237 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":187:5)
#loc238 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":189:19)
#loc239 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":189:9)
#loc240 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":190:9)
#loc241 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":195:1)
#loc242 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":222:1)
#loc243 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":197:5)
#loc244 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":197:9)
#loc245 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":199:13)
#loc246 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":199:12)
#loc247 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":199:5)
#loc248 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":200:5)
#loc249 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":210:5)
#loc250 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":200:12)
#loc251 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":202:5)
#loc252 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":204:16)
#loc253 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":204:9)
#loc254 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":205:9)
#loc255 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":206:5)
#loc256 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":208:19)
#loc257 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":208:9)
#loc258 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":209:9)
#loc259 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":211:5)
#loc260 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":221:5)
#loc261 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":211:12)
#loc262 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":213:5)
#loc263 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":215:22)
#loc264 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":215:28)
#loc265 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":215:9)
#loc266 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":216:9)
#loc267 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":217:5)
#loc268 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":219:19)
#loc269 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":219:9)
#loc270 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":220:9)
#loc271 = loc(fused[#loc1, #loc2])
#loc272 = loc(fused[#loc3, #loc4])
#loc273 = loc(fused[#loc5, #loc6])
#loc274 = loc(fused[#loc7, #loc8])
#loc275 = loc(fused[#loc11, #loc12])
#loc276 = loc(fused[#loc13, #loc14])
#loc277 = loc(fused[#loc15, #loc16])
#loc278 = loc(fused[#loc19, #loc17])
#loc279 = loc(fused[#loc20, #loc21])
#loc280 = loc(fused[#loc24, #loc25])
#loc281 = loc(fused[#loc26, #loc27])
#loc282 = loc(fused[#loc28, #loc29])
#loc283 = loc(fused[#loc33, #loc34])
#loc284 = loc(fused[#loc35, #loc36, #loc37, #loc29])
#loc285 = loc(fused[#loc40, #loc41])
#loc286 = loc(fused[#loc47, #loc48])
#loc287 = loc(fused[#loc51, #loc52])
#loc288 = loc(fused[#loc59, #loc60])
#loc289 = loc(fused[#loc61, #loc62])
#loc290 = loc(fused[#loc63, #loc64])
#loc291 = loc(fused[#loc65, #loc66])
#loc292 = loc(fused[#loc67, #loc68])
#loc293 = loc(fused[#loc69, #loc70])
#loc294 = loc(fused[#loc71, #loc72])
#loc295 = loc(fused[#loc77, #loc78])
#loc298 = loc(fused[#loc88, #loc89])
#loc299 = loc(fused[#loc92, #loc93])
#loc300 = loc(fused[#loc96, #loc95])
#loc301 = loc(fused[#loc98, #loc99])
#loc302 = loc(fused[#loc100, #loc101])
#loc303 = loc(fused[#loc104, #loc102])
#loc304 = loc(fused[#loc105, #loc106])
#loc305 = loc(fused[#loc109, #loc110])
#loc306 = loc(fused[#loc111, #loc112])
#loc307 = loc(fused[#loc113, #loc114])
#loc308 = loc(fused[#loc118, #loc119])
#loc309 = loc(fused[#loc120, #loc121, #loc122, #loc114])
#loc310 = loc(fused[#loc125, #loc126])
#loc311 = loc(fused[#loc134, #loc135])
#loc312 = loc(fused[#loc142, #loc143])
#loc313 = loc(fused[#loc144, #loc145])
#loc314 = loc(fused[#loc146, #loc147, #loc148, #loc143])
#loc315 = loc(fused[#loc149, #loc150])
#loc316 = loc(fused[#loc154, #loc155])
#loc317 = loc(fused[#loc156, #loc157])
#loc318 = loc(fused[#loc160, #loc158])
#loc319 = loc(fused[#loc161, #loc162])
#loc320 = loc(fused[#loc165, #loc166])
#loc321 = loc(fused[#loc167, #loc168])
#loc322 = loc(fused[#loc169, #loc170])
#loc323 = loc(fused[#loc174, #loc175])
#loc324 = loc(fused[#loc176, #loc177, #loc178, #loc170])
#loc325 = loc(fused[#loc181, #loc182])
#loc326 = loc(fused[#loc190, #loc191])
#loc327 = loc(fused[#loc194, #loc195])
#loc328 = loc(fused[#loc196, #loc197])
#loc329 = loc(fused[#loc198, #loc199, #loc200, #loc195])
#loc330 = loc(fused[#loc201, #loc202])
#loc331 = loc(fused[#loc211, #loc212])
#loc332 = loc(fused[#loc213, #loc214])
#loc333 = loc(fused[#loc217, #loc215])
#loc334 = loc(fused[#loc218, #loc219])
#loc335 = loc(fused[#loc227, #loc226])
#loc336 = loc(fused[#loc229, #loc230])
#loc337 = loc(fused[#loc233, #loc234])
#loc338 = loc(fused[#loc241, #loc242])
#loc339 = loc(fused[#loc243, #loc244])
#loc340 = loc(fused[#loc247, #loc245])
#loc341 = loc(fused[#loc248, #loc249])
#loc342 = loc(fused[#loc253, #loc252])
#loc343 = loc(fused[#loc259, #loc260])
#loc344 = loc(fused[#loc263, #loc264])
