!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":30:12)
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc96)
  cir.func private @_Znam(!u64i) -> !cir.ptr<!void> loc(#loc97)
  cir.func private @printIntLine(!s32i) loc(#loc98)
  cir.func @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_013badEv() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc100)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc101)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc102)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc103)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc17)
    cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc104)
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc19)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %9 ^bb1, ^bb2 loc(#loc19)
  ^bb1:  // pred: ^bb0
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc19)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc19)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc19)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc19)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc19)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc19)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc19)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc19)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc19)
    cir.br ^bb3(%21 : !u32i) loc(#loc19)
  ^bb2:  // pred: ^bb0
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc19)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc19)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc19)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc19)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc19)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc19)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc19)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc19)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc19)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc19)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc19)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc19)
    cir.br ^bb3(%37 : !u32i) loc(#loc19)
  ^bb3(%38: !u32i loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":30:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // pred: ^bb3
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc19)
    cir.store %39, %3 : !s32i, !cir.ptr<!s32i> loc(#loc105)
    cir.br ^bb5 loc(#loc106)
  ^bb5:  // pred: ^bb4
    %40 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc23)
    %42 = cir.const #cir.int<4> : !u64i loc(#loc107)
    %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc108)
    cir.store %43, %0 : !u64i, !cir.ptr<!u64i> loc(#loc109)
    %44 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc27)
    %45 = cir.call @_Znam(%44) : (!u64i) -> !cir.ptr<!void> loc(#loc28)
    %46 = cir.cast(bitcast, %45 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc110)
    %47 = cir.cast(bitcast, %46 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc110)
    cir.store %47, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc111)
    cir.br ^bb6 loc(#loc112)
  ^bb6:  // pred: ^bb5
    %48 = cir.const #cir.int<0> : !s32i loc(#loc34)
    %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc34)
    cir.store %49, %1 : !u64i, !cir.ptr<!u64i> loc(#loc113)
    cir.br ^bb7 loc(#loc112)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %50 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc36)
    %51 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc37)
    %52 = cir.cast(integral, %51 : !s32i), !u64i loc(#loc37)
    %53 = cir.cmp(lt, %50, %52) : !u64i, !cir.bool loc(#loc114)
    cir.brcond %53 ^bb8, ^bb12 loc(#loc114)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc115)
  ^bb9:  // pred: ^bb8
    %54 = cir.const #cir.int<0> : !s32i loc(#loc39)
    %55 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc40)
    %56 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc41)
    %57 = cir.ptr_stride(%55 : !cir.ptr<!s32i>, %56 : !u64i), !cir.ptr<!s32i> loc(#loc42)
    cir.store %54, %57 : !s32i, !cir.ptr<!s32i> loc(#loc116)
    cir.br ^bb10 loc(#loc33)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc33)
  ^bb11:  // pred: ^bb10
    %58 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc43)
    %59 = cir.unary(inc, %58) : !u64i, !u64i loc(#loc44)
    cir.store %59, %1 : !u64i, !cir.ptr<!u64i> loc(#loc117)
    cir.br ^bb7 loc(#loc112)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc33)
  ^bb13:  // pred: ^bb12
    %60 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc45)
    %61 = cir.const #cir.int<0> : !s32i loc(#loc46)
    %62 = cir.ptr_stride(%60 : !cir.ptr<!s32i>, %61 : !s32i), !cir.ptr<!s32i> loc(#loc47)
    %63 = cir.load %62 : !cir.ptr<!s32i>, !s32i loc(#loc45)
    cir.call @printIntLine(%63) : (!s32i) -> () loc(#loc48)
    %64 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
    cir.delete.array %64 : <!s32i> loc(#loc49)
    cir.br ^bb14 loc(#loc22)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc8)
  } loc(#loc99)
  cir.func internal private @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc119)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc120)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc121)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc122)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc59)
    %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc60)
    cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc123)
    %6 = cir.const #cir.int<20> : !s32i loc(#loc62)
    cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc124)
    cir.br ^bb1 loc(#loc125)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc66)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc126)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc127)
    cir.store %10, %0 : !u64i, !cir.ptr<!u64i> loc(#loc128)
    %11 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc70)
    %12 = cir.call @_Znam(%11) : (!u64i) -> !cir.ptr<!void> loc(#loc71)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc129)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc129)
    cir.store %14, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc130)
    cir.br ^bb2 loc(#loc131)
  ^bb2:  // pred: ^bb1
    %15 = cir.const #cir.int<0> : !s32i loc(#loc77)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc77)
    cir.store %16, %1 : !u64i, !cir.ptr<!u64i> loc(#loc132)
    cir.br ^bb3 loc(#loc131)
  ^bb3:  // 2 preds: ^bb2, ^bb7
    %17 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc79)
    %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc80)
    %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc80)
    %20 = cir.cmp(lt, %17, %19) : !u64i, !cir.bool loc(#loc133)
    cir.brcond %20 ^bb4, ^bb8 loc(#loc133)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc134)
  ^bb5:  // pred: ^bb4
    %21 = cir.const #cir.int<0> : !s32i loc(#loc82)
    %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc83)
    %23 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc84)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc85)
    cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc135)
    cir.br ^bb6 loc(#loc76)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc76)
  ^bb7:  // pred: ^bb6
    %25 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc86)
    %26 = cir.unary(inc, %25) : !u64i, !u64i loc(#loc87)
    cir.store %26, %1 : !u64i, !cir.ptr<!u64i> loc(#loc136)
    cir.br ^bb3 loc(#loc131)
  ^bb8:  // pred: ^bb3
    cir.br ^bb9 loc(#loc76)
  ^bb9:  // pred: ^bb8
    %27 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc88)
    %28 = cir.const #cir.int<0> : !s32i loc(#loc89)
    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc90)
    %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc88)
    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc91)
    %31 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc92)
    cir.delete.array %31 : <!s32i> loc(#loc92)
    cir.br ^bb10 loc(#loc65)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc51)
  } loc(#loc118)
  cir.func @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_014goodEv() extra(#fn_attr1) {
    cir.call @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01L7goodG2BEv() : () -> () loc(#loc95)
    cir.return loc(#loc94)
  } loc(#loc137)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":128:20)
#loc4 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":129:41)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":24:1)
#loc8 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":44:1)
#loc9 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":32:9)
#loc10 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":32:16)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":32:26)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":33:9)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":33:14)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":26:5)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":26:9)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":28:13)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":28:12)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":28:5)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":30:5)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":31:5)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":43:5)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":35:21)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":35:28)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":35:38)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":35:9)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":36:37)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":24:6)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":36:28)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":36:46)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":36:9)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":37:9)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":40:9)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":37:18)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":37:14)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":37:21)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":37:33)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":38:9)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":39:29)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":39:13)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":39:24)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":39:25)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":37:40)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":37:39)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":41:22)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":41:33)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":41:34)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":41:9)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":42:19)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":51:1)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":71:1)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":59:9)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":59:16)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":59:26)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":60:9)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":60:14)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":53:5)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":53:9)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":55:13)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":55:12)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":55:5)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":57:12)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":57:5)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":58:5)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":70:5)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":62:21)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":62:28)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":62:38)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":62:9)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":63:37)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":51:13)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":63:28)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":63:46)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":63:9)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":64:9)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":67:9)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":64:18)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":64:14)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":64:21)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":64:33)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":65:9)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":66:29)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":66:13)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":66:24)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":66:25)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":64:40)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":64:39)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":68:22)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":68:33)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":68:34)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":68:9)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":69:19)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":73:1)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":76:1)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":75:5)
#loc96 = loc(fused[#loc1, #loc2])
#loc97 = loc(fused[#loc3, #loc4])
#loc98 = loc(fused[#loc5, #loc6])
#loc99 = loc(fused[#loc7, #loc8])
#loc100 = loc(fused[#loc9, #loc10])
#loc101 = loc(fused[#loc9, #loc11])
#loc102 = loc(fused[#loc12, #loc13])
#loc103 = loc(fused[#loc14, #loc15])
#loc104 = loc(fused[#loc18, #loc16])
#loc105 = loc(fused[#loc20, #loc19])
#loc106 = loc(fused[#loc21, #loc22])
#loc107 = loc(fused[#loc24, #loc25])
#loc108 = loc(fused[#loc23, #loc25])
#loc109 = loc(fused[#loc26, #loc25])
#loc110 = loc(fused[#loc29, #loc30])
#loc111 = loc(fused[#loc31, #loc30])
#loc112 = loc(fused[#loc32, #loc33])
#loc113 = loc(fused[#loc35, #loc34])
#loc114 = loc(fused[#loc36, #loc37])
#loc115 = loc(fused[#loc38, #loc33])
#loc116 = loc(fused[#loc40, #loc39])
#loc117 = loc(fused[#loc44, #loc43])
#loc118 = loc(fused[#loc50, #loc51])
#loc119 = loc(fused[#loc52, #loc53])
#loc120 = loc(fused[#loc52, #loc54])
#loc121 = loc(fused[#loc55, #loc56])
#loc122 = loc(fused[#loc57, #loc58])
#loc123 = loc(fused[#loc61, #loc59])
#loc124 = loc(fused[#loc63, #loc62])
#loc125 = loc(fused[#loc64, #loc65])
#loc126 = loc(fused[#loc67, #loc68])
#loc127 = loc(fused[#loc66, #loc68])
#loc128 = loc(fused[#loc69, #loc68])
#loc129 = loc(fused[#loc72, #loc73])
#loc130 = loc(fused[#loc74, #loc73])
#loc131 = loc(fused[#loc75, #loc76])
#loc132 = loc(fused[#loc78, #loc77])
#loc133 = loc(fused[#loc79, #loc80])
#loc134 = loc(fused[#loc81, #loc76])
#loc135 = loc(fused[#loc83, #loc82])
#loc136 = loc(fused[#loc87, #loc86])
#loc137 = loc(fused[#loc93, #loc94])
