!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc196)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc197)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc198)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc199)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc201)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc202)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc17)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc18)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc204)
      cir.if %4 {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc20)
        %6 = cir.const #cir.int<50> : !s32i loc(#loc21)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc21)
        %8 = cir.const #cir.int<1> : !u64i loc(#loc206)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc207)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc20)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc208)
        cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc209)
        cir.scope {
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
          %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc29)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc29)
          %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc211)
          cir.if %20 {
            %21 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc31)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc32)
            %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc33)
            cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc31)
          } loc(#loc212)
        } loc(#loc210)
        %12 = cir.const #cir.int<0> : !s32i loc(#loc34)
        %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc34)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc35)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc36)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc37)
        cir.store %13, %16 : !s8i, !cir.ptr<!s8i> loc(#loc213)
      } loc(#loc205)
    } loc(#loc203)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc215)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc42)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc42)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc43)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc44)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc45)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc44)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc44)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc216)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc48)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc48)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc49)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc50)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc49)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc51)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc51)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc217)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc52)
      %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc53)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc53)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc54)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc54)
      %23 = cir.const #cir.int<1> : !u64i loc(#loc218)
      %24 = cir.binop(mul, %22, %23) : !u64i loc(#loc219)
      cir.libc.memmove %24 bytes from %20 to %18 : !cir.ptr<!void>, !u64i loc(#loc220)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc59)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc59)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc61)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc62)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc61)
      %31 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc63)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc221)
      %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
      cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc65)
      %33 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc66)
      %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc67)
      %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc67)
      cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc66)
    } loc(#loc214)
    cir.return loc(#loc10)
  } loc(#loc200)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc223)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc70)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc224)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc72)
    cir.return loc(#loc69)
  } loc(#loc222)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc74)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc226)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc79)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc227)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc83)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc84)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !cir.bool loc(#loc229)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc74)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc74)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc88)
      } else {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc89)
        %6 = cir.const #cir.int<100> : !s32i loc(#loc90)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc90)
        %8 = cir.const #cir.int<1> : !u64i loc(#loc231)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc232)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc89)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc233)
        cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc234)
        cir.scope {
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc97)
          %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc98)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc98)
          %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc236)
          cir.if %20 {
            %21 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc100)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc101)
            %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc102)
            cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc100)
          } loc(#loc237)
        } loc(#loc235)
        %12 = cir.const #cir.int<0> : !s32i loc(#loc103)
        %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc103)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc104)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc105)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc106)
        cir.store %13, %16 : !s8i, !cir.ptr<!s8i> loc(#loc238)
      } loc(#loc230)
    } loc(#loc228)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc240)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc111)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc111)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc112)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc113)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc114)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc113)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc113)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc241)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc117)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc117)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc118)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc119)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc118)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc120)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc120)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc242)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc121)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc121)
      %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc122)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc122)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc123)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc123)
      %23 = cir.const #cir.int<1> : !u64i loc(#loc243)
      %24 = cir.binop(mul, %22, %23) : !u64i loc(#loc244)
      cir.libc.memmove %24 bytes from %20 to %18 : !cir.ptr<!void>, !u64i loc(#loc245)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc128)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc128)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc130)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc131)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc130)
      %31 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc132)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc246)
      %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc133)
      cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc134)
      %33 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc135)
      %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc136)
      %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc136)
      cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc135)
    } loc(#loc239)
    cir.return loc(#loc76)
  } loc(#loc225)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc248)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc141)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc249)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc145)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc146)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc251)
      cir.if %4 {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc148)
        %6 = cir.const #cir.int<100> : !s32i loc(#loc149)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc149)
        %8 = cir.const #cir.int<1> : !u64i loc(#loc253)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc254)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc148)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc255)
        cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc256)
        cir.scope {
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc156)
          %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc157)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc157)
          %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc258)
          cir.if %20 {
            %21 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc159)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc160)
            %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc161)
            cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc159)
          } loc(#loc259)
        } loc(#loc257)
        %12 = cir.const #cir.int<0> : !s32i loc(#loc162)
        %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc162)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc163)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc164)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc165)
        cir.store %13, %16 : !s8i, !cir.ptr<!s8i> loc(#loc260)
      } loc(#loc252)
    } loc(#loc250)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc262)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc170)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc170)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc171)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc172)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc173)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc172)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc172)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc263)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc176)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc176)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc177)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc178)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc177)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc179)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc179)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc264)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc180)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc180)
      %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc181)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc181)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc182)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc182)
      %23 = cir.const #cir.int<1> : !u64i loc(#loc265)
      %24 = cir.binop(mul, %22, %23) : !u64i loc(#loc266)
      cir.libc.memmove %24 bytes from %20 to %18 : !cir.ptr<!void>, !u64i loc(#loc267)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc187)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc187)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc188)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc189)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc190)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc189)
      %31 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc191)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc268)
      %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc192)
      cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc193)
      %33 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc194)
      %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc195)
      %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc195)
      cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc194)
    } loc(#loc261)
    cir.return loc(#loc138)
  } loc(#loc247)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":27:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":48:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":29:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":29:12)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":30:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":30:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":31:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":37:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":31:8)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":31:27)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":32:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":34:24)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":34:31)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":34:34)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":34:45)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":34:46)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":34:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":35:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":35:37)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":35:13)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":35:21)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":35:27)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":35:28)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":35:34)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":35:33)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":36:19)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":36:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":36:14)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":36:15)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":38:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":47:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":39:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":39:24)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":40:16)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":40:24)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":40:29)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":40:33)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":40:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":40:34)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":41:25)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":41:16)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":41:20)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":41:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":43:17)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":43:23)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":43:31)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":43:35)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":43:46)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":43:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":43:47)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":44:23)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":44:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":44:14)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":44:18)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":44:19)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":45:19)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":45:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":46:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":46:14)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":107:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":111:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":109:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":109:14)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":110:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":110:14)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":62:19)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":55:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":81:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":57:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":57:12)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":58:12)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":58:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":59:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":70:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":59:8)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":59:27)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":60:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":63:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":65:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":62:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":67:24)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":67:31)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":67:35)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":67:46)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":67:47)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":67:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":68:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":68:37)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":68:13)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":68:21)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":68:27)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":68:28)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":68:34)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":68:33)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":69:19)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":69:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":69:14)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":69:15)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":71:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":80:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":72:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":72:24)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":73:16)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":73:24)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":73:29)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":73:33)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":73:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":73:34)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":74:25)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":74:16)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":74:20)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":74:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":76:17)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":76:23)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":76:31)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":76:35)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":76:46)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":76:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":76:47)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":77:23)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":77:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":77:14)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":77:18)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":77:19)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":78:19)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":78:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":79:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":79:14)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":84:1)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":105:1)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":86:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":86:12)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":87:12)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":87:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":88:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":94:5)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":88:8)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":88:27)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":89:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":91:24)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":91:31)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":91:35)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":91:46)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":91:47)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":91:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":92:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":92:37)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":92:13)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":92:21)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":92:27)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":92:28)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":92:34)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":92:33)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":93:19)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":93:9)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":93:14)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":93:15)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":95:5)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":104:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":96:9)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":96:24)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":97:16)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":97:24)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":97:29)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":97:33)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":97:9)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":97:34)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":98:25)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":98:16)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":98:20)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":98:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":100:17)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":100:23)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":100:31)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":100:35)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":100:46)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":100:9)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":100:47)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":101:23)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":101:9)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":101:14)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":101:18)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":101:19)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":102:19)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":102:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":103:9)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c":103:14)
#loc196 = loc(fused[#loc1, #loc2])
#loc197 = loc(fused[#loc3, #loc4])
#loc198 = loc(fused[#loc5, #loc6])
#loc199 = loc(fused[#loc7, #loc8])
#loc200 = loc(fused[#loc9, #loc10])
#loc201 = loc(fused[#loc11, #loc12])
#loc202 = loc(fused[#loc14, #loc13])
#loc203 = loc(fused[#loc15, #loc16])
#loc204 = loc(fused[#loc17, #loc18])
#loc205 = loc(fused[#loc19, #loc16])
#loc206 = loc(fused[#loc22, #loc23])
#loc207 = loc(fused[#loc21, #loc23])
#loc208 = loc(fused[#loc20, #loc24])
#loc209 = loc(fused[#loc25, #loc24])
#loc210 = loc(fused[#loc26, #loc27])
#loc211 = loc(fused[#loc28, #loc29])
#loc212 = loc(fused[#loc30, #loc27])
#loc213 = loc(fused[#loc35, #loc34])
#loc214 = loc(fused[#loc38, #loc39])
#loc215 = loc(fused[#loc40, #loc41])
#loc216 = loc(fused[#loc46, #loc47])
#loc217 = loc(fused[#loc51, #loc48])
#loc218 = loc(fused[#loc55, #loc56])
#loc219 = loc(fused[#loc54, #loc56])
#loc220 = loc(fused[#loc57, #loc58])
#loc221 = loc(fused[#loc60, #loc59])
#loc222 = loc(fused[#loc68, #loc69])
#loc223 = loc(fused[#loc70, #loc71])
#loc224 = loc(fused[#loc72, #loc73])
#loc225 = loc(fused[#loc75, #loc76])
#loc226 = loc(fused[#loc77, #loc78])
#loc227 = loc(fused[#loc80, #loc79])
#loc228 = loc(fused[#loc81, #loc82])
#loc229 = loc(fused[#loc83, #loc84])
#loc230 = loc(fused[#loc85, #loc86, #loc87, #loc82])
#loc231 = loc(fused[#loc91, #loc92])
#loc232 = loc(fused[#loc90, #loc92])
#loc233 = loc(fused[#loc89, #loc93])
#loc234 = loc(fused[#loc94, #loc93])
#loc235 = loc(fused[#loc95, #loc96])
#loc236 = loc(fused[#loc97, #loc98])
#loc237 = loc(fused[#loc99, #loc96])
#loc238 = loc(fused[#loc104, #loc103])
#loc239 = loc(fused[#loc107, #loc108])
#loc240 = loc(fused[#loc109, #loc110])
#loc241 = loc(fused[#loc115, #loc116])
#loc242 = loc(fused[#loc120, #loc117])
#loc243 = loc(fused[#loc124, #loc125])
#loc244 = loc(fused[#loc123, #loc125])
#loc245 = loc(fused[#loc126, #loc127])
#loc246 = loc(fused[#loc129, #loc128])
#loc247 = loc(fused[#loc137, #loc138])
#loc248 = loc(fused[#loc139, #loc140])
#loc249 = loc(fused[#loc142, #loc141])
#loc250 = loc(fused[#loc143, #loc144])
#loc251 = loc(fused[#loc145, #loc146])
#loc252 = loc(fused[#loc147, #loc144])
#loc253 = loc(fused[#loc150, #loc151])
#loc254 = loc(fused[#loc149, #loc151])
#loc255 = loc(fused[#loc148, #loc152])
#loc256 = loc(fused[#loc153, #loc152])
#loc257 = loc(fused[#loc154, #loc155])
#loc258 = loc(fused[#loc156, #loc157])
#loc259 = loc(fused[#loc158, #loc155])
#loc260 = loc(fused[#loc163, #loc162])
#loc261 = loc(fused[#loc166, #loc167])
#loc262 = loc(fused[#loc168, #loc169])
#loc263 = loc(fused[#loc174, #loc175])
#loc264 = loc(fused[#loc179, #loc176])
#loc265 = loc(fused[#loc183, #loc184])
#loc266 = loc(fused[#loc182, #loc184])
#loc267 = loc(fused[#loc185, #loc186])
#loc268 = loc(fused[#loc188, #loc187])
