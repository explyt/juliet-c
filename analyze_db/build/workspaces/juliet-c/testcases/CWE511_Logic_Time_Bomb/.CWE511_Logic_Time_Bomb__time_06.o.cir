!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__time_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc74)
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE511_Logic_Time_Bomb__time_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["currentTime"] {alignment = 8 : i64} loc(#loc77)
    cir.br ^bb1 loc(#loc78)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<5> : !s32i loc(#loc12)
    %2 = cir.const #cir.int<5> : !s32i loc(#loc13)
    %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc79)
    cir.brcond %3 ^bb2, ^bb9 loc(#loc80)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc81)
  ^bb3:  // pred: ^bb2
    %4 = cir.call @time(%0) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc17)
    cir.br ^bb4 loc(#loc82)
  ^bb4:  // pred: ^bb3
    %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc20)
    %6 = cir.const #cir.int<1199163600> : !s32i loc(#loc21)
    %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc21)
    %8 = cir.cmp(gt, %5, %7) : !s64i, !cir.bool loc(#loc83)
    cir.brcond %8 ^bb5, ^bb6 loc(#loc84)
  ^bb5:  // pred: ^bb4
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc5)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc5)
    %11 = cir.call @unlink(%10) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc23)
    cir.br ^bb6 loc(#loc19)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc19)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc16)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc11)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc11)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc7)
  } loc(#loc76)
  cir.func no_proto @CWE511_Logic_Time_Bomb__time_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc86)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc26)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc87)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    cir.return loc(#loc25)
  } loc(#loc85)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc88)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc32)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc33)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["currentTime"] {alignment = 8 : i64} loc(#loc90)
    cir.br ^bb1 loc(#loc91)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<5> : !s32i loc(#loc40)
    %2 = cir.const #cir.int<5> : !s32i loc(#loc41)
    %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc92)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc93)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc32)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc32)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc45)
    cir.br ^bb10 loc(#loc43)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc94)
  ^bb4:  // pred: ^bb3
    %6 = cir.call @time(%0) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc48)
    cir.br ^bb5 loc(#loc95)
  ^bb5:  // pred: ^bb4
    %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc51)
    %8 = cir.const #cir.int<1199163600> : !s32i loc(#loc52)
    %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc52)
    %10 = cir.cmp(gt, %7, %9) : !s64i, !cir.bool loc(#loc96)
    cir.brcond %10 ^bb6, ^bb7 loc(#loc97)
  ^bb6:  // pred: ^bb5
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc33)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc33)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    cir.br ^bb7 loc(#loc50)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc50)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc47)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc39)
  ^bb10:  // 2 preds: ^bb2, ^bb9
    cir.br ^bb11 loc(#loc39)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc35)
  } loc(#loc89)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["currentTime"] {alignment = 8 : i64} loc(#loc99)
    cir.br ^bb1 loc(#loc100)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<5> : !s32i loc(#loc61)
    %2 = cir.const #cir.int<5> : !s32i loc(#loc62)
    %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc101)
    cir.brcond %3 ^bb2, ^bb9 loc(#loc102)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc103)
  ^bb3:  // pred: ^bb2
    %4 = cir.call @time(%0) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc66)
    cir.br ^bb4 loc(#loc104)
  ^bb4:  // pred: ^bb3
    %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc69)
    %6 = cir.const #cir.int<1199163600> : !s32i loc(#loc70)
    %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc70)
    %8 = cir.cmp(gt, %5, %7) : !s64i, !cir.bool loc(#loc105)
    cir.brcond %8 ^bb5, ^bb6 loc(#loc106)
  ^bb5:  // pred: ^bb4
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc72)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    cir.br ^bb6 loc(#loc68)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc68)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc65)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc60)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc60)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc56)
  } loc(#loc98)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__time_06.c":0:0)
#loc1 = loc("/usr/include/time.h":76:1)
#loc2 = loc("/usr/include/time.h":76:38)
#loc3 = loc("/usr/include/unistd.h":858:1)
#loc4 = loc("/usr/include/unistd.h":858:48)
#loc5 = loc("CWE511_Logic_Time_Bomb__time_06.c":46:24)
#loc6 = loc("CWE511_Logic_Time_Bomb__time_06.c":36:1)
#loc7 = loc("CWE511_Logic_Time_Bomb__time_06.c":50:1)
#loc8 = loc("CWE511_Logic_Time_Bomb__time_06.c":41:13)
#loc9 = loc("CWE511_Logic_Time_Bomb__time_06.c":41:20)
#loc10 = loc("CWE511_Logic_Time_Bomb__time_06.c":38:5)
#loc11 = loc("CWE511_Logic_Time_Bomb__time_06.c":49:5)
#loc12 = loc("CWE511_Logic_Time_Bomb__time_06.c":38:8)
#loc13 = loc("CWE511_Logic_Time_Bomb__time_06.c":38:27)
#loc14 = loc("CWE511_Logic_Time_Bomb__time_06.c":39:5)
#loc15 = loc("CWE511_Logic_Time_Bomb__time_06.c":40:9)
#loc16 = loc("CWE511_Logic_Time_Bomb__time_06.c":48:9)
#loc17 = loc("CWE511_Logic_Time_Bomb__time_06.c":43:13)
#loc18 = loc("CWE511_Logic_Time_Bomb__time_06.c":44:13)
#loc19 = loc("CWE511_Logic_Time_Bomb__time_06.c":47:13)
#loc20 = loc("CWE511_Logic_Time_Bomb__time_06.c":44:17)
#loc21 = loc("CWE511_Logic_Time_Bomb__time_06.c":44:31)
#loc22 = loc("CWE511_Logic_Time_Bomb__time_06.c":45:13)
#loc23 = loc("CWE511_Logic_Time_Bomb__time_06.c":46:17)
#loc24 = loc("CWE511_Logic_Time_Bomb__time_06.c":95:1)
#loc25 = loc("CWE511_Logic_Time_Bomb__time_06.c":99:1)
#loc26 = loc("CWE511_Logic_Time_Bomb__time_06.c":97:5)
#loc27 = loc("CWE511_Logic_Time_Bomb__time_06.c":97:11)
#loc28 = loc("CWE511_Logic_Time_Bomb__time_06.c":98:5)
#loc29 = loc("CWE511_Logic_Time_Bomb__time_06.c":98:11)
#loc30 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc31 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc32 = loc("CWE511_Logic_Time_Bomb__time_06.c":62:19)
#loc33 = loc("CWE511_Logic_Time_Bomb__time_06.c":72:27)
#loc34 = loc("CWE511_Logic_Time_Bomb__time_06.c":57:1)
#loc35 = loc("CWE511_Logic_Time_Bomb__time_06.c":76:1)
#loc36 = loc("CWE511_Logic_Time_Bomb__time_06.c":67:13)
#loc37 = loc("CWE511_Logic_Time_Bomb__time_06.c":67:20)
#loc38 = loc("CWE511_Logic_Time_Bomb__time_06.c":59:5)
#loc39 = loc("CWE511_Logic_Time_Bomb__time_06.c":75:5)
#loc40 = loc("CWE511_Logic_Time_Bomb__time_06.c":59:8)
#loc41 = loc("CWE511_Logic_Time_Bomb__time_06.c":59:27)
#loc42 = loc("CWE511_Logic_Time_Bomb__time_06.c":60:5)
#loc43 = loc("CWE511_Logic_Time_Bomb__time_06.c":63:5)
#loc44 = loc("CWE511_Logic_Time_Bomb__time_06.c":65:5)
#loc45 = loc("CWE511_Logic_Time_Bomb__time_06.c":62:9)
#loc46 = loc("CWE511_Logic_Time_Bomb__time_06.c":66:9)
#loc47 = loc("CWE511_Logic_Time_Bomb__time_06.c":74:9)
#loc48 = loc("CWE511_Logic_Time_Bomb__time_06.c":69:13)
#loc49 = loc("CWE511_Logic_Time_Bomb__time_06.c":70:13)
#loc50 = loc("CWE511_Logic_Time_Bomb__time_06.c":73:13)
#loc51 = loc("CWE511_Logic_Time_Bomb__time_06.c":70:17)
#loc52 = loc("CWE511_Logic_Time_Bomb__time_06.c":70:31)
#loc53 = loc("CWE511_Logic_Time_Bomb__time_06.c":71:13)
#loc54 = loc("CWE511_Logic_Time_Bomb__time_06.c":72:17)
#loc55 = loc("CWE511_Logic_Time_Bomb__time_06.c":79:1)
#loc56 = loc("CWE511_Logic_Time_Bomb__time_06.c":93:1)
#loc57 = loc("CWE511_Logic_Time_Bomb__time_06.c":84:13)
#loc58 = loc("CWE511_Logic_Time_Bomb__time_06.c":84:20)
#loc59 = loc("CWE511_Logic_Time_Bomb__time_06.c":81:5)
#loc60 = loc("CWE511_Logic_Time_Bomb__time_06.c":92:5)
#loc61 = loc("CWE511_Logic_Time_Bomb__time_06.c":81:8)
#loc62 = loc("CWE511_Logic_Time_Bomb__time_06.c":81:27)
#loc63 = loc("CWE511_Logic_Time_Bomb__time_06.c":82:5)
#loc64 = loc("CWE511_Logic_Time_Bomb__time_06.c":83:9)
#loc65 = loc("CWE511_Logic_Time_Bomb__time_06.c":91:9)
#loc66 = loc("CWE511_Logic_Time_Bomb__time_06.c":86:13)
#loc67 = loc("CWE511_Logic_Time_Bomb__time_06.c":87:13)
#loc68 = loc("CWE511_Logic_Time_Bomb__time_06.c":90:13)
#loc69 = loc("CWE511_Logic_Time_Bomb__time_06.c":87:17)
#loc70 = loc("CWE511_Logic_Time_Bomb__time_06.c":87:31)
#loc71 = loc("CWE511_Logic_Time_Bomb__time_06.c":88:13)
#loc72 = loc("CWE511_Logic_Time_Bomb__time_06.c":89:27)
#loc73 = loc("CWE511_Logic_Time_Bomb__time_06.c":89:17)
#loc74 = loc(fused[#loc1, #loc2])
#loc75 = loc(fused[#loc3, #loc4])
#loc76 = loc(fused[#loc6, #loc7])
#loc77 = loc(fused[#loc8, #loc9])
#loc78 = loc(fused[#loc10, #loc11])
#loc79 = loc(fused[#loc12, #loc13])
#loc80 = loc(fused[#loc14, #loc11])
#loc81 = loc(fused[#loc15, #loc16])
#loc82 = loc(fused[#loc18, #loc19])
#loc83 = loc(fused[#loc20, #loc21])
#loc84 = loc(fused[#loc22, #loc19])
#loc85 = loc(fused[#loc24, #loc25])
#loc86 = loc(fused[#loc26, #loc27])
#loc87 = loc(fused[#loc28, #loc29])
#loc88 = loc(fused[#loc30, #loc31])
#loc89 = loc(fused[#loc34, #loc35])
#loc90 = loc(fused[#loc36, #loc37])
#loc91 = loc(fused[#loc38, #loc39])
#loc92 = loc(fused[#loc40, #loc41])
#loc93 = loc(fused[#loc42, #loc43, #loc44, #loc39])
#loc94 = loc(fused[#loc46, #loc47])
#loc95 = loc(fused[#loc49, #loc50])
#loc96 = loc(fused[#loc51, #loc52])
#loc97 = loc(fused[#loc53, #loc50])
#loc98 = loc(fused[#loc55, #loc56])
#loc99 = loc(fused[#loc57, #loc58])
#loc100 = loc(fused[#loc59, #loc60])
#loc101 = loc(fused[#loc61, #loc62])
#loc102 = loc(fused[#loc63, #loc60])
#loc103 = loc(fused[#loc64, #loc65])
#loc104 = loc(fused[#loc67, #loc68])
#loc105 = loc(fused[#loc69, #loc70])
#loc106 = loc(fused[#loc71, #loc68])
