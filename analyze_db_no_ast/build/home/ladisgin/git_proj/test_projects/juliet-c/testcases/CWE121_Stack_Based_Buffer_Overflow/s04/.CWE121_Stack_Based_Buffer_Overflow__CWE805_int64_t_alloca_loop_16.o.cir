!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printLongLongLine(!s64i) loc(#loc91)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc93)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc94)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc8)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc8)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc8)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc8)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc8)
    %7 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc95)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc8)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc8)
    cir.store %9, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc94)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc10)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc10)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc10)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc10)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc10)
    cir.store %16, %7 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc95)
    cir.scope {
      cir.while {
        %17 = cir.const #cir.int<1> : !s32i loc(#loc13)
        %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc13)
        cir.condition(%18) loc(#loc13)
      } do {
        %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc14)
        cir.store %17, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc97)
        cir.break loc(#loc16)
      } loc(#loc96)
    } loc(#loc96)
    cir.scope {
      %17 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc99)
      %18 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc99)
      cir.store %18, %17 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc99)
      cir.scope {
        %19 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc101)
        cir.scope {
          %24 = cir.const #cir.int<0> : !s32i loc(#loc27)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc27)
          cir.store %25, %19 : !u64i, !cir.ptr<!u64i> loc(#loc103)
          cir.for : cond {
            %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc29)
            %27 = cir.const #cir.int<100> : !s32i loc(#loc30)
            %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc30)
            %29 = cir.cmp(lt, %26, %28) : !u64i, !s32i loc(#loc104)
            %30 = cir.cast(int_to_bool, %29 : !s32i), !cir.bool loc(#loc31)
            cir.condition(%30) loc(#loc31)
          } body {
            cir.scope {
              %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc33)
              %27 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc34)
              %28 = cir.ptr_stride(%27 : !cir.ptr<!s64i>, %26 : !u64i), !cir.ptr<!s64i> loc(#loc34)
              %29 = cir.load %28 : !cir.ptr<!s64i>, !s64i loc(#loc34)
              %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc35)
              %31 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc36)
              %32 = cir.ptr_stride(%30 : !cir.ptr<!s64i>, %31 : !u64i), !cir.ptr<!s64i> loc(#loc37)
              cir.store %29, %32 : !s64i, !cir.ptr<!s64i> loc(#loc106)
            } loc(#loc105)
            cir.yield loc(#loc26)
          } step {
            %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc39)
            %27 = cir.unary(inc, %26) : !u64i, !u64i loc(#loc40)
            cir.store %27, %19 : !u64i, !cir.ptr<!u64i> loc(#loc107)
            cir.yield loc(#loc102)
          } loc(#loc102)
        } loc(#loc102)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc41)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc42)
        %22 = cir.ptr_stride(%20 : !cir.ptr<!s64i>, %21 : !s32i), !cir.ptr<!s64i> loc(#loc43)
        %23 = cir.load %22 : !cir.ptr<!s64i>, !s64i loc(#loc41)
        cir.call @printLongLongLine(%23) : (!s64i) -> () loc(#loc44)
      } loc(#loc100)
    } loc(#loc98)
    cir.return loc(#loc4)
  } loc(#loc92)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc109)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    cir.return loc(#loc46)
  } loc(#loc108)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc111)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc112)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc54)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc54)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc54)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc54)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc54)
    %7 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc113)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc54)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc54)
    cir.store %9, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc112)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc56)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc56)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc56)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc56)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc56)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc56)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc56)
    cir.store %16, %7 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc113)
    cir.scope {
      cir.while {
        %17 = cir.const #cir.int<1> : !s32i loc(#loc59)
        %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc59)
        cir.condition(%18) loc(#loc59)
      } do {
        %17 = cir.load %7 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc60)
        cir.store %17, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc115)
        cir.break loc(#loc62)
      } loc(#loc114)
    } loc(#loc114)
    cir.scope {
      %17 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc117)
      %18 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc117)
      cir.store %18, %17 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc117)
      cir.scope {
        %19 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc119)
        cir.scope {
          %24 = cir.const #cir.int<0> : !s32i loc(#loc73)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc73)
          cir.store %25, %19 : !u64i, !cir.ptr<!u64i> loc(#loc121)
          cir.for : cond {
            %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc75)
            %27 = cir.const #cir.int<100> : !s32i loc(#loc76)
            %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc76)
            %29 = cir.cmp(lt, %26, %28) : !u64i, !s32i loc(#loc122)
            %30 = cir.cast(int_to_bool, %29 : !s32i), !cir.bool loc(#loc77)
            cir.condition(%30) loc(#loc77)
          } body {
            cir.scope {
              %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc79)
              %27 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc80)
              %28 = cir.ptr_stride(%27 : !cir.ptr<!s64i>, %26 : !u64i), !cir.ptr<!s64i> loc(#loc80)
              %29 = cir.load %28 : !cir.ptr<!s64i>, !s64i loc(#loc80)
              %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc81)
              %31 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc82)
              %32 = cir.ptr_stride(%30 : !cir.ptr<!s64i>, %31 : !u64i), !cir.ptr<!s64i> loc(#loc83)
              cir.store %29, %32 : !s64i, !cir.ptr<!s64i> loc(#loc124)
            } loc(#loc123)
            cir.yield loc(#loc72)
          } step {
            %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc85)
            %27 = cir.unary(inc, %26) : !u64i, !u64i loc(#loc86)
            cir.store %27, %19 : !u64i, !cir.ptr<!u64i> loc(#loc125)
            cir.yield loc(#loc120)
          } loc(#loc120)
        } loc(#loc120)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc87)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc88)
        %22 = cir.ptr_stride(%20 : !cir.ptr<!s64i>, %21 : !s32i), !cir.ptr<!s64i> loc(#loc89)
        %23 = cir.load %22 : !cir.ptr<!s64i>, !s64i loc(#loc87)
        cir.call @printLongLongLine(%23) : (!s64i) -> () loc(#loc90)
      } loc(#loc118)
    } loc(#loc116)
    cir.return loc(#loc50)
  } loc(#loc110)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":45:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":23:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":23:15)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":24:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":24:42)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":25:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":25:43)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":26:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":32:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":26:11)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":30:16)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":30:9)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":31:9)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":33:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":44:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":34:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":34:33)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":35:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":43:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":36:13)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":36:20)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":38:13)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":41:13)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":38:22)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":38:18)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":38:25)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":38:29)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":38:27)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":39:13)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":40:34)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":40:27)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":40:17)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":40:22)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":40:23)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":40:35)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":38:35)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":38:34)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":42:31)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":42:36)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":42:37)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":42:13)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":77:1)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":80:1)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":79:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":79:13)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":52:1)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":75:1)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":54:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":54:15)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":55:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":55:42)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":56:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":56:43)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":57:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":62:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":57:11)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":60:16)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":60:9)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":61:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":63:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":74:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":64:9)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":64:33)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":65:9)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":73:9)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":66:13)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":66:20)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":68:13)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":71:13)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":68:22)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":68:18)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":68:25)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":68:29)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":68:27)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":69:13)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":70:34)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":70:27)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":70:17)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":70:22)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":70:23)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":70:35)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":68:35)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":68:34)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":72:31)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":72:36)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":72:37)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c":72:13)
#loc91 = loc(fused[#loc1, #loc2])
#loc92 = loc(fused[#loc3, #loc4])
#loc93 = loc(fused[#loc5, #loc6])
#loc94 = loc(fused[#loc7, #loc8])
#loc95 = loc(fused[#loc9, #loc10])
#loc96 = loc(fused[#loc11, #loc12])
#loc97 = loc(fused[#loc15, #loc14])
#loc98 = loc(fused[#loc17, #loc18])
#loc99 = loc(fused[#loc19, #loc20])
#loc100 = loc(fused[#loc21, #loc22])
#loc101 = loc(fused[#loc23, #loc24])
#loc102 = loc(fused[#loc25, #loc26])
#loc103 = loc(fused[#loc28, #loc27])
#loc104 = loc(fused[#loc29, #loc30])
#loc105 = loc(fused[#loc32, #loc26])
#loc106 = loc(fused[#loc35, #loc38])
#loc107 = loc(fused[#loc40, #loc39])
#loc108 = loc(fused[#loc45, #loc46])
#loc109 = loc(fused[#loc47, #loc48])
#loc110 = loc(fused[#loc49, #loc50])
#loc111 = loc(fused[#loc51, #loc52])
#loc112 = loc(fused[#loc53, #loc54])
#loc113 = loc(fused[#loc55, #loc56])
#loc114 = loc(fused[#loc57, #loc58])
#loc115 = loc(fused[#loc61, #loc60])
#loc116 = loc(fused[#loc63, #loc64])
#loc117 = loc(fused[#loc65, #loc66])
#loc118 = loc(fused[#loc67, #loc68])
#loc119 = loc(fused[#loc69, #loc70])
#loc120 = loc(fused[#loc71, #loc72])
#loc121 = loc(fused[#loc74, #loc73])
#loc122 = loc(fused[#loc75, #loc76])
#loc123 = loc(fused[#loc78, #loc72])
#loc124 = loc(fused[#loc81, #loc84])
#loc125 = loc(fused[#loc86, #loc85])
