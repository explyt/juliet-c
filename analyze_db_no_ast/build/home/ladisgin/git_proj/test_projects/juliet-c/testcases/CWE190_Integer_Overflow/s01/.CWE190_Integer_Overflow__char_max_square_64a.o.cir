!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_64a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @CWE190_Integer_Overflow__char_max_square_64b_badSink(!cir.ptr<!void>) loc(#loc46)
  cir.func no_proto  @CWE190_Integer_Overflow__char_max_square_64_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc48)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc7)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc7)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc49)
    %3 = cir.const #cir.int<127> : !s32i loc(#loc9)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc9)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc50)
    %5 = cir.cast(bitcast, %0 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc51)
    cir.call @CWE190_Integer_Overflow__char_max_square_64b_badSink(%5) : (!cir.ptr<!void>) -> () loc(#loc13)
    cir.return loc(#loc4)
  } loc(#loc47)
  cir.func no_proto  @CWE190_Integer_Overflow__char_max_square_64_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc53)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc16)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc54)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc18)
    cir.return loc(#loc15)
  } loc(#loc52)
  cir.func private  @CWE190_Integer_Overflow__char_max_square_64b_goodG2BSink(!cir.ptr<!void>) loc(#loc55)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc57)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc26)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc26)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc58)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc28)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc28)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc59)
    %5 = cir.cast(bitcast, %0 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc60)
    cir.call @CWE190_Integer_Overflow__char_max_square_64b_goodG2BSink(%5) : (!cir.ptr<!void>) -> () loc(#loc32)
    cir.return loc(#loc23)
  } loc(#loc56)
  cir.func private  @CWE190_Integer_Overflow__char_max_square_64b_goodB2GSink(!cir.ptr<!void>) loc(#loc61)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc63)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc39)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc39)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc64)
    %3 = cir.const #cir.int<127> : !s32i loc(#loc41)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc41)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc65)
    %5 = cir.cast(bitcast, %0 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc66)
    cir.call @CWE190_Integer_Overflow__char_max_square_64b_goodB2GSink(%5) : (!cir.ptr<!void>) -> () loc(#loc45)
    cir.return loc(#loc36)
  } loc(#loc62)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_64a.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":25:1)
#loc2 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":25:77)
#loc3 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":27:1)
#loc4 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":34:1)
#loc5 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":29:5)
#loc6 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":29:10)
#loc7 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":30:12)
#loc8 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":30:5)
#loc9 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":32:12)
#loc10 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":32:5)
#loc11 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":33:58)
#loc12 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":33:59)
#loc13 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":33:5)
#loc14 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":64:1)
#loc15 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":68:1)
#loc16 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":66:5)
#loc17 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":66:13)
#loc18 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":67:5)
#loc19 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":67:13)
#loc20 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":41:1)
#loc21 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":41:81)
#loc22 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":43:1)
#loc23 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":50:1)
#loc24 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":45:5)
#loc25 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":45:10)
#loc26 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":46:12)
#loc27 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":46:5)
#loc28 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":48:12)
#loc29 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":48:5)
#loc30 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":49:62)
#loc31 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":49:63)
#loc32 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":49:5)
#loc33 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":53:1)
#loc34 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":53:81)
#loc35 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":55:1)
#loc36 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":62:1)
#loc37 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":57:5)
#loc38 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":57:10)
#loc39 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":58:12)
#loc40 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":58:5)
#loc41 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":60:12)
#loc42 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":60:5)
#loc43 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":61:62)
#loc44 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":61:63)
#loc45 = loc("CWE190_Integer_Overflow__char_max_square_64a.c":61:5)
#loc46 = loc(fused[#loc1, #loc2])
#loc47 = loc(fused[#loc3, #loc4])
#loc48 = loc(fused[#loc5, #loc6])
#loc49 = loc(fused[#loc8, #loc7])
#loc50 = loc(fused[#loc10, #loc9])
#loc51 = loc(fused[#loc11, #loc12])
#loc52 = loc(fused[#loc14, #loc15])
#loc53 = loc(fused[#loc16, #loc17])
#loc54 = loc(fused[#loc18, #loc19])
#loc55 = loc(fused[#loc20, #loc21])
#loc56 = loc(fused[#loc22, #loc23])
#loc57 = loc(fused[#loc24, #loc25])
#loc58 = loc(fused[#loc27, #loc26])
#loc59 = loc(fused[#loc29, #loc28])
#loc60 = loc(fused[#loc30, #loc31])
#loc61 = loc(fused[#loc33, #loc34])
#loc62 = loc(fused[#loc35, #loc36])
#loc63 = loc(fused[#loc37, #loc38])
#loc64 = loc(fused[#loc40, #loc39])
#loc65 = loc(fused[#loc42, #loc41])
#loc66 = loc(fused[#loc43, #loc44])
