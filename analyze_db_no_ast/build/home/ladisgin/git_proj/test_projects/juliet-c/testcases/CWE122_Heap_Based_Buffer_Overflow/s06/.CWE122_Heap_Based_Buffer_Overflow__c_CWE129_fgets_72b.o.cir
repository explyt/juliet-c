!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc3 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1128:7)
#loc4 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1128:18)
#loc5 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1128:28)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":28:14)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":28:26)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":65:18)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":65:30)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":97:18)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":97:30)
#true = #cir.bool<true> : !cir.bool
#loc228 = loc(fused[#loc4, #loc5])
#loc236 = loc(fused[#loc28, #loc29])
#loc261 = loc(fused[#loc93, #loc94])
#loc286 = loc(fused[#loc160, #loc161])
!ty_std3A3A_Vector_base3Cint2C_std3A3Aallocator3Cint3E3E3A3A_Vector_impl_data = !cir.struct<struct "std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" {!cir.ptr<!s32i>, !cir.ptr<!s32i>, !cir.ptr<!s32i>} #cir.record.decl.ast>
!ty_std3A3A_Vector_base3Cint2C_std3A3Aallocator3Cint3E3E3A3A_Vector_impl = !cir.struct<struct "std::_Vector_base<int, std::allocator<int>>::_Vector_impl" {!ty_std3A3A_Vector_base3Cint2C_std3A3Aallocator3Cint3E3E3A3A_Vector_impl_data} #cir.record.decl.ast>
!ty_std3A3A_Vector_base3Cint2C_std3A3Aallocator3Cint3E3E = !cir.struct<struct "std::_Vector_base<int, std::allocator<int>>" {!ty_std3A3A_Vector_base3Cint2C_std3A3Aallocator3Cint3E3E3A3A_Vector_impl} #cir.record.decl.ast>
!ty_std3A3Avector3Cint2C_std3A3Aallocator3Cint3E3E = !cir.struct<class "std::vector<int, std::allocator<int>>" {!ty_std3A3A_Vector_base3Cint2C_std3A3Aallocator3Cint3E3E}>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func linkonce_odr  @_ZNSt6vectorIiSaIiEEixEm(%arg0: !cir.ptr<!ty_std3A3Avector3Cint2C_std3A3Aallocator3Cint3E3E> loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1128:7), %arg1: !u64i loc(fused[#loc4, #loc5])) -> !cir.ptr<!s32i> extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_std3A3Avector3Cint2C_std3A3Aallocator3Cint3E3E>, !cir.ptr<!cir.ptr<!ty_std3A3Avector3Cint2C_std3A3Aallocator3Cint3E3E>>, ["this", init] {alignment = 8 : i64} loc(#loc3)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["__n", init] {alignment = 8 : i64} loc(#loc228)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["__retval"] {alignment = 8 : i64} loc(#loc2)
    cir.store %arg0, %0 : !cir.ptr<!ty_std3A3Avector3Cint2C_std3A3Aallocator3Cint3E3E>, !cir.ptr<!cir.ptr<!ty_std3A3Avector3Cint2C_std3A3Aallocator3Cint3E3E>> loc(#loc6)
    cir.store %arg1, %1 : !u64i, !cir.ptr<!u64i> loc(#loc6)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_std3A3Avector3Cint2C_std3A3Aallocator3Cint3E3E>>, !cir.ptr<!ty_std3A3Avector3Cint2C_std3A3Aallocator3Cint3E3E> loc(#loc3)
    %4 = cir.base_class_addr(%3 : !cir.ptr<!ty_std3A3Avector3Cint2C_std3A3Aallocator3Cint3E3E> nonnull) [0] -> !cir.ptr<!ty_std3A3A_Vector_base3Cint2C_std3A3Aallocator3Cint3E3E> loc(#loc7)
    %5 = cir.get_member %4[0] {name = "_M_impl"} : !cir.ptr<!ty_std3A3A_Vector_base3Cint2C_std3A3Aallocator3Cint3E3E> -> !cir.ptr<!ty_std3A3A_Vector_base3Cint2C_std3A3Aallocator3Cint3E3E3A3A_Vector_impl> loc(#loc8)
    %6 = cir.base_class_addr(%5 : !cir.ptr<!ty_std3A3A_Vector_base3Cint2C_std3A3Aallocator3Cint3E3E3A3A_Vector_impl> nonnull) [0] -> !cir.ptr<!ty_std3A3A_Vector_base3Cint2C_std3A3Aallocator3Cint3E3E3A3A_Vector_impl_data> loc(#loc7)
    %7 = cir.get_member %6[0] {name = "_M_start"} : !cir.ptr<!ty_std3A3A_Vector_base3Cint2C_std3A3Aallocator3Cint3E3E3A3A_Vector_impl_data> -> !cir.ptr<!cir.ptr<!s32i>> loc(#loc9)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc10)
    %9 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc11)
    %10 = cir.ptr_stride(%8 : !cir.ptr<!s32i>, %9 : !u64i), !cir.ptr<!s32i> loc(#loc12)
    cir.store %10, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc229)
    %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc229)
    cir.return %11 : !cir.ptr<!s32i> loc(#loc229)
  } loc(#loc227)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc230)
  cir.func private  @exit(!s32i) extra(#fn_attr1) loc(#loc231)
  cir.func private  @printIntLine(!s32i) loc(#loc232)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc233)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc23)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr1) loc(#loc234)
  cir.func  @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_727badSinkESt6vectorIiSaIiEE(%arg0: !ty_std3A3Avector3Cint2C_std3A3Aallocator3Cint3E3E loc(fused[#loc28, #loc29])) extra(#fn_attr2) {
    %0 = cir.alloca !ty_std3A3Avector3Cint2C_std3A3Aallocator3Cint3E3E, !cir.ptr<!ty_std3A3Avector3Cint2C_std3A3Aallocator3Cint3E3E>, ["dataVector", init] {alignment = 8 : i64} loc(#loc236)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc237)
    cir.store %arg0, %0 : !ty_std3A3Avector3Cint2C_std3A3Aallocator3Cint3E3E, !cir.ptr<!ty_std3A3Avector3Cint2C_std3A3Aallocator3Cint3E3E> loc(#loc32)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc33)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc33)
    %4 = cir.call @_ZNSt6vectorIiSaIiEEixEm(%0, %3) : (!cir.ptr<!ty_std3A3Avector3Cint2C_std3A3Aallocator3Cint3E3E>, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr1) loc(#loc34)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc34)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc237)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc239)
      %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc240)
      %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc41)
      %9 = cir.const #cir.int<10> : !s32i loc(#loc42)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc42)
      %11 = cir.const #cir.int<4> : !u64i loc(#loc241)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc242)
      %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc41)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc243)
      cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc240)
      cir.scope {
        %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc47)
        %19 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc48)
        %20 = cir.cmp(eq, %18, %19) : !cir.ptr<!s32i>, !cir.bool loc(#loc245)
        cir.if %20 {
          %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc50)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc51)
          %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc52)
          cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr1) loc(#loc50)
        } loc(#loc246)
      } loc(#loc244)
      cir.scope {
        %18 = cir.const #cir.int<0> : !s32i loc(#loc55)
        cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc248)
        cir.for : cond {
          %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc57)
          %20 = cir.const #cir.int<10> : !s32i loc(#loc58)
          %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc249)
          cir.condition(%21) loc(#loc249)
        } body {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc59)
          %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
          %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc61)
          %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc62)
          cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc250)
          cir.yield loc(#loc54)
        } step {
          %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc63)
          %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc64)
          cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc251)
          cir.yield loc(#loc247)
        } loc(#loc247)
      } loc(#loc247)
      cir.scope {
        %18 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc67)
        %19 = cir.const #cir.int<0> : !s32i loc(#loc68)
        %20 = cir.cmp(ge, %18, %19) : !s32i, !cir.bool loc(#loc253)
        cir.if %20 {
          %21 = cir.const #cir.int<1> : !s32i loc(#loc72)
          %22 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc73)
          %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc74)
          %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc75)
          cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc255)
          cir.scope {
            %25 = cir.const #cir.int<0> : !s32i loc(#loc78)
            cir.store %25, %6 : !s32i, !cir.ptr<!s32i> loc(#loc257)
            cir.for : cond {
              %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc80)
              %27 = cir.const #cir.int<10> : !s32i loc(#loc81)
              %28 = cir.cmp(lt, %26, %27) : !s32i, !cir.bool loc(#loc258)
              cir.condition(%28) loc(#loc258)
            } body {
              %26 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc82)
              %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc83)
              %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc84)
              %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc82)
              cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc85)
              cir.yield loc(#loc77)
            } step {
              %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc86)
              %27 = cir.unary(inc, %26) : !s32i, !s32i loc(#loc87)
              cir.store %27, %6 : !s32i, !cir.ptr<!s32i> loc(#loc259)
              cir.yield loc(#loc256)
            } loc(#loc256)
          } loc(#loc256)
        } else {
          %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc23)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc23)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc88)
        } loc(#loc254)
      } loc(#loc252)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc89)
      %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc90)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc90)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc89)
    } loc(#loc238)
    cir.return loc(#loc27)
  } loc(#loc235)
  cir.func  @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_7211goodG2BSinkESt6vectorIiSaIiEE(%arg0: !ty_std3A3Avector3Cint2C_std3A3Aallocator3Cint3E3E loc(fused[#loc93, #loc94])) extra(#fn_attr2) {
    %0 = cir.alloca !ty_std3A3Avector3Cint2C_std3A3Aallocator3Cint3E3E, !cir.ptr<!ty_std3A3Avector3Cint2C_std3A3Aallocator3Cint3E3E>, ["dataVector", init] {alignment = 8 : i64} loc(#loc261)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc262)
    cir.store %arg0, %0 : !ty_std3A3Avector3Cint2C_std3A3Aallocator3Cint3E3E, !cir.ptr<!ty_std3A3Avector3Cint2C_std3A3Aallocator3Cint3E3E> loc(#loc97)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc98)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc98)
    %4 = cir.call @_ZNSt6vectorIiSaIiEEixEm(%0, %3) : (!cir.ptr<!ty_std3A3Avector3Cint2C_std3A3Aallocator3Cint3E3E>, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr1) loc(#loc99)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc99)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc262)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc264)
      %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc265)
      %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc106)
      %9 = cir.const #cir.int<10> : !s32i loc(#loc107)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc107)
      %11 = cir.const #cir.int<4> : !u64i loc(#loc266)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc267)
      %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc106)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc268)
      cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc265)
      cir.scope {
        %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc112)
        %19 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc113)
        %20 = cir.cmp(eq, %18, %19) : !cir.ptr<!s32i>, !cir.bool loc(#loc270)
        cir.if %20 {
          %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc115)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc116)
          %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc117)
          cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr1) loc(#loc115)
        } loc(#loc271)
      } loc(#loc269)
      cir.scope {
        %18 = cir.const #cir.int<0> : !s32i loc(#loc120)
        cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc273)
        cir.for : cond {
          %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc122)
          %20 = cir.const #cir.int<10> : !s32i loc(#loc123)
          %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc274)
          cir.condition(%21) loc(#loc274)
        } body {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc124)
          %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc125)
          %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc126)
          %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc127)
          cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc275)
          cir.yield loc(#loc119)
        } step {
          %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc128)
          %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc129)
          cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc276)
          cir.yield loc(#loc272)
        } loc(#loc272)
      } loc(#loc272)
      cir.scope {
        %18 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc132)
        %19 = cir.const #cir.int<0> : !s32i loc(#loc133)
        %20 = cir.cmp(ge, %18, %19) : !s32i, !cir.bool loc(#loc278)
        cir.if %20 {
          %21 = cir.const #cir.int<1> : !s32i loc(#loc137)
          %22 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc138)
          %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc139)
          %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc140)
          cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc280)
          cir.scope {
            %25 = cir.const #cir.int<0> : !s32i loc(#loc143)
            cir.store %25, %6 : !s32i, !cir.ptr<!s32i> loc(#loc282)
            cir.for : cond {
              %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc145)
              %27 = cir.const #cir.int<10> : !s32i loc(#loc146)
              %28 = cir.cmp(lt, %26, %27) : !s32i, !cir.bool loc(#loc283)
              cir.condition(%28) loc(#loc283)
            } body {
              %26 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc147)
              %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc148)
              %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc149)
              %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc147)
              cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc150)
              cir.yield loc(#loc142)
            } step {
              %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc151)
              %27 = cir.unary(inc, %26) : !s32i, !s32i loc(#loc152)
              cir.store %27, %6 : !s32i, !cir.ptr<!s32i> loc(#loc284)
              cir.yield loc(#loc281)
            } loc(#loc281)
          } loc(#loc281)
        } else {
          %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc153)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc153)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc154)
        } loc(#loc279)
      } loc(#loc277)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc155)
      %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc156)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc156)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc155)
    } loc(#loc263)
    cir.return loc(#loc92)
  } loc(#loc260)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc157)
  cir.func  @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_7211goodB2GSinkESt6vectorIiSaIiEE(%arg0: !ty_std3A3Avector3Cint2C_std3A3Aallocator3Cint3E3E loc(fused[#loc160, #loc161])) extra(#fn_attr2) {
    %0 = cir.alloca !ty_std3A3Avector3Cint2C_std3A3Aallocator3Cint3E3E, !cir.ptr<!ty_std3A3Avector3Cint2C_std3A3Aallocator3Cint3E3E>, ["dataVector", init] {alignment = 8 : i64} loc(#loc286)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc287)
    cir.store %arg0, %0 : !ty_std3A3Avector3Cint2C_std3A3Aallocator3Cint3E3E, !cir.ptr<!ty_std3A3Avector3Cint2C_std3A3Aallocator3Cint3E3E> loc(#loc164)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc165)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc165)
    %4 = cir.call @_ZNSt6vectorIiSaIiEEixEm(%0, %3) : (!cir.ptr<!ty_std3A3Avector3Cint2C_std3A3Aallocator3Cint3E3E>, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr1) loc(#loc166)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc166)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc287)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc289)
      %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc290)
      %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc173)
      %9 = cir.const #cir.int<10> : !s32i loc(#loc174)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc174)
      %11 = cir.const #cir.int<4> : !u64i loc(#loc291)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc292)
      %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc173)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc293)
      cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc290)
      cir.scope {
        %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc179)
        %19 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc180)
        %20 = cir.cmp(eq, %18, %19) : !cir.ptr<!s32i>, !cir.bool loc(#loc295)
        cir.if %20 {
          %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc182)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc183)
          %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc184)
          cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr1) loc(#loc182)
        } loc(#loc296)
      } loc(#loc294)
      cir.scope {
        %18 = cir.const #cir.int<0> : !s32i loc(#loc187)
        cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc298)
        cir.for : cond {
          %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc189)
          %20 = cir.const #cir.int<10> : !s32i loc(#loc190)
          %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc299)
          cir.condition(%21) loc(#loc299)
        } body {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc191)
          %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc192)
          %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc193)
          %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc194)
          cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc300)
          cir.yield loc(#loc186)
        } step {
          %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc195)
          %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc196)
          cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc301)
          cir.yield loc(#loc297)
        } loc(#loc297)
      } loc(#loc297)
      cir.scope {
        %18 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc199)
        %19 = cir.const #cir.int<0> : !s32i loc(#loc200)
        %20 = cir.cmp(ge, %18, %19) : !s32i, !cir.bool loc(#loc303)
        %21 = cir.ternary(%20, true {
          %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc202)
          %23 = cir.const #cir.int<10> : !s32i loc(#loc203)
          %24 = cir.cmp(lt, %22, %23) : !s32i, !cir.bool loc(#loc304)
          %25 = cir.ternary(%24, true {
            %26 = cir.const #true loc(#loc201)
            cir.yield %26 : !cir.bool loc(#loc201)
          }, false {
            %26 = cir.const #false loc(#loc201)
            cir.yield %26 : !cir.bool loc(#loc201)
          }) : (!cir.bool) -> !cir.bool loc(#loc201)
          cir.yield %25 : !cir.bool loc(#loc201)
        }, false {
          %22 = cir.const #false loc(#loc201)
          cir.yield %22 : !cir.bool loc(#loc201)
        }) : (!cir.bool) -> !cir.bool loc(#loc201)
        cir.if %21 {
          %22 = cir.const #cir.int<1> : !s32i loc(#loc208)
          %23 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc209)
          %24 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc210)
          %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc211)
          cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc306)
          cir.scope {
            %26 = cir.const #cir.int<0> : !s32i loc(#loc214)
            cir.store %26, %6 : !s32i, !cir.ptr<!s32i> loc(#loc308)
            cir.for : cond {
              %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc216)
              %28 = cir.const #cir.int<10> : !s32i loc(#loc217)
              %29 = cir.cmp(lt, %27, %28) : !s32i, !cir.bool loc(#loc309)
              cir.condition(%29) loc(#loc309)
            } body {
              %27 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc218)
              %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc219)
              %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc220)
              %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc218)
              cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc221)
              cir.yield loc(#loc213)
            } step {
              %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc222)
              %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc223)
              cir.store %28, %6 : !s32i, !cir.ptr<!s32i> loc(#loc310)
              cir.yield loc(#loc307)
            } loc(#loc307)
          } loc(#loc307)
        } else {
          %22 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc157)
          %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc157)
          cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc224)
        } loc(#loc305)
      } loc(#loc302)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc225)
      %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc226)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc226)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc225)
    } loc(#loc288)
    cir.return loc(#loc159)
  } loc(#loc285)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":0:0)
#loc1 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1127:7)
#loc2 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1132:7)
#loc6 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1129:7)
#loc7 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1131:11)
#loc8 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":373:20)
#loc9 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":93:10)
#loc10 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1131:25)
#loc11 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1131:36)
#loc12 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1131:34)
#loc13 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1131:2)
#loc14 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1131:39)
#loc15 = loc("/usr/include/stdlib.h":672:1)
#loc16 = loc("/usr/include/stdlib.h":672:45)
#loc17 = loc("/usr/include/stdlib.h":756:1)
#loc18 = loc("/usr/include/stdlib.h":756:70)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":54:23)
#loc24 = loc("/usr/include/stdlib.h":687:1)
#loc25 = loc("/usr/include/stdlib.h":687:32)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":28:1)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":58:1)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":31:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":31:28)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":29:1)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":31:27)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":31:16)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":32:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":57:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":33:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":33:13)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":34:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":34:54)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":34:31)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":34:38)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":34:43)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":34:53)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":35:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":35:39)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":35:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":35:23)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":35:29)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":35:30)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":35:36)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":35:35)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":37:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":40:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":37:18)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":37:14)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":37:21)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":37:25)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":39:25)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":39:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":39:20)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":39:21)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":37:30)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":37:29)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":43:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":55:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":43:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":43:21)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":44:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":51:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":53:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":45:28)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":45:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":45:20)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":45:24)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":47:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":50:13)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":47:21)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":47:17)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":47:24)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":47:28)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":49:30)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":49:37)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":49:38)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":49:17)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":47:33)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":47:32)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":54:13)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":56:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":56:14)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":65:1)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":94:1)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":67:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":67:28)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":66:1)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":67:27)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":67:16)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":68:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":93:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":69:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":69:13)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":70:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":70:54)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":70:31)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":70:38)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":70:43)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":70:53)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":71:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":71:39)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":71:13)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":71:23)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":71:29)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":71:30)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":71:36)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":71:35)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":73:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":76:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":73:18)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":73:14)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":73:21)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":73:25)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":75:25)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":75:13)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":75:20)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":75:21)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":73:30)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":73:29)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":79:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":91:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":79:13)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":79:21)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":80:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":87:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":89:9)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":81:28)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":81:13)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":81:20)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":81:24)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":83:13)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":86:13)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":83:21)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":83:17)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":83:24)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":83:28)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":85:30)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":85:37)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":85:38)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":85:17)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":83:33)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":83:32)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":90:23)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":90:13)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":92:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":92:14)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":121:23)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":97:1)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":125:1)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":99:5)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":99:28)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":98:1)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":99:27)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":99:16)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":100:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":124:5)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":101:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":101:13)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":102:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":102:54)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":102:31)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":102:38)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":102:43)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":102:53)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":103:9)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":103:39)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":103:13)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":103:23)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":103:29)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":103:30)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":103:36)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":103:35)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":105:9)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":108:9)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":105:18)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":105:14)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":105:21)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":105:25)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":107:25)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":107:13)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":107:20)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":107:21)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":105:30)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":105:29)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":110:9)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":122:9)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":110:13)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":110:21)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":110:23)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":110:26)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":110:34)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":110:36)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":111:9)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":118:9)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":120:9)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":112:28)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":112:13)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":112:20)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":112:24)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":114:13)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":117:13)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":114:21)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":114:17)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":114:24)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":114:28)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":116:30)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":116:37)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":116:38)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":116:17)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":114:33)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":114:32)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":121:13)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":123:9)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_72b.cpp":123:14)
#loc227 = loc(fused[#loc1, #loc2])
#loc229 = loc(fused[#loc13, #loc14])
#loc230 = loc(fused[#loc15, #loc16])
#loc231 = loc(fused[#loc17, #loc18])
#loc232 = loc(fused[#loc19, #loc20])
#loc233 = loc(fused[#loc21, #loc22])
#loc234 = loc(fused[#loc24, #loc25])
#loc235 = loc(fused[#loc26, #loc27])
#loc237 = loc(fused[#loc30, #loc31])
#loc238 = loc(fused[#loc35, #loc36])
#loc239 = loc(fused[#loc37, #loc38])
#loc240 = loc(fused[#loc39, #loc40])
#loc241 = loc(fused[#loc43, #loc44])
#loc242 = loc(fused[#loc42, #loc44])
#loc243 = loc(fused[#loc41, #loc40])
#loc244 = loc(fused[#loc45, #loc46])
#loc245 = loc(fused[#loc47, #loc48])
#loc246 = loc(fused[#loc49, #loc46])
#loc247 = loc(fused[#loc53, #loc54])
#loc248 = loc(fused[#loc56, #loc55])
#loc249 = loc(fused[#loc57, #loc58])
#loc250 = loc(fused[#loc60, #loc59])
#loc251 = loc(fused[#loc64, #loc63])
#loc252 = loc(fused[#loc65, #loc66])
#loc253 = loc(fused[#loc67, #loc68])
#loc254 = loc(fused[#loc69, #loc70, #loc71, #loc66])
#loc255 = loc(fused[#loc73, #loc72])
#loc256 = loc(fused[#loc76, #loc77])
#loc257 = loc(fused[#loc79, #loc78])
#loc258 = loc(fused[#loc80, #loc81])
#loc259 = loc(fused[#loc87, #loc86])
#loc260 = loc(fused[#loc91, #loc92])
#loc262 = loc(fused[#loc95, #loc96])
#loc263 = loc(fused[#loc100, #loc101])
#loc264 = loc(fused[#loc102, #loc103])
#loc265 = loc(fused[#loc104, #loc105])
#loc266 = loc(fused[#loc108, #loc109])
#loc267 = loc(fused[#loc107, #loc109])
#loc268 = loc(fused[#loc106, #loc105])
#loc269 = loc(fused[#loc110, #loc111])
#loc270 = loc(fused[#loc112, #loc113])
#loc271 = loc(fused[#loc114, #loc111])
#loc272 = loc(fused[#loc118, #loc119])
#loc273 = loc(fused[#loc121, #loc120])
#loc274 = loc(fused[#loc122, #loc123])
#loc275 = loc(fused[#loc125, #loc124])
#loc276 = loc(fused[#loc129, #loc128])
#loc277 = loc(fused[#loc130, #loc131])
#loc278 = loc(fused[#loc132, #loc133])
#loc279 = loc(fused[#loc134, #loc135, #loc136, #loc131])
#loc280 = loc(fused[#loc138, #loc137])
#loc281 = loc(fused[#loc141, #loc142])
#loc282 = loc(fused[#loc144, #loc143])
#loc283 = loc(fused[#loc145, #loc146])
#loc284 = loc(fused[#loc152, #loc151])
#loc285 = loc(fused[#loc158, #loc159])
#loc287 = loc(fused[#loc162, #loc163])
#loc288 = loc(fused[#loc167, #loc168])
#loc289 = loc(fused[#loc169, #loc170])
#loc290 = loc(fused[#loc171, #loc172])
#loc291 = loc(fused[#loc175, #loc176])
#loc292 = loc(fused[#loc174, #loc176])
#loc293 = loc(fused[#loc173, #loc172])
#loc294 = loc(fused[#loc177, #loc178])
#loc295 = loc(fused[#loc179, #loc180])
#loc296 = loc(fused[#loc181, #loc178])
#loc297 = loc(fused[#loc185, #loc186])
#loc298 = loc(fused[#loc188, #loc187])
#loc299 = loc(fused[#loc189, #loc190])
#loc300 = loc(fused[#loc192, #loc191])
#loc301 = loc(fused[#loc196, #loc195])
#loc302 = loc(fused[#loc197, #loc198])
#loc303 = loc(fused[#loc199, #loc200])
#loc304 = loc(fused[#loc202, #loc204])
#loc305 = loc(fused[#loc205, #loc206, #loc207, #loc198])
#loc306 = loc(fused[#loc209, #loc208])
#loc307 = loc(fused[#loc212, #loc213])
#loc308 = loc(fused[#loc215, #loc214])
#loc309 = loc(fused[#loc216, #loc217])
#loc310 = loc(fused[#loc223, #loc222])
