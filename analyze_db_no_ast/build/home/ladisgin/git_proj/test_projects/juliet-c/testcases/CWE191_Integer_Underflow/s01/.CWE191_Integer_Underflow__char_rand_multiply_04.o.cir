!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_rand_multiply_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc186)
  cir.func private  @printHexCharLine(!s8i) loc(#loc187)
  cir.func no_proto  @CWE191_Integer_Underflow__char_rand_multiply_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc189)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc9)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc9)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc190)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc13)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc15)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc15)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc15)
        %9 = cir.ternary(%8, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc15)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc15)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc15)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc15)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc15)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc15)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc15)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc15)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc15)
          cir.yield %23 : !u32i loc(#loc15)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc15)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc15)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc15)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc15)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc15)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc15)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc15)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc15)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc15)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc15)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc15)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc15)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc15)
          cir.yield %27 : !u32i loc(#loc15)
        }) : (!cir.bool) -> !u32i loc(#loc15)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc15)
        %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc15)
        cir.store %11, %0 : !s8i, !cir.ptr<!s8i> loc(#loc193)
      } loc(#loc192)
    } loc(#loc191)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc19)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc19)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc23)
          %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc23)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc24)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc197)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc25)
          cir.if %9 {
            %10 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc199)
            %11 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc29)
            %12 = cir.cast(integral, %11 : !s8i), !s32i loc(#loc29)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc28)
            %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc29)
            %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc29)
            cir.store %15, %10 : !s8i, !cir.ptr<!s8i> loc(#loc199)
            %16 = cir.load %10 : !cir.ptr<!s8i>, !s8i loc(#loc30)
            cir.call @printHexCharLine(%16) : (!s8i) -> () loc(#loc31)
          } loc(#loc198)
        } loc(#loc196)
      } loc(#loc195)
    } loc(#loc194)
    cir.return loc(#loc6)
  } loc(#loc188)
  cir.func no_proto  @CWE191_Integer_Underflow__char_rand_multiply_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc201)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc202)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc203)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc204)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    cir.return loc(#loc33)
  } loc(#loc200)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc205)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc44)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc45)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc207)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc50)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc50)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc208)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc54)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc54)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc56)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc56)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc56)
        %9 = cir.ternary(%8, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc56)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc56)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc56)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc56)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc56)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc56)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc56)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc56)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc56)
          cir.yield %23 : !u32i loc(#loc56)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc56)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc56)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc56)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc56)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc56)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc56)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc56)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc56)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc56)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc56)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc56)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc56)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc56)
          cir.yield %27 : !u32i loc(#loc56)
        }) : (!cir.bool) -> !u32i loc(#loc56)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc56)
        %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc56)
        cir.store %11, %0 : !s8i, !cir.ptr<!s8i> loc(#loc211)
      } loc(#loc210)
    } loc(#loc209)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc60)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc60)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc44)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc44)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc64)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc67)
          %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc67)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc68)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc215)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc69)
          cir.if %9 {
            cir.scope {
              %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc73)
              %11 = cir.cast(integral, %10 : !s8i), !s32i loc(#loc73)
              %12 = cir.const #cir.int<127> : !s32i loc(#loc74)
              %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc74)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc74)
              %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc74)
              %16 = cir.const #cir.int<2> : !s32i loc(#loc75)
              %17 = cir.binop(div, %15, %16) : !s32i loc(#loc218)
              %18 = cir.cmp(gt, %11, %17) : !s32i, !s32i loc(#loc219)
              %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc77)
              cir.if %19 {
                %20 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc221)
                %21 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc83)
                %22 = cir.cast(integral, %21 : !s8i), !s32i loc(#loc83)
                %23 = cir.const #cir.int<2> : !s32i loc(#loc82)
                %24 = cir.binop(mul, %22, %23) nsw : !s32i loc(#loc83)
                %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc83)
                cir.store %25, %20 : !s8i, !cir.ptr<!s8i> loc(#loc221)
                %26 = cir.load %20 : !cir.ptr<!s8i>, !s8i loc(#loc84)
                cir.call @printHexCharLine(%26) : (!s8i) -> () loc(#loc85)
              } else {
                %20 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc45)
                %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc45)
                cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc86)
              } loc(#loc220)
            } loc(#loc217)
          } loc(#loc216)
        } loc(#loc214)
      } loc(#loc213)
    } loc(#loc212)
    cir.return loc(#loc47)
  } loc(#loc206)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc223)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc91)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc91)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc224)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc95)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc95)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc97)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc97)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc97)
        %9 = cir.ternary(%8, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc97)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc97)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc97)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc97)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc97)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc97)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc97)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc97)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc97)
          cir.yield %23 : !u32i loc(#loc97)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc97)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc97)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc97)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc97)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc97)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc97)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc97)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc97)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc97)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc97)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc97)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc97)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc97)
          cir.yield %27 : !u32i loc(#loc97)
        }) : (!cir.bool) -> !u32i loc(#loc97)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc97)
        %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc97)
        cir.store %11, %0 : !s8i, !cir.ptr<!s8i> loc(#loc227)
      } loc(#loc226)
    } loc(#loc225)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc101)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc101)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc105)
          %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc105)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc106)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc231)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc107)
          cir.if %9 {
            cir.scope {
              %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc111)
              %11 = cir.cast(integral, %10 : !s8i), !s32i loc(#loc111)
              %12 = cir.const #cir.int<127> : !s32i loc(#loc112)
              %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc112)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc112)
              %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc112)
              %16 = cir.const #cir.int<2> : !s32i loc(#loc113)
              %17 = cir.binop(div, %15, %16) : !s32i loc(#loc234)
              %18 = cir.cmp(gt, %11, %17) : !s32i, !s32i loc(#loc235)
              %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc115)
              cir.if %19 {
                %20 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc237)
                %21 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc121)
                %22 = cir.cast(integral, %21 : !s8i), !s32i loc(#loc121)
                %23 = cir.const #cir.int<2> : !s32i loc(#loc120)
                %24 = cir.binop(mul, %22, %23) nsw : !s32i loc(#loc121)
                %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc121)
                cir.store %25, %20 : !s8i, !cir.ptr<!s8i> loc(#loc237)
                %26 = cir.load %20 : !cir.ptr<!s8i>, !s8i loc(#loc122)
                cir.call @printHexCharLine(%26) : (!s8i) -> () loc(#loc123)
              } else {
                %20 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc124)
                %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc124)
                cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc125)
              } loc(#loc236)
            } loc(#loc233)
          } loc(#loc232)
        } loc(#loc230)
      } loc(#loc229)
    } loc(#loc228)
    cir.return loc(#loc88)
  } loc(#loc222)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc239)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc130)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc130)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc240)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc134)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc134)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc138)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc138)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc139)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc140)
        %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc141)
        %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc141)
        cir.store %7, %0 : !s8i, !cir.ptr<!s8i> loc(#loc243)
      } loc(#loc242)
    } loc(#loc241)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc145)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc145)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc149)
          %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc149)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc150)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc247)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc151)
          cir.if %9 {
            %10 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc249)
            %11 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc155)
            %12 = cir.cast(integral, %11 : !s8i), !s32i loc(#loc155)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc154)
            %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc155)
            %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc155)
            cir.store %15, %10 : !s8i, !cir.ptr<!s8i> loc(#loc249)
            %16 = cir.load %10 : !cir.ptr<!s8i>, !s8i loc(#loc156)
            cir.call @printHexCharLine(%16) : (!s8i) -> () loc(#loc157)
          } loc(#loc248)
        } loc(#loc246)
      } loc(#loc245)
    } loc(#loc244)
    cir.return loc(#loc127)
  } loc(#loc238)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc251)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc162)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc162)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc252)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc166)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc166)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc168)
        %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc169)
        %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc169)
        cir.store %7, %0 : !s8i, !cir.ptr<!s8i> loc(#loc255)
      } loc(#loc254)
    } loc(#loc253)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc173)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc173)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc177)
          %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc177)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc178)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc259)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc179)
          cir.if %9 {
            %10 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc261)
            %11 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc183)
            %12 = cir.cast(integral, %11 : !s8i), !s32i loc(#loc183)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc182)
            %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc183)
            %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc183)
            cir.store %15, %10 : !s8i, !cir.ptr<!s8i> loc(#loc261)
            %16 = cir.load %10 : !cir.ptr<!s8i>, !s8i loc(#loc184)
            cir.call @printHexCharLine(%16) : (!s8i) -> () loc(#loc185)
          } loc(#loc260)
        } loc(#loc258)
      } loc(#loc257)
    } loc(#loc256)
    cir.return loc(#loc159)
  } loc(#loc250)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_rand_multiply_04.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc5 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":28:1)
#loc6 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":46:1)
#loc7 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":30:5)
#loc8 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":30:10)
#loc9 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":31:12)
#loc10 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":31:5)
#loc11 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":32:5)
#loc12 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":36:5)
#loc13 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":32:8)
#loc14 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":33:5)
#loc15 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":35:22)
#loc16 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":35:9)
#loc17 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":37:5)
#loc18 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":45:5)
#loc19 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":37:8)
#loc20 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":38:5)
#loc21 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":39:9)
#loc22 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":44:9)
#loc23 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":39:12)
#loc24 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":39:19)
#loc25 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":39:17)
#loc26 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":40:9)
#loc27 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":42:13)
#loc28 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":42:34)
#loc29 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":42:27)
#loc30 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":43:30)
#loc31 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":43:13)
#loc32 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":160:1)
#loc33 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":166:1)
#loc34 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":162:5)
#loc35 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":162:14)
#loc36 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":163:5)
#loc37 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":163:14)
#loc38 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":164:5)
#loc39 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":164:14)
#loc40 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":165:5)
#loc41 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":165:14)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":65:19)
#loc45 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":79:27)
#loc46 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":53:1)
#loc47 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":83:1)
#loc48 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":55:5)
#loc49 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":55:10)
#loc50 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":56:12)
#loc51 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":56:5)
#loc52 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":57:5)
#loc53 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":61:5)
#loc54 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":57:8)
#loc55 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":58:5)
#loc56 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":60:22)
#loc57 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":60:9)
#loc58 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":62:5)
#loc59 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":82:5)
#loc60 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":62:8)
#loc61 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":63:5)
#loc62 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":66:5)
#loc63 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":68:5)
#loc64 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":65:9)
#loc65 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":69:9)
#loc66 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":81:9)
#loc67 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":69:12)
#loc68 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":69:19)
#loc69 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":69:17)
#loc70 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":70:9)
#loc71 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":72:13)
#loc72 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":80:13)
#loc73 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":72:17)
#loc74 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":72:25)
#loc75 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":72:34)
#loc76 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":72:35)
#loc77 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":72:22)
#loc78 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":73:13)
#loc79 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":76:13)
#loc80 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":78:13)
#loc81 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":74:17)
#loc82 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":74:38)
#loc83 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":74:31)
#loc84 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":75:34)
#loc85 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":75:17)
#loc86 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":79:17)
#loc87 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":86:1)
#loc88 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":111:1)
#loc89 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":88:5)
#loc90 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":88:10)
#loc91 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":89:12)
#loc92 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":89:5)
#loc93 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":90:5)
#loc94 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":94:5)
#loc95 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":90:8)
#loc96 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":91:5)
#loc97 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":93:22)
#loc98 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":93:9)
#loc99 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":95:5)
#loc100 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":110:5)
#loc101 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":95:8)
#loc102 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":96:5)
#loc103 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":97:9)
#loc104 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":109:9)
#loc105 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":97:12)
#loc106 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":97:19)
#loc107 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":97:17)
#loc108 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":98:9)
#loc109 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":100:13)
#loc110 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":108:13)
#loc111 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":100:17)
#loc112 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":100:25)
#loc113 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":100:34)
#loc114 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":100:35)
#loc115 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":100:22)
#loc116 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":101:13)
#loc117 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":104:13)
#loc118 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":106:13)
#loc119 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":102:17)
#loc120 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":102:38)
#loc121 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":102:31)
#loc122 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":103:34)
#loc123 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":103:17)
#loc124 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":107:27)
#loc125 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":107:17)
#loc126 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":114:1)
#loc127 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":137:1)
#loc128 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":116:5)
#loc129 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":116:10)
#loc130 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":117:12)
#loc131 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":117:5)
#loc132 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":118:5)
#loc133 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":127:5)
#loc134 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":118:8)
#loc135 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":119:5)
#loc136 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":122:5)
#loc137 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":124:5)
#loc138 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":121:19)
#loc139 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":121:9)
#loc140 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":126:17)
#loc141 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":126:16)
#loc142 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":126:9)
#loc143 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":128:5)
#loc144 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":136:5)
#loc145 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":128:8)
#loc146 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":129:5)
#loc147 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":130:9)
#loc148 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":135:9)
#loc149 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":130:12)
#loc150 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":130:19)
#loc151 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":130:17)
#loc152 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":131:9)
#loc153 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":133:13)
#loc154 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":133:34)
#loc155 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":133:27)
#loc156 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":134:30)
#loc157 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":134:13)
#loc158 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":140:1)
#loc159 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":158:1)
#loc160 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":142:5)
#loc161 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":142:10)
#loc162 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":143:12)
#loc163 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":143:5)
#loc164 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":144:5)
#loc165 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":148:5)
#loc166 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":144:8)
#loc167 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":145:5)
#loc168 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":147:17)
#loc169 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":147:16)
#loc170 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":147:9)
#loc171 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":149:5)
#loc172 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":157:5)
#loc173 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":149:8)
#loc174 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":150:5)
#loc175 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":151:9)
#loc176 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":156:9)
#loc177 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":151:12)
#loc178 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":151:19)
#loc179 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":151:17)
#loc180 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":152:9)
#loc181 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":154:13)
#loc182 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":154:34)
#loc183 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":154:27)
#loc184 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":155:30)
#loc185 = loc("CWE191_Integer_Underflow__char_rand_multiply_04.c":155:13)
#loc186 = loc(fused[#loc1, #loc2])
#loc187 = loc(fused[#loc3, #loc4])
#loc188 = loc(fused[#loc5, #loc6])
#loc189 = loc(fused[#loc7, #loc8])
#loc190 = loc(fused[#loc10, #loc9])
#loc191 = loc(fused[#loc11, #loc12])
#loc192 = loc(fused[#loc14, #loc12])
#loc193 = loc(fused[#loc16, #loc15])
#loc194 = loc(fused[#loc17, #loc18])
#loc195 = loc(fused[#loc20, #loc18])
#loc196 = loc(fused[#loc21, #loc22])
#loc197 = loc(fused[#loc23, #loc24])
#loc198 = loc(fused[#loc26, #loc22])
#loc199 = loc(fused[#loc27, #loc28])
#loc200 = loc(fused[#loc32, #loc33])
#loc201 = loc(fused[#loc34, #loc35])
#loc202 = loc(fused[#loc36, #loc37])
#loc203 = loc(fused[#loc38, #loc39])
#loc204 = loc(fused[#loc40, #loc41])
#loc205 = loc(fused[#loc42, #loc43])
#loc206 = loc(fused[#loc46, #loc47])
#loc207 = loc(fused[#loc48, #loc49])
#loc208 = loc(fused[#loc51, #loc50])
#loc209 = loc(fused[#loc52, #loc53])
#loc210 = loc(fused[#loc55, #loc53])
#loc211 = loc(fused[#loc57, #loc56])
#loc212 = loc(fused[#loc58, #loc59])
#loc213 = loc(fused[#loc61, #loc62, #loc63, #loc59])
#loc214 = loc(fused[#loc65, #loc66])
#loc215 = loc(fused[#loc67, #loc68])
#loc216 = loc(fused[#loc70, #loc66])
#loc217 = loc(fused[#loc71, #loc72])
#loc218 = loc(fused[#loc74, #loc75])
#loc219 = loc(fused[#loc73, #loc76])
#loc220 = loc(fused[#loc78, #loc79, #loc80, #loc72])
#loc221 = loc(fused[#loc81, #loc82])
#loc222 = loc(fused[#loc87, #loc88])
#loc223 = loc(fused[#loc89, #loc90])
#loc224 = loc(fused[#loc92, #loc91])
#loc225 = loc(fused[#loc93, #loc94])
#loc226 = loc(fused[#loc96, #loc94])
#loc227 = loc(fused[#loc98, #loc97])
#loc228 = loc(fused[#loc99, #loc100])
#loc229 = loc(fused[#loc102, #loc100])
#loc230 = loc(fused[#loc103, #loc104])
#loc231 = loc(fused[#loc105, #loc106])
#loc232 = loc(fused[#loc108, #loc104])
#loc233 = loc(fused[#loc109, #loc110])
#loc234 = loc(fused[#loc112, #loc113])
#loc235 = loc(fused[#loc111, #loc114])
#loc236 = loc(fused[#loc116, #loc117, #loc118, #loc110])
#loc237 = loc(fused[#loc119, #loc120])
#loc238 = loc(fused[#loc126, #loc127])
#loc239 = loc(fused[#loc128, #loc129])
#loc240 = loc(fused[#loc131, #loc130])
#loc241 = loc(fused[#loc132, #loc133])
#loc242 = loc(fused[#loc135, #loc136, #loc137, #loc133])
#loc243 = loc(fused[#loc142, #loc140])
#loc244 = loc(fused[#loc143, #loc144])
#loc245 = loc(fused[#loc146, #loc144])
#loc246 = loc(fused[#loc147, #loc148])
#loc247 = loc(fused[#loc149, #loc150])
#loc248 = loc(fused[#loc152, #loc148])
#loc249 = loc(fused[#loc153, #loc154])
#loc250 = loc(fused[#loc158, #loc159])
#loc251 = loc(fused[#loc160, #loc161])
#loc252 = loc(fused[#loc163, #loc162])
#loc253 = loc(fused[#loc164, #loc165])
#loc254 = loc(fused[#loc167, #loc165])
#loc255 = loc(fused[#loc170, #loc168])
#loc256 = loc(fused[#loc171, #loc172])
#loc257 = loc(fused[#loc174, #loc172])
#loc258 = loc(fused[#loc175, #loc176])
#loc259 = loc(fused[#loc177, #loc178])
#loc260 = loc(fused[#loc180, #loc176])
#loc261 = loc(fused[#loc181, #loc182])
