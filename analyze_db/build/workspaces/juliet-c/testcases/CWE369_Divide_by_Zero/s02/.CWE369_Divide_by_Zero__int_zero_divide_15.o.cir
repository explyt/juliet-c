!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_divide_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc183)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc3)
  cir.func private @printIntLine(!s32i) loc(#loc184)
  cir.func no_proto @CWE369_Divide_by_Zero__int_zero_divide_15_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc186)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc15)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<0> : !s32i loc(#loc17)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc189)
          cir.break loc(#loc19)
        } loc(#loc16)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc3)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc3)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc21)
          cir.break loc(#loc22)
        } loc(#loc20)
        cir.yield loc(#loc13)
      } loc(#loc13)
    } loc(#loc188)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc25)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.const #cir.int<100> : !s32i loc(#loc27)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
          %6 = cir.binop(div, %4, %5) : !s32i loc(#loc191)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc29)
          cir.break loc(#loc30)
        } loc(#loc26)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc32)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc32)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc33)
          cir.break loc(#loc34)
        } loc(#loc31)
        cir.yield loc(#loc23)
      } loc(#loc23)
    } loc(#loc190)
    cir.return loc(#loc7)
  } loc(#loc185)
  cir.func no_proto @CWE369_Divide_by_Zero__int_zero_divide_15_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc193)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc194)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc195)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc41)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc196)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc43)
    cir.return loc(#loc36)
  } loc(#loc192)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc45)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc198)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc51)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc199)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc55)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<0> : !s32i loc(#loc57)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc201)
          cir.break loc(#loc59)
        } loc(#loc56)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc61)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc61)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc62)
          cir.break loc(#loc63)
        } loc(#loc60)
        cir.yield loc(#loc53)
      } loc(#loc53)
    } loc(#loc200)
    cir.scope {
      %3 = cir.const #cir.int<8> : !s32i loc(#loc66)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc68)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc68)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc69)
          cir.break loc(#loc70)
        } loc(#loc67)
        cir.case(default, []) {
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc74)
            %5 = cir.const #cir.int<0> : !s32i loc(#loc75)
            %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc204)
            cir.if %6 {
              %7 = cir.const #cir.int<100> : !s32i loc(#loc79)
              %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc80)
              %9 = cir.binop(div, %7, %8) : !s32i loc(#loc206)
              cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc81)
            } else {
              %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc45)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc45)
              cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc82)
            } loc(#loc205)
          } loc(#loc203)
          cir.break loc(#loc83)
        } loc(#loc71)
        cir.yield loc(#loc64)
      } loc(#loc64)
    } loc(#loc202)
    cir.return loc(#loc47)
  } loc(#loc197)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc208)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc89)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc93)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<0> : !s32i loc(#loc95)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc211)
          cir.break loc(#loc97)
        } loc(#loc94)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc99)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc99)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc100)
          cir.break loc(#loc101)
        } loc(#loc98)
        cir.yield loc(#loc91)
      } loc(#loc91)
    } loc(#loc210)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc104)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc108)
            %5 = cir.const #cir.int<0> : !s32i loc(#loc109)
            %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc214)
            cir.if %6 {
              %7 = cir.const #cir.int<100> : !s32i loc(#loc113)
              %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc114)
              %9 = cir.binop(div, %7, %8) : !s32i loc(#loc216)
              cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc115)
            } else {
              %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc116)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc116)
              cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc117)
            } loc(#loc215)
          } loc(#loc213)
          cir.break loc(#loc118)
        } loc(#loc105)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc120)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc120)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc121)
          cir.break loc(#loc122)
        } loc(#loc119)
        cir.yield loc(#loc102)
      } loc(#loc102)
    } loc(#loc212)
    cir.return loc(#loc85)
  } loc(#loc207)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc218)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc127)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc128)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc132)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc134)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc134)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc135)
          cir.break loc(#loc136)
        } loc(#loc133)
        cir.case(default, []) {
          %4 = cir.const #cir.int<7> : !s32i loc(#loc138)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc221)
          cir.break loc(#loc140)
        } loc(#loc137)
        cir.yield loc(#loc130)
      } loc(#loc130)
    } loc(#loc220)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc143)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.const #cir.int<100> : !s32i loc(#loc145)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc146)
          %6 = cir.binop(div, %4, %5) : !s32i loc(#loc223)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc147)
          cir.break loc(#loc148)
        } loc(#loc144)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc150)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc150)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc151)
          cir.break loc(#loc152)
        } loc(#loc149)
        cir.yield loc(#loc141)
      } loc(#loc141)
    } loc(#loc222)
    cir.return loc(#loc124)
  } loc(#loc217)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc225)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc157)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc158)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc226)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc162)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<7> : !s32i loc(#loc164)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc228)
          cir.break loc(#loc166)
        } loc(#loc163)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc168)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc168)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc169)
          cir.break loc(#loc170)
        } loc(#loc167)
        cir.yield loc(#loc160)
      } loc(#loc160)
    } loc(#loc227)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc173)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.const #cir.int<100> : !s32i loc(#loc175)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc176)
          %6 = cir.binop(div, %4, %5) : !s32i loc(#loc230)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc177)
          cir.break loc(#loc178)
        } loc(#loc174)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc180)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc180)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc181)
          cir.break loc(#loc182)
        } loc(#loc179)
        cir.yield loc(#loc171)
      } loc(#loc171)
    } loc(#loc229)
    cir.return loc(#loc154)
  } loc(#loc224)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_divide_15.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":35:19)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc6 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":22:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":49:1)
#loc8 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":24:5)
#loc9 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":24:9)
#loc10 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":26:13)
#loc11 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":26:12)
#loc12 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":26:5)
#loc13 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":27:5)
#loc14 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":37:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":27:12)
#loc16 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":29:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":31:16)
#loc18 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":31:9)
#loc19 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":32:9)
#loc20 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":33:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":35:9)
#loc22 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":36:9)
#loc23 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":38:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":48:5)
#loc25 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":38:12)
#loc26 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":40:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":42:22)
#loc28 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":42:28)
#loc29 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":42:9)
#loc30 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":43:9)
#loc31 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":44:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":46:19)
#loc33 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":46:9)
#loc34 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":47:9)
#loc35 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":189:1)
#loc36 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":195:1)
#loc37 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":191:5)
#loc38 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":191:14)
#loc39 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":192:5)
#loc40 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":192:14)
#loc41 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":193:5)
#loc42 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":193:14)
#loc43 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":194:5)
#loc44 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":194:14)
#loc45 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":86:23)
#loc46 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":56:1)
#loc47 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":90:1)
#loc48 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":58:5)
#loc49 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":58:9)
#loc50 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":60:13)
#loc51 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":60:12)
#loc52 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":60:5)
#loc53 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":61:5)
#loc54 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":71:5)
#loc55 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":61:12)
#loc56 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":63:5)
#loc57 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":65:16)
#loc58 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":65:9)
#loc59 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":66:9)
#loc60 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":67:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":69:19)
#loc62 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":69:9)
#loc63 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":70:9)
#loc64 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":72:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":89:5)
#loc66 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":72:12)
#loc67 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":74:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":76:19)
#loc69 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":76:9)
#loc70 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":77:9)
#loc71 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":78:5)
#loc72 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":80:9)
#loc73 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":87:9)
#loc74 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":80:13)
#loc75 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":80:21)
#loc76 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":81:9)
#loc77 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":83:9)
#loc78 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":85:9)
#loc79 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":82:26)
#loc80 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":82:32)
#loc81 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":82:13)
#loc82 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":86:13)
#loc83 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":88:9)
#loc84 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":93:1)
#loc85 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":127:1)
#loc86 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":95:5)
#loc87 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":95:9)
#loc88 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":97:13)
#loc89 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":97:12)
#loc90 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":97:5)
#loc91 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":98:5)
#loc92 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":108:5)
#loc93 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":98:12)
#loc94 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":100:5)
#loc95 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":102:16)
#loc96 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":102:9)
#loc97 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":103:9)
#loc98 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":104:5)
#loc99 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":106:19)
#loc100 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":106:9)
#loc101 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":107:9)
#loc102 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":109:5)
#loc103 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":126:5)
#loc104 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":109:12)
#loc105 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":111:5)
#loc106 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":113:9)
#loc107 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":120:9)
#loc108 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":113:13)
#loc109 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":113:21)
#loc110 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":114:9)
#loc111 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":116:9)
#loc112 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":118:9)
#loc113 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":115:26)
#loc114 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":115:32)
#loc115 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":115:13)
#loc116 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":119:23)
#loc117 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":119:13)
#loc118 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":121:9)
#loc119 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":122:5)
#loc120 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":124:19)
#loc121 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":124:9)
#loc122 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":125:9)
#loc123 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":130:1)
#loc124 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":157:1)
#loc125 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":132:5)
#loc126 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":132:9)
#loc127 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":134:13)
#loc128 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":134:12)
#loc129 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":134:5)
#loc130 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":135:5)
#loc131 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":145:5)
#loc132 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":135:12)
#loc133 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":137:5)
#loc134 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":139:19)
#loc135 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":139:9)
#loc136 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":140:9)
#loc137 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":141:5)
#loc138 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":143:16)
#loc139 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":143:9)
#loc140 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":144:9)
#loc141 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":146:5)
#loc142 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":156:5)
#loc143 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":146:12)
#loc144 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":148:5)
#loc145 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":150:22)
#loc146 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":150:28)
#loc147 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":150:9)
#loc148 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":151:9)
#loc149 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":152:5)
#loc150 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":154:19)
#loc151 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":154:9)
#loc152 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":155:9)
#loc153 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":160:1)
#loc154 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":187:1)
#loc155 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":162:5)
#loc156 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":162:9)
#loc157 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":164:13)
#loc158 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":164:12)
#loc159 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":164:5)
#loc160 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":165:5)
#loc161 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":175:5)
#loc162 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":165:12)
#loc163 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":167:5)
#loc164 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":169:16)
#loc165 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":169:9)
#loc166 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":170:9)
#loc167 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":171:5)
#loc168 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":173:19)
#loc169 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":173:9)
#loc170 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":174:9)
#loc171 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":176:5)
#loc172 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":186:5)
#loc173 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":176:12)
#loc174 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":178:5)
#loc175 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":180:22)
#loc176 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":180:28)
#loc177 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":180:9)
#loc178 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":181:9)
#loc179 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":182:5)
#loc180 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":184:19)
#loc181 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":184:9)
#loc182 = loc("CWE369_Divide_by_Zero__int_zero_divide_15.c":185:9)
#loc183 = loc(fused[#loc1, #loc2])
#loc184 = loc(fused[#loc4, #loc5])
#loc185 = loc(fused[#loc6, #loc7])
#loc186 = loc(fused[#loc8, #loc9])
#loc187 = loc(fused[#loc12, #loc10])
#loc188 = loc(fused[#loc13, #loc14])
#loc189 = loc(fused[#loc18, #loc17])
#loc190 = loc(fused[#loc23, #loc24])
#loc191 = loc(fused[#loc27, #loc28])
#loc192 = loc(fused[#loc35, #loc36])
#loc193 = loc(fused[#loc37, #loc38])
#loc194 = loc(fused[#loc39, #loc40])
#loc195 = loc(fused[#loc41, #loc42])
#loc196 = loc(fused[#loc43, #loc44])
#loc197 = loc(fused[#loc46, #loc47])
#loc198 = loc(fused[#loc48, #loc49])
#loc199 = loc(fused[#loc52, #loc50])
#loc200 = loc(fused[#loc53, #loc54])
#loc201 = loc(fused[#loc58, #loc57])
#loc202 = loc(fused[#loc64, #loc65])
#loc203 = loc(fused[#loc72, #loc73])
#loc204 = loc(fused[#loc74, #loc75])
#loc205 = loc(fused[#loc76, #loc77, #loc78, #loc73])
#loc206 = loc(fused[#loc79, #loc80])
#loc207 = loc(fused[#loc84, #loc85])
#loc208 = loc(fused[#loc86, #loc87])
#loc209 = loc(fused[#loc90, #loc88])
#loc210 = loc(fused[#loc91, #loc92])
#loc211 = loc(fused[#loc96, #loc95])
#loc212 = loc(fused[#loc102, #loc103])
#loc213 = loc(fused[#loc106, #loc107])
#loc214 = loc(fused[#loc108, #loc109])
#loc215 = loc(fused[#loc110, #loc111, #loc112, #loc107])
#loc216 = loc(fused[#loc113, #loc114])
#loc217 = loc(fused[#loc123, #loc124])
#loc218 = loc(fused[#loc125, #loc126])
#loc219 = loc(fused[#loc129, #loc127])
#loc220 = loc(fused[#loc130, #loc131])
#loc221 = loc(fused[#loc139, #loc138])
#loc222 = loc(fused[#loc141, #loc142])
#loc223 = loc(fused[#loc145, #loc146])
#loc224 = loc(fused[#loc153, #loc154])
#loc225 = loc(fused[#loc155, #loc156])
#loc226 = loc(fused[#loc159, #loc157])
#loc227 = loc(fused[#loc160, #loc161])
#loc228 = loc(fused[#loc165, #loc164])
#loc229 = loc(fused[#loc171, #loc172])
#loc230 = loc(fused[#loc175, #loc176])
