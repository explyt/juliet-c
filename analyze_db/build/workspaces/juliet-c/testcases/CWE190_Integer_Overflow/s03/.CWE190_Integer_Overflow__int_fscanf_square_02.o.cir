!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc172)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc173)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc174)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_02_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc176)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc12)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc177)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc16)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc16)
      cir.if %3 {
        %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc18)
        %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc173)
        %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc19)
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
        %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc18)
      } loc(#loc179)
    } loc(#loc178)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc22)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc22)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc183)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
          %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc28)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc183)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc29)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc30)
        } loc(#loc182)
      } loc(#loc181)
    } loc(#loc180)
    cir.return loc(#loc9)
  } loc(#loc175)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_02_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc185)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc186)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc187)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc188)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    cir.return loc(#loc32)
  } loc(#loc184)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc189)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc43)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc45)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc191)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc50)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc54)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc54)
      cir.if %3 {
        %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc56)
        %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc173)
        %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc57)
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc58)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc58)
        %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc56)
      } loc(#loc194)
    } loc(#loc193)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc61)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc61)
      cir.if %3 {
        %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc43)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc43)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc65)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc68)
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc69)
          %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc69)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc69)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc69)
          %9 = cir.cmp(gt, %4, %8) : !s32i, !cir.bool loc(#loc198)
          %10 = cir.ternary(%9, true {
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
            %12 = cir.abs %11 poison : !s32i loc(#loc72)
            %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc72)
            %14 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc73)
            %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc74)
            %16 = cir.cast(int_to_float, %15 : !s32i), !cir.double loc(#loc74)
            %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc73)
            %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc73)
            %19 = cir.cmp(lt, %13, %18) : !s64i, !cir.bool loc(#loc199)
            %20 = cir.ternary(%19, true {
              %21 = cir.const #true loc(#loc70)
              cir.yield %21 : !cir.bool loc(#loc70)
            }, false {
              %21 = cir.const #false loc(#loc70)
              cir.yield %21 : !cir.bool loc(#loc70)
            }) : (!cir.bool) -> !cir.bool loc(#loc70)
            cir.yield %20 : !cir.bool loc(#loc70)
          }, false {
            %11 = cir.const #false loc(#loc70)
            cir.yield %11 : !cir.bool loc(#loc70)
          }) : (!cir.bool) -> !cir.bool loc(#loc70)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc201)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc81)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc80)
            %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc81)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc201)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc82)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc83)
          } else {
            %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc45)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc45)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc84)
          } loc(#loc200)
        } loc(#loc197)
      } loc(#loc196)
    } loc(#loc195)
    cir.return loc(#loc47)
  } loc(#loc190)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc203)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc89)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc93)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc93)
      cir.if %3 {
        %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc95)
        %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc173)
        %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc96)
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc97)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc97)
        %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc95)
      } loc(#loc206)
    } loc(#loc205)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc100)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc100)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc104)
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc105)
          %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc105)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc105)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc105)
          %9 = cir.cmp(gt, %4, %8) : !s32i, !cir.bool loc(#loc210)
          %10 = cir.ternary(%9, true {
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc107)
            %12 = cir.abs %11 poison : !s32i loc(#loc108)
            %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc108)
            %14 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc109)
            %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc110)
            %16 = cir.cast(int_to_float, %15 : !s32i), !cir.double loc(#loc110)
            %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc109)
            %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc109)
            %19 = cir.cmp(lt, %13, %18) : !s64i, !cir.bool loc(#loc211)
            %20 = cir.ternary(%19, true {
              %21 = cir.const #true loc(#loc106)
              cir.yield %21 : !cir.bool loc(#loc106)
            }, false {
              %21 = cir.const #false loc(#loc106)
              cir.yield %21 : !cir.bool loc(#loc106)
            }) : (!cir.bool) -> !cir.bool loc(#loc106)
            cir.yield %20 : !cir.bool loc(#loc106)
          }, false {
            %11 = cir.const #false loc(#loc106)
            cir.yield %11 : !cir.bool loc(#loc106)
          }) : (!cir.bool) -> !cir.bool loc(#loc106)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc213)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
            %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc117)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc213)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc118)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc119)
          } else {
            %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc120)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc120)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc121)
          } loc(#loc212)
        } loc(#loc209)
      } loc(#loc208)
    } loc(#loc207)
    cir.return loc(#loc86)
  } loc(#loc202)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc215)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc126)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc216)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc130)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc130)
      cir.if %3 {
        %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc134)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc134)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc135)
      } else {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc136)
        cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc219)
      } loc(#loc218)
    } loc(#loc217)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc140)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc140)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc223)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc146)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc145)
          %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc146)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc223)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc147)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc148)
        } loc(#loc222)
      } loc(#loc221)
    } loc(#loc220)
    cir.return loc(#loc123)
  } loc(#loc214)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc225)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc153)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc226)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc157)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc157)
      cir.if %3 {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc159)
        cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc229)
      } loc(#loc228)
    } loc(#loc227)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc163)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc163)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc233)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc169)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc168)
          %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc169)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc233)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc170)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc171)
        } loc(#loc232)
      } loc(#loc231)
    } loc(#loc230)
    cir.return loc(#loc150)
  } loc(#loc224)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_02.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":32:23)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":24:1)
#loc9 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":42:1)
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":26:5)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":26:9)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":28:12)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":28:5)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":29:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":33:5)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":29:8)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":30:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":32:9)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":32:16)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":34:5)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":41:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":34:8)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":35:5)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":36:9)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":40:9)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":38:13)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":38:33)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":38:26)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":39:26)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":39:13)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":152:1)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":158:1)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":154:5)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":154:14)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":155:5)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":155:14)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":156:5)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":156:14)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":157:5)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":157:14)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":62:19)
#loc44 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc45 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":74:23)
#loc46 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":49:1)
#loc47 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":77:1)
#loc48 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":51:5)
#loc49 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":51:9)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":53:12)
#loc51 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":53:5)
#loc52 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":54:5)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":58:5)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":54:8)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":55:5)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":57:9)
#loc57 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":57:16)
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":57:23)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":59:5)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":76:5)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":59:8)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":60:5)
#loc63 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":63:5)
#loc64 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":65:5)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":62:9)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":67:9)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":75:9)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":67:13)
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":67:20)
#loc70 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":67:28)
#loc71 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":67:35)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":67:31)
#loc73 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":67:49)
#loc74 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":67:62)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":67:69)
#loc76 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":68:9)
#loc77 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":71:9)
#loc78 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":73:9)
#loc79 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":69:13)
#loc80 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":69:33)
#loc81 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":69:26)
#loc82 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":70:26)
#loc83 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":70:13)
#loc84 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":74:13)
#loc85 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":80:1)
#loc86 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":103:1)
#loc87 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":82:5)
#loc88 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":82:9)
#loc89 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":84:12)
#loc90 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":84:5)
#loc91 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":85:5)
#loc92 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":89:5)
#loc93 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":85:8)
#loc94 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":86:5)
#loc95 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":88:9)
#loc96 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":88:16)
#loc97 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":88:23)
#loc98 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":90:5)
#loc99 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":102:5)
#loc100 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":90:8)
#loc101 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":91:5)
#loc102 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":93:9)
#loc103 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":101:9)
#loc104 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":93:13)
#loc105 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":93:20)
#loc106 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":93:28)
#loc107 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":93:35)
#loc108 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":93:31)
#loc109 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":93:49)
#loc110 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":93:62)
#loc111 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":93:69)
#loc112 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":94:9)
#loc113 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":97:9)
#loc114 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":99:9)
#loc115 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":95:13)
#loc116 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":95:33)
#loc117 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":95:26)
#loc118 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":96:26)
#loc119 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":96:13)
#loc120 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":100:23)
#loc121 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":100:13)
#loc122 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":106:1)
#loc123 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":129:1)
#loc124 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":108:5)
#loc125 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":108:9)
#loc126 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":110:12)
#loc127 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":110:5)
#loc128 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":111:5)
#loc129 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":120:5)
#loc130 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":111:8)
#loc131 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":112:5)
#loc132 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":115:5)
#loc133 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":117:5)
#loc134 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":114:19)
#loc135 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":114:9)
#loc136 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":119:16)
#loc137 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":119:9)
#loc138 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":121:5)
#loc139 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":128:5)
#loc140 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":121:8)
#loc141 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":122:5)
#loc142 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":123:9)
#loc143 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":127:9)
#loc144 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":125:13)
#loc145 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":125:33)
#loc146 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":125:26)
#loc147 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":126:26)
#loc148 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":126:13)
#loc149 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":132:1)
#loc150 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":150:1)
#loc151 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":134:5)
#loc152 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":134:9)
#loc153 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":136:12)
#loc154 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":136:5)
#loc155 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":137:5)
#loc156 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":141:5)
#loc157 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":137:8)
#loc158 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":138:5)
#loc159 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":140:16)
#loc160 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":140:9)
#loc161 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":142:5)
#loc162 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":149:5)
#loc163 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":142:8)
#loc164 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":143:5)
#loc165 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":144:9)
#loc166 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":148:9)
#loc167 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":146:13)
#loc168 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":146:33)
#loc169 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":146:26)
#loc170 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":147:26)
#loc171 = loc("CWE190_Integer_Overflow__int_fscanf_square_02.c":147:13)
#loc172 = loc(fused[#loc1, #loc2])
#loc173 = loc(fused[#loc3, #loc4])
#loc174 = loc(fused[#loc6, #loc7])
#loc175 = loc(fused[#loc8, #loc9])
#loc176 = loc(fused[#loc10, #loc11])
#loc177 = loc(fused[#loc13, #loc12])
#loc178 = loc(fused[#loc14, #loc15])
#loc179 = loc(fused[#loc17, #loc15])
#loc180 = loc(fused[#loc20, #loc21])
#loc181 = loc(fused[#loc23, #loc21])
#loc182 = loc(fused[#loc24, #loc25])
#loc183 = loc(fused[#loc26, #loc27])
#loc184 = loc(fused[#loc31, #loc32])
#loc185 = loc(fused[#loc33, #loc34])
#loc186 = loc(fused[#loc35, #loc36])
#loc187 = loc(fused[#loc37, #loc38])
#loc188 = loc(fused[#loc39, #loc40])
#loc189 = loc(fused[#loc41, #loc42])
#loc190 = loc(fused[#loc46, #loc47])
#loc191 = loc(fused[#loc48, #loc49])
#loc192 = loc(fused[#loc51, #loc50])
#loc193 = loc(fused[#loc52, #loc53])
#loc194 = loc(fused[#loc55, #loc53])
#loc195 = loc(fused[#loc59, #loc60])
#loc196 = loc(fused[#loc62, #loc63, #loc64, #loc60])
#loc197 = loc(fused[#loc66, #loc67])
#loc198 = loc(fused[#loc68, #loc69])
#loc199 = loc(fused[#loc72, #loc75])
#loc200 = loc(fused[#loc76, #loc77, #loc78, #loc67])
#loc201 = loc(fused[#loc79, #loc80])
#loc202 = loc(fused[#loc85, #loc86])
#loc203 = loc(fused[#loc87, #loc88])
#loc204 = loc(fused[#loc90, #loc89])
#loc205 = loc(fused[#loc91, #loc92])
#loc206 = loc(fused[#loc94, #loc92])
#loc207 = loc(fused[#loc98, #loc99])
#loc208 = loc(fused[#loc101, #loc99])
#loc209 = loc(fused[#loc102, #loc103])
#loc210 = loc(fused[#loc104, #loc105])
#loc211 = loc(fused[#loc108, #loc111])
#loc212 = loc(fused[#loc112, #loc113, #loc114, #loc103])
#loc213 = loc(fused[#loc115, #loc116])
#loc214 = loc(fused[#loc122, #loc123])
#loc215 = loc(fused[#loc124, #loc125])
#loc216 = loc(fused[#loc127, #loc126])
#loc217 = loc(fused[#loc128, #loc129])
#loc218 = loc(fused[#loc131, #loc132, #loc133, #loc129])
#loc219 = loc(fused[#loc137, #loc136])
#loc220 = loc(fused[#loc138, #loc139])
#loc221 = loc(fused[#loc141, #loc139])
#loc222 = loc(fused[#loc142, #loc143])
#loc223 = loc(fused[#loc144, #loc145])
#loc224 = loc(fused[#loc149, #loc150])
#loc225 = loc(fused[#loc151, #loc152])
#loc226 = loc(fused[#loc154, #loc153])
#loc227 = loc(fused[#loc155, #loc156])
#loc228 = loc(fused[#loc158, #loc156])
#loc229 = loc(fused[#loc160, #loc159])
#loc230 = loc(fused[#loc161, #loc162])
#loc231 = loc(fused[#loc164, #loc162])
#loc232 = loc(fused[#loc165, #loc166])
#loc233 = loc(fused[#loc167, #loc168])
