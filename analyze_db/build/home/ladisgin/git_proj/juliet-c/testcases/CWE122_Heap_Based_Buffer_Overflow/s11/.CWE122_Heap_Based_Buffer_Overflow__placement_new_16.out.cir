!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc5 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc67 = loc("../../../testcasesupport/std_testcase.h":68:7)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":146:10)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":146:14)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":146:20)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":146:32)
!ty_OneIntClass = !cir.struct<class "OneIntClass" {!s32i} #cir.record.decl.ast>
!ty_TwoIntsClass = !cir.struct<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
#loc283 = loc(fused[#loc193, #loc194])
#loc284 = loc(fused[#loc195, #loc196])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc209)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc210)
  cir.func linkonce_odr @_ZN12TwoIntsClassC2Ev(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc5)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc5)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc5)
    cir.return loc(#loc5)
  } loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc211)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc212)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_163badEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc214)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc215)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc216)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc18)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc217)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc18)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc218)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc215)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc24)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc220)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc26)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc28)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc26)
      } loc(#loc221)
    } loc(#loc219)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc29)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc222)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc29)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc223)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc216)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc34)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc35)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc225)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc37)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc38)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc39)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc37)
      } loc(#loc226)
    } loc(#loc224)
    cir.scope {
      cir.while {
        %11 = cir.const #cir.int<1> : !s32i loc(#loc42)
        %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc42)
        cir.condition(%12) loc(#loc42)
      } do {
        %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc43)
        cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc228)
        cir.break loc(#loc45)
      } loc(#loc227)
    } loc(#loc227)
    cir.scope {
      cir.while {
        %11 = cir.const #cir.int<1> : !s32i loc(#loc48)
        %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc48)
        cir.condition(%12) loc(#loc48)
      } do {
        cir.scope {
          %11 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc231)
          %12 = cir.const #cir.int<8> : !u64i loc(#loc232)
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc54)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc54)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc232)
          cir.call @_ZN12TwoIntsClassC2Ev(%15) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc52)
          cir.store %15, %11 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc231)
          %16 = cir.const #cir.int<5> : !s32i loc(#loc55)
          %17 = cir.load %11 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc56)
          %18 = cir.get_member %17[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc57)
          cir.store %16, %18 : !s32i, !cir.ptr<!s32i> loc(#loc233)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc58)
          %20 = cir.load %11 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc59)
          %21 = cir.get_member %20[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc60)
          cir.store %19, %21 : !s32i, !cir.ptr<!s32i> loc(#loc234)
          %22 = cir.load %11 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc61)
          %23 = cir.get_member %22[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc57)
          %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc62)
          cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc63)
          %25 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc64)
          %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc65)
          %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc65)
          cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc64)
        } loc(#loc230)
        cir.break loc(#loc66)
      } loc(#loc229)
    } loc(#loc229)
    cir.return loc(#loc11)
  } loc(#loc213)
  cir.func linkonce_odr @_ZN11OneIntClassC2Ev(%arg0: !cir.ptr<!ty_OneIntClass> loc("../../../testcasesupport/std_testcase.h":68:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["this", init] {alignment = 8 : i64} loc(#loc67)
    cir.store %arg0, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc67)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc67)
    cir.return loc(#loc67)
  } loc(#loc67)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_16L7goodB2GEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc236)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc237)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc238)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc76)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc239)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc76)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc240)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc237)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc81)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc82)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc242)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc84)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc85)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc86)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc84)
      } loc(#loc243)
    } loc(#loc241)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc87)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc244)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc87)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc245)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc238)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc92)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc93)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc247)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc95)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc96)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc97)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc95)
      } loc(#loc248)
    } loc(#loc246)
    cir.scope {
      cir.while {
        %11 = cir.const #cir.int<1> : !s32i loc(#loc100)
        %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc100)
        cir.condition(%12) loc(#loc100)
      } do {
        %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc101)
        cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc250)
        cir.break loc(#loc103)
      } loc(#loc249)
    } loc(#loc249)
    cir.scope {
      cir.while {
        %11 = cir.const #cir.int<1> : !s32i loc(#loc106)
        %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc106)
        cir.condition(%12) loc(#loc106)
      } do {
        cir.scope {
          %11 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc253)
          %12 = cir.const #cir.int<4> : !u64i loc(#loc254)
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc112)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc112)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc254)
          cir.call @_ZN11OneIntClassC2Ev(%15) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc110)
          cir.store %15, %11 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc253)
          %16 = cir.const #cir.int<5> : !s32i loc(#loc113)
          %17 = cir.load %11 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc114)
          %18 = cir.get_member %17[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc115)
          cir.store %16, %18 : !s32i, !cir.ptr<!s32i> loc(#loc255)
          %19 = cir.load %11 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc116)
          %20 = cir.get_member %19[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc115)
          %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc117)
          cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc118)
          %22 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc119)
          %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc120)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc120)
          cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc119)
        } loc(#loc252)
        cir.break loc(#loc121)
      } loc(#loc251)
    } loc(#loc251)
    cir.return loc(#loc69)
  } loc(#loc235)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_16L7goodG2BEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc257)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc258)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc259)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc130)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc260)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc130)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc261)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc258)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc135)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc136)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc263)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc138)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc139)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc140)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc138)
      } loc(#loc264)
    } loc(#loc262)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc141)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc265)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc141)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc266)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc259)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc146)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc147)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc268)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc149)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc150)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc151)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc149)
      } loc(#loc269)
    } loc(#loc267)
    cir.scope {
      cir.while {
        %11 = cir.const #cir.int<1> : !s32i loc(#loc154)
        %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc154)
        cir.condition(%12) loc(#loc154)
      } do {
        %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc155)
        cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc271)
        cir.break loc(#loc157)
      } loc(#loc270)
    } loc(#loc270)
    cir.scope {
      cir.while {
        %11 = cir.const #cir.int<1> : !s32i loc(#loc160)
        %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc160)
        cir.condition(%12) loc(#loc160)
      } do {
        cir.scope {
          %11 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc274)
          %12 = cir.const #cir.int<8> : !u64i loc(#loc275)
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc166)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc166)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc275)
          cir.call @_ZN12TwoIntsClassC2Ev(%15) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc164)
          cir.store %15, %11 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc274)
          %16 = cir.const #cir.int<5> : !s32i loc(#loc167)
          %17 = cir.load %11 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc168)
          %18 = cir.get_member %17[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc57)
          cir.store %16, %18 : !s32i, !cir.ptr<!s32i> loc(#loc276)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc169)
          %20 = cir.load %11 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc170)
          %21 = cir.get_member %20[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc60)
          cir.store %19, %21 : !s32i, !cir.ptr<!s32i> loc(#loc277)
          %22 = cir.load %11 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc171)
          %23 = cir.get_member %22[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc57)
          %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc172)
          cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc173)
          %25 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc174)
          %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc175)
          %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc175)
          cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc174)
        } loc(#loc273)
        cir.break loc(#loc176)
      } loc(#loc272)
    } loc(#loc272)
    cir.return loc(#loc123)
  } loc(#loc256)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_164goodEv() extra(#fn_attr2) {
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_16L7goodB2GEv() : () -> () loc(#loc179)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_16L7goodG2BEv() : () -> () loc(#loc180)
    cir.return loc(#loc178)
  } loc(#loc278)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc279)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc280)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc281)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc187)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc188)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc189)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc190)
  cir.func @main(%arg0: !s32i loc(fused[#loc193, #loc194]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc195, #loc196])) -> !s32i extra(#fn_attr2) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc283)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc284)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc192)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc197)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc198)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc199)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc199)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc200)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc187)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc187)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc201)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_164goodEv() : () -> () loc(#loc202)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc188)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc188)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc203)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc189)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc189)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc204)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_163badEv() : () -> () loc(#loc205)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc190)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc190)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc206)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc207)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc285)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc285)
    cir.return %15 : !s32i loc(#loc285)
  } loc(#loc282)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("/usr/include/stdlib.h":687:1)
#loc9 = loc("/usr/include/stdlib.h":687:32)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":24:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":55:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":26:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":26:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":27:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":27:62)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":29:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":29:64)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":27:36)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":27:43)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":27:61)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":28:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":28:42)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":28:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":28:26)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":28:32)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":28:33)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":28:39)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":28:38)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":29:37)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":29:44)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":29:63)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":30:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":30:43)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":30:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":30:27)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":30:33)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":30:34)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":30:40)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":30:39)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":31:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":36:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":31:11)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":34:16)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":34:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":35:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":37:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":54:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":37:11)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":39:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":52:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":45:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":45:49)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":45:39)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":45:43)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":47:32)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":47:13)
#loc57 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":48:32)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":48:13)
#loc60 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":49:26)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":49:36)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":49:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":51:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":51:18)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":53:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":62:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":91:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":64:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":64:12)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":65:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":65:62)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":67:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":67:64)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":65:36)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":65:43)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":65:61)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":66:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":66:42)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":66:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":66:26)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":66:32)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":66:33)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":66:39)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":66:38)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":67:37)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":67:44)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":67:63)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":68:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":68:43)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":68:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":68:27)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":68:33)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":68:34)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":68:40)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":68:39)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":69:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":74:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":69:11)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":72:16)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":72:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":73:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":75:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":90:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":75:11)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":77:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":88:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":83:13)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":83:48)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":83:38)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":83:42)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":85:32)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":85:13)
#loc115 = loc("../../../testcasesupport/std_testcase.h":71:13)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":86:26)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":86:36)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":86:13)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":87:13)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":87:18)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":89:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":94:1)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":125:1)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":96:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":96:12)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":97:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":97:62)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":99:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":99:64)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":97:36)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":97:43)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":97:61)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":98:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":98:42)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":98:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":98:26)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":98:32)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":98:33)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":98:39)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":98:38)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":99:37)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":99:44)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":99:63)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":100:5)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":100:43)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":100:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":100:27)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":100:33)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":100:34)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":100:40)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":100:39)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":101:5)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":106:5)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":101:11)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":104:16)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":104:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":105:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":107:5)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":124:5)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":107:11)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":109:9)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":122:9)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":115:13)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":115:49)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":115:39)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":115:43)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":117:32)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":117:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":118:32)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":118:13)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":119:26)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":119:36)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":119:13)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":121:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":121:18)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":123:9)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":127:1)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":131:1)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":129:5)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":130:5)
#loc181 = loc("/usr/include/stdlib.h":575:1)
#loc182 = loc("/usr/include/stdlib.h":575:41)
#loc183 = loc("/usr/include/time.h":76:1)
#loc184 = loc("/usr/include/time.h":76:38)
#loc185 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc186 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":151:15)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":153:15)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":156:15)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":158:15)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":146:1)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":161:1)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":147:1)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":149:27)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":149:22)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":149:5)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":151:5)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":152:5)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":153:5)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":156:5)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":157:5)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":158:5)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":160:12)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_16.cpp":160:5)
#loc209 = loc(fused[#loc1, #loc2])
#loc210 = loc(fused[#loc3, #loc4])
#loc211 = loc(fused[#loc6, #loc7])
#loc212 = loc(fused[#loc8, #loc9])
#loc213 = loc(fused[#loc10, #loc11])
#loc214 = loc(fused[#loc12, #loc13])
#loc215 = loc(fused[#loc14, #loc15])
#loc216 = loc(fused[#loc16, #loc17])
#loc217 = loc(fused[#loc19, #loc20])
#loc218 = loc(fused[#loc18, #loc15])
#loc219 = loc(fused[#loc21, #loc22])
#loc220 = loc(fused[#loc23, #loc24])
#loc221 = loc(fused[#loc25, #loc22])
#loc222 = loc(fused[#loc30, #loc31])
#loc223 = loc(fused[#loc29, #loc17])
#loc224 = loc(fused[#loc32, #loc33])
#loc225 = loc(fused[#loc34, #loc35])
#loc226 = loc(fused[#loc36, #loc33])
#loc227 = loc(fused[#loc40, #loc41])
#loc228 = loc(fused[#loc44, #loc43])
#loc229 = loc(fused[#loc46, #loc47])
#loc230 = loc(fused[#loc49, #loc50])
#loc231 = loc(fused[#loc51, #loc52])
#loc232 = loc(fused[#loc53, #loc52])
#loc233 = loc(fused[#loc56, #loc55])
#loc234 = loc(fused[#loc59, #loc58])
#loc235 = loc(fused[#loc68, #loc69])
#loc236 = loc(fused[#loc70, #loc71])
#loc237 = loc(fused[#loc72, #loc73])
#loc238 = loc(fused[#loc74, #loc75])
#loc239 = loc(fused[#loc77, #loc78])
#loc240 = loc(fused[#loc76, #loc73])
#loc241 = loc(fused[#loc79, #loc80])
#loc242 = loc(fused[#loc81, #loc82])
#loc243 = loc(fused[#loc83, #loc80])
#loc244 = loc(fused[#loc88, #loc89])
#loc245 = loc(fused[#loc87, #loc75])
#loc246 = loc(fused[#loc90, #loc91])
#loc247 = loc(fused[#loc92, #loc93])
#loc248 = loc(fused[#loc94, #loc91])
#loc249 = loc(fused[#loc98, #loc99])
#loc250 = loc(fused[#loc102, #loc101])
#loc251 = loc(fused[#loc104, #loc105])
#loc252 = loc(fused[#loc107, #loc108])
#loc253 = loc(fused[#loc109, #loc110])
#loc254 = loc(fused[#loc111, #loc110])
#loc255 = loc(fused[#loc114, #loc113])
#loc256 = loc(fused[#loc122, #loc123])
#loc257 = loc(fused[#loc124, #loc125])
#loc258 = loc(fused[#loc126, #loc127])
#loc259 = loc(fused[#loc128, #loc129])
#loc260 = loc(fused[#loc131, #loc132])
#loc261 = loc(fused[#loc130, #loc127])
#loc262 = loc(fused[#loc133, #loc134])
#loc263 = loc(fused[#loc135, #loc136])
#loc264 = loc(fused[#loc137, #loc134])
#loc265 = loc(fused[#loc142, #loc143])
#loc266 = loc(fused[#loc141, #loc129])
#loc267 = loc(fused[#loc144, #loc145])
#loc268 = loc(fused[#loc146, #loc147])
#loc269 = loc(fused[#loc148, #loc145])
#loc270 = loc(fused[#loc152, #loc153])
#loc271 = loc(fused[#loc156, #loc155])
#loc272 = loc(fused[#loc158, #loc159])
#loc273 = loc(fused[#loc161, #loc162])
#loc274 = loc(fused[#loc163, #loc164])
#loc275 = loc(fused[#loc165, #loc164])
#loc276 = loc(fused[#loc168, #loc167])
#loc277 = loc(fused[#loc170, #loc169])
#loc278 = loc(fused[#loc177, #loc178])
#loc279 = loc(fused[#loc181, #loc182])
#loc280 = loc(fused[#loc183, #loc184])
#loc281 = loc(fused[#loc185, #loc186])
#loc282 = loc(fused[#loc191, #loc192])
#loc285 = loc(fused[#loc208, #loc207])
