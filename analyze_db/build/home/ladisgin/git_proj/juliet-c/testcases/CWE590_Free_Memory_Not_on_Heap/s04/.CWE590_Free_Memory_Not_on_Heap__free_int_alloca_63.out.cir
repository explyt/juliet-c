!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc50 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":91:10)
#loc51 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":91:14)
#loc52 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":91:20)
#loc53 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":91:32)
#loc139 = loc(fused[#loc50, #loc51])
#loc140 = loc(fused[#loc52, #loc53])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE590_Free_Memory_Not_on_Heap/s04/CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63b_badSink(!cir.ptr<!cir.ptr<!s32i>>) loc(#loc118)
  cir.func no_proto @CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc120)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc7)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc121)
    cir.scope {
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc123)
      %3 = cir.const #cir.int<100> : !s32i loc(#loc12)
      %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc12)
      %5 = cir.const #cir.int<4> : !u64i loc(#loc12)
      %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc12)
      %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc12)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc123)
      cir.scope {
        %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc125)
        cir.scope {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc19)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc19)
          cir.store %13, %11 : !u64i, !cir.ptr<!u64i> loc(#loc127)
          cir.for : cond {
            %14 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc21)
            %15 = cir.const #cir.int<100> : !s32i loc(#loc22)
            %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc22)
            %17 = cir.cmp(lt, %14, %16) : !u64i, !cir.bool loc(#loc128)
            cir.condition(%17) loc(#loc23)
          } body {
            cir.scope {
              %14 = cir.const #cir.int<5> : !s32i loc(#loc25)
              %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
              %16 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc27)
              %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !u64i), !cir.ptr<!s32i> loc(#loc28)
              cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc130)
            } loc(#loc129)
            cir.yield loc(#loc18)
          } step {
            %14 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc29)
            %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc30)
            cir.store %15, %11 : !u64i, !cir.ptr<!u64i> loc(#loc131)
            cir.yield loc(#loc126)
          } loc(#loc126)
        } loc(#loc126)
      } loc(#loc124)
      %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc31)
      cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc132)
    } loc(#loc122)
    cir.call @CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63b_badSink(%0) : (!cir.ptr<!cir.ptr<!s32i>>) -> () loc(#loc33)
    cir.return loc(#loc4)
  } loc(#loc119)
  cir.func no_proto @CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc134)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc35)
  } loc(#loc133)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc135)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc136)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc137)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc47)
  cir.func @main(%arg0: !s32i loc(fused[#loc50, #loc51]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc52, #loc53])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc139)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc140)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc49)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc54)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc54)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc55)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc56)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc56)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc57)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc44)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %8 = cir.get_global @CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63_good : !cir.ptr<!cir.func<!void ()>> loc(#loc141)
    cir.call @CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63_good() : () -> () loc(#loc59)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc45)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc46)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %13 = cir.get_global @CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc142)
    cir.call @CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63_bad() : () -> () loc(#loc63)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc47)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc66)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc143)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc143)
    cir.return %17 : !s32i loc(#loc143)
  } loc(#loc138)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc144)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"malloc() failed\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc70)
  cir.func private @exit(!s32i) extra(#fn_attr1) loc(#loc145)
  cir.func private @CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63b_goodG2BSink(!cir.ptr<!cir.ptr<!s32i>>) loc(#loc146)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc148)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc79)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc149)
    cir.scope {
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc151)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc85)
      %4 = cir.const #cir.int<100> : !s32i loc(#loc86)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc86)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc152)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc153)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc85)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc154)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc151)
      cir.scope {
        %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc91)
        %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc92)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc92)
        %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s32i>, !cir.bool loc(#loc156)
        cir.if %14 {
          %15 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc70)
          %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc70)
          cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc94)
          %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc95)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc96)
          cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr1) loc(#loc95)
        } loc(#loc157)
      } loc(#loc155)
      cir.scope {
        %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc159)
        cir.scope {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc103)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc103)
          cir.store %13, %11 : !u64i, !cir.ptr<!u64i> loc(#loc161)
          cir.for : cond {
            %14 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc105)
            %15 = cir.const #cir.int<100> : !s32i loc(#loc106)
            %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc106)
            %17 = cir.cmp(lt, %14, %16) : !u64i, !cir.bool loc(#loc162)
            cir.condition(%17) loc(#loc107)
          } body {
            cir.scope {
              %14 = cir.const #cir.int<5> : !s32i loc(#loc109)
              %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc110)
              %16 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc111)
              %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !u64i), !cir.ptr<!s32i> loc(#loc112)
              cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc164)
            } loc(#loc163)
            cir.yield loc(#loc102)
          } step {
            %14 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc113)
            %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc114)
            cir.store %15, %11 : !u64i, !cir.ptr<!u64i> loc(#loc165)
            cir.yield loc(#loc160)
          } loc(#loc160)
        } loc(#loc160)
      } loc(#loc158)
      %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc115)
      cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc166)
    } loc(#loc150)
    cir.call @CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63b_goodG2BSink(%0) : (!cir.ptr<!cir.ptr<!s32i>>) -> () loc(#loc117)
    cir.return loc(#loc76)
  } loc(#loc147)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE590_Free_Memory_Not_on_Heap/s04/CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":0:0)
#loc1 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":24:1)
#loc2 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":24:81)
#loc3 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":26:1)
#loc4 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":43:1)
#loc5 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":28:5)
#loc6 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":28:11)
#loc7 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":29:12)
#loc8 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":29:5)
#loc9 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":30:5)
#loc10 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":41:5)
#loc11 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":32:9)
#loc12 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":32:35)
#loc13 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":33:9)
#loc14 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":39:9)
#loc15 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":34:13)
#loc16 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":34:20)
#loc17 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":35:13)
#loc18 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":38:13)
#loc19 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":35:22)
#loc20 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":35:18)
#loc21 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":35:25)
#loc22 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":35:29)
#loc23 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":35:27)
#loc24 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":36:13)
#loc25 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":37:33)
#loc26 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":37:17)
#loc27 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":37:28)
#loc28 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":37:29)
#loc29 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":35:35)
#loc30 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":35:34)
#loc31 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":40:16)
#loc32 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":40:9)
#loc33 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":42:5)
#loc34 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":76:1)
#loc35 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":79:1)
#loc36 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":78:5)
#loc37 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":78:13)
#loc38 = loc("/usr/include/stdlib.h":575:1)
#loc39 = loc("/usr/include/stdlib.h":575:41)
#loc40 = loc("/usr/include/time.h":76:1)
#loc41 = loc("/usr/include/time.h":76:38)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":96:15)
#loc45 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":98:15)
#loc46 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":101:15)
#loc47 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":103:15)
#loc48 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":91:1)
#loc49 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":106:1)
#loc54 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":92:1)
#loc55 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":94:27)
#loc56 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":94:22)
#loc57 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":94:5)
#loc58 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":96:5)
#loc59 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":97:5)
#loc60 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":97:61)
#loc61 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":98:5)
#loc62 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":101:5)
#loc63 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":102:5)
#loc64 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":102:60)
#loc65 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":103:5)
#loc66 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":105:12)
#loc67 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":105:5)
#loc68 = loc("/usr/include/stdlib.h":672:1)
#loc69 = loc("/usr/include/stdlib.h":672:45)
#loc70 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":61:23)
#loc71 = loc("/usr/include/stdlib.h":756:1)
#loc72 = loc("/usr/include/stdlib.h":756:70)
#loc73 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":50:1)
#loc74 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":50:82)
#loc75 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":52:1)
#loc76 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":74:1)
#loc77 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":54:5)
#loc78 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":54:11)
#loc79 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":55:12)
#loc80 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":55:5)
#loc81 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":56:5)
#loc82 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":72:5)
#loc83 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":58:9)
#loc84 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":58:57)
#loc85 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":58:35)
#loc86 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":58:42)
#loc87 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":58:46)
#loc88 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":58:56)
#loc89 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":59:9)
#loc90 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":63:9)
#loc91 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":59:13)
#loc92 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":59:27)
#loc93 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":60:9)
#loc94 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":61:13)
#loc95 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":62:13)
#loc96 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":62:18)
#loc97 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":64:9)
#loc98 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":70:9)
#loc99 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":65:13)
#loc100 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":65:20)
#loc101 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":66:13)
#loc102 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":69:13)
#loc103 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":66:22)
#loc104 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":66:18)
#loc105 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":66:25)
#loc106 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":66:29)
#loc107 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":66:27)
#loc108 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":67:13)
#loc109 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":68:33)
#loc110 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":68:17)
#loc111 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":68:28)
#loc112 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":68:29)
#loc113 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":66:35)
#loc114 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":66:34)
#loc115 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":71:16)
#loc116 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":71:9)
#loc117 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_63a.c":73:5)
#loc118 = loc(fused[#loc1, #loc2])
#loc119 = loc(fused[#loc3, #loc4])
#loc120 = loc(fused[#loc5, #loc6])
#loc121 = loc(fused[#loc8, #loc7])
#loc122 = loc(fused[#loc9, #loc10])
#loc123 = loc(fused[#loc11, #loc12])
#loc124 = loc(fused[#loc13, #loc14])
#loc125 = loc(fused[#loc15, #loc16])
#loc126 = loc(fused[#loc17, #loc18])
#loc127 = loc(fused[#loc20, #loc19])
#loc128 = loc(fused[#loc21, #loc22])
#loc129 = loc(fused[#loc24, #loc18])
#loc130 = loc(fused[#loc26, #loc25])
#loc131 = loc(fused[#loc30, #loc29])
#loc132 = loc(fused[#loc32, #loc31])
#loc133 = loc(fused[#loc34, #loc35])
#loc134 = loc(fused[#loc36, #loc37])
#loc135 = loc(fused[#loc38, #loc39])
#loc136 = loc(fused[#loc40, #loc41])
#loc137 = loc(fused[#loc42, #loc43])
#loc138 = loc(fused[#loc48, #loc49])
#loc141 = loc(fused[#loc59, #loc60])
#loc142 = loc(fused[#loc63, #loc64])
#loc143 = loc(fused[#loc67, #loc66])
#loc144 = loc(fused[#loc68, #loc69])
#loc145 = loc(fused[#loc71, #loc72])
#loc146 = loc(fused[#loc73, #loc74])
#loc147 = loc(fused[#loc75, #loc76])
#loc148 = loc(fused[#loc77, #loc78])
#loc149 = loc(fused[#loc80, #loc79])
#loc150 = loc(fused[#loc81, #loc82])
#loc151 = loc(fused[#loc83, #loc84])
#loc152 = loc(fused[#loc87, #loc88])
#loc153 = loc(fused[#loc86, #loc88])
#loc154 = loc(fused[#loc85, #loc84])
#loc155 = loc(fused[#loc89, #loc90])
#loc156 = loc(fused[#loc91, #loc92])
#loc157 = loc(fused[#loc93, #loc90])
#loc158 = loc(fused[#loc97, #loc98])
#loc159 = loc(fused[#loc99, #loc100])
#loc160 = loc(fused[#loc101, #loc102])
#loc161 = loc(fused[#loc104, #loc103])
#loc162 = loc(fused[#loc105, #loc106])
#loc163 = loc(fused[#loc108, #loc102])
#loc164 = loc(fused[#loc110, #loc109])
#loc165 = loc(fused[#loc114, #loc113])
#loc166 = loc(fused[#loc116, #loc115])
