!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_multiply_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc185)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc186)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc187)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%hd\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printIntLine(!s32i) loc(#loc188)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc189)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc12)
  cir.func no_proto @CWE190_Integer_Overflow__short_fscanf_multiply_12_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc191)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc17)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc17)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc192)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc194)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc194)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc21)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc21)
      cir.if %6 {
        %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc26)
        %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc187)
        %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc27)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc7)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc7)
        %12 = cir.call @__isoc99_fscanf(%9, %11, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc26)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc28)
        %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc28)
        cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc196)
      } loc(#loc195)
    } loc(#loc193)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc198)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc198)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc32)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc32)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc39)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc39)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc40)
          %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc201)
          cir.if %10 {
            %11 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc203)
            %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc44)
            %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc44)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc43)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc44)
            %16 = cir.cast(integral, %15 : !s32i), !s16i loc(#loc44)
            cir.store %16, %11 : !s16i, !cir.ptr<!s16i> loc(#loc203)
            %17 = cir.load %11 : !cir.ptr<!s16i>, !s16i loc(#loc45)
            %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc45)
            cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc46)
          } loc(#loc202)
        } loc(#loc200)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc49)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc49)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc50)
          %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc205)
          cir.if %10 {
            cir.scope {
              %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc54)
              %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc54)
              %13 = cir.const #cir.int<32767> : !s32i loc(#loc55)
              %14 = cir.const #cir.int<2> : !s32i loc(#loc56)
              %15 = cir.binop(div, %13, %14) : !s32i loc(#loc208)
              %16 = cir.cmp(lt, %12, %15) : !s32i, !cir.bool loc(#loc209)
              cir.if %16 {
                %17 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc211)
                %18 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc63)
                %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc63)
                %20 = cir.const #cir.int<2> : !s32i loc(#loc62)
                %21 = cir.binop(mul, %19, %20) nsw : !s32i loc(#loc63)
                %22 = cir.cast(integral, %21 : !s32i), !s16i loc(#loc63)
                cir.store %22, %17 : !s16i, !cir.ptr<!s16i> loc(#loc211)
                %23 = cir.load %17 : !cir.ptr<!s16i>, !s16i loc(#loc64)
                %24 = cir.cast(integral, %23 : !s16i), !s32i loc(#loc64)
                cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc65)
              } else {
                %17 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc12)
                %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc12)
                cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc66)
              } loc(#loc210)
            } loc(#loc207)
          } loc(#loc206)
        } loc(#loc204)
      } loc(#loc199)
    } loc(#loc197)
    cir.return loc(#loc14)
  } loc(#loc190)
  cir.func no_proto @CWE190_Integer_Overflow__short_fscanf_multiply_12_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc213)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc69)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc214)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc71)
    cir.return loc(#loc68)
  } loc(#loc212)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc216)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc77)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc77)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc217)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc219)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc219)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc81)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc81)
      cir.if %6 {
        %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc86)
        %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc187)
        %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc87)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc88)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc88)
        %12 = cir.call @__isoc99_fscanf(%9, %11, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc86)
      } else {
        %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc89)
        %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc187)
        %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc90)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc91)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc91)
        %12 = cir.call @__isoc99_fscanf(%9, %11, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc89)
      } loc(#loc220)
    } loc(#loc218)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc222)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc222)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc94)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc94)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc101)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc101)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc102)
          %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc225)
          cir.if %10 {
            cir.scope {
              %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc106)
              %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc106)
              %13 = cir.const #cir.int<32767> : !s32i loc(#loc107)
              %14 = cir.const #cir.int<2> : !s32i loc(#loc108)
              %15 = cir.binop(div, %13, %14) : !s32i loc(#loc228)
              %16 = cir.cmp(lt, %12, %15) : !s32i, !cir.bool loc(#loc229)
              cir.if %16 {
                %17 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc231)
                %18 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc115)
                %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc115)
                %20 = cir.const #cir.int<2> : !s32i loc(#loc114)
                %21 = cir.binop(mul, %19, %20) nsw : !s32i loc(#loc115)
                %22 = cir.cast(integral, %21 : !s32i), !s16i loc(#loc115)
                cir.store %22, %17 : !s16i, !cir.ptr<!s16i> loc(#loc231)
                %23 = cir.load %17 : !cir.ptr<!s16i>, !s16i loc(#loc116)
                %24 = cir.cast(integral, %23 : !s16i), !s32i loc(#loc116)
                cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc117)
              } else {
                %17 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc118)
                %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc118)
                cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc119)
              } loc(#loc230)
            } loc(#loc227)
          } loc(#loc226)
        } loc(#loc224)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc122)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc122)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc123)
          %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc233)
          cir.if %10 {
            cir.scope {
              %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc127)
              %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc127)
              %13 = cir.const #cir.int<32767> : !s32i loc(#loc128)
              %14 = cir.const #cir.int<2> : !s32i loc(#loc129)
              %15 = cir.binop(div, %13, %14) : !s32i loc(#loc236)
              %16 = cir.cmp(lt, %12, %15) : !s32i, !cir.bool loc(#loc237)
              cir.if %16 {
                %17 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc239)
                %18 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc136)
                %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc136)
                %20 = cir.const #cir.int<2> : !s32i loc(#loc135)
                %21 = cir.binop(mul, %19, %20) nsw : !s32i loc(#loc136)
                %22 = cir.cast(integral, %21 : !s32i), !s16i loc(#loc136)
                cir.store %22, %17 : !s16i, !cir.ptr<!s16i> loc(#loc239)
                %23 = cir.load %17 : !cir.ptr<!s16i>, !s16i loc(#loc137)
                %24 = cir.cast(integral, %23 : !s16i), !s32i loc(#loc137)
                cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc138)
              } else {
                %17 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc139)
                %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc139)
                cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc140)
              } loc(#loc238)
            } loc(#loc235)
          } loc(#loc234)
        } loc(#loc232)
      } loc(#loc223)
    } loc(#loc221)
    cir.return loc(#loc74)
  } loc(#loc215)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc241)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc145)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc145)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc242)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc244)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc244)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc149)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc149)
      cir.if %6 {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc154)
        %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc154)
        cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc246)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc156)
        %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc156)
        cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc247)
      } loc(#loc245)
    } loc(#loc243)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc249)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc249)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc160)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc160)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc167)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc167)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc168)
          %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc252)
          cir.if %10 {
            %11 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc254)
            %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc172)
            %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc172)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc171)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc172)
            %16 = cir.cast(integral, %15 : !s32i), !s16i loc(#loc172)
            cir.store %16, %11 : !s16i, !cir.ptr<!s16i> loc(#loc254)
            %17 = cir.load %11 : !cir.ptr<!s16i>, !s16i loc(#loc173)
            %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc173)
            cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc174)
          } loc(#loc253)
        } loc(#loc251)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc177)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc177)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc178)
          %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc256)
          cir.if %10 {
            %11 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc258)
            %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc182)
            %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc182)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc181)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc182)
            %16 = cir.cast(integral, %15 : !s32i), !s16i loc(#loc182)
            cir.store %16, %11 : !s16i, !cir.ptr<!s16i> loc(#loc258)
            %17 = cir.load %11 : !cir.ptr<!s16i>, !s16i loc(#loc183)
            %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc183)
            cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc184)
          } loc(#loc257)
        } loc(#loc255)
      } loc(#loc250)
    } loc(#loc248)
    cir.return loc(#loc142)
  } loc(#loc240)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_multiply_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":29:24)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc12 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":57:27)
#loc13 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":22:1)
#loc14 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":61:1)
#loc15 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":24:5)
#loc16 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":24:11)
#loc17 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":25:12)
#loc18 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":25:5)
#loc19 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":26:5)
#loc20 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":35:5)
#loc21 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":26:8)
#loc22 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":26:33)
#loc23 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":27:5)
#loc24 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":30:5)
#loc25 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":32:5)
#loc26 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":29:9)
#loc27 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":29:17)
#loc28 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":34:16)
#loc29 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":34:9)
#loc30 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":36:5)
#loc31 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":60:5)
#loc32 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":36:8)
#loc33 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":36:33)
#loc34 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":37:5)
#loc35 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":44:5)
#loc36 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":46:5)
#loc37 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":38:9)
#loc38 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":43:9)
#loc39 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":38:12)
#loc40 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":38:19)
#loc41 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":39:9)
#loc42 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":41:13)
#loc43 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":41:35)
#loc44 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":41:28)
#loc45 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":42:26)
#loc46 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":42:13)
#loc47 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":47:9)
#loc48 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":59:9)
#loc49 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":47:12)
#loc50 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":47:19)
#loc51 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":48:9)
#loc52 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":50:13)
#loc53 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":58:13)
#loc54 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":50:17)
#loc55 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":50:25)
#loc56 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":50:34)
#loc57 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":50:35)
#loc58 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":51:13)
#loc59 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":54:13)
#loc60 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":56:13)
#loc61 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":52:17)
#loc62 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":52:39)
#loc63 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":52:32)
#loc64 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":53:30)
#loc65 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":53:17)
#loc66 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":57:17)
#loc67 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":155:1)
#loc68 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":159:1)
#loc69 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":157:5)
#loc70 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":157:13)
#loc71 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":158:5)
#loc72 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":158:13)
#loc73 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":70:1)
#loc74 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":116:1)
#loc75 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":72:5)
#loc76 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":72:11)
#loc77 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":73:12)
#loc78 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":73:5)
#loc79 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":74:5)
#loc80 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":83:5)
#loc81 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":74:8)
#loc82 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":74:33)
#loc83 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":75:5)
#loc84 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":78:5)
#loc85 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":80:5)
#loc86 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":77:9)
#loc87 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":77:17)
#loc88 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":77:24)
#loc89 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":82:9)
#loc90 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":82:17)
#loc91 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":82:24)
#loc92 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":84:5)
#loc93 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":115:5)
#loc94 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":84:8)
#loc95 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":84:33)
#loc96 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":85:5)
#loc97 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":99:5)
#loc98 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":101:5)
#loc99 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":86:9)
#loc100 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":98:9)
#loc101 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":86:12)
#loc102 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":86:19)
#loc103 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":87:9)
#loc104 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":89:13)
#loc105 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":97:13)
#loc106 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":89:17)
#loc107 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":89:25)
#loc108 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":89:34)
#loc109 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":89:35)
#loc110 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":90:13)
#loc111 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":93:13)
#loc112 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":95:13)
#loc113 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":91:17)
#loc114 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":91:39)
#loc115 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":91:32)
#loc116 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":92:30)
#loc117 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":92:17)
#loc118 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":96:27)
#loc119 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":96:17)
#loc120 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":102:9)
#loc121 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":114:9)
#loc122 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":102:12)
#loc123 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":102:19)
#loc124 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":103:9)
#loc125 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":105:13)
#loc126 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":113:13)
#loc127 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":105:17)
#loc128 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":105:25)
#loc129 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":105:34)
#loc130 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":105:35)
#loc131 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":106:13)
#loc132 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":109:13)
#loc133 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":111:13)
#loc134 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":107:17)
#loc135 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":107:39)
#loc136 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":107:32)
#loc137 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":108:30)
#loc138 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":108:17)
#loc139 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":112:27)
#loc140 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":112:17)
#loc141 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":121:1)
#loc142 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":153:1)
#loc143 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":123:5)
#loc144 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":123:11)
#loc145 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":124:12)
#loc146 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":124:5)
#loc147 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":125:5)
#loc148 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":134:5)
#loc149 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":125:8)
#loc150 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":125:33)
#loc151 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":126:5)
#loc152 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":129:5)
#loc153 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":131:5)
#loc154 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":128:16)
#loc155 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":128:9)
#loc156 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":133:16)
#loc157 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":133:9)
#loc158 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":135:5)
#loc159 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":152:5)
#loc160 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":135:8)
#loc161 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":135:33)
#loc162 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":136:5)
#loc163 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":143:5)
#loc164 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":145:5)
#loc165 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":137:9)
#loc166 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":142:9)
#loc167 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":137:12)
#loc168 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":137:19)
#loc169 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":138:9)
#loc170 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":140:13)
#loc171 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":140:35)
#loc172 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":140:28)
#loc173 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":141:26)
#loc174 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":141:13)
#loc175 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":146:9)
#loc176 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":151:9)
#loc177 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":146:12)
#loc178 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":146:19)
#loc179 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":147:9)
#loc180 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":149:13)
#loc181 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":149:35)
#loc182 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":149:28)
#loc183 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":150:26)
#loc184 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_12.c":150:13)
#loc185 = loc(fused[#loc1, #loc2])
#loc186 = loc(fused[#loc3, #loc4])
#loc187 = loc(fused[#loc5, #loc6])
#loc188 = loc(fused[#loc8, #loc9])
#loc189 = loc(fused[#loc10, #loc11])
#loc190 = loc(fused[#loc13, #loc14])
#loc191 = loc(fused[#loc15, #loc16])
#loc192 = loc(fused[#loc18, #loc17])
#loc193 = loc(fused[#loc19, #loc20])
#loc194 = loc(fused[#loc21, #loc22])
#loc195 = loc(fused[#loc23, #loc24, #loc25, #loc20])
#loc196 = loc(fused[#loc29, #loc28])
#loc197 = loc(fused[#loc30, #loc31])
#loc198 = loc(fused[#loc32, #loc33])
#loc199 = loc(fused[#loc34, #loc35, #loc36, #loc31])
#loc200 = loc(fused[#loc37, #loc38])
#loc201 = loc(fused[#loc39, #loc40])
#loc202 = loc(fused[#loc41, #loc38])
#loc203 = loc(fused[#loc42, #loc43])
#loc204 = loc(fused[#loc47, #loc48])
#loc205 = loc(fused[#loc49, #loc50])
#loc206 = loc(fused[#loc51, #loc48])
#loc207 = loc(fused[#loc52, #loc53])
#loc208 = loc(fused[#loc55, #loc56])
#loc209 = loc(fused[#loc54, #loc57])
#loc210 = loc(fused[#loc58, #loc59, #loc60, #loc53])
#loc211 = loc(fused[#loc61, #loc62])
#loc212 = loc(fused[#loc67, #loc68])
#loc213 = loc(fused[#loc69, #loc70])
#loc214 = loc(fused[#loc71, #loc72])
#loc215 = loc(fused[#loc73, #loc74])
#loc216 = loc(fused[#loc75, #loc76])
#loc217 = loc(fused[#loc78, #loc77])
#loc218 = loc(fused[#loc79, #loc80])
#loc219 = loc(fused[#loc81, #loc82])
#loc220 = loc(fused[#loc83, #loc84, #loc85, #loc80])
#loc221 = loc(fused[#loc92, #loc93])
#loc222 = loc(fused[#loc94, #loc95])
#loc223 = loc(fused[#loc96, #loc97, #loc98, #loc93])
#loc224 = loc(fused[#loc99, #loc100])
#loc225 = loc(fused[#loc101, #loc102])
#loc226 = loc(fused[#loc103, #loc100])
#loc227 = loc(fused[#loc104, #loc105])
#loc228 = loc(fused[#loc107, #loc108])
#loc229 = loc(fused[#loc106, #loc109])
#loc230 = loc(fused[#loc110, #loc111, #loc112, #loc105])
#loc231 = loc(fused[#loc113, #loc114])
#loc232 = loc(fused[#loc120, #loc121])
#loc233 = loc(fused[#loc122, #loc123])
#loc234 = loc(fused[#loc124, #loc121])
#loc235 = loc(fused[#loc125, #loc126])
#loc236 = loc(fused[#loc128, #loc129])
#loc237 = loc(fused[#loc127, #loc130])
#loc238 = loc(fused[#loc131, #loc132, #loc133, #loc126])
#loc239 = loc(fused[#loc134, #loc135])
#loc240 = loc(fused[#loc141, #loc142])
#loc241 = loc(fused[#loc143, #loc144])
#loc242 = loc(fused[#loc146, #loc145])
#loc243 = loc(fused[#loc147, #loc148])
#loc244 = loc(fused[#loc149, #loc150])
#loc245 = loc(fused[#loc151, #loc152, #loc153, #loc148])
#loc246 = loc(fused[#loc155, #loc154])
#loc247 = loc(fused[#loc157, #loc156])
#loc248 = loc(fused[#loc158, #loc159])
#loc249 = loc(fused[#loc160, #loc161])
#loc250 = loc(fused[#loc162, #loc163, #loc164, #loc159])
#loc251 = loc(fused[#loc165, #loc166])
#loc252 = loc(fused[#loc167, #loc168])
#loc253 = loc(fused[#loc169, #loc166])
#loc254 = loc(fused[#loc170, #loc171])
#loc255 = loc(fused[#loc175, #loc176])
#loc256 = loc(fused[#loc177, #loc178])
#loc257 = loc(fused[#loc179, #loc176])
#loc258 = loc(fused[#loc180, #loc181])
