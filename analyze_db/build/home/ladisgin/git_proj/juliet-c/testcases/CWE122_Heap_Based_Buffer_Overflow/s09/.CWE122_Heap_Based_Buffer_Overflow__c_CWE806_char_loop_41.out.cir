!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":23:71)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":23:78)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":55:75)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":55:82)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":99:10)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":99:14)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":99:20)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":99:32)
#loc187 = loc(fused[#loc9, #loc10])
#loc214 = loc(fused[#loc83, #loc84])
#loc232 = loc(fused[#loc134, #loc135])
#loc233 = loc(fused[#loc136, #loc137])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc183)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc184)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc185)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41_badSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc9, #loc10])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc187)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc11)
    cir.scope {
      %1 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc189)
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc190)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc191)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc189)
      cir.store %4, %1 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc189)
      %5 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc19)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc20)
      %7 = cir.call @strlen(%6) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc19)
      cir.store %7, %3 : !u64i, !cir.ptr<!u64i> loc(#loc192)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc25)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc25)
        cir.store %20, %2 : !u64i, !cir.ptr<!u64i> loc(#loc194)
        cir.for : cond {
          %21 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc27)
          %22 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc28)
          %23 = cir.cmp(lt, %21, %22) : !u64i, !cir.bool loc(#loc195)
          cir.condition(%23) loc(#loc29)
        } body {
          cir.scope {
            %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc31)
            %22 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc32)
            %23 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %22 : !u64i), !cir.ptr<!s8i> loc(#loc33)
            %24 = cir.load %23 : !cir.ptr<!s8i>, !s8i loc(#loc31)
            %25 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc34)
            %26 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc35)
            %27 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %25 : !u64i), !cir.ptr<!s8i> loc(#loc35)
            cir.store %24, %27 : !s8i, !cir.ptr<!s8i> loc(#loc197)
          } loc(#loc196)
          cir.yield loc(#loc24)
        } step {
          %21 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc36)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc37)
          cir.store %22, %2 : !u64i, !cir.ptr<!u64i> loc(#loc198)
          cir.yield loc(#loc193)
        } loc(#loc193)
      } loc(#loc193)
      %8 = cir.const #cir.int<0> : !s32i loc(#loc38)
      %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc38)
      %10 = cir.const #cir.int<50> : !s32i loc(#loc39)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc40)
      %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc39)
      %13 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc41)
      %14 = cir.ptr_stride(%13 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc41)
      cir.store %9, %14 : !s8i, !cir.ptr<!s8i> loc(#loc199)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc42)
      cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc43)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc44)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc45)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc45)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc44)
    } loc(#loc188)
    cir.return loc(#loc8)
  } loc(#loc186)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc200)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc201)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc203)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc54)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc55)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc55)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc204)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc205)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc54)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc206)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc207)
    cir.scope {
      %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
      %24 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc63)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc63)
      %26 = cir.cmp(eq, %23, %25) : !cir.ptr<!s8i>, !cir.bool loc(#loc209)
      cir.if %26 {
        %27 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc65)
        %28 = cir.const #cir.int<1> : !s32i loc(#loc66)
        %29 = cir.unary(minus, %28) : !s32i, !s32i loc(#loc67)
        cir.call @exit(%29) : (!s32i) -> () extra(#fn_attr) loc(#loc65)
      } loc(#loc210)
    } loc(#loc208)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc68)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc68)
    %10 = cir.const #cir.int<65> : !s32i loc(#loc69)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc70)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc71)
    %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc70)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc70)
    cir.libc.memset %14 bytes from %9 set to %10 : !cir.ptr<!void>, !s32i, !u64i loc(#loc211)
    %15 = cir.const #cir.int<0> : !s32i loc(#loc74)
    %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc74)
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc75)
    %18 = cir.const #cir.int<100> : !s32i loc(#loc76)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc77)
    %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc76)
    %21 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %20 : !s32i), !cir.ptr<!s8i> loc(#loc78)
    cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc212)
    %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc79)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41_badSink(%22) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    cir.return loc(#loc51)
  } loc(#loc202)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41_goodG2BSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc83, #loc84])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc214)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc85)
    cir.scope {
      %1 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc216)
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc217)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc218)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc216)
      cir.store %4, %1 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc216)
      %5 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc93)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc94)
      %7 = cir.call @strlen(%6) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc93)
      cir.store %7, %3 : !u64i, !cir.ptr<!u64i> loc(#loc219)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc99)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc99)
        cir.store %20, %2 : !u64i, !cir.ptr<!u64i> loc(#loc221)
        cir.for : cond {
          %21 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc101)
          %22 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc102)
          %23 = cir.cmp(lt, %21, %22) : !u64i, !cir.bool loc(#loc222)
          cir.condition(%23) loc(#loc103)
        } body {
          cir.scope {
            %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc105)
            %22 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc106)
            %23 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %22 : !u64i), !cir.ptr<!s8i> loc(#loc107)
            %24 = cir.load %23 : !cir.ptr<!s8i>, !s8i loc(#loc105)
            %25 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc108)
            %26 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc109)
            %27 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %25 : !u64i), !cir.ptr<!s8i> loc(#loc109)
            cir.store %24, %27 : !s8i, !cir.ptr<!s8i> loc(#loc224)
          } loc(#loc223)
          cir.yield loc(#loc98)
        } step {
          %21 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc110)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc111)
          cir.store %22, %2 : !u64i, !cir.ptr<!u64i> loc(#loc225)
          cir.yield loc(#loc220)
        } loc(#loc220)
      } loc(#loc220)
      %8 = cir.const #cir.int<0> : !s32i loc(#loc112)
      %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc112)
      %10 = cir.const #cir.int<50> : !s32i loc(#loc113)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc114)
      %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc113)
      %13 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc115)
      %14 = cir.ptr_stride(%13 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc115)
      cir.store %9, %14 : !s8i, !cir.ptr<!s8i> loc(#loc226)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc116)
      cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc117)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc118)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc119)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc119)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc118)
    } loc(#loc215)
    cir.return loc(#loc82)
  } loc(#loc213)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc228)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc122)
    cir.return loc(#loc121)
  } loc(#loc227)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc229)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc230)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc128)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc129)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc130)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc131)
  cir.func @main(%arg0: !s32i loc(fused[#loc134, #loc135]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc136, #loc137])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc232)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc233)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc133)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc138)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc138)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc139)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc140)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc140)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc141)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc128)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc128)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc142)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41_good : !cir.ptr<!cir.func<!void ()>> loc(#loc234)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41_good() : () -> () loc(#loc143)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc129)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc129)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc145)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc130)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc130)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc146)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc235)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41_bad() : () -> () loc(#loc147)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc131)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc131)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc149)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc150)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc236)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc236)
    cir.return %17 : !s32i loc(#loc236)
  } loc(#loc231)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc238)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc156)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc157)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc157)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc239)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc240)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc156)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc241)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc242)
    cir.scope {
      %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc164)
      %24 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc165)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc165)
      %26 = cir.cmp(eq, %23, %25) : !cir.ptr<!s8i>, !cir.bool loc(#loc244)
      cir.if %26 {
        %27 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc167)
        %28 = cir.const #cir.int<1> : !s32i loc(#loc168)
        %29 = cir.unary(minus, %28) : !s32i, !s32i loc(#loc169)
        cir.call @exit(%29) : (!s32i) -> () extra(#fn_attr) loc(#loc167)
      } loc(#loc245)
    } loc(#loc243)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc170)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc170)
    %10 = cir.const #cir.int<65> : !s32i loc(#loc171)
    %11 = cir.const #cir.int<50> : !s32i loc(#loc172)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc173)
    %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc172)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc172)
    cir.libc.memset %14 bytes from %9 set to %10 : !cir.ptr<!void>, !s32i, !u64i loc(#loc246)
    %15 = cir.const #cir.int<0> : !s32i loc(#loc176)
    %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc176)
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc177)
    %18 = cir.const #cir.int<50> : !s32i loc(#loc178)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc179)
    %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc178)
    %21 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %20 : !s32i), !cir.ptr<!s8i> loc(#loc180)
    cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc247)
    %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc181)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41_goodG2BSink(%22) : (!cir.ptr<!s8i>) -> () loc(#loc182)
    cir.return loc(#loc153)
  } loc(#loc237)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("/usr/include/stdlib.h":687:1)
#loc6 = loc("/usr/include/stdlib.h":687:32)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":23:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":38:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":24:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":25:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":37:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":26:9)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":26:25)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":27:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":27:16)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":27:19)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":28:19)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":28:26)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":28:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":28:30)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":30:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":33:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":30:18)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":30:14)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":30:21)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":30:25)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":30:23)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":31:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":32:23)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":32:28)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":32:29)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":32:18)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":32:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":30:35)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":30:34)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":34:22)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":34:14)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":34:17)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":34:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":35:19)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":35:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":36:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":36:14)
#loc46 = loc("/usr/include/stdlib.h":672:1)
#loc47 = loc("/usr/include/stdlib.h":672:45)
#loc48 = loc("/usr/include/stdlib.h":756:1)
#loc49 = loc("/usr/include/stdlib.h":756:70)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":40:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":49:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":42:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":42:12)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":43:20)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":43:27)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":43:31)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":43:42)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":43:43)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":43:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":44:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":44:33)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":44:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":44:17)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":44:23)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":44:24)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":44:30)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":44:29)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":46:12)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":46:18)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":46:23)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":46:27)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":46:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":46:28)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":47:19)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":47:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":47:10)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":47:14)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":47:15)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":48:70)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":48:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":55:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":70:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":56:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":57:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":69:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":58:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":58:25)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":59:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":59:16)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":59:19)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":60:19)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":60:26)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":60:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":60:30)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":62:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":65:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":62:18)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":62:14)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":62:21)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":62:25)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":62:23)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":63:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":64:23)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":64:28)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":64:29)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":64:18)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":64:13)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":62:35)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":62:34)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":66:22)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":66:14)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":66:17)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":66:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":67:19)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":67:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":68:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":68:14)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":84:1)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":87:1)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":86:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":86:13)
#loc124 = loc("/usr/include/stdlib.h":575:1)
#loc125 = loc("/usr/include/stdlib.h":575:41)
#loc126 = loc("/usr/include/time.h":76:1)
#loc127 = loc("/usr/include/time.h":76:38)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":104:15)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":106:15)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":109:15)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":111:15)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":99:1)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":114:1)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":100:1)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":102:27)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":102:22)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":102:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":104:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":105:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":105:67)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":106:5)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":109:5)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":110:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":110:66)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":111:5)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":113:12)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":113:5)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":73:1)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":82:1)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":75:5)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":75:12)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":76:20)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":76:27)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":76:31)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":76:42)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":76:43)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":76:5)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":77:5)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":77:33)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":77:9)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":77:17)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":77:23)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":77:24)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":77:30)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":77:29)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":79:12)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":79:18)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":79:23)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":79:26)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":79:5)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":79:27)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":80:18)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":80:5)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":80:10)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":80:13)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":80:14)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":81:74)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c":81:5)
#loc183 = loc(fused[#loc1, #loc2])
#loc184 = loc(fused[#loc3, #loc4])
#loc185 = loc(fused[#loc5, #loc6])
#loc186 = loc(fused[#loc7, #loc8])
#loc188 = loc(fused[#loc12, #loc13])
#loc189 = loc(fused[#loc14, #loc15])
#loc190 = loc(fused[#loc16, #loc17])
#loc191 = loc(fused[#loc16, #loc18])
#loc192 = loc(fused[#loc21, #loc22])
#loc193 = loc(fused[#loc23, #loc24])
#loc194 = loc(fused[#loc26, #loc25])
#loc195 = loc(fused[#loc27, #loc28])
#loc196 = loc(fused[#loc30, #loc24])
#loc197 = loc(fused[#loc35, #loc33])
#loc198 = loc(fused[#loc37, #loc36])
#loc199 = loc(fused[#loc41, #loc38])
#loc200 = loc(fused[#loc46, #loc47])
#loc201 = loc(fused[#loc48, #loc49])
#loc202 = loc(fused[#loc50, #loc51])
#loc203 = loc(fused[#loc52, #loc53])
#loc204 = loc(fused[#loc56, #loc57])
#loc205 = loc(fused[#loc55, #loc57])
#loc206 = loc(fused[#loc54, #loc58])
#loc207 = loc(fused[#loc59, #loc58])
#loc208 = loc(fused[#loc60, #loc61])
#loc209 = loc(fused[#loc62, #loc63])
#loc210 = loc(fused[#loc64, #loc61])
#loc211 = loc(fused[#loc72, #loc73])
#loc212 = loc(fused[#loc75, #loc74])
#loc213 = loc(fused[#loc81, #loc82])
#loc215 = loc(fused[#loc86, #loc87])
#loc216 = loc(fused[#loc88, #loc89])
#loc217 = loc(fused[#loc90, #loc91])
#loc218 = loc(fused[#loc90, #loc92])
#loc219 = loc(fused[#loc95, #loc96])
#loc220 = loc(fused[#loc97, #loc98])
#loc221 = loc(fused[#loc100, #loc99])
#loc222 = loc(fused[#loc101, #loc102])
#loc223 = loc(fused[#loc104, #loc98])
#loc224 = loc(fused[#loc109, #loc107])
#loc225 = loc(fused[#loc111, #loc110])
#loc226 = loc(fused[#loc115, #loc112])
#loc227 = loc(fused[#loc120, #loc121])
#loc228 = loc(fused[#loc122, #loc123])
#loc229 = loc(fused[#loc124, #loc125])
#loc230 = loc(fused[#loc126, #loc127])
#loc231 = loc(fused[#loc132, #loc133])
#loc234 = loc(fused[#loc143, #loc144])
#loc235 = loc(fused[#loc147, #loc148])
#loc236 = loc(fused[#loc151, #loc150])
#loc237 = loc(fused[#loc152, #loc153])
#loc238 = loc(fused[#loc154, #loc155])
#loc239 = loc(fused[#loc158, #loc159])
#loc240 = loc(fused[#loc157, #loc159])
#loc241 = loc(fused[#loc156, #loc160])
#loc242 = loc(fused[#loc161, #loc160])
#loc243 = loc(fused[#loc162, #loc163])
#loc244 = loc(fused[#loc164, #loc165])
#loc245 = loc(fused[#loc166, #loc163])
#loc246 = loc(fused[#loc174, #loc175])
#loc247 = loc(fused[#loc177, #loc176])
