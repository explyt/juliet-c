!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc64)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc65)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__rand_32.c\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__rand_32_bad()\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc67)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc68)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc69)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc68)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc69)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc15)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc70)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc72)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc20)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc21)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc72)
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc22)
      %10 = cir.binop(and, %8, %9) : !s32i loc(#loc22)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc22)
      %12 = cir.ternary(%11, true {
        %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
        %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc22)
        %18 = cir.const #cir.int<30> : !s32i loc(#loc22)
        %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc22)
        %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
        %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc22)
        %22 = cir.const #cir.int<15> : !s32i loc(#loc22)
        %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc22)
        %24 = cir.binop(xor, %19, %23) : !u32i loc(#loc22)
        %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
        %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc22)
        %27 = cir.binop(xor, %24, %26) : !u32i loc(#loc22)
        cir.yield %27 : !u32i loc(#loc22)
      }, false {
        %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
        %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc22)
        %18 = cir.const #cir.int<30> : !s32i loc(#loc22)
        %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc22)
        %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
        %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc22)
        %22 = cir.const #cir.int<15> : !s32i loc(#loc22)
        %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc22)
        %24 = cir.binop(xor, %19, %23) : !u32i loc(#loc22)
        %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
        %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc22)
        %27 = cir.binop(xor, %24, %26) : !u32i loc(#loc22)
        %28 = cir.unary(minus, %27) : !u32i, !u32i loc(#loc22)
        %29 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc22)
        %31 = cir.binop(sub, %28, %30) : !u32i loc(#loc22)
        cir.yield %31 : !u32i loc(#loc22)
      }) : (!cir.bool) -> !u32i loc(#loc22)
      %13 = cir.cast(integral, %12 : !u32i), !s32i loc(#loc22)
      cir.store %13, %5 : !s32i, !cir.ptr<!s32i> loc(#loc73)
      %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc24)
      %15 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc25)
      cir.store %14, %15 : !s32i, !cir.ptr<!s32i> loc(#loc74)
    } loc(#loc71)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc76)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc30)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc31)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc76)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc5)
      cir.scope {
        cir.scope {
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc5)
          %10 = cir.const #cir.int<5> : !s32i loc(#loc5)
          %11 = cir.cmp(gt, %9, %10) : !s32i, !cir.bool loc(#loc5)
          cir.if %11 {
          } else {
            %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc5)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc5)
            %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc5)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc5)
            %16 = cir.const #cir.int<41> : !s32i loc(#loc5)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc5)
            %18 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc5)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc5)
            cir.call @__assert_fail(%13, %15, %17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc5)
          } loc(#loc5)
        } loc(#loc5)
      } loc(#loc5)
    } loc(#loc75)
    cir.return loc(#loc7)
  } loc(#loc66)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc78)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    cir.return loc(#loc33)
  } loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc36)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc80)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc81)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc82)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc81)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc82)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc46)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc85)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc51)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc52)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc85)
      %8 = cir.const #cir.int<5> : !s32i loc(#loc53)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc54)
      %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc53)
      cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc86)
      %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc56)
      %12 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc57)
      cir.store %11, %12 : !s32i, !cir.ptr<!s32i> loc(#loc87)
    } loc(#loc84)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc89)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc62)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc63)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc89)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc36)
      cir.scope {
        cir.scope {
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc36)
          %10 = cir.const #cir.int<5> : !s32i loc(#loc36)
          %11 = cir.cmp(gt, %9, %10) : !s32i, !cir.bool loc(#loc36)
          cir.if %11 {
          } else {
            %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc36)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc36)
            %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc36)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc36)
            %16 = cir.const #cir.int<66> : !s32i loc(#loc36)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc36)
            %18 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc36)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc36)
            cir.call @__assert_fail(%13, %15, %17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc36)
          } loc(#loc36)
        } loc(#loc36)
      } loc(#loc36)
    } loc(#loc88)
    cir.return loc(#loc38)
  } loc(#loc79)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_32.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/assert.h":69:1)
#loc4 = loc("/usr/include/assert.h":71:43)
#loc5 = loc("CWE617_Reachable_Assertion__rand_32.c":41:9)
#loc6 = loc("CWE617_Reachable_Assertion__rand_32.c":25:1)
#loc7 = loc("CWE617_Reachable_Assertion__rand_32.c":43:1)
#loc8 = loc("CWE617_Reachable_Assertion__rand_32.c":27:5)
#loc9 = loc("CWE617_Reachable_Assertion__rand_32.c":27:9)
#loc10 = loc("CWE617_Reachable_Assertion__rand_32.c":28:5)
#loc11 = loc("CWE617_Reachable_Assertion__rand_32.c":28:22)
#loc12 = loc("CWE617_Reachable_Assertion__rand_32.c":29:5)
#loc13 = loc("CWE617_Reachable_Assertion__rand_32.c":29:22)
#loc14 = loc("CWE617_Reachable_Assertion__rand_32.c":31:13)
#loc15 = loc("CWE617_Reachable_Assertion__rand_32.c":31:12)
#loc16 = loc("CWE617_Reachable_Assertion__rand_32.c":31:5)
#loc17 = loc("CWE617_Reachable_Assertion__rand_32.c":32:5)
#loc18 = loc("CWE617_Reachable_Assertion__rand_32.c":37:5)
#loc19 = loc("CWE617_Reachable_Assertion__rand_32.c":33:9)
#loc20 = loc("CWE617_Reachable_Assertion__rand_32.c":33:21)
#loc21 = loc("CWE617_Reachable_Assertion__rand_32.c":33:20)
#loc22 = loc("CWE617_Reachable_Assertion__rand_32.c":35:16)
#loc23 = loc("CWE617_Reachable_Assertion__rand_32.c":35:9)
#loc24 = loc("CWE617_Reachable_Assertion__rand_32.c":36:21)
#loc25 = loc("CWE617_Reachable_Assertion__rand_32.c":36:10)
#loc26 = loc("CWE617_Reachable_Assertion__rand_32.c":36:9)
#loc27 = loc("CWE617_Reachable_Assertion__rand_32.c":38:5)
#loc28 = loc("CWE617_Reachable_Assertion__rand_32.c":42:5)
#loc29 = loc("CWE617_Reachable_Assertion__rand_32.c":39:9)
#loc30 = loc("CWE617_Reachable_Assertion__rand_32.c":39:21)
#loc31 = loc("CWE617_Reachable_Assertion__rand_32.c":39:20)
#loc32 = loc("CWE617_Reachable_Assertion__rand_32.c":70:1)
#loc33 = loc("CWE617_Reachable_Assertion__rand_32.c":73:1)
#loc34 = loc("CWE617_Reachable_Assertion__rand_32.c":72:5)
#loc35 = loc("CWE617_Reachable_Assertion__rand_32.c":72:13)
#loc36 = loc("CWE617_Reachable_Assertion__rand_32.c":66:9)
#loc37 = loc("CWE617_Reachable_Assertion__rand_32.c":50:1)
#loc38 = loc("CWE617_Reachable_Assertion__rand_32.c":68:1)
#loc39 = loc("CWE617_Reachable_Assertion__rand_32.c":52:5)
#loc40 = loc("CWE617_Reachable_Assertion__rand_32.c":52:9)
#loc41 = loc("CWE617_Reachable_Assertion__rand_32.c":53:5)
#loc42 = loc("CWE617_Reachable_Assertion__rand_32.c":53:22)
#loc43 = loc("CWE617_Reachable_Assertion__rand_32.c":54:5)
#loc44 = loc("CWE617_Reachable_Assertion__rand_32.c":54:22)
#loc45 = loc("CWE617_Reachable_Assertion__rand_32.c":56:13)
#loc46 = loc("CWE617_Reachable_Assertion__rand_32.c":56:12)
#loc47 = loc("CWE617_Reachable_Assertion__rand_32.c":56:5)
#loc48 = loc("CWE617_Reachable_Assertion__rand_32.c":57:5)
#loc49 = loc("CWE617_Reachable_Assertion__rand_32.c":62:5)
#loc50 = loc("CWE617_Reachable_Assertion__rand_32.c":58:9)
#loc51 = loc("CWE617_Reachable_Assertion__rand_32.c":58:21)
#loc52 = loc("CWE617_Reachable_Assertion__rand_32.c":58:20)
#loc53 = loc("CWE617_Reachable_Assertion__rand_32.c":60:16)
#loc54 = loc("CWE617_Reachable_Assertion__rand_32.c":60:29)
#loc55 = loc("CWE617_Reachable_Assertion__rand_32.c":60:9)
#loc56 = loc("CWE617_Reachable_Assertion__rand_32.c":61:21)
#loc57 = loc("CWE617_Reachable_Assertion__rand_32.c":61:10)
#loc58 = loc("CWE617_Reachable_Assertion__rand_32.c":61:9)
#loc59 = loc("CWE617_Reachable_Assertion__rand_32.c":63:5)
#loc60 = loc("CWE617_Reachable_Assertion__rand_32.c":67:5)
#loc61 = loc("CWE617_Reachable_Assertion__rand_32.c":64:9)
#loc62 = loc("CWE617_Reachable_Assertion__rand_32.c":64:21)
#loc63 = loc("CWE617_Reachable_Assertion__rand_32.c":64:20)
#loc64 = loc(fused[#loc1, #loc2])
#loc65 = loc(fused[#loc3, #loc4])
#loc66 = loc(fused[#loc6, #loc7])
#loc67 = loc(fused[#loc8, #loc9])
#loc68 = loc(fused[#loc10, #loc11])
#loc69 = loc(fused[#loc12, #loc13])
#loc70 = loc(fused[#loc16, #loc14])
#loc71 = loc(fused[#loc17, #loc18])
#loc72 = loc(fused[#loc19, #loc20])
#loc73 = loc(fused[#loc23, #loc22])
#loc74 = loc(fused[#loc26, #loc24])
#loc75 = loc(fused[#loc27, #loc28])
#loc76 = loc(fused[#loc29, #loc30])
#loc77 = loc(fused[#loc32, #loc33])
#loc78 = loc(fused[#loc34, #loc35])
#loc79 = loc(fused[#loc37, #loc38])
#loc80 = loc(fused[#loc39, #loc40])
#loc81 = loc(fused[#loc41, #loc42])
#loc82 = loc(fused[#loc43, #loc44])
#loc83 = loc(fused[#loc47, #loc45])
#loc84 = loc(fused[#loc48, #loc49])
#loc85 = loc(fused[#loc50, #loc51])
#loc86 = loc(fused[#loc55, #loc54])
#loc87 = loc(fused[#loc58, #loc56])
#loc88 = loc(fused[#loc59, #loc60])
#loc89 = loc(fused[#loc61, #loc62])
