!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc91)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc92)
  cir.func private @printIntLine(!s32i) loc(#loc93)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc94)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc96)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc97)
    cir.goto "source" loc(#loc98)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc17)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc18)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc19)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc19)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc18)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc99)
    cir.store %6, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc100)
    cir.scope {
      %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc24)
      %8 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc25)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc25)
      %10 = cir.cmp(eq, %7, %9) : !cir.ptr<!s32i>, !cir.bool loc(#loc102)
      cir.if %10 {
        %11 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc27)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc28)
        %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc29)
        cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc27)
      } loc(#loc103)
    } loc(#loc101)
    cir.scope {
      %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc105)
      %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc105)
      cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc105)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc34)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc34)
      %11 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc35)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc35)
      %13 = cir.const #cir.int<10> : !s32i loc(#loc36)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc36)
      %15 = cir.const #cir.int<4> : !u64i loc(#loc106)
      %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc107)
      cir.libc.memmove %16 bytes from %12 to %10 : !cir.ptr<!void>, !u64i loc(#loc108)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc41)
      %18 = cir.const #cir.int<0> : !s32i loc(#loc42)
      %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc43)
      %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc41)
      cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc44)
      %21 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc45)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc46)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc46)
      cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc45)
    } loc(#loc104)
    cir.return loc(#loc10)
  } loc(#loc95)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc110)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc49)
    cir.return loc(#loc48)
  } loc(#loc109)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc112)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc55)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc113)
    cir.goto "source" loc(#loc114)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc59)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc60)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc61)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc61)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc115)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc116)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc60)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc117)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc118)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc68)
      %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc69)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc69)
      %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc120)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc71)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc72)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc73)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc71)
      } loc(#loc121)
    } loc(#loc119)
    cir.scope {
      %9 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc123)
      %10 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc123)
      cir.store %10, %9 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc123)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc78)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc78)
      %13 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc79)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc79)
      %15 = cir.const #cir.int<10> : !s32i loc(#loc80)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc80)
      %17 = cir.const #cir.int<4> : !u64i loc(#loc124)
      %18 = cir.binop(mul, %16, %17) : !u64i loc(#loc125)
      cir.libc.memmove %18 bytes from %14 to %12 : !cir.ptr<!void>, !u64i loc(#loc126)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc85)
      %20 = cir.const #cir.int<0> : !s32i loc(#loc86)
      %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc87)
      %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc85)
      cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc88)
      %23 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc89)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc90)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc90)
      cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc89)
    } loc(#loc122)
    cir.return loc(#loc52)
  } loc(#loc111)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":37:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":23:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":23:11)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":24:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":24:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":25:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":25:10)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":26:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":28:19)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":28:26)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":28:28)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":28:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":29:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":29:33)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":29:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":29:17)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":29:23)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":29:24)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":29:30)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":29:29)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":30:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":36:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":31:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":31:28)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":33:17)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":33:23)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":33:31)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":33:34)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":33:44)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":33:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":33:45)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":34:22)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":34:27)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":34:28)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":34:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":35:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":35:14)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":62:1)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":65:1)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":64:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":64:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":44:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":60:1)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":46:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":46:11)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":47:12)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":47:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":48:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":48:10)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":49:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":51:19)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":51:26)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":51:29)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":51:39)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":51:40)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":51:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":52:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":52:33)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":52:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":52:17)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":52:23)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":52:24)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":52:30)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":52:29)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":53:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":59:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":54:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":54:28)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":56:17)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":56:23)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":56:31)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":56:34)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":56:44)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":56:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":56:45)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":57:22)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":57:27)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":57:28)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":57:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":58:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c":58:14)
#loc91 = loc(fused[#loc1, #loc2])
#loc92 = loc(fused[#loc3, #loc4])
#loc93 = loc(fused[#loc5, #loc6])
#loc94 = loc(fused[#loc7, #loc8])
#loc95 = loc(fused[#loc9, #loc10])
#loc96 = loc(fused[#loc11, #loc12])
#loc97 = loc(fused[#loc14, #loc13])
#loc98 = loc(fused[#loc15, #loc16])
#loc99 = loc(fused[#loc18, #loc20])
#loc100 = loc(fused[#loc21, #loc20])
#loc101 = loc(fused[#loc22, #loc23])
#loc102 = loc(fused[#loc24, #loc25])
#loc103 = loc(fused[#loc26, #loc23])
#loc104 = loc(fused[#loc30, #loc31])
#loc105 = loc(fused[#loc32, #loc33])
#loc106 = loc(fused[#loc37, #loc38])
#loc107 = loc(fused[#loc36, #loc38])
#loc108 = loc(fused[#loc39, #loc40])
#loc109 = loc(fused[#loc47, #loc48])
#loc110 = loc(fused[#loc49, #loc50])
#loc111 = loc(fused[#loc51, #loc52])
#loc112 = loc(fused[#loc53, #loc54])
#loc113 = loc(fused[#loc56, #loc55])
#loc114 = loc(fused[#loc57, #loc58])
#loc115 = loc(fused[#loc62, #loc63])
#loc116 = loc(fused[#loc61, #loc63])
#loc117 = loc(fused[#loc60, #loc64])
#loc118 = loc(fused[#loc65, #loc64])
#loc119 = loc(fused[#loc66, #loc67])
#loc120 = loc(fused[#loc68, #loc69])
#loc121 = loc(fused[#loc70, #loc67])
#loc122 = loc(fused[#loc74, #loc75])
#loc123 = loc(fused[#loc76, #loc77])
#loc124 = loc(fused[#loc81, #loc82])
#loc125 = loc(fused[#loc80, #loc82])
#loc126 = loc(fused[#loc83, #loc84])
