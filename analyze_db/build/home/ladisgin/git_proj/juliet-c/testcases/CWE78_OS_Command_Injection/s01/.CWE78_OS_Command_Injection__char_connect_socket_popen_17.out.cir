!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc199 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":188:10)
#loc200 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":188:14)
#loc201 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":188:20)
#loc202 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":188:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc336 = loc(fused[#loc199, #loc200])
#loc337 = loc(fused[#loc201, #loc202])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_popen_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.goodG2B.data_buf = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc256)
  cir.global "private" constant cir_private @__const.CWE78_OS_Command_Injection__char_connect_socket_popen_17_bad.data_buf = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc257)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc258)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc259)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc260)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc11)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc261)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc262)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc263)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc264)
  cir.func private @close(!s32i) -> !s32i loc(#loc265)
  cir.func private @popen(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> loc(#loc266)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"w\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc24)
  cir.func private @pclose(!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc267)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_popen_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc269)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc270)
    %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["data_buf"] {alignment = 16 : i64} loc(#loc257)
    %3 = cir.get_global @__const.CWE78_OS_Command_Injection__char_connect_socket_popen_17_bad.data_buf : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc257)
    cir.copy %3 to %2 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc257)
    %4 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc33)
    cir.store %4, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc271)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc37)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc273)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc39)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc40)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc274)
        cir.condition(%8) loc(#loc41)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc277)
            %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc278)
            %8 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc279)
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc280)
            %10 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc281)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc52)
            %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc52)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc280)
            %13 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc55)
            %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc56)
            %15 = cir.call @strlen(%14) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc55)
            cir.store %15, %10 : !u64i, !cir.ptr<!u64i> loc(#loc281)
            cir.scope {
              cir.do {
                %16 = cir.const #cir.int<2> : !s32i loc(#loc59)
                %17 = cir.const #cir.int<1> : !s32i loc(#loc60)
                %18 = cir.const #cir.int<6> : !s32i loc(#loc61)
                %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc62)
                cir.store %19, %9 : !s32i, !cir.ptr<!s32i> loc(#loc283)
                cir.scope {
                  %70 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc67)
                  %71 = cir.const #cir.int<1> : !s32i loc(#loc68)
                  %72 = cir.unary(minus, %71) : !s32i, !s32i loc(#loc68)
                  %73 = cir.cmp(eq, %70, %72) : !s32i, !cir.bool loc(#loc285)
                  cir.if %73 {
                    cir.break loc(#loc70)
                  } loc(#loc286)
                } loc(#loc284)
                %20 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc287)
                %21 = cir.const #cir.int<0> : !s32i loc(#loc73)
                %22 = cir.const #cir.int<16> : !u64i loc(#loc288)
                cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc289)
                %23 = cir.const #cir.int<2> : !s32i loc(#loc78)
                %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc78)
                %25 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
                cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc290)
                %26 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc11)
                %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc11)
                %28 = cir.call @inet_addr(%27) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc81)
                %29 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc82)
                %30 = cir.get_member %29[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc83)
                cir.store %28, %30 : !u32i, !cir.ptr<!u32i> loc(#loc291)
                %31 = cir.const #cir.int<27015> : !s32i loc(#loc86)
                %32 = cir.cast(integral, %31 : !s32i), !u16i loc(#loc86)
                %33 = cir.call @htons(%32) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc87)
                %34 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc88)
                cir.store %33, %34 : !u16i, !cir.ptr<!u16i> loc(#loc292)
                cir.scope {
                  %70 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc93)
                  %71 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc294)
                  %72 = cir.const #cir.int<16> : !u64i loc(#loc295)
                  %73 = cir.cast(integral, %72 : !u64i), !u32i loc(#loc295)
                  %74 = cir.call @connect(%70, %71, %73) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc98)
                  %75 = cir.const #cir.int<1> : !s32i loc(#loc99)
                  %76 = cir.unary(minus, %75) : !s32i, !s32i loc(#loc99)
                  %77 = cir.cmp(eq, %74, %76) : !s32i, !cir.bool loc(#loc296)
                  cir.if %77 {
                    cir.break loc(#loc101)
                  } loc(#loc297)
                } loc(#loc293)
                %35 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc102)
                %36 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc103)
                %37 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc104)
                %38 = cir.ptr_stride(%36 : !cir.ptr<!s8i>, %37 : !u64i), !cir.ptr<!s8i> loc(#loc105)
                %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc298)
                %40 = cir.const #cir.int<1> : !u64i loc(#loc299)
                %41 = cir.const #cir.int<100> : !s32i loc(#loc110)
                %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc110)
                %43 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc111)
                %44 = cir.binop(sub, %42, %43) : !u64i loc(#loc300)
                %45 = cir.const #cir.int<1> : !s32i loc(#loc112)
                %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc112)
                %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc301)
                %48 = cir.binop(mul, %40, %47) : !u64i loc(#loc302)
                %49 = cir.const #cir.int<0> : !s32i loc(#loc114)
                %50 = cir.call @recv(%35, %39, %48, %49) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc115)
                %51 = cir.cast(integral, %50 : !s64i), !s32i loc(#loc115)
                cir.store %51, %6 : !s32i, !cir.ptr<!s32i> loc(#loc303)
                cir.scope {
                  %70 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc120)
                  %71 = cir.const #cir.int<1> : !s32i loc(#loc121)
                  %72 = cir.unary(minus, %71) : !s32i, !s32i loc(#loc121)
                  %73 = cir.cmp(eq, %70, %72) : !s32i, !cir.bool loc(#loc305)
                  %74 = cir.ternary(%73, true {
                    %75 = cir.const #true loc(#loc122)
                    cir.yield %75 : !cir.bool loc(#loc122)
                  }, false {
                    %75 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc123)
                    %76 = cir.const #cir.int<0> : !s32i loc(#loc124)
                    %77 = cir.cmp(eq, %75, %76) : !s32i, !cir.bool loc(#loc306)
                    %78 = cir.ternary(%77, true {
                      %79 = cir.const #true loc(#loc122)
                      cir.yield %79 : !cir.bool loc(#loc122)
                    }, false {
                      %79 = cir.const #false loc(#loc122)
                      cir.yield %79 : !cir.bool loc(#loc122)
                    }) : (!cir.bool) -> !cir.bool loc(#loc122)
                    cir.yield %78 : !cir.bool loc(#loc122)
                  }) : (!cir.bool) -> !cir.bool loc(#loc122)
                  cir.if %74 {
                    cir.break loc(#loc126)
                  } loc(#loc307)
                } loc(#loc304)
                %52 = cir.const #cir.int<0> : !s32i loc(#loc127)
                %53 = cir.cast(integral, %52 : !s32i), !s8i loc(#loc127)
                %54 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc128)
                %55 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc129)
                %56 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc130)
                %57 = cir.cast(integral, %56 : !s32i), !u64i loc(#loc130)
                %58 = cir.const #cir.int<1> : !u64i loc(#loc308)
                %59 = cir.binop(div, %57, %58) : !u64i loc(#loc309)
                %60 = cir.binop(add, %55, %59) : !u64i loc(#loc310)
                %61 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %60 : !u64i), !cir.ptr<!s8i> loc(#loc133)
                cir.store %53, %61 : !s8i, !cir.ptr<!s8i> loc(#loc311)
                %62 = cir.get_global @strchr : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !s32i)>> loc(#loc134)
                %63 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc135)
                %64 = cir.const #cir.int<13> : !s32i loc(#loc136)
                %65 = cir.call @strchr(%63, %64) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc134)
                cir.store %65, %8 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc312)
                cir.scope {
                  %70 = cir.load %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc141)
                  %71 = cir.cast(ptr_to_bool, %70 : !cir.ptr<!s8i>), !cir.bool loc(#loc141)
                  cir.if %71 {
                    %72 = cir.const #cir.int<0> : !s32i loc(#loc143)
                    %73 = cir.cast(integral, %72 : !s32i), !s8i loc(#loc143)
                    %74 = cir.load deref %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc144)
                    cir.store %73, %74 : !s8i, !cir.ptr<!s8i> loc(#loc315)
                  } loc(#loc314)
                } loc(#loc313)
                %66 = cir.get_global @strchr : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !s32i)>> loc(#loc146)
                %67 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc147)
                %68 = cir.const #cir.int<10> : !s32i loc(#loc148)
                %69 = cir.call @strchr(%67, %68) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc146)
                cir.store %69, %8 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc316)
                cir.scope {
                  %70 = cir.load %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
                  %71 = cir.cast(ptr_to_bool, %70 : !cir.ptr<!s8i>), !cir.bool loc(#loc153)
                  cir.if %71 {
                    %72 = cir.const #cir.int<0> : !s32i loc(#loc155)
                    %73 = cir.cast(integral, %72 : !s32i), !s8i loc(#loc155)
                    %74 = cir.load deref %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc156)
                    cir.store %73, %74 : !s8i, !cir.ptr<!s8i> loc(#loc319)
                  } loc(#loc318)
                } loc(#loc317)
                cir.yield loc(#loc58)
              } while {
                %16 = cir.const #cir.int<0> : !s32i loc(#loc158)
                %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc158)
                cir.condition(%17) loc(#loc158)
              } loc(#loc282)
            } loc(#loc282)
            cir.scope {
              %16 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc161)
              %17 = cir.const #cir.int<1> : !s32i loc(#loc162)
              %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc162)
              %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc321)
              cir.if %19 {
                %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc164)
                %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc165)
              } loc(#loc322)
            } loc(#loc320)
          } loc(#loc276)
        } loc(#loc275)
        cir.yield loc(#loc36)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc166)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc167)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc323)
        cir.yield loc(#loc272)
      } loc(#loc272)
    } loc(#loc272)
    cir.scope {
      %5 = cir.alloca !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>>, ["pipe"] {alignment = 8 : i64} loc(#loc325)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc172)
      %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc24)
      %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc24)
      %9 = cir.call @popen(%6, %8) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> loc(#loc173)
      cir.store %9, %5 : !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc326)
      cir.scope {
        %10 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc178)
        %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc179)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty__IO_FILE> loc(#loc179)
        %13 = cir.cmp(ne, %10, %12) : !cir.ptr<!ty__IO_FILE>, !cir.bool loc(#loc328)
        cir.if %13 {
          %14 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc181)
          %15 = cir.call @pclose(%14) : (!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc182)
        } loc(#loc329)
      } loc(#loc327)
    } loc(#loc324)
    cir.return loc(#loc28)
  } loc(#loc268)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_popen_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc331)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc185)
    cir.return loc(#loc184)
  } loc(#loc330)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc332)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc333)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc334)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc193)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc194)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc195)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc196)
  cir.func @main(%arg0: !s32i loc(fused[#loc199, #loc200]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc201, #loc202])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc336)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc337)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc198)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc203)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc203)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc204)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc205)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc205)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc206)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc193)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc193)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc207)
    %8 = cir.get_global @CWE78_OS_Command_Injection__char_connect_socket_popen_17_good : !cir.ptr<!cir.func<!void ()>> loc(#loc338)
    cir.call @CWE78_OS_Command_Injection__char_connect_socket_popen_17_good() : () -> () loc(#loc208)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc194)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc194)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc210)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc195)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc195)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc211)
    %13 = cir.get_global @CWE78_OS_Command_Injection__char_connect_socket_popen_17_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc339)
    cir.call @CWE78_OS_Command_Injection__char_connect_socket_popen_17_bad() : () -> () loc(#loc212)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc196)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc196)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc214)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc215)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc340)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc340)
    cir.return %17 : !s32i loc(#loc340)
  } loc(#loc335)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc341)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc219)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc343)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc344)
    %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["data_buf"] {alignment = 16 : i64} loc(#loc256)
    %3 = cir.get_global @__const.goodG2B.data_buf : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc256)
    cir.copy %3 to %2 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc256)
    %4 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc226)
    cir.store %4, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc345)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc230)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc347)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc232)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc233)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc348)
        cir.condition(%8) loc(#loc234)
      } body {
        cir.scope {
          %6 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc236)
          %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc237)
          %8 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc219)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc219)
          %10 = cir.call @strcat(%7, %9) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc236)
        } loc(#loc349)
        cir.yield loc(#loc229)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc238)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc239)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc350)
        cir.yield loc(#loc346)
      } loc(#loc346)
    } loc(#loc346)
    cir.scope {
      %5 = cir.alloca !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>>, ["pipe"] {alignment = 8 : i64} loc(#loc352)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc244)
      %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc245)
      %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc245)
      %9 = cir.call @popen(%6, %8) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> loc(#loc246)
      cir.store %9, %5 : !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc353)
      cir.scope {
        %10 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc251)
        %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc252)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty__IO_FILE> loc(#loc252)
        %13 = cir.cmp(ne, %10, %12) : !cir.ptr<!ty__IO_FILE>, !cir.bool loc(#loc355)
        cir.if %13 {
          %14 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc254)
          %15 = cir.call @pclose(%14) : (!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc255)
        } loc(#loc356)
      } loc(#loc354)
    } loc(#loc351)
    cir.return loc(#loc221)
  } loc(#loc342)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":0:0)
#loc1 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":155:5)
#loc2 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":155:26)
#loc3 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":63:5)
#loc4 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":63:26)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("/usr/include/sys/socket.h":102:1)
#loc8 = loc("/usr/include/sys/socket.h":102:62)
#loc9 = loc("/usr/include/arpa/inet.h":34:1)
#loc10 = loc("/usr/include/arpa/inet.h":34:47)
#loc11 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":94:53)
#loc12 = loc("/usr/include/netinet/in.h":404:1)
#loc13 = loc("/usr/include/netinet/in.h":405:40)
#loc14 = loc("/usr/include/sys/socket.h":126:1)
#loc15 = loc("/usr/include/sys/socket.h":126:75)
#loc16 = loc("/usr/include/sys/socket.h":145:1)
#loc17 = loc("/usr/include/sys/socket.h":145:68)
#loc18 = loc("/usr/include/string.h":246:1)
#loc19 = loc("/usr/include/string.h":247:33)
#loc20 = loc("/usr/include/unistd.h":358:1)
#loc21 = loc("/usr/include/unistd.h":358:27)
#loc22 = loc("/usr/include/stdio.h":893:1)
#loc23 = loc("/usr/include/stdio.h":894:3)
#loc24 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":138:28)
#loc25 = loc("/usr/include/stdio.h":887:1)
#loc26 = loc("/usr/include/stdio.h":887:36)
#loc27 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":59:1)
#loc28 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":144:1)
#loc29 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":61:5)
#loc30 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":61:9)
#loc31 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":62:5)
#loc32 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":62:12)
#loc33 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":64:12)
#loc34 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":64:5)
#loc35 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":65:5)
#loc36 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":134:5)
#loc37 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":65:13)
#loc38 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":65:9)
#loc39 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":65:16)
#loc40 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":65:20)
#loc41 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":65:18)
#loc42 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":66:5)
#loc43 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":67:9)
#loc44 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":133:9)
#loc45 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":72:13)
#loc46 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":72:17)
#loc47 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":73:13)
#loc48 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":73:32)
#loc49 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":74:13)
#loc50 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":74:19)
#loc51 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":75:13)
#loc52 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":75:36)
#loc53 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":76:13)
#loc54 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":76:41)
#loc55 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":76:30)
#loc56 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":76:37)
#loc57 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":77:13)
#loc58 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":122:21)
#loc59 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":87:40)
#loc60 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":87:49)
#loc61 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":87:62)
#loc62 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":87:33)
#loc63 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":87:17)
#loc64 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":87:73)
#loc65 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":88:17)
#loc66 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":91:17)
#loc67 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":88:21)
#loc68 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":88:38)
#loc69 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":89:17)
#loc70 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":90:21)
#loc71 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":92:24)
#loc72 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":92:25)
#loc73 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":92:34)
#loc74 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":92:37)
#loc75 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":92:51)
#loc76 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":92:17)
#loc77 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":92:52)
#loc78 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":93:38)
#loc79 = loc("/usr/include/netinet/in.h":249:5)
#loc80 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":93:17)
#loc81 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":94:43)
#loc82 = loc("/usr/include/netinet/in.h":251:20)
#loc83 = loc("/usr/include/netinet/in.h":33:15)
#loc84 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":94:17)
#loc85 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":94:63)
#loc86 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":95:42)
#loc87 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":95:36)
#loc88 = loc("/usr/include/netinet/in.h":250:15)
#loc89 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":95:17)
#loc90 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":95:50)
#loc91 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":96:17)
#loc92 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":99:17)
#loc93 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":96:29)
#loc94 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":96:62)
#loc95 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":96:63)
#loc96 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":96:72)
#loc97 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":96:86)
#loc98 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":96:21)
#loc99 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":96:92)
#loc100 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":97:17)
#loc101 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":98:21)
#loc102 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":103:35)
#loc103 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":103:59)
#loc104 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":103:66)
#loc105 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":103:64)
#loc106 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":103:50)
#loc107 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":103:73)
#loc108 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":103:76)
#loc109 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":103:87)
#loc110 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":103:92)
#loc111 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":103:98)
#loc112 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":103:108)
#loc113 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":103:109)
#loc114 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":103:112)
#loc115 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":103:30)
#loc116 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":103:17)
#loc117 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":103:113)
#loc118 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":104:17)
#loc119 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":107:17)
#loc120 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":104:21)
#loc121 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":104:35)
#loc122 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":104:48)
#loc123 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":104:51)
#loc124 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":104:65)
#loc125 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":105:17)
#loc126 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":106:21)
#loc127 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":109:61)
#loc128 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":109:17)
#loc129 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":109:22)
#loc130 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":109:32)
#loc131 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":109:45)
#loc132 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":109:56)
#loc133 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":109:57)
#loc134 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":111:27)
#loc135 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":111:34)
#loc136 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":111:40)
#loc137 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":111:17)
#loc138 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":111:44)
#loc139 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":112:17)
#loc140 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":115:17)
#loc141 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":112:21)
#loc142 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":113:17)
#loc143 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":114:32)
#loc144 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":114:22)
#loc145 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":114:21)
#loc146 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":116:27)
#loc147 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":116:34)
#loc148 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":116:40)
#loc149 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":116:17)
#loc150 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":116:44)
#loc151 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":117:17)
#loc152 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":120:17)
#loc153 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":117:21)
#loc154 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":118:17)
#loc155 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":119:32)
#loc156 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":119:22)
#loc157 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":119:21)
#loc158 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":122:20)
#loc159 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":123:13)
#loc160 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":126:13)
#loc161 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":123:17)
#loc162 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":123:34)
#loc163 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":124:13)
#loc164 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":125:30)
#loc165 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":125:17)
#loc166 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":65:24)
#loc167 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":65:23)
#loc168 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":135:5)
#loc169 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":143:5)
#loc170 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":136:9)
#loc171 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":136:15)
#loc172 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":138:22)
#loc173 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":138:16)
#loc174 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":138:9)
#loc175 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":138:31)
#loc176 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":139:9)
#loc177 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":142:9)
#loc178 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":139:13)
#loc179 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":139:21)
#loc180 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":140:9)
#loc181 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":141:20)
#loc182 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":141:13)
#loc183 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":173:1)
#loc184 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":176:1)
#loc185 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":175:5)
#loc186 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":175:13)
#loc187 = loc("/usr/include/stdlib.h":575:1)
#loc188 = loc("/usr/include/stdlib.h":575:41)
#loc189 = loc("/usr/include/time.h":76:1)
#loc190 = loc("/usr/include/time.h":76:38)
#loc191 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc192 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc193 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":193:15)
#loc194 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":195:15)
#loc195 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":198:15)
#loc196 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":200:15)
#loc197 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":188:1)
#loc198 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":203:1)
#loc203 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":189:1)
#loc204 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":191:27)
#loc205 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":191:22)
#loc206 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":191:5)
#loc207 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":193:5)
#loc208 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":194:5)
#loc209 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":194:67)
#loc210 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":195:5)
#loc211 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":198:5)
#loc212 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":199:5)
#loc213 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":199:66)
#loc214 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":200:5)
#loc215 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":202:12)
#loc216 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":202:5)
#loc217 = loc("/usr/include/string.h":149:1)
#loc218 = loc("/usr/include/string.h":150:14)
#loc219 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":160:22)
#loc220 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":151:1)
#loc221 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":171:1)
#loc222 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":153:5)
#loc223 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":153:9)
#loc224 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":154:5)
#loc225 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":154:12)
#loc226 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":156:12)
#loc227 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":156:5)
#loc228 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":157:5)
#loc229 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":161:5)
#loc230 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":157:13)
#loc231 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":157:9)
#loc232 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":157:16)
#loc233 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":157:20)
#loc234 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":157:18)
#loc235 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":158:5)
#loc236 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":160:9)
#loc237 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":160:16)
#loc238 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":157:24)
#loc239 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":157:23)
#loc240 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":162:5)
#loc241 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":170:5)
#loc242 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":163:9)
#loc243 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":163:15)
#loc244 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":165:22)
#loc245 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":165:28)
#loc246 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":165:16)
#loc247 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":165:9)
#loc248 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":165:31)
#loc249 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":166:9)
#loc250 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":169:9)
#loc251 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":166:13)
#loc252 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":166:21)
#loc253 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":167:9)
#loc254 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":168:20)
#loc255 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_17.c":168:13)
#loc256 = loc(fused[#loc1, #loc2])
#loc257 = loc(fused[#loc3, #loc4])
#loc258 = loc(fused[#loc5, #loc6])
#loc259 = loc(fused[#loc7, #loc8])
#loc260 = loc(fused[#loc9, #loc10])
#loc261 = loc(fused[#loc12, #loc13])
#loc262 = loc(fused[#loc14, #loc15])
#loc263 = loc(fused[#loc16, #loc17])
#loc264 = loc(fused[#loc18, #loc19])
#loc265 = loc(fused[#loc20, #loc21])
#loc266 = loc(fused[#loc22, #loc23])
#loc267 = loc(fused[#loc25, #loc26])
#loc268 = loc(fused[#loc27, #loc28])
#loc269 = loc(fused[#loc29, #loc30])
#loc270 = loc(fused[#loc31, #loc32])
#loc271 = loc(fused[#loc34, #loc33])
#loc272 = loc(fused[#loc35, #loc36])
#loc273 = loc(fused[#loc38, #loc37])
#loc274 = loc(fused[#loc39, #loc40])
#loc275 = loc(fused[#loc42, #loc36])
#loc276 = loc(fused[#loc43, #loc44])
#loc277 = loc(fused[#loc45, #loc46])
#loc278 = loc(fused[#loc47, #loc48])
#loc279 = loc(fused[#loc49, #loc50])
#loc280 = loc(fused[#loc51, #loc52])
#loc281 = loc(fused[#loc53, #loc54])
#loc282 = loc(fused[#loc57, #loc58])
#loc283 = loc(fused[#loc63, #loc64])
#loc284 = loc(fused[#loc65, #loc66])
#loc285 = loc(fused[#loc67, #loc68])
#loc286 = loc(fused[#loc69, #loc66])
#loc287 = loc(fused[#loc71, #loc72])
#loc288 = loc(fused[#loc74, #loc75])
#loc289 = loc(fused[#loc76, #loc77])
#loc290 = loc(fused[#loc80, #loc78])
#loc291 = loc(fused[#loc84, #loc85])
#loc292 = loc(fused[#loc89, #loc90])
#loc293 = loc(fused[#loc91, #loc92])
#loc294 = loc(fused[#loc94, #loc95])
#loc295 = loc(fused[#loc96, #loc97])
#loc296 = loc(fused[#loc98, #loc99])
#loc297 = loc(fused[#loc100, #loc92])
#loc298 = loc(fused[#loc106, #loc107])
#loc299 = loc(fused[#loc108, #loc109])
#loc300 = loc(fused[#loc110, #loc111])
#loc301 = loc(fused[#loc110, #loc112])
#loc302 = loc(fused[#loc108, #loc113])
#loc303 = loc(fused[#loc116, #loc117])
#loc304 = loc(fused[#loc118, #loc119])
#loc305 = loc(fused[#loc120, #loc121])
#loc306 = loc(fused[#loc123, #loc124])
#loc307 = loc(fused[#loc125, #loc119])
#loc308 = loc(fused[#loc131, #loc132])
#loc309 = loc(fused[#loc130, #loc132])
#loc310 = loc(fused[#loc129, #loc132])
#loc311 = loc(fused[#loc128, #loc127])
#loc312 = loc(fused[#loc137, #loc138])
#loc313 = loc(fused[#loc139, #loc140])
#loc314 = loc(fused[#loc142, #loc140])
#loc315 = loc(fused[#loc145, #loc143])
#loc316 = loc(fused[#loc149, #loc150])
#loc317 = loc(fused[#loc151, #loc152])
#loc318 = loc(fused[#loc154, #loc152])
#loc319 = loc(fused[#loc157, #loc155])
#loc320 = loc(fused[#loc159, #loc160])
#loc321 = loc(fused[#loc161, #loc162])
#loc322 = loc(fused[#loc163, #loc160])
#loc323 = loc(fused[#loc167, #loc166])
#loc324 = loc(fused[#loc168, #loc169])
#loc325 = loc(fused[#loc170, #loc171])
#loc326 = loc(fused[#loc174, #loc175])
#loc327 = loc(fused[#loc176, #loc177])
#loc328 = loc(fused[#loc178, #loc179])
#loc329 = loc(fused[#loc180, #loc177])
#loc330 = loc(fused[#loc183, #loc184])
#loc331 = loc(fused[#loc185, #loc186])
#loc332 = loc(fused[#loc187, #loc188])
#loc333 = loc(fused[#loc189, #loc190])
#loc334 = loc(fused[#loc191, #loc192])
#loc335 = loc(fused[#loc197, #loc198])
#loc338 = loc(fused[#loc208, #loc209])
#loc339 = loc(fused[#loc212, #loc213])
#loc340 = loc(fused[#loc216, #loc215])
#loc341 = loc(fused[#loc217, #loc218])
#loc342 = loc(fused[#loc220, #loc221])
#loc343 = loc(fused[#loc222, #loc223])
#loc344 = loc(fused[#loc224, #loc225])
#loc345 = loc(fused[#loc227, #loc226])
#loc346 = loc(fused[#loc228, #loc229])
#loc347 = loc(fused[#loc231, #loc230])
#loc348 = loc(fused[#loc232, #loc233])
#loc349 = loc(fused[#loc235, #loc229])
#loc350 = loc(fused[#loc239, #loc238])
#loc351 = loc(fused[#loc240, #loc241])
#loc352 = loc(fused[#loc242, #loc243])
#loc353 = loc(fused[#loc247, #loc248])
#loc354 = loc(fused[#loc249, #loc250])
#loc355 = loc(fused[#loc251, #loc252])
#loc356 = loc(fused[#loc253, #loc250])
