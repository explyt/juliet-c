!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc200 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":386:10)
#loc201 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":386:14)
#loc202 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":386:20)
#loc203 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":386:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc609 = loc(fused[#loc200, #loc201])
#loc610 = loc(fused[#loc202, #loc203])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc532)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc533)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc534)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc535)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc536)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc537)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc538)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc539)
  cir.func private @close(!s32i) -> !s32i loc(#loc540)
  cir.func private @printIntLine(!s32i) loc(#loc541)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc542)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc23)
  cir.func no_proto @CWE369_Divide_by_Zero__float_listenSocket_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc544)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc28)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc545)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc547)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc547)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc32)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc32)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc550)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc551)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc552)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc553)
          %10 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc554)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc44)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc44)
          cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc552)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc46)
          %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc46)
          cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc553)
          cir.scope {
            cir.do {
              %15 = cir.const #cir.int<2> : !s32i loc(#loc51)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc52)
              %17 = cir.const #cir.int<6> : !s32i loc(#loc53)
              %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc54)
              cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc556)
              cir.scope {
                %55 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc59)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc60)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc60)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc558)
                cir.if %58 {
                  cir.break loc(#loc62)
                } loc(#loc559)
              } loc(#loc557)
              %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc560)
              %20 = cir.const #cir.int<0> : !s32i loc(#loc65)
              %21 = cir.const #cir.int<16> : !u64i loc(#loc561)
              cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc562)
              %22 = cir.const #cir.int<2> : !s32i loc(#loc70)
              %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc70)
              %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
              cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc563)
              %25 = cir.const #cir.int<0> : !s32i loc(#loc73)
              %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc73)
              %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc74)
              %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc75)
              cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc564)
              %29 = cir.const #cir.int<27015> : !s32i loc(#loc77)
              %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc77)
              %31 = cir.call @htons(%30) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc78)
              %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
              cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc565)
              cir.scope {
                %55 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc84)
                %56 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc567)
                %57 = cir.const #cir.int<16> : !u64i loc(#loc568)
                %58 = cir.cast(integral, %57 : !u64i), !u32i loc(#loc568)
                %59 = cir.call @bind(%55, %56, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc89)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc90)
                %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc90)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc569)
                cir.if %62 {
                  cir.break loc(#loc92)
                } loc(#loc570)
              } loc(#loc566)
              cir.scope {
                %55 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc95)
                %56 = cir.const #cir.int<5> : !s32i loc(#loc96)
                %57 = cir.call @listen(%55, %56) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc97)
                %58 = cir.const #cir.int<1> : !s32i loc(#loc98)
                %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc98)
                %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc572)
                cir.if %60 {
                  cir.break loc(#loc100)
                } loc(#loc573)
              } loc(#loc571)
              %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc101)
              %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc102)
              %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc103)
              %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc104)
              cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc574)
              cir.scope {
                %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc109)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc110)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc110)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc576)
                cir.if %58 {
                  cir.break loc(#loc112)
                } loc(#loc577)
              } loc(#loc575)
              %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc113)
              %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc114)
              %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc114)
              %40 = cir.const #cir.int<20> : !s32i loc(#loc115)
              %41 = cir.const #cir.int<1> : !s32i loc(#loc116)
              %42 = cir.binop(sub, %40, %41) nsw : !s32i loc(#loc115)
              %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc115)
              %44 = cir.const #cir.int<0> : !s32i loc(#loc117)
              %45 = cir.call @recv(%37, %39, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc118)
              %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc118)
              cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc578)
              cir.scope {
                %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc123)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc124)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc124)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc580)
                %59 = cir.ternary(%58, true {
                  %60 = cir.const #true loc(#loc125)
                  cir.yield %60 : !cir.bool loc(#loc125)
                }, false {
                  %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc126)
                  %61 = cir.const #cir.int<0> : !s32i loc(#loc127)
                  %62 = cir.cmp(eq, %60, %61) : !s32i, !cir.bool loc(#loc581)
                  %63 = cir.ternary(%62, true {
                    %64 = cir.const #true loc(#loc125)
                    cir.yield %64 : !cir.bool loc(#loc125)
                  }, false {
                    %64 = cir.const #false loc(#loc125)
                    cir.yield %64 : !cir.bool loc(#loc125)
                  }) : (!cir.bool) -> !cir.bool loc(#loc125)
                  cir.yield %63 : !cir.bool loc(#loc125)
                }) : (!cir.bool) -> !cir.bool loc(#loc125)
                cir.if %59 {
                  cir.break loc(#loc129)
                } loc(#loc582)
              } loc(#loc579)
              %47 = cir.const #cir.int<0> : !s32i loc(#loc130)
              %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc130)
              %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc131)
              %50 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc132)
              %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc132)
              cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc583)
              %52 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc133)
              %53 = cir.call @atof(%52) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc134)
              %54 = cir.cast(floating, %53 : !cir.double), !cir.float loc(#loc134)
              cir.store %54, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc584)
              cir.yield loc(#loc50)
            } while {
              %15 = cir.const #cir.int<0> : !s32i loc(#loc137)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc137)
              cir.condition(%16) loc(#loc137)
            } loc(#loc555)
          } loc(#loc555)
          cir.scope {
            %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc140)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc141)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc141)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc586)
            cir.if %18 {
              %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc143)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc144)
            } loc(#loc587)
          } loc(#loc585)
          cir.scope {
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc147)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc148)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc148)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc589)
            cir.if %18 {
              %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc150)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc151)
            } loc(#loc590)
          } loc(#loc588)
        } loc(#loc549)
      } else {
        %6 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc152)
        cir.store %6, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc591)
      } loc(#loc548)
    } loc(#loc546)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc593)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc593)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc156)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc156)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc596)
          %7 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc165)
          %8 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc166)
          %9 = cir.cast(floating, %8 : !cir.float), !cir.double loc(#loc166)
          %10 = cir.binop(div, %7, %9) : !cir.double loc(#loc597)
          %11 = cir.cast(float_to_int, %10 : !cir.double), !s32i loc(#loc597)
          cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc596)
          %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc167)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc168)
        } loc(#loc595)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc171)
          %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc171)
          %8 = cir.fabs %7 : !cir.double loc(#loc171)
          %9 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc172)
          %10 = cir.cmp(gt, %8, %9) : !cir.double, !cir.bool loc(#loc599)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc601)
            %12 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc179)
            %13 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc180)
            %14 = cir.cast(floating, %13 : !cir.float), !cir.double loc(#loc180)
            %15 = cir.binop(div, %12, %14) : !cir.double loc(#loc602)
            %16 = cir.cast(float_to_int, %15 : !cir.double), !s32i loc(#loc602)
            cir.store %16, %11 : !s32i, !cir.ptr<!s32i> loc(#loc601)
            %17 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc181)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc182)
          } else {
            %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc23)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc23)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc183)
          } loc(#loc600)
        } loc(#loc598)
      } loc(#loc594)
    } loc(#loc592)
    cir.return loc(#loc25)
  } loc(#loc543)
  cir.func no_proto @CWE369_Divide_by_Zero__float_listenSocket_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc604)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc186)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc605)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc188)
    cir.return loc(#loc185)
  } loc(#loc603)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc606)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc607)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc194)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc195)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc196)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc197)
  cir.func @main(%arg0: !s32i loc(fused[#loc200, #loc201]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc202, #loc203])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc609)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc610)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc199)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc204)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc205)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc206)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc206)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc207)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc194)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc194)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc208)
    %8 = cir.get_global @CWE369_Divide_by_Zero__float_listenSocket_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc611)
    cir.call @CWE369_Divide_by_Zero__float_listenSocket_12_good() : () -> () loc(#loc209)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc195)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc195)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc211)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc196)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc196)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc212)
    %13 = cir.get_global @CWE369_Divide_by_Zero__float_listenSocket_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc612)
    cir.call @CWE369_Divide_by_Zero__float_listenSocket_12_bad() : () -> () loc(#loc213)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc197)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc197)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc215)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc216)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc613)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc613)
    cir.return %17 : !s32i loc(#loc613)
  } loc(#loc608)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc615)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc222)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc616)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc618)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc618)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc226)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc226)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc621)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc622)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc623)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc624)
          %10 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc625)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc238)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc238)
          cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc623)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc240)
          %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc240)
          cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc624)
          cir.scope {
            cir.do {
              %15 = cir.const #cir.int<2> : !s32i loc(#loc245)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc246)
              %17 = cir.const #cir.int<6> : !s32i loc(#loc247)
              %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc248)
              cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc627)
              cir.scope {
                %55 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc253)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc254)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc254)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc629)
                cir.if %58 {
                  cir.break loc(#loc256)
                } loc(#loc630)
              } loc(#loc628)
              %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc631)
              %20 = cir.const #cir.int<0> : !s32i loc(#loc259)
              %21 = cir.const #cir.int<16> : !u64i loc(#loc632)
              cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc633)
              %22 = cir.const #cir.int<2> : !s32i loc(#loc264)
              %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc264)
              %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
              cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc634)
              %25 = cir.const #cir.int<0> : !s32i loc(#loc266)
              %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc266)
              %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc74)
              %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc75)
              cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc635)
              %29 = cir.const #cir.int<27015> : !s32i loc(#loc268)
              %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc268)
              %31 = cir.call @htons(%30) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc269)
              %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
              cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc636)
              cir.scope {
                %55 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc274)
                %56 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc638)
                %57 = cir.const #cir.int<16> : !u64i loc(#loc639)
                %58 = cir.cast(integral, %57 : !u64i), !u32i loc(#loc639)
                %59 = cir.call @bind(%55, %56, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc279)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc280)
                %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc280)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc640)
                cir.if %62 {
                  cir.break loc(#loc282)
                } loc(#loc641)
              } loc(#loc637)
              cir.scope {
                %55 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc285)
                %56 = cir.const #cir.int<5> : !s32i loc(#loc286)
                %57 = cir.call @listen(%55, %56) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc287)
                %58 = cir.const #cir.int<1> : !s32i loc(#loc288)
                %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc288)
                %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc643)
                cir.if %60 {
                  cir.break loc(#loc290)
                } loc(#loc644)
              } loc(#loc642)
              %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc291)
              %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc292)
              %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc293)
              %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc294)
              cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc645)
              cir.scope {
                %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc299)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc300)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc300)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc647)
                cir.if %58 {
                  cir.break loc(#loc302)
                } loc(#loc648)
              } loc(#loc646)
              %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc303)
              %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc304)
              %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc304)
              %40 = cir.const #cir.int<20> : !s32i loc(#loc305)
              %41 = cir.const #cir.int<1> : !s32i loc(#loc306)
              %42 = cir.binop(sub, %40, %41) nsw : !s32i loc(#loc305)
              %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc305)
              %44 = cir.const #cir.int<0> : !s32i loc(#loc307)
              %45 = cir.call @recv(%37, %39, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc308)
              %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc308)
              cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc649)
              cir.scope {
                %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc313)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc314)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc314)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc651)
                %59 = cir.ternary(%58, true {
                  %60 = cir.const #true loc(#loc315)
                  cir.yield %60 : !cir.bool loc(#loc315)
                }, false {
                  %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc316)
                  %61 = cir.const #cir.int<0> : !s32i loc(#loc317)
                  %62 = cir.cmp(eq, %60, %61) : !s32i, !cir.bool loc(#loc652)
                  %63 = cir.ternary(%62, true {
                    %64 = cir.const #true loc(#loc315)
                    cir.yield %64 : !cir.bool loc(#loc315)
                  }, false {
                    %64 = cir.const #false loc(#loc315)
                    cir.yield %64 : !cir.bool loc(#loc315)
                  }) : (!cir.bool) -> !cir.bool loc(#loc315)
                  cir.yield %63 : !cir.bool loc(#loc315)
                }) : (!cir.bool) -> !cir.bool loc(#loc315)
                cir.if %59 {
                  cir.break loc(#loc319)
                } loc(#loc653)
              } loc(#loc650)
              %47 = cir.const #cir.int<0> : !s32i loc(#loc320)
              %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc320)
              %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc321)
              %50 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc322)
              %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc322)
              cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc654)
              %52 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc323)
              %53 = cir.call @atof(%52) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc324)
              %54 = cir.cast(floating, %53 : !cir.double), !cir.float loc(#loc324)
              cir.store %54, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc655)
              cir.yield loc(#loc244)
            } while {
              %15 = cir.const #cir.int<0> : !s32i loc(#loc327)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc327)
              cir.condition(%16) loc(#loc327)
            } loc(#loc626)
          } loc(#loc626)
          cir.scope {
            %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc330)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc331)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc331)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc657)
            cir.if %18 {
              %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc333)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc334)
            } loc(#loc658)
          } loc(#loc656)
          cir.scope {
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc337)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc338)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc338)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc660)
            cir.if %18 {
              %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc340)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc341)
            } loc(#loc661)
          } loc(#loc659)
        } loc(#loc620)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc663)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc664)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc665)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc666)
          %10 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc667)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc349)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc349)
          cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc665)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc351)
          %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc351)
          cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc666)
          cir.scope {
            cir.do {
              %15 = cir.const #cir.int<2> : !s32i loc(#loc356)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc357)
              %17 = cir.const #cir.int<6> : !s32i loc(#loc358)
              %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc359)
              cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc669)
              cir.scope {
                %55 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc364)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc365)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc365)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc671)
                cir.if %58 {
                  cir.break loc(#loc367)
                } loc(#loc672)
              } loc(#loc670)
              %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc673)
              %20 = cir.const #cir.int<0> : !s32i loc(#loc370)
              %21 = cir.const #cir.int<16> : !u64i loc(#loc674)
              cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc675)
              %22 = cir.const #cir.int<2> : !s32i loc(#loc375)
              %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc375)
              %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
              cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc676)
              %25 = cir.const #cir.int<0> : !s32i loc(#loc377)
              %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc377)
              %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc74)
              %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc75)
              cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc677)
              %29 = cir.const #cir.int<27015> : !s32i loc(#loc379)
              %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc379)
              %31 = cir.call @htons(%30) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc380)
              %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
              cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc678)
              cir.scope {
                %55 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc385)
                %56 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc680)
                %57 = cir.const #cir.int<16> : !u64i loc(#loc681)
                %58 = cir.cast(integral, %57 : !u64i), !u32i loc(#loc681)
                %59 = cir.call @bind(%55, %56, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc390)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc391)
                %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc391)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc682)
                cir.if %62 {
                  cir.break loc(#loc393)
                } loc(#loc683)
              } loc(#loc679)
              cir.scope {
                %55 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc396)
                %56 = cir.const #cir.int<5> : !s32i loc(#loc397)
                %57 = cir.call @listen(%55, %56) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc398)
                %58 = cir.const #cir.int<1> : !s32i loc(#loc399)
                %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc399)
                %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc685)
                cir.if %60 {
                  cir.break loc(#loc401)
                } loc(#loc686)
              } loc(#loc684)
              %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc402)
              %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc403)
              %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc404)
              %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc405)
              cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc687)
              cir.scope {
                %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc410)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc411)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc411)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc689)
                cir.if %58 {
                  cir.break loc(#loc413)
                } loc(#loc690)
              } loc(#loc688)
              %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc414)
              %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc415)
              %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc415)
              %40 = cir.const #cir.int<20> : !s32i loc(#loc416)
              %41 = cir.const #cir.int<1> : !s32i loc(#loc417)
              %42 = cir.binop(sub, %40, %41) nsw : !s32i loc(#loc416)
              %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc416)
              %44 = cir.const #cir.int<0> : !s32i loc(#loc418)
              %45 = cir.call @recv(%37, %39, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc419)
              %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc419)
              cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc691)
              cir.scope {
                %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc424)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc425)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc425)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc693)
                %59 = cir.ternary(%58, true {
                  %60 = cir.const #true loc(#loc426)
                  cir.yield %60 : !cir.bool loc(#loc426)
                }, false {
                  %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc427)
                  %61 = cir.const #cir.int<0> : !s32i loc(#loc428)
                  %62 = cir.cmp(eq, %60, %61) : !s32i, !cir.bool loc(#loc694)
                  %63 = cir.ternary(%62, true {
                    %64 = cir.const #true loc(#loc426)
                    cir.yield %64 : !cir.bool loc(#loc426)
                  }, false {
                    %64 = cir.const #false loc(#loc426)
                    cir.yield %64 : !cir.bool loc(#loc426)
                  }) : (!cir.bool) -> !cir.bool loc(#loc426)
                  cir.yield %63 : !cir.bool loc(#loc426)
                }) : (!cir.bool) -> !cir.bool loc(#loc426)
                cir.if %59 {
                  cir.break loc(#loc430)
                } loc(#loc695)
              } loc(#loc692)
              %47 = cir.const #cir.int<0> : !s32i loc(#loc431)
              %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc431)
              %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc432)
              %50 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc433)
              %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc433)
              cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc696)
              %52 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc434)
              %53 = cir.call @atof(%52) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc435)
              %54 = cir.cast(floating, %53 : !cir.double), !cir.float loc(#loc435)
              cir.store %54, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc697)
              cir.yield loc(#loc355)
            } while {
              %15 = cir.const #cir.int<0> : !s32i loc(#loc438)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc438)
              cir.condition(%16) loc(#loc438)
            } loc(#loc668)
          } loc(#loc668)
          cir.scope {
            %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc441)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc442)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc442)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc699)
            cir.if %18 {
              %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc444)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc445)
            } loc(#loc700)
          } loc(#loc698)
          cir.scope {
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc448)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc449)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc449)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc702)
            cir.if %18 {
              %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc451)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc452)
            } loc(#loc703)
          } loc(#loc701)
        } loc(#loc662)
      } loc(#loc619)
    } loc(#loc617)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc705)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc705)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc455)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc455)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc462)
          %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc462)
          %8 = cir.fabs %7 : !cir.double loc(#loc462)
          %9 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc463)
          %10 = cir.cmp(gt, %8, %9) : !cir.double, !cir.bool loc(#loc708)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc710)
            %12 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc470)
            %13 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc471)
            %14 = cir.cast(floating, %13 : !cir.float), !cir.double loc(#loc471)
            %15 = cir.binop(div, %12, %14) : !cir.double loc(#loc711)
            %16 = cir.cast(float_to_int, %15 : !cir.double), !s32i loc(#loc711)
            cir.store %16, %11 : !s32i, !cir.ptr<!s32i> loc(#loc710)
            %17 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc472)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc473)
          } else {
            %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc474)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc474)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc475)
          } loc(#loc709)
        } loc(#loc707)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc478)
          %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc478)
          %8 = cir.fabs %7 : !cir.double loc(#loc478)
          %9 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc479)
          %10 = cir.cmp(gt, %8, %9) : !cir.double, !cir.bool loc(#loc713)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc715)
            %12 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc486)
            %13 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc487)
            %14 = cir.cast(floating, %13 : !cir.float), !cir.double loc(#loc487)
            %15 = cir.binop(div, %12, %14) : !cir.double loc(#loc716)
            %16 = cir.cast(float_to_int, %15 : !cir.double), !s32i loc(#loc716)
            cir.store %16, %11 : !s32i, !cir.ptr<!s32i> loc(#loc715)
            %17 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc488)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc489)
          } else {
            %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc490)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc490)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc491)
          } loc(#loc714)
        } loc(#loc712)
      } loc(#loc706)
    } loc(#loc704)
    cir.return loc(#loc219)
  } loc(#loc614)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc718)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc496)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc719)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc721)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc721)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc500)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc500)
      cir.if %5 {
        %6 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc505)
        cir.store %6, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc723)
      } else {
        %6 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc507)
        cir.store %6, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc724)
      } loc(#loc722)
    } loc(#loc720)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc726)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc726)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc511)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc511)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc729)
          %7 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc520)
          %8 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc521)
          %9 = cir.cast(floating, %8 : !cir.float), !cir.double loc(#loc521)
          %10 = cir.binop(div, %7, %9) : !cir.double loc(#loc730)
          %11 = cir.cast(float_to_int, %10 : !cir.double), !s32i loc(#loc730)
          cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc729)
          %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc522)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc523)
        } loc(#loc728)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc732)
          %7 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc528)
          %8 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc529)
          %9 = cir.cast(floating, %8 : !cir.float), !cir.double loc(#loc529)
          %10 = cir.binop(div, %7, %9) : !cir.double loc(#loc733)
          %11 = cir.cast(float_to_int, %10 : !cir.double), !s32i loc(#loc733)
          cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc732)
          %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc530)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc531)
        } loc(#loc731)
      } loc(#loc727)
    } loc(#loc725)
    cir.return loc(#loc493)
  } loc(#loc717)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/sys/socket.h":102:1)
#loc4 = loc("/usr/include/sys/socket.h":102:62)
#loc5 = loc("/usr/include/netinet/in.h":404:1)
#loc6 = loc("/usr/include/netinet/in.h":405:40)
#loc7 = loc("/usr/include/sys/socket.h":112:1)
#loc8 = loc("/usr/include/sys/socket.h":113:6)
#loc9 = loc("/usr/include/sys/socket.h":296:1)
#loc10 = loc("/usr/include/sys/socket.h":296:39)
#loc11 = loc("/usr/include/sys/socket.h":306:1)
#loc12 = loc("/usr/include/sys/socket.h":307:38)
#loc13 = loc("/usr/include/sys/socket.h":145:1)
#loc14 = loc("/usr/include/sys/socket.h":145:68)
#loc15 = loc("/usr/include/stdlib.h":102:1)
#loc16 = loc("/usr/include/stdlib.h":103:33)
#loc17 = loc("/usr/include/unistd.h":358:1)
#loc18 = loc("/usr/include/unistd.h":358:27)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc23 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":146:23)
#loc24 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":46:1)
#loc25 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":149:1)
#loc26 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":48:5)
#loc27 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":48:11)
#loc28 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":50:12)
#loc29 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":50:5)
#loc30 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":51:5)
#loc31 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":127:5)
#loc32 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":51:8)
#loc33 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":51:33)
#loc34 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":52:5)
#loc35 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":122:5)
#loc36 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":124:5)
#loc37 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":53:9)
#loc38 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":121:9)
#loc39 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":58:13)
#loc40 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":58:17)
#loc41 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":59:13)
#loc42 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":59:32)
#loc43 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":60:13)
#loc44 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":60:35)
#loc45 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":61:13)
#loc46 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":61:35)
#loc47 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":62:13)
#loc48 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":62:45)
#loc49 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":63:13)
#loc50 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":106:21)
#loc51 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":72:39)
#loc52 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":72:48)
#loc53 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":72:61)
#loc54 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":72:32)
#loc55 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":72:17)
#loc56 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":72:72)
#loc57 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":73:17)
#loc58 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":76:17)
#loc59 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":73:21)
#loc60 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":73:37)
#loc61 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":74:17)
#loc62 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":75:21)
#loc63 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":77:24)
#loc64 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":77:25)
#loc65 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":77:34)
#loc66 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":77:37)
#loc67 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":77:51)
#loc68 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":77:17)
#loc69 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":77:52)
#loc70 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":78:38)
#loc71 = loc("/usr/include/netinet/in.h":249:5)
#loc72 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":78:17)
#loc73 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":79:43)
#loc74 = loc("/usr/include/netinet/in.h":251:20)
#loc75 = loc("/usr/include/netinet/in.h":33:15)
#loc76 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":79:17)
#loc77 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":80:42)
#loc78 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":80:36)
#loc79 = loc("/usr/include/netinet/in.h":250:15)
#loc80 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":80:17)
#loc81 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":80:50)
#loc82 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":81:17)
#loc83 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":84:17)
#loc84 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":81:26)
#loc85 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":81:58)
#loc86 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":81:59)
#loc87 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":81:68)
#loc88 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":81:82)
#loc89 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":81:21)
#loc90 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":81:88)
#loc91 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":82:17)
#loc92 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":83:21)
#loc93 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":85:17)
#loc94 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":88:17)
#loc95 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":85:28)
#loc96 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":85:42)
#loc97 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":85:21)
#loc98 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":85:61)
#loc99 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":86:17)
#loc100 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":87:21)
#loc101 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":89:39)
#loc102 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":89:53)
#loc103 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":89:59)
#loc104 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":89:32)
#loc105 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":89:17)
#loc106 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":89:63)
#loc107 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":90:17)
#loc108 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":93:17)
#loc109 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":90:21)
#loc110 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":90:37)
#loc111 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":91:17)
#loc112 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":92:21)
#loc113 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":96:35)
#loc114 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":96:49)
#loc115 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":96:62)
#loc116 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":96:80)
#loc117 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":96:83)
#loc118 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":96:30)
#loc119 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":96:17)
#loc120 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":96:84)
#loc121 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":97:17)
#loc122 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":100:17)
#loc123 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":97:21)
#loc124 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":97:35)
#loc125 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":97:48)
#loc126 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":97:51)
#loc127 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":97:65)
#loc128 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":98:17)
#loc129 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":99:21)
#loc130 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":102:43)
#loc131 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":102:29)
#loc132 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":102:17)
#loc133 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":104:36)
#loc134 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":104:31)
#loc135 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":104:17)
#loc136 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":104:47)
#loc137 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":106:20)
#loc138 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":107:13)
#loc139 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":110:13)
#loc140 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":107:17)
#loc141 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":107:33)
#loc142 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":108:13)
#loc143 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":109:30)
#loc144 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":109:17)
#loc145 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":111:13)
#loc146 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":114:13)
#loc147 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":111:17)
#loc148 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":111:33)
#loc149 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":112:13)
#loc150 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":113:30)
#loc151 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":113:17)
#loc152 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":126:16)
#loc153 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":126:9)
#loc154 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":128:5)
#loc155 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":148:5)
#loc156 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":128:8)
#loc157 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":128:33)
#loc158 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":129:5)
#loc159 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":135:5)
#loc160 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":137:5)
#loc161 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":130:9)
#loc162 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":134:9)
#loc163 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":132:13)
#loc164 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":132:44)
#loc165 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":132:32)
#loc166 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":132:40)
#loc167 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":133:26)
#loc168 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":133:13)
#loc169 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":139:9)
#loc170 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":147:9)
#loc171 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":139:17)
#loc172 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":139:25)
#loc173 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":139:12)
#loc174 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":140:9)
#loc175 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":143:9)
#loc176 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":145:9)
#loc177 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":141:13)
#loc178 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":141:44)
#loc179 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":141:32)
#loc180 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":141:40)
#loc181 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":142:26)
#loc182 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":142:13)
#loc183 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":146:13)
#loc184 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":371:1)
#loc185 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":375:1)
#loc186 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":373:5)
#loc187 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":373:13)
#loc188 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":374:5)
#loc189 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":374:13)
#loc190 = loc("/usr/include/stdlib.h":575:1)
#loc191 = loc("/usr/include/stdlib.h":575:41)
#loc192 = loc("/usr/include/time.h":76:1)
#loc193 = loc("/usr/include/time.h":76:38)
#loc194 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":391:15)
#loc195 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":393:15)
#loc196 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":396:15)
#loc197 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":398:15)
#loc198 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":386:1)
#loc199 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":401:1)
#loc204 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":387:1)
#loc205 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":389:27)
#loc206 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":389:22)
#loc207 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":389:5)
#loc208 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":391:5)
#loc209 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":392:5)
#loc210 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":392:55)
#loc211 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":393:5)
#loc212 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":396:5)
#loc213 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":397:5)
#loc214 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":397:54)
#loc215 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":398:5)
#loc216 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":400:12)
#loc217 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":400:5)
#loc218 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":158:1)
#loc219 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":333:1)
#loc220 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":160:5)
#loc221 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":160:11)
#loc222 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":162:12)
#loc223 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":162:5)
#loc224 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":163:5)
#loc225 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":306:5)
#loc226 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":163:8)
#loc227 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":163:33)
#loc228 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":164:5)
#loc229 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":234:5)
#loc230 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":236:5)
#loc231 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":165:9)
#loc232 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":233:9)
#loc233 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":170:13)
#loc234 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":170:17)
#loc235 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":171:13)
#loc236 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":171:32)
#loc237 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":172:13)
#loc238 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":172:35)
#loc239 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":173:13)
#loc240 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":173:35)
#loc241 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":174:13)
#loc242 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":174:45)
#loc243 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":175:13)
#loc244 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":218:21)
#loc245 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":184:39)
#loc246 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":184:48)
#loc247 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":184:61)
#loc248 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":184:32)
#loc249 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":184:17)
#loc250 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":184:72)
#loc251 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":185:17)
#loc252 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":188:17)
#loc253 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":185:21)
#loc254 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":185:37)
#loc255 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":186:17)
#loc256 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":187:21)
#loc257 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":189:24)
#loc258 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":189:25)
#loc259 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":189:34)
#loc260 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":189:37)
#loc261 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":189:51)
#loc262 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":189:17)
#loc263 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":189:52)
#loc264 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":190:38)
#loc265 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":190:17)
#loc266 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":191:43)
#loc267 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":191:17)
#loc268 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":192:42)
#loc269 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":192:36)
#loc270 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":192:17)
#loc271 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":192:50)
#loc272 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":193:17)
#loc273 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":196:17)
#loc274 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":193:26)
#loc275 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":193:58)
#loc276 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":193:59)
#loc277 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":193:68)
#loc278 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":193:82)
#loc279 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":193:21)
#loc280 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":193:88)
#loc281 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":194:17)
#loc282 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":195:21)
#loc283 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":197:17)
#loc284 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":200:17)
#loc285 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":197:28)
#loc286 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":197:42)
#loc287 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":197:21)
#loc288 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":197:61)
#loc289 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":198:17)
#loc290 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":199:21)
#loc291 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":201:39)
#loc292 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":201:53)
#loc293 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":201:59)
#loc294 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":201:32)
#loc295 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":201:17)
#loc296 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":201:63)
#loc297 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":202:17)
#loc298 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":205:17)
#loc299 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":202:21)
#loc300 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":202:37)
#loc301 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":203:17)
#loc302 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":204:21)
#loc303 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":208:35)
#loc304 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":208:49)
#loc305 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":208:62)
#loc306 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":208:80)
#loc307 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":208:83)
#loc308 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":208:30)
#loc309 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":208:17)
#loc310 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":208:84)
#loc311 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":209:17)
#loc312 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":212:17)
#loc313 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":209:21)
#loc314 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":209:35)
#loc315 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":209:48)
#loc316 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":209:51)
#loc317 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":209:65)
#loc318 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":210:17)
#loc319 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":211:21)
#loc320 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":214:43)
#loc321 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":214:29)
#loc322 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":214:17)
#loc323 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":216:36)
#loc324 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":216:31)
#loc325 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":216:17)
#loc326 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":216:47)
#loc327 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":218:20)
#loc328 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":219:13)
#loc329 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":222:13)
#loc330 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":219:17)
#loc331 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":219:33)
#loc332 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":220:13)
#loc333 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":221:30)
#loc334 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":221:17)
#loc335 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":223:13)
#loc336 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":226:13)
#loc337 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":223:17)
#loc338 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":223:33)
#loc339 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":224:13)
#loc340 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":225:30)
#loc341 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":225:17)
#loc342 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":237:9)
#loc343 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":305:9)
#loc344 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":242:13)
#loc345 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":242:17)
#loc346 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":243:13)
#loc347 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":243:32)
#loc348 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":244:13)
#loc349 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":244:35)
#loc350 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":245:13)
#loc351 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":245:35)
#loc352 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":246:13)
#loc353 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":246:45)
#loc354 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":247:13)
#loc355 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":290:21)
#loc356 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":256:39)
#loc357 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":256:48)
#loc358 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":256:61)
#loc359 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":256:32)
#loc360 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":256:17)
#loc361 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":256:72)
#loc362 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":257:17)
#loc363 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":260:17)
#loc364 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":257:21)
#loc365 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":257:37)
#loc366 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":258:17)
#loc367 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":259:21)
#loc368 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":261:24)
#loc369 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":261:25)
#loc370 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":261:34)
#loc371 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":261:37)
#loc372 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":261:51)
#loc373 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":261:17)
#loc374 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":261:52)
#loc375 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":262:38)
#loc376 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":262:17)
#loc377 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":263:43)
#loc378 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":263:17)
#loc379 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":264:42)
#loc380 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":264:36)
#loc381 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":264:17)
#loc382 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":264:50)
#loc383 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":265:17)
#loc384 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":268:17)
#loc385 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":265:26)
#loc386 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":265:58)
#loc387 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":265:59)
#loc388 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":265:68)
#loc389 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":265:82)
#loc390 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":265:21)
#loc391 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":265:88)
#loc392 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":266:17)
#loc393 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":267:21)
#loc394 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":269:17)
#loc395 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":272:17)
#loc396 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":269:28)
#loc397 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":269:42)
#loc398 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":269:21)
#loc399 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":269:61)
#loc400 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":270:17)
#loc401 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":271:21)
#loc402 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":273:39)
#loc403 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":273:53)
#loc404 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":273:59)
#loc405 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":273:32)
#loc406 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":273:17)
#loc407 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":273:63)
#loc408 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":274:17)
#loc409 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":277:17)
#loc410 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":274:21)
#loc411 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":274:37)
#loc412 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":275:17)
#loc413 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":276:21)
#loc414 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":280:35)
#loc415 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":280:49)
#loc416 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":280:62)
#loc417 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":280:80)
#loc418 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":280:83)
#loc419 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":280:30)
#loc420 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":280:17)
#loc421 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":280:84)
#loc422 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":281:17)
#loc423 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":284:17)
#loc424 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":281:21)
#loc425 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":281:35)
#loc426 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":281:48)
#loc427 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":281:51)
#loc428 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":281:65)
#loc429 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":282:17)
#loc430 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":283:21)
#loc431 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":286:43)
#loc432 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":286:29)
#loc433 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":286:17)
#loc434 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":288:36)
#loc435 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":288:31)
#loc436 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":288:17)
#loc437 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":288:47)
#loc438 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":290:20)
#loc439 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":291:13)
#loc440 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":294:13)
#loc441 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":291:17)
#loc442 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":291:33)
#loc443 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":292:13)
#loc444 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":293:30)
#loc445 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":293:17)
#loc446 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":295:13)
#loc447 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":298:13)
#loc448 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":295:17)
#loc449 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":295:33)
#loc450 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":296:13)
#loc451 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":297:30)
#loc452 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":297:17)
#loc453 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":307:5)
#loc454 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":332:5)
#loc455 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":307:8)
#loc456 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":307:33)
#loc457 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":308:5)
#loc458 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":319:5)
#loc459 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":321:5)
#loc460 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":310:9)
#loc461 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":318:9)
#loc462 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":310:17)
#loc463 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":310:25)
#loc464 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":310:12)
#loc465 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":311:9)
#loc466 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":314:9)
#loc467 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":316:9)
#loc468 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":312:13)
#loc469 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":312:44)
#loc470 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":312:32)
#loc471 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":312:40)
#loc472 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":313:26)
#loc473 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":313:13)
#loc474 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":317:23)
#loc475 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":317:13)
#loc476 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":323:9)
#loc477 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":331:9)
#loc478 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":323:17)
#loc479 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":323:25)
#loc480 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":323:12)
#loc481 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":324:9)
#loc482 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":327:9)
#loc483 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":329:9)
#loc484 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":325:13)
#loc485 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":325:44)
#loc486 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":325:32)
#loc487 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":325:40)
#loc488 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":326:26)
#loc489 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":326:13)
#loc490 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":330:23)
#loc491 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":330:13)
#loc492 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":338:1)
#loc493 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":369:1)
#loc494 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":340:5)
#loc495 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":340:11)
#loc496 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":342:12)
#loc497 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":342:5)
#loc498 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":343:5)
#loc499 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":352:5)
#loc500 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":343:8)
#loc501 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":343:33)
#loc502 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":344:5)
#loc503 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":347:5)
#loc504 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":349:5)
#loc505 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":346:16)
#loc506 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":346:9)
#loc507 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":351:16)
#loc508 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":351:9)
#loc509 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":353:5)
#loc510 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":368:5)
#loc511 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":353:8)
#loc512 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":353:33)
#loc513 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":354:5)
#loc514 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":360:5)
#loc515 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":362:5)
#loc516 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":355:9)
#loc517 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":359:9)
#loc518 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":357:13)
#loc519 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":357:44)
#loc520 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":357:32)
#loc521 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":357:40)
#loc522 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":358:26)
#loc523 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":358:13)
#loc524 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":363:9)
#loc525 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":367:9)
#loc526 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":365:13)
#loc527 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":365:44)
#loc528 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":365:32)
#loc529 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":365:40)
#loc530 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":366:26)
#loc531 = loc("CWE369_Divide_by_Zero__float_listenSocket_12.c":366:13)
#loc532 = loc(fused[#loc1, #loc2])
#loc533 = loc(fused[#loc3, #loc4])
#loc534 = loc(fused[#loc5, #loc6])
#loc535 = loc(fused[#loc7, #loc8])
#loc536 = loc(fused[#loc9, #loc10])
#loc537 = loc(fused[#loc11, #loc12])
#loc538 = loc(fused[#loc13, #loc14])
#loc539 = loc(fused[#loc15, #loc16])
#loc540 = loc(fused[#loc17, #loc18])
#loc541 = loc(fused[#loc19, #loc20])
#loc542 = loc(fused[#loc21, #loc22])
#loc543 = loc(fused[#loc24, #loc25])
#loc544 = loc(fused[#loc26, #loc27])
#loc545 = loc(fused[#loc29, #loc28])
#loc546 = loc(fused[#loc30, #loc31])
#loc547 = loc(fused[#loc32, #loc33])
#loc548 = loc(fused[#loc34, #loc35, #loc36, #loc31])
#loc549 = loc(fused[#loc37, #loc38])
#loc550 = loc(fused[#loc39, #loc40])
#loc551 = loc(fused[#loc41, #loc42])
#loc552 = loc(fused[#loc43, #loc44])
#loc553 = loc(fused[#loc45, #loc46])
#loc554 = loc(fused[#loc47, #loc48])
#loc555 = loc(fused[#loc49, #loc50])
#loc556 = loc(fused[#loc55, #loc56])
#loc557 = loc(fused[#loc57, #loc58])
#loc558 = loc(fused[#loc59, #loc60])
#loc559 = loc(fused[#loc61, #loc58])
#loc560 = loc(fused[#loc63, #loc64])
#loc561 = loc(fused[#loc66, #loc67])
#loc562 = loc(fused[#loc68, #loc69])
#loc563 = loc(fused[#loc72, #loc70])
#loc564 = loc(fused[#loc76, #loc73])
#loc565 = loc(fused[#loc80, #loc81])
#loc566 = loc(fused[#loc82, #loc83])
#loc567 = loc(fused[#loc85, #loc86])
#loc568 = loc(fused[#loc87, #loc88])
#loc569 = loc(fused[#loc89, #loc90])
#loc570 = loc(fused[#loc91, #loc83])
#loc571 = loc(fused[#loc93, #loc94])
#loc572 = loc(fused[#loc97, #loc98])
#loc573 = loc(fused[#loc99, #loc94])
#loc574 = loc(fused[#loc105, #loc106])
#loc575 = loc(fused[#loc107, #loc108])
#loc576 = loc(fused[#loc109, #loc110])
#loc577 = loc(fused[#loc111, #loc108])
#loc578 = loc(fused[#loc119, #loc120])
#loc579 = loc(fused[#loc121, #loc122])
#loc580 = loc(fused[#loc123, #loc124])
#loc581 = loc(fused[#loc126, #loc127])
#loc582 = loc(fused[#loc128, #loc122])
#loc583 = loc(fused[#loc132, #loc130])
#loc584 = loc(fused[#loc135, #loc136])
#loc585 = loc(fused[#loc138, #loc139])
#loc586 = loc(fused[#loc140, #loc141])
#loc587 = loc(fused[#loc142, #loc139])
#loc588 = loc(fused[#loc145, #loc146])
#loc589 = loc(fused[#loc147, #loc148])
#loc590 = loc(fused[#loc149, #loc146])
#loc591 = loc(fused[#loc153, #loc152])
#loc592 = loc(fused[#loc154, #loc155])
#loc593 = loc(fused[#loc156, #loc157])
#loc594 = loc(fused[#loc158, #loc159, #loc160, #loc155])
#loc595 = loc(fused[#loc161, #loc162])
#loc596 = loc(fused[#loc163, #loc164])
#loc597 = loc(fused[#loc165, #loc166])
#loc598 = loc(fused[#loc169, #loc170])
#loc599 = loc(fused[#loc173, #loc172])
#loc600 = loc(fused[#loc174, #loc175, #loc176, #loc170])
#loc601 = loc(fused[#loc177, #loc178])
#loc602 = loc(fused[#loc179, #loc180])
#loc603 = loc(fused[#loc184, #loc185])
#loc604 = loc(fused[#loc186, #loc187])
#loc605 = loc(fused[#loc188, #loc189])
#loc606 = loc(fused[#loc190, #loc191])
#loc607 = loc(fused[#loc192, #loc193])
#loc608 = loc(fused[#loc198, #loc199])
#loc611 = loc(fused[#loc209, #loc210])
#loc612 = loc(fused[#loc213, #loc214])
#loc613 = loc(fused[#loc217, #loc216])
#loc614 = loc(fused[#loc218, #loc219])
#loc615 = loc(fused[#loc220, #loc221])
#loc616 = loc(fused[#loc223, #loc222])
#loc617 = loc(fused[#loc224, #loc225])
#loc618 = loc(fused[#loc226, #loc227])
#loc619 = loc(fused[#loc228, #loc229, #loc230, #loc225])
#loc620 = loc(fused[#loc231, #loc232])
#loc621 = loc(fused[#loc233, #loc234])
#loc622 = loc(fused[#loc235, #loc236])
#loc623 = loc(fused[#loc237, #loc238])
#loc624 = loc(fused[#loc239, #loc240])
#loc625 = loc(fused[#loc241, #loc242])
#loc626 = loc(fused[#loc243, #loc244])
#loc627 = loc(fused[#loc249, #loc250])
#loc628 = loc(fused[#loc251, #loc252])
#loc629 = loc(fused[#loc253, #loc254])
#loc630 = loc(fused[#loc255, #loc252])
#loc631 = loc(fused[#loc257, #loc258])
#loc632 = loc(fused[#loc260, #loc261])
#loc633 = loc(fused[#loc262, #loc263])
#loc634 = loc(fused[#loc265, #loc264])
#loc635 = loc(fused[#loc267, #loc266])
#loc636 = loc(fused[#loc270, #loc271])
#loc637 = loc(fused[#loc272, #loc273])
#loc638 = loc(fused[#loc275, #loc276])
#loc639 = loc(fused[#loc277, #loc278])
#loc640 = loc(fused[#loc279, #loc280])
#loc641 = loc(fused[#loc281, #loc273])
#loc642 = loc(fused[#loc283, #loc284])
#loc643 = loc(fused[#loc287, #loc288])
#loc644 = loc(fused[#loc289, #loc284])
#loc645 = loc(fused[#loc295, #loc296])
#loc646 = loc(fused[#loc297, #loc298])
#loc647 = loc(fused[#loc299, #loc300])
#loc648 = loc(fused[#loc301, #loc298])
#loc649 = loc(fused[#loc309, #loc310])
#loc650 = loc(fused[#loc311, #loc312])
#loc651 = loc(fused[#loc313, #loc314])
#loc652 = loc(fused[#loc316, #loc317])
#loc653 = loc(fused[#loc318, #loc312])
#loc654 = loc(fused[#loc322, #loc320])
#loc655 = loc(fused[#loc325, #loc326])
#loc656 = loc(fused[#loc328, #loc329])
#loc657 = loc(fused[#loc330, #loc331])
#loc658 = loc(fused[#loc332, #loc329])
#loc659 = loc(fused[#loc335, #loc336])
#loc660 = loc(fused[#loc337, #loc338])
#loc661 = loc(fused[#loc339, #loc336])
#loc662 = loc(fused[#loc342, #loc343])
#loc663 = loc(fused[#loc344, #loc345])
#loc664 = loc(fused[#loc346, #loc347])
#loc665 = loc(fused[#loc348, #loc349])
#loc666 = loc(fused[#loc350, #loc351])
#loc667 = loc(fused[#loc352, #loc353])
#loc668 = loc(fused[#loc354, #loc355])
#loc669 = loc(fused[#loc360, #loc361])
#loc670 = loc(fused[#loc362, #loc363])
#loc671 = loc(fused[#loc364, #loc365])
#loc672 = loc(fused[#loc366, #loc363])
#loc673 = loc(fused[#loc368, #loc369])
#loc674 = loc(fused[#loc371, #loc372])
#loc675 = loc(fused[#loc373, #loc374])
#loc676 = loc(fused[#loc376, #loc375])
#loc677 = loc(fused[#loc378, #loc377])
#loc678 = loc(fused[#loc381, #loc382])
#loc679 = loc(fused[#loc383, #loc384])
#loc680 = loc(fused[#loc386, #loc387])
#loc681 = loc(fused[#loc388, #loc389])
#loc682 = loc(fused[#loc390, #loc391])
#loc683 = loc(fused[#loc392, #loc384])
#loc684 = loc(fused[#loc394, #loc395])
#loc685 = loc(fused[#loc398, #loc399])
#loc686 = loc(fused[#loc400, #loc395])
#loc687 = loc(fused[#loc406, #loc407])
#loc688 = loc(fused[#loc408, #loc409])
#loc689 = loc(fused[#loc410, #loc411])
#loc690 = loc(fused[#loc412, #loc409])
#loc691 = loc(fused[#loc420, #loc421])
#loc692 = loc(fused[#loc422, #loc423])
#loc693 = loc(fused[#loc424, #loc425])
#loc694 = loc(fused[#loc427, #loc428])
#loc695 = loc(fused[#loc429, #loc423])
#loc696 = loc(fused[#loc433, #loc431])
#loc697 = loc(fused[#loc436, #loc437])
#loc698 = loc(fused[#loc439, #loc440])
#loc699 = loc(fused[#loc441, #loc442])
#loc700 = loc(fused[#loc443, #loc440])
#loc701 = loc(fused[#loc446, #loc447])
#loc702 = loc(fused[#loc448, #loc449])
#loc703 = loc(fused[#loc450, #loc447])
#loc704 = loc(fused[#loc453, #loc454])
#loc705 = loc(fused[#loc455, #loc456])
#loc706 = loc(fused[#loc457, #loc458, #loc459, #loc454])
#loc707 = loc(fused[#loc460, #loc461])
#loc708 = loc(fused[#loc464, #loc463])
#loc709 = loc(fused[#loc465, #loc466, #loc467, #loc461])
#loc710 = loc(fused[#loc468, #loc469])
#loc711 = loc(fused[#loc470, #loc471])
#loc712 = loc(fused[#loc476, #loc477])
#loc713 = loc(fused[#loc480, #loc479])
#loc714 = loc(fused[#loc481, #loc482, #loc483, #loc477])
#loc715 = loc(fused[#loc484, #loc485])
#loc716 = loc(fused[#loc486, #loc487])
#loc717 = loc(fused[#loc492, #loc493])
#loc718 = loc(fused[#loc494, #loc495])
#loc719 = loc(fused[#loc497, #loc496])
#loc720 = loc(fused[#loc498, #loc499])
#loc721 = loc(fused[#loc500, #loc501])
#loc722 = loc(fused[#loc502, #loc503, #loc504, #loc499])
#loc723 = loc(fused[#loc506, #loc505])
#loc724 = loc(fused[#loc508, #loc507])
#loc725 = loc(fused[#loc509, #loc510])
#loc726 = loc(fused[#loc511, #loc512])
#loc727 = loc(fused[#loc513, #loc514, #loc515, #loc510])
#loc728 = loc(fused[#loc516, #loc517])
#loc729 = loc(fused[#loc518, #loc519])
#loc730 = loc(fused[#loc520, #loc521])
#loc731 = loc(fused[#loc524, #loc525])
#loc732 = loc(fused[#loc526, #loc527])
#loc733 = loc(fused[#loc528, #loc529])
