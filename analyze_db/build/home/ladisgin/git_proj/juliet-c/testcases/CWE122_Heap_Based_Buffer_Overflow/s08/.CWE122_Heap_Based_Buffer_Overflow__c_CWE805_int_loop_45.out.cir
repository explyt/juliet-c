!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":101:10)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":101:14)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":101:20)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":101:32)
#loc184 = loc(fused[#loc47, #loc48])
#loc185 = loc(fused[#loc49, #loc50])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc163)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc164)
  cir.global "private" internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45_badData = #cir.ptr<null> : !cir.ptr<!s32i> {alignment = 8 : i64} loc(#loc165)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc167)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc11)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc168)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc13)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc14)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc14)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc169)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc170)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc13)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc171)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc172)
    cir.br ^bb1 loc(#loc173)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc21)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc22)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc22)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc174)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc175)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc24)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc26)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc24)
    cir.br ^bb3 loc(#loc20)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc20)
  ^bb4:  // pred: ^bb3
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
    %17 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45_badData : !cir.ptr<!cir.ptr<!s32i>> loc(#loc165)
    cir.store %16, %17 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc176)
    %18 = cir.get_global @badSink : !cir.ptr<!cir.func<!void ()>> loc(#loc177)
    cir.call %18() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    cir.return loc(#loc8)
  } loc(#loc166)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc179)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    cir.return loc(#loc32)
  } loc(#loc178)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc180)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc181)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc182)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc44)
  cir.func @main(%arg0: !s32i loc(fused[#loc47, #loc48]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc49, #loc50])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc184)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc185)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc46)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc51)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc51)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc52)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc53)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc53)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc54)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc41)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45_good : !cir.ptr<!cir.func<!void ()>> loc(#loc186)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45_good() : () -> () loc(#loc56)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc42)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc43)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc187)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45_bad() : () -> () loc(#loc60)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc44)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc63)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc188)
    cir.return %17 : !s32i loc(#loc188)
  } loc(#loc183)
  cir.func private @printIntLine(!s32i) loc(#loc189)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc190)
  cir.func no_proto internal private @badSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc192)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc193)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc194)
    %3 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45_badData : !cir.ptr<!cir.ptr<!s32i>> loc(#loc165)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc76)
    cir.store %4, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc194)
    cir.br ^bb1 loc(#loc195)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc192)
    cir.store %5, %0 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc192)
    cir.br ^bb2 loc(#loc196)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc197)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.int<0> : !s32i loc(#loc83)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc83)
    cir.store %7, %1 : !u64i, !cir.ptr<!u64i> loc(#loc198)
    cir.br ^bb4 loc(#loc197)
  ^bb4:  // 2 preds: ^bb3, ^bb8
    %8 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc85)
    %9 = cir.const #cir.int<100> : !s32i loc(#loc86)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc86)
    %11 = cir.cmp(lt, %8, %10) : !u64i, !cir.bool loc(#loc199)
    cir.brcond %11 ^bb5, ^bb9 loc(#loc87)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc200)
  ^bb6:  // pred: ^bb5
    %12 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc89)
    %13 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc90)
    %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !u64i), !cir.ptr<!s32i> loc(#loc90)
    %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc90)
    %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc91)
    %17 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc92)
    %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !u64i), !cir.ptr<!s32i> loc(#loc93)
    cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    cir.br ^bb7 loc(#loc82)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc82)
  ^bb8:  // pred: ^bb7
    %19 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc95)
    %20 = cir.unary(inc, %19) : !u64i, !u64i loc(#loc96)
    cir.store %20, %1 : !u64i, !cir.ptr<!u64i> loc(#loc202)
    cir.br ^bb4 loc(#loc197)
  ^bb9:  // pred: ^bb4
    cir.br ^bb10 loc(#loc82)
  ^bb10:  // pred: ^bb9
    %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc97)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc98)
    %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc99)
    %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc97)
    cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc100)
    %25 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc101)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc101)
    cir.call @free(%26) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc102)
    cir.br ^bb11 loc(#loc80)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc78)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc70)
  } loc(#loc191)
  cir.global "private" internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45_goodG2BData = #cir.ptr<null> : !cir.ptr<!s32i> {alignment = 8 : i64} loc(#loc203)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc205)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc109)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc206)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc111)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc112)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc112)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc207)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc208)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc111)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc209)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc210)
    cir.br ^bb1 loc(#loc211)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc119)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc120)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc120)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc212)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc213)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc122)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc123)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc124)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc122)
    cir.br ^bb3 loc(#loc118)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc118)
  ^bb4:  // pred: ^bb3
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc125)
    %17 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45_goodG2BData : !cir.ptr<!cir.ptr<!s32i>> loc(#loc203)
    cir.store %16, %17 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc214)
    %18 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void ()>> loc(#loc215)
    cir.call %18() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc127)
    cir.return loc(#loc106)
  } loc(#loc204)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc217)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc218)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc219)
    %3 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45_goodG2BData : !cir.ptr<!cir.ptr<!s32i>> loc(#loc203)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc136)
    cir.store %4, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc219)
    cir.br ^bb1 loc(#loc220)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc217)
    cir.store %5, %0 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc217)
    cir.br ^bb2 loc(#loc221)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc222)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.int<0> : !s32i loc(#loc143)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc143)
    cir.store %7, %1 : !u64i, !cir.ptr<!u64i> loc(#loc223)
    cir.br ^bb4 loc(#loc222)
  ^bb4:  // 2 preds: ^bb3, ^bb8
    %8 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc145)
    %9 = cir.const #cir.int<100> : !s32i loc(#loc146)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc146)
    %11 = cir.cmp(lt, %8, %10) : !u64i, !cir.bool loc(#loc224)
    cir.brcond %11 ^bb5, ^bb9 loc(#loc147)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc225)
  ^bb6:  // pred: ^bb5
    %12 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc149)
    %13 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc150)
    %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !u64i), !cir.ptr<!s32i> loc(#loc150)
    %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc150)
    %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc151)
    %17 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc152)
    %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !u64i), !cir.ptr<!s32i> loc(#loc153)
    cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc226)
    cir.br ^bb7 loc(#loc142)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc142)
  ^bb8:  // pred: ^bb7
    %19 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc155)
    %20 = cir.unary(inc, %19) : !u64i, !u64i loc(#loc156)
    cir.store %20, %1 : !u64i, !cir.ptr<!u64i> loc(#loc227)
    cir.br ^bb4 loc(#loc222)
  ^bb9:  // pred: ^bb4
    cir.br ^bb10 loc(#loc142)
  ^bb10:  // pred: ^bb9
    %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc157)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc158)
    %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc159)
    %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc157)
    cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc160)
    %25 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc161)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc161)
    cir.call @free(%26) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc162)
    cir.br ^bb11 loc(#loc140)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc138)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc130)
  } loc(#loc216)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":19:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":19:14)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":42:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":51:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":44:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":44:11)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":45:12)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":45:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":47:19)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":47:26)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":47:29)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":47:39)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":47:40)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":47:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":48:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":48:33)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":48:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":48:17)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":48:23)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":48:24)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":48:30)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":48:29)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":49:71)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":49:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":50:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":50:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":87:1)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":90:1)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":89:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":89:13)
#loc35 = loc("/usr/include/stdlib.h":575:1)
#loc36 = loc("/usr/include/stdlib.h":575:41)
#loc37 = loc("/usr/include/time.h":76:1)
#loc38 = loc("/usr/include/time.h":76:38)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":106:15)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":108:15)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":111:15)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":113:15)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":101:1)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":116:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":102:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":104:27)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":104:22)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":104:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":106:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":107:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":107:66)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":108:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":111:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":112:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":112:65)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":113:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":115:12)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":115:5)
#loc65 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc66 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc67 = loc("/usr/include/stdlib.h":687:1)
#loc68 = loc("/usr/include/stdlib.h":687:32)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":24:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":40:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":28:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":28:29)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":30:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":30:20)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":26:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":26:18)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":27:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":39:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":29:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":38:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":32:13)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":35:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":32:22)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":32:18)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":32:25)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":32:29)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":32:27)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":33:13)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":34:34)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":34:27)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":34:17)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":34:22)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":34:23)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":34:35)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":32:35)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":32:34)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":36:26)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":36:31)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":36:32)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":36:13)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":37:18)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":37:13)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":20:1)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":20:14)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":76:1)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":85:1)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":78:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":78:11)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":79:12)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":79:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":81:19)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":81:26)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":81:30)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":81:40)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":81:41)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":81:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":82:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":82:33)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":82:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":82:17)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":82:23)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":82:24)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":82:30)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":82:29)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":83:75)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":83:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":84:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":84:17)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":58:1)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":74:1)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":62:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":62:29)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":64:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":64:20)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":60:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":60:18)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":61:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":73:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":63:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":72:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":66:13)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":69:13)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":66:22)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":66:18)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":66:25)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":66:29)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":66:27)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":67:13)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":68:34)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":68:27)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":68:17)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":68:22)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":68:23)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":68:35)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":66:35)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":66:34)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":70:26)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":70:31)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":70:32)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":70:13)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":71:18)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c":71:13)
#loc163 = loc(fused[#loc1, #loc2])
#loc164 = loc(fused[#loc3, #loc4])
#loc165 = loc(fused[#loc5, #loc6])
#loc166 = loc(fused[#loc7, #loc8])
#loc167 = loc(fused[#loc9, #loc10])
#loc168 = loc(fused[#loc12, #loc11])
#loc169 = loc(fused[#loc15, #loc16])
#loc170 = loc(fused[#loc14, #loc16])
#loc171 = loc(fused[#loc13, #loc17])
#loc172 = loc(fused[#loc18, #loc17])
#loc173 = loc(fused[#loc19, #loc20])
#loc174 = loc(fused[#loc21, #loc22])
#loc175 = loc(fused[#loc23, #loc20])
#loc176 = loc(fused[#loc28, #loc27])
#loc177 = loc(fused[#loc29, #loc30])
#loc178 = loc(fused[#loc31, #loc32])
#loc179 = loc(fused[#loc33, #loc34])
#loc180 = loc(fused[#loc35, #loc36])
#loc181 = loc(fused[#loc37, #loc38])
#loc182 = loc(fused[#loc39, #loc40])
#loc183 = loc(fused[#loc45, #loc46])
#loc186 = loc(fused[#loc56, #loc57])
#loc187 = loc(fused[#loc60, #loc61])
#loc188 = loc(fused[#loc64, #loc63])
#loc189 = loc(fused[#loc65, #loc66])
#loc190 = loc(fused[#loc67, #loc68])
#loc191 = loc(fused[#loc69, #loc70])
#loc192 = loc(fused[#loc71, #loc72])
#loc193 = loc(fused[#loc73, #loc74])
#loc194 = loc(fused[#loc75, #loc76])
#loc195 = loc(fused[#loc77, #loc78])
#loc196 = loc(fused[#loc79, #loc80])
#loc197 = loc(fused[#loc81, #loc82])
#loc198 = loc(fused[#loc84, #loc83])
#loc199 = loc(fused[#loc85, #loc86])
#loc200 = loc(fused[#loc88, #loc82])
#loc201 = loc(fused[#loc91, #loc94])
#loc202 = loc(fused[#loc96, #loc95])
#loc203 = loc(fused[#loc103, #loc104])
#loc204 = loc(fused[#loc105, #loc106])
#loc205 = loc(fused[#loc107, #loc108])
#loc206 = loc(fused[#loc110, #loc109])
#loc207 = loc(fused[#loc113, #loc114])
#loc208 = loc(fused[#loc112, #loc114])
#loc209 = loc(fused[#loc111, #loc115])
#loc210 = loc(fused[#loc116, #loc115])
#loc211 = loc(fused[#loc117, #loc118])
#loc212 = loc(fused[#loc119, #loc120])
#loc213 = loc(fused[#loc121, #loc118])
#loc214 = loc(fused[#loc126, #loc125])
#loc215 = loc(fused[#loc127, #loc128])
#loc216 = loc(fused[#loc129, #loc130])
#loc217 = loc(fused[#loc131, #loc132])
#loc218 = loc(fused[#loc133, #loc134])
#loc219 = loc(fused[#loc135, #loc136])
#loc220 = loc(fused[#loc137, #loc138])
#loc221 = loc(fused[#loc139, #loc140])
#loc222 = loc(fused[#loc141, #loc142])
#loc223 = loc(fused[#loc144, #loc143])
#loc224 = loc(fused[#loc145, #loc146])
#loc225 = loc(fused[#loc148, #loc142])
#loc226 = loc(fused[#loc151, #loc154])
#loc227 = loc(fused[#loc156, #loc155])
