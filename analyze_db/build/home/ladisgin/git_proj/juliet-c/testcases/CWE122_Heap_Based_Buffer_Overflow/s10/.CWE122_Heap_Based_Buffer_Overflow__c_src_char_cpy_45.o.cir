!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc115)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc116)
  cir.global "private" internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45_badData = #cir.ptr<null> : !cir.ptr<!s8i> {alignment = 8 : i64} loc(#loc117)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc119)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc11)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc12)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc12)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc120)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc121)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc11)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc122)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc123)
    cir.br ^bb1 loc(#loc124)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc19)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc20)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc20)
    %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc125)
    cir.brcond %11 ^bb2, ^bb3 loc(#loc126)
  ^bb2:  // pred: ^bb1
    %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc22)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc24)
    cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc22)
    cir.br ^bb3 loc(#loc18)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc18)
  ^bb4:  // pred: ^bb3
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc25)
    %17 = cir.const #cir.int<65> : !s32i loc(#loc26)
    %18 = cir.const #cir.int<100> : !s32i loc(#loc27)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc27)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc27)
    cir.libc.memset %21 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc127)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc31)
    %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc31)
    %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
    %25 = cir.const #cir.int<100> : !s32i loc(#loc33)
    %26 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %27 = cir.binop(sub, %25, %26) nsw : !s32i loc(#loc33)
    %28 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %27 : !s32i), !cir.ptr<!s8i> loc(#loc35)
    cir.store %23, %28 : !s8i, !cir.ptr<!s8i> loc(#loc128)
    %29 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
    %30 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45_badData : !cir.ptr<!cir.ptr<!s8i>> loc(#loc117)
    cir.store %29, %30 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc129)
    %31 = cir.get_global @badSink : !cir.ptr<!cir.func<!void ()>> loc(#loc130)
    cir.call %31() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc8)
  } loc(#loc118)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc132)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    cir.return loc(#loc41)
  } loc(#loc131)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc133)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc134)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc135)
  cir.func no_proto internal private @badSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc137)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc138)
    %2 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45_badData : !cir.ptr<!cir.ptr<!s8i>> loc(#loc117)
    %3 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc55)
    cir.store %3, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc138)
    cir.br ^bb1 loc(#loc139)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc137)
    cir.store %4, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc137)
    %5 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc58)
    %6 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc59)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
    %8 = cir.call @strcpy(%6, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc58)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc63)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc64)
    cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc63)
    cir.br ^bb2 loc(#loc57)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc51)
  } loc(#loc136)
  cir.global "private" internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45_goodG2BData = #cir.ptr<null> : !cir.ptr<!s8i> {alignment = 8 : i64} loc(#loc140)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc142)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc71)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc72)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc72)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc143)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc144)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc71)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc145)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc146)
    cir.br ^bb1 loc(#loc147)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc79)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc80)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc80)
    %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc148)
    cir.brcond %11 ^bb2, ^bb3 loc(#loc149)
  ^bb2:  // pred: ^bb1
    %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc82)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc84)
    cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc82)
    cir.br ^bb3 loc(#loc78)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc78)
  ^bb4:  // pred: ^bb3
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc85)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc85)
    %17 = cir.const #cir.int<65> : !s32i loc(#loc86)
    %18 = cir.const #cir.int<50> : !s32i loc(#loc87)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc87)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc87)
    cir.libc.memset %21 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc150)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc91)
    %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc91)
    %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc92)
    %25 = cir.const #cir.int<50> : !s32i loc(#loc93)
    %26 = cir.const #cir.int<1> : !s32i loc(#loc94)
    %27 = cir.binop(sub, %25, %26) nsw : !s32i loc(#loc93)
    %28 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %27 : !s32i), !cir.ptr<!s8i> loc(#loc95)
    cir.store %23, %28 : !s8i, !cir.ptr<!s8i> loc(#loc151)
    %29 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc96)
    %30 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45_goodG2BData : !cir.ptr<!cir.ptr<!s8i>> loc(#loc140)
    cir.store %29, %30 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc152)
    %31 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void ()>> loc(#loc153)
    cir.call %31() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc98)
    cir.return loc(#loc68)
  } loc(#loc141)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc155)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc156)
    %2 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45_goodG2BData : !cir.ptr<!cir.ptr<!s8i>> loc(#loc140)
    %3 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc105)
    cir.store %3, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc156)
    cir.br ^bb1 loc(#loc157)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc155)
    cir.store %4, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc155)
    %5 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc108)
    %6 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc109)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc110)
    %8 = cir.call @strcpy(%6, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc108)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc111)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc112)
    %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc113)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc114)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc114)
    cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc113)
    cir.br ^bb2 loc(#loc107)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc101)
  } loc(#loc154)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":21:15)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":38:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":48:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":40:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":40:12)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":41:20)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":41:27)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":41:31)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":41:42)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":41:43)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":41:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":42:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":42:33)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":42:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":42:17)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":42:23)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":42:24)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":42:30)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":42:29)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":44:12)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":44:18)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":44:23)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":44:27)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":44:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":44:28)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":45:19)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":45:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":45:10)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":45:14)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":45:15)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":46:68)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":46:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":47:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":47:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":79:1)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":82:1)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":81:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":81:13)
#loc44 = loc("/usr/include/string.h":141:1)
#loc45 = loc("/usr/include/string.h":142:14)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc48 = loc("/usr/include/stdlib.h":687:1)
#loc49 = loc("/usr/include/stdlib.h":687:32)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":26:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":36:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":30:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":30:25)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":28:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":28:19)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":29:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":35:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":32:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":32:16)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":32:22)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":33:19)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":33:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":34:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":34:14)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":22:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":22:15)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":67:1)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":77:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":69:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":69:12)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":70:20)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":70:27)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":70:31)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":70:42)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":70:43)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":70:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":71:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":71:33)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":71:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":71:17)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":71:23)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":71:24)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":71:30)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":71:29)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":73:12)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":73:18)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":73:23)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":73:26)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":73:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":73:27)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":74:18)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":74:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":74:10)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":74:13)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":74:14)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":75:72)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":75:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":76:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":76:17)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":55:1)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":65:1)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":59:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":59:25)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":57:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":57:19)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":58:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":64:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":61:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":61:16)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":61:22)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":62:19)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":62:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":63:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c":63:14)
#loc115 = loc(fused[#loc1, #loc2])
#loc116 = loc(fused[#loc3, #loc4])
#loc117 = loc(fused[#loc5, #loc6])
#loc118 = loc(fused[#loc7, #loc8])
#loc119 = loc(fused[#loc9, #loc10])
#loc120 = loc(fused[#loc13, #loc14])
#loc121 = loc(fused[#loc12, #loc14])
#loc122 = loc(fused[#loc11, #loc15])
#loc123 = loc(fused[#loc16, #loc15])
#loc124 = loc(fused[#loc17, #loc18])
#loc125 = loc(fused[#loc19, #loc20])
#loc126 = loc(fused[#loc21, #loc18])
#loc127 = loc(fused[#loc29, #loc30])
#loc128 = loc(fused[#loc32, #loc31])
#loc129 = loc(fused[#loc37, #loc36])
#loc130 = loc(fused[#loc38, #loc39])
#loc131 = loc(fused[#loc40, #loc41])
#loc132 = loc(fused[#loc42, #loc43])
#loc133 = loc(fused[#loc44, #loc45])
#loc134 = loc(fused[#loc46, #loc47])
#loc135 = loc(fused[#loc48, #loc49])
#loc136 = loc(fused[#loc50, #loc51])
#loc137 = loc(fused[#loc52, #loc53])
#loc138 = loc(fused[#loc54, #loc55])
#loc139 = loc(fused[#loc56, #loc57])
#loc140 = loc(fused[#loc65, #loc66])
#loc141 = loc(fused[#loc67, #loc68])
#loc142 = loc(fused[#loc69, #loc70])
#loc143 = loc(fused[#loc73, #loc74])
#loc144 = loc(fused[#loc72, #loc74])
#loc145 = loc(fused[#loc71, #loc75])
#loc146 = loc(fused[#loc76, #loc75])
#loc147 = loc(fused[#loc77, #loc78])
#loc148 = loc(fused[#loc79, #loc80])
#loc149 = loc(fused[#loc81, #loc78])
#loc150 = loc(fused[#loc89, #loc90])
#loc151 = loc(fused[#loc92, #loc91])
#loc152 = loc(fused[#loc97, #loc96])
#loc153 = loc(fused[#loc98, #loc99])
#loc154 = loc(fused[#loc100, #loc101])
#loc155 = loc(fused[#loc102, #loc103])
#loc156 = loc(fused[#loc104, #loc105])
#loc157 = loc(fused[#loc106, #loc107])
