!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_else_14.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" external @globalFive : !s32i {alignment = 4 : i64} loc(#loc99)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc100)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc101)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Inside the else statement\00" : !cir.array<!s8i x 26>> : !cir.array<!s8i x 26> {alignment = 1 : i64} loc(#loc7)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_else_14_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc99)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc13)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc14)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc104)
      cir.if %3 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc107)
          %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %8 = cir.const #cir.int<3> : !s32i loc(#loc21)
          %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc108)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc109)
          cir.scope {
            %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc26)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc27)
            %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc111)
            cir.if %12 {
              %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc7)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc7)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc31)
            } else {
            } loc(#loc112)
          } loc(#loc110)
        } loc(#loc106)
        %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc8)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc8)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc32)
      } loc(#loc105)
    } loc(#loc103)
    cir.return loc(#loc10)
  } loc(#loc102)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_else_14_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc114)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc115)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    cir.return loc(#loc34)
  } loc(#loc113)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Inside the if statement\00" : !cir.array<!s8i x 24>> : !cir.array<!s8i x 24> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc41)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc99)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc46)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc47)
      %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc118)
      cir.if %3 {
        %4 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc39)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc39)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc51)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc121)
          %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %8 = cir.const #cir.int<3> : !s32i loc(#loc57)
          %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc122)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc123)
          cir.scope {
            %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc62)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc63)
            %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc125)
            cir.if %12 {
              %13 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 24>> loc(#loc40)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 24>>), !cir.ptr<!s8i> loc(#loc40)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc67)
            } else {
              %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc68)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc68)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc69)
            } loc(#loc126)
          } loc(#loc124)
        } loc(#loc120)
        %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc41)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc41)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc70)
      } loc(#loc119)
    } loc(#loc117)
    cir.return loc(#loc43)
  } loc(#loc116)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc99)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc76)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc129)
      cir.if %3 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc132)
          %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
          %8 = cir.const #cir.int<3> : !s32i loc(#loc83)
          %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc133)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc134)
          cir.scope {
            %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc88)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc89)
            %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc136)
            cir.if %12 {
              %13 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 24>> loc(#loc93)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 24>>), !cir.ptr<!s8i> loc(#loc93)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc94)
            } else {
              %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc95)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc95)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc96)
            } loc(#loc137)
          } loc(#loc135)
        } loc(#loc131)
        %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc97)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc97)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc98)
      } loc(#loc130)
    } loc(#loc128)
    cir.return loc(#loc72)
  } loc(#loc127)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_else_14.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":118:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":118:12)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":30:27)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":36:19)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":20:1)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":38:1)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":22:5)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":37:5)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":22:8)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":22:20)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":23:5)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":25:9)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":35:9)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":26:13)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":26:17)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":27:18)
#loc21 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":27:27)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":27:13)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":27:28)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":28:13)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":34:13)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":28:17)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":28:22)
#loc28 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":29:13)
#loc29 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":31:13)
#loc30 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":33:13)
#loc31 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":30:17)
#loc32 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":36:9)
#loc33 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":93:1)
#loc34 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":97:1)
#loc35 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":95:5)
#loc36 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":95:11)
#loc37 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":96:5)
#loc38 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":96:11)
#loc39 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":50:19)
#loc40 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":60:27)
#loc41 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":67:19)
#loc42 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":45:1)
#loc43 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":69:1)
#loc44 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":47:5)
#loc45 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":68:5)
#loc46 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":47:8)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":47:20)
#loc48 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":48:5)
#loc49 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":51:5)
#loc50 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":53:5)
#loc51 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":50:9)
#loc52 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":55:9)
#loc53 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":66:9)
#loc54 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":56:13)
#loc55 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":56:17)
#loc56 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":57:18)
#loc57 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":57:27)
#loc58 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":57:13)
#loc59 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":57:28)
#loc60 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":58:13)
#loc61 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":65:13)
#loc62 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":58:17)
#loc63 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":58:22)
#loc64 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":59:13)
#loc65 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":61:13)
#loc66 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":63:13)
#loc67 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":60:17)
#loc68 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":64:27)
#loc69 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":64:17)
#loc70 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":67:9)
#loc71 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":72:1)
#loc72 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":91:1)
#loc73 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":74:5)
#loc74 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":90:5)
#loc75 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":74:8)
#loc76 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":74:20)
#loc77 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":75:5)
#loc78 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":77:9)
#loc79 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":88:9)
#loc80 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":78:13)
#loc81 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":78:17)
#loc82 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":79:18)
#loc83 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":79:27)
#loc84 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":79:13)
#loc85 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":79:28)
#loc86 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":80:13)
#loc87 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":87:13)
#loc88 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":80:17)
#loc89 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":80:22)
#loc90 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":81:13)
#loc91 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":83:13)
#loc92 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":85:13)
#loc93 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":82:27)
#loc94 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":82:17)
#loc95 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":86:27)
#loc96 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":86:17)
#loc97 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":89:19)
#loc98 = loc("CWE398_Poor_Code_Quality__empty_else_14.c":89:9)
#loc99 = loc(fused[#loc1, #loc2])
#loc100 = loc(fused[#loc3, #loc4])
#loc101 = loc(fused[#loc5, #loc6])
#loc102 = loc(fused[#loc9, #loc10])
#loc103 = loc(fused[#loc11, #loc12])
#loc104 = loc(fused[#loc13, #loc14])
#loc105 = loc(fused[#loc15, #loc12])
#loc106 = loc(fused[#loc16, #loc17])
#loc107 = loc(fused[#loc18, #loc19])
#loc108 = loc(fused[#loc20, #loc21])
#loc109 = loc(fused[#loc22, #loc23])
#loc110 = loc(fused[#loc24, #loc25])
#loc111 = loc(fused[#loc26, #loc27])
#loc112 = loc(fused[#loc28, #loc29, #loc30, #loc25])
#loc113 = loc(fused[#loc33, #loc34])
#loc114 = loc(fused[#loc35, #loc36])
#loc115 = loc(fused[#loc37, #loc38])
#loc116 = loc(fused[#loc42, #loc43])
#loc117 = loc(fused[#loc44, #loc45])
#loc118 = loc(fused[#loc46, #loc47])
#loc119 = loc(fused[#loc48, #loc49, #loc50, #loc45])
#loc120 = loc(fused[#loc52, #loc53])
#loc121 = loc(fused[#loc54, #loc55])
#loc122 = loc(fused[#loc56, #loc57])
#loc123 = loc(fused[#loc58, #loc59])
#loc124 = loc(fused[#loc60, #loc61])
#loc125 = loc(fused[#loc62, #loc63])
#loc126 = loc(fused[#loc64, #loc65, #loc66, #loc61])
#loc127 = loc(fused[#loc71, #loc72])
#loc128 = loc(fused[#loc73, #loc74])
#loc129 = loc(fused[#loc75, #loc76])
#loc130 = loc(fused[#loc77, #loc74])
#loc131 = loc(fused[#loc78, #loc79])
#loc132 = loc(fused[#loc80, #loc81])
#loc133 = loc(fused[#loc82, #loc83])
#loc134 = loc(fused[#loc84, #loc85])
#loc135 = loc(fused[#loc86, #loc87])
#loc136 = loc(fused[#loc88, #loc89])
#loc137 = loc(fused[#loc90, #loc91, #loc92, #loc87])
