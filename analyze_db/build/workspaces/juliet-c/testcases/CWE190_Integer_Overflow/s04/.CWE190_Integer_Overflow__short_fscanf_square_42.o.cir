!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc8 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":24:24)
#loc9 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":24:30)
#loc42 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":68:28)
#loc43 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":68:34)
#loc82 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":48:28)
#loc83 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":48:34)
#loc109 = loc(fused[#loc8, #loc9])
#loc122 = loc(fused[#loc42, #loc43])
#loc134 = loc(fused[#loc82, #loc83])
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc106)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc107)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%hd\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc5)
  cir.func internal private @badSource(%arg0: !s16i loc(fused[#loc8, #loc9])) -> !s16i extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc109)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["__retval"] {alignment = 2 : i64} loc(#loc7)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc10)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc11)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc107)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc12)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc5)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc5)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc11)
    %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc13)
    cir.store %8, %1 : !s16i, !cir.ptr<!s16i> loc(#loc110)
    %9 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc110)
    cir.return %9 : !s16i loc(#loc110)
  } loc(#loc108)
  cir.func private @printIntLine(!s32i) loc(#loc111)
  cir.func no_proto @CWE190_Integer_Overflow__short_fscanf_square_42_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc113)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc114)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc23)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc23)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc115)
    %4 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc25)
    %5 = cir.call @badSource(%4) : (!s16i) -> !s16i loc(#loc26)
    cir.store %5, %1 : !s16i, !cir.ptr<!s16i> loc(#loc116)
    cir.br ^bb1 loc(#loc117)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc31)
    %7 = cir.cast(integral, %6 : !s16i), !s32i loc(#loc31)
    %8 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc20)
    %9 = cir.cast(integral, %8 : !s16i), !s32i loc(#loc20)
    %10 = cir.binop(mul, %7, %9) nsw : !s32i loc(#loc31)
    %11 = cir.cast(integral, %10 : !s32i), !s16i loc(#loc31)
    cir.store %11, %0 : !s16i, !cir.ptr<!s16i> loc(#loc113)
    %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc32)
    %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc32)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc33)
    cir.br ^bb2 loc(#loc30)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc18)
  } loc(#loc112)
  cir.func no_proto @CWE190_Integer_Overflow__short_fscanf_square_42_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc119)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc120)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    cir.return loc(#loc35)
  } loc(#loc118)
  cir.func internal private @goodB2GSource(%arg0: !s16i loc(fused[#loc42, #loc43])) -> !s16i extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc122)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["__retval"] {alignment = 2 : i64} loc(#loc41)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc44)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc45)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc107)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc46)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc47)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc47)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc45)
    %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc48)
    cir.store %8, %1 : !s16i, !cir.ptr<!s16i> loc(#loc123)
    %9 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc123)
    cir.return %9 : !s16i loc(#loc123)
  } loc(#loc121)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc50)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc124)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc53)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc126)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc127)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc60)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc60)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc128)
    %4 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc62)
    %5 = cir.call @goodB2GSource(%4) : (!s16i) -> !s16i loc(#loc63)
    cir.store %5, %1 : !s16i, !cir.ptr<!s16i> loc(#loc129)
    cir.br ^bb1 loc(#loc130)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc68)
    %7 = cir.cast(integral, %6 : !s16i), !s64i loc(#loc68)
    %8 = cir.cast(integral, %7 : !s64i), !s32i loc(#loc68)
    %9 = cir.abs %8 poison : !s32i loc(#loc69)
    %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc69)
    %11 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc70)
    %12 = cir.const #cir.int<32767> : !s32i loc(#loc71)
    %13 = cir.cast(int_to_float, %12 : !s32i), !cir.double loc(#loc71)
    %14 = cir.call @sqrt(%13) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc70)
    %15 = cir.cast(float_to_int, %14 : !cir.double), !s64i loc(#loc70)
    %16 = cir.cmp(le, %10, %15) : !s64i, !cir.bool loc(#loc131)
    cir.brcond %16 ^bb2, ^bb3 loc(#loc132)
  ^bb2:  // pred: ^bb1
    %17 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc76)
    %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc76)
    %19 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc57)
    %20 = cir.cast(integral, %19 : !s16i), !s32i loc(#loc57)
    %21 = cir.binop(mul, %18, %20) nsw : !s32i loc(#loc76)
    %22 = cir.cast(integral, %21 : !s32i), !s16i loc(#loc76)
    cir.store %22, %0 : !s16i, !cir.ptr<!s16i> loc(#loc126)
    %23 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc77)
    %24 = cir.cast(integral, %23 : !s16i), !s32i loc(#loc77)
    cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc78)
    cir.br ^bb4 loc(#loc74)
  ^bb3:  // pred: ^bb1
    %25 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc53)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    cir.br ^bb4 loc(#loc67)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc67)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc55)
  } loc(#loc125)
  cir.func internal private @goodG2BSource(%arg0: !s16i loc(fused[#loc82, #loc83])) -> !s16i extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc134)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["__retval"] {alignment = 2 : i64} loc(#loc81)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc84)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc85)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc85)
    cir.store %3, %0 : !s16i, !cir.ptr<!s16i> loc(#loc135)
    %4 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc87)
    cir.store %4, %1 : !s16i, !cir.ptr<!s16i> loc(#loc136)
    %5 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc136)
    cir.return %5 : !s16i loc(#loc136)
  } loc(#loc133)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc138)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc139)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc95)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc95)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc140)
    %4 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc97)
    %5 = cir.call @goodG2BSource(%4) : (!s16i) -> !s16i loc(#loc98)
    cir.store %5, %1 : !s16i, !cir.ptr<!s16i> loc(#loc141)
    cir.br ^bb1 loc(#loc142)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc103)
    %7 = cir.cast(integral, %6 : !s16i), !s32i loc(#loc103)
    %8 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc92)
    %9 = cir.cast(integral, %8 : !s16i), !s32i loc(#loc92)
    %10 = cir.binop(mul, %7, %9) nsw : !s32i loc(#loc103)
    %11 = cir.cast(integral, %10 : !s32i), !s16i loc(#loc103)
    cir.store %11, %0 : !s16i, !cir.ptr<!s16i> loc(#loc138)
    %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc104)
    %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc104)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc105)
    cir.br ^bb2 loc(#loc102)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc90)
  } loc(#loc137)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_42.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":27:20)
#loc6 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":24:1)
#loc7 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":29:1)
#loc10 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":25:1)
#loc11 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":27:5)
#loc12 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":27:13)
#loc13 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":28:12)
#loc14 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":28:5)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc17 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":31:1)
#loc18 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":41:1)
#loc19 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":38:9)
#loc20 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":38:31)
#loc21 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":33:5)
#loc22 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":33:11)
#loc23 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":34:12)
#loc24 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":34:5)
#loc25 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":35:22)
#loc26 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":35:12)
#loc27 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":35:5)
#loc28 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":35:26)
#loc29 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":36:5)
#loc30 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":40:5)
#loc31 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":38:24)
#loc32 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":39:22)
#loc33 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":39:9)
#loc34 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":92:1)
#loc35 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":96:1)
#loc36 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":94:5)
#loc37 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":94:13)
#loc38 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":95:5)
#loc39 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":95:13)
#loc40 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":68:1)
#loc41 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":73:1)
#loc44 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":69:1)
#loc45 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":71:5)
#loc46 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":71:13)
#loc47 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":71:20)
#loc48 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":72:12)
#loc49 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":72:5)
#loc50 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc53 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":88:19)
#loc54 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":75:1)
#loc55 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":90:1)
#loc56 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":83:9)
#loc57 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":83:31)
#loc58 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":77:5)
#loc59 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":77:11)
#loc60 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":78:12)
#loc61 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":78:5)
#loc62 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":79:26)
#loc63 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":79:12)
#loc64 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":79:5)
#loc65 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":79:30)
#loc66 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":81:5)
#loc67 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":89:5)
#loc68 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":81:19)
#loc69 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":81:9)
#loc70 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":81:34)
#loc71 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":81:47)
#loc72 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":81:55)
#loc73 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":82:5)
#loc74 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":85:5)
#loc75 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":87:5)
#loc76 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":83:24)
#loc77 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":84:22)
#loc78 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":84:9)
#loc79 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":88:9)
#loc80 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":48:1)
#loc81 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":53:1)
#loc84 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":49:1)
#loc85 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":51:12)
#loc86 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":51:5)
#loc87 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":52:12)
#loc88 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":52:5)
#loc89 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":55:1)
#loc90 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":65:1)
#loc91 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":62:9)
#loc92 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":62:31)
#loc93 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":57:5)
#loc94 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":57:11)
#loc95 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":58:12)
#loc96 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":58:5)
#loc97 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":59:26)
#loc98 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":59:12)
#loc99 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":59:5)
#loc100 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":59:30)
#loc101 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":60:5)
#loc102 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":64:5)
#loc103 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":62:24)
#loc104 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":63:22)
#loc105 = loc("CWE190_Integer_Overflow__short_fscanf_square_42.c":63:9)
#loc106 = loc(fused[#loc1, #loc2])
#loc107 = loc(fused[#loc3, #loc4])
#loc108 = loc(fused[#loc6, #loc7])
#loc110 = loc(fused[#loc14, #loc13])
#loc111 = loc(fused[#loc15, #loc16])
#loc112 = loc(fused[#loc17, #loc18])
#loc113 = loc(fused[#loc19, #loc20])
#loc114 = loc(fused[#loc21, #loc22])
#loc115 = loc(fused[#loc24, #loc23])
#loc116 = loc(fused[#loc27, #loc28])
#loc117 = loc(fused[#loc29, #loc30])
#loc118 = loc(fused[#loc34, #loc35])
#loc119 = loc(fused[#loc36, #loc37])
#loc120 = loc(fused[#loc38, #loc39])
#loc121 = loc(fused[#loc40, #loc41])
#loc123 = loc(fused[#loc49, #loc48])
#loc124 = loc(fused[#loc51, #loc52])
#loc125 = loc(fused[#loc54, #loc55])
#loc126 = loc(fused[#loc56, #loc57])
#loc127 = loc(fused[#loc58, #loc59])
#loc128 = loc(fused[#loc61, #loc60])
#loc129 = loc(fused[#loc64, #loc65])
#loc130 = loc(fused[#loc66, #loc67])
#loc131 = loc(fused[#loc69, #loc72])
#loc132 = loc(fused[#loc73, #loc74, #loc75, #loc67])
#loc133 = loc(fused[#loc80, #loc81])
#loc135 = loc(fused[#loc86, #loc85])
#loc136 = loc(fused[#loc88, #loc87])
#loc137 = loc(fused[#loc89, #loc90])
#loc138 = loc(fused[#loc91, #loc92])
#loc139 = loc(fused[#loc93, #loc94])
#loc140 = loc(fused[#loc96, #loc95])
#loc141 = loc(fused[#loc99, #loc100])
#loc142 = loc(fused[#loc101, #loc102])
