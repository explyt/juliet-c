!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":23:72)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":23:79)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":46:76)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":46:83)
#loc100 = loc(fused[#loc7, #loc8])
#loc114 = loc(fused[#loc53, #loc54])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc97)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc98)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b_badSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc100)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc9)
    cir.scope {
      %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc102)
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc103)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc16)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc16)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc17)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc18)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc19)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc18)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc18)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc104)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc22)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc22)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc23)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc24)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc23)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc25)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc25)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc105)
      cir.scope {
        %28 = cir.const #cir.int<0> : !s32i loc(#loc28)
        %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc28)
        cir.store %29, %1 : !u64i, !cir.ptr<!u64i> loc(#loc107)
        cir.for : cond {
          %30 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc30)
          %31 = cir.const #cir.int<100> : !s32i loc(#loc31)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc31)
          %33 = cir.cmp(lt, %30, %32) : !u64i, !cir.bool loc(#loc108)
          cir.condition(%33) loc(#loc32)
        } body {
          cir.scope {
            %30 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc34)
            %31 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc35)
            %32 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %30 : !u64i), !cir.ptr<!s8i> loc(#loc35)
            %33 = cir.load %32 : !cir.ptr<!s8i>, !s8i loc(#loc35)
            %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
            %35 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc37)
            %36 = cir.ptr_stride(%34 : !cir.ptr<!s8i>, %35 : !u64i), !cir.ptr<!s8i> loc(#loc38)
            cir.store %33, %36 : !s8i, !cir.ptr<!s8i> loc(#loc110)
          } loc(#loc109)
          cir.yield loc(#loc27)
        } step {
          %30 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc40)
          %31 = cir.unary(inc, %30) : !u64i, !u64i loc(#loc41)
          cir.store %31, %1 : !u64i, !cir.ptr<!u64i> loc(#loc111)
          cir.yield loc(#loc106)
        } loc(#loc106)
      } loc(#loc106)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc42)
      %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc42)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc43)
      %20 = cir.const #cir.int<100> : !s32i loc(#loc44)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc45)
      %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc44)
      %23 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc46)
      cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc112)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
      cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc48)
      %25 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc49)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc50)
      cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc49)
    } loc(#loc101)
    cir.return loc(#loc6)
  } loc(#loc99)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b_goodG2BSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc53, #loc54])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc114)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc55)
    cir.scope {
      %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc116)
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc117)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc62)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc62)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc63)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc64)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc65)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc64)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc64)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc118)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc68)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc68)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc69)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc70)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc69)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc71)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc71)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc119)
      cir.scope {
        %28 = cir.const #cir.int<0> : !s32i loc(#loc74)
        %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc74)
        cir.store %29, %1 : !u64i, !cir.ptr<!u64i> loc(#loc121)
        cir.for : cond {
          %30 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc76)
          %31 = cir.const #cir.int<100> : !s32i loc(#loc77)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc77)
          %33 = cir.cmp(lt, %30, %32) : !u64i, !cir.bool loc(#loc122)
          cir.condition(%33) loc(#loc78)
        } body {
          cir.scope {
            %30 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc80)
            %31 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc81)
            %32 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %30 : !u64i), !cir.ptr<!s8i> loc(#loc81)
            %33 = cir.load %32 : !cir.ptr<!s8i>, !s8i loc(#loc81)
            %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc82)
            %35 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc83)
            %36 = cir.ptr_stride(%34 : !cir.ptr<!s8i>, %35 : !u64i), !cir.ptr<!s8i> loc(#loc84)
            cir.store %33, %36 : !s8i, !cir.ptr<!s8i> loc(#loc124)
          } loc(#loc123)
          cir.yield loc(#loc73)
        } step {
          %30 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc86)
          %31 = cir.unary(inc, %30) : !u64i, !u64i loc(#loc87)
          cir.store %31, %1 : !u64i, !cir.ptr<!u64i> loc(#loc125)
          cir.yield loc(#loc120)
        } loc(#loc120)
      } loc(#loc120)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc88)
      %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc88)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc89)
      %20 = cir.const #cir.int<100> : !s32i loc(#loc90)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc91)
      %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc90)
      %23 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc92)
      cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc126)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc93)
      cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc94)
      %25 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc95)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc96)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc96)
      cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc95)
    } loc(#loc115)
    cir.return loc(#loc52)
  } loc(#loc113)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":23:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":39:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":24:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":25:5)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":38:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":26:9)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":26:16)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":27:9)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":27:24)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":28:16)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":28:24)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":28:29)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":28:33)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":28:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":28:34)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":29:25)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":29:16)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":29:20)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":29:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":31:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":34:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":31:18)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":31:14)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":31:21)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":31:25)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":31:23)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":32:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":33:30)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":33:23)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":33:13)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":33:18)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":33:19)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":33:31)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":31:31)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":31:30)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":35:23)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":35:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":35:14)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":35:18)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":35:19)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":36:19)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":36:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":37:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":37:14)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":46:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":62:1)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":47:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":48:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":61:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":49:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":49:16)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":50:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":50:24)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":51:16)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":51:24)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":51:29)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":51:33)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":51:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":51:34)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":52:25)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":52:16)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":52:20)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":52:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":54:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":57:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":54:18)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":54:14)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":54:21)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":54:25)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":54:23)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":55:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":56:30)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":56:23)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":56:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":56:18)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":56:19)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":56:31)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":54:31)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":54:30)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":58:23)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":58:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":58:14)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":58:18)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":58:19)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":59:19)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":59:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":60:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c":60:14)
#loc97 = loc(fused[#loc1, #loc2])
#loc98 = loc(fused[#loc3, #loc4])
#loc99 = loc(fused[#loc5, #loc6])
#loc101 = loc(fused[#loc10, #loc11])
#loc102 = loc(fused[#loc12, #loc13])
#loc103 = loc(fused[#loc14, #loc15])
#loc104 = loc(fused[#loc20, #loc21])
#loc105 = loc(fused[#loc25, #loc22])
#loc106 = loc(fused[#loc26, #loc27])
#loc107 = loc(fused[#loc29, #loc28])
#loc108 = loc(fused[#loc30, #loc31])
#loc109 = loc(fused[#loc33, #loc27])
#loc110 = loc(fused[#loc36, #loc39])
#loc111 = loc(fused[#loc41, #loc40])
#loc112 = loc(fused[#loc43, #loc42])
#loc113 = loc(fused[#loc51, #loc52])
#loc115 = loc(fused[#loc56, #loc57])
#loc116 = loc(fused[#loc58, #loc59])
#loc117 = loc(fused[#loc60, #loc61])
#loc118 = loc(fused[#loc66, #loc67])
#loc119 = loc(fused[#loc71, #loc68])
#loc120 = loc(fused[#loc72, #loc73])
#loc121 = loc(fused[#loc75, #loc74])
#loc122 = loc(fused[#loc76, #loc77])
#loc123 = loc(fused[#loc79, #loc73])
#loc124 = loc(fused[#loc82, #loc85])
#loc125 = loc(fused[#loc87, #loc86])
#loc126 = loc(fused[#loc89, #loc88])
