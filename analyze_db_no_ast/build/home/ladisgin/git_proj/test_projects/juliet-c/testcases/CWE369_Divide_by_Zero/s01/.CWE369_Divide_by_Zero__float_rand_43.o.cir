!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc5 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":27:23)
#loc6 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":27:30)
#loc29 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":51:27)
#loc30 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":51:34)
#loc51 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":71:27)
#loc52 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":71:34)
#loc58 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":238:8)
#loc59 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":238:14)
#loc95 = loc(fused[#loc5, #loc6])
#loc105 = loc(fused[#loc29, #loc30])
#loc114 = loc(fused[#loc51, #loc52])
#loc117 = loc(fused[#loc58, #loc59])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_43.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc93)
  cir.func internal private  @_ZN36CWE369_Divide_by_Zero__float_rand_43L9badSourceERf(%arg0: !cir.ptr<!cir.float> loc(fused[#loc5, #loc6])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["data", init, const] {alignment = 8 : i64} loc(#loc95)
    cir.store %arg0, %0 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc7)
    %1 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %3 = cir.binop(and, %1, %2) : !s32i loc(#loc8)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc8)
    %5 = cir.ternary(%4, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc8)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc8)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc8)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc8)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc8)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc8)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc8)
      cir.yield %20 : !u32i loc(#loc8)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc8)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc8)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc8)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc8)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc8)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc8)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc8)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc8)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc8)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc8)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc8)
      cir.yield %24 : !u32i loc(#loc8)
    }) : (!cir.bool) -> !u32i loc(#loc8)
    %6 = cir.cast(integral, %5 : !u32i), !s32i loc(#loc8)
    %7 = cir.cast(int_to_float, %6 : !s32i), !cir.float loc(#loc8)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc9)
    cir.store %7, %8 : !cir.float, !cir.ptr<!cir.float> loc(#loc96)
    cir.return loc(#loc4)
  } loc(#loc94)
  cir.func private  @printIntLine(!s32i) loc(#loc97)
  cir.func  @_ZN36CWE369_Divide_by_Zero__float_rand_433badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc99)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc16)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc100)
    cir.call @_ZN36CWE369_Divide_by_Zero__float_rand_43L9badSourceERf(%0) : (!cir.ptr<!cir.float>) -> () loc(#loc18)
    cir.scope {
      %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc102)
      %3 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc23)
      %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc24)
      %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc24)
      %6 = cir.binop(div, %3, %5) : !cir.double loc(#loc103)
      %7 = cir.cast(float_to_int, %6 : !cir.double), !s32i loc(#loc103)
      cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc102)
      %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc25)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc26)
    } loc(#loc101)
    cir.return loc(#loc13)
  } loc(#loc98)
  cir.func internal private  @_ZN36CWE369_Divide_by_Zero__float_rand_43L13goodG2BSourceERf(%arg0: !cir.ptr<!cir.float> loc(fused[#loc29, #loc30])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["data", init, const] {alignment = 8 : i64} loc(#loc105)
    cir.store %arg0, %0 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc31)
    %1 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc32)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc33)
    cir.store %1, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc106)
    cir.return loc(#loc28)
  } loc(#loc104)
  cir.func internal private  @_ZN36CWE369_Divide_by_Zero__float_rand_43L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc108)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc38)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc109)
    cir.call @_ZN36CWE369_Divide_by_Zero__float_rand_43L13goodG2BSourceERf(%0) : (!cir.ptr<!cir.float>) -> () loc(#loc40)
    cir.scope {
      %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc111)
      %3 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc45)
      %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc46)
      %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc46)
      %6 = cir.binop(div, %3, %5) : !cir.double loc(#loc112)
      %7 = cir.cast(float_to_int, %6 : !cir.double), !s32i loc(#loc112)
      cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc111)
      %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc47)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc48)
    } loc(#loc110)
    cir.return loc(#loc35)
  } loc(#loc107)
  cir.func internal private  @_ZN36CWE369_Divide_by_Zero__float_rand_43L13goodB2GSourceERf(%arg0: !cir.ptr<!cir.float> loc(fused[#loc51, #loc52])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["data", init, const] {alignment = 8 : i64} loc(#loc114)
    cir.store %arg0, %0 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc53)
    %1 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc54)
    %3 = cir.binop(and, %1, %2) : !s32i loc(#loc54)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc54)
    %5 = cir.ternary(%4, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc54)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc54)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc54)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc54)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc54)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc54)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc54)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc54)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc54)
      cir.yield %20 : !u32i loc(#loc54)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc54)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc54)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc54)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc54)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc54)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc54)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc54)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc54)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc54)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc54)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc54)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc54)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc54)
      cir.yield %24 : !u32i loc(#loc54)
    }) : (!cir.bool) -> !u32i loc(#loc54)
    %6 = cir.cast(integral, %5 : !u32i), !s32i loc(#loc54)
    %7 = cir.cast(int_to_float, %6 : !s32i), !cir.float loc(#loc54)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc55)
    cir.store %7, %8 : !cir.float, !cir.ptr<!cir.float> loc(#loc115)
    cir.return loc(#loc50)
  } loc(#loc113)
  cir.func linkonce_odr  @_ZSt4fabsf(%arg0: !cir.float loc(fused[#loc58, #loc59])) -> !cir.float extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["__x", init] {alignment = 4 : i64} loc(#loc117)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["__retval"] {alignment = 4 : i64} loc(#loc57)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc60)
    %2 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc61)
    %3 = cir.fabs %2 : !cir.float loc(#loc61)
    cir.store %3, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc118)
    %4 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc118)
    cir.return %4 : !cir.float loc(#loc118)
  } loc(#loc116)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc119)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc66)
  cir.func internal private  @_ZN36CWE369_Divide_by_Zero__float_rand_43L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc121)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc71)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc122)
    cir.call @_ZN36CWE369_Divide_by_Zero__float_rand_43L13goodB2GSourceERf(%0) : (!cir.ptr<!cir.float>) -> () loc(#loc73)
    cir.scope {
      %2 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc76)
      %3 = cir.call @_ZSt4fabsf(%2) : (!cir.float) -> !cir.float loc(#loc77)
      %4 = cir.cast(floating, %3 : !cir.float), !cir.double loc(#loc77)
      %5 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc78)
      %6 = cir.cmp(gt, %4, %5) : !cir.double, !cir.bool loc(#loc124)
      cir.if %6 {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc126)
        %8 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc84)
        %9 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc85)
        %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc85)
        %11 = cir.binop(div, %8, %10) : !cir.double loc(#loc127)
        %12 = cir.cast(float_to_int, %11 : !cir.double), !s32i loc(#loc127)
        cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc126)
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc86)
        cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc87)
      } else {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc66)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc66)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc88)
      } loc(#loc125)
    } loc(#loc123)
    cir.return loc(#loc68)
  } loc(#loc120)
  cir.func  @_ZN36CWE369_Divide_by_Zero__float_rand_434goodEv() extra(#fn_attr1) {
    cir.call @_ZN36CWE369_Divide_by_Zero__float_rand_43L7goodG2BEv() : () -> () loc(#loc91)
    cir.call @_ZN36CWE369_Divide_by_Zero__float_rand_43L7goodB2GEv() : () -> () loc(#loc92)
    cir.return loc(#loc90)
  } loc(#loc128)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_43.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":27:1)
#loc4 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":31:1)
#loc7 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":28:1)
#loc8 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":30:19)
#loc9 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":30:5)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":33:1)
#loc13 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":44:1)
#loc14 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":35:5)
#loc15 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":35:11)
#loc16 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":37:12)
#loc17 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":37:5)
#loc18 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":38:5)
#loc19 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":39:5)
#loc20 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":43:5)
#loc21 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":41:9)
#loc22 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":41:40)
#loc23 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":41:28)
#loc24 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":41:36)
#loc25 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":42:22)
#loc26 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":42:9)
#loc27 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":51:1)
#loc28 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":55:1)
#loc31 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":52:1)
#loc32 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":54:12)
#loc33 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":54:5)
#loc34 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":57:1)
#loc35 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":68:1)
#loc36 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":59:5)
#loc37 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":59:11)
#loc38 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":61:12)
#loc39 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":61:5)
#loc40 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":62:5)
#loc41 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":63:5)
#loc42 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":67:5)
#loc43 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":65:9)
#loc44 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":65:40)
#loc45 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":65:28)
#loc46 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":65:36)
#loc47 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":66:22)
#loc48 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":66:9)
#loc49 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":71:1)
#loc50 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":75:1)
#loc53 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":72:1)
#loc54 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":74:19)
#loc55 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":74:5)
#loc56 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":237:3)
#loc57 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:34)
#loc60 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:3)
#loc61 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:28)
#loc62 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:5)
#loc63 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:31)
#loc64 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc65 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc66 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":91:19)
#loc67 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":77:1)
#loc68 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":93:1)
#loc69 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":79:5)
#loc70 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":79:11)
#loc71 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":81:12)
#loc72 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":81:5)
#loc73 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":82:5)
#loc74 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":84:5)
#loc75 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":92:5)
#loc76 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":84:13)
#loc77 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":84:8)
#loc78 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":84:21)
#loc79 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":85:5)
#loc80 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":88:5)
#loc81 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":90:5)
#loc82 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":86:9)
#loc83 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":86:40)
#loc84 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":86:28)
#loc85 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":86:36)
#loc86 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":87:22)
#loc87 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":87:9)
#loc88 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":91:9)
#loc89 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":95:1)
#loc90 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":99:1)
#loc91 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":97:5)
#loc92 = loc("CWE369_Divide_by_Zero__float_rand_43.cpp":98:5)
#loc93 = loc(fused[#loc1, #loc2])
#loc94 = loc(fused[#loc3, #loc4])
#loc96 = loc(fused[#loc9, #loc8])
#loc97 = loc(fused[#loc10, #loc11])
#loc98 = loc(fused[#loc12, #loc13])
#loc99 = loc(fused[#loc14, #loc15])
#loc100 = loc(fused[#loc17, #loc16])
#loc101 = loc(fused[#loc19, #loc20])
#loc102 = loc(fused[#loc21, #loc22])
#loc103 = loc(fused[#loc23, #loc24])
#loc104 = loc(fused[#loc27, #loc28])
#loc106 = loc(fused[#loc33, #loc32])
#loc107 = loc(fused[#loc34, #loc35])
#loc108 = loc(fused[#loc36, #loc37])
#loc109 = loc(fused[#loc39, #loc38])
#loc110 = loc(fused[#loc41, #loc42])
#loc111 = loc(fused[#loc43, #loc44])
#loc112 = loc(fused[#loc45, #loc46])
#loc113 = loc(fused[#loc49, #loc50])
#loc115 = loc(fused[#loc55, #loc54])
#loc116 = loc(fused[#loc56, #loc57])
#loc118 = loc(fused[#loc62, #loc63])
#loc119 = loc(fused[#loc64, #loc65])
#loc120 = loc(fused[#loc67, #loc68])
#loc121 = loc(fused[#loc69, #loc70])
#loc122 = loc(fused[#loc72, #loc71])
#loc123 = loc(fused[#loc74, #loc75])
#loc124 = loc(fused[#loc77, #loc78])
#loc125 = loc(fused[#loc79, #loc80, #loc81, #loc75])
#loc126 = loc(fused[#loc82, #loc83])
#loc127 = loc(fused[#loc84, #loc85])
#loc128 = loc(fused[#loc89, #loc90])
