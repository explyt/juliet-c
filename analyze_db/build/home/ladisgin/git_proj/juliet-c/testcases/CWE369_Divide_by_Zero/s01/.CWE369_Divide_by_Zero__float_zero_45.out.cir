!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc33 = loc("CWE369_Divide_by_Zero__float_zero_45.c":116:10)
#loc34 = loc("CWE369_Divide_by_Zero__float_zero_45.c":116:14)
#loc35 = loc("CWE369_Divide_by_Zero__float_zero_45.c":116:20)
#loc36 = loc("CWE369_Divide_by_Zero__float_zero_45.c":116:32)
#loc139 = loc(fused[#loc33, #loc34])
#loc140 = loc(fused[#loc35, #loc36])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @CWE369_Divide_by_Zero__float_zero_45_badData = #cir.fp<0.000000e+00> : !cir.float {alignment = 4 : i64} loc(#loc125)
  cir.func no_proto @CWE369_Divide_by_Zero__float_zero_45_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc127)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc7)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc128)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc9)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc129)
    %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc11)
    %4 = cir.get_global @CWE369_Divide_by_Zero__float_zero_45_badData : !cir.ptr<!cir.float> loc(#loc125)
    cir.store %3, %4 : !cir.float, !cir.ptr<!cir.float> loc(#loc130)
    %5 = cir.get_global @badSink : !cir.ptr<!cir.func<!void ()>> loc(#loc131)
    cir.call %5() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc13)
    cir.return loc(#loc4)
  } loc(#loc126)
  cir.func no_proto @CWE369_Divide_by_Zero__float_zero_45_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc133)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc17)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc134)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc19)
    cir.return loc(#loc16)
  } loc(#loc132)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc135)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc136)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc137)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc27)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc28)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc29)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc30)
  cir.func @main(%arg0: !s32i loc(fused[#loc33, #loc34]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc35, #loc36])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc139)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc140)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc32)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc37)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc37)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc38)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc39)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc39)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc40)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc27)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc27)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc41)
    %8 = cir.get_global @CWE369_Divide_by_Zero__float_zero_45_good : !cir.ptr<!cir.func<!void ()>> loc(#loc141)
    cir.call @CWE369_Divide_by_Zero__float_zero_45_good() : () -> () loc(#loc42)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc28)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc28)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc44)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc29)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc29)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc45)
    %13 = cir.get_global @CWE369_Divide_by_Zero__float_zero_45_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc142)
    cir.call @CWE369_Divide_by_Zero__float_zero_45_bad() : () -> () loc(#loc46)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc30)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc30)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc49)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc143)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc143)
    cir.return %17 : !s32i loc(#loc143)
  } loc(#loc138)
  cir.func private @printIntLine(!s32i) loc(#loc144)
  cir.func no_proto internal private @badSink() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc146)
    %1 = cir.get_global @CWE369_Divide_by_Zero__float_zero_45_badData : !cir.ptr<!cir.float> loc(#loc125)
    %2 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc56)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc146)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc148)
      %4 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc61)
      %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc62)
      %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc62)
      %7 = cir.binop(div, %4, %6) : !cir.double loc(#loc149)
      %8 = cir.cast(float_to_int, %7 : !cir.double), !s32i loc(#loc149)
      cir.store %8, %3 : !s32i, !cir.ptr<!s32i> loc(#loc148)
      %9 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc63)
      cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc64)
    } loc(#loc147)
    cir.return loc(#loc54)
  } loc(#loc145)
  cir.global "private" internal dsolocal @CWE369_Divide_by_Zero__float_zero_45_goodG2BData = #cir.fp<0.000000e+00> : !cir.float {alignment = 4 : i64} loc(#loc150)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc152)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc71)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc153)
    %2 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc73)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc154)
    %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc75)
    %4 = cir.get_global @CWE369_Divide_by_Zero__float_zero_45_goodG2BData : !cir.ptr<!cir.float> loc(#loc150)
    cir.store %3, %4 : !cir.float, !cir.ptr<!cir.float> loc(#loc155)
    %5 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void ()>> loc(#loc156)
    cir.call %5() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc77)
    cir.return loc(#loc68)
  } loc(#loc151)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc158)
    %1 = cir.get_global @CWE369_Divide_by_Zero__float_zero_45_goodG2BData : !cir.ptr<!cir.float> loc(#loc150)
    %2 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc82)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc158)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc160)
      %4 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc87)
      %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc88)
      %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc88)
      %7 = cir.binop(div, %4, %6) : !cir.double loc(#loc161)
      %8 = cir.cast(float_to_int, %7 : !cir.double), !s32i loc(#loc161)
      cir.store %8, %3 : !s32i, !cir.ptr<!s32i> loc(#loc160)
      %9 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc89)
      cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc90)
    } loc(#loc159)
    cir.return loc(#loc80)
  } loc(#loc157)
  cir.global "private" internal dsolocal @CWE369_Divide_by_Zero__float_zero_45_goodB2GData = #cir.fp<0.000000e+00> : !cir.float {alignment = 4 : i64} loc(#loc162)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc164)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc97)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc165)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc99)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc166)
    %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc101)
    %4 = cir.get_global @CWE369_Divide_by_Zero__float_zero_45_goodB2GData : !cir.ptr<!cir.float> loc(#loc162)
    cir.store %3, %4 : !cir.float, !cir.ptr<!cir.float> loc(#loc167)
    %5 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void ()>> loc(#loc168)
    cir.call %5() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc103)
    cir.return loc(#loc94)
  } loc(#loc163)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc105)
  cir.func no_proto internal private @goodB2GSink() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc170)
    %1 = cir.get_global @CWE369_Divide_by_Zero__float_zero_45_goodB2GData : !cir.ptr<!cir.float> loc(#loc162)
    %2 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc109)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc170)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc112)
      %4 = cir.cast(floating, %3 : !cir.float), !cir.double loc(#loc112)
      %5 = cir.fabs %4 : !cir.double loc(#loc112)
      %6 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc113)
      %7 = cir.cmp(gt, %5, %6) : !cir.double, !cir.bool loc(#loc172)
      cir.if %7 {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc174)
        %9 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc120)
        %10 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc121)
        %11 = cir.cast(floating, %10 : !cir.float), !cir.double loc(#loc121)
        %12 = cir.binop(div, %9, %11) : !cir.double loc(#loc175)
        %13 = cir.cast(float_to_int, %12 : !cir.double), !s32i loc(#loc175)
        cir.store %13, %8 : !s32i, !cir.ptr<!s32i> loc(#loc174)
        %14 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc122)
        cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc123)
      } else {
        %8 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc105)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc105)
        cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc124)
      } loc(#loc173)
    } loc(#loc171)
    cir.return loc(#loc107)
  } loc(#loc169)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_45.c":0:0)
#loc1 = loc("CWE369_Divide_by_Zero__float_zero_45.c":22:1)
#loc2 = loc("CWE369_Divide_by_Zero__float_zero_45.c":22:14)
#loc3 = loc("CWE369_Divide_by_Zero__float_zero_45.c":38:1)
#loc4 = loc("CWE369_Divide_by_Zero__float_zero_45.c":47:1)
#loc5 = loc("CWE369_Divide_by_Zero__float_zero_45.c":40:5)
#loc6 = loc("CWE369_Divide_by_Zero__float_zero_45.c":40:11)
#loc7 = loc("CWE369_Divide_by_Zero__float_zero_45.c":42:12)
#loc8 = loc("CWE369_Divide_by_Zero__float_zero_45.c":42:5)
#loc9 = loc("CWE369_Divide_by_Zero__float_zero_45.c":44:12)
#loc10 = loc("CWE369_Divide_by_Zero__float_zero_45.c":44:5)
#loc11 = loc("CWE369_Divide_by_Zero__float_zero_45.c":45:52)
#loc12 = loc("CWE369_Divide_by_Zero__float_zero_45.c":45:5)
#loc13 = loc("CWE369_Divide_by_Zero__float_zero_45.c":46:5)
#loc14 = loc("CWE369_Divide_by_Zero__float_zero_45.c":46:13)
#loc15 = loc("CWE369_Divide_by_Zero__float_zero_45.c":102:1)
#loc16 = loc("CWE369_Divide_by_Zero__float_zero_45.c":106:1)
#loc17 = loc("CWE369_Divide_by_Zero__float_zero_45.c":104:5)
#loc18 = loc("CWE369_Divide_by_Zero__float_zero_45.c":104:13)
#loc19 = loc("CWE369_Divide_by_Zero__float_zero_45.c":105:5)
#loc20 = loc("CWE369_Divide_by_Zero__float_zero_45.c":105:13)
#loc21 = loc("/usr/include/stdlib.h":575:1)
#loc22 = loc("/usr/include/stdlib.h":575:41)
#loc23 = loc("/usr/include/time.h":76:1)
#loc24 = loc("/usr/include/time.h":76:38)
#loc25 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc26 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc27 = loc("CWE369_Divide_by_Zero__float_zero_45.c":121:15)
#loc28 = loc("CWE369_Divide_by_Zero__float_zero_45.c":123:15)
#loc29 = loc("CWE369_Divide_by_Zero__float_zero_45.c":126:15)
#loc30 = loc("CWE369_Divide_by_Zero__float_zero_45.c":128:15)
#loc31 = loc("CWE369_Divide_by_Zero__float_zero_45.c":116:1)
#loc32 = loc("CWE369_Divide_by_Zero__float_zero_45.c":131:1)
#loc37 = loc("CWE369_Divide_by_Zero__float_zero_45.c":117:1)
#loc38 = loc("CWE369_Divide_by_Zero__float_zero_45.c":119:27)
#loc39 = loc("CWE369_Divide_by_Zero__float_zero_45.c":119:22)
#loc40 = loc("CWE369_Divide_by_Zero__float_zero_45.c":119:5)
#loc41 = loc("CWE369_Divide_by_Zero__float_zero_45.c":121:5)
#loc42 = loc("CWE369_Divide_by_Zero__float_zero_45.c":122:5)
#loc43 = loc("CWE369_Divide_by_Zero__float_zero_45.c":122:47)
#loc44 = loc("CWE369_Divide_by_Zero__float_zero_45.c":123:5)
#loc45 = loc("CWE369_Divide_by_Zero__float_zero_45.c":126:5)
#loc46 = loc("CWE369_Divide_by_Zero__float_zero_45.c":127:5)
#loc47 = loc("CWE369_Divide_by_Zero__float_zero_45.c":127:46)
#loc48 = loc("CWE369_Divide_by_Zero__float_zero_45.c":128:5)
#loc49 = loc("CWE369_Divide_by_Zero__float_zero_45.c":130:12)
#loc50 = loc("CWE369_Divide_by_Zero__float_zero_45.c":130:5)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc53 = loc("CWE369_Divide_by_Zero__float_zero_45.c":28:1)
#loc54 = loc("CWE369_Divide_by_Zero__float_zero_45.c":36:1)
#loc55 = loc("CWE369_Divide_by_Zero__float_zero_45.c":30:5)
#loc56 = loc("CWE369_Divide_by_Zero__float_zero_45.c":30:18)
#loc57 = loc("CWE369_Divide_by_Zero__float_zero_45.c":31:5)
#loc58 = loc("CWE369_Divide_by_Zero__float_zero_45.c":35:5)
#loc59 = loc("CWE369_Divide_by_Zero__float_zero_45.c":33:9)
#loc60 = loc("CWE369_Divide_by_Zero__float_zero_45.c":33:40)
#loc61 = loc("CWE369_Divide_by_Zero__float_zero_45.c":33:28)
#loc62 = loc("CWE369_Divide_by_Zero__float_zero_45.c":33:36)
#loc63 = loc("CWE369_Divide_by_Zero__float_zero_45.c":34:22)
#loc64 = loc("CWE369_Divide_by_Zero__float_zero_45.c":34:9)
#loc65 = loc("CWE369_Divide_by_Zero__float_zero_45.c":23:1)
#loc66 = loc("CWE369_Divide_by_Zero__float_zero_45.c":23:14)
#loc67 = loc("CWE369_Divide_by_Zero__float_zero_45.c":64:1)
#loc68 = loc("CWE369_Divide_by_Zero__float_zero_45.c":73:1)
#loc69 = loc("CWE369_Divide_by_Zero__float_zero_45.c":66:5)
#loc70 = loc("CWE369_Divide_by_Zero__float_zero_45.c":66:11)
#loc71 = loc("CWE369_Divide_by_Zero__float_zero_45.c":68:12)
#loc72 = loc("CWE369_Divide_by_Zero__float_zero_45.c":68:5)
#loc73 = loc("CWE369_Divide_by_Zero__float_zero_45.c":70:12)
#loc74 = loc("CWE369_Divide_by_Zero__float_zero_45.c":70:5)
#loc75 = loc("CWE369_Divide_by_Zero__float_zero_45.c":71:56)
#loc76 = loc("CWE369_Divide_by_Zero__float_zero_45.c":71:5)
#loc77 = loc("CWE369_Divide_by_Zero__float_zero_45.c":72:5)
#loc78 = loc("CWE369_Divide_by_Zero__float_zero_45.c":72:17)
#loc79 = loc("CWE369_Divide_by_Zero__float_zero_45.c":54:1)
#loc80 = loc("CWE369_Divide_by_Zero__float_zero_45.c":62:1)
#loc81 = loc("CWE369_Divide_by_Zero__float_zero_45.c":56:5)
#loc82 = loc("CWE369_Divide_by_Zero__float_zero_45.c":56:18)
#loc83 = loc("CWE369_Divide_by_Zero__float_zero_45.c":57:5)
#loc84 = loc("CWE369_Divide_by_Zero__float_zero_45.c":61:5)
#loc85 = loc("CWE369_Divide_by_Zero__float_zero_45.c":59:9)
#loc86 = loc("CWE369_Divide_by_Zero__float_zero_45.c":59:40)
#loc87 = loc("CWE369_Divide_by_Zero__float_zero_45.c":59:28)
#loc88 = loc("CWE369_Divide_by_Zero__float_zero_45.c":59:36)
#loc89 = loc("CWE369_Divide_by_Zero__float_zero_45.c":60:22)
#loc90 = loc("CWE369_Divide_by_Zero__float_zero_45.c":60:9)
#loc91 = loc("CWE369_Divide_by_Zero__float_zero_45.c":24:1)
#loc92 = loc("CWE369_Divide_by_Zero__float_zero_45.c":24:14)
#loc93 = loc("CWE369_Divide_by_Zero__float_zero_45.c":91:1)
#loc94 = loc("CWE369_Divide_by_Zero__float_zero_45.c":100:1)
#loc95 = loc("CWE369_Divide_by_Zero__float_zero_45.c":93:5)
#loc96 = loc("CWE369_Divide_by_Zero__float_zero_45.c":93:11)
#loc97 = loc("CWE369_Divide_by_Zero__float_zero_45.c":95:12)
#loc98 = loc("CWE369_Divide_by_Zero__float_zero_45.c":95:5)
#loc99 = loc("CWE369_Divide_by_Zero__float_zero_45.c":97:12)
#loc100 = loc("CWE369_Divide_by_Zero__float_zero_45.c":97:5)
#loc101 = loc("CWE369_Divide_by_Zero__float_zero_45.c":98:56)
#loc102 = loc("CWE369_Divide_by_Zero__float_zero_45.c":98:5)
#loc103 = loc("CWE369_Divide_by_Zero__float_zero_45.c":99:5)
#loc104 = loc("CWE369_Divide_by_Zero__float_zero_45.c":99:17)
#loc105 = loc("CWE369_Divide_by_Zero__float_zero_45.c":87:19)
#loc106 = loc("CWE369_Divide_by_Zero__float_zero_45.c":76:1)
#loc107 = loc("CWE369_Divide_by_Zero__float_zero_45.c":89:1)
#loc108 = loc("CWE369_Divide_by_Zero__float_zero_45.c":78:5)
#loc109 = loc("CWE369_Divide_by_Zero__float_zero_45.c":78:18)
#loc110 = loc("CWE369_Divide_by_Zero__float_zero_45.c":80:5)
#loc111 = loc("CWE369_Divide_by_Zero__float_zero_45.c":88:5)
#loc112 = loc("CWE369_Divide_by_Zero__float_zero_45.c":80:13)
#loc113 = loc("CWE369_Divide_by_Zero__float_zero_45.c":80:21)
#loc114 = loc("CWE369_Divide_by_Zero__float_zero_45.c":80:8)
#loc115 = loc("CWE369_Divide_by_Zero__float_zero_45.c":81:5)
#loc116 = loc("CWE369_Divide_by_Zero__float_zero_45.c":84:5)
#loc117 = loc("CWE369_Divide_by_Zero__float_zero_45.c":86:5)
#loc118 = loc("CWE369_Divide_by_Zero__float_zero_45.c":82:9)
#loc119 = loc("CWE369_Divide_by_Zero__float_zero_45.c":82:40)
#loc120 = loc("CWE369_Divide_by_Zero__float_zero_45.c":82:28)
#loc121 = loc("CWE369_Divide_by_Zero__float_zero_45.c":82:36)
#loc122 = loc("CWE369_Divide_by_Zero__float_zero_45.c":83:22)
#loc123 = loc("CWE369_Divide_by_Zero__float_zero_45.c":83:9)
#loc124 = loc("CWE369_Divide_by_Zero__float_zero_45.c":87:9)
#loc125 = loc(fused[#loc1, #loc2])
#loc126 = loc(fused[#loc3, #loc4])
#loc127 = loc(fused[#loc5, #loc6])
#loc128 = loc(fused[#loc8, #loc7])
#loc129 = loc(fused[#loc10, #loc9])
#loc130 = loc(fused[#loc12, #loc11])
#loc131 = loc(fused[#loc13, #loc14])
#loc132 = loc(fused[#loc15, #loc16])
#loc133 = loc(fused[#loc17, #loc18])
#loc134 = loc(fused[#loc19, #loc20])
#loc135 = loc(fused[#loc21, #loc22])
#loc136 = loc(fused[#loc23, #loc24])
#loc137 = loc(fused[#loc25, #loc26])
#loc138 = loc(fused[#loc31, #loc32])
#loc141 = loc(fused[#loc42, #loc43])
#loc142 = loc(fused[#loc46, #loc47])
#loc143 = loc(fused[#loc50, #loc49])
#loc144 = loc(fused[#loc51, #loc52])
#loc145 = loc(fused[#loc53, #loc54])
#loc146 = loc(fused[#loc55, #loc56])
#loc147 = loc(fused[#loc57, #loc58])
#loc148 = loc(fused[#loc59, #loc60])
#loc149 = loc(fused[#loc61, #loc62])
#loc150 = loc(fused[#loc65, #loc66])
#loc151 = loc(fused[#loc67, #loc68])
#loc152 = loc(fused[#loc69, #loc70])
#loc153 = loc(fused[#loc72, #loc71])
#loc154 = loc(fused[#loc74, #loc73])
#loc155 = loc(fused[#loc76, #loc75])
#loc156 = loc(fused[#loc77, #loc78])
#loc157 = loc(fused[#loc79, #loc80])
#loc158 = loc(fused[#loc81, #loc82])
#loc159 = loc(fused[#loc83, #loc84])
#loc160 = loc(fused[#loc85, #loc86])
#loc161 = loc(fused[#loc87, #loc88])
#loc162 = loc(fused[#loc91, #loc92])
#loc163 = loc(fused[#loc93, #loc94])
#loc164 = loc(fused[#loc95, #loc96])
#loc165 = loc(fused[#loc98, #loc97])
#loc166 = loc(fused[#loc100, #loc99])
#loc167 = loc(fused[#loc102, #loc101])
#loc168 = loc(fused[#loc103, #loc104])
#loc169 = loc(fused[#loc106, #loc107])
#loc170 = loc(fused[#loc108, #loc109])
#loc171 = loc(fused[#loc110, #loc111])
#loc172 = loc(fused[#loc114, #loc113])
#loc173 = loc(fused[#loc115, #loc116, #loc117, #loc111])
#loc174 = loc(fused[#loc118, #loc119])
#loc175 = loc(fused[#loc120, #loc121])
