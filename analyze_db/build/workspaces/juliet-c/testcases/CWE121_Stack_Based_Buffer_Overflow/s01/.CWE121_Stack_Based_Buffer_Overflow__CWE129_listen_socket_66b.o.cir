!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":44:75)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":44:89)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":74:79)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":74:93)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":99:79)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":99:93)
#true = #cir.bool<true> : !cir.bool
#loc132 = loc(fused[#loc8, #loc9])
#loc147 = loc(fused[#loc47, #loc48])
#loc162 = loc(fused[#loc88, #loc89])
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc129)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc130)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc5)
  cir.func @CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b_badSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc8, #loc9])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc132)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc133)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc12)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc13)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc14)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!s32i>, %3 : !s32i), !cir.ptr<!s32i> loc(#loc11)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc13)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc133)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc135)
      %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc136)
      %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc136)
      cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc136)
      cir.scope {
        %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc23)
        %10 = cir.const #cir.int<0> : !s32i loc(#loc24)
        %11 = cir.cmp(ge, %9, %10) : !s32i, !cir.bool loc(#loc138)
        cir.if %11 {
          %12 = cir.const #cir.int<1> : !s32i loc(#loc28)
          %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc29)
          %14 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc30)
          %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc30)
          cir.store %12, %15 : !s32i, !cir.ptr<!s32i> loc(#loc140)
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc33)
            cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc142)
            cir.for : cond {
              %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc35)
              %18 = cir.const #cir.int<10> : !s32i loc(#loc36)
              %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc143)
              cir.condition(%19) loc(#loc37)
            } body {
              cir.scope {
                %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc39)
                %18 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc40)
                %19 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc40)
                %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc40)
                cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc41)
              } loc(#loc144)
              cir.yield loc(#loc32)
            } step {
              %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc42)
              %18 = cir.unary(inc, %17) nsw : !s32i, !s32i loc(#loc43)
              cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc145)
              cir.yield loc(#loc141)
            } loc(#loc141)
          } loc(#loc141)
        } else {
          %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc5)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc5)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc44)
        } loc(#loc139)
      } loc(#loc137)
    } loc(#loc134)
    cir.return loc(#loc7)
  } loc(#loc131)
  cir.func @CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b_goodG2BSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc47, #loc48])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc147)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc148)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc51)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc52)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc53)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!s32i>, %3 : !s32i), !cir.ptr<!s32i> loc(#loc50)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc52)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc148)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc150)
      %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc151)
      %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc151)
      cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc151)
      cir.scope {
        %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc62)
        %10 = cir.const #cir.int<0> : !s32i loc(#loc63)
        %11 = cir.cmp(ge, %9, %10) : !s32i, !cir.bool loc(#loc153)
        cir.if %11 {
          %12 = cir.const #cir.int<1> : !s32i loc(#loc67)
          %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc68)
          %14 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc69)
          %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc69)
          cir.store %12, %15 : !s32i, !cir.ptr<!s32i> loc(#loc155)
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc72)
            cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc157)
            cir.for : cond {
              %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc74)
              %18 = cir.const #cir.int<10> : !s32i loc(#loc75)
              %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc158)
              cir.condition(%19) loc(#loc76)
            } body {
              cir.scope {
                %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc78)
                %18 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc79)
                %19 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc79)
                %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc79)
                cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc80)
              } loc(#loc159)
              cir.yield loc(#loc71)
            } step {
              %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc81)
              %18 = cir.unary(inc, %17) nsw : !s32i, !s32i loc(#loc82)
              cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc160)
              cir.yield loc(#loc156)
            } loc(#loc156)
          } loc(#loc156)
        } else {
          %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc83)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc83)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc84)
        } loc(#loc154)
      } loc(#loc152)
    } loc(#loc149)
    cir.return loc(#loc46)
  } loc(#loc146)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc85)
  cir.func @CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b_goodB2GSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc88, #loc89])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc162)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc163)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc92)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc93)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc94)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!s32i>, %3 : !s32i), !cir.ptr<!s32i> loc(#loc91)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc93)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc163)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc165)
      %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc166)
      %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc166)
      cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc166)
      cir.scope {
        %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc103)
        %10 = cir.const #cir.int<0> : !s32i loc(#loc104)
        %11 = cir.cmp(ge, %9, %10) : !s32i, !cir.bool loc(#loc168)
        %12 = cir.ternary(%11, true {
          %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc106)
          %14 = cir.const #cir.int<10> : !s32i loc(#loc107)
          %15 = cir.cmp(lt, %13, %14) : !s32i, !cir.bool loc(#loc169)
          %16 = cir.ternary(%15, true {
            %17 = cir.const #true loc(#loc105)
            cir.yield %17 : !cir.bool loc(#loc105)
          }, false {
            %17 = cir.const #false loc(#loc105)
            cir.yield %17 : !cir.bool loc(#loc105)
          }) : (!cir.bool) -> !cir.bool loc(#loc105)
          cir.yield %16 : !cir.bool loc(#loc105)
        }, false {
          %13 = cir.const #false loc(#loc105)
          cir.yield %13 : !cir.bool loc(#loc105)
        }) : (!cir.bool) -> !cir.bool loc(#loc105)
        cir.if %12 {
          %13 = cir.const #cir.int<1> : !s32i loc(#loc112)
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc113)
          %15 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc114)
          %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc114)
          cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc171)
          cir.scope {
            %17 = cir.const #cir.int<0> : !s32i loc(#loc117)
            cir.store %17, %6 : !s32i, !cir.ptr<!s32i> loc(#loc173)
            cir.for : cond {
              %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc119)
              %19 = cir.const #cir.int<10> : !s32i loc(#loc120)
              %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc174)
              cir.condition(%20) loc(#loc121)
            } body {
              cir.scope {
                %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc123)
                %19 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc124)
                %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc124)
                %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc124)
                cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc125)
              } loc(#loc175)
              cir.yield loc(#loc116)
            } step {
              %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc126)
              %19 = cir.unary(inc, %18) nsw : !s32i, !s32i loc(#loc127)
              cir.store %19, %6 : !s32i, !cir.ptr<!s32i> loc(#loc176)
              cir.yield loc(#loc172)
            } loc(#loc172)
          } loc(#loc172)
        } else {
          %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc85)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc85)
          cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc128)
        } loc(#loc170)
      } loc(#loc167)
    } loc(#loc164)
    cir.return loc(#loc87)
  } loc(#loc161)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":64:23)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":44:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":67:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":47:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":47:27)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":45:1)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":47:16)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":47:26)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":48:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":66:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":49:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":49:13)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":50:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":50:30)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":53:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":65:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":53:13)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":53:21)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":54:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":61:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":63:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":55:28)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":55:20)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":55:13)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":57:13)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":60:13)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":57:21)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":57:17)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":57:24)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":57:28)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":57:26)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":58:13)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":59:37)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":59:30)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":59:17)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":57:33)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":57:32)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":64:13)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":74:1)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":96:1)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":76:5)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":76:27)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":75:1)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":76:16)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":76:26)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":77:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":95:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":78:9)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":78:13)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":79:9)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":79:30)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":82:9)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":94:9)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":82:13)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":82:21)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":83:9)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":90:9)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":92:9)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":84:28)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":84:20)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":84:13)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":86:13)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":89:13)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":86:21)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":86:17)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":86:24)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":86:28)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":86:26)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":87:13)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":88:37)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":88:30)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":88:17)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":86:33)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":86:32)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":93:23)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":93:13)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":117:23)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":99:1)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":120:1)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":101:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":101:27)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":100:1)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":101:16)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":101:26)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":102:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":119:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":103:9)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":103:13)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":104:9)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":104:30)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":106:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":118:9)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":106:13)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":106:21)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":106:23)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":106:26)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":106:34)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":106:36)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":107:9)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":114:9)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":116:9)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":108:28)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":108:20)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":108:13)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":110:13)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":113:13)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":110:21)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":110:17)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":110:24)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":110:28)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":110:26)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":111:13)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":112:37)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":112:30)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":112:17)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":110:33)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":110:32)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c":117:13)
#loc129 = loc(fused[#loc1, #loc2])
#loc130 = loc(fused[#loc3, #loc4])
#loc131 = loc(fused[#loc6, #loc7])
#loc133 = loc(fused[#loc10, #loc11])
#loc134 = loc(fused[#loc15, #loc16])
#loc135 = loc(fused[#loc17, #loc18])
#loc136 = loc(fused[#loc19, #loc20])
#loc137 = loc(fused[#loc21, #loc22])
#loc138 = loc(fused[#loc23, #loc24])
#loc139 = loc(fused[#loc25, #loc26, #loc27, #loc22])
#loc140 = loc(fused[#loc30, #loc28])
#loc141 = loc(fused[#loc31, #loc32])
#loc142 = loc(fused[#loc34, #loc33])
#loc143 = loc(fused[#loc35, #loc36])
#loc144 = loc(fused[#loc38, #loc32])
#loc145 = loc(fused[#loc43, #loc42])
#loc146 = loc(fused[#loc45, #loc46])
#loc148 = loc(fused[#loc49, #loc50])
#loc149 = loc(fused[#loc54, #loc55])
#loc150 = loc(fused[#loc56, #loc57])
#loc151 = loc(fused[#loc58, #loc59])
#loc152 = loc(fused[#loc60, #loc61])
#loc153 = loc(fused[#loc62, #loc63])
#loc154 = loc(fused[#loc64, #loc65, #loc66, #loc61])
#loc155 = loc(fused[#loc69, #loc67])
#loc156 = loc(fused[#loc70, #loc71])
#loc157 = loc(fused[#loc73, #loc72])
#loc158 = loc(fused[#loc74, #loc75])
#loc159 = loc(fused[#loc77, #loc71])
#loc160 = loc(fused[#loc82, #loc81])
#loc161 = loc(fused[#loc86, #loc87])
#loc163 = loc(fused[#loc90, #loc91])
#loc164 = loc(fused[#loc95, #loc96])
#loc165 = loc(fused[#loc97, #loc98])
#loc166 = loc(fused[#loc99, #loc100])
#loc167 = loc(fused[#loc101, #loc102])
#loc168 = loc(fused[#loc103, #loc104])
#loc169 = loc(fused[#loc106, #loc108])
#loc170 = loc(fused[#loc109, #loc110, #loc111, #loc102])
#loc171 = loc(fused[#loc114, #loc112])
#loc172 = loc(fused[#loc115, #loc116])
#loc173 = loc(fused[#loc118, #loc117])
#loc174 = loc(fused[#loc119, #loc120])
#loc175 = loc(fused[#loc122, #loc116])
#loc176 = loc(fused[#loc127, #loc126])
