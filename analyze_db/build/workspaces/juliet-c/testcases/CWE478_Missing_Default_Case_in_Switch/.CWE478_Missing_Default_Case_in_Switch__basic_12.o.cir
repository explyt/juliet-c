!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc127)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"shouldn't see this value\00" : !cir.array<!s8i x 25>> : !cir.array<!s8i x 25> {alignment = 1 : i64} loc(#loc3)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc128)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"0\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc6)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"1\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc129)
  cir.func no_proto @CWE478_Missing_Default_Case_in_Switch__basic_12_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc132)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc132)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc14)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc14)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc135)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc136)
          %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc3)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc3)
          cir.store %7, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc135)
          %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
          %9 = cir.const #cir.int<3> : !s32i loc(#loc25)
          %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc137)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc138)
          cir.scope {
            %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc30)
            cir.switch (%12 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc6)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc6)
                cir.store %14, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc140)
                cir.break loc(#loc33)
              } loc(#loc31)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc7)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc7)
                cir.store %14, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc141)
                cir.break loc(#loc36)
              } loc(#loc34)
              cir.yield loc(#loc28)
            } loc(#loc28)
          } loc(#loc139)
          %11 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc38)
        } loc(#loc134)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc143)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc144)
          %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc42)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc42)
          cir.store %7, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc143)
          %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
          %9 = cir.const #cir.int<3> : !s32i loc(#loc46)
          %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc145)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc146)
          cir.scope {
            %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc51)
            cir.switch (%12 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc53)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc53)
                cir.store %14, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc148)
                cir.break loc(#loc55)
              } loc(#loc52)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc57)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc57)
                cir.store %14, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc149)
                cir.break loc(#loc59)
              } loc(#loc56)
              cir.case(default, []) {
                cir.return loc(#loc61)
              } loc(#loc60)
              cir.yield loc(#loc49)
            } loc(#loc49)
          } loc(#loc147)
          %11 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc63)
        } loc(#loc142)
      } loc(#loc133)
    } loc(#loc131)
    cir.return loc(#loc11)
  } loc(#loc130)
  cir.func no_proto @CWE478_Missing_Default_Case_in_Switch__basic_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc151)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc66)
    cir.return loc(#loc65)
  } loc(#loc150)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc154)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc154)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc72)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc72)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc157)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc158)
          %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc80)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc80)
          cir.store %7, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc157)
          %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
          %9 = cir.const #cir.int<3> : !s32i loc(#loc84)
          %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc159)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc160)
          cir.scope {
            %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc89)
            cir.switch (%12 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc91)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc91)
                cir.store %14, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc162)
                cir.break loc(#loc93)
              } loc(#loc90)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc95)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc95)
                cir.store %14, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc163)
                cir.break loc(#loc97)
              } loc(#loc94)
              cir.case(default, []) {
                cir.return loc(#loc99)
              } loc(#loc98)
              cir.yield loc(#loc87)
            } loc(#loc87)
          } loc(#loc161)
          %11 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc100)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc101)
        } loc(#loc156)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc165)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc166)
          %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc105)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc105)
          cir.store %7, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc165)
          %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
          %9 = cir.const #cir.int<3> : !s32i loc(#loc109)
          %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc167)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc168)
          cir.scope {
            %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc114)
            cir.switch (%12 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc116)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc116)
                cir.store %14, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc170)
                cir.break loc(#loc118)
              } loc(#loc115)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc120)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc120)
                cir.store %14, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc171)
                cir.break loc(#loc122)
              } loc(#loc119)
              cir.case(default, []) {
                cir.return loc(#loc124)
              } loc(#loc123)
              cir.yield loc(#loc112)
            } loc(#loc112)
          } loc(#loc169)
          %11 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc125)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc126)
        } loc(#loc164)
      } loc(#loc155)
    } loc(#loc153)
    cir.return loc(#loc69)
  } loc(#loc152)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":25:38)
#loc4 = loc("/usr/include/stdlib.h":573:1)
#loc5 = loc("/usr/include/stdlib.h":573:24)
#loc6 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":31:30)
#loc7 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":34:30)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":20:1)
#loc11 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":62:1)
#loc12 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":22:5)
#loc13 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":61:5)
#loc14 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":22:8)
#loc15 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":22:33)
#loc16 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":23:5)
#loc17 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":40:5)
#loc18 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":42:5)
#loc19 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":24:9)
#loc20 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":39:9)
#loc21 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":25:13)
#loc22 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":26:13)
#loc23 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":26:17)
#loc24 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":27:18)
#loc25 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":27:27)
#loc26 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":27:13)
#loc27 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":27:28)
#loc28 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":28:13)
#loc29 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":37:13)
#loc30 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":28:21)
#loc31 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":30:13)
#loc32 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":31:17)
#loc33 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":32:17)
#loc34 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":33:13)
#loc35 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":34:17)
#loc36 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":35:17)
#loc37 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":38:23)
#loc38 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":38:13)
#loc39 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":43:9)
#loc40 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":60:9)
#loc41 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":44:13)
#loc42 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":44:38)
#loc43 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":45:13)
#loc44 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":45:17)
#loc45 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":46:18)
#loc46 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":46:27)
#loc47 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":46:13)
#loc48 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":46:28)
#loc49 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":47:13)
#loc50 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":58:13)
#loc51 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":47:21)
#loc52 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":49:13)
#loc53 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":50:30)
#loc54 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":50:17)
#loc55 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":51:17)
#loc56 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":52:13)
#loc57 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":53:30)
#loc58 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":53:17)
#loc59 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":54:17)
#loc60 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":56:13)
#loc61 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":57:17)
#loc62 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":59:23)
#loc63 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":59:13)
#loc64 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":115:1)
#loc65 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":118:1)
#loc66 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":117:5)
#loc67 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":117:11)
#loc68 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":69:1)
#loc69 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":113:1)
#loc70 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":71:5)
#loc71 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":112:5)
#loc72 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":71:8)
#loc73 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":71:33)
#loc74 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":72:5)
#loc75 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":91:5)
#loc76 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":93:5)
#loc77 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":73:9)
#loc78 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":90:9)
#loc79 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":74:13)
#loc80 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":74:38)
#loc81 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":75:13)
#loc82 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":75:17)
#loc83 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":76:18)
#loc84 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":76:27)
#loc85 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":76:13)
#loc86 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":76:28)
#loc87 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":77:13)
#loc88 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":88:13)
#loc89 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":77:21)
#loc90 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":79:13)
#loc91 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":80:30)
#loc92 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":80:17)
#loc93 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":81:17)
#loc94 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":82:13)
#loc95 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":83:30)
#loc96 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":83:17)
#loc97 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":84:17)
#loc98 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":86:13)
#loc99 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":87:17)
#loc100 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":89:23)
#loc101 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":89:13)
#loc102 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":94:9)
#loc103 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":111:9)
#loc104 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":95:13)
#loc105 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":95:38)
#loc106 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":96:13)
#loc107 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":96:17)
#loc108 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":97:18)
#loc109 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":97:27)
#loc110 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":97:13)
#loc111 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":97:28)
#loc112 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":98:13)
#loc113 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":109:13)
#loc114 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":98:21)
#loc115 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":100:13)
#loc116 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":101:30)
#loc117 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":101:17)
#loc118 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":102:17)
#loc119 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":103:13)
#loc120 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":104:30)
#loc121 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":104:17)
#loc122 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":105:17)
#loc123 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":107:13)
#loc124 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":108:17)
#loc125 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":110:23)
#loc126 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":110:13)
#loc127 = loc(fused[#loc1, #loc2])
#loc128 = loc(fused[#loc4, #loc5])
#loc129 = loc(fused[#loc8, #loc9])
#loc130 = loc(fused[#loc10, #loc11])
#loc131 = loc(fused[#loc12, #loc13])
#loc132 = loc(fused[#loc14, #loc15])
#loc133 = loc(fused[#loc16, #loc17, #loc18, #loc13])
#loc134 = loc(fused[#loc19, #loc20])
#loc135 = loc(fused[#loc21, #loc3])
#loc136 = loc(fused[#loc22, #loc23])
#loc137 = loc(fused[#loc24, #loc25])
#loc138 = loc(fused[#loc26, #loc27])
#loc139 = loc(fused[#loc28, #loc29])
#loc140 = loc(fused[#loc32, #loc6])
#loc141 = loc(fused[#loc35, #loc7])
#loc142 = loc(fused[#loc39, #loc40])
#loc143 = loc(fused[#loc41, #loc42])
#loc144 = loc(fused[#loc43, #loc44])
#loc145 = loc(fused[#loc45, #loc46])
#loc146 = loc(fused[#loc47, #loc48])
#loc147 = loc(fused[#loc49, #loc50])
#loc148 = loc(fused[#loc54, #loc53])
#loc149 = loc(fused[#loc58, #loc57])
#loc150 = loc(fused[#loc64, #loc65])
#loc151 = loc(fused[#loc66, #loc67])
#loc152 = loc(fused[#loc68, #loc69])
#loc153 = loc(fused[#loc70, #loc71])
#loc154 = loc(fused[#loc72, #loc73])
#loc155 = loc(fused[#loc74, #loc75, #loc76, #loc71])
#loc156 = loc(fused[#loc77, #loc78])
#loc157 = loc(fused[#loc79, #loc80])
#loc158 = loc(fused[#loc81, #loc82])
#loc159 = loc(fused[#loc83, #loc84])
#loc160 = loc(fused[#loc85, #loc86])
#loc161 = loc(fused[#loc87, #loc88])
#loc162 = loc(fused[#loc92, #loc91])
#loc163 = loc(fused[#loc96, #loc95])
#loc164 = loc(fused[#loc102, #loc103])
#loc165 = loc(fused[#loc104, #loc105])
#loc166 = loc(fused[#loc106, #loc107])
#loc167 = loc(fused[#loc108, #loc109])
#loc168 = loc(fused[#loc110, #loc111])
#loc169 = loc(fused[#loc112, #loc113])
#loc170 = loc(fused[#loc117, #loc116])
#loc171 = loc(fused[#loc121, #loc120])
