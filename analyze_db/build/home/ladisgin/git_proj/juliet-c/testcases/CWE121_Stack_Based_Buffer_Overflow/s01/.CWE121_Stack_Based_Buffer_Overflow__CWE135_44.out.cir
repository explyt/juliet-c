!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":27:21)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":27:28)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":112:10)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":112:14)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":112:20)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":112:32)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":55:25)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":55:32)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":77:25)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":77:32)
#loc140 = loc(fused[#loc7, #loc8])
#loc156 = loc(fused[#loc53, #loc54])
#loc157 = loc(fused[#loc55, #loc56])
#loc163 = loc(fused[#loc75, #loc76])
#loc175 = loc(fused[#loc109, #loc110])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc137)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc138)
  cir.func internal private @badSink(%arg0: !cir.ptr<!void> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc140)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc9)
    cir.scope {
      %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc142)
      %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc143)
      %3 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc16)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc17)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc17)
      %6 = cir.call @strlen(%5) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc16)
      cir.store %6, %1 : !u64i, !cir.ptr<!u64i> loc(#loc142)
      %7 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc15)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc15)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc15)
      %10 = cir.binop(add, %7, %9) : !u64i loc(#loc15)
      %11 = cir.const #cir.int<4> : !u64i loc(#loc15)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc15)
      %13 = cir.alloca !u8i, !cir.ptr<!u8i>, %12 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc15)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc15)
      cir.store %14, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc143)
      %15 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc18)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc18)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc19)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc19)
      %19 = cir.call @wcscpy(%16, %18) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc20)
      %20 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc21)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc21)
      cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc22)
    } loc(#loc141)
    cir.return loc(#loc6)
  } loc(#loc139)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc23)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc145)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc146)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc29)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>> loc(#loc146)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
    cir.store %3, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc147)
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc23)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc23)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc23)
    cir.store %6, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc148)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc33)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc34)
    cir.call %7(%8) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>) -> () loc(#loc33)
    cir.return loc(#loc25)
  } loc(#loc144)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc150)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc151)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc36)
  } loc(#loc149)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc152)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc153)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc154)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc50)
  cir.func @main(%arg0: !s32i loc(fused[#loc53, #loc54]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc55, #loc56])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc156)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc157)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc52)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc57)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc57)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc58)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc59)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc59)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc60)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc47)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_44_good : !cir.ptr<!cir.func<!void ()>> loc(#loc158)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_44_good() : () -> () loc(#loc62)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc48)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc49)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_44_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc159)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_44_bad() : () -> () loc(#loc66)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc50)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc69)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc160)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc160)
    cir.return %17 : !s32i loc(#loc160)
  } loc(#loc155)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc161)
  cir.func internal private @goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc75, #loc76])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc163)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc77)
    cir.scope {
      %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc165)
      %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc166)
      %3 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc84)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc85)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc85)
      %6 = cir.call @strlen(%5) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc84)
      cir.store %6, %1 : !u64i, !cir.ptr<!u64i> loc(#loc165)
      %7 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc83)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc83)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc83)
      %10 = cir.binop(add, %7, %9) : !u64i loc(#loc83)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc83)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc83)
      %13 = cir.binop(mul, %10, %12) : !u64i loc(#loc83)
      %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc83)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc83)
      cir.store %15, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc166)
      %16 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc86)
      %17 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc87)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc87)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc88)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc88)
      %21 = cir.call @strcpy(%18, %20) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc86)
      %22 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc89)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc89)
      cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    } loc(#loc164)
    cir.return loc(#loc74)
  } loc(#loc162)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc91)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc168)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc169)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc97)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>> loc(#loc169)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc98)
    cir.store %3, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc170)
    %4 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc91)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc91)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc91)
    cir.store %6, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc171)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc101)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc102)
    cir.call %7(%8) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>) -> () loc(#loc101)
    cir.return loc(#loc93)
  } loc(#loc167)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc172)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc173)
  cir.func internal private @goodB2GSink(%arg0: !cir.ptr<!void> loc(fused[#loc109, #loc110])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc175)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc111)
    cir.scope {
      %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc177)
      %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc178)
      %3 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc118)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc119)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc119)
      %6 = cir.call @wcslen(%5) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc118)
      cir.store %6, %1 : !u64i, !cir.ptr<!u64i> loc(#loc177)
      %7 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc117)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc117)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc117)
      %10 = cir.binop(add, %7, %9) : !u64i loc(#loc117)
      %11 = cir.const #cir.int<4> : !u64i loc(#loc117)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc117)
      %13 = cir.alloca !u8i, !cir.ptr<!u8i>, %12 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc117)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc117)
      cir.store %14, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc178)
      %15 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc120)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc120)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc121)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc121)
      %19 = cir.call @wcscpy(%16, %18) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc122)
      %20 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc123)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc123)
      cir.call @printWLine(%21) : (!cir.ptr<!s32i>) -> () loc(#loc124)
    } loc(#loc176)
    cir.return loc(#loc108)
  } loc(#loc174)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc180)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc181)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc130)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>> loc(#loc181)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc131)
    cir.store %3, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc182)
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc133)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc133)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc133)
    cir.store %6, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc183)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc135)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc136)
    cir.call %7(%8) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>) -> () loc(#loc135)
    cir.return loc(#loc126)
  } loc(#loc179)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("/usr/include/wchar.h":98:1)
#loc4 = loc("/usr/include/wchar.h":100:14)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":27:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":36:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":28:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":29:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":35:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":31:9)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":31:45)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":32:9)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":32:31)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":31:26)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":31:41)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":33:22)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":33:28)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":33:15)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":34:27)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":34:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":45:20)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":38:1)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":48:1)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":40:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":40:12)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":42:5)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":42:32)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":43:12)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":43:5)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":45:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":47:5)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":47:13)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":98:1)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":102:1)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":100:5)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":100:13)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":101:5)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":101:13)
#loc41 = loc("/usr/include/stdlib.h":575:1)
#loc42 = loc("/usr/include/stdlib.h":575:41)
#loc43 = loc("/usr/include/time.h":76:1)
#loc44 = loc("/usr/include/time.h":76:38)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":117:15)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":119:15)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":122:15)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":124:15)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":112:1)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":127:1)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":113:1)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":115:27)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":115:22)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":115:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":117:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":118:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":118:56)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":119:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":122:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":123:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":123:55)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":124:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":126:12)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":126:5)
#loc71 = loc("/usr/include/string.h":141:1)
#loc72 = loc("/usr/include/string.h":142:14)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":55:1)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":64:1)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":56:1)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":57:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":63:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":59:9)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":59:45)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":60:9)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":60:31)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":59:26)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":59:41)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":61:15)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":61:22)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":61:28)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":62:27)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":62:9)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":72:20)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":66:1)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":74:1)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":68:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":68:12)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":69:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":69:32)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":70:12)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":70:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":72:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":73:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":73:13)
#loc103 = loc("/usr/include/wchar.h":247:1)
#loc104 = loc("/usr/include/wchar.h":247:51)
#loc105 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc106 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":77:1)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":86:1)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":78:1)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":79:5)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":85:5)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":81:9)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":81:48)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":82:9)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":82:31)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":81:26)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":81:44)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":83:22)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":83:28)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":83:15)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":84:31)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":84:9)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":88:1)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":96:1)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":90:5)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":90:12)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":91:5)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":91:32)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":92:12)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":92:5)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":94:20)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":94:5)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":95:5)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c":95:13)
#loc137 = loc(fused[#loc1, #loc2])
#loc138 = loc(fused[#loc3, #loc4])
#loc139 = loc(fused[#loc5, #loc6])
#loc141 = loc(fused[#loc10, #loc11])
#loc142 = loc(fused[#loc12, #loc13])
#loc143 = loc(fused[#loc14, #loc15])
#loc144 = loc(fused[#loc24, #loc25])
#loc145 = loc(fused[#loc26, #loc27])
#loc146 = loc(fused[#loc28, #loc29])
#loc147 = loc(fused[#loc31, #loc30])
#loc148 = loc(fused[#loc32, #loc23])
#loc149 = loc(fused[#loc35, #loc36])
#loc150 = loc(fused[#loc37, #loc38])
#loc151 = loc(fused[#loc39, #loc40])
#loc152 = loc(fused[#loc41, #loc42])
#loc153 = loc(fused[#loc43, #loc44])
#loc154 = loc(fused[#loc45, #loc46])
#loc155 = loc(fused[#loc51, #loc52])
#loc158 = loc(fused[#loc62, #loc63])
#loc159 = loc(fused[#loc66, #loc67])
#loc160 = loc(fused[#loc70, #loc69])
#loc161 = loc(fused[#loc71, #loc72])
#loc162 = loc(fused[#loc73, #loc74])
#loc164 = loc(fused[#loc78, #loc79])
#loc165 = loc(fused[#loc80, #loc81])
#loc166 = loc(fused[#loc82, #loc83])
#loc167 = loc(fused[#loc92, #loc93])
#loc168 = loc(fused[#loc94, #loc95])
#loc169 = loc(fused[#loc96, #loc97])
#loc170 = loc(fused[#loc99, #loc98])
#loc171 = loc(fused[#loc100, #loc91])
#loc172 = loc(fused[#loc103, #loc104])
#loc173 = loc(fused[#loc105, #loc106])
#loc174 = loc(fused[#loc107, #loc108])
#loc176 = loc(fused[#loc112, #loc113])
#loc177 = loc(fused[#loc114, #loc115])
#loc178 = loc(fused[#loc116, #loc117])
#loc179 = loc(fused[#loc125, #loc126])
#loc180 = loc(fused[#loc127, #loc128])
#loc181 = loc(fused[#loc129, #loc130])
#loc182 = loc(fused[#loc132, #loc131])
#loc183 = loc(fused[#loc134, #loc133])
