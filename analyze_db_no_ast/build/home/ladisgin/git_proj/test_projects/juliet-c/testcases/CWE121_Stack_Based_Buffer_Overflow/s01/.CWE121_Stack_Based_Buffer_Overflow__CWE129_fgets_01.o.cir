!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc183)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc184)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc185)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc186)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @printIntLine(!s32i) loc(#loc187)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc12)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc189)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc18)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc192)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc192)
      cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc192)
      cir.scope {
        %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc26)
        %6 = cir.const #cir.int<3> : !s32i loc(#loc27)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc27)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc27)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc27)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc27)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc27)
        %12 = cir.binop(add, %9, %11) : !u64i loc(#loc27)
        %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc27)
        %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc184)
        %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc28)
        %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc29)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc30)
        %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !s32i loc(#loc194)
        %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc31)
        cir.if %20 {
          %21 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc35)
          %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc36)
          cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc196)
        } else {
          %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc39)
        } loc(#loc195)
      } loc(#loc193)
    } loc(#loc191)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc198)
      %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc199)
      %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc199)
      cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc199)
      cir.scope {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc48)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc49)
        %8 = cir.cmp(ge, %6, %7) : !s32i, !s32i loc(#loc201)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc50)
        cir.if %9 {
          %10 = cir.const #cir.int<1> : !s32i loc(#loc54)
          %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc55)
          %12 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc56)
          %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc56)
          cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc203)
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc59)
            cir.store %14, %3 : !s32i, !cir.ptr<!s32i> loc(#loc205)
            cir.for : cond {
              %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc61)
              %16 = cir.const #cir.int<10> : !s32i loc(#loc62)
              %17 = cir.cmp(lt, %15, %16) : !s32i, !s32i loc(#loc206)
              %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc63)
              cir.condition(%18) loc(#loc63)
            } body {
              cir.scope {
                %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc65)
                %16 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc66)
                %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc66)
                %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc66)
                cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc67)
              } loc(#loc207)
              cir.yield loc(#loc58)
            } step {
              %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc68)
              %16 = cir.unary(inc, %15) : !s32i, !s32i loc(#loc69)
              cir.store %16, %3 : !s32i, !cir.ptr<!s32i> loc(#loc208)
              cir.yield loc(#loc204)
            } loc(#loc204)
          } loc(#loc204)
        } else {
          %10 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc12)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc12)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc70)
        } loc(#loc202)
      } loc(#loc200)
    } loc(#loc197)
    cir.return loc(#loc14)
  } loc(#loc188)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc210)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc73)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc211)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc75)
    cir.return loc(#loc72)
  } loc(#loc209)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc213)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc82)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc84)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc215)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc217)
      %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc218)
      %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc218)
      cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc218)
      cir.scope {
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
        %8 = cir.const #cir.int<0> : !s32i loc(#loc95)
        %9 = cir.cmp(ge, %7, %8) : !s32i, !s32i loc(#loc220)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc96)
        cir.if %10 {
          %11 = cir.const #cir.int<1> : !s32i loc(#loc100)
          %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
          %13 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc102)
          %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc102)
          cir.store %11, %14 : !s32i, !cir.ptr<!s32i> loc(#loc222)
          cir.scope {
            %15 = cir.const #cir.int<0> : !s32i loc(#loc105)
            cir.store %15, %4 : !s32i, !cir.ptr<!s32i> loc(#loc224)
            cir.for : cond {
              %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc107)
              %17 = cir.const #cir.int<10> : !s32i loc(#loc108)
              %18 = cir.cmp(lt, %16, %17) : !s32i, !s32i loc(#loc225)
              %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc109)
              cir.condition(%19) loc(#loc109)
            } body {
              cir.scope {
                %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc111)
                %17 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc112)
                %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc112)
                %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc112)
                cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc113)
              } loc(#loc226)
              cir.yield loc(#loc104)
            } step {
              %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc114)
              %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc115)
              cir.store %17, %4 : !s32i, !cir.ptr<!s32i> loc(#loc227)
              cir.yield loc(#loc223)
            } loc(#loc223)
          } loc(#loc223)
        } else {
          %11 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc116)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc116)
          cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc117)
        } loc(#loc221)
      } loc(#loc219)
    } loc(#loc216)
    cir.return loc(#loc78)
  } loc(#loc212)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc118)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc229)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc123)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc124)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc230)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc232)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc232)
      cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc232)
      cir.scope {
        %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc132)
        %6 = cir.const #cir.int<3> : !s32i loc(#loc133)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc133)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc133)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc133)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc133)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc133)
        %12 = cir.binop(add, %9, %11) : !u64i loc(#loc133)
        %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc133)
        %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc184)
        %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc134)
        %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc135)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc136)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc136)
        %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !s32i loc(#loc234)
        %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc137)
        cir.if %20 {
          %21 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc141)
          %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc142)
          cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc236)
        } else {
          %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc145)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc145)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc146)
        } loc(#loc235)
      } loc(#loc233)
    } loc(#loc231)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc238)
      %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc239)
      %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc239)
      cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc239)
      cir.scope {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc155)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc156)
        %8 = cir.cmp(ge, %6, %7) : !s32i, !s32i loc(#loc241)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc157)
        %10 = cir.ternary(%9, true {
          %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc159)
          %12 = cir.const #cir.int<10> : !s32i loc(#loc160)
          %13 = cir.cmp(lt, %11, %12) : !s32i, !s32i loc(#loc242)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc162)
          %15 = cir.ternary(%14, true {
            %16 = cir.const #true loc(#loc158)
            cir.yield %16 : !cir.bool loc(#loc158)
          }, false {
            %16 = cir.const #false loc(#loc158)
            cir.yield %16 : !cir.bool loc(#loc158)
          }) : (!cir.bool) -> !cir.bool loc(#loc158)
          cir.yield %15 : !cir.bool loc(#loc158)
        }, false {
          %11 = cir.const #false loc(#loc158)
          cir.yield %11 : !cir.bool loc(#loc158)
        }) : (!cir.bool) -> !cir.bool loc(#loc158)
        cir.if %10 {
          %11 = cir.const #cir.int<1> : !s32i loc(#loc166)
          %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc167)
          %13 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc168)
          %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc168)
          cir.store %11, %14 : !s32i, !cir.ptr<!s32i> loc(#loc244)
          cir.scope {
            %15 = cir.const #cir.int<0> : !s32i loc(#loc171)
            cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc246)
            cir.for : cond {
              %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc173)
              %17 = cir.const #cir.int<10> : !s32i loc(#loc174)
              %18 = cir.cmp(lt, %16, %17) : !s32i, !s32i loc(#loc247)
              %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc175)
              cir.condition(%19) loc(#loc175)
            } body {
              cir.scope {
                %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc177)
                %17 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc178)
                %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc178)
                %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc178)
                cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc179)
              } loc(#loc248)
              cir.yield loc(#loc170)
            } step {
              %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc180)
              %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc181)
              cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc249)
              cir.yield loc(#loc245)
            } loc(#loc245)
          } loc(#loc245)
        } else {
          %11 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc118)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc118)
          cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc182)
        } loc(#loc243)
      } loc(#loc240)
    } loc(#loc237)
    cir.return loc(#loc120)
  } loc(#loc228)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":39:23)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":58:23)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":24:1)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":61:1)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":26:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":26:9)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":28:13)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":28:12)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":28:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":29:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":41:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":30:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":30:45)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":32:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":40:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":32:19)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":32:32)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":32:49)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":32:13)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":32:59)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":32:56)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":33:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":36:9)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":38:9)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":35:25)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":35:20)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":35:13)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":35:36)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":39:13)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":42:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":60:5)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":43:9)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":43:13)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":44:9)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":44:30)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":47:9)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":59:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":47:13)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":47:21)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":47:18)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":48:9)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":55:9)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":57:9)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":49:28)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":49:20)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":49:13)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":51:13)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":54:13)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":51:21)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":51:17)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":51:24)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":51:28)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":51:26)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":52:13)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":53:37)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":53:30)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":53:17)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":51:33)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":51:32)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":58:13)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":136:1)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":140:1)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":138:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":138:13)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":139:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":139:13)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":68:1)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":95:1)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":70:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":70:9)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":72:13)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":72:12)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":72:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":75:12)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":75:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":76:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":94:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":77:9)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":77:13)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":78:9)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":78:30)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":81:9)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":93:9)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":81:13)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":81:21)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":81:18)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":82:9)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":89:9)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":91:9)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":83:28)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":83:20)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":83:13)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":85:13)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":88:13)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":85:21)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":85:17)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":85:24)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":85:28)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":85:26)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":86:13)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":87:37)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":87:30)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":87:17)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":85:33)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":85:32)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":92:23)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":92:13)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":131:23)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":98:1)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":134:1)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":100:5)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":100:9)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":102:13)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":102:12)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":102:5)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":103:5)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":115:5)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":104:9)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":104:45)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":106:9)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":114:9)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":106:19)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":106:32)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":106:49)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":106:13)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":106:59)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":106:56)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":107:9)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":110:9)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":112:9)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":109:25)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":109:20)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":109:13)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":109:36)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":113:23)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":113:13)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":116:5)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":133:5)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":117:9)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":117:13)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":118:9)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":118:30)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":120:9)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":132:9)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":120:13)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":120:21)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":120:18)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":120:23)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":120:26)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":120:34)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":120:36)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":120:31)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":121:9)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":128:9)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":130:9)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":122:28)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":122:20)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":122:13)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":124:13)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":127:13)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":124:21)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":124:17)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":124:24)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":124:28)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":124:26)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":125:13)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":126:37)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":126:30)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":126:17)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":124:33)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":124:32)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c":131:13)
#loc183 = loc(fused[#loc1, #loc2])
#loc184 = loc(fused[#loc3, #loc4])
#loc185 = loc(fused[#loc5, #loc6])
#loc186 = loc(fused[#loc7, #loc8])
#loc187 = loc(fused[#loc10, #loc11])
#loc188 = loc(fused[#loc13, #loc14])
#loc189 = loc(fused[#loc15, #loc16])
#loc190 = loc(fused[#loc19, #loc17])
#loc191 = loc(fused[#loc20, #loc21])
#loc192 = loc(fused[#loc22, #loc23])
#loc193 = loc(fused[#loc24, #loc25])
#loc194 = loc(fused[#loc29, #loc30])
#loc195 = loc(fused[#loc32, #loc33, #loc34, #loc25])
#loc196 = loc(fused[#loc37, #loc38])
#loc197 = loc(fused[#loc40, #loc41])
#loc198 = loc(fused[#loc42, #loc43])
#loc199 = loc(fused[#loc44, #loc45])
#loc200 = loc(fused[#loc46, #loc47])
#loc201 = loc(fused[#loc48, #loc49])
#loc202 = loc(fused[#loc51, #loc52, #loc53, #loc47])
#loc203 = loc(fused[#loc56, #loc54])
#loc204 = loc(fused[#loc57, #loc58])
#loc205 = loc(fused[#loc60, #loc59])
#loc206 = loc(fused[#loc61, #loc62])
#loc207 = loc(fused[#loc64, #loc58])
#loc208 = loc(fused[#loc69, #loc68])
#loc209 = loc(fused[#loc71, #loc72])
#loc210 = loc(fused[#loc73, #loc74])
#loc211 = loc(fused[#loc75, #loc76])
#loc212 = loc(fused[#loc77, #loc78])
#loc213 = loc(fused[#loc79, #loc80])
#loc214 = loc(fused[#loc83, #loc81])
#loc215 = loc(fused[#loc85, #loc84])
#loc216 = loc(fused[#loc86, #loc87])
#loc217 = loc(fused[#loc88, #loc89])
#loc218 = loc(fused[#loc90, #loc91])
#loc219 = loc(fused[#loc92, #loc93])
#loc220 = loc(fused[#loc94, #loc95])
#loc221 = loc(fused[#loc97, #loc98, #loc99, #loc93])
#loc222 = loc(fused[#loc102, #loc100])
#loc223 = loc(fused[#loc103, #loc104])
#loc224 = loc(fused[#loc106, #loc105])
#loc225 = loc(fused[#loc107, #loc108])
#loc226 = loc(fused[#loc110, #loc104])
#loc227 = loc(fused[#loc115, #loc114])
#loc228 = loc(fused[#loc119, #loc120])
#loc229 = loc(fused[#loc121, #loc122])
#loc230 = loc(fused[#loc125, #loc123])
#loc231 = loc(fused[#loc126, #loc127])
#loc232 = loc(fused[#loc128, #loc129])
#loc233 = loc(fused[#loc130, #loc131])
#loc234 = loc(fused[#loc135, #loc136])
#loc235 = loc(fused[#loc138, #loc139, #loc140, #loc131])
#loc236 = loc(fused[#loc143, #loc144])
#loc237 = loc(fused[#loc147, #loc148])
#loc238 = loc(fused[#loc149, #loc150])
#loc239 = loc(fused[#loc151, #loc152])
#loc240 = loc(fused[#loc153, #loc154])
#loc241 = loc(fused[#loc155, #loc156])
#loc242 = loc(fused[#loc159, #loc161])
#loc243 = loc(fused[#loc163, #loc164, #loc165, #loc154])
#loc244 = loc(fused[#loc168, #loc166])
#loc245 = loc(fused[#loc169, #loc170])
#loc246 = loc(fused[#loc172, #loc171])
#loc247 = loc(fused[#loc173, #loc174])
#loc248 = loc(fused[#loc176, #loc170])
#loc249 = loc(fused[#loc181, #loc180])
