!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  external @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68_badData : !cir.ptr<!s32i> {alignment = 8 : i64} loc(#loc71)
  cir.func private  @printIntLine(!s32i) loc(#loc72)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b_badSink() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc74)
    %1 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68_badData : !cir.ptr<!cir.ptr<!s32i>> loc(#loc71)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc8)
    cir.store %2, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc74)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc76)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc76)
      cir.store %4, %3 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc76)
      cir.scope {
        %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc78)
        cir.scope {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc19)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc19)
          cir.store %11, %5 : !u64i, !cir.ptr<!u64i> loc(#loc80)
          cir.for : cond {
            %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc21)
            %13 = cir.const #cir.int<100> : !s32i loc(#loc22)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc22)
            %15 = cir.cmp(lt, %12, %14) : !u64i, !s32i loc(#loc81)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc23)
            cir.condition(%16) loc(#loc23)
          } body {
            cir.scope {
              %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc25)
              %13 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc26)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !u64i), !cir.ptr<!s32i> loc(#loc26)
              %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc26)
              %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
              %17 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc28)
              %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !u64i), !cir.ptr<!s32i> loc(#loc29)
              cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc83)
            } loc(#loc82)
            cir.yield loc(#loc18)
          } step {
            %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc31)
            %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc32)
            cir.store %13, %5 : !u64i, !cir.ptr<!u64i> loc(#loc84)
            cir.yield loc(#loc79)
          } loc(#loc79)
        } loc(#loc79)
        %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc33)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc34)
        %8 = cir.ptr_stride(%6 : !cir.ptr<!s32i>, %7 : !s32i), !cir.ptr<!s32i> loc(#loc35)
        %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc33)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc36)
      } loc(#loc77)
    } loc(#loc75)
    cir.return loc(#loc6)
  } loc(#loc73)
  cir.global "private"  external @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68_goodG2BData : !cir.ptr<!s32i> {alignment = 8 : i64} loc(#loc85)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b_goodG2BSink() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc87)
    %1 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68_goodG2BData : !cir.ptr<!cir.ptr<!s32i>> loc(#loc85)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc42)
    cir.store %2, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc87)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc89)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc89)
      cir.store %4, %3 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc89)
      cir.scope {
        %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc91)
        cir.scope {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc53)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc53)
          cir.store %11, %5 : !u64i, !cir.ptr<!u64i> loc(#loc93)
          cir.for : cond {
            %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc55)
            %13 = cir.const #cir.int<100> : !s32i loc(#loc56)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc56)
            %15 = cir.cmp(lt, %12, %14) : !u64i, !s32i loc(#loc94)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc57)
            cir.condition(%16) loc(#loc57)
          } body {
            cir.scope {
              %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc59)
              %13 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc60)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !u64i), !cir.ptr<!s32i> loc(#loc60)
              %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc60)
              %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc61)
              %17 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc62)
              %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !u64i), !cir.ptr<!s32i> loc(#loc63)
              cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc96)
            } loc(#loc95)
            cir.yield loc(#loc52)
          } step {
            %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc65)
            %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc66)
            cir.store %13, %5 : !u64i, !cir.ptr<!u64i> loc(#loc97)
            cir.yield loc(#loc92)
          } loc(#loc92)
        } loc(#loc92)
        %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc67)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc68)
        %8 = cir.ptr_stride(%6 : !cir.ptr<!s32i>, %7 : !s32i), !cir.ptr<!s32i> loc(#loc69)
        %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc67)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc70)
      } loc(#loc90)
    } loc(#loc88)
    cir.return loc(#loc40)
  } loc(#loc86)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":19:1)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":19:14)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":26:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":41:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":28:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":28:18)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":29:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":40:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":30:9)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":30:29)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":31:9)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":39:9)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":32:13)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":32:20)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":34:13)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":37:13)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":34:22)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":34:18)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":34:25)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":34:29)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":34:27)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":35:13)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":36:34)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":36:27)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":36:17)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":36:22)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":36:23)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":36:35)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":34:35)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":34:34)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":38:26)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":38:31)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":38:32)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":38:13)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":20:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":20:14)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":48:1)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":63:1)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":50:5)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":50:18)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":51:5)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":62:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":52:9)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":52:29)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":53:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":61:9)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":54:13)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":54:20)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":56:13)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":59:13)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":56:22)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":56:18)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":56:25)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":56:29)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":56:27)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":57:13)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":58:34)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":58:27)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":58:17)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":58:22)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":58:23)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":58:35)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":56:35)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":56:34)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":60:26)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":60:31)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":60:32)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c":60:13)
#loc71 = loc(fused[#loc1, #loc2])
#loc72 = loc(fused[#loc3, #loc4])
#loc73 = loc(fused[#loc5, #loc6])
#loc74 = loc(fused[#loc7, #loc8])
#loc75 = loc(fused[#loc9, #loc10])
#loc76 = loc(fused[#loc11, #loc12])
#loc77 = loc(fused[#loc13, #loc14])
#loc78 = loc(fused[#loc15, #loc16])
#loc79 = loc(fused[#loc17, #loc18])
#loc80 = loc(fused[#loc20, #loc19])
#loc81 = loc(fused[#loc21, #loc22])
#loc82 = loc(fused[#loc24, #loc18])
#loc83 = loc(fused[#loc27, #loc30])
#loc84 = loc(fused[#loc32, #loc31])
#loc85 = loc(fused[#loc37, #loc38])
#loc86 = loc(fused[#loc39, #loc40])
#loc87 = loc(fused[#loc41, #loc42])
#loc88 = loc(fused[#loc43, #loc44])
#loc89 = loc(fused[#loc45, #loc46])
#loc90 = loc(fused[#loc47, #loc48])
#loc91 = loc(fused[#loc49, #loc50])
#loc92 = loc(fused[#loc51, #loc52])
#loc93 = loc(fused[#loc54, #loc53])
#loc94 = loc(fused[#loc55, #loc56])
#loc95 = loc(fused[#loc58, #loc52])
#loc96 = loc(fused[#loc61, #loc64])
#loc97 = loc(fused[#loc66, #loc65])
