!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":125:10)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":125:14)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":125:20)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":125:32)
#loc192 = loc(fused[#loc60, #loc61])
#loc193 = loc(fused[#loc62, #loc63])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc168)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc170)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc7)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc171)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc173)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc11)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc11)
      cir.if %4 {
        %5 = cir.const #cir.int<10> : !s32i loc(#loc14)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc14)
        %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc14)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc14)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc14)
        cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc175)
      } loc(#loc174)
    } loc(#loc172)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc177)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc178)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc177)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc177)
      cir.scope {
        %9 = cir.const #cir.int<0> : !s32i loc(#loc24)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc24)
        cir.store %10, %3 : !u64i, !cir.ptr<!u64i> loc(#loc180)
        cir.for : cond {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc26)
          %12 = cir.const #cir.int<10> : !s32i loc(#loc27)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc27)
          %14 = cir.cmp(lt, %11, %13) : !u64i, !cir.bool loc(#loc181)
          cir.condition(%14) loc(#loc28)
        } body {
          cir.scope {
            %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc30)
            %12 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc31)
            %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !u64i), !cir.ptr<!s32i> loc(#loc31)
            %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc31)
            %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
            %16 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc33)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !u64i), !cir.ptr<!s32i> loc(#loc34)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc183)
          } loc(#loc182)
          cir.yield loc(#loc23)
        } step {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc36)
          %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc37)
          cir.store %12, %3 : !u64i, !cir.ptr<!u64i> loc(#loc184)
          cir.yield loc(#loc179)
        } loc(#loc179)
      } loc(#loc179)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc38)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc39)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc40)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc38)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc41)
    } loc(#loc176)
    cir.return loc(#loc4)
  } loc(#loc169)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc186)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc187)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    cir.return loc(#loc43)
  } loc(#loc185)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc188)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc189)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc190)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc57)
  cir.func @main(%arg0: !s32i loc(fused[#loc60, #loc61]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc62, #loc63])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc192)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc193)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc59)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc64)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc64)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc65)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc66)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc66)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc67)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc54)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08_good : !cir.ptr<!cir.func<!void ()>> loc(#loc194)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08_good() : () -> () loc(#loc69)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc55)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc56)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc195)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08_bad() : () -> () loc(#loc73)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc57)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc76)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc196)
    cir.return %17 : !s32i loc(#loc196)
  } loc(#loc191)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc79)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc80)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc198)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc198)
    cir.return %2 : !s32i loc(#loc198)
  } loc(#loc197)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc82)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc200)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc87)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc201)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc203)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc91)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc91)
      cir.if %4 {
        %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc82)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc82)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc96)
      } else {
        %5 = cir.const #cir.int<10> : !s32i loc(#loc97)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc97)
        %7 = cir.const #cir.int<4> : !u64i loc(#loc97)
        %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc97)
        %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc97)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc97)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc97)
        cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc205)
      } loc(#loc204)
    } loc(#loc202)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc207)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc208)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc207)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc207)
      cir.scope {
        %9 = cir.const #cir.int<0> : !s32i loc(#loc107)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc107)
        cir.store %10, %3 : !u64i, !cir.ptr<!u64i> loc(#loc210)
        cir.for : cond {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc109)
          %12 = cir.const #cir.int<10> : !s32i loc(#loc110)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc110)
          %14 = cir.cmp(lt, %11, %13) : !u64i, !cir.bool loc(#loc211)
          cir.condition(%14) loc(#loc111)
        } body {
          cir.scope {
            %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc113)
            %12 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc114)
            %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !u64i), !cir.ptr<!s32i> loc(#loc114)
            %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc114)
            %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc115)
            %16 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc116)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !u64i), !cir.ptr<!s32i> loc(#loc117)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc213)
          } loc(#loc212)
          cir.yield loc(#loc106)
        } step {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc119)
          %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc120)
          cir.store %12, %3 : !u64i, !cir.ptr<!u64i> loc(#loc214)
          cir.yield loc(#loc209)
        } loc(#loc209)
      } loc(#loc209)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc121)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc122)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc123)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc121)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc124)
    } loc(#loc206)
    cir.return loc(#loc84)
  } loc(#loc199)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc126)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc127)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc216)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc216)
    cir.return %2 : !s32i loc(#loc216)
  } loc(#loc215)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc218)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc133)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc219)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc221)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc137)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc137)
      cir.if %4 {
        %5 = cir.const #cir.int<10> : !s32i loc(#loc140)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc140)
        %7 = cir.const #cir.int<4> : !u64i loc(#loc140)
        %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc140)
        %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc140)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc140)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc140)
        cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc223)
      } loc(#loc222)
    } loc(#loc220)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc225)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc226)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc225)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc225)
      cir.scope {
        %9 = cir.const #cir.int<0> : !s32i loc(#loc150)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc150)
        cir.store %10, %3 : !u64i, !cir.ptr<!u64i> loc(#loc228)
        cir.for : cond {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc152)
          %12 = cir.const #cir.int<10> : !s32i loc(#loc153)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc153)
          %14 = cir.cmp(lt, %11, %13) : !u64i, !cir.bool loc(#loc229)
          cir.condition(%14) loc(#loc154)
        } body {
          cir.scope {
            %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc156)
            %12 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc157)
            %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !u64i), !cir.ptr<!s32i> loc(#loc157)
            %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc157)
            %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc158)
            %16 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc159)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !u64i), !cir.ptr<!s32i> loc(#loc160)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc231)
          } loc(#loc230)
          cir.yield loc(#loc149)
        } step {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc162)
          %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc163)
          cir.store %12, %3 : !u64i, !cir.ptr<!u64i> loc(#loc232)
          cir.yield loc(#loc227)
        } loc(#loc227)
      } loc(#loc227)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc164)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc165)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc166)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc164)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc167)
    } loc(#loc224)
    cir.return loc(#loc130)
  } loc(#loc217)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":35:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":54:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":37:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":37:11)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":38:12)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":38:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":39:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":43:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":39:8)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":39:26)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":40:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":42:23)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":42:9)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":44:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":53:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":45:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":45:28)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":46:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":46:16)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":48:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":51:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":48:18)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":48:14)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":48:21)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":48:25)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":48:23)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":49:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":50:30)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":50:23)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":50:13)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":50:18)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":50:19)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":50:31)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":48:30)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":48:29)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":52:22)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":52:27)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":52:28)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":52:9)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":109:1)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":113:1)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":111:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":111:14)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":112:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":112:14)
#loc48 = loc("/usr/include/stdlib.h":575:1)
#loc49 = loc("/usr/include/stdlib.h":575:41)
#loc50 = loc("/usr/include/time.h":76:1)
#loc51 = loc("/usr/include/time.h":76:38)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":130:15)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":132:15)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":135:15)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":137:15)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":125:1)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":140:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":126:1)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":128:27)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":128:22)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":128:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":130:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":131:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":131:61)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":132:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":135:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":136:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":136:60)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":137:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":139:12)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":139:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":23:1)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":26:1)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":25:12)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":25:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":68:19)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":61:1)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":85:1)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":63:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":63:11)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":64:12)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":64:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":65:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":74:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":65:8)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":65:27)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":66:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":69:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":71:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":68:9)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":73:23)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":73:9)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":75:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":84:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":76:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":76:28)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":77:9)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":77:16)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":79:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":82:9)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":79:18)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":79:14)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":79:21)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":79:25)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":79:23)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":80:9)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":81:30)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":81:23)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":81:13)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":81:18)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":81:19)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":81:31)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":79:30)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":79:29)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":83:22)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":83:27)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":83:28)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":83:9)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":28:1)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":31:1)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":30:12)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":30:5)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":88:1)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":107:1)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":90:5)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":90:11)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":91:12)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":91:5)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":92:5)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":96:5)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":92:8)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":92:26)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":93:5)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":95:23)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":95:9)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":97:5)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":106:5)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":98:9)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":98:28)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":99:9)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":99:16)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":101:9)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":104:9)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":101:18)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":101:14)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":101:21)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":101:25)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":101:23)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":102:9)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":103:30)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":103:23)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":103:13)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":103:18)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":103:19)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":103:31)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":101:30)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":101:29)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":105:22)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":105:27)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":105:28)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c":105:9)
#loc168 = loc(fused[#loc1, #loc2])
#loc169 = loc(fused[#loc3, #loc4])
#loc170 = loc(fused[#loc5, #loc6])
#loc171 = loc(fused[#loc8, #loc7])
#loc172 = loc(fused[#loc9, #loc10])
#loc173 = loc(fused[#loc11, #loc12])
#loc174 = loc(fused[#loc13, #loc10])
#loc175 = loc(fused[#loc15, #loc14])
#loc176 = loc(fused[#loc16, #loc17])
#loc177 = loc(fused[#loc18, #loc19])
#loc178 = loc(fused[#loc20, #loc21])
#loc179 = loc(fused[#loc22, #loc23])
#loc180 = loc(fused[#loc25, #loc24])
#loc181 = loc(fused[#loc26, #loc27])
#loc182 = loc(fused[#loc29, #loc23])
#loc183 = loc(fused[#loc32, #loc35])
#loc184 = loc(fused[#loc37, #loc36])
#loc185 = loc(fused[#loc42, #loc43])
#loc186 = loc(fused[#loc44, #loc45])
#loc187 = loc(fused[#loc46, #loc47])
#loc188 = loc(fused[#loc48, #loc49])
#loc189 = loc(fused[#loc50, #loc51])
#loc190 = loc(fused[#loc52, #loc53])
#loc191 = loc(fused[#loc58, #loc59])
#loc194 = loc(fused[#loc69, #loc70])
#loc195 = loc(fused[#loc73, #loc74])
#loc196 = loc(fused[#loc77, #loc76])
#loc197 = loc(fused[#loc78, #loc79])
#loc198 = loc(fused[#loc81, #loc80])
#loc199 = loc(fused[#loc83, #loc84])
#loc200 = loc(fused[#loc85, #loc86])
#loc201 = loc(fused[#loc88, #loc87])
#loc202 = loc(fused[#loc89, #loc90])
#loc203 = loc(fused[#loc91, #loc92])
#loc204 = loc(fused[#loc93, #loc94, #loc95, #loc90])
#loc205 = loc(fused[#loc98, #loc97])
#loc206 = loc(fused[#loc99, #loc100])
#loc207 = loc(fused[#loc101, #loc102])
#loc208 = loc(fused[#loc103, #loc104])
#loc209 = loc(fused[#loc105, #loc106])
#loc210 = loc(fused[#loc108, #loc107])
#loc211 = loc(fused[#loc109, #loc110])
#loc212 = loc(fused[#loc112, #loc106])
#loc213 = loc(fused[#loc115, #loc118])
#loc214 = loc(fused[#loc120, #loc119])
#loc215 = loc(fused[#loc125, #loc126])
#loc216 = loc(fused[#loc128, #loc127])
#loc217 = loc(fused[#loc129, #loc130])
#loc218 = loc(fused[#loc131, #loc132])
#loc219 = loc(fused[#loc134, #loc133])
#loc220 = loc(fused[#loc135, #loc136])
#loc221 = loc(fused[#loc137, #loc138])
#loc222 = loc(fused[#loc139, #loc136])
#loc223 = loc(fused[#loc141, #loc140])
#loc224 = loc(fused[#loc142, #loc143])
#loc225 = loc(fused[#loc144, #loc145])
#loc226 = loc(fused[#loc146, #loc147])
#loc227 = loc(fused[#loc148, #loc149])
#loc228 = loc(fused[#loc151, #loc150])
#loc229 = loc(fused[#loc152, #loc153])
#loc230 = loc(fused[#loc155, #loc149])
#loc231 = loc(fused[#loc158, #loc161])
#loc232 = loc(fused[#loc163, #loc162])
