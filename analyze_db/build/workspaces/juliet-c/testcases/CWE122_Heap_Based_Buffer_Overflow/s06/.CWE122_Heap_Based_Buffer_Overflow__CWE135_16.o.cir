!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc245)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc246)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc247)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc248)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc249)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc250)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc251)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc252)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc254)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc21)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc255)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc25)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc25)
        cir.condition(%3) loc(#loc25)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc259)
            %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc31)
            %4 = cir.const #cir.int<50> : !s32i loc(#loc32)
            %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc32)
            %6 = cir.const #cir.int<4> : !u64i loc(#loc260)
            %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc261)
            %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc31)
            %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc262)
            cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc259)
            cir.scope {
              %25 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc37)
              %26 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc38)
              %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc38)
              %28 = cir.cmp(eq, %25, %27) : !cir.ptr<!s32i>, !cir.bool loc(#loc264)
              cir.if %28 {
                %29 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc40)
                %30 = cir.const #cir.int<1> : !s32i loc(#loc41)
                %31 = cir.unary(minus, %30) nsw : !s32i, !s32i loc(#loc42)
                cir.call @exit(%31) : (!s32i) -> () extra(#fn_attr) loc(#loc40)
              } loc(#loc265)
            } loc(#loc263)
            %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
            %11 = cir.const #cir.int<65> : !s32i loc(#loc44)
            %12 = cir.const #cir.int<50> : !s32i loc(#loc45)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc46)
            %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc45)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc45)
            %16 = cir.call @wmemset(%10, %11, %15) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc47)
            %17 = cir.const #cir.int<0> : !s32i loc(#loc48)
            %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
            %19 = cir.const #cir.int<50> : !s32i loc(#loc50)
            %20 = cir.const #cir.int<1> : !s32i loc(#loc51)
            %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc50)
            %22 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc52)
            cir.store %17, %22 : !s32i, !cir.ptr<!s32i> loc(#loc266)
            %23 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc53)
            %24 = cir.cast(bitcast, %23 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc53)
            cir.store %24, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc267)
          } loc(#loc258)
          cir.break loc(#loc55)
        } loc(#loc257)
        cir.yield loc(#loc24)
      } loc(#loc256)
    } loc(#loc256)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc58)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc58)
        cir.condition(%3) loc(#loc58)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc271)
            %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc272)
            %4 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc66)
            %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc67)
            %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc67)
            %7 = cir.call @strlen(%6) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc66)
            cir.store %7, %2 : !u64i, !cir.ptr<!u64i> loc(#loc271)
            %8 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc68)
            %9 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc69)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc70)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc70)
            %12 = cir.binop(add, %9, %11) : !u64i loc(#loc273)
            %13 = cir.const #cir.int<4> : !u64i loc(#loc274)
            %14 = cir.call @calloc(%12, %13) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc68)
            cir.store %14, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc272)
            cir.scope {
              %24 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc75)
              %25 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc76)
              %26 = cir.cmp(eq, %24, %25) : !cir.ptr<!void>, !cir.bool loc(#loc276)
              cir.if %26 {
                %27 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc78)
                %28 = cir.const #cir.int<1> : !s32i loc(#loc79)
                %29 = cir.unary(minus, %28) nsw : !s32i, !s32i loc(#loc80)
                cir.call @exit(%29) : (!s32i) -> () extra(#fn_attr) loc(#loc78)
              } loc(#loc277)
            } loc(#loc275)
            %15 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc81)
            %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc81)
            %17 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc82)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc82)
            %19 = cir.call @wcscpy(%16, %18) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc83)
            %20 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc84)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc84)
            cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc85)
            %22 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc86)
            %23 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc87)
            cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc86)
          } loc(#loc270)
          cir.break loc(#loc88)
        } loc(#loc269)
        cir.yield loc(#loc57)
      } loc(#loc268)
    } loc(#loc268)
    cir.return loc(#loc18)
  } loc(#loc253)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc279)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc91)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc280)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc93)
    cir.return loc(#loc90)
  } loc(#loc278)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc281)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc282)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc284)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc103)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc285)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc107)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc107)
        cir.condition(%3) loc(#loc107)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc289)
            %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc113)
            %4 = cir.const #cir.int<50> : !s32i loc(#loc114)
            %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc114)
            %6 = cir.const #cir.int<4> : !u64i loc(#loc290)
            %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc291)
            %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc113)
            %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc292)
            cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc289)
            cir.scope {
              %25 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc119)
              %26 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc120)
              %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc120)
              %28 = cir.cmp(eq, %25, %27) : !cir.ptr<!s32i>, !cir.bool loc(#loc294)
              cir.if %28 {
                %29 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc122)
                %30 = cir.const #cir.int<1> : !s32i loc(#loc123)
                %31 = cir.unary(minus, %30) nsw : !s32i, !s32i loc(#loc124)
                cir.call @exit(%31) : (!s32i) -> () extra(#fn_attr) loc(#loc122)
              } loc(#loc295)
            } loc(#loc293)
            %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc125)
            %11 = cir.const #cir.int<65> : !s32i loc(#loc126)
            %12 = cir.const #cir.int<50> : !s32i loc(#loc127)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc128)
            %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc127)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc127)
            %16 = cir.call @wmemset(%10, %11, %15) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc129)
            %17 = cir.const #cir.int<0> : !s32i loc(#loc130)
            %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc131)
            %19 = cir.const #cir.int<50> : !s32i loc(#loc132)
            %20 = cir.const #cir.int<1> : !s32i loc(#loc133)
            %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc132)
            %22 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc134)
            cir.store %17, %22 : !s32i, !cir.ptr<!s32i> loc(#loc296)
            %23 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc135)
            %24 = cir.cast(bitcast, %23 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc135)
            cir.store %24, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc297)
          } loc(#loc288)
          cir.break loc(#loc137)
        } loc(#loc287)
        cir.yield loc(#loc106)
      } loc(#loc286)
    } loc(#loc286)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc140)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc140)
        cir.condition(%3) loc(#loc140)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc301)
            %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc302)
            %4 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc148)
            %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc149)
            %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc149)
            %7 = cir.call @wcslen(%6) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc148)
            cir.store %7, %2 : !u64i, !cir.ptr<!u64i> loc(#loc301)
            %8 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc150)
            %9 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc151)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc152)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc152)
            %12 = cir.binop(add, %9, %11) : !u64i loc(#loc303)
            %13 = cir.const #cir.int<4> : !u64i loc(#loc304)
            %14 = cir.call @calloc(%12, %13) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc150)
            cir.store %14, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc302)
            cir.scope {
              %24 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc157)
              %25 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc158)
              %26 = cir.cmp(eq, %24, %25) : !cir.ptr<!void>, !cir.bool loc(#loc306)
              cir.if %26 {
                %27 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc160)
                %28 = cir.const #cir.int<1> : !s32i loc(#loc161)
                %29 = cir.unary(minus, %28) nsw : !s32i, !s32i loc(#loc162)
                cir.call @exit(%29) : (!s32i) -> () extra(#fn_attr) loc(#loc160)
              } loc(#loc307)
            } loc(#loc305)
            %15 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc163)
            %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc163)
            %17 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc164)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc164)
            %19 = cir.call @wcscpy(%16, %18) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc165)
            %20 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc166)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc166)
            cir.call @printWLine(%21) : (!cir.ptr<!s32i>) -> () loc(#loc167)
            %22 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc168)
            %23 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc169)
            cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc168)
          } loc(#loc300)
          cir.break loc(#loc170)
        } loc(#loc299)
        cir.yield loc(#loc139)
      } loc(#loc298)
    } loc(#loc298)
    cir.return loc(#loc100)
  } loc(#loc283)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc308)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc310)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc177)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc311)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc181)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc181)
        cir.condition(%3) loc(#loc181)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc315)
            %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc187)
            %4 = cir.const #cir.int<50> : !s32i loc(#loc188)
            %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc188)
            %6 = cir.const #cir.int<1> : !u64i loc(#loc316)
            %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc317)
            %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc187)
            %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc318)
            cir.store %9, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc315)
            cir.scope {
              %26 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc193)
              %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc194)
              %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc194)
              %29 = cir.cmp(eq, %26, %28) : !cir.ptr<!s8i>, !cir.bool loc(#loc320)
              cir.if %29 {
                %30 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc196)
                %31 = cir.const #cir.int<1> : !s32i loc(#loc197)
                %32 = cir.unary(minus, %31) nsw : !s32i, !s32i loc(#loc198)
                cir.call @exit(%32) : (!s32i) -> () extra(#fn_attr) loc(#loc196)
              } loc(#loc321)
            } loc(#loc319)
            %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc199)
            %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc199)
            %12 = cir.const #cir.int<65> : !s32i loc(#loc200)
            %13 = cir.const #cir.int<50> : !s32i loc(#loc201)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc202)
            %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc201)
            %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc201)
            cir.libc.memset %16 bytes from %11 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc322)
            %17 = cir.const #cir.int<0> : !s32i loc(#loc205)
            %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc205)
            %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc206)
            %20 = cir.const #cir.int<50> : !s32i loc(#loc207)
            %21 = cir.const #cir.int<1> : !s32i loc(#loc208)
            %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc207)
            %23 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc209)
            cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc323)
            %24 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc210)
            %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc210)
            cir.store %25, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc324)
          } loc(#loc314)
          cir.break loc(#loc212)
        } loc(#loc313)
        cir.yield loc(#loc180)
      } loc(#loc312)
    } loc(#loc312)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc215)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc215)
        cir.condition(%3) loc(#loc215)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc328)
            %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc329)
            %4 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc223)
            %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc224)
            %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc224)
            %7 = cir.call @strlen(%6) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc223)
            cir.store %7, %2 : !u64i, !cir.ptr<!u64i> loc(#loc328)
            %8 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc225)
            %9 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc226)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc227)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc227)
            %12 = cir.binop(add, %9, %11) : !u64i loc(#loc330)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc228)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc228)
            %15 = cir.call @calloc(%12, %14) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc225)
            cir.store %15, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc329)
            cir.scope {
              %26 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc231)
              %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc232)
              %28 = cir.cmp(eq, %26, %27) : !cir.ptr<!void>, !cir.bool loc(#loc332)
              cir.if %28 {
                %29 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc234)
                %30 = cir.const #cir.int<1> : !s32i loc(#loc235)
                %31 = cir.unary(minus, %30) nsw : !s32i, !s32i loc(#loc236)
                cir.call @exit(%31) : (!s32i) -> () extra(#fn_attr) loc(#loc234)
              } loc(#loc333)
            } loc(#loc331)
            %16 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc237)
            %17 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc238)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc238)
            %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc239)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc239)
            %21 = cir.call @strcpy(%18, %20) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc237)
            %22 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc240)
            %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc240)
            cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc241)
            %24 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc242)
            %25 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc243)
            cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc242)
          } loc(#loc327)
          cir.break loc(#loc244)
        } loc(#loc326)
        cir.yield loc(#loc214)
      } loc(#loc325)
    } loc(#loc325)
    cir.return loc(#loc174)
  } loc(#loc309)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/wchar.h":296:1)
#loc6 = loc("/usr/include/wchar.h":296:65)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("/usr/include/stdlib.h":675:1)
#loc10 = loc("/usr/include/stdlib.h":676:14)
#loc11 = loc("/usr/include/wchar.h":98:1)
#loc12 = loc("/usr/include/wchar.h":100:14)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc15 = loc("/usr/include/stdlib.h":687:1)
#loc16 = loc("/usr/include/stdlib.h":687:32)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":24:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":53:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":26:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":26:12)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":27:12)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":27:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":28:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":39:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":28:11)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":29:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":30:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":37:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":31:13)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":31:75)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":31:50)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":31:57)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":31:60)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":31:74)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":32:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":32:50)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":32:17)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":32:34)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":32:40)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":32:41)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":32:47)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":32:46)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":33:21)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":33:36)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":33:42)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":33:45)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":33:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":34:35)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":34:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":34:27)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":34:30)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":34:31)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":36:28)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":36:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":38:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":40:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":52:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":40:11)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":41:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":42:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":50:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":44:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":44:49)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":45:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":45:68)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":44:30)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":44:45)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":45:35)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":45:42)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":45:50)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":45:53)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":45:67)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":46:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":46:41)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":46:17)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":46:25)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":46:31)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":46:32)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":46:38)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":46:37)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":47:26)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":47:32)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":47:19)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":48:31)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":48:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":49:13)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":49:18)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":51:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":123:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":127:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":125:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":125:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":126:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":126:13)
#loc95 = loc("/usr/include/wchar.h":247:1)
#loc96 = loc("/usr/include/wchar.h":247:51)
#loc97 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc98 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":60:1)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":89:1)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":62:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":62:12)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":63:12)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":63:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":64:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":75:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":64:11)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":65:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":66:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":73:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":67:13)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":67:75)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":67:50)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":67:57)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":67:60)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":67:74)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":68:13)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":68:50)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":68:17)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":68:34)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":68:40)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":68:41)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":68:47)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":68:46)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":69:21)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":69:36)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":69:42)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":69:45)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":69:13)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":70:35)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":70:13)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":70:27)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":70:30)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":70:31)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":72:28)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":72:13)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":74:9)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":76:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":88:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":76:11)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":77:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":78:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":86:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":80:13)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":80:52)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":81:13)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":81:68)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":80:30)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":80:48)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":81:35)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":81:42)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":81:50)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":81:53)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":81:67)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":82:13)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":82:41)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":82:17)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":82:25)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":82:31)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":82:32)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":82:38)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":82:37)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":83:26)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":83:32)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":83:19)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":84:35)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":84:13)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":85:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":85:18)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":87:9)
#loc171 = loc("/usr/include/string.h":141:1)
#loc172 = loc("/usr/include/string.h":142:14)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":92:1)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":121:1)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":94:5)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":94:12)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":95:12)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":95:5)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":96:5)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":107:5)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":96:11)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":97:5)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":98:9)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":105:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":99:13)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":99:67)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":99:45)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":99:52)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":99:55)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":99:66)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":100:13)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":100:51)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":100:17)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":100:35)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":100:41)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":100:42)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":100:48)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":100:47)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":101:20)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":101:36)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":101:41)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":101:44)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":101:13)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":101:45)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":102:36)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":102:13)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":102:28)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":102:31)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":102:32)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":104:28)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":104:13)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":106:9)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":108:5)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":120:5)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":108:11)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":109:5)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":110:9)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":118:9)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":112:13)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":112:49)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":113:13)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":113:54)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":112:30)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":112:45)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":113:35)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":113:42)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":113:50)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":113:53)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":114:13)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":114:41)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":114:17)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":114:25)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":114:31)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":114:32)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":114:38)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":114:37)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":115:19)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":115:26)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":115:32)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":116:31)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":116:13)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":117:13)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":117:18)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c":119:9)
#loc245 = loc(fused[#loc1, #loc2])
#loc246 = loc(fused[#loc3, #loc4])
#loc247 = loc(fused[#loc5, #loc6])
#loc248 = loc(fused[#loc7, #loc8])
#loc249 = loc(fused[#loc9, #loc10])
#loc250 = loc(fused[#loc11, #loc12])
#loc251 = loc(fused[#loc13, #loc14])
#loc252 = loc(fused[#loc15, #loc16])
#loc253 = loc(fused[#loc17, #loc18])
#loc254 = loc(fused[#loc19, #loc20])
#loc255 = loc(fused[#loc22, #loc21])
#loc256 = loc(fused[#loc23, #loc24])
#loc257 = loc(fused[#loc26, #loc24])
#loc258 = loc(fused[#loc27, #loc28])
#loc259 = loc(fused[#loc29, #loc30])
#loc260 = loc(fused[#loc33, #loc34])
#loc261 = loc(fused[#loc32, #loc34])
#loc262 = loc(fused[#loc31, #loc30])
#loc263 = loc(fused[#loc35, #loc36])
#loc264 = loc(fused[#loc37, #loc38])
#loc265 = loc(fused[#loc39, #loc36])
#loc266 = loc(fused[#loc49, #loc48])
#loc267 = loc(fused[#loc54, #loc53])
#loc268 = loc(fused[#loc56, #loc57])
#loc269 = loc(fused[#loc59, #loc57])
#loc270 = loc(fused[#loc60, #loc61])
#loc271 = loc(fused[#loc62, #loc63])
#loc272 = loc(fused[#loc64, #loc65])
#loc273 = loc(fused[#loc69, #loc70])
#loc274 = loc(fused[#loc71, #loc72])
#loc275 = loc(fused[#loc73, #loc74])
#loc276 = loc(fused[#loc75, #loc76])
#loc277 = loc(fused[#loc77, #loc74])
#loc278 = loc(fused[#loc89, #loc90])
#loc279 = loc(fused[#loc91, #loc92])
#loc280 = loc(fused[#loc93, #loc94])
#loc281 = loc(fused[#loc95, #loc96])
#loc282 = loc(fused[#loc97, #loc98])
#loc283 = loc(fused[#loc99, #loc100])
#loc284 = loc(fused[#loc101, #loc102])
#loc285 = loc(fused[#loc104, #loc103])
#loc286 = loc(fused[#loc105, #loc106])
#loc287 = loc(fused[#loc108, #loc106])
#loc288 = loc(fused[#loc109, #loc110])
#loc289 = loc(fused[#loc111, #loc112])
#loc290 = loc(fused[#loc115, #loc116])
#loc291 = loc(fused[#loc114, #loc116])
#loc292 = loc(fused[#loc113, #loc112])
#loc293 = loc(fused[#loc117, #loc118])
#loc294 = loc(fused[#loc119, #loc120])
#loc295 = loc(fused[#loc121, #loc118])
#loc296 = loc(fused[#loc131, #loc130])
#loc297 = loc(fused[#loc136, #loc135])
#loc298 = loc(fused[#loc138, #loc139])
#loc299 = loc(fused[#loc141, #loc139])
#loc300 = loc(fused[#loc142, #loc143])
#loc301 = loc(fused[#loc144, #loc145])
#loc302 = loc(fused[#loc146, #loc147])
#loc303 = loc(fused[#loc151, #loc152])
#loc304 = loc(fused[#loc153, #loc154])
#loc305 = loc(fused[#loc155, #loc156])
#loc306 = loc(fused[#loc157, #loc158])
#loc307 = loc(fused[#loc159, #loc156])
#loc308 = loc(fused[#loc171, #loc172])
#loc309 = loc(fused[#loc173, #loc174])
#loc310 = loc(fused[#loc175, #loc176])
#loc311 = loc(fused[#loc178, #loc177])
#loc312 = loc(fused[#loc179, #loc180])
#loc313 = loc(fused[#loc182, #loc180])
#loc314 = loc(fused[#loc183, #loc184])
#loc315 = loc(fused[#loc185, #loc186])
#loc316 = loc(fused[#loc189, #loc190])
#loc317 = loc(fused[#loc188, #loc190])
#loc318 = loc(fused[#loc187, #loc186])
#loc319 = loc(fused[#loc191, #loc192])
#loc320 = loc(fused[#loc193, #loc194])
#loc321 = loc(fused[#loc195, #loc192])
#loc322 = loc(fused[#loc203, #loc204])
#loc323 = loc(fused[#loc206, #loc205])
#loc324 = loc(fused[#loc211, #loc210])
#loc325 = loc(fused[#loc213, #loc214])
#loc326 = loc(fused[#loc216, #loc214])
#loc327 = loc(fused[#loc217, #loc218])
#loc328 = loc(fused[#loc219, #loc220])
#loc329 = loc(fused[#loc221, #loc222])
#loc330 = loc(fused[#loc226, #loc227])
#loc331 = loc(fused[#loc229, #loc230])
#loc332 = loc(fused[#loc231, #loc232])
#loc333 = loc(fused[#loc233, #loc230])
