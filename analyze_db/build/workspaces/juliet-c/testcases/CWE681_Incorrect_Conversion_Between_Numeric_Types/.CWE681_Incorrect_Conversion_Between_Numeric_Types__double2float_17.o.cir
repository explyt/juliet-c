!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc103)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc104)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc105)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc106)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printFloatLine(!cir.float) loc(#loc107)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc109)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc18)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc111)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc20)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc21)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc112)
        cir.condition(%4) loc(#loc22)
      } body {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc115)
            %3 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc116)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc29)
            %5 = cir.cast(int_to_float, %4 : !s32i), !cir.double loc(#loc29)
            cir.store %5, %3 : !cir.double, !cir.ptr<!cir.double> loc(#loc116)
            cir.scope {
              %8 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc32)
              %9 = cir.const #cir.int<256> : !s32i loc(#loc33)
              %10 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc104)
              %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc34)
              %12 = cir.call @fgets(%8, %9, %11) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc35)
              %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc36)
              %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc36)
              %15 = cir.cmp(ne, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc118)
              cir.if %15 {
                %16 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc40)
                %17 = cir.call @atof(%16) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc41)
                cir.store %17, %3 : !cir.double, !cir.ptr<!cir.double> loc(#loc120)
              } else {
                %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
                %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
                cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc44)
              } loc(#loc119)
            } loc(#loc117)
            %6 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double loc(#loc45)
            %7 = cir.cast(floating, %6 : !cir.double), !cir.float loc(#loc45)
            cir.call @printFloatLine(%7) : (!cir.float) -> () loc(#loc46)
          } loc(#loc114)
        } loc(#loc113)
        cir.yield loc(#loc17)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc47)
        %3 = cir.unary(inc, %2) nsw : !s32i, !s32i loc(#loc48)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc121)
        cir.yield loc(#loc110)
      } loc(#loc110)
    } loc(#loc110)
    cir.return loc(#loc13)
  } loc(#loc108)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc123)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc51)
    cir.return loc(#loc50)
  } loc(#loc122)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Value is too small or large to be represented as a float\00" : !cir.array<!s8i x 57>> : !cir.array<!s8i x 57> {alignment = 1 : i64} loc(#loc53)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc125)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc60)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc127)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc62)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc63)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc128)
        cir.condition(%4) loc(#loc64)
      } body {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc131)
            %3 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc132)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc71)
            %5 = cir.cast(int_to_float, %4 : !s32i), !cir.double loc(#loc71)
            cir.store %5, %3 : !cir.double, !cir.ptr<!cir.double> loc(#loc132)
            cir.scope {
              %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc74)
              %7 = cir.const #cir.int<256> : !s32i loc(#loc75)
              %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc104)
              %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc76)
              %10 = cir.call @fgets(%6, %7, %9) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc77)
              %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc78)
              %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc78)
              %13 = cir.cmp(ne, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc134)
              cir.if %13 {
                %14 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc82)
                %15 = cir.call @atof(%14) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc83)
                cir.store %15, %3 : !cir.double, !cir.ptr<!cir.double> loc(#loc136)
              } else {
                %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc86)
                %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc86)
                cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc87)
              } loc(#loc135)
            } loc(#loc133)
            cir.scope {
              %6 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double loc(#loc90)
              %7 = cir.const #cir.fp<3.40282347E+38> : !cir.float loc(#loc91)
              %8 = cir.cast(floating, %7 : !cir.float), !cir.double loc(#loc91)
              %9 = cir.cmp(gt, %6, %8) : !cir.double, !cir.bool loc(#loc138)
              %10 = cir.ternary(%9, true {
                %11 = cir.const #true loc(#loc92)
                cir.yield %11 : !cir.bool loc(#loc92)
              }, false {
                %11 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double loc(#loc93)
                %12 = cir.const #cir.fp<1.17549435E-38> : !cir.float loc(#loc94)
                %13 = cir.cast(floating, %12 : !cir.float), !cir.double loc(#loc94)
                %14 = cir.cmp(lt, %11, %13) : !cir.double, !cir.bool loc(#loc139)
                %15 = cir.ternary(%14, true {
                  %16 = cir.const #true loc(#loc92)
                  cir.yield %16 : !cir.bool loc(#loc92)
                }, false {
                  %16 = cir.const #false loc(#loc92)
                  cir.yield %16 : !cir.bool loc(#loc92)
                }) : (!cir.bool) -> !cir.bool loc(#loc92)
                cir.yield %15 : !cir.bool loc(#loc92)
              }) : (!cir.bool) -> !cir.bool loc(#loc92)
              cir.if %10 {
                %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 57>> loc(#loc53)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 57>>), !cir.ptr<!s8i> loc(#loc53)
                cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc98)
              } else {
                %11 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double loc(#loc99)
                %12 = cir.cast(floating, %11 : !cir.double), !cir.float loc(#loc99)
                cir.call @printFloatLine(%12) : (!cir.float) -> () loc(#loc100)
              } loc(#loc140)
            } loc(#loc137)
          } loc(#loc130)
        } loc(#loc129)
        cir.yield loc(#loc59)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
        %3 = cir.unary(inc, %2) nsw : !s32i, !s32i loc(#loc102)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc141)
        cir.yield loc(#loc126)
      } loc(#loc126)
    } loc(#loc126)
    cir.return loc(#loc55)
  } loc(#loc124)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":102:1)
#loc6 = loc("/usr/include/stdlib.h":103:33)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":43:27)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":22:1)
#loc11 = loc("../../testcasesupport/std_testcase_io.h":22:39)
#loc12 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":23:1)
#loc13 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":49:1)
#loc14 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":25:5)
#loc15 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":25:9)
#loc16 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":26:5)
#loc17 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":48:5)
#loc18 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":26:13)
#loc19 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":26:9)
#loc20 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":26:16)
#loc21 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":26:20)
#loc22 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":26:18)
#loc23 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":27:5)
#loc24 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":28:9)
#loc25 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":47:9)
#loc26 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":29:13)
#loc27 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":29:45)
#loc28 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":30:13)
#loc29 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":30:35)
#loc30 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":36:13)
#loc31 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":44:13)
#loc32 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":36:23)
#loc33 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":36:36)
#loc34 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":36:53)
#loc35 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":36:17)
#loc36 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":36:63)
#loc37 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":37:13)
#loc38 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":40:13)
#loc39 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":42:13)
#loc40 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":39:37)
#loc41 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":39:32)
#loc42 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":39:17)
#loc43 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":39:48)
#loc44 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":43:17)
#loc45 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":46:35)
#loc46 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":46:13)
#loc47 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":26:24)
#loc48 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":26:23)
#loc49 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":91:1)
#loc50 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":94:1)
#loc51 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":93:5)
#loc52 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":93:11)
#loc53 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":81:27)
#loc54 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":56:1)
#loc55 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":89:1)
#loc56 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":58:5)
#loc57 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":58:9)
#loc58 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":59:5)
#loc59 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":88:5)
#loc60 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":59:13)
#loc61 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":59:9)
#loc62 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":59:16)
#loc63 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":59:20)
#loc64 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":59:18)
#loc65 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":60:5)
#loc66 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":61:9)
#loc67 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":87:9)
#loc68 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":62:13)
#loc69 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":62:45)
#loc70 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":63:13)
#loc71 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":63:35)
#loc72 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":69:13)
#loc73 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":77:13)
#loc74 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":69:23)
#loc75 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":69:36)
#loc76 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":69:53)
#loc77 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":69:17)
#loc78 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":69:63)
#loc79 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":70:13)
#loc80 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":73:13)
#loc81 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":75:13)
#loc82 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":72:37)
#loc83 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":72:32)
#loc84 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":72:17)
#loc85 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":72:48)
#loc86 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":76:27)
#loc87 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":76:17)
#loc88 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":79:13)
#loc89 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":86:13)
#loc90 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":79:17)
#loc91 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":79:32)
#loc92 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":79:40)
#loc93 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":79:43)
#loc94 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":79:58)
#loc95 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":80:13)
#loc96 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":82:13)
#loc97 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":84:13)
#loc98 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":81:17)
#loc99 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":85:39)
#loc100 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":85:17)
#loc101 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":59:24)
#loc102 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17.c":59:23)
#loc103 = loc(fused[#loc1, #loc2])
#loc104 = loc(fused[#loc3, #loc4])
#loc105 = loc(fused[#loc5, #loc6])
#loc106 = loc(fused[#loc7, #loc8])
#loc107 = loc(fused[#loc10, #loc11])
#loc108 = loc(fused[#loc12, #loc13])
#loc109 = loc(fused[#loc14, #loc15])
#loc110 = loc(fused[#loc16, #loc17])
#loc111 = loc(fused[#loc19, #loc18])
#loc112 = loc(fused[#loc20, #loc21])
#loc113 = loc(fused[#loc23, #loc17])
#loc114 = loc(fused[#loc24, #loc25])
#loc115 = loc(fused[#loc26, #loc27])
#loc116 = loc(fused[#loc28, #loc29])
#loc117 = loc(fused[#loc30, #loc31])
#loc118 = loc(fused[#loc35, #loc36])
#loc119 = loc(fused[#loc37, #loc38, #loc39, #loc31])
#loc120 = loc(fused[#loc42, #loc43])
#loc121 = loc(fused[#loc48, #loc47])
#loc122 = loc(fused[#loc49, #loc50])
#loc123 = loc(fused[#loc51, #loc52])
#loc124 = loc(fused[#loc54, #loc55])
#loc125 = loc(fused[#loc56, #loc57])
#loc126 = loc(fused[#loc58, #loc59])
#loc127 = loc(fused[#loc61, #loc60])
#loc128 = loc(fused[#loc62, #loc63])
#loc129 = loc(fused[#loc65, #loc59])
#loc130 = loc(fused[#loc66, #loc67])
#loc131 = loc(fused[#loc68, #loc69])
#loc132 = loc(fused[#loc70, #loc71])
#loc133 = loc(fused[#loc72, #loc73])
#loc134 = loc(fused[#loc77, #loc78])
#loc135 = loc(fused[#loc79, #loc80, #loc81, #loc73])
#loc136 = loc(fused[#loc84, #loc85])
#loc137 = loc(fused[#loc88, #loc89])
#loc138 = loc(fused[#loc90, #loc91])
#loc139 = loc(fused[#loc93, #loc94])
#loc140 = loc(fused[#loc95, #loc96, #loc97, #loc89])
#loc141 = loc(fused[#loc102, #loc101])
