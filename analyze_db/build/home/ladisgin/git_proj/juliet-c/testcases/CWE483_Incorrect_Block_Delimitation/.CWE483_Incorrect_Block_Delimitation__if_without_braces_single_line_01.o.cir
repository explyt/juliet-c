!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE483_Incorrect_Block_Delimitation/CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc60)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"x == 0\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"x was 0\0A\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc63)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["y"] {alignment = 4 : i64} loc(#loc64)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %3 = cir.const #cir.int<3> : !s32i loc(#loc13)
    %4 = cir.binop(rem, %2, %3) : !s32i loc(#loc65)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc66)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc16)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc67)
    cir.br ^bb1 loc(#loc68)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    %7 = cir.const #cir.int<0> : !s32i loc(#loc21)
    %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc69)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc70)
  ^bb2:  // pred: ^bb1
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc5)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc22)
    cir.br ^bb3 loc(#loc19)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // pred: ^bb3
    %11 = cir.const #cir.int<1> : !s32i loc(#loc23)
    cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc71)
    cir.br ^bb5 loc(#loc72)
  ^bb5:  // pred: ^bb4
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc27)
    cir.brcond %13 ^bb6, ^bb7 loc(#loc73)
  ^bb6:  // pred: ^bb5
    %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc6)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc6)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc29)
    cir.br ^bb7 loc(#loc26)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc26)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc8)
  } loc(#loc62)
  cir.func no_proto @CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc75)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    cir.return loc(#loc31)
  } loc(#loc74)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc77)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["y"] {alignment = 4 : i64} loc(#loc78)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc39)
    %3 = cir.const #cir.int<3> : !s32i loc(#loc40)
    %4 = cir.binop(rem, %2, %3) : !s32i loc(#loc79)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc80)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc43)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    cir.br ^bb1 loc(#loc82)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc47)
    %7 = cir.const #cir.int<0> : !s32i loc(#loc48)
    %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc83)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc84)
  ^bb2:  // pred: ^bb1
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc50)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc52)
    cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    cir.br ^bb3 loc(#loc46)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc46)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc86)
  ^bb5:  // pred: ^bb4
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc56)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc56)
    cir.brcond %13 ^bb6, ^bb7 loc(#loc87)
  ^bb6:  // pred: ^bb5
    %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc58)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    cir.br ^bb7 loc(#loc55)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc55)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc35)
  } loc(#loc76)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE483_Incorrect_Block_Delimitation/CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":18:27)
#loc6 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":22:19)
#loc7 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":10:1)
#loc8 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":24:1)
#loc9 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":12:5)
#loc10 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":12:9)
#loc11 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":12:11)
#loc12 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":14:10)
#loc13 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":14:19)
#loc14 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":14:5)
#loc15 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":14:20)
#loc16 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":15:9)
#loc17 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":15:5)
#loc18 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":18:5)
#loc19 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":18:35)
#loc20 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":18:9)
#loc21 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":18:14)
#loc22 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":18:17)
#loc23 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":18:42)
#loc24 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":18:38)
#loc25 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":20:5)
#loc26 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":23:5)
#loc27 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":20:9)
#loc28 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":21:5)
#loc29 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":22:9)
#loc30 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":49:1)
#loc31 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":52:1)
#loc32 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":51:5)
#loc33 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":51:11)
#loc34 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":30:1)
#loc35 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":47:1)
#loc36 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":32:5)
#loc37 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":32:9)
#loc38 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":32:11)
#loc39 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":34:10)
#loc40 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":34:19)
#loc41 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":34:5)
#loc42 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":34:20)
#loc43 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":35:9)
#loc44 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":35:5)
#loc45 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":38:5)
#loc46 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":41:5)
#loc47 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":38:9)
#loc48 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":38:14)
#loc49 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":39:5)
#loc50 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":40:19)
#loc51 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":40:9)
#loc52 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":40:34)
#loc53 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":40:30)
#loc54 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":43:5)
#loc55 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":46:5)
#loc56 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":43:9)
#loc57 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":44:5)
#loc58 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":45:19)
#loc59 = loc("CWE483_Incorrect_Block_Delimitation__if_without_braces_single_line_01.c":45:9)
#loc60 = loc(fused[#loc1, #loc2])
#loc61 = loc(fused[#loc3, #loc4])
#loc62 = loc(fused[#loc7, #loc8])
#loc63 = loc(fused[#loc9, #loc10])
#loc64 = loc(fused[#loc9, #loc11])
#loc65 = loc(fused[#loc12, #loc13])
#loc66 = loc(fused[#loc14, #loc15])
#loc67 = loc(fused[#loc17, #loc16])
#loc68 = loc(fused[#loc18, #loc19])
#loc69 = loc(fused[#loc20, #loc21])
#loc70 = loc(fused[#loc22, #loc19])
#loc71 = loc(fused[#loc24, #loc23])
#loc72 = loc(fused[#loc25, #loc26])
#loc73 = loc(fused[#loc28, #loc26])
#loc74 = loc(fused[#loc30, #loc31])
#loc75 = loc(fused[#loc32, #loc33])
#loc76 = loc(fused[#loc34, #loc35])
#loc77 = loc(fused[#loc36, #loc37])
#loc78 = loc(fused[#loc36, #loc38])
#loc79 = loc(fused[#loc39, #loc40])
#loc80 = loc(fused[#loc41, #loc42])
#loc81 = loc(fused[#loc44, #loc43])
#loc82 = loc(fused[#loc45, #loc46])
#loc83 = loc(fused[#loc47, #loc48])
#loc84 = loc(fused[#loc49, #loc46])
#loc85 = loc(fused[#loc53, #loc52])
#loc86 = loc(fused[#loc54, #loc55])
#loc87 = loc(fused[#loc57, #loc55])
