!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":93:10)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":93:14)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":93:20)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":93:32)
#loc181 = loc(fused[#loc79, #loc80])
#loc182 = loc(fused[#loc81, #loc82])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc149)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc150)
  cir.func private @printIntLine(!s32i) loc(#loc151)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc152)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc154)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc14)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc155)
    cir.goto "source" loc(#loc156)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc18)
    %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc19)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc20)
    %5 = cir.binop(div, %3, %4) : !s32i loc(#loc157)
    %6 = cir.const #cir.int<2> : !s32i loc(#loc21)
    %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc157)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    cir.scope {
      %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc160)
      %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc161)
      %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc29)
      %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc30)
      %13 = cir.const #cir.int<4> : !u64i loc(#loc162)
      %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc163)
      %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc29)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc164)
      cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc165)
      cir.scope {
        %24 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc37)
        %25 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc38)
        %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc38)
        %27 = cir.cmp(eq, %24, %26) : !cir.ptr<!s32i>, !cir.bool loc(#loc167)
        cir.if %27 {
          %28 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc40)
          %29 = cir.const #cir.int<1> : !s32i loc(#loc41)
          %30 = cir.unary(minus, %29) : !s32i, !s32i loc(#loc42)
          cir.call @exit(%30) : (!s32i) -> () extra(#fn_attr) loc(#loc40)
        } loc(#loc168)
      } loc(#loc166)
      cir.scope {
        %24 = cir.const #cir.int<0> : !s32i loc(#loc45)
        %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc45)
        cir.store %25, %8 : !u64i, !cir.ptr<!u64i> loc(#loc170)
        cir.for : cond {
          %26 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc47)
          %27 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc48)
          %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc48)
          %29 = cir.cmp(lt, %26, %28) : !u64i, !cir.bool loc(#loc171)
          cir.condition(%29) loc(#loc49)
        } body {
          cir.scope {
            %26 = cir.const #cir.int<0> : !s32i loc(#loc51)
            %27 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc52)
            %28 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc53)
            %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !u64i), !cir.ptr<!s32i> loc(#loc54)
            cir.store %26, %29 : !s32i, !cir.ptr<!s32i> loc(#loc173)
          } loc(#loc172)
          cir.yield loc(#loc44)
        } step {
          %26 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc55)
          %27 = cir.unary(inc, %26) : !u64i, !u64i loc(#loc56)
          cir.store %27, %8 : !u64i, !cir.ptr<!u64i> loc(#loc174)
          cir.yield loc(#loc169)
        } loc(#loc169)
      } loc(#loc169)
      %17 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc57)
      %18 = cir.const #cir.int<0> : !s32i loc(#loc58)
      %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc59)
      %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc57)
      cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc60)
      %21 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc61)
      %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc62)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc62)
      cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc61)
    } loc(#loc159)
    cir.return loc(#loc10)
  } loc(#loc153)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc176)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc65)
    cir.return loc(#loc64)
  } loc(#loc175)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc177)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc178)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc179)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc76)
  cir.func @main(%arg0: !s32i loc(fused[#loc79, #loc80]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc81, #loc82])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc181)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc182)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc78)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc83)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc84)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc85)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc85)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc86)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc73)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    %8 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18_good : !cir.ptr<!cir.func<!void ()>> loc(#loc183)
    cir.call @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18_good() : () -> () loc(#loc88)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc74)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc75)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    %13 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc184)
    cir.call @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18_bad() : () -> () loc(#loc92)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc76)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc95)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc185)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc185)
    cir.return %17 : !s32i loc(#loc185)
  } loc(#loc180)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc187)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc101)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc102)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    cir.goto "source" loc(#loc189)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc106)
    %3 = cir.const #cir.int<20> : !s32i loc(#loc107)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    cir.scope {
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc192)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc193)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc115)
      %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc116)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc194)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc195)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc115)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc196)
      cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc197)
      cir.scope {
        %20 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc123)
        %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc124)
        %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc124)
        %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !cir.bool loc(#loc199)
        cir.if %23 {
          %24 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc126)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc127)
          %26 = cir.unary(minus, %25) : !s32i, !s32i loc(#loc128)
          cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc126)
        } loc(#loc200)
      } loc(#loc198)
      cir.scope {
        %20 = cir.const #cir.int<0> : !s32i loc(#loc131)
        %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc131)
        cir.store %21, %4 : !u64i, !cir.ptr<!u64i> loc(#loc202)
        cir.for : cond {
          %22 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc133)
          %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc134)
          %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc134)
          %25 = cir.cmp(lt, %22, %24) : !u64i, !cir.bool loc(#loc203)
          cir.condition(%25) loc(#loc135)
        } body {
          cir.scope {
            %22 = cir.const #cir.int<0> : !s32i loc(#loc137)
            %23 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc138)
            %24 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc139)
            %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !u64i), !cir.ptr<!s32i> loc(#loc140)
            cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc205)
          } loc(#loc204)
          cir.yield loc(#loc130)
        } step {
          %22 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc141)
          %23 = cir.unary(inc, %22) : !u64i, !u64i loc(#loc142)
          cir.store %23, %4 : !u64i, !cir.ptr<!u64i> loc(#loc206)
          cir.yield loc(#loc201)
        } loc(#loc201)
      } loc(#loc201)
      %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc143)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc144)
      %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc145)
      %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc143)
      cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc146)
      %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc147)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc148)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc148)
      cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc147)
    } loc(#loc191)
    cir.return loc(#loc98)
  } loc(#loc186)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":21:1)
#loc10 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":46:1)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":23:5)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":23:9)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":25:13)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":25:12)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":25:5)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":26:5)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":26:10)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":27:1)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":29:12)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":29:22)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":29:26)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":29:5)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":32:5)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":45:5)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":33:9)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":33:16)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":34:9)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":34:14)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":37:28)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":37:35)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":37:42)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":37:52)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":37:53)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":37:9)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":38:9)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":38:43)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":38:13)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":38:27)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":38:33)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":38:34)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":38:40)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":38:39)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":39:9)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":42:9)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":39:18)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":39:14)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":39:21)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":39:33)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":39:23)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":40:9)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":41:29)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":41:13)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":41:24)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":41:25)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":39:40)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":39:39)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":43:22)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":43:33)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":43:34)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":43:9)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":44:9)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":44:14)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":78:1)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":81:1)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":80:5)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":80:13)
#loc67 = loc("/usr/include/stdlib.h":575:1)
#loc68 = loc("/usr/include/stdlib.h":575:41)
#loc69 = loc("/usr/include/time.h":76:1)
#loc70 = loc("/usr/include/time.h":76:38)
#loc71 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc72 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":98:15)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":100:15)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":103:15)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":105:15)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":93:1)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":108:1)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":94:1)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":96:27)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":96:22)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":96:5)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":98:5)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":99:5)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":99:70)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":100:5)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":103:5)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":104:5)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":104:69)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":105:5)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":107:12)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":107:5)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":53:1)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":76:1)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":55:5)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":55:9)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":57:13)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":57:12)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":57:5)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":58:5)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":58:10)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":59:1)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":61:12)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":61:5)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":62:5)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":75:5)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":63:9)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":63:16)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":64:9)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":64:14)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":67:28)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":67:35)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":67:42)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":67:52)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":67:53)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":67:9)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":68:9)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":68:43)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":68:13)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":68:27)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":68:33)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":68:34)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":68:40)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":68:39)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":69:9)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":72:9)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":69:18)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":69:14)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":69:21)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":69:33)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":69:23)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":70:9)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":71:29)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":71:13)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":71:24)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":71:25)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":69:40)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":69:39)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":73:22)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":73:33)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":73:34)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":73:9)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":74:9)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_18.c":74:14)
#loc149 = loc(fused[#loc1, #loc2])
#loc150 = loc(fused[#loc3, #loc4])
#loc151 = loc(fused[#loc5, #loc6])
#loc152 = loc(fused[#loc7, #loc8])
#loc153 = loc(fused[#loc9, #loc10])
#loc154 = loc(fused[#loc11, #loc12])
#loc155 = loc(fused[#loc15, #loc13])
#loc156 = loc(fused[#loc16, #loc17])
#loc157 = loc(fused[#loc19, #loc20])
#loc158 = loc(fused[#loc22, #loc21])
#loc159 = loc(fused[#loc23, #loc24])
#loc160 = loc(fused[#loc25, #loc26])
#loc161 = loc(fused[#loc27, #loc28])
#loc162 = loc(fused[#loc31, #loc32])
#loc163 = loc(fused[#loc30, #loc32])
#loc164 = loc(fused[#loc29, #loc33])
#loc165 = loc(fused[#loc34, #loc33])
#loc166 = loc(fused[#loc35, #loc36])
#loc167 = loc(fused[#loc37, #loc38])
#loc168 = loc(fused[#loc39, #loc36])
#loc169 = loc(fused[#loc43, #loc44])
#loc170 = loc(fused[#loc46, #loc45])
#loc171 = loc(fused[#loc47, #loc48])
#loc172 = loc(fused[#loc50, #loc44])
#loc173 = loc(fused[#loc52, #loc51])
#loc174 = loc(fused[#loc56, #loc55])
#loc175 = loc(fused[#loc63, #loc64])
#loc176 = loc(fused[#loc65, #loc66])
#loc177 = loc(fused[#loc67, #loc68])
#loc178 = loc(fused[#loc69, #loc70])
#loc179 = loc(fused[#loc71, #loc72])
#loc180 = loc(fused[#loc77, #loc78])
#loc183 = loc(fused[#loc88, #loc89])
#loc184 = loc(fused[#loc92, #loc93])
#loc185 = loc(fused[#loc96, #loc95])
#loc186 = loc(fused[#loc97, #loc98])
#loc187 = loc(fused[#loc99, #loc100])
#loc188 = loc(fused[#loc103, #loc101])
#loc189 = loc(fused[#loc104, #loc105])
#loc190 = loc(fused[#loc108, #loc107])
#loc191 = loc(fused[#loc109, #loc110])
#loc192 = loc(fused[#loc111, #loc112])
#loc193 = loc(fused[#loc113, #loc114])
#loc194 = loc(fused[#loc117, #loc118])
#loc195 = loc(fused[#loc116, #loc118])
#loc196 = loc(fused[#loc115, #loc119])
#loc197 = loc(fused[#loc120, #loc119])
#loc198 = loc(fused[#loc121, #loc122])
#loc199 = loc(fused[#loc123, #loc124])
#loc200 = loc(fused[#loc125, #loc122])
#loc201 = loc(fused[#loc129, #loc130])
#loc202 = loc(fused[#loc132, #loc131])
#loc203 = loc(fused[#loc133, #loc134])
#loc204 = loc(fused[#loc136, #loc130])
#loc205 = loc(fused[#loc138, #loc137])
#loc206 = loc(fused[#loc142, #loc141])
