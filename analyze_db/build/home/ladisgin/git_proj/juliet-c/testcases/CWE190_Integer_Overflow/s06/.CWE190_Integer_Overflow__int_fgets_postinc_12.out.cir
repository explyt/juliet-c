!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":202:10)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":202:14)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":202:20)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":202:32)
#loc278 = loc(fused[#loc94, #loc95])
#loc279 = loc(fused[#loc96, #loc97])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s06/CWE190_Integer_Overflow__int_fgets_postinc_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc242)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc243)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc244)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc245)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc246)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private @printIntLine(!s32i) loc(#loc247)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc14)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_postinc_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc249)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc19)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc250)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc252)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc252)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc23)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc23)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc255)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc255)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc255)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc34)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc35)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc35)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc35)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc35)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc35)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc35)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc35)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc35)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc244)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc36)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc37)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc38)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc38)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc257)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc42)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc43)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc259)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc46)
            } loc(#loc258)
          } loc(#loc256)
        } loc(#loc254)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc47)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc260)
      } loc(#loc253)
    } loc(#loc251)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc262)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc262)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc51)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc51)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc265)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc60)
          %8 = cir.unary(inc, %7) : !s32i, !s32i loc(#loc61)
          cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc266)
          %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc265)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc62)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc63)
        } loc(#loc264)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc67)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc268)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc270)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
            %11 = cir.unary(inc, %10) : !s32i, !s32i loc(#loc74)
            cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc271)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc270)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc75)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc76)
          } else {
            %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc14)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc14)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc77)
          } loc(#loc269)
        } loc(#loc267)
      } loc(#loc263)
    } loc(#loc261)
    cir.return loc(#loc16)
  } loc(#loc248)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_postinc_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc273)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc80)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc274)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc82)
    cir.return loc(#loc79)
  } loc(#loc272)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc275)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc276)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc88)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc89)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc90)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc91)
  cir.func @main(%arg0: !s32i loc(fused[#loc94, #loc95]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc96, #loc97])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc278)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc279)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc93)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc98)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc98)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc99)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc100)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc100)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc101)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc88)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc88)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc102)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_fgets_postinc_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc280)
    cir.call @CWE190_Integer_Overflow__int_fgets_postinc_12_good() : () -> () loc(#loc103)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc89)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc89)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc105)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc90)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc90)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc106)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_fgets_postinc_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc281)
    cir.call @CWE190_Integer_Overflow__int_fgets_postinc_12_bad() : () -> () loc(#loc107)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc91)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc91)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc109)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc110)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc282)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc282)
    cir.return %17 : !s32i loc(#loc282)
  } loc(#loc277)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc284)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc116)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc285)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc287)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc287)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc120)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc120)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc290)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc290)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc290)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc131)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc132)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc132)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc132)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc132)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc132)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc132)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc132)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc132)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc244)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc133)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc134)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc135)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc135)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc292)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc139)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc140)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc294)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc143)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc143)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc144)
            } loc(#loc293)
          } loc(#loc291)
        } loc(#loc289)
      } else {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc296)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc296)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc296)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc151)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc152)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc152)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc152)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc152)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc152)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc152)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc152)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc152)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc244)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc153)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc154)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc155)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc155)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc298)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc159)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc160)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc300)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc163)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc163)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc164)
            } loc(#loc299)
          } loc(#loc297)
        } loc(#loc295)
      } loc(#loc288)
    } loc(#loc286)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc302)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc302)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc167)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc167)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc174)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc175)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc305)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc307)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc181)
            %11 = cir.unary(inc, %10) : !s32i, !s32i loc(#loc182)
            cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc308)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc180)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc307)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc183)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc184)
          } else {
            %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc185)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc185)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc186)
          } loc(#loc306)
        } loc(#loc304)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc189)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc190)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc310)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc312)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc196)
            %11 = cir.unary(inc, %10) : !s32i, !s32i loc(#loc197)
            cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc313)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc195)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc312)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc198)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc199)
          } else {
            %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc200)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc200)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc201)
          } loc(#loc311)
        } loc(#loc309)
      } loc(#loc303)
    } loc(#loc301)
    cir.return loc(#loc113)
  } loc(#loc283)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc315)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc206)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc316)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc318)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc318)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc210)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc210)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc215)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc320)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc217)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc321)
      } loc(#loc319)
    } loc(#loc317)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc323)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc323)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc221)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc221)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc326)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc230)
          %8 = cir.unary(inc, %7) : !s32i, !s32i loc(#loc231)
          cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc327)
          %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc229)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc326)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc232)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc233)
        } loc(#loc325)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc329)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc238)
          %8 = cir.unary(inc, %7) : !s32i, !s32i loc(#loc239)
          cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc330)
          %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc237)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc329)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc240)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc241)
        } loc(#loc328)
      } loc(#loc324)
    } loc(#loc322)
    cir.return loc(#loc203)
  } loc(#loc314)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s06/CWE190_Integer_Overflow__int_fgets_postinc_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":105:1)
#loc8 = loc("/usr/include/stdlib.h":106:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":41:27)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":70:23)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":24:1)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":73:1)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":26:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":26:9)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":28:12)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":28:5)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":29:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":49:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":29:8)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":29:33)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":30:5)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":44:5)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":46:5)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":31:9)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":43:9)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":32:13)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":32:49)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":34:13)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":42:13)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":34:23)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":34:36)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":34:53)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":34:17)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":34:63)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":35:13)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":38:13)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":40:13)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":37:29)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":37:24)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":37:17)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":37:40)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":41:17)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":48:16)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":48:9)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":50:5)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":72:5)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":50:8)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":50:33)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":51:5)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":58:5)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":60:5)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":52:9)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":57:9)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":55:13)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":55:26)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":54:17)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":54:13)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":56:26)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":56:13)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":62:9)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":71:9)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":62:13)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":62:20)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":63:9)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":67:9)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":69:9)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":65:13)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":65:26)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":64:17)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":64:13)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":66:26)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":66:13)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":70:13)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":187:1)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":191:1)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":189:5)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":189:13)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":190:5)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":190:13)
#loc84 = loc("/usr/include/stdlib.h":575:1)
#loc85 = loc("/usr/include/stdlib.h":575:41)
#loc86 = loc("/usr/include/time.h":76:1)
#loc87 = loc("/usr/include/time.h":76:38)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":207:15)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":209:15)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":212:15)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":214:15)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":202:1)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":217:1)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":203:1)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":205:27)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":205:22)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":205:5)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":207:5)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":208:5)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":208:56)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":209:5)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":212:5)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":213:5)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":213:55)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":214:5)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":216:12)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":216:5)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":82:1)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":147:1)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":84:5)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":84:9)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":86:12)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":86:5)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":87:5)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":118:5)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":87:8)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":87:33)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":88:5)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":102:5)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":104:5)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":89:9)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":101:9)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":90:13)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":90:49)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":92:13)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":100:13)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":92:23)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":92:36)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":92:53)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":92:17)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":92:63)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":93:13)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":96:13)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":98:13)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":95:29)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":95:24)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":95:17)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":95:40)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":99:27)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":99:17)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":105:9)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":117:9)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":106:13)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":106:49)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":108:13)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":116:13)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":108:23)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":108:36)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":108:53)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":108:17)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":108:63)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":109:13)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":112:13)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":114:13)
#loc159 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":111:29)
#loc160 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":111:24)
#loc161 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":111:17)
#loc162 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":111:40)
#loc163 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":115:27)
#loc164 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":115:17)
#loc165 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":119:5)
#loc166 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":146:5)
#loc167 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":119:8)
#loc168 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":119:33)
#loc169 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":120:5)
#loc170 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":132:5)
#loc171 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":134:5)
#loc172 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":122:9)
#loc173 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":131:9)
#loc174 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":122:13)
#loc175 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":122:20)
#loc176 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":123:9)
#loc177 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":127:9)
#loc178 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":129:9)
#loc179 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":125:13)
#loc180 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":125:26)
#loc181 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":124:17)
#loc182 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":124:13)
#loc183 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":126:26)
#loc184 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":126:13)
#loc185 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":130:23)
#loc186 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":130:13)
#loc187 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":136:9)
#loc188 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":145:9)
#loc189 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":136:13)
#loc190 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":136:20)
#loc191 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":137:9)
#loc192 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":141:9)
#loc193 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":143:9)
#loc194 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":139:13)
#loc195 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":139:26)
#loc196 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":138:17)
#loc197 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":138:13)
#loc198 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":140:26)
#loc199 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":140:13)
#loc200 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":144:23)
#loc201 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":144:13)
#loc202 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":152:1)
#loc203 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":185:1)
#loc204 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":154:5)
#loc205 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":154:9)
#loc206 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":156:12)
#loc207 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":156:5)
#loc208 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":157:5)
#loc209 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":166:5)
#loc210 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":157:8)
#loc211 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":157:33)
#loc212 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":158:5)
#loc213 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":161:5)
#loc214 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":163:5)
#loc215 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":160:16)
#loc216 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":160:9)
#loc217 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":165:16)
#loc218 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":165:9)
#loc219 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":167:5)
#loc220 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":184:5)
#loc221 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":167:8)
#loc222 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":167:33)
#loc223 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":168:5)
#loc224 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":175:5)
#loc225 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":177:5)
#loc226 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":169:9)
#loc227 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":174:9)
#loc228 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":172:13)
#loc229 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":172:26)
#loc230 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":171:17)
#loc231 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":171:13)
#loc232 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":173:26)
#loc233 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":173:13)
#loc234 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":178:9)
#loc235 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":183:9)
#loc236 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":181:13)
#loc237 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":181:26)
#loc238 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":180:17)
#loc239 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":180:13)
#loc240 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":182:26)
#loc241 = loc("CWE190_Integer_Overflow__int_fgets_postinc_12.c":182:13)
#loc242 = loc(fused[#loc1, #loc2])
#loc243 = loc(fused[#loc3, #loc4])
#loc244 = loc(fused[#loc5, #loc6])
#loc245 = loc(fused[#loc7, #loc8])
#loc246 = loc(fused[#loc9, #loc10])
#loc247 = loc(fused[#loc12, #loc13])
#loc248 = loc(fused[#loc15, #loc16])
#loc249 = loc(fused[#loc17, #loc18])
#loc250 = loc(fused[#loc20, #loc19])
#loc251 = loc(fused[#loc21, #loc22])
#loc252 = loc(fused[#loc23, #loc24])
#loc253 = loc(fused[#loc25, #loc26, #loc27, #loc22])
#loc254 = loc(fused[#loc28, #loc29])
#loc255 = loc(fused[#loc30, #loc31])
#loc256 = loc(fused[#loc32, #loc33])
#loc257 = loc(fused[#loc37, #loc38])
#loc258 = loc(fused[#loc39, #loc40, #loc41, #loc33])
#loc259 = loc(fused[#loc44, #loc45])
#loc260 = loc(fused[#loc48, #loc47])
#loc261 = loc(fused[#loc49, #loc50])
#loc262 = loc(fused[#loc51, #loc52])
#loc263 = loc(fused[#loc53, #loc54, #loc55, #loc50])
#loc264 = loc(fused[#loc56, #loc57])
#loc265 = loc(fused[#loc58, #loc59])
#loc266 = loc(fused[#loc61, #loc60])
#loc267 = loc(fused[#loc64, #loc65])
#loc268 = loc(fused[#loc66, #loc67])
#loc269 = loc(fused[#loc68, #loc69, #loc70, #loc65])
#loc270 = loc(fused[#loc71, #loc72])
#loc271 = loc(fused[#loc74, #loc73])
#loc272 = loc(fused[#loc78, #loc79])
#loc273 = loc(fused[#loc80, #loc81])
#loc274 = loc(fused[#loc82, #loc83])
#loc275 = loc(fused[#loc84, #loc85])
#loc276 = loc(fused[#loc86, #loc87])
#loc277 = loc(fused[#loc92, #loc93])
#loc280 = loc(fused[#loc103, #loc104])
#loc281 = loc(fused[#loc107, #loc108])
#loc282 = loc(fused[#loc111, #loc110])
#loc283 = loc(fused[#loc112, #loc113])
#loc284 = loc(fused[#loc114, #loc115])
#loc285 = loc(fused[#loc117, #loc116])
#loc286 = loc(fused[#loc118, #loc119])
#loc287 = loc(fused[#loc120, #loc121])
#loc288 = loc(fused[#loc122, #loc123, #loc124, #loc119])
#loc289 = loc(fused[#loc125, #loc126])
#loc290 = loc(fused[#loc127, #loc128])
#loc291 = loc(fused[#loc129, #loc130])
#loc292 = loc(fused[#loc134, #loc135])
#loc293 = loc(fused[#loc136, #loc137, #loc138, #loc130])
#loc294 = loc(fused[#loc141, #loc142])
#loc295 = loc(fused[#loc145, #loc146])
#loc296 = loc(fused[#loc147, #loc148])
#loc297 = loc(fused[#loc149, #loc150])
#loc298 = loc(fused[#loc154, #loc155])
#loc299 = loc(fused[#loc156, #loc157, #loc158, #loc150])
#loc300 = loc(fused[#loc161, #loc162])
#loc301 = loc(fused[#loc165, #loc166])
#loc302 = loc(fused[#loc167, #loc168])
#loc303 = loc(fused[#loc169, #loc170, #loc171, #loc166])
#loc304 = loc(fused[#loc172, #loc173])
#loc305 = loc(fused[#loc174, #loc175])
#loc306 = loc(fused[#loc176, #loc177, #loc178, #loc173])
#loc307 = loc(fused[#loc179, #loc180])
#loc308 = loc(fused[#loc182, #loc181])
#loc309 = loc(fused[#loc187, #loc188])
#loc310 = loc(fused[#loc189, #loc190])
#loc311 = loc(fused[#loc191, #loc192, #loc193, #loc188])
#loc312 = loc(fused[#loc194, #loc195])
#loc313 = loc(fused[#loc197, #loc196])
#loc314 = loc(fused[#loc202, #loc203])
#loc315 = loc(fused[#loc204, #loc205])
#loc316 = loc(fused[#loc207, #loc206])
#loc317 = loc(fused[#loc208, #loc209])
#loc318 = loc(fused[#loc210, #loc211])
#loc319 = loc(fused[#loc212, #loc213, #loc214, #loc209])
#loc320 = loc(fused[#loc216, #loc215])
#loc321 = loc(fused[#loc218, #loc217])
#loc322 = loc(fused[#loc219, #loc220])
#loc323 = loc(fused[#loc221, #loc222])
#loc324 = loc(fused[#loc223, #loc224, #loc225, #loc220])
#loc325 = loc(fused[#loc226, #loc227])
#loc326 = loc(fused[#loc228, #loc229])
#loc327 = loc(fused[#loc231, #loc230])
#loc328 = loc(fused[#loc234, #loc235])
#loc329 = loc(fused[#loc236, #loc237])
#loc330 = loc(fused[#loc239, #loc238])
