!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_multiply_13.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  constant external @GLOBAL_CONST_FIVE : !s32i {alignment = 4 : i64} loc(#loc211)
  cir.func private  @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc212)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc213)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc7)
  cir.func private  @printIntLine(!s32i) loc(#loc214)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fscanf_multiply_13_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc216)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc14)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc217)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc211)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc18)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc19)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc219)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc20)
      cir.if %6 {
        %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc22)
        %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc213)
        %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc23)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc7)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc7)
        %12 = cir.call @__isoc99_fscanf(%9, %11, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc22)
      } loc(#loc220)
    } loc(#loc218)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc211)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc26)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc27)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc222)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc28)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc33)
          %9 = cir.cmp(gt, %7, %8) : !s32i, !s32i loc(#loc225)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc34)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc227)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc38)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc37)
            %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc38)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc227)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc39)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc40)
          } loc(#loc226)
        } loc(#loc224)
      } loc(#loc223)
    } loc(#loc221)
    cir.return loc(#loc11)
  } loc(#loc215)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fscanf_multiply_13_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc229)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc230)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc231)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc232)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc49)
    cir.return loc(#loc42)
  } loc(#loc228)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc233)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc53)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc54)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc235)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc59)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc236)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc211)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc63)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc64)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc238)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc65)
      cir.if %6 {
        %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc67)
        %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc213)
        %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc68)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc69)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc69)
        %12 = cir.call @__isoc99_fscanf(%9, %11, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc67)
      } loc(#loc239)
    } loc(#loc237)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc211)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc72)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc73)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !s32i loc(#loc241)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc74)
      cir.if %6 {
        %7 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc53)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc53)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc78)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc81)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc82)
          %9 = cir.cmp(gt, %7, %8) : !s32i, !s32i loc(#loc244)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc83)
          cir.if %10 {
            cir.scope {
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc87)
              %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc88)
              %13 = cir.const #cir.int<2> : !s32i loc(#loc89)
              %14 = cir.binop(div, %12, %13) : !s32i loc(#loc247)
              %15 = cir.cmp(lt, %11, %14) : !s32i, !s32i loc(#loc248)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc91)
              cir.if %16 {
                %17 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc250)
                %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc97)
                %19 = cir.const #cir.int<2> : !s32i loc(#loc96)
                %20 = cir.binop(mul, %18, %19) nsw : !s32i loc(#loc97)
                cir.store %20, %17 : !s32i, !cir.ptr<!s32i> loc(#loc250)
                %21 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc98)
                cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc99)
              } else {
                %17 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc54)
                %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc54)
                cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc100)
              } loc(#loc249)
            } loc(#loc246)
          } loc(#loc245)
        } loc(#loc243)
      } loc(#loc242)
    } loc(#loc240)
    cir.return loc(#loc56)
  } loc(#loc234)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc252)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc105)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc253)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc211)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc109)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc110)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc255)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc111)
      cir.if %6 {
        %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc113)
        %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc213)
        %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc114)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc115)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc115)
        %12 = cir.call @__isoc99_fscanf(%9, %11, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc113)
      } loc(#loc256)
    } loc(#loc254)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc211)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc118)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc119)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc258)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc120)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc124)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc125)
          %9 = cir.cmp(gt, %7, %8) : !s32i, !s32i loc(#loc261)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc126)
          cir.if %10 {
            cir.scope {
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc130)
              %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc131)
              %13 = cir.const #cir.int<2> : !s32i loc(#loc132)
              %14 = cir.binop(div, %12, %13) : !s32i loc(#loc264)
              %15 = cir.cmp(lt, %11, %14) : !s32i, !s32i loc(#loc265)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc134)
              cir.if %16 {
                %17 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc267)
                %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc140)
                %19 = cir.const #cir.int<2> : !s32i loc(#loc139)
                %20 = cir.binop(mul, %18, %19) nsw : !s32i loc(#loc140)
                cir.store %20, %17 : !s32i, !cir.ptr<!s32i> loc(#loc267)
                %21 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc141)
                cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc142)
              } else {
                %17 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc143)
                %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc143)
                cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc144)
              } loc(#loc266)
            } loc(#loc263)
          } loc(#loc262)
        } loc(#loc260)
      } loc(#loc259)
    } loc(#loc257)
    cir.return loc(#loc102)
  } loc(#loc251)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc269)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc149)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc270)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc211)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc153)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc154)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !s32i loc(#loc272)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc155)
      cir.if %6 {
        %7 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc159)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc159)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc160)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc161)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc274)
      } loc(#loc273)
    } loc(#loc271)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc211)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc165)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc166)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc276)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc167)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc171)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc172)
          %9 = cir.cmp(gt, %7, %8) : !s32i, !s32i loc(#loc279)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc173)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc281)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc177)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc176)
            %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc177)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc281)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc178)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc179)
          } loc(#loc280)
        } loc(#loc278)
      } loc(#loc277)
    } loc(#loc275)
    cir.return loc(#loc146)
  } loc(#loc268)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc283)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc184)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc284)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc211)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc188)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc189)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc286)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc190)
      cir.if %6 {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc192)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc288)
      } loc(#loc287)
    } loc(#loc285)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc211)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc196)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc197)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc290)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc198)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc202)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc203)
          %9 = cir.cmp(gt, %7, %8) : !s32i, !s32i loc(#loc293)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc204)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc295)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc208)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc207)
            %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc208)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc295)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc209)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc210)
          } loc(#loc294)
        } loc(#loc292)
      } loc(#loc291)
    } loc(#loc289)
    cir.return loc(#loc181)
  } loc(#loc282)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_multiply_13.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":111:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":111:18)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":30:23)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":22:1)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":41:1)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":24:5)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":24:9)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":26:12)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":26:5)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":27:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":31:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":27:8)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":27:27)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":27:25)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":28:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":30:9)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":30:16)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":32:5)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":40:5)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":32:8)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":32:27)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":32:25)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":33:5)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":34:9)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":39:9)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":34:12)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":34:19)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":34:17)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":35:9)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":37:13)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":37:33)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":37:26)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":38:26)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":38:13)
#loc41 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":159:1)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":165:1)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":161:5)
#loc44 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":161:14)
#loc45 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":162:5)
#loc46 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":162:14)
#loc47 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":163:5)
#loc48 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":163:14)
#loc49 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":164:5)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":164:14)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":61:19)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":75:27)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":48:1)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":79:1)
#loc57 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":50:5)
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":50:9)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":52:12)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":52:5)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":53:5)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":57:5)
#loc63 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":53:8)
#loc64 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":53:27)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":53:25)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":54:5)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":56:9)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":56:16)
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":56:23)
#loc70 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":58:5)
#loc71 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":78:5)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":58:8)
#loc73 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":58:27)
#loc74 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":58:25)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":59:5)
#loc76 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":62:5)
#loc77 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":64:5)
#loc78 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":61:9)
#loc79 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":65:9)
#loc80 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":77:9)
#loc81 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":65:12)
#loc82 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":65:19)
#loc83 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":65:17)
#loc84 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":66:9)
#loc85 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":68:13)
#loc86 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":76:13)
#loc87 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":68:17)
#loc88 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":68:25)
#loc89 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":68:33)
#loc90 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":68:34)
#loc91 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":68:22)
#loc92 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":69:13)
#loc93 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":72:13)
#loc94 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":74:13)
#loc95 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":70:17)
#loc96 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":70:37)
#loc97 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":70:30)
#loc98 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":71:30)
#loc99 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":71:17)
#loc100 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":75:17)
#loc101 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":82:1)
#loc102 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":108:1)
#loc103 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":84:5)
#loc104 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":84:9)
#loc105 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":86:12)
#loc106 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":86:5)
#loc107 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":87:5)
#loc108 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":91:5)
#loc109 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":87:8)
#loc110 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":87:27)
#loc111 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":87:25)
#loc112 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":88:5)
#loc113 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":90:9)
#loc114 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":90:16)
#loc115 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":90:23)
#loc116 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":92:5)
#loc117 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":107:5)
#loc118 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":92:8)
#loc119 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":92:27)
#loc120 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":92:25)
#loc121 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":93:5)
#loc122 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":94:9)
#loc123 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":106:9)
#loc124 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":94:12)
#loc125 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":94:19)
#loc126 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":94:17)
#loc127 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":95:9)
#loc128 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":97:13)
#loc129 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":105:13)
#loc130 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":97:17)
#loc131 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":97:25)
#loc132 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":97:33)
#loc133 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":97:34)
#loc134 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":97:22)
#loc135 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":98:13)
#loc136 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":101:13)
#loc137 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":103:13)
#loc138 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":99:17)
#loc139 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":99:37)
#loc140 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":99:30)
#loc141 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":100:30)
#loc142 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":100:17)
#loc143 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":104:27)
#loc144 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":104:17)
#loc145 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":111:1)
#loc146 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":135:1)
#loc147 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":113:5)
#loc148 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":113:9)
#loc149 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":115:12)
#loc150 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":115:5)
#loc151 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":116:5)
#loc152 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":125:5)
#loc153 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":116:8)
#loc154 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":116:27)
#loc155 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":116:25)
#loc156 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":117:5)
#loc157 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":120:5)
#loc158 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":122:5)
#loc159 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":119:19)
#loc160 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":119:9)
#loc161 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":124:16)
#loc162 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":124:9)
#loc163 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":126:5)
#loc164 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":134:5)
#loc165 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":126:8)
#loc166 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":126:27)
#loc167 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":126:25)
#loc168 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":127:5)
#loc169 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":128:9)
#loc170 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":133:9)
#loc171 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":128:12)
#loc172 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":128:19)
#loc173 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":128:17)
#loc174 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":129:9)
#loc175 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":131:13)
#loc176 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":131:33)
#loc177 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":131:26)
#loc178 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":132:26)
#loc179 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":132:13)
#loc180 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":138:1)
#loc181 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":157:1)
#loc182 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":140:5)
#loc183 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":140:9)
#loc184 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":142:12)
#loc185 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":142:5)
#loc186 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":143:5)
#loc187 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":147:5)
#loc188 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":143:8)
#loc189 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":143:27)
#loc190 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":143:25)
#loc191 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":144:5)
#loc192 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":146:16)
#loc193 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":146:9)
#loc194 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":148:5)
#loc195 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":156:5)
#loc196 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":148:8)
#loc197 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":148:27)
#loc198 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":148:25)
#loc199 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":149:5)
#loc200 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":150:9)
#loc201 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":155:9)
#loc202 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":150:12)
#loc203 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":150:19)
#loc204 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":150:17)
#loc205 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":151:9)
#loc206 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":153:13)
#loc207 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":153:33)
#loc208 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":153:26)
#loc209 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":154:26)
#loc210 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_13.c":154:13)
#loc211 = loc(fused[#loc1, #loc2])
#loc212 = loc(fused[#loc3, #loc4])
#loc213 = loc(fused[#loc5, #loc6])
#loc214 = loc(fused[#loc8, #loc9])
#loc215 = loc(fused[#loc10, #loc11])
#loc216 = loc(fused[#loc12, #loc13])
#loc217 = loc(fused[#loc15, #loc14])
#loc218 = loc(fused[#loc16, #loc17])
#loc219 = loc(fused[#loc18, #loc19])
#loc220 = loc(fused[#loc21, #loc17])
#loc221 = loc(fused[#loc24, #loc25])
#loc222 = loc(fused[#loc26, #loc27])
#loc223 = loc(fused[#loc29, #loc25])
#loc224 = loc(fused[#loc30, #loc31])
#loc225 = loc(fused[#loc32, #loc33])
#loc226 = loc(fused[#loc35, #loc31])
#loc227 = loc(fused[#loc36, #loc37])
#loc228 = loc(fused[#loc41, #loc42])
#loc229 = loc(fused[#loc43, #loc44])
#loc230 = loc(fused[#loc45, #loc46])
#loc231 = loc(fused[#loc47, #loc48])
#loc232 = loc(fused[#loc49, #loc50])
#loc233 = loc(fused[#loc51, #loc52])
#loc234 = loc(fused[#loc55, #loc56])
#loc235 = loc(fused[#loc57, #loc58])
#loc236 = loc(fused[#loc60, #loc59])
#loc237 = loc(fused[#loc61, #loc62])
#loc238 = loc(fused[#loc63, #loc64])
#loc239 = loc(fused[#loc66, #loc62])
#loc240 = loc(fused[#loc70, #loc71])
#loc241 = loc(fused[#loc72, #loc73])
#loc242 = loc(fused[#loc75, #loc76, #loc77, #loc71])
#loc243 = loc(fused[#loc79, #loc80])
#loc244 = loc(fused[#loc81, #loc82])
#loc245 = loc(fused[#loc84, #loc80])
#loc246 = loc(fused[#loc85, #loc86])
#loc247 = loc(fused[#loc88, #loc89])
#loc248 = loc(fused[#loc87, #loc90])
#loc249 = loc(fused[#loc92, #loc93, #loc94, #loc86])
#loc250 = loc(fused[#loc95, #loc96])
#loc251 = loc(fused[#loc101, #loc102])
#loc252 = loc(fused[#loc103, #loc104])
#loc253 = loc(fused[#loc106, #loc105])
#loc254 = loc(fused[#loc107, #loc108])
#loc255 = loc(fused[#loc109, #loc110])
#loc256 = loc(fused[#loc112, #loc108])
#loc257 = loc(fused[#loc116, #loc117])
#loc258 = loc(fused[#loc118, #loc119])
#loc259 = loc(fused[#loc121, #loc117])
#loc260 = loc(fused[#loc122, #loc123])
#loc261 = loc(fused[#loc124, #loc125])
#loc262 = loc(fused[#loc127, #loc123])
#loc263 = loc(fused[#loc128, #loc129])
#loc264 = loc(fused[#loc131, #loc132])
#loc265 = loc(fused[#loc130, #loc133])
#loc266 = loc(fused[#loc135, #loc136, #loc137, #loc129])
#loc267 = loc(fused[#loc138, #loc139])
#loc268 = loc(fused[#loc145, #loc146])
#loc269 = loc(fused[#loc147, #loc148])
#loc270 = loc(fused[#loc150, #loc149])
#loc271 = loc(fused[#loc151, #loc152])
#loc272 = loc(fused[#loc153, #loc154])
#loc273 = loc(fused[#loc156, #loc157, #loc158, #loc152])
#loc274 = loc(fused[#loc162, #loc161])
#loc275 = loc(fused[#loc163, #loc164])
#loc276 = loc(fused[#loc165, #loc166])
#loc277 = loc(fused[#loc168, #loc164])
#loc278 = loc(fused[#loc169, #loc170])
#loc279 = loc(fused[#loc171, #loc172])
#loc280 = loc(fused[#loc174, #loc170])
#loc281 = loc(fused[#loc175, #loc176])
#loc282 = loc(fused[#loc180, #loc181])
#loc283 = loc(fused[#loc182, #loc183])
#loc284 = loc(fused[#loc185, #loc184])
#loc285 = loc(fused[#loc186, #loc187])
#loc286 = loc(fused[#loc188, #loc189])
#loc287 = loc(fused[#loc191, #loc187])
#loc288 = loc(fused[#loc193, #loc192])
#loc289 = loc(fused[#loc194, #loc195])
#loc290 = loc(fused[#loc196, #loc197])
#loc291 = loc(fused[#loc199, #loc195])
#loc292 = loc(fused[#loc200, #loc201])
#loc293 = loc(fused[#loc202, #loc203])
#loc294 = loc(fused[#loc205, #loc201])
#loc295 = loc(fused[#loc206, #loc207])
