!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc208)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc209)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc210)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello\00" : !cir.array<!s8i x 6>> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_for_loop_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc212)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc213)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc215)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc215)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc17)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc17)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc22)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc22)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc22)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc22)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc22)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc22)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc22)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc22)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc22)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc22)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc22)
          cir.yield %24 : !u32i loc(#loc22)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc22)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc22)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc22)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc22)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc22)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc22)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc22)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc22)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc22)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc22)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc22)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc22)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc22)
          cir.yield %28 : !u32i loc(#loc22)
        }) : (!cir.bool) -> !u32i loc(#loc22)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc22)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc217)
      } else {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc24)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc218)
      } loc(#loc216)
    } loc(#loc214)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc220)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc220)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc28)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc28)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc223)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc36)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc36)
          cir.store %9, %7 : !u64i, !cir.ptr<!u64i> loc(#loc223)
          cir.scope {
            %10 = cir.const #cir.int<0> : !s32i loc(#loc39)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc39)
            cir.store %11, %7 : !u64i, !cir.ptr<!u64i> loc(#loc225)
            cir.for : cond {
              %12 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc41)
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc42)
              %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc42)
              %15 = cir.cmp(lt, %12, %14) : !u64i, !cir.bool loc(#loc226)
              cir.condition(%15) loc(#loc43)
            } body {
              cir.scope {
                %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc7)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc7)
                cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc45)
              } loc(#loc227)
              cir.yield loc(#loc38)
            } step {
              %12 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc46)
              %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc47)
              cir.store %13, %7 : !u64i, !cir.ptr<!u64i> loc(#loc228)
              cir.yield loc(#loc224)
            } loc(#loc224)
          } loc(#loc224)
        } loc(#loc222)
      } else {
        cir.scope {
          %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc230)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc51)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc51)
          cir.store %9, %7 : !u64i, !cir.ptr<!u64i> loc(#loc230)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc54)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc55)
            %12 = cir.cmp(gt, %10, %11) : !s32i, !cir.bool loc(#loc232)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc57)
              %15 = cir.const #cir.int<20> : !s32i loc(#loc58)
              %16 = cir.cmp(le, %14, %15) : !s32i, !cir.bool loc(#loc233)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc56)
                cir.yield %18 : !cir.bool loc(#loc56)
              }, false {
                %18 = cir.const #false loc(#loc56)
                cir.yield %18 : !cir.bool loc(#loc56)
              }) : (!cir.bool) -> !cir.bool loc(#loc56)
              cir.yield %17 : !cir.bool loc(#loc56)
            }, false {
              %14 = cir.const #false loc(#loc56)
              cir.yield %14 : !cir.bool loc(#loc56)
            }) : (!cir.bool) -> !cir.bool loc(#loc56)
            cir.if %13 {
              cir.scope {
                %14 = cir.const #cir.int<0> : !s32i loc(#loc62)
                %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc62)
                cir.store %15, %7 : !u64i, !cir.ptr<!u64i> loc(#loc236)
                cir.for : cond {
                  %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc64)
                  %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
                  %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc65)
                  %19 = cir.cmp(lt, %16, %18) : !u64i, !cir.bool loc(#loc237)
                  cir.condition(%19) loc(#loc66)
                } body {
                  cir.scope {
                    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc68)
                    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc68)
                    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc69)
                  } loc(#loc238)
                  cir.yield loc(#loc61)
                } step {
                  %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc70)
                  %17 = cir.unary(inc, %16) : !u64i, !u64i loc(#loc71)
                  cir.store %17, %7 : !u64i, !cir.ptr<!u64i> loc(#loc239)
                  cir.yield loc(#loc235)
                } loc(#loc235)
              } loc(#loc235)
            } loc(#loc234)
          } loc(#loc231)
        } loc(#loc229)
      } loc(#loc221)
    } loc(#loc219)
    cir.return loc(#loc9)
  } loc(#loc211)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_for_loop_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc241)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc74)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc242)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc76)
    cir.return loc(#loc73)
  } loc(#loc240)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc244)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc83)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc245)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc247)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc247)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc87)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc87)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc92)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc92)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc92)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc92)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc92)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc92)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc92)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc92)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc92)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc92)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc92)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc92)
          cir.yield %24 : !u32i loc(#loc92)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc92)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc92)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc92)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc92)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc92)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc92)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc92)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc92)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc92)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc92)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc92)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc92)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc92)
          cir.yield %28 : !u32i loc(#loc92)
        }) : (!cir.bool) -> !u32i loc(#loc92)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc92)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc249)
      } else {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc94)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc94)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc94)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc94)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc94)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc94)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc94)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc94)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc94)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc94)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc94)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc94)
          cir.yield %24 : !u32i loc(#loc94)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc94)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc94)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc94)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc94)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc94)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc94)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc94)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc94)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc94)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc94)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc94)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc94)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc94)
          cir.yield %28 : !u32i loc(#loc94)
        }) : (!cir.bool) -> !u32i loc(#loc94)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc94)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc250)
      } loc(#loc248)
    } loc(#loc246)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc252)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc252)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc98)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc98)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc255)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc106)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc106)
          cir.store %9, %7 : !u64i, !cir.ptr<!u64i> loc(#loc255)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc109)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc110)
            %12 = cir.cmp(gt, %10, %11) : !s32i, !cir.bool loc(#loc257)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc112)
              %15 = cir.const #cir.int<20> : !s32i loc(#loc113)
              %16 = cir.cmp(le, %14, %15) : !s32i, !cir.bool loc(#loc258)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc111)
                cir.yield %18 : !cir.bool loc(#loc111)
              }, false {
                %18 = cir.const #false loc(#loc111)
                cir.yield %18 : !cir.bool loc(#loc111)
              }) : (!cir.bool) -> !cir.bool loc(#loc111)
              cir.yield %17 : !cir.bool loc(#loc111)
            }, false {
              %14 = cir.const #false loc(#loc111)
              cir.yield %14 : !cir.bool loc(#loc111)
            }) : (!cir.bool) -> !cir.bool loc(#loc111)
            cir.if %13 {
              cir.scope {
                %14 = cir.const #cir.int<0> : !s32i loc(#loc117)
                %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc117)
                cir.store %15, %7 : !u64i, !cir.ptr<!u64i> loc(#loc261)
                cir.for : cond {
                  %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc119)
                  %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc120)
                  %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc120)
                  %19 = cir.cmp(lt, %16, %18) : !u64i, !cir.bool loc(#loc262)
                  cir.condition(%19) loc(#loc121)
                } body {
                  cir.scope {
                    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc123)
                    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc123)
                    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc124)
                  } loc(#loc263)
                  cir.yield loc(#loc116)
                } step {
                  %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc125)
                  %17 = cir.unary(inc, %16) : !u64i, !u64i loc(#loc126)
                  cir.store %17, %7 : !u64i, !cir.ptr<!u64i> loc(#loc264)
                  cir.yield loc(#loc260)
                } loc(#loc260)
              } loc(#loc260)
            } loc(#loc259)
          } loc(#loc256)
        } loc(#loc254)
      } else {
        cir.scope {
          %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc266)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc130)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc130)
          cir.store %9, %7 : !u64i, !cir.ptr<!u64i> loc(#loc266)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc133)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc134)
            %12 = cir.cmp(gt, %10, %11) : !s32i, !cir.bool loc(#loc268)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc136)
              %15 = cir.const #cir.int<20> : !s32i loc(#loc137)
              %16 = cir.cmp(le, %14, %15) : !s32i, !cir.bool loc(#loc269)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc135)
                cir.yield %18 : !cir.bool loc(#loc135)
              }, false {
                %18 = cir.const #false loc(#loc135)
                cir.yield %18 : !cir.bool loc(#loc135)
              }) : (!cir.bool) -> !cir.bool loc(#loc135)
              cir.yield %17 : !cir.bool loc(#loc135)
            }, false {
              %14 = cir.const #false loc(#loc135)
              cir.yield %14 : !cir.bool loc(#loc135)
            }) : (!cir.bool) -> !cir.bool loc(#loc135)
            cir.if %13 {
              cir.scope {
                %14 = cir.const #cir.int<0> : !s32i loc(#loc141)
                %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc141)
                cir.store %15, %7 : !u64i, !cir.ptr<!u64i> loc(#loc272)
                cir.for : cond {
                  %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc143)
                  %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc144)
                  %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc144)
                  %19 = cir.cmp(lt, %16, %18) : !u64i, !cir.bool loc(#loc273)
                  cir.condition(%19) loc(#loc145)
                } body {
                  cir.scope {
                    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc147)
                    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc147)
                    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc148)
                  } loc(#loc274)
                  cir.yield loc(#loc140)
                } step {
                  %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc149)
                  %17 = cir.unary(inc, %16) : !u64i, !u64i loc(#loc150)
                  cir.store %17, %7 : !u64i, !cir.ptr<!u64i> loc(#loc275)
                  cir.yield loc(#loc271)
                } loc(#loc271)
              } loc(#loc271)
            } loc(#loc270)
          } loc(#loc267)
        } loc(#loc265)
      } loc(#loc253)
    } loc(#loc251)
    cir.return loc(#loc79)
  } loc(#loc243)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc277)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc155)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc156)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc278)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc280)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc280)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc160)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc160)
      cir.if %6 {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc165)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc282)
      } else {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc167)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc283)
      } loc(#loc281)
    } loc(#loc279)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc285)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc285)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc171)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc171)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc288)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc179)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc179)
          cir.store %9, %7 : !u64i, !cir.ptr<!u64i> loc(#loc288)
          cir.scope {
            %10 = cir.const #cir.int<0> : !s32i loc(#loc182)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc182)
            cir.store %11, %7 : !u64i, !cir.ptr<!u64i> loc(#loc290)
            cir.for : cond {
              %12 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc184)
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc185)
              %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc185)
              %15 = cir.cmp(lt, %12, %14) : !u64i, !cir.bool loc(#loc291)
              cir.condition(%15) loc(#loc186)
            } body {
              cir.scope {
                %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc188)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc188)
                cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc189)
              } loc(#loc292)
              cir.yield loc(#loc181)
            } step {
              %12 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc190)
              %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc191)
              cir.store %13, %7 : !u64i, !cir.ptr<!u64i> loc(#loc293)
              cir.yield loc(#loc289)
            } loc(#loc289)
          } loc(#loc289)
        } loc(#loc287)
      } else {
        cir.scope {
          %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc295)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc195)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc195)
          cir.store %9, %7 : !u64i, !cir.ptr<!u64i> loc(#loc295)
          cir.scope {
            %10 = cir.const #cir.int<0> : !s32i loc(#loc198)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc198)
            cir.store %11, %7 : !u64i, !cir.ptr<!u64i> loc(#loc297)
            cir.for : cond {
              %12 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc200)
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc201)
              %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc201)
              %15 = cir.cmp(lt, %12, %14) : !u64i, !cir.bool loc(#loc298)
              cir.condition(%15) loc(#loc202)
            } body {
              cir.scope {
                %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc204)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc204)
                cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc205)
              } loc(#loc299)
              cir.yield loc(#loc197)
            } step {
              %12 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc206)
              %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc207)
              cir.store %13, %7 : !u64i, !cir.ptr<!u64i> loc(#loc300)
              cir.yield loc(#loc296)
            } loc(#loc296)
          } loc(#loc296)
        } loc(#loc294)
      } loc(#loc286)
    } loc(#loc284)
    cir.return loc(#loc152)
  } loc(#loc276)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":44:27)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":22:1)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":62:1)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":24:5)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":24:9)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":26:14)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":26:13)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":26:5)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":27:5)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":36:5)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":27:8)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":27:33)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":28:5)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":31:5)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":33:5)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":30:17)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":30:9)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":35:17)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":35:9)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":37:5)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":61:5)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":37:8)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":37:33)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":38:5)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":47:5)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":49:5)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":39:9)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":46:9)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":40:13)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":40:24)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":42:13)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":45:13)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":42:22)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":42:18)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":42:25)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":42:37)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":42:27)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":43:13)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":44:17)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":42:45)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":42:44)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":50:9)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":60:9)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":51:13)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":51:24)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":53:13)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":59:13)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":53:17)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":53:25)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":53:27)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":53:30)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":53:39)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":54:13)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":55:17)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":58:17)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":55:26)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":55:22)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":55:29)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":55:41)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":55:31)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":56:17)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":57:31)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":57:21)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":55:49)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":55:48)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":158:1)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":162:1)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":160:5)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":160:13)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":161:5)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":161:13)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":71:1)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":114:1)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":73:5)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":73:9)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":75:14)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":75:13)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":75:5)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":76:5)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":85:5)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":76:8)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":76:33)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":77:5)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":80:5)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":82:5)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":79:17)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":79:9)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":84:17)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":84:9)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":86:5)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":113:5)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":86:8)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":86:33)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":87:5)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":99:5)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":101:5)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":88:9)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":98:9)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":89:13)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":89:24)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":91:13)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":97:13)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":91:17)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":91:25)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":91:27)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":91:30)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":91:39)
#loc114 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":92:13)
#loc115 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":93:17)
#loc116 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":96:17)
#loc117 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":93:26)
#loc118 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":93:22)
#loc119 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":93:29)
#loc120 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":93:41)
#loc121 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":93:31)
#loc122 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":94:17)
#loc123 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":95:31)
#loc124 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":95:21)
#loc125 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":93:49)
#loc126 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":93:48)
#loc127 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":102:9)
#loc128 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":112:9)
#loc129 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":103:13)
#loc130 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":103:24)
#loc131 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":105:13)
#loc132 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":111:13)
#loc133 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":105:17)
#loc134 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":105:25)
#loc135 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":105:27)
#loc136 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":105:30)
#loc137 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":105:39)
#loc138 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":106:13)
#loc139 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":107:17)
#loc140 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":110:17)
#loc141 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":107:26)
#loc142 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":107:22)
#loc143 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":107:29)
#loc144 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":107:41)
#loc145 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":107:31)
#loc146 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":108:17)
#loc147 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":109:31)
#loc148 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":109:21)
#loc149 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":107:49)
#loc150 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":107:48)
#loc151 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":119:1)
#loc152 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":156:1)
#loc153 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":121:5)
#loc154 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":121:9)
#loc155 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":123:14)
#loc156 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":123:13)
#loc157 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":123:5)
#loc158 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":124:5)
#loc159 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":133:5)
#loc160 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":124:8)
#loc161 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":124:33)
#loc162 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":125:5)
#loc163 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":128:5)
#loc164 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":130:5)
#loc165 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":127:17)
#loc166 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":127:9)
#loc167 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":132:17)
#loc168 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":132:9)
#loc169 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":134:5)
#loc170 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":155:5)
#loc171 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":134:8)
#loc172 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":134:33)
#loc173 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":135:5)
#loc174 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":144:5)
#loc175 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":146:5)
#loc176 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":136:9)
#loc177 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":143:9)
#loc178 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":137:13)
#loc179 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":137:24)
#loc180 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":139:13)
#loc181 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":142:13)
#loc182 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":139:22)
#loc183 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":139:18)
#loc184 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":139:25)
#loc185 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":139:37)
#loc186 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":139:27)
#loc187 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":140:13)
#loc188 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":141:27)
#loc189 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":141:17)
#loc190 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":139:45)
#loc191 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":139:44)
#loc192 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":147:9)
#loc193 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":154:9)
#loc194 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":148:13)
#loc195 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":148:24)
#loc196 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":150:13)
#loc197 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":153:13)
#loc198 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":150:22)
#loc199 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":150:18)
#loc200 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":150:25)
#loc201 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":150:37)
#loc202 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":150:27)
#loc203 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":151:13)
#loc204 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":152:27)
#loc205 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":152:17)
#loc206 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":150:45)
#loc207 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":150:44)
#loc208 = loc(fused[#loc1, #loc2])
#loc209 = loc(fused[#loc3, #loc4])
#loc210 = loc(fused[#loc5, #loc6])
#loc211 = loc(fused[#loc8, #loc9])
#loc212 = loc(fused[#loc10, #loc11])
#loc213 = loc(fused[#loc14, #loc12])
#loc214 = loc(fused[#loc15, #loc16])
#loc215 = loc(fused[#loc17, #loc18])
#loc216 = loc(fused[#loc19, #loc20, #loc21, #loc16])
#loc217 = loc(fused[#loc23, #loc22])
#loc218 = loc(fused[#loc25, #loc24])
#loc219 = loc(fused[#loc26, #loc27])
#loc220 = loc(fused[#loc28, #loc29])
#loc221 = loc(fused[#loc30, #loc31, #loc32, #loc27])
#loc222 = loc(fused[#loc33, #loc34])
#loc223 = loc(fused[#loc35, #loc36])
#loc224 = loc(fused[#loc37, #loc38])
#loc225 = loc(fused[#loc40, #loc39])
#loc226 = loc(fused[#loc41, #loc42])
#loc227 = loc(fused[#loc44, #loc38])
#loc228 = loc(fused[#loc47, #loc46])
#loc229 = loc(fused[#loc48, #loc49])
#loc230 = loc(fused[#loc50, #loc51])
#loc231 = loc(fused[#loc52, #loc53])
#loc232 = loc(fused[#loc54, #loc55])
#loc233 = loc(fused[#loc57, #loc58])
#loc234 = loc(fused[#loc59, #loc53])
#loc235 = loc(fused[#loc60, #loc61])
#loc236 = loc(fused[#loc63, #loc62])
#loc237 = loc(fused[#loc64, #loc65])
#loc238 = loc(fused[#loc67, #loc61])
#loc239 = loc(fused[#loc71, #loc70])
#loc240 = loc(fused[#loc72, #loc73])
#loc241 = loc(fused[#loc74, #loc75])
#loc242 = loc(fused[#loc76, #loc77])
#loc243 = loc(fused[#loc78, #loc79])
#loc244 = loc(fused[#loc80, #loc81])
#loc245 = loc(fused[#loc84, #loc82])
#loc246 = loc(fused[#loc85, #loc86])
#loc247 = loc(fused[#loc87, #loc88])
#loc248 = loc(fused[#loc89, #loc90, #loc91, #loc86])
#loc249 = loc(fused[#loc93, #loc92])
#loc250 = loc(fused[#loc95, #loc94])
#loc251 = loc(fused[#loc96, #loc97])
#loc252 = loc(fused[#loc98, #loc99])
#loc253 = loc(fused[#loc100, #loc101, #loc102, #loc97])
#loc254 = loc(fused[#loc103, #loc104])
#loc255 = loc(fused[#loc105, #loc106])
#loc256 = loc(fused[#loc107, #loc108])
#loc257 = loc(fused[#loc109, #loc110])
#loc258 = loc(fused[#loc112, #loc113])
#loc259 = loc(fused[#loc114, #loc108])
#loc260 = loc(fused[#loc115, #loc116])
#loc261 = loc(fused[#loc118, #loc117])
#loc262 = loc(fused[#loc119, #loc120])
#loc263 = loc(fused[#loc122, #loc116])
#loc264 = loc(fused[#loc126, #loc125])
#loc265 = loc(fused[#loc127, #loc128])
#loc266 = loc(fused[#loc129, #loc130])
#loc267 = loc(fused[#loc131, #loc132])
#loc268 = loc(fused[#loc133, #loc134])
#loc269 = loc(fused[#loc136, #loc137])
#loc270 = loc(fused[#loc138, #loc132])
#loc271 = loc(fused[#loc139, #loc140])
#loc272 = loc(fused[#loc142, #loc141])
#loc273 = loc(fused[#loc143, #loc144])
#loc274 = loc(fused[#loc146, #loc140])
#loc275 = loc(fused[#loc150, #loc149])
#loc276 = loc(fused[#loc151, #loc152])
#loc277 = loc(fused[#loc153, #loc154])
#loc278 = loc(fused[#loc157, #loc155])
#loc279 = loc(fused[#loc158, #loc159])
#loc280 = loc(fused[#loc160, #loc161])
#loc281 = loc(fused[#loc162, #loc163, #loc164, #loc159])
#loc282 = loc(fused[#loc166, #loc165])
#loc283 = loc(fused[#loc168, #loc167])
#loc284 = loc(fused[#loc169, #loc170])
#loc285 = loc(fused[#loc171, #loc172])
#loc286 = loc(fused[#loc173, #loc174, #loc175, #loc170])
#loc287 = loc(fused[#loc176, #loc177])
#loc288 = loc(fused[#loc178, #loc179])
#loc289 = loc(fused[#loc180, #loc181])
#loc290 = loc(fused[#loc183, #loc182])
#loc291 = loc(fused[#loc184, #loc185])
#loc292 = loc(fused[#loc187, #loc181])
#loc293 = loc(fused[#loc191, #loc190])
#loc294 = loc(fused[#loc192, #loc193])
#loc295 = loc(fused[#loc194, #loc195])
#loc296 = loc(fused[#loc196, #loc197])
#loc297 = loc(fused[#loc199, #loc198])
#loc298 = loc(fused[#loc200, #loc201])
#loc299 = loc(fused[#loc203, #loc197])
#loc300 = loc(fused[#loc207, #loc206])
