!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc160)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc161)
  cir.func private @printUnsignedLine(!u32i) loc(#loc162)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc7)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc163)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc10)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_square_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc165)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc15)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc15)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc166)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc168)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc168)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc19)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc19)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc24)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc24)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc24)
        %11 = cir.ternary(%10, true {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc24)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc24)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc24)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc24)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc24)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc24)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc24)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc24)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc24)
          cir.yield %25 : !u32i loc(#loc24)
        }, false {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc24)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc24)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc24)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc24)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc24)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc24)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc24)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc24)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc24)
          %26 = cir.unary(minus, %25) : !u32i, !u32i loc(#loc24)
          %27 = cir.const #cir.int<1> : !s32i loc(#loc24)
          %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc24)
          %29 = cir.binop(sub, %26, %28) : !u32i loc(#loc24)
          cir.yield %29 : !u32i loc(#loc24)
        }) : (!cir.bool) -> !u32i loc(#loc24)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc24)
        %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc24)
        cir.store %13, %0 : !u32i, !cir.ptr<!u32i> loc(#loc170)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc26)
        %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc26)
        cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc171)
      } loc(#loc169)
    } loc(#loc167)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc173)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc173)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc30)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc30)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc176)
          %8 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc39)
          %9 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc38)
          %10 = cir.binop(mul, %8, %9) : !u32i loc(#loc177)
          cir.store %10, %7 : !u32i, !cir.ptr<!u32i> loc(#loc176)
          %11 = cir.load %7 : !cir.ptr<!u32i>, !u32i loc(#loc40)
          cir.call @printUnsignedLine(%11) : (!u32i) -> () loc(#loc41)
        } loc(#loc175)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc44)
          %8 = cir.cast(integral, %7 : !u32i), !s64i loc(#loc44)
          %9 = cir.cast(integral, %8 : !s64i), !s32i loc(#loc44)
          %10 = cir.abs %9 poison : !s32i loc(#loc45)
          %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc45)
          %12 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc46)
          %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc47)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc47)
          %15 = cir.const #cir.int<2> : !u32i loc(#loc47)
          %16 = cir.binop(mul, %14, %15) : !u32i loc(#loc47)
          %17 = cir.const #cir.int<1> : !u32i loc(#loc47)
          %18 = cir.binop(add, %16, %17) : !u32i loc(#loc47)
          %19 = cir.cast(int_to_float, %18 : !u32i), !cir.double loc(#loc47)
          %20 = cir.call @sqrt(%19) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc46)
          %21 = cir.cast(float_to_int, %20 : !cir.double), !s64i loc(#loc46)
          %22 = cir.cmp(lt, %11, %21) : !s64i, !cir.bool loc(#loc179)
          cir.if %22 {
            %23 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc181)
            %24 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc54)
            %25 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc53)
            %26 = cir.binop(mul, %24, %25) : !u32i loc(#loc182)
            cir.store %26, %23 : !u32i, !cir.ptr<!u32i> loc(#loc181)
            %27 = cir.load %23 : !cir.ptr<!u32i>, !u32i loc(#loc55)
            cir.call @printUnsignedLine(%27) : (!u32i) -> () loc(#loc56)
          } else {
            %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc10)
            %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc10)
            cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc57)
          } loc(#loc180)
        } loc(#loc178)
      } loc(#loc174)
    } loc(#loc172)
    cir.return loc(#loc12)
  } loc(#loc164)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_square_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc184)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc60)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc185)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc62)
    cir.return loc(#loc59)
  } loc(#loc183)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc187)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc68)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc68)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc188)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc190)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc190)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc72)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc72)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc77)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc77)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc77)
        %11 = cir.ternary(%10, true {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc77)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc77)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc77)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc77)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc77)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc77)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc77)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc77)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc77)
          cir.yield %25 : !u32i loc(#loc77)
        }, false {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc77)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc77)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc77)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc77)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc77)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc77)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc77)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc77)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc77)
          %26 = cir.unary(minus, %25) : !u32i, !u32i loc(#loc77)
          %27 = cir.const #cir.int<1> : !s32i loc(#loc77)
          %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc77)
          %29 = cir.binop(sub, %26, %28) : !u32i loc(#loc77)
          cir.yield %29 : !u32i loc(#loc77)
        }) : (!cir.bool) -> !u32i loc(#loc77)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc77)
        %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc77)
        cir.store %13, %0 : !u32i, !cir.ptr<!u32i> loc(#loc192)
      } else {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc79)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc79)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc79)
        %11 = cir.ternary(%10, true {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc79)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc79)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc79)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc79)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc79)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc79)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc79)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc79)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc79)
          cir.yield %25 : !u32i loc(#loc79)
        }, false {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc79)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc79)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc79)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc79)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc79)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc79)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc79)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc79)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc79)
          %26 = cir.unary(minus, %25) : !u32i, !u32i loc(#loc79)
          %27 = cir.const #cir.int<1> : !s32i loc(#loc79)
          %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc79)
          %29 = cir.binop(sub, %26, %28) : !u32i loc(#loc79)
          cir.yield %29 : !u32i loc(#loc79)
        }) : (!cir.bool) -> !u32i loc(#loc79)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc79)
        %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc79)
        cir.store %13, %0 : !u32i, !cir.ptr<!u32i> loc(#loc193)
      } loc(#loc191)
    } loc(#loc189)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc195)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc195)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc83)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc83)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc90)
          %8 = cir.cast(integral, %7 : !u32i), !s64i loc(#loc90)
          %9 = cir.cast(integral, %8 : !s64i), !s32i loc(#loc90)
          %10 = cir.abs %9 poison : !s32i loc(#loc91)
          %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc91)
          %12 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc92)
          %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc93)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc93)
          %15 = cir.const #cir.int<2> : !u32i loc(#loc93)
          %16 = cir.binop(mul, %14, %15) : !u32i loc(#loc93)
          %17 = cir.const #cir.int<1> : !u32i loc(#loc93)
          %18 = cir.binop(add, %16, %17) : !u32i loc(#loc93)
          %19 = cir.cast(int_to_float, %18 : !u32i), !cir.double loc(#loc93)
          %20 = cir.call @sqrt(%19) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc92)
          %21 = cir.cast(float_to_int, %20 : !cir.double), !s64i loc(#loc92)
          %22 = cir.cmp(lt, %11, %21) : !s64i, !cir.bool loc(#loc198)
          cir.if %22 {
            %23 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc200)
            %24 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc100)
            %25 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc99)
            %26 = cir.binop(mul, %24, %25) : !u32i loc(#loc201)
            cir.store %26, %23 : !u32i, !cir.ptr<!u32i> loc(#loc200)
            %27 = cir.load %23 : !cir.ptr<!u32i>, !u32i loc(#loc101)
            cir.call @printUnsignedLine(%27) : (!u32i) -> () loc(#loc102)
          } else {
            %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc103)
            %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc103)
            cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc104)
          } loc(#loc199)
        } loc(#loc197)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc107)
          %8 = cir.cast(integral, %7 : !u32i), !s64i loc(#loc107)
          %9 = cir.cast(integral, %8 : !s64i), !s32i loc(#loc107)
          %10 = cir.abs %9 poison : !s32i loc(#loc108)
          %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc108)
          %12 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc109)
          %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc110)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc110)
          %15 = cir.const #cir.int<2> : !u32i loc(#loc110)
          %16 = cir.binop(mul, %14, %15) : !u32i loc(#loc110)
          %17 = cir.const #cir.int<1> : !u32i loc(#loc110)
          %18 = cir.binop(add, %16, %17) : !u32i loc(#loc110)
          %19 = cir.cast(int_to_float, %18 : !u32i), !cir.double loc(#loc110)
          %20 = cir.call @sqrt(%19) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc109)
          %21 = cir.cast(float_to_int, %20 : !cir.double), !s64i loc(#loc109)
          %22 = cir.cmp(lt, %11, %21) : !s64i, !cir.bool loc(#loc203)
          cir.if %22 {
            %23 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc205)
            %24 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc117)
            %25 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc116)
            %26 = cir.binop(mul, %24, %25) : !u32i loc(#loc206)
            cir.store %26, %23 : !u32i, !cir.ptr<!u32i> loc(#loc205)
            %27 = cir.load %23 : !cir.ptr<!u32i>, !u32i loc(#loc118)
            cir.call @printUnsignedLine(%27) : (!u32i) -> () loc(#loc119)
          } else {
            %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc120)
            %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc120)
            cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc121)
          } loc(#loc204)
        } loc(#loc202)
      } loc(#loc196)
    } loc(#loc194)
    cir.return loc(#loc65)
  } loc(#loc186)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc208)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc126)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc126)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc209)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc211)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc211)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc130)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc130)
      cir.if %6 {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc135)
        %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc135)
        cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc213)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc137)
        %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc137)
        cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc214)
      } loc(#loc212)
    } loc(#loc210)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc216)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc216)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc141)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc141)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc219)
          %8 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc150)
          %9 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc149)
          %10 = cir.binop(mul, %8, %9) : !u32i loc(#loc220)
          cir.store %10, %7 : !u32i, !cir.ptr<!u32i> loc(#loc219)
          %11 = cir.load %7 : !cir.ptr<!u32i>, !u32i loc(#loc151)
          cir.call @printUnsignedLine(%11) : (!u32i) -> () loc(#loc152)
        } loc(#loc218)
      } else {
        cir.scope {
          %7 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc222)
          %8 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc157)
          %9 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc156)
          %10 = cir.binop(mul, %8, %9) : !u32i loc(#loc223)
          cir.store %10, %7 : !u32i, !cir.ptr<!u32i> loc(#loc222)
          %11 = cir.load %7 : !cir.ptr<!u32i>, !u32i loc(#loc158)
          cir.call @printUnsignedLine(%11) : (!u32i) -> () loc(#loc159)
        } loc(#loc221)
      } loc(#loc217)
    } loc(#loc215)
    cir.return loc(#loc123)
  } loc(#loc207)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc7 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":56:23)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":24:1)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":59:1)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":26:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":26:18)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":27:12)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":27:5)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":28:5)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":37:5)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":28:8)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":28:33)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":29:5)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":32:5)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":34:5)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":31:30)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":31:9)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":36:16)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":36:9)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":38:5)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":58:5)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":38:8)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":38:33)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":39:5)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":45:5)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":47:5)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":40:9)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":44:9)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":42:13)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":42:42)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":42:35)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":43:31)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":43:13)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":49:9)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":57:9)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":49:23)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":49:13)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":49:37)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":49:50)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":49:58)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":50:9)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":53:9)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":55:9)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":51:13)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":51:42)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":51:35)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":52:31)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":52:13)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":56:13)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":145:1)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":149:1)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":147:5)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":147:13)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":148:5)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":148:13)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":68:1)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":108:1)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":70:5)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":70:18)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":71:12)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":71:5)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":72:5)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":81:5)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":72:8)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":72:33)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":73:5)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":76:5)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":78:5)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":75:30)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":75:9)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":80:30)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":80:9)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":82:5)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":107:5)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":82:8)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":82:33)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":83:5)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":94:5)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":96:5)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":85:9)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":93:9)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":85:23)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":85:13)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":85:37)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":85:50)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":85:58)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":86:9)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":89:9)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":91:9)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":87:13)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":87:42)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":87:35)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":88:31)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":88:13)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":92:23)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":92:13)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":98:9)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":106:9)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":98:23)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":98:13)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":98:37)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":98:50)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":98:58)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":99:9)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":102:9)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":104:9)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":100:13)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":100:42)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":100:35)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":101:31)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":101:13)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":105:23)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":105:13)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":113:1)
#loc123 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":143:1)
#loc124 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":115:5)
#loc125 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":115:18)
#loc126 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":116:12)
#loc127 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":116:5)
#loc128 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":117:5)
#loc129 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":126:5)
#loc130 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":117:8)
#loc131 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":117:33)
#loc132 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":118:5)
#loc133 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":121:5)
#loc134 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":123:5)
#loc135 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":120:16)
#loc136 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":120:9)
#loc137 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":125:16)
#loc138 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":125:9)
#loc139 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":127:5)
#loc140 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":142:5)
#loc141 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":127:8)
#loc142 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":127:33)
#loc143 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":128:5)
#loc144 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":134:5)
#loc145 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":136:5)
#loc146 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":129:9)
#loc147 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":133:9)
#loc148 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":131:13)
#loc149 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":131:42)
#loc150 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":131:35)
#loc151 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":132:31)
#loc152 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":132:13)
#loc153 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":137:9)
#loc154 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":141:9)
#loc155 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":139:13)
#loc156 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":139:42)
#loc157 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":139:35)
#loc158 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":140:31)
#loc159 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_12.c":140:13)
#loc160 = loc(fused[#loc1, #loc2])
#loc161 = loc(fused[#loc3, #loc4])
#loc162 = loc(fused[#loc5, #loc6])
#loc163 = loc(fused[#loc8, #loc9])
#loc164 = loc(fused[#loc11, #loc12])
#loc165 = loc(fused[#loc13, #loc14])
#loc166 = loc(fused[#loc16, #loc15])
#loc167 = loc(fused[#loc17, #loc18])
#loc168 = loc(fused[#loc19, #loc20])
#loc169 = loc(fused[#loc21, #loc22, #loc23, #loc18])
#loc170 = loc(fused[#loc25, #loc24])
#loc171 = loc(fused[#loc27, #loc26])
#loc172 = loc(fused[#loc28, #loc29])
#loc173 = loc(fused[#loc30, #loc31])
#loc174 = loc(fused[#loc32, #loc33, #loc34, #loc29])
#loc175 = loc(fused[#loc35, #loc36])
#loc176 = loc(fused[#loc37, #loc38])
#loc177 = loc(fused[#loc39, #loc38])
#loc178 = loc(fused[#loc42, #loc43])
#loc179 = loc(fused[#loc45, #loc48])
#loc180 = loc(fused[#loc49, #loc50, #loc51, #loc43])
#loc181 = loc(fused[#loc52, #loc53])
#loc182 = loc(fused[#loc54, #loc53])
#loc183 = loc(fused[#loc58, #loc59])
#loc184 = loc(fused[#loc60, #loc61])
#loc185 = loc(fused[#loc62, #loc63])
#loc186 = loc(fused[#loc64, #loc65])
#loc187 = loc(fused[#loc66, #loc67])
#loc188 = loc(fused[#loc69, #loc68])
#loc189 = loc(fused[#loc70, #loc71])
#loc190 = loc(fused[#loc72, #loc73])
#loc191 = loc(fused[#loc74, #loc75, #loc76, #loc71])
#loc192 = loc(fused[#loc78, #loc77])
#loc193 = loc(fused[#loc80, #loc79])
#loc194 = loc(fused[#loc81, #loc82])
#loc195 = loc(fused[#loc83, #loc84])
#loc196 = loc(fused[#loc85, #loc86, #loc87, #loc82])
#loc197 = loc(fused[#loc88, #loc89])
#loc198 = loc(fused[#loc91, #loc94])
#loc199 = loc(fused[#loc95, #loc96, #loc97, #loc89])
#loc200 = loc(fused[#loc98, #loc99])
#loc201 = loc(fused[#loc100, #loc99])
#loc202 = loc(fused[#loc105, #loc106])
#loc203 = loc(fused[#loc108, #loc111])
#loc204 = loc(fused[#loc112, #loc113, #loc114, #loc106])
#loc205 = loc(fused[#loc115, #loc116])
#loc206 = loc(fused[#loc117, #loc116])
#loc207 = loc(fused[#loc122, #loc123])
#loc208 = loc(fused[#loc124, #loc125])
#loc209 = loc(fused[#loc127, #loc126])
#loc210 = loc(fused[#loc128, #loc129])
#loc211 = loc(fused[#loc130, #loc131])
#loc212 = loc(fused[#loc132, #loc133, #loc134, #loc129])
#loc213 = loc(fused[#loc136, #loc135])
#loc214 = loc(fused[#loc138, #loc137])
#loc215 = loc(fused[#loc139, #loc140])
#loc216 = loc(fused[#loc141, #loc142])
#loc217 = loc(fused[#loc143, #loc144, #loc145, #loc140])
#loc218 = loc(fused[#loc146, #loc147])
#loc219 = loc(fused[#loc148, #loc149])
#loc220 = loc(fused[#loc150, #loc149])
#loc221 = loc(fused[#loc153, #loc154])
#loc222 = loc(fused[#loc155, #loc156])
#loc223 = loc(fused[#loc157, #loc156])
