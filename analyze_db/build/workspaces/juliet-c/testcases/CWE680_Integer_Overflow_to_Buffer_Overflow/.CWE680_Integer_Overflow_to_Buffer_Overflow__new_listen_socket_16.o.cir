!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc235)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc236)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc237)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc238)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc239)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc240)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc241)
  cir.func private @close(!s32i) -> !s32i loc(#loc242)
  cir.func private @_Znam(!u64i) -> !cir.ptr<!void> loc(#loc243)
  cir.func private @printIntLine(!s32i) loc(#loc244)
  cir.func @_ZN64CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_163badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc246)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc26)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc247)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc30)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc30)
        cir.condition(%4) loc(#loc30)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc251)
            %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc252)
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc253)
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc254)
            %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc255)
            %8 = cir.const #cir.int<1> : !s32i loc(#loc39)
            %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc39)
            cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc253)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc41)
            %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc41)
            cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc254)
            cir.scope {
              cir.do {
                cir.scope {
                  %12 = cir.const #cir.int<2> : !s32i loc(#loc48)
                  %13 = cir.const #cir.int<1> : !u32i loc(#loc49)
                  %14 = cir.cast(integral, %13 : !u32i), !s32i loc(#loc49)
                  %15 = cir.const #cir.int<6> : !u32i loc(#loc50)
                  %16 = cir.cast(integral, %15 : !u32i), !s32i loc(#loc50)
                  %17 = cir.call @socket(%12, %14, %16) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc51)
                  cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc258)
                  cir.scope {
                    %58 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc56)
                    %59 = cir.const #cir.int<1> : !s32i loc(#loc57)
                    %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc57)
                    %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc260)
                    cir.if %61 {
                      cir.break loc(#loc59)
                    } loc(#loc261)
                  } loc(#loc259)
                  %18 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc262)
                  %19 = cir.const #cir.int<0> : !s32i loc(#loc62)
                  %20 = cir.const #cir.int<16> : !u64i loc(#loc263)
                  cir.libc.memset %20 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc264)
                  %21 = cir.const #cir.int<2> : !s32i loc(#loc67)
                  %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc67)
                  %23 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc68)
                  cir.store %22, %23 : !u16i, !cir.ptr<!u16i> loc(#loc265)
                  %24 = cir.const #cir.int<0> : !s32i loc(#loc70)
                  %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc70)
                  %26 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc71)
                  %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc72)
                  cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc266)
                  %28 = cir.const #cir.int<27015> : !s32i loc(#loc74)
                  %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc74)
                  %30 = cir.call @htons(%29) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc75)
                  %31 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc76)
                  cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc267)
                  cir.scope {
                    %58 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc81)
                    %59 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc269)
                    %60 = cir.const #cir.int<16> : !u64i loc(#loc270)
                    %61 = cir.cast(integral, %60 : !u64i), !u32i loc(#loc270)
                    %62 = cir.call @bind(%58, %59, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc86)
                    %63 = cir.const #cir.int<1> : !s32i loc(#loc87)
                    %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc87)
                    %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc271)
                    cir.if %65 {
                      cir.break loc(#loc89)
                    } loc(#loc272)
                  } loc(#loc268)
                  cir.scope {
                    %58 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc92)
                    %59 = cir.const #cir.int<5> : !s32i loc(#loc93)
                    %60 = cir.call @listen(%58, %59) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc94)
                    %61 = cir.const #cir.int<1> : !s32i loc(#loc95)
                    %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc95)
                    %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc274)
                    cir.if %63 {
                      cir.break loc(#loc97)
                    } loc(#loc275)
                  } loc(#loc273)
                  %32 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc98)
                  %33 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc99)
                  %34 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc100)
                  %35 = cir.call @accept(%32, %33, %34) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc101)
                  cir.store %35, %6 : !s32i, !cir.ptr<!s32i> loc(#loc276)
                  cir.scope {
                    %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc106)
                    %59 = cir.const #cir.int<1> : !s32i loc(#loc107)
                    %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc107)
                    %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc278)
                    cir.if %61 {
                      cir.break loc(#loc109)
                    } loc(#loc279)
                  } loc(#loc277)
                  %36 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc110)
                  %37 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc111)
                  %38 = cir.cast(bitcast, %37 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc111)
                  %39 = cir.const #cir.int<3> : !s32i loc(#loc112)
                  %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc112)
                  %41 = cir.const #cir.int<4> : !u64i loc(#loc112)
                  %42 = cir.binop(mul, %40, %41) : !u64i loc(#loc112)
                  %43 = cir.const #cir.int<2> : !s32i loc(#loc112)
                  %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc112)
                  %45 = cir.binop(add, %42, %44) : !u64i loc(#loc112)
                  %46 = cir.const #cir.int<1> : !s32i loc(#loc113)
                  %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc113)
                  %48 = cir.binop(sub, %45, %47) : !u64i loc(#loc280)
                  %49 = cir.const #cir.int<0> : !s32i loc(#loc114)
                  %50 = cir.call @recv(%36, %38, %48, %49) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc115)
                  %51 = cir.cast(integral, %50 : !s64i), !s32i loc(#loc115)
                  cir.store %51, %3 : !s32i, !cir.ptr<!s32i> loc(#loc281)
                  cir.scope {
                    %58 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc120)
                    %59 = cir.const #cir.int<1> : !s32i loc(#loc121)
                    %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc121)
                    %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc283)
                    %62 = cir.ternary(%61, true {
                      %63 = cir.const #true loc(#loc122)
                      cir.yield %63 : !cir.bool loc(#loc122)
                    }, false {
                      %63 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc123)
                      %64 = cir.const #cir.int<0> : !s32i loc(#loc124)
                      %65 = cir.cmp(eq, %63, %64) : !s32i, !cir.bool loc(#loc284)
                      %66 = cir.ternary(%65, true {
                        %67 = cir.const #true loc(#loc122)
                        cir.yield %67 : !cir.bool loc(#loc122)
                      }, false {
                        %67 = cir.const #false loc(#loc122)
                        cir.yield %67 : !cir.bool loc(#loc122)
                      }) : (!cir.bool) -> !cir.bool loc(#loc122)
                      cir.yield %66 : !cir.bool loc(#loc122)
                    }) : (!cir.bool) -> !cir.bool loc(#loc122)
                    cir.if %62 {
                      cir.break loc(#loc126)
                    } loc(#loc285)
                  } loc(#loc282)
                  %52 = cir.const #cir.int<0> : !s8i loc(#loc127)
                  %53 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc128)
                  %54 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc129)
                  %55 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %53 : !s32i), !cir.ptr<!s8i> loc(#loc129)
                  cir.store %52, %55 : !s8i, !cir.ptr<!s8i> loc(#loc286)
                  %56 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc130)
                  %57 = cir.call @atoi(%56) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc131)
                  cir.store %57, %0 : !s32i, !cir.ptr<!s32i> loc(#loc287)
                } loc(#loc257)
                cir.yield loc(#loc45)
              } while {
                %12 = cir.const #cir.int<0> : !s32i loc(#loc134)
                %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc134)
                cir.condition(%13) loc(#loc134)
              } loc(#loc256)
            } loc(#loc256)
            cir.scope {
              %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc137)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc138)
              %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc138)
              %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc289)
              cir.if %15 {
                %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc140)
                %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc141)
              } loc(#loc290)
            } loc(#loc288)
            cir.scope {
              %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc144)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc145)
              %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc145)
              %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc292)
              cir.if %15 {
                %16 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc147)
                %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc148)
              } loc(#loc293)
            } loc(#loc291)
          } loc(#loc250)
          cir.break loc(#loc149)
        } loc(#loc249)
        cir.yield loc(#loc29)
      } loc(#loc248)
    } loc(#loc248)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc295)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc296)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc297)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc157)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc157)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc298)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc299)
      cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc300)
      %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc161)
      %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc162)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc301)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc301)
      cir.store %13, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc302)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc168)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc168)
        cir.store %20, %4 : !u64i, !cir.ptr<!u64i> loc(#loc304)
        cir.for : cond {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc170)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc171)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc171)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc305)
          cir.condition(%24) loc(#loc305)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc173)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc174)
            %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc175)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc176)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc307)
          } loc(#loc306)
          cir.yield loc(#loc167)
        } step {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc177)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc178)
          cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc308)
          cir.yield loc(#loc303)
        } loc(#loc303)
      } loc(#loc303)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc179)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc180)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc181)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc179)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc182)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc183)
      cir.delete.array %18 : <!s32i> loc(#loc183)
    } loc(#loc294)
    cir.return loc(#loc22)
  } loc(#loc245)
  cir.func internal private @_ZN64CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc310)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc188)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc189)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc311)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc193)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc193)
        cir.condition(%4) loc(#loc193)
      } do {
        cir.scope {
          %3 = cir.const #cir.int<20> : !s32i loc(#loc195)
          cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc314)
          cir.break loc(#loc197)
        } loc(#loc313)
        cir.yield loc(#loc192)
      } loc(#loc312)
    } loc(#loc312)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc316)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc317)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc318)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc205)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc205)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc319)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc320)
      cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc321)
      %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc209)
      %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc210)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc322)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc322)
      cir.store %13, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc323)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc216)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc216)
        cir.store %20, %4 : !u64i, !cir.ptr<!u64i> loc(#loc325)
        cir.for : cond {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc218)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc219)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc219)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc326)
          cir.condition(%24) loc(#loc326)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc221)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc222)
            %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc223)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc224)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc328)
          } loc(#loc327)
          cir.yield loc(#loc215)
        } step {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc225)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc226)
          cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc329)
          cir.yield loc(#loc324)
        } loc(#loc324)
      } loc(#loc324)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc227)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc228)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc229)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc227)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc230)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc231)
      cir.delete.array %18 : <!s32i> loc(#loc231)
    } loc(#loc315)
    cir.return loc(#loc185)
  } loc(#loc309)
  cir.func @_ZN64CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_164goodEv() extra(#fn_attr1) {
    cir.call @_ZN64CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16L7goodG2BEv() : () -> () loc(#loc234)
    cir.return loc(#loc233)
  } loc(#loc330)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":128:20)
#loc18 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":129:41)
#loc19 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc20 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":46:1)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":137:1)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":48:5)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":48:9)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":50:13)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":50:12)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":50:5)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":51:5)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":123:5)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":51:11)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":52:5)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":53:9)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":121:9)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":58:13)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":58:17)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":59:13)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":59:32)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":60:13)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":60:35)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":61:13)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":61:35)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":62:13)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":62:45)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":63:13)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":106:21)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":64:13)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":105:13)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":73:39)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":73:48)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":73:61)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":73:32)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":73:17)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":73:72)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":74:17)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":77:17)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":74:21)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":74:37)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":75:17)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":76:21)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":78:24)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":78:25)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":78:34)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":78:37)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":78:51)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":78:17)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":78:52)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":79:38)
#loc68 = loc("/usr/include/netinet/in.h":249:5)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":79:17)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":80:43)
#loc71 = loc("/usr/include/netinet/in.h":251:20)
#loc72 = loc("/usr/include/netinet/in.h":33:15)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":80:17)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":81:42)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":81:36)
#loc76 = loc("/usr/include/netinet/in.h":250:15)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":81:17)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":81:50)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":82:17)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":85:17)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":82:26)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":82:58)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":82:59)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":82:68)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":82:82)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":82:21)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":82:88)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":83:17)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":84:21)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":86:17)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":89:17)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":86:28)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":86:42)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":86:21)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":86:61)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":87:17)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":88:21)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":90:39)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":90:53)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":90:59)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":90:32)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":90:17)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":90:63)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":91:17)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":94:17)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":91:21)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":91:37)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":92:17)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":93:21)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":96:35)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":96:49)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":96:62)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":96:80)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":96:83)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":96:30)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":96:17)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":96:84)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":97:17)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":100:17)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":97:21)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":97:35)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":97:48)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":97:51)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":97:65)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":98:17)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":99:21)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":102:43)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":102:29)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":102:17)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":104:29)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":104:24)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":104:17)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":104:40)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":106:20)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":107:13)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":110:13)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":107:17)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":107:33)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":108:13)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":109:30)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":109:17)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":111:13)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":114:13)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":111:17)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":111:33)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":112:13)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":113:30)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":113:17)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":122:9)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":124:5)
#loc151 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":136:5)
#loc152 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":125:9)
#loc153 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":125:16)
#loc154 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":125:26)
#loc155 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":126:9)
#loc156 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":126:14)
#loc157 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":128:21)
#loc158 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":128:28)
#loc159 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":128:38)
#loc160 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":128:9)
#loc161 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":129:37)
#loc162 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":46:6)
#loc163 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":129:28)
#loc164 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":129:46)
#loc165 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":129:9)
#loc166 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":130:9)
#loc167 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":133:9)
#loc168 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":130:18)
#loc169 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":130:14)
#loc170 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":130:21)
#loc171 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":130:33)
#loc172 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":131:9)
#loc173 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":132:29)
#loc174 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":132:13)
#loc175 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":132:24)
#loc176 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":132:25)
#loc177 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":130:40)
#loc178 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":130:39)
#loc179 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":134:22)
#loc180 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":134:33)
#loc181 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":134:34)
#loc182 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":134:9)
#loc183 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":135:19)
#loc184 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":144:1)
#loc185 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":168:1)
#loc186 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":146:5)
#loc187 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":146:9)
#loc188 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":148:13)
#loc189 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":148:12)
#loc190 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":148:5)
#loc191 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":149:5)
#loc192 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":154:5)
#loc193 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":149:11)
#loc194 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":150:5)
#loc195 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":152:16)
#loc196 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":152:9)
#loc197 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":153:9)
#loc198 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":155:5)
#loc199 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":167:5)
#loc200 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":156:9)
#loc201 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":156:16)
#loc202 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":156:26)
#loc203 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":157:9)
#loc204 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":157:14)
#loc205 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":159:21)
#loc206 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":159:28)
#loc207 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":159:38)
#loc208 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":159:9)
#loc209 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":160:37)
#loc210 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":144:13)
#loc211 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":160:28)
#loc212 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":160:46)
#loc213 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":160:9)
#loc214 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":161:9)
#loc215 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":164:9)
#loc216 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":161:18)
#loc217 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":161:14)
#loc218 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":161:21)
#loc219 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":161:33)
#loc220 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":162:9)
#loc221 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":163:29)
#loc222 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":163:13)
#loc223 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":163:24)
#loc224 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":163:25)
#loc225 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":161:40)
#loc226 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":161:39)
#loc227 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":165:22)
#loc228 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":165:33)
#loc229 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":165:34)
#loc230 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":165:9)
#loc231 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":166:19)
#loc232 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":170:1)
#loc233 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":173:1)
#loc234 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_16.cpp":172:5)
#loc235 = loc(fused[#loc1, #loc2])
#loc236 = loc(fused[#loc3, #loc4])
#loc237 = loc(fused[#loc5, #loc6])
#loc238 = loc(fused[#loc7, #loc8])
#loc239 = loc(fused[#loc9, #loc10])
#loc240 = loc(fused[#loc11, #loc12])
#loc241 = loc(fused[#loc13, #loc14])
#loc242 = loc(fused[#loc15, #loc16])
#loc243 = loc(fused[#loc17, #loc18])
#loc244 = loc(fused[#loc19, #loc20])
#loc245 = loc(fused[#loc21, #loc22])
#loc246 = loc(fused[#loc23, #loc24])
#loc247 = loc(fused[#loc27, #loc25])
#loc248 = loc(fused[#loc28, #loc29])
#loc249 = loc(fused[#loc31, #loc29])
#loc250 = loc(fused[#loc32, #loc33])
#loc251 = loc(fused[#loc34, #loc35])
#loc252 = loc(fused[#loc36, #loc37])
#loc253 = loc(fused[#loc38, #loc39])
#loc254 = loc(fused[#loc40, #loc41])
#loc255 = loc(fused[#loc42, #loc43])
#loc256 = loc(fused[#loc44, #loc45])
#loc257 = loc(fused[#loc46, #loc47])
#loc258 = loc(fused[#loc52, #loc53])
#loc259 = loc(fused[#loc54, #loc55])
#loc260 = loc(fused[#loc56, #loc57])
#loc261 = loc(fused[#loc58, #loc55])
#loc262 = loc(fused[#loc60, #loc61])
#loc263 = loc(fused[#loc63, #loc64])
#loc264 = loc(fused[#loc65, #loc66])
#loc265 = loc(fused[#loc69, #loc67])
#loc266 = loc(fused[#loc73, #loc70])
#loc267 = loc(fused[#loc77, #loc78])
#loc268 = loc(fused[#loc79, #loc80])
#loc269 = loc(fused[#loc82, #loc83])
#loc270 = loc(fused[#loc84, #loc85])
#loc271 = loc(fused[#loc86, #loc87])
#loc272 = loc(fused[#loc88, #loc80])
#loc273 = loc(fused[#loc90, #loc91])
#loc274 = loc(fused[#loc94, #loc95])
#loc275 = loc(fused[#loc96, #loc91])
#loc276 = loc(fused[#loc102, #loc103])
#loc277 = loc(fused[#loc104, #loc105])
#loc278 = loc(fused[#loc106, #loc107])
#loc279 = loc(fused[#loc108, #loc105])
#loc280 = loc(fused[#loc112, #loc113])
#loc281 = loc(fused[#loc116, #loc117])
#loc282 = loc(fused[#loc118, #loc119])
#loc283 = loc(fused[#loc120, #loc121])
#loc284 = loc(fused[#loc123, #loc124])
#loc285 = loc(fused[#loc125, #loc119])
#loc286 = loc(fused[#loc129, #loc127])
#loc287 = loc(fused[#loc132, #loc133])
#loc288 = loc(fused[#loc135, #loc136])
#loc289 = loc(fused[#loc137, #loc138])
#loc290 = loc(fused[#loc139, #loc136])
#loc291 = loc(fused[#loc142, #loc143])
#loc292 = loc(fused[#loc144, #loc145])
#loc293 = loc(fused[#loc146, #loc143])
#loc294 = loc(fused[#loc150, #loc151])
#loc295 = loc(fused[#loc152, #loc153])
#loc296 = loc(fused[#loc152, #loc154])
#loc297 = loc(fused[#loc155, #loc156])
#loc298 = loc(fused[#loc158, #loc159])
#loc299 = loc(fused[#loc157, #loc159])
#loc300 = loc(fused[#loc160, #loc159])
#loc301 = loc(fused[#loc163, #loc164])
#loc302 = loc(fused[#loc165, #loc164])
#loc303 = loc(fused[#loc166, #loc167])
#loc304 = loc(fused[#loc169, #loc168])
#loc305 = loc(fused[#loc170, #loc171])
#loc306 = loc(fused[#loc172, #loc167])
#loc307 = loc(fused[#loc174, #loc173])
#loc308 = loc(fused[#loc178, #loc177])
#loc309 = loc(fused[#loc184, #loc185])
#loc310 = loc(fused[#loc186, #loc187])
#loc311 = loc(fused[#loc190, #loc188])
#loc312 = loc(fused[#loc191, #loc192])
#loc313 = loc(fused[#loc194, #loc192])
#loc314 = loc(fused[#loc196, #loc195])
#loc315 = loc(fused[#loc198, #loc199])
#loc316 = loc(fused[#loc200, #loc201])
#loc317 = loc(fused[#loc200, #loc202])
#loc318 = loc(fused[#loc203, #loc204])
#loc319 = loc(fused[#loc206, #loc207])
#loc320 = loc(fused[#loc205, #loc207])
#loc321 = loc(fused[#loc208, #loc207])
#loc322 = loc(fused[#loc211, #loc212])
#loc323 = loc(fused[#loc213, #loc212])
#loc324 = loc(fused[#loc214, #loc215])
#loc325 = loc(fused[#loc217, #loc216])
#loc326 = loc(fused[#loc218, #loc219])
#loc327 = loc(fused[#loc220, #loc215])
#loc328 = loc(fused[#loc222, #loc221])
#loc329 = loc(fused[#loc226, #loc225])
#loc330 = loc(fused[#loc232, #loc233])
