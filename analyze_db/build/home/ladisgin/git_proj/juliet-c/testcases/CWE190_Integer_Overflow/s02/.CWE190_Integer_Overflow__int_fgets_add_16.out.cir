!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":138:10)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":138:14)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":138:20)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":138:32)
#loc181 = loc(fused[#loc68, #loc69])
#loc182 = loc(fused[#loc70, #loc71])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc157)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc158)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc159)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc160)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc161)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_add_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc163)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc16)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc20)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc20)
        cir.condition(%3) loc(#loc20)
      } do {
        cir.scope {
          %2 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc167)
          %3 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc167)
          cir.store %3, %2 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc167)
          cir.scope {
            %4 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc27)
            %5 = cir.const #cir.int<3> : !s32i loc(#loc28)
            %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc28)
            %7 = cir.const #cir.int<4> : !u64i loc(#loc28)
            %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc28)
            %9 = cir.const #cir.int<2> : !s32i loc(#loc28)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc28)
            %11 = cir.binop(add, %8, %10) : !u64i loc(#loc28)
            %12 = cir.cast(integral, %11 : !u64i), !s32i loc(#loc28)
            %13 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc158)
            %14 = cir.load %13 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc29)
            %15 = cir.call @fgets(%4, %12, %14) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc30)
            %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc31)
            %18 = cir.cmp(ne, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc169)
            cir.if %18 {
              %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc35)
              %20 = cir.call @atoi(%19) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc36)
              cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc171)
            } else {
              %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
              %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc39)
            } loc(#loc170)
          } loc(#loc168)
        } loc(#loc166)
        cir.break loc(#loc40)
      } loc(#loc165)
    } loc(#loc165)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc43)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc43)
        cir.condition(%3) loc(#loc43)
      } do {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc174)
          %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc48)
          %4 = cir.const #cir.int<1> : !s32i loc(#loc47)
          %5 = cir.binop(add, %3, %4) nsw : !s32i loc(#loc48)
          cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc174)
          %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc49)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc50)
        } loc(#loc173)
        cir.break loc(#loc51)
      } loc(#loc172)
    } loc(#loc172)
    cir.return loc(#loc13)
  } loc(#loc162)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_add_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc176)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc54)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc177)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc56)
    cir.return loc(#loc53)
  } loc(#loc175)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc178)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc179)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc64)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc65)
  cir.func @main(%arg0: !s32i loc(fused[#loc68, #loc69]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc70, #loc71])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc181)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc182)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc67)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc72)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc72)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc73)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc74)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc74)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc75)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc62)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_fgets_add_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc183)
    cir.call @CWE190_Integer_Overflow__int_fgets_add_16_good() : () -> () loc(#loc77)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc63)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc64)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_fgets_add_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc184)
    cir.call @CWE190_Integer_Overflow__int_fgets_add_16_bad() : () -> () loc(#loc81)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc65)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc84)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc185)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc185)
    cir.return %17 : !s32i loc(#loc185)
  } loc(#loc180)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc86)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc187)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc91)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc95)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc95)
        cir.condition(%3) loc(#loc95)
      } do {
        cir.scope {
          %2 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc191)
          %3 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc191)
          cir.store %3, %2 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc191)
          cir.scope {
            %4 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc102)
            %5 = cir.const #cir.int<3> : !s32i loc(#loc103)
            %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc103)
            %7 = cir.const #cir.int<4> : !u64i loc(#loc103)
            %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc103)
            %9 = cir.const #cir.int<2> : !s32i loc(#loc103)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc103)
            %11 = cir.binop(add, %8, %10) : !u64i loc(#loc103)
            %12 = cir.cast(integral, %11 : !u64i), !s32i loc(#loc103)
            %13 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc158)
            %14 = cir.load %13 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc104)
            %15 = cir.call @fgets(%4, %12, %14) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc105)
            %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc106)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc106)
            %18 = cir.cmp(ne, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc193)
            cir.if %18 {
              %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc110)
              %20 = cir.call @atoi(%19) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc111)
              cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc195)
            } else {
              %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc114)
              %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc114)
              cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc115)
            } loc(#loc194)
          } loc(#loc192)
        } loc(#loc190)
        cir.break loc(#loc116)
      } loc(#loc189)
    } loc(#loc189)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc119)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc119)
        cir.condition(%3) loc(#loc119)
      } do {
        cir.scope {
          %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc122)
          %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc123)
          %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc198)
          cir.if %4 {
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc200)
            %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
            %7 = cir.const #cir.int<1> : !s32i loc(#loc128)
            %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc129)
            cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc200)
            %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc130)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc131)
          } else {
            %5 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc86)
            %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc86)
            cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc132)
          } loc(#loc199)
        } loc(#loc197)
        cir.break loc(#loc133)
      } loc(#loc196)
    } loc(#loc196)
    cir.return loc(#loc88)
  } loc(#loc186)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc202)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc138)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc203)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc142)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc142)
        cir.condition(%3) loc(#loc142)
      } do {
        %2 = cir.const #cir.int<2> : !s32i loc(#loc143)
        cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc205)
        cir.break loc(#loc145)
      } loc(#loc204)
    } loc(#loc204)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc148)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc148)
        cir.condition(%3) loc(#loc148)
      } do {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc208)
          %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc153)
          %4 = cir.const #cir.int<1> : !s32i loc(#loc152)
          %5 = cir.binop(add, %3, %4) nsw : !s32i loc(#loc153)
          cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc208)
          %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc154)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc155)
        } loc(#loc207)
        cir.break loc(#loc156)
      } loc(#loc206)
    } loc(#loc206)
    cir.return loc(#loc135)
  } loc(#loc201)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":41:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":24:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":55:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":26:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":26:9)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":28:12)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":28:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":29:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":45:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":29:11)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":31:9)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":43:9)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":32:13)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":32:49)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":34:13)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":42:13)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":34:23)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":34:36)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":34:53)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":34:17)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":34:63)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":35:13)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":38:13)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":40:13)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":37:29)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":37:24)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":37:17)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":37:40)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":41:17)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":44:9)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":46:5)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":54:5)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":46:11)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":48:9)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":52:9)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":50:13)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":50:33)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":50:26)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":51:26)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":51:13)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":53:9)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":123:1)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":127:1)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":125:5)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":125:13)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":126:5)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":126:13)
#loc58 = loc("/usr/include/stdlib.h":575:1)
#loc59 = loc("/usr/include/stdlib.h":575:41)
#loc60 = loc("/usr/include/time.h":76:1)
#loc61 = loc("/usr/include/time.h":76:38)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":143:15)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":145:15)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":148:15)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":150:15)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":138:1)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":153:1)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":139:1)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":141:27)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":141:22)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":141:5)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":143:5)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":144:5)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":144:52)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":145:5)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":148:5)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":149:5)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":149:51)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":150:5)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":152:12)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":152:5)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":94:23)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":62:1)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":98:1)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":64:5)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":64:9)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":66:12)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":66:5)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":67:5)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":83:5)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":67:11)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":69:9)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":81:9)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":70:13)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":70:49)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":72:13)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":80:13)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":72:23)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":72:36)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":72:53)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":72:17)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":72:63)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":73:13)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":76:13)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":78:13)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":75:29)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":75:24)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":75:17)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":75:40)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":79:27)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":79:17)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":82:9)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":84:5)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":97:5)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":84:11)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":87:9)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":95:9)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":87:13)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":87:20)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":88:9)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":91:9)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":93:9)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":89:13)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":89:33)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":89:26)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":90:26)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":90:13)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":94:13)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":96:9)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":101:1)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":121:1)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":103:5)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":103:9)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":105:12)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":105:5)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":106:5)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":111:5)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":106:11)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":109:16)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":109:9)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":110:9)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":112:5)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":120:5)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":112:11)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":114:9)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":118:9)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":116:13)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":116:33)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":116:26)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":117:26)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":117:13)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_add_16.c":119:9)
#loc157 = loc(fused[#loc1, #loc2])
#loc158 = loc(fused[#loc3, #loc4])
#loc159 = loc(fused[#loc5, #loc6])
#loc160 = loc(fused[#loc7, #loc8])
#loc161 = loc(fused[#loc10, #loc11])
#loc162 = loc(fused[#loc12, #loc13])
#loc163 = loc(fused[#loc14, #loc15])
#loc164 = loc(fused[#loc17, #loc16])
#loc165 = loc(fused[#loc18, #loc19])
#loc166 = loc(fused[#loc21, #loc22])
#loc167 = loc(fused[#loc23, #loc24])
#loc168 = loc(fused[#loc25, #loc26])
#loc169 = loc(fused[#loc30, #loc31])
#loc170 = loc(fused[#loc32, #loc33, #loc34, #loc26])
#loc171 = loc(fused[#loc37, #loc38])
#loc172 = loc(fused[#loc41, #loc42])
#loc173 = loc(fused[#loc44, #loc45])
#loc174 = loc(fused[#loc46, #loc47])
#loc175 = loc(fused[#loc52, #loc53])
#loc176 = loc(fused[#loc54, #loc55])
#loc177 = loc(fused[#loc56, #loc57])
#loc178 = loc(fused[#loc58, #loc59])
#loc179 = loc(fused[#loc60, #loc61])
#loc180 = loc(fused[#loc66, #loc67])
#loc183 = loc(fused[#loc77, #loc78])
#loc184 = loc(fused[#loc81, #loc82])
#loc185 = loc(fused[#loc85, #loc84])
#loc186 = loc(fused[#loc87, #loc88])
#loc187 = loc(fused[#loc89, #loc90])
#loc188 = loc(fused[#loc92, #loc91])
#loc189 = loc(fused[#loc93, #loc94])
#loc190 = loc(fused[#loc96, #loc97])
#loc191 = loc(fused[#loc98, #loc99])
#loc192 = loc(fused[#loc100, #loc101])
#loc193 = loc(fused[#loc105, #loc106])
#loc194 = loc(fused[#loc107, #loc108, #loc109, #loc101])
#loc195 = loc(fused[#loc112, #loc113])
#loc196 = loc(fused[#loc117, #loc118])
#loc197 = loc(fused[#loc120, #loc121])
#loc198 = loc(fused[#loc122, #loc123])
#loc199 = loc(fused[#loc124, #loc125, #loc126, #loc121])
#loc200 = loc(fused[#loc127, #loc128])
#loc201 = loc(fused[#loc134, #loc135])
#loc202 = loc(fused[#loc136, #loc137])
#loc203 = loc(fused[#loc139, #loc138])
#loc204 = loc(fused[#loc140, #loc141])
#loc205 = loc(fused[#loc144, #loc143])
#loc206 = loc(fused[#loc146, #loc147])
#loc207 = loc(fused[#loc149, #loc150])
#loc208 = loc(fused[#loc151, #loc152])
