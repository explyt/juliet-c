!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc53 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":124:10)
#loc54 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":124:14)
#loc55 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":124:20)
#loc56 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":124:32)
#loc160 = loc(fused[#loc53, #loc54])
#loc161 = loc(fused[#loc55, #loc56])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc139)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"shouldn't see this value\00" : !cir.array<!s8i x 25>> : !cir.array<!s8i x 25> {alignment = 1 : i64} loc(#loc3)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc140)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"0\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc6)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"1\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc141)
  cir.func no_proto @CWE478_Missing_Default_Case_in_Switch__basic_07_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc139)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc14)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc15)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc144)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc147)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc148)
          %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc3)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc3)
          cir.store %7, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc147)
          %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %9 = cir.const #cir.int<3> : !s32i loc(#loc23)
          %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc149)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc150)
          cir.scope {
            %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc28)
            cir.switch (%12 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc6)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc6)
                cir.store %14, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc152)
                cir.break loc(#loc31)
              } loc(#loc29)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc7)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc7)
                cir.store %14, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc153)
                cir.break loc(#loc34)
              } loc(#loc32)
              cir.yield loc(#loc26)
            } loc(#loc26)
          } loc(#loc151)
          %11 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc35)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc36)
        } loc(#loc146)
      } loc(#loc145)
    } loc(#loc143)
    cir.return loc(#loc11)
  } loc(#loc142)
  cir.func no_proto @CWE478_Missing_Default_Case_in_Switch__basic_07_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc155)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc156)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    cir.return loc(#loc38)
  } loc(#loc154)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc157)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc158)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc50)
  cir.func @main(%arg0: !s32i loc(fused[#loc53, #loc54]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc55, #loc56])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc160)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc161)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc52)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc57)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc57)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc58)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc59)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc59)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc60)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc47)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %8 = cir.get_global @CWE478_Missing_Default_Case_in_Switch__basic_07_good : !cir.ptr<!cir.func<!void ()>> loc(#loc162)
    cir.call @CWE478_Missing_Default_Case_in_Switch__basic_07_good() : () -> () loc(#loc62)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc48)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc49)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %13 = cir.get_global @CWE478_Missing_Default_Case_in_Switch__basic_07_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc163)
    cir.call @CWE478_Missing_Default_Case_in_Switch__basic_07_bad() : () -> () loc(#loc66)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc50)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc69)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc164)
    cir.return %17 : !s32i loc(#loc164)
  } loc(#loc159)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc71)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc139)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc76)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc77)
      %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc167)
      cir.if %3 {
        %4 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc71)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc71)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc81)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc170)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc171)
          %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc85)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc85)
          cir.store %7, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc170)
          %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
          %9 = cir.const #cir.int<3> : !s32i loc(#loc89)
          %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc172)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc173)
          cir.scope {
            %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc94)
            cir.switch (%12 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc96)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc96)
                cir.store %14, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc175)
                cir.break loc(#loc98)
              } loc(#loc95)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc100)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc100)
                cir.store %14, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc176)
                cir.break loc(#loc102)
              } loc(#loc99)
              cir.case(default, []) {
                cir.return loc(#loc104)
              } loc(#loc103)
              cir.yield loc(#loc92)
            } loc(#loc92)
          } loc(#loc174)
          %11 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc105)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc106)
        } loc(#loc169)
      } loc(#loc168)
    } loc(#loc166)
    cir.return loc(#loc73)
  } loc(#loc165)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc139)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc111)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc112)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc179)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc182)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc183)
          %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc117)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc117)
          cir.store %7, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc182)
          %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc120)
          %9 = cir.const #cir.int<3> : !s32i loc(#loc121)
          %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc184)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc185)
          cir.scope {
            %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc126)
            cir.switch (%12 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc128)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc128)
                cir.store %14, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc187)
                cir.break loc(#loc130)
              } loc(#loc127)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc132)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc132)
                cir.store %14, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc188)
                cir.break loc(#loc134)
              } loc(#loc131)
              cir.case(default, []) {
                cir.return loc(#loc136)
              } loc(#loc135)
              cir.yield loc(#loc124)
            } loc(#loc124)
          } loc(#loc186)
          %11 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc137)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc138)
        } loc(#loc181)
      } loc(#loc180)
    } loc(#loc178)
    cir.return loc(#loc108)
  } loc(#loc177)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_07.c":0:0)
#loc1 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":21:1)
#loc2 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":21:25)
#loc3 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":30:38)
#loc4 = loc("/usr/include/stdlib.h":573:1)
#loc5 = loc("/usr/include/stdlib.h":573:24)
#loc6 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":36:30)
#loc7 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":39:30)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":25:1)
#loc11 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":46:1)
#loc12 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":27:5)
#loc13 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":45:5)
#loc14 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":27:8)
#loc15 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":27:20)
#loc16 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":28:5)
#loc17 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":29:9)
#loc18 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":44:9)
#loc19 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":30:13)
#loc20 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":31:13)
#loc21 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":31:17)
#loc22 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":32:18)
#loc23 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":32:27)
#loc24 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":32:13)
#loc25 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":32:28)
#loc26 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":33:13)
#loc27 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":42:13)
#loc28 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":33:21)
#loc29 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":35:13)
#loc30 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":36:17)
#loc31 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":37:17)
#loc32 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":38:13)
#loc33 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":39:17)
#loc34 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":40:17)
#loc35 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":43:23)
#loc36 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":43:13)
#loc37 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":109:1)
#loc38 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":113:1)
#loc39 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":111:5)
#loc40 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":111:11)
#loc41 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":112:5)
#loc42 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":112:11)
#loc43 = loc("/usr/include/stdlib.h":575:1)
#loc44 = loc("/usr/include/stdlib.h":575:41)
#loc45 = loc("/usr/include/time.h":76:1)
#loc46 = loc("/usr/include/time.h":76:38)
#loc47 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":129:15)
#loc48 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":131:15)
#loc49 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":134:15)
#loc50 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":136:15)
#loc51 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":124:1)
#loc52 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":139:1)
#loc57 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":125:1)
#loc58 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":127:27)
#loc59 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":127:22)
#loc60 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":127:5)
#loc61 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":129:5)
#loc62 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":130:5)
#loc63 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":130:58)
#loc64 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":131:5)
#loc65 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":134:5)
#loc66 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":135:5)
#loc67 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":135:57)
#loc68 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":136:5)
#loc69 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":138:12)
#loc70 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":138:5)
#loc71 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":58:19)
#loc72 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":53:1)
#loc73 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":81:1)
#loc74 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":55:5)
#loc75 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":80:5)
#loc76 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":55:8)
#loc77 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":55:20)
#loc78 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":56:5)
#loc79 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":59:5)
#loc80 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":61:5)
#loc81 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":58:9)
#loc82 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":62:9)
#loc83 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":79:9)
#loc84 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":63:13)
#loc85 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":63:38)
#loc86 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":64:13)
#loc87 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":64:17)
#loc88 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":65:18)
#loc89 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":65:27)
#loc90 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":65:13)
#loc91 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":65:28)
#loc92 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":66:13)
#loc93 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":77:13)
#loc94 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":66:21)
#loc95 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":68:13)
#loc96 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":69:30)
#loc97 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":69:17)
#loc98 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":70:17)
#loc99 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":71:13)
#loc100 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":72:30)
#loc101 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":72:17)
#loc102 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":73:17)
#loc103 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":75:13)
#loc104 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":76:17)
#loc105 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":78:23)
#loc106 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":78:13)
#loc107 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":84:1)
#loc108 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":107:1)
#loc109 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":86:5)
#loc110 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":106:5)
#loc111 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":86:8)
#loc112 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":86:20)
#loc113 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":87:5)
#loc114 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":88:9)
#loc115 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":105:9)
#loc116 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":89:13)
#loc117 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":89:38)
#loc118 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":90:13)
#loc119 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":90:17)
#loc120 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":91:18)
#loc121 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":91:27)
#loc122 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":91:13)
#loc123 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":91:28)
#loc124 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":92:13)
#loc125 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":103:13)
#loc126 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":92:21)
#loc127 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":94:13)
#loc128 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":95:30)
#loc129 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":95:17)
#loc130 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":96:17)
#loc131 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":97:13)
#loc132 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":98:30)
#loc133 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":98:17)
#loc134 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":99:17)
#loc135 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":101:13)
#loc136 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":102:17)
#loc137 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":104:23)
#loc138 = loc("CWE478_Missing_Default_Case_in_Switch__basic_07.c":104:13)
#loc139 = loc(fused[#loc1, #loc2])
#loc140 = loc(fused[#loc4, #loc5])
#loc141 = loc(fused[#loc8, #loc9])
#loc142 = loc(fused[#loc10, #loc11])
#loc143 = loc(fused[#loc12, #loc13])
#loc144 = loc(fused[#loc14, #loc15])
#loc145 = loc(fused[#loc16, #loc13])
#loc146 = loc(fused[#loc17, #loc18])
#loc147 = loc(fused[#loc19, #loc3])
#loc148 = loc(fused[#loc20, #loc21])
#loc149 = loc(fused[#loc22, #loc23])
#loc150 = loc(fused[#loc24, #loc25])
#loc151 = loc(fused[#loc26, #loc27])
#loc152 = loc(fused[#loc30, #loc6])
#loc153 = loc(fused[#loc33, #loc7])
#loc154 = loc(fused[#loc37, #loc38])
#loc155 = loc(fused[#loc39, #loc40])
#loc156 = loc(fused[#loc41, #loc42])
#loc157 = loc(fused[#loc43, #loc44])
#loc158 = loc(fused[#loc45, #loc46])
#loc159 = loc(fused[#loc51, #loc52])
#loc162 = loc(fused[#loc62, #loc63])
#loc163 = loc(fused[#loc66, #loc67])
#loc164 = loc(fused[#loc70, #loc69])
#loc165 = loc(fused[#loc72, #loc73])
#loc166 = loc(fused[#loc74, #loc75])
#loc167 = loc(fused[#loc76, #loc77])
#loc168 = loc(fused[#loc78, #loc79, #loc80, #loc75])
#loc169 = loc(fused[#loc82, #loc83])
#loc170 = loc(fused[#loc84, #loc85])
#loc171 = loc(fused[#loc86, #loc87])
#loc172 = loc(fused[#loc88, #loc89])
#loc173 = loc(fused[#loc90, #loc91])
#loc174 = loc(fused[#loc92, #loc93])
#loc175 = loc(fused[#loc97, #loc96])
#loc176 = loc(fused[#loc101, #loc100])
#loc177 = loc(fused[#loc107, #loc108])
#loc178 = loc(fused[#loc109, #loc110])
#loc179 = loc(fused[#loc111, #loc112])
#loc180 = loc(fused[#loc113, #loc110])
#loc181 = loc(fused[#loc114, #loc115])
#loc182 = loc(fused[#loc116, #loc117])
#loc183 = loc(fused[#loc118, #loc119])
#loc184 = loc(fused[#loc120, #loc121])
#loc185 = loc(fused[#loc122, #loc123])
#loc186 = loc(fused[#loc124, #loc125])
#loc187 = loc(fused[#loc129, #loc128])
#loc188 = loc(fused[#loc133, #loc132])
