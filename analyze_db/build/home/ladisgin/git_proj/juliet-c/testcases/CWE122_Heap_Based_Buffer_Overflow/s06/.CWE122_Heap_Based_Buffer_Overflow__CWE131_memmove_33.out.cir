!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":87:10)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":87:14)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":87:20)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":87:32)
#loc167 = loc(fused[#loc108, #loc109])
#loc168 = loc(fused[#loc110, #loc111])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc124)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc125)
  cir.func private @printIntLine(!s32i) loc(#loc126)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc127)
  cir.func @_ZN52CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc129)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc130)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc14)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc15)
    cir.store %2, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc131)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc17)
    %4 = cir.const #cir.int<10> : !s32i loc(#loc18)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc18)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc17)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc132)
    cir.store %7, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc133)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc23)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc24)
      %10 = cir.cmp(eq, %8, %9) : !cir.ptr<!s32i>, !cir.bool loc(#loc135)
      cir.if %10 {
        %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc26)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc28)
        cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc26)
      } loc(#loc136)
    } loc(#loc134)
    cir.scope {
      %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc138)
      %9 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc32)
      %10 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
      cir.store %10, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc138)
      cir.scope {
        %11 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc140)
        %12 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc140)
        cir.store %12, %11 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc140)
        %13 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc37)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc37)
        %15 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc38)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc38)
        %17 = cir.const #cir.int<10> : !s32i loc(#loc39)
        %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc39)
        %19 = cir.const #cir.int<4> : !u64i loc(#loc141)
        %20 = cir.binop(mul, %18, %19) : !u64i loc(#loc142)
        cir.libc.memmove %20 bytes from %16 to %14 : !cir.ptr<!void>, !u64i loc(#loc143)
        %21 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
        %22 = cir.const #cir.int<0> : !s32i loc(#loc45)
        %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc46)
        %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc44)
        cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc47)
        %25 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc48)
        %26 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
        %27 = cir.cast(bitcast, %26 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc49)
        cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc48)
      } loc(#loc139)
    } loc(#loc137)
    cir.return loc(#loc10)
  } loc(#loc128)
  cir.func internal private @_ZN52CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc145)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc146)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc55)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc56)
    cir.store %2, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc147)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc58)
    %4 = cir.const #cir.int<10> : !s32i loc(#loc59)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc59)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc148)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc149)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc58)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc150)
    cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc151)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc66)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc67)
      %12 = cir.cmp(eq, %10, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc153)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc69)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc70)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc71)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc69)
      } loc(#loc154)
    } loc(#loc152)
    cir.scope {
      %10 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc156)
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc75)
      %12 = cir.load %11 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc75)
      cir.store %12, %10 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc156)
      cir.scope {
        %13 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc158)
        %14 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc158)
        cir.store %14, %13 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc158)
        %15 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc80)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc80)
        %17 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc81)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc81)
        %19 = cir.const #cir.int<10> : !s32i loc(#loc82)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc82)
        %21 = cir.const #cir.int<4> : !u64i loc(#loc159)
        %22 = cir.binop(mul, %20, %21) : !u64i loc(#loc160)
        cir.libc.memmove %22 bytes from %18 to %16 : !cir.ptr<!void>, !u64i loc(#loc161)
        %23 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc87)
        %24 = cir.const #cir.int<0> : !s32i loc(#loc88)
        %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc89)
        %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc87)
        cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc90)
        %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc91)
        %28 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc92)
        %29 = cir.cast(bitcast, %28 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc92)
        cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc91)
      } loc(#loc157)
    } loc(#loc155)
    cir.return loc(#loc51)
  } loc(#loc144)
  cir.func @_ZN52CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN52CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33L7goodG2BEv() : () -> () loc(#loc95)
    cir.return loc(#loc94)
  } loc(#loc162)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc163)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc164)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc165)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc102)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc103)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc105)
  cir.func @main(%arg0: !s32i loc(fused[#loc108, #loc109]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc110, #loc111])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc167)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc168)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc107)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc112)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc113)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc114)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc114)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc115)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc102)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc102)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc116)
    cir.call @_ZN52CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_334goodEv() : () -> () loc(#loc117)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc103)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc103)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc118)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc104)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc104)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc119)
    cir.call @_ZN52CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_333badEv() : () -> () loc(#loc120)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc105)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc105)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc121)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc122)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc169)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc169)
    cir.return %15 : !s32i loc(#loc169)
  } loc(#loc166)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":24:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":42:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":26:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":26:11)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":27:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":27:22)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":28:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":28:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":30:19)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":30:26)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":30:28)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":30:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":31:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":31:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":31:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":31:17)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":31:23)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":31:24)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":31:30)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":31:29)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":32:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":41:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":33:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":33:22)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":34:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":40:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":35:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":35:32)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":37:21)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":37:27)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":37:35)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":37:38)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":37:48)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":37:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":37:49)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":38:26)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":38:31)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":38:32)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":38:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":39:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":39:18)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":49:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":67:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":51:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":51:11)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":52:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":52:22)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":53:12)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":53:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":55:19)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":55:26)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":55:29)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":55:39)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":55:40)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":55:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":56:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":56:33)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":56:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":56:17)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":56:23)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":56:24)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":56:30)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":56:29)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":57:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":66:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":58:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":58:22)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":59:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":65:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":60:13)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":60:32)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":62:21)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":62:27)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":62:35)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":62:38)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":62:48)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":62:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":62:49)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":63:26)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":63:31)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":63:32)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":63:13)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":64:13)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":64:18)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":69:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":72:1)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":71:5)
#loc96 = loc("/usr/include/stdlib.h":575:1)
#loc97 = loc("/usr/include/stdlib.h":575:41)
#loc98 = loc("/usr/include/time.h":76:1)
#loc99 = loc("/usr/include/time.h":76:38)
#loc100 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc101 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":92:15)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":94:15)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":97:15)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":99:15)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":87:1)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":102:1)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":88:1)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":90:27)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":90:22)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":90:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":92:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":93:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":94:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":97:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":98:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":99:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":101:12)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_33.cpp":101:5)
#loc124 = loc(fused[#loc1, #loc2])
#loc125 = loc(fused[#loc3, #loc4])
#loc126 = loc(fused[#loc5, #loc6])
#loc127 = loc(fused[#loc7, #loc8])
#loc128 = loc(fused[#loc9, #loc10])
#loc129 = loc(fused[#loc11, #loc12])
#loc130 = loc(fused[#loc13, #loc14])
#loc131 = loc(fused[#loc16, #loc15])
#loc132 = loc(fused[#loc17, #loc19])
#loc133 = loc(fused[#loc20, #loc19])
#loc134 = loc(fused[#loc21, #loc22])
#loc135 = loc(fused[#loc23, #loc24])
#loc136 = loc(fused[#loc25, #loc22])
#loc137 = loc(fused[#loc29, #loc30])
#loc138 = loc(fused[#loc31, #loc32])
#loc139 = loc(fused[#loc33, #loc34])
#loc140 = loc(fused[#loc35, #loc36])
#loc141 = loc(fused[#loc40, #loc41])
#loc142 = loc(fused[#loc39, #loc41])
#loc143 = loc(fused[#loc42, #loc43])
#loc144 = loc(fused[#loc50, #loc51])
#loc145 = loc(fused[#loc52, #loc53])
#loc146 = loc(fused[#loc54, #loc55])
#loc147 = loc(fused[#loc57, #loc56])
#loc148 = loc(fused[#loc60, #loc61])
#loc149 = loc(fused[#loc59, #loc61])
#loc150 = loc(fused[#loc58, #loc62])
#loc151 = loc(fused[#loc63, #loc62])
#loc152 = loc(fused[#loc64, #loc65])
#loc153 = loc(fused[#loc66, #loc67])
#loc154 = loc(fused[#loc68, #loc65])
#loc155 = loc(fused[#loc72, #loc73])
#loc156 = loc(fused[#loc74, #loc75])
#loc157 = loc(fused[#loc76, #loc77])
#loc158 = loc(fused[#loc78, #loc79])
#loc159 = loc(fused[#loc83, #loc84])
#loc160 = loc(fused[#loc82, #loc84])
#loc161 = loc(fused[#loc85, #loc86])
#loc162 = loc(fused[#loc93, #loc94])
#loc163 = loc(fused[#loc96, #loc97])
#loc164 = loc(fused[#loc98, #loc99])
#loc165 = loc(fused[#loc100, #loc101])
#loc166 = loc(fused[#loc106, #loc107])
#loc169 = loc(fused[#loc123, #loc122])
