!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc13 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":20:23)
#loc14 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":20:27)
#loc58 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":96:10)
#loc59 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":96:14)
#loc60 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":96:20)
#loc61 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":96:32)
#loc81 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":35:24)
#loc82 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":35:28)
#loc115 = loc(fused[#loc13, #loc14])
#loc131 = loc(fused[#loc58, #loc59])
#loc132 = loc(fused[#loc60, #loc61])
#loc138 = loc(fused[#loc81, #loc82])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE479_Signal_Handler_Use_of_Non_Reentrant_Function/CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @globalFive : !s32i {alignment = 4 : i64} loc(#loc109)
  cir.func private @signal(!s32i, !cir.ptr<!cir.func<!void (!s32i)>>) -> !cir.ptr<!cir.func<!void (!s32i)>> extra(#fn_attr) loc(#loc110)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc111)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc112)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc113)
  cir.func internal private @helperBad(%arg0: !s32i loc(fused[#loc13, #loc14])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["sig", init] {alignment = 4 : i64} loc(#loc115)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["voidPointer", init] {alignment = 8 : i64} loc(#loc116)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc17)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc18)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc19)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc19)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc18)
    cir.store %5, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc116)
    cir.br ^bb1 loc(#loc117)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc22)
    %7 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc23)
    %8 = cir.cmp(eq, %6, %7) : !cir.ptr<!void>, !cir.bool loc(#loc118)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc119)
  ^bb2:  // pred: ^bb1
    %9 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc25)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc27)
    cir.call @exit(%11) : (!s32i) -> () extra(#fn_attr) loc(#loc25)
    cir.br ^bb3 loc(#loc21)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc21)
  ^bb4:  // pred: ^bb3
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc28)
    cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc29)
    cir.return loc(#loc12)
  } loc(#loc114)
  cir.func no_proto @CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14_bad() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc121)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc109)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc34)
    %2 = cir.const #cir.int<5> : !s32i loc(#loc35)
    %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc122)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc123)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<2> : !s32i loc(#loc37)
    %5 = cir.get_global @helperBad : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc38)
    %6 = cir.call @signal(%4, %5) : (!s32i, !cir.ptr<!cir.func<!void (!s32i)>>) -> !cir.ptr<!cir.func<!void (!s32i)>> extra(#fn_attr) loc(#loc39)
    cir.br ^bb3 loc(#loc33)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc33)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc31)
  } loc(#loc120)
  cir.func no_proto @CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc125)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc126)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    cir.return loc(#loc41)
  } loc(#loc124)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc127)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc128)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc129)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc55)
  cir.func @main(%arg0: !s32i loc(fused[#loc58, #loc59]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc60, #loc61])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc131)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc132)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc57)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc62)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc62)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc63)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc64)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc64)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc65)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc52)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %8 = cir.get_global @CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14_good : !cir.ptr<!cir.func<!void ()>> loc(#loc133)
    cir.call @CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14_good() : () -> () loc(#loc67)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc53)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc54)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %13 = cir.get_global @CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc134)
    cir.call @CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14_bad() : () -> () loc(#loc71)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc55)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc74)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc135)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc135)
    cir.return %17 : !s32i loc(#loc135)
  } loc(#loc130)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc76)
  cir.global "private" internal dsolocal @volatileSigAtomic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc136)
  cir.func internal private @helperGood(%arg0: !s32i loc(fused[#loc81, #loc82])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["sig", init] {alignment = 4 : i64} loc(#loc138)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc84)
    %2 = cir.get_global @volatileSigAtomic : !cir.ptr<!s32i> loc(#loc136)
    cir.store volatile %1, %2 : !s32i, !cir.ptr<!s32i> loc(#loc139)
    cir.return loc(#loc80)
  } loc(#loc137)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc141)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc109)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc90)
    %2 = cir.const #cir.int<5> : !s32i loc(#loc91)
    %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc142)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc143)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc76)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    cir.br ^bb4 loc(#loc93)
  ^bb3:  // pred: ^bb1
    %6 = cir.const #cir.int<2> : !s32i loc(#loc96)
    %7 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc97)
    %8 = cir.call @signal(%6, %7) : (!s32i, !cir.ptr<!cir.func<!void (!s32i)>>) -> !cir.ptr<!cir.func<!void (!s32i)>> extra(#fn_attr) loc(#loc98)
    cir.br ^bb4 loc(#loc89)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc89)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc87)
  } loc(#loc140)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc145)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc109)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
    %2 = cir.const #cir.int<5> : !s32i loc(#loc104)
    %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc146)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc147)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<2> : !s32i loc(#loc106)
    %5 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc107)
    %6 = cir.call @signal(%4, %5) : (!s32i, !cir.ptr<!cir.func<!void (!s32i)>>) -> !cir.ptr<!cir.func<!void (!s32i)>> extra(#fn_attr) loc(#loc108)
    cir.br ^bb3 loc(#loc102)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc102)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc100)
  } loc(#loc144)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE479_Signal_Handler_Use_of_Non_Reentrant_Function/CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":118:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":118:12)
#loc3 = loc("/usr/include/signal.h":88:1)
#loc4 = loc("/usr/include/signal.h":89:6)
#loc5 = loc("/usr/include/stdlib.h":672:1)
#loc6 = loc("/usr/include/stdlib.h":672:45)
#loc7 = loc("/usr/include/stdlib.h":756:1)
#loc8 = loc("/usr/include/stdlib.h":756:70)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":20:1)
#loc12 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":31:1)
#loc15 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":28:5)
#loc16 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":28:34)
#loc17 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":21:1)
#loc18 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":28:25)
#loc19 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":28:32)
#loc20 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":29:5)
#loc21 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":29:40)
#loc22 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":29:9)
#loc23 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":29:24)
#loc24 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":29:30)
#loc25 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":29:31)
#loc26 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":29:37)
#loc27 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":29:36)
#loc28 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":30:10)
#loc29 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":30:5)
#loc30 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":46:1)
#loc31 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":52:1)
#loc32 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":48:5)
#loc33 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":51:5)
#loc34 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":48:8)
#loc35 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":48:20)
#loc36 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":49:5)
#loc37 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":50:16)
#loc38 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":50:24)
#loc39 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":50:9)
#loc40 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":81:1)
#loc41 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":85:1)
#loc42 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":83:5)
#loc43 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":83:11)
#loc44 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":84:5)
#loc45 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":84:11)
#loc46 = loc("/usr/include/stdlib.h":575:1)
#loc47 = loc("/usr/include/stdlib.h":575:41)
#loc48 = loc("/usr/include/time.h":76:1)
#loc49 = loc("/usr/include/time.h":76:38)
#loc50 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc51 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc52 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":101:15)
#loc53 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":103:15)
#loc54 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":106:15)
#loc55 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":108:15)
#loc56 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":96:1)
#loc57 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":111:1)
#loc62 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":97:1)
#loc63 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":99:27)
#loc64 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":99:22)
#loc65 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":99:5)
#loc66 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":101:5)
#loc67 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":102:5)
#loc68 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":102:72)
#loc69 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":103:5)
#loc70 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":106:5)
#loc71 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":107:5)
#loc72 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":107:71)
#loc73 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":108:5)
#loc74 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":110:12)
#loc75 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":110:5)
#loc76 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":64:19)
#loc77 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":33:1)
#loc78 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":33:50)
#loc79 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":35:1)
#loc80 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":42:1)
#loc83 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":36:1)
#loc84 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":41:25)
#loc85 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":41:5)
#loc86 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":59:1)
#loc87 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":70:1)
#loc88 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":61:5)
#loc89 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":69:5)
#loc90 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":61:8)
#loc91 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":61:20)
#loc92 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":62:5)
#loc93 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":65:5)
#loc94 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":67:5)
#loc95 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":64:9)
#loc96 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":68:16)
#loc97 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":68:24)
#loc98 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":68:9)
#loc99 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":73:1)
#loc100 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":79:1)
#loc101 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":75:5)
#loc102 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":78:5)
#loc103 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":75:8)
#loc104 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":75:20)
#loc105 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":76:5)
#loc106 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":77:16)
#loc107 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":77:24)
#loc108 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_14.c":77:9)
#loc109 = loc(fused[#loc1, #loc2])
#loc110 = loc(fused[#loc3, #loc4])
#loc111 = loc(fused[#loc5, #loc6])
#loc112 = loc(fused[#loc7, #loc8])
#loc113 = loc(fused[#loc9, #loc10])
#loc114 = loc(fused[#loc11, #loc12])
#loc116 = loc(fused[#loc15, #loc16])
#loc117 = loc(fused[#loc20, #loc21])
#loc118 = loc(fused[#loc22, #loc23])
#loc119 = loc(fused[#loc24, #loc21])
#loc120 = loc(fused[#loc30, #loc31])
#loc121 = loc(fused[#loc32, #loc33])
#loc122 = loc(fused[#loc34, #loc35])
#loc123 = loc(fused[#loc36, #loc33])
#loc124 = loc(fused[#loc40, #loc41])
#loc125 = loc(fused[#loc42, #loc43])
#loc126 = loc(fused[#loc44, #loc45])
#loc127 = loc(fused[#loc46, #loc47])
#loc128 = loc(fused[#loc48, #loc49])
#loc129 = loc(fused[#loc50, #loc51])
#loc130 = loc(fused[#loc56, #loc57])
#loc133 = loc(fused[#loc67, #loc68])
#loc134 = loc(fused[#loc71, #loc72])
#loc135 = loc(fused[#loc75, #loc74])
#loc136 = loc(fused[#loc77, #loc78])
#loc137 = loc(fused[#loc79, #loc80])
#loc139 = loc(fused[#loc85, #loc84])
#loc140 = loc(fused[#loc86, #loc87])
#loc141 = loc(fused[#loc88, #loc89])
#loc142 = loc(fused[#loc90, #loc91])
#loc143 = loc(fused[#loc92, #loc93, #loc94, #loc89])
#loc144 = loc(fused[#loc99, #loc100])
#loc145 = loc(fused[#loc101, #loc102])
#loc146 = loc(fused[#loc103, #loc104])
#loc147 = loc(fused[#loc105, #loc102])
