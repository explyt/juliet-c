!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_09.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  constant external @GLOBAL_CONST_TRUE : !s32i {alignment = 4 : i64} loc(#loc221)
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc222)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc223)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc224)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc225)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private  @printIntLine(!s32i) loc(#loc226)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fgets_add_09_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc228)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc18)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc229)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc221)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc22)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc22)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc233)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc233)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc233)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc30)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc31)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc31)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc31)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc31)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc31)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc31)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc31)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc31)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc223)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc32)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc33)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc34)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc34)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !s32i loc(#loc235)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc35)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc39)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc40)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc237)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc43)
            } loc(#loc236)
          } loc(#loc234)
        } loc(#loc232)
      } loc(#loc231)
    } loc(#loc230)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc221)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc46)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc46)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc241)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc52)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc51)
          %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc52)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc241)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc53)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc54)
        } loc(#loc240)
      } loc(#loc239)
    } loc(#loc238)
    cir.return loc(#loc15)
  } loc(#loc227)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fgets_add_09_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc243)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc57)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc244)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc59)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc245)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc61)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc246)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc63)
    cir.return loc(#loc56)
  } loc(#loc242)
  cir.global "private"  constant external @GLOBAL_CONST_FALSE : !s32i {alignment = 4 : i64} loc(#loc247)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc67)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc68)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc249)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc73)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc250)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc221)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc77)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc77)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc254)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc254)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc254)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc85)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc86)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc86)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc86)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc86)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc86)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc86)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc86)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc86)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc223)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc87)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc88)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc89)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc89)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !s32i loc(#loc256)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc90)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc94)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc95)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc258)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc98)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc98)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc99)
            } loc(#loc257)
          } loc(#loc255)
        } loc(#loc253)
      } loc(#loc252)
    } loc(#loc251)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc247)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc102)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc102)
      cir.if %4 {
        %5 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc67)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc67)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc106)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc109)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc110)
          %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc262)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc111)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc264)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc116)
            %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc117)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc264)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc118)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc119)
          } else {
            %9 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc68)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc68)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc120)
          } loc(#loc263)
        } loc(#loc261)
      } loc(#loc260)
    } loc(#loc259)
    cir.return loc(#loc70)
  } loc(#loc248)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc266)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc125)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc267)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc221)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc129)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc129)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc271)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc271)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc271)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc137)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc138)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc138)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc138)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc138)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc138)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc138)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc138)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc138)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc223)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc139)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc140)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc141)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc141)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !s32i loc(#loc273)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc142)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc146)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc147)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc275)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc150)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc150)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc151)
            } loc(#loc274)
          } loc(#loc272)
        } loc(#loc270)
      } loc(#loc269)
    } loc(#loc268)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc221)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc154)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc154)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc158)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc159)
          %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc279)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc160)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc281)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc166)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc165)
            %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc166)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc281)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc167)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc168)
          } else {
            %9 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc169)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc169)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc170)
          } loc(#loc280)
        } loc(#loc278)
      } loc(#loc277)
    } loc(#loc276)
    cir.return loc(#loc122)
  } loc(#loc265)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc283)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc175)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc284)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc247)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc179)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc179)
      cir.if %4 {
        %5 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc183)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc183)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc184)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc185)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc287)
      } loc(#loc286)
    } loc(#loc285)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc221)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc189)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc189)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc291)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc195)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc194)
          %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc195)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc291)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc196)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc197)
        } loc(#loc290)
      } loc(#loc289)
    } loc(#loc288)
    cir.return loc(#loc172)
  } loc(#loc282)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc293)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc202)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc294)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc221)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc206)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc206)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc208)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc297)
      } loc(#loc296)
    } loc(#loc295)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc221)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc212)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc212)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc301)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc218)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc217)
          %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc218)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc301)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc219)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc220)
        } loc(#loc300)
      } loc(#loc299)
    } loc(#loc298)
    cir.return loc(#loc199)
  } loc(#loc292)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_09.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":109:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":109:18)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":105:1)
#loc8 = loc("/usr/include/stdlib.h":106:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":41:27)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":24:1)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":53:1)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":26:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":26:9)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":28:12)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":28:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":29:5)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":44:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":29:8)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":30:5)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":31:9)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":43:9)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":32:13)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":32:49)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":34:13)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":42:13)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":34:23)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":34:36)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":34:53)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":34:17)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":34:63)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":34:60)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":35:13)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":38:13)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":40:13)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":37:29)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":37:24)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":37:17)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":37:40)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":41:17)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":45:5)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":52:5)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":45:8)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":46:5)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":47:9)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":51:9)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":49:13)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":49:33)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":49:26)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":50:26)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":50:13)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":185:1)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":191:1)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":187:5)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":187:14)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":188:5)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":188:14)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":189:5)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":189:14)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":190:5)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":190:14)
#loc65 = loc("../../../testcasesupport/std_testcase.h":110:1)
#loc66 = loc("../../../testcasesupport/std_testcase.h":110:18)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":84:19)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":96:23)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":60:1)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":99:1)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":62:5)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":62:9)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":64:12)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":64:5)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":65:5)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":80:5)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":65:8)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":66:5)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":67:9)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":79:9)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":68:13)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":68:49)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":70:13)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":78:13)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":70:23)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":70:36)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":70:53)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":70:17)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":70:63)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":70:60)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":71:13)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":74:13)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":76:13)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":73:29)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":73:24)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":73:17)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":73:40)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":77:27)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":77:17)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":81:5)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":98:5)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":81:8)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":82:5)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":85:5)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":87:5)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":84:9)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":89:9)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":97:9)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":89:13)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":89:20)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":89:18)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":90:9)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":93:9)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":95:9)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":91:13)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":91:33)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":91:26)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":92:26)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":92:13)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":96:13)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":102:1)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":136:1)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":104:5)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":104:9)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":106:12)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":106:5)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":107:5)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":122:5)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":107:8)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":108:5)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":109:9)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":121:9)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":110:13)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":110:49)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":112:13)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":120:13)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":112:23)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":112:36)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":112:53)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":112:17)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":112:63)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":112:60)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":113:13)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":116:13)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":118:13)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":115:29)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":115:24)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":115:17)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":115:40)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":119:27)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":119:17)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":123:5)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":135:5)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":123:8)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":124:5)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":126:9)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":134:9)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":126:13)
#loc159 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":126:20)
#loc160 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":126:18)
#loc161 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":127:9)
#loc162 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":130:9)
#loc163 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":132:9)
#loc164 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":128:13)
#loc165 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":128:33)
#loc166 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":128:26)
#loc167 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":129:26)
#loc168 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":129:13)
#loc169 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":133:23)
#loc170 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":133:13)
#loc171 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":139:1)
#loc172 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":162:1)
#loc173 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":141:5)
#loc174 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":141:9)
#loc175 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":143:12)
#loc176 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":143:5)
#loc177 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":144:5)
#loc178 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":153:5)
#loc179 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":144:8)
#loc180 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":145:5)
#loc181 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":148:5)
#loc182 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":150:5)
#loc183 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":147:19)
#loc184 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":147:9)
#loc185 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":152:16)
#loc186 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":152:9)
#loc187 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":154:5)
#loc188 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":161:5)
#loc189 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":154:8)
#loc190 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":155:5)
#loc191 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":156:9)
#loc192 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":160:9)
#loc193 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":158:13)
#loc194 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":158:33)
#loc195 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":158:26)
#loc196 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":159:26)
#loc197 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":159:13)
#loc198 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":165:1)
#loc199 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":183:1)
#loc200 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":167:5)
#loc201 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":167:9)
#loc202 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":169:12)
#loc203 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":169:5)
#loc204 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":170:5)
#loc205 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":174:5)
#loc206 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":170:8)
#loc207 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":171:5)
#loc208 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":173:16)
#loc209 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":173:9)
#loc210 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":175:5)
#loc211 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":182:5)
#loc212 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":175:8)
#loc213 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":176:5)
#loc214 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":177:9)
#loc215 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":181:9)
#loc216 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":179:13)
#loc217 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":179:33)
#loc218 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":179:26)
#loc219 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":180:26)
#loc220 = loc("CWE190_Integer_Overflow__int_fgets_add_09.c":180:13)
#loc221 = loc(fused[#loc1, #loc2])
#loc222 = loc(fused[#loc3, #loc4])
#loc223 = loc(fused[#loc5, #loc6])
#loc224 = loc(fused[#loc7, #loc8])
#loc225 = loc(fused[#loc9, #loc10])
#loc226 = loc(fused[#loc12, #loc13])
#loc227 = loc(fused[#loc14, #loc15])
#loc228 = loc(fused[#loc16, #loc17])
#loc229 = loc(fused[#loc19, #loc18])
#loc230 = loc(fused[#loc20, #loc21])
#loc231 = loc(fused[#loc23, #loc21])
#loc232 = loc(fused[#loc24, #loc25])
#loc233 = loc(fused[#loc26, #loc27])
#loc234 = loc(fused[#loc28, #loc29])
#loc235 = loc(fused[#loc33, #loc34])
#loc236 = loc(fused[#loc36, #loc37, #loc38, #loc29])
#loc237 = loc(fused[#loc41, #loc42])
#loc238 = loc(fused[#loc44, #loc45])
#loc239 = loc(fused[#loc47, #loc45])
#loc240 = loc(fused[#loc48, #loc49])
#loc241 = loc(fused[#loc50, #loc51])
#loc242 = loc(fused[#loc55, #loc56])
#loc243 = loc(fused[#loc57, #loc58])
#loc244 = loc(fused[#loc59, #loc60])
#loc245 = loc(fused[#loc61, #loc62])
#loc246 = loc(fused[#loc63, #loc64])
#loc247 = loc(fused[#loc65, #loc66])
#loc248 = loc(fused[#loc69, #loc70])
#loc249 = loc(fused[#loc71, #loc72])
#loc250 = loc(fused[#loc74, #loc73])
#loc251 = loc(fused[#loc75, #loc76])
#loc252 = loc(fused[#loc78, #loc76])
#loc253 = loc(fused[#loc79, #loc80])
#loc254 = loc(fused[#loc81, #loc82])
#loc255 = loc(fused[#loc83, #loc84])
#loc256 = loc(fused[#loc88, #loc89])
#loc257 = loc(fused[#loc91, #loc92, #loc93, #loc84])
#loc258 = loc(fused[#loc96, #loc97])
#loc259 = loc(fused[#loc100, #loc101])
#loc260 = loc(fused[#loc103, #loc104, #loc105, #loc101])
#loc261 = loc(fused[#loc107, #loc108])
#loc262 = loc(fused[#loc109, #loc110])
#loc263 = loc(fused[#loc112, #loc113, #loc114, #loc108])
#loc264 = loc(fused[#loc115, #loc116])
#loc265 = loc(fused[#loc121, #loc122])
#loc266 = loc(fused[#loc123, #loc124])
#loc267 = loc(fused[#loc126, #loc125])
#loc268 = loc(fused[#loc127, #loc128])
#loc269 = loc(fused[#loc130, #loc128])
#loc270 = loc(fused[#loc131, #loc132])
#loc271 = loc(fused[#loc133, #loc134])
#loc272 = loc(fused[#loc135, #loc136])
#loc273 = loc(fused[#loc140, #loc141])
#loc274 = loc(fused[#loc143, #loc144, #loc145, #loc136])
#loc275 = loc(fused[#loc148, #loc149])
#loc276 = loc(fused[#loc152, #loc153])
#loc277 = loc(fused[#loc155, #loc153])
#loc278 = loc(fused[#loc156, #loc157])
#loc279 = loc(fused[#loc158, #loc159])
#loc280 = loc(fused[#loc161, #loc162, #loc163, #loc157])
#loc281 = loc(fused[#loc164, #loc165])
#loc282 = loc(fused[#loc171, #loc172])
#loc283 = loc(fused[#loc173, #loc174])
#loc284 = loc(fused[#loc176, #loc175])
#loc285 = loc(fused[#loc177, #loc178])
#loc286 = loc(fused[#loc180, #loc181, #loc182, #loc178])
#loc287 = loc(fused[#loc186, #loc185])
#loc288 = loc(fused[#loc187, #loc188])
#loc289 = loc(fused[#loc190, #loc188])
#loc290 = loc(fused[#loc191, #loc192])
#loc291 = loc(fused[#loc193, #loc194])
#loc292 = loc(fused[#loc198, #loc199])
#loc293 = loc(fused[#loc200, #loc201])
#loc294 = loc(fused[#loc203, #loc202])
#loc295 = loc(fused[#loc204, #loc205])
#loc296 = loc(fused[#loc207, #loc205])
#loc297 = loc(fused[#loc209, #loc208])
#loc298 = loc(fused[#loc210, #loc211])
#loc299 = loc(fused[#loc213, #loc211])
#loc300 = loc(fused[#loc214, #loc215])
#loc301 = loc(fused[#loc216, #loc217])
