!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":23:21)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":23:28)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":95:10)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":95:14)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":95:20)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":95:32)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":56:25)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":56:32)
#loc137 = loc(fused[#loc5, #loc6])
#loc156 = loc(fused[#loc68, #loc69])
#loc157 = loc(fused[#loc70, #loc71])
#loc162 = loc(fused[#loc88, #loc89])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s03/CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @strncpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc135)
  cir.func internal private @badSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc5, #loc6])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc137)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc139)
      %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc12)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc12)
      %4 = cir.const #cir.int<67> : !s32i loc(#loc13)
      %5 = cir.const #cir.int<100> : !s32i loc(#loc14)
      %6 = cir.const #cir.int<1> : !s32i loc(#loc15)
      %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc14)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc14)
      cir.libc.memset %8 bytes from %3 set to %4 : !cir.ptr<!void>, !s32i, !u64i loc(#loc140)
      %9 = cir.const #cir.int<0> : !s32i loc(#loc18)
      %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc18)
      %11 = cir.const #cir.int<100> : !s32i loc(#loc19)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc20)
      %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc19)
      %14 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc21)
      %15 = cir.ptr_stride(%14 : !cir.ptr<!s8i>, %13 : !s32i), !cir.ptr<!s8i> loc(#loc21)
      cir.store %10, %15 : !s8i, !cir.ptr<!s8i> loc(#loc141)
      %16 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc22)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
      %18 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc24)
      %19 = cir.const #cir.int<100> : !s32i loc(#loc25)
      %20 = cir.const #cir.int<1> : !s32i loc(#loc26)
      %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc25)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc25)
      %23 = cir.call @strncpy(%17, %18, %22) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc22)
      %24 = cir.const #cir.int<0> : !s32i loc(#loc27)
      %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc27)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
      %27 = cir.const #cir.int<100> : !s32i loc(#loc29)
      %28 = cir.const #cir.int<1> : !s32i loc(#loc30)
      %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc29)
      %30 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc31)
      cir.store %25, %30 : !s8i, !cir.ptr<!s8i> loc(#loc142)
      %31 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
      cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc33)
    } loc(#loc138)
    cir.return loc(#loc4)
  } loc(#loc136)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc144)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc145)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc146)
    %3 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc39)
    cir.store %3, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>> loc(#loc145)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc41)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc41)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc41)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc41)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc41)
    %9 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc147)
    %10 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc41)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc41)
    cir.store %11, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc146)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc43)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc43)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc43)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc43)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc43)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc43)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc43)
    cir.store %18, %9 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc147)
    %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc44)
    cir.store %19, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc148)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc46)
    %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc46)
    %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc48)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc49)
    cir.store %21, %24 : !s8i, !cir.ptr<!s8i> loc(#loc149)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc50)
    %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
    cir.call %25(%26) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc50)
    cir.return loc(#loc35)
  } loc(#loc143)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc151)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc54)
    cir.return loc(#loc53)
  } loc(#loc150)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc152)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc153)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc154)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc64)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc65)
  cir.func @main(%arg0: !s32i loc(fused[#loc68, #loc69]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc70, #loc71])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc156)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc157)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc67)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc72)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc72)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc73)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc74)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc74)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc75)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc62)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44_good : !cir.ptr<!cir.func<!void ()>> loc(#loc158)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44_good() : () -> () loc(#loc77)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc63)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc64)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc159)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44_bad() : () -> () loc(#loc81)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc65)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc84)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc160)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc160)
    cir.return %17 : !s32i loc(#loc160)
  } loc(#loc155)
  cir.func internal private @goodG2BSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc88, #loc89])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc162)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc90)
    cir.scope {
      %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc164)
      %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc95)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc95)
      %4 = cir.const #cir.int<67> : !s32i loc(#loc96)
      %5 = cir.const #cir.int<100> : !s32i loc(#loc97)
      %6 = cir.const #cir.int<1> : !s32i loc(#loc98)
      %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc97)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc97)
      cir.libc.memset %8 bytes from %3 set to %4 : !cir.ptr<!void>, !s32i, !u64i loc(#loc165)
      %9 = cir.const #cir.int<0> : !s32i loc(#loc101)
      %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc101)
      %11 = cir.const #cir.int<100> : !s32i loc(#loc102)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc103)
      %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc102)
      %14 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc104)
      %15 = cir.ptr_stride(%14 : !cir.ptr<!s8i>, %13 : !s32i), !cir.ptr<!s8i> loc(#loc104)
      cir.store %10, %15 : !s8i, !cir.ptr<!s8i> loc(#loc166)
      %16 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc105)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc106)
      %18 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc107)
      %19 = cir.const #cir.int<100> : !s32i loc(#loc108)
      %20 = cir.const #cir.int<1> : !s32i loc(#loc109)
      %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc108)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc108)
      %23 = cir.call @strncpy(%17, %18, %22) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc105)
      %24 = cir.const #cir.int<0> : !s32i loc(#loc110)
      %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc110)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc111)
      %27 = cir.const #cir.int<100> : !s32i loc(#loc112)
      %28 = cir.const #cir.int<1> : !s32i loc(#loc113)
      %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc112)
      %30 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc114)
      cir.store %25, %30 : !s8i, !cir.ptr<!s8i> loc(#loc167)
      %31 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc115)
      cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc116)
    } loc(#loc163)
    cir.return loc(#loc87)
  } loc(#loc161)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc169)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc170)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc171)
    %3 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc122)
    cir.store %3, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>> loc(#loc170)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc124)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc124)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc124)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc124)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc124)
    %9 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc172)
    %10 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc124)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc124)
    cir.store %11, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc171)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc126)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc126)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc126)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc126)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc126)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc126)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc126)
    cir.store %18, %9 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc172)
    %19 = cir.load %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc127)
    cir.store %19, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc173)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc129)
    %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc129)
    %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc130)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc131)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc132)
    cir.store %21, %24 : !s8i, !cir.ptr<!s8i> loc(#loc174)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc133)
    %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc134)
    cir.call %25(%26) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc133)
    cir.return loc(#loc118)
  } loc(#loc168)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s03/CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":0:0)
#loc1 = loc("/usr/include/string.h":144:1)
#loc2 = loc("/usr/include/string.h":146:14)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":23:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":34:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":24:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":25:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":33:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":26:9)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":26:24)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":27:16)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":27:24)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":27:29)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":27:33)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":27:9)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":27:34)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":28:25)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":28:16)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":28:20)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":28:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":30:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":30:17)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":30:23)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":30:31)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":30:35)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":31:23)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":31:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":31:14)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":31:18)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":31:19)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":32:19)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":32:9)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":36:1)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":49:1)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":38:5)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":38:12)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":40:5)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":40:32)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":41:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":41:36)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":42:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":42:37)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":45:12)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":45:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":46:15)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":46:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":46:10)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":46:11)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":48:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":48:13)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":81:1)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":84:1)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":83:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":83:13)
#loc56 = loc("/usr/include/stdlib.h":575:1)
#loc57 = loc("/usr/include/stdlib.h":575:41)
#loc58 = loc("/usr/include/time.h":76:1)
#loc59 = loc("/usr/include/time.h":76:38)
#loc60 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc61 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":100:15)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":102:15)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":105:15)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":107:15)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":95:1)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":110:1)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":96:1)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":98:27)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":98:22)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":98:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":100:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":101:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":101:73)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":102:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":105:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":106:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":106:72)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":107:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":109:12)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":109:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":56:1)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":67:1)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":57:1)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":58:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":66:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":59:9)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":59:24)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":60:16)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":60:24)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":60:29)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":60:33)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":60:9)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":60:34)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":61:25)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":61:16)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":61:20)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":61:9)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":63:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":63:17)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":63:23)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":63:31)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":63:35)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":64:23)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":64:9)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":64:14)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":64:18)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":64:19)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":65:19)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":65:9)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":69:1)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":79:1)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":71:5)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":71:12)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":72:5)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":72:32)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":73:5)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":73:36)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":74:5)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":74:37)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":76:12)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":76:5)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":77:15)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":77:5)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":77:10)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":77:11)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":78:5)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c":78:13)
#loc135 = loc(fused[#loc1, #loc2])
#loc136 = loc(fused[#loc3, #loc4])
#loc138 = loc(fused[#loc8, #loc9])
#loc139 = loc(fused[#loc10, #loc11])
#loc140 = loc(fused[#loc16, #loc17])
#loc141 = loc(fused[#loc21, #loc18])
#loc142 = loc(fused[#loc28, #loc27])
#loc143 = loc(fused[#loc34, #loc35])
#loc144 = loc(fused[#loc36, #loc37])
#loc145 = loc(fused[#loc38, #loc39])
#loc146 = loc(fused[#loc40, #loc41])
#loc147 = loc(fused[#loc42, #loc43])
#loc148 = loc(fused[#loc45, #loc44])
#loc149 = loc(fused[#loc47, #loc46])
#loc150 = loc(fused[#loc52, #loc53])
#loc151 = loc(fused[#loc54, #loc55])
#loc152 = loc(fused[#loc56, #loc57])
#loc153 = loc(fused[#loc58, #loc59])
#loc154 = loc(fused[#loc60, #loc61])
#loc155 = loc(fused[#loc66, #loc67])
#loc158 = loc(fused[#loc77, #loc78])
#loc159 = loc(fused[#loc81, #loc82])
#loc160 = loc(fused[#loc85, #loc84])
#loc161 = loc(fused[#loc86, #loc87])
#loc163 = loc(fused[#loc91, #loc92])
#loc164 = loc(fused[#loc93, #loc94])
#loc165 = loc(fused[#loc99, #loc100])
#loc166 = loc(fused[#loc104, #loc101])
#loc167 = loc(fused[#loc111, #loc110])
#loc168 = loc(fused[#loc117, #loc118])
#loc169 = loc(fused[#loc119, #loc120])
#loc170 = loc(fused[#loc121, #loc122])
#loc171 = loc(fused[#loc123, #loc124])
#loc172 = loc(fused[#loc125, #loc126])
#loc173 = loc(fused[#loc128, #loc127])
#loc174 = loc(fused[#loc130, #loc129])
