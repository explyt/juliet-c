!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc50 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":162:10)
#loc51 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":162:14)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":162:20)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":162:32)
#loc205 = loc(fused[#loc50, #loc51])
#loc206 = loc(fused[#loc52, #loc53])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int64_t_rand_sub_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc184)
  cir.func private @printLongLongLine(!s64i) loc(#loc185)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_sub_02_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc187)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc9)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc188)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc13)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc13)
      cir.if %3 {
        %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc15)
        %6 = cir.binop(and, %4, %5) : !s32i loc(#loc15)
        %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc15)
        %8 = cir.ternary(%7, true {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc15)
          %12 = cir.const #cir.int<60> : !s32i loc(#loc15)
          %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc15)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc15)
          %16 = cir.const #cir.int<45> : !s32i loc(#loc15)
          %17 = cir.shift(left, %15 : !u64i, %16 : !s32i) -> !u64i loc(#loc15)
          %18 = cir.binop(xor, %13, %17) : !u64i loc(#loc15)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc15)
          %21 = cir.const #cir.int<30> : !s32i loc(#loc15)
          %22 = cir.shift(left, %20 : !u64i, %21 : !s32i) -> !u64i loc(#loc15)
          %23 = cir.binop(xor, %18, %22) : !u64i loc(#loc15)
          %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc15)
          %26 = cir.const #cir.int<15> : !s32i loc(#loc15)
          %27 = cir.shift(left, %25 : !u64i, %26 : !s32i) -> !u64i loc(#loc15)
          %28 = cir.binop(xor, %23, %27) : !u64i loc(#loc15)
          %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc15)
          %31 = cir.binop(xor, %28, %30) : !u64i loc(#loc15)
          cir.yield %31 : !u64i loc(#loc15)
        }, false {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc15)
          %12 = cir.const #cir.int<60> : !s32i loc(#loc15)
          %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc15)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc15)
          %16 = cir.const #cir.int<45> : !s32i loc(#loc15)
          %17 = cir.shift(left, %15 : !u64i, %16 : !s32i) -> !u64i loc(#loc15)
          %18 = cir.binop(xor, %13, %17) : !u64i loc(#loc15)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc15)
          %21 = cir.const #cir.int<30> : !s32i loc(#loc15)
          %22 = cir.shift(left, %20 : !u64i, %21 : !s32i) -> !u64i loc(#loc15)
          %23 = cir.binop(xor, %18, %22) : !u64i loc(#loc15)
          %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc15)
          %26 = cir.const #cir.int<15> : !s32i loc(#loc15)
          %27 = cir.shift(left, %25 : !u64i, %26 : !s32i) -> !u64i loc(#loc15)
          %28 = cir.binop(xor, %23, %27) : !u64i loc(#loc15)
          %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc15)
          %31 = cir.binop(xor, %28, %30) : !u64i loc(#loc15)
          %32 = cir.unary(minus, %31) : !u64i, !u64i loc(#loc15)
          %33 = cir.const #cir.int<1> : !s32i loc(#loc15)
          %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc15)
          %35 = cir.binop(sub, %32, %34) : !u64i loc(#loc15)
          cir.yield %35 : !u64i loc(#loc15)
        }) : (!cir.bool) -> !u64i loc(#loc15)
        %9 = cir.cast(integral, %8 : !u64i), !s64i loc(#loc15)
        cir.store %9, %0 : !s64i, !cir.ptr<!s64i> loc(#loc191)
      } loc(#loc190)
    } loc(#loc189)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc19)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc19)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc195)
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc25)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc24)
          %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc24)
          %8 = cir.binop(sub, %5, %7) nsw : !s64i loc(#loc25)
          cir.store %8, %4 : !s64i, !cir.ptr<!s64i> loc(#loc195)
          %9 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc26)
          cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc27)
        } loc(#loc194)
      } loc(#loc193)
    } loc(#loc192)
    cir.return loc(#loc6)
  } loc(#loc186)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_sub_02_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc197)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc198)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc199)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc200)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc29)
  } loc(#loc196)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc201)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc202)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc203)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc47)
  cir.func @main(%arg0: !s32i loc(fused[#loc50, #loc51]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc52, #loc53])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc205)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc206)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc49)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc54)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc54)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc55)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc56)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc56)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc57)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc44)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %8 = cir.get_global @CWE191_Integer_Underflow__int64_t_rand_sub_02_good : !cir.ptr<!cir.func<!void ()>> loc(#loc207)
    cir.call @CWE191_Integer_Underflow__int64_t_rand_sub_02_good() : () -> () loc(#loc59)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc45)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc46)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %13 = cir.get_global @CWE191_Integer_Underflow__int64_t_rand_sub_02_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc208)
    cir.call @CWE191_Integer_Underflow__int64_t_rand_sub_02_bad() : () -> () loc(#loc63)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc47)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc66)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc209)
    cir.return %17 : !s32i loc(#loc209)
  } loc(#loc204)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc68)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc69)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc211)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc74)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc212)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc78)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc78)
      cir.if %3 {
        %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc80)
        %6 = cir.binop(and, %4, %5) : !s32i loc(#loc80)
        %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc80)
        %8 = cir.ternary(%7, true {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc80)
          %12 = cir.const #cir.int<60> : !s32i loc(#loc80)
          %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc80)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc80)
          %16 = cir.const #cir.int<45> : !s32i loc(#loc80)
          %17 = cir.shift(left, %15 : !u64i, %16 : !s32i) -> !u64i loc(#loc80)
          %18 = cir.binop(xor, %13, %17) : !u64i loc(#loc80)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc80)
          %21 = cir.const #cir.int<30> : !s32i loc(#loc80)
          %22 = cir.shift(left, %20 : !u64i, %21 : !s32i) -> !u64i loc(#loc80)
          %23 = cir.binop(xor, %18, %22) : !u64i loc(#loc80)
          %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc80)
          %26 = cir.const #cir.int<15> : !s32i loc(#loc80)
          %27 = cir.shift(left, %25 : !u64i, %26 : !s32i) -> !u64i loc(#loc80)
          %28 = cir.binop(xor, %23, %27) : !u64i loc(#loc80)
          %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
          %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc80)
          %31 = cir.binop(xor, %28, %30) : !u64i loc(#loc80)
          cir.yield %31 : !u64i loc(#loc80)
        }, false {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc80)
          %12 = cir.const #cir.int<60> : !s32i loc(#loc80)
          %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc80)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc80)
          %16 = cir.const #cir.int<45> : !s32i loc(#loc80)
          %17 = cir.shift(left, %15 : !u64i, %16 : !s32i) -> !u64i loc(#loc80)
          %18 = cir.binop(xor, %13, %17) : !u64i loc(#loc80)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc80)
          %21 = cir.const #cir.int<30> : !s32i loc(#loc80)
          %22 = cir.shift(left, %20 : !u64i, %21 : !s32i) -> !u64i loc(#loc80)
          %23 = cir.binop(xor, %18, %22) : !u64i loc(#loc80)
          %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc80)
          %26 = cir.const #cir.int<15> : !s32i loc(#loc80)
          %27 = cir.shift(left, %25 : !u64i, %26 : !s32i) -> !u64i loc(#loc80)
          %28 = cir.binop(xor, %23, %27) : !u64i loc(#loc80)
          %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
          %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc80)
          %31 = cir.binop(xor, %28, %30) : !u64i loc(#loc80)
          %32 = cir.unary(minus, %31) : !u64i, !u64i loc(#loc80)
          %33 = cir.const #cir.int<1> : !s32i loc(#loc80)
          %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc80)
          %35 = cir.binop(sub, %32, %34) : !u64i loc(#loc80)
          cir.yield %35 : !u64i loc(#loc80)
        }) : (!cir.bool) -> !u64i loc(#loc80)
        %9 = cir.cast(integral, %8 : !u64i), !s64i loc(#loc80)
        cir.store %9, %0 : !s64i, !cir.ptr<!s64i> loc(#loc215)
      } loc(#loc214)
    } loc(#loc213)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc84)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc84)
      cir.if %3 {
        %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc68)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc68)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc88)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc91)
          %5 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc92)
          %6 = cir.unary(minus, %5) : !s64i, !s64i loc(#loc92)
          %7 = cir.const #cir.int<1> : !s64i loc(#loc92)
          %8 = cir.binop(sub, %6, %7) nsw : !s64i loc(#loc92)
          %9 = cir.cmp(gt, %4, %8) : !s64i, !cir.bool loc(#loc219)
          cir.if %9 {
            %10 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc221)
            %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc98)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc97)
            %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc97)
            %14 = cir.binop(sub, %11, %13) nsw : !s64i loc(#loc98)
            cir.store %14, %10 : !s64i, !cir.ptr<!s64i> loc(#loc221)
            %15 = cir.load %10 : !cir.ptr<!s64i>, !s64i loc(#loc99)
            cir.call @printLongLongLine(%15) : (!s64i) -> () loc(#loc100)
          } else {
            %10 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc69)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc69)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc101)
          } loc(#loc220)
        } loc(#loc218)
      } loc(#loc217)
    } loc(#loc216)
    cir.return loc(#loc71)
  } loc(#loc210)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc223)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc106)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc224)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc110)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc110)
      cir.if %3 {
        %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc112)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc112)
        %6 = cir.binop(and, %4, %5) : !s32i loc(#loc112)
        %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc112)
        %8 = cir.ternary(%7, true {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc112)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc112)
          %12 = cir.const #cir.int<60> : !s32i loc(#loc112)
          %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc112)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc112)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc112)
          %16 = cir.const #cir.int<45> : !s32i loc(#loc112)
          %17 = cir.shift(left, %15 : !u64i, %16 : !s32i) -> !u64i loc(#loc112)
          %18 = cir.binop(xor, %13, %17) : !u64i loc(#loc112)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc112)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc112)
          %21 = cir.const #cir.int<30> : !s32i loc(#loc112)
          %22 = cir.shift(left, %20 : !u64i, %21 : !s32i) -> !u64i loc(#loc112)
          %23 = cir.binop(xor, %18, %22) : !u64i loc(#loc112)
          %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc112)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc112)
          %26 = cir.const #cir.int<15> : !s32i loc(#loc112)
          %27 = cir.shift(left, %25 : !u64i, %26 : !s32i) -> !u64i loc(#loc112)
          %28 = cir.binop(xor, %23, %27) : !u64i loc(#loc112)
          %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc112)
          %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc112)
          %31 = cir.binop(xor, %28, %30) : !u64i loc(#loc112)
          cir.yield %31 : !u64i loc(#loc112)
        }, false {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc112)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc112)
          %12 = cir.const #cir.int<60> : !s32i loc(#loc112)
          %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc112)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc112)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc112)
          %16 = cir.const #cir.int<45> : !s32i loc(#loc112)
          %17 = cir.shift(left, %15 : !u64i, %16 : !s32i) -> !u64i loc(#loc112)
          %18 = cir.binop(xor, %13, %17) : !u64i loc(#loc112)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc112)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc112)
          %21 = cir.const #cir.int<30> : !s32i loc(#loc112)
          %22 = cir.shift(left, %20 : !u64i, %21 : !s32i) -> !u64i loc(#loc112)
          %23 = cir.binop(xor, %18, %22) : !u64i loc(#loc112)
          %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc112)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc112)
          %26 = cir.const #cir.int<15> : !s32i loc(#loc112)
          %27 = cir.shift(left, %25 : !u64i, %26 : !s32i) -> !u64i loc(#loc112)
          %28 = cir.binop(xor, %23, %27) : !u64i loc(#loc112)
          %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc112)
          %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc112)
          %31 = cir.binop(xor, %28, %30) : !u64i loc(#loc112)
          %32 = cir.unary(minus, %31) : !u64i, !u64i loc(#loc112)
          %33 = cir.const #cir.int<1> : !s32i loc(#loc112)
          %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc112)
          %35 = cir.binop(sub, %32, %34) : !u64i loc(#loc112)
          cir.yield %35 : !u64i loc(#loc112)
        }) : (!cir.bool) -> !u64i loc(#loc112)
        %9 = cir.cast(integral, %8 : !u64i), !s64i loc(#loc112)
        cir.store %9, %0 : !s64i, !cir.ptr<!s64i> loc(#loc227)
      } loc(#loc226)
    } loc(#loc225)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc116)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc116)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc120)
          %5 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc121)
          %6 = cir.unary(minus, %5) : !s64i, !s64i loc(#loc121)
          %7 = cir.const #cir.int<1> : !s64i loc(#loc121)
          %8 = cir.binop(sub, %6, %7) nsw : !s64i loc(#loc121)
          %9 = cir.cmp(gt, %4, %8) : !s64i, !cir.bool loc(#loc231)
          cir.if %9 {
            %10 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc233)
            %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc127)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc126)
            %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc126)
            %14 = cir.binop(sub, %11, %13) nsw : !s64i loc(#loc127)
            cir.store %14, %10 : !s64i, !cir.ptr<!s64i> loc(#loc233)
            %15 = cir.load %10 : !cir.ptr<!s64i>, !s64i loc(#loc128)
            cir.call @printLongLongLine(%15) : (!s64i) -> () loc(#loc129)
          } else {
            %10 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc130)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc130)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc131)
          } loc(#loc232)
        } loc(#loc230)
      } loc(#loc229)
    } loc(#loc228)
    cir.return loc(#loc103)
  } loc(#loc222)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc235)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc136)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc236)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc140)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc140)
      cir.if %3 {
        %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc144)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc144)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc145)
      } else {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc146)
        %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc147)
        %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc147)
        cir.store %6, %0 : !s64i, !cir.ptr<!s64i> loc(#loc239)
      } loc(#loc238)
    } loc(#loc237)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc151)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc151)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc243)
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc157)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc156)
          %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc156)
          %8 = cir.binop(sub, %5, %7) nsw : !s64i loc(#loc157)
          cir.store %8, %4 : !s64i, !cir.ptr<!s64i> loc(#loc243)
          %9 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc158)
          cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc159)
        } loc(#loc242)
      } loc(#loc241)
    } loc(#loc240)
    cir.return loc(#loc133)
  } loc(#loc234)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc245)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc164)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc246)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc168)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc168)
      cir.if %3 {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc170)
        %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc171)
        %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc171)
        cir.store %6, %0 : !s64i, !cir.ptr<!s64i> loc(#loc249)
      } loc(#loc248)
    } loc(#loc247)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc175)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc175)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc253)
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc181)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc180)
          %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc180)
          %8 = cir.binop(sub, %5, %7) nsw : !s64i loc(#loc181)
          cir.store %8, %4 : !s64i, !cir.ptr<!s64i> loc(#loc253)
          %9 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc182)
          cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc183)
        } loc(#loc252)
      } loc(#loc251)
    } loc(#loc250)
    cir.return loc(#loc161)
  } loc(#loc244)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int64_t_rand_sub_02.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":39:1)
#loc7 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":24:5)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":24:13)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":25:12)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":25:5)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":26:5)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":30:5)
#loc13 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":26:8)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":27:5)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":29:25)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":29:9)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":31:5)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":38:5)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":31:8)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":32:5)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":33:9)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":37:9)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":35:13)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":35:37)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":35:30)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":36:31)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":36:13)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":145:1)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":151:1)
#loc30 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":147:5)
#loc31 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":147:14)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":148:5)
#loc33 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":148:14)
#loc34 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":149:5)
#loc35 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":149:14)
#loc36 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":150:5)
#loc37 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":150:14)
#loc38 = loc("/usr/include/stdlib.h":575:1)
#loc39 = loc("/usr/include/stdlib.h":575:41)
#loc40 = loc("/usr/include/time.h":76:1)
#loc41 = loc("/usr/include/time.h":76:38)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":167:15)
#loc45 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":169:15)
#loc46 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":172:15)
#loc47 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":174:15)
#loc48 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":162:1)
#loc49 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":177:1)
#loc54 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":163:1)
#loc55 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":165:27)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":165:22)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":165:5)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":167:5)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":168:5)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":168:56)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":169:5)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":172:5)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":173:5)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":173:55)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":174:5)
#loc66 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":176:12)
#loc67 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":176:5)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":58:19)
#loc69 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":70:23)
#loc70 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":46:1)
#loc71 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":73:1)
#loc72 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":48:5)
#loc73 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":48:13)
#loc74 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":49:12)
#loc75 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":49:5)
#loc76 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":50:5)
#loc77 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":54:5)
#loc78 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":50:8)
#loc79 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":51:5)
#loc80 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":53:25)
#loc81 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":53:9)
#loc82 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":55:5)
#loc83 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":72:5)
#loc84 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":55:8)
#loc85 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":56:5)
#loc86 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":59:5)
#loc87 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":61:5)
#loc88 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":58:9)
#loc89 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":63:9)
#loc90 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":71:9)
#loc91 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":63:13)
#loc92 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":63:20)
#loc93 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":64:9)
#loc94 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":67:9)
#loc95 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":69:9)
#loc96 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":65:13)
#loc97 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":65:37)
#loc98 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":65:30)
#loc99 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":66:31)
#loc100 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":66:13)
#loc101 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":70:13)
#loc102 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":76:1)
#loc103 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":98:1)
#loc104 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":78:5)
#loc105 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":78:13)
#loc106 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":79:12)
#loc107 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":79:5)
#loc108 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":80:5)
#loc109 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":84:5)
#loc110 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":80:8)
#loc111 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":81:5)
#loc112 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":83:25)
#loc113 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":83:9)
#loc114 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":85:5)
#loc115 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":97:5)
#loc116 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":85:8)
#loc117 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":86:5)
#loc118 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":88:9)
#loc119 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":96:9)
#loc120 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":88:13)
#loc121 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":88:20)
#loc122 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":89:9)
#loc123 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":92:9)
#loc124 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":94:9)
#loc125 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":90:13)
#loc126 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":90:37)
#loc127 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":90:30)
#loc128 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":91:31)
#loc129 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":91:13)
#loc130 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":95:23)
#loc131 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":95:13)
#loc132 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":101:1)
#loc133 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":123:1)
#loc134 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":103:5)
#loc135 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":103:13)
#loc136 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":104:12)
#loc137 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":104:5)
#loc138 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":105:5)
#loc139 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":114:5)
#loc140 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":105:8)
#loc141 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":106:5)
#loc142 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":109:5)
#loc143 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":111:5)
#loc144 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":108:19)
#loc145 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":108:9)
#loc146 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":113:17)
#loc147 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":113:16)
#loc148 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":113:9)
#loc149 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":115:5)
#loc150 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":122:5)
#loc151 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":115:8)
#loc152 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":116:5)
#loc153 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":117:9)
#loc154 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":121:9)
#loc155 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":119:13)
#loc156 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":119:37)
#loc157 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":119:30)
#loc158 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":120:31)
#loc159 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":120:13)
#loc160 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":126:1)
#loc161 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":143:1)
#loc162 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":128:5)
#loc163 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":128:13)
#loc164 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":129:12)
#loc165 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":129:5)
#loc166 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":130:5)
#loc167 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":134:5)
#loc168 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":130:8)
#loc169 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":131:5)
#loc170 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":133:17)
#loc171 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":133:16)
#loc172 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":133:9)
#loc173 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":135:5)
#loc174 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":142:5)
#loc175 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":135:8)
#loc176 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":136:5)
#loc177 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":137:9)
#loc178 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":141:9)
#loc179 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":139:13)
#loc180 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":139:37)
#loc181 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":139:30)
#loc182 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":140:31)
#loc183 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_02.c":140:13)
#loc184 = loc(fused[#loc1, #loc2])
#loc185 = loc(fused[#loc3, #loc4])
#loc186 = loc(fused[#loc5, #loc6])
#loc187 = loc(fused[#loc7, #loc8])
#loc188 = loc(fused[#loc10, #loc9])
#loc189 = loc(fused[#loc11, #loc12])
#loc190 = loc(fused[#loc14, #loc12])
#loc191 = loc(fused[#loc16, #loc15])
#loc192 = loc(fused[#loc17, #loc18])
#loc193 = loc(fused[#loc20, #loc18])
#loc194 = loc(fused[#loc21, #loc22])
#loc195 = loc(fused[#loc23, #loc24])
#loc196 = loc(fused[#loc28, #loc29])
#loc197 = loc(fused[#loc30, #loc31])
#loc198 = loc(fused[#loc32, #loc33])
#loc199 = loc(fused[#loc34, #loc35])
#loc200 = loc(fused[#loc36, #loc37])
#loc201 = loc(fused[#loc38, #loc39])
#loc202 = loc(fused[#loc40, #loc41])
#loc203 = loc(fused[#loc42, #loc43])
#loc204 = loc(fused[#loc48, #loc49])
#loc207 = loc(fused[#loc59, #loc60])
#loc208 = loc(fused[#loc63, #loc64])
#loc209 = loc(fused[#loc67, #loc66])
#loc210 = loc(fused[#loc70, #loc71])
#loc211 = loc(fused[#loc72, #loc73])
#loc212 = loc(fused[#loc75, #loc74])
#loc213 = loc(fused[#loc76, #loc77])
#loc214 = loc(fused[#loc79, #loc77])
#loc215 = loc(fused[#loc81, #loc80])
#loc216 = loc(fused[#loc82, #loc83])
#loc217 = loc(fused[#loc85, #loc86, #loc87, #loc83])
#loc218 = loc(fused[#loc89, #loc90])
#loc219 = loc(fused[#loc91, #loc92])
#loc220 = loc(fused[#loc93, #loc94, #loc95, #loc90])
#loc221 = loc(fused[#loc96, #loc97])
#loc222 = loc(fused[#loc102, #loc103])
#loc223 = loc(fused[#loc104, #loc105])
#loc224 = loc(fused[#loc107, #loc106])
#loc225 = loc(fused[#loc108, #loc109])
#loc226 = loc(fused[#loc111, #loc109])
#loc227 = loc(fused[#loc113, #loc112])
#loc228 = loc(fused[#loc114, #loc115])
#loc229 = loc(fused[#loc117, #loc115])
#loc230 = loc(fused[#loc118, #loc119])
#loc231 = loc(fused[#loc120, #loc121])
#loc232 = loc(fused[#loc122, #loc123, #loc124, #loc119])
#loc233 = loc(fused[#loc125, #loc126])
#loc234 = loc(fused[#loc132, #loc133])
#loc235 = loc(fused[#loc134, #loc135])
#loc236 = loc(fused[#loc137, #loc136])
#loc237 = loc(fused[#loc138, #loc139])
#loc238 = loc(fused[#loc141, #loc142, #loc143, #loc139])
#loc239 = loc(fused[#loc148, #loc146])
#loc240 = loc(fused[#loc149, #loc150])
#loc241 = loc(fused[#loc152, #loc150])
#loc242 = loc(fused[#loc153, #loc154])
#loc243 = loc(fused[#loc155, #loc156])
#loc244 = loc(fused[#loc160, #loc161])
#loc245 = loc(fused[#loc162, #loc163])
#loc246 = loc(fused[#loc165, #loc164])
#loc247 = loc(fused[#loc166, #loc167])
#loc248 = loc(fused[#loc169, #loc167])
#loc249 = loc(fused[#loc172, #loc170])
#loc250 = loc(fused[#loc173, #loc174])
#loc251 = loc(fused[#loc176, #loc174])
#loc252 = loc(fused[#loc177, #loc178])
#loc253 = loc(fused[#loc179, #loc180])
