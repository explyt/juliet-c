!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc59)
    cir.br ^bb1 loc(#loc60)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc60)
  ^bb2:  // pred: ^bb1
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc10)
    cir.brcond %2 ^bb3, ^bb15 loc(#loc10)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc61)
  ^bb4:  // pred: ^bb3
    %3 = cir.const #cir.int<0> : !s32i loc(#loc7)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc59)
    cir.br ^bb5 loc(#loc62)
  ^bb5:  // pred: ^bb4
    cir.br ^bb7 loc(#loc62)
  ^bb6:  // pred: ^bb11
    %4 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc63)
    cir.brcond %6 ^bb7, ^bb12 loc(#loc17)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc64)
  ^bb8:  // pred: ^bb7
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    %8 = cir.const #cir.int<20000> : !s32i loc(#loc21)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc65)
    cir.brcond %9 ^bb9, ^bb10 loc(#loc66)
  ^bb9:  // pred: ^bb8
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc3)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc3)
    %12 = cir.call @unlink(%11) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc23)
    cir.br ^bb10 loc(#loc19)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc19)
  ^bb11:  // pred: ^bb10
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %14 = cir.unary(inc, %13) : !s32i, !s32i loc(#loc25)
    cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc67)
    cir.br ^bb6 loc(#loc14)
  ^bb12:  // pred: ^bb6
    cir.br ^bb13 loc(#loc14)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc12)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc26)
  ^bb15:  // 2 preds: ^bb2, ^bb14
    cir.br ^bb16 loc(#loc9)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc5)
  } loc(#loc58)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc69)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    cir.return loc(#loc28)
  } loc(#loc68)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc33)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc72)
    cir.br ^bb1 loc(#loc73)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc73)
  ^bb2:  // pred: ^bb1
    %1 = cir.const #cir.int<1> : !s32i loc(#loc40)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc40)
    cir.brcond %2 ^bb3, ^bb15 loc(#loc40)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc74)
  ^bb4:  // pred: ^bb3
    %3 = cir.const #cir.int<0> : !s32i loc(#loc37)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc72)
    cir.br ^bb5 loc(#loc75)
  ^bb5:  // pred: ^bb4
    cir.br ^bb7 loc(#loc75)
  ^bb6:  // pred: ^bb11
    %4 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc46)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc76)
    cir.brcond %6 ^bb7, ^bb12 loc(#loc47)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc77)
  ^bb8:  // pred: ^bb7
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc50)
    %8 = cir.const #cir.int<20000> : !s32i loc(#loc51)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc78)
    cir.brcond %9 ^bb9, ^bb10 loc(#loc79)
  ^bb9:  // pred: ^bb8
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc33)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc33)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    cir.br ^bb10 loc(#loc49)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc49)
  ^bb11:  // pred: ^bb10
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc54)
    %13 = cir.unary(inc, %12) : !s32i, !s32i loc(#loc55)
    cir.store %13, %0 : !s32i, !cir.ptr<!s32i> loc(#loc80)
    cir.br ^bb6 loc(#loc44)
  ^bb12:  // pred: ^bb6
    cir.br ^bb13 loc(#loc44)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc42)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc56)
  ^bb15:  // 2 preds: ^bb2, ^bb14
    cir.br ^bb16 loc(#loc39)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc35)
  } loc(#loc71)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_16.c":0:0)
#loc1 = loc("/usr/include/unistd.h":858:1)
#loc2 = loc("/usr/include/unistd.h":858:48)
#loc3 = loc("CWE511_Logic_Time_Bomb__counter_16.c":40:28)
#loc4 = loc("CWE511_Logic_Time_Bomb__counter_16.c":29:1)
#loc5 = loc("CWE511_Logic_Time_Bomb__counter_16.c":48:1)
#loc6 = loc("CWE511_Logic_Time_Bomb__counter_16.c":34:13)
#loc7 = loc("CWE511_Logic_Time_Bomb__counter_16.c":34:25)
#loc8 = loc("CWE511_Logic_Time_Bomb__counter_16.c":31:5)
#loc9 = loc("CWE511_Logic_Time_Bomb__counter_16.c":47:5)
#loc10 = loc("CWE511_Logic_Time_Bomb__counter_16.c":31:11)
#loc11 = loc("CWE511_Logic_Time_Bomb__counter_16.c":33:9)
#loc12 = loc("CWE511_Logic_Time_Bomb__counter_16.c":45:9)
#loc13 = loc("CWE511_Logic_Time_Bomb__counter_16.c":35:13)
#loc14 = loc("CWE511_Logic_Time_Bomb__counter_16.c":44:25)
#loc15 = loc("CWE511_Logic_Time_Bomb__counter_16.c":44:19)
#loc16 = loc("CWE511_Logic_Time_Bomb__counter_16.c":44:24)
#loc17 = loc("CWE511_Logic_Time_Bomb__counter_16.c":44:21)
#loc18 = loc("CWE511_Logic_Time_Bomb__counter_16.c":38:17)
#loc19 = loc("CWE511_Logic_Time_Bomb__counter_16.c":41:17)
#loc20 = loc("CWE511_Logic_Time_Bomb__counter_16.c":38:21)
#loc21 = loc("CWE511_Logic_Time_Bomb__counter_16.c":38:30)
#loc22 = loc("CWE511_Logic_Time_Bomb__counter_16.c":39:17)
#loc23 = loc("CWE511_Logic_Time_Bomb__counter_16.c":40:21)
#loc24 = loc("CWE511_Logic_Time_Bomb__counter_16.c":42:22)
#loc25 = loc("CWE511_Logic_Time_Bomb__counter_16.c":42:17)
#loc26 = loc("CWE511_Logic_Time_Bomb__counter_16.c":46:9)
#loc27 = loc("CWE511_Logic_Time_Bomb__counter_16.c":76:1)
#loc28 = loc("CWE511_Logic_Time_Bomb__counter_16.c":79:1)
#loc29 = loc("CWE511_Logic_Time_Bomb__counter_16.c":78:5)
#loc30 = loc("CWE511_Logic_Time_Bomb__counter_16.c":78:11)
#loc31 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc32 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc33 = loc("CWE511_Logic_Time_Bomb__counter_16.c":66:31)
#loc34 = loc("CWE511_Logic_Time_Bomb__counter_16.c":55:1)
#loc35 = loc("CWE511_Logic_Time_Bomb__counter_16.c":74:1)
#loc36 = loc("CWE511_Logic_Time_Bomb__counter_16.c":60:13)
#loc37 = loc("CWE511_Logic_Time_Bomb__counter_16.c":60:25)
#loc38 = loc("CWE511_Logic_Time_Bomb__counter_16.c":57:5)
#loc39 = loc("CWE511_Logic_Time_Bomb__counter_16.c":73:5)
#loc40 = loc("CWE511_Logic_Time_Bomb__counter_16.c":57:11)
#loc41 = loc("CWE511_Logic_Time_Bomb__counter_16.c":59:9)
#loc42 = loc("CWE511_Logic_Time_Bomb__counter_16.c":71:9)
#loc43 = loc("CWE511_Logic_Time_Bomb__counter_16.c":61:13)
#loc44 = loc("CWE511_Logic_Time_Bomb__counter_16.c":70:25)
#loc45 = loc("CWE511_Logic_Time_Bomb__counter_16.c":70:19)
#loc46 = loc("CWE511_Logic_Time_Bomb__counter_16.c":70:24)
#loc47 = loc("CWE511_Logic_Time_Bomb__counter_16.c":70:21)
#loc48 = loc("CWE511_Logic_Time_Bomb__counter_16.c":64:17)
#loc49 = loc("CWE511_Logic_Time_Bomb__counter_16.c":67:17)
#loc50 = loc("CWE511_Logic_Time_Bomb__counter_16.c":64:21)
#loc51 = loc("CWE511_Logic_Time_Bomb__counter_16.c":64:30)
#loc52 = loc("CWE511_Logic_Time_Bomb__counter_16.c":65:17)
#loc53 = loc("CWE511_Logic_Time_Bomb__counter_16.c":66:21)
#loc54 = loc("CWE511_Logic_Time_Bomb__counter_16.c":68:22)
#loc55 = loc("CWE511_Logic_Time_Bomb__counter_16.c":68:17)
#loc56 = loc("CWE511_Logic_Time_Bomb__counter_16.c":72:9)
#loc57 = loc(fused[#loc1, #loc2])
#loc58 = loc(fused[#loc4, #loc5])
#loc59 = loc(fused[#loc6, #loc7])
#loc60 = loc(fused[#loc8, #loc9])
#loc61 = loc(fused[#loc11, #loc12])
#loc62 = loc(fused[#loc13, #loc14])
#loc63 = loc(fused[#loc15, #loc16])
#loc64 = loc(fused[#loc18, #loc19])
#loc65 = loc(fused[#loc20, #loc21])
#loc66 = loc(fused[#loc22, #loc19])
#loc67 = loc(fused[#loc25, #loc24])
#loc68 = loc(fused[#loc27, #loc28])
#loc69 = loc(fused[#loc29, #loc30])
#loc70 = loc(fused[#loc31, #loc32])
#loc71 = loc(fused[#loc34, #loc35])
#loc72 = loc(fused[#loc36, #loc37])
#loc73 = loc(fused[#loc38, #loc39])
#loc74 = loc(fused[#loc41, #loc42])
#loc75 = loc(fused[#loc43, #loc44])
#loc76 = loc(fused[#loc45, #loc46])
#loc77 = loc(fused[#loc48, #loc49])
#loc78 = loc(fused[#loc50, #loc51])
#loc79 = loc(fused[#loc52, #loc49])
#loc80 = loc(fused[#loc55, #loc54])
