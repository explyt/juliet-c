!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":133:10)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":133:14)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":133:20)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":133:32)
#loc217 = loc(fused[#loc73, #loc74])
#loc218 = loc(fused[#loc75, #loc76])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s02/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private @__const.goodG2B2.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc187)
  cir.global "private" constant cir_private @__const.goodG2B1.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc188)
  cir.global "private" constant cir_private @__const.CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02_bad.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc189)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc190)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc191)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc193)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc194)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc16)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc16)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc16)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc16)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc16)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc195)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc16)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc16)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc194)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc18)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc18)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc18)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc18)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc18)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc18)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc18)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc18)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc195)
    cir.scope {
      %19 = cir.const #cir.int<1> : !s32i loc(#loc21)
      %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc21)
      cir.if %20 {
        %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
        cir.store %21, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc198)
        %22 = cir.const #cir.int<0> : !s32i loc(#loc25)
        %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc25)
        %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc26)
        %25 = cir.const #cir.int<0> : !s32i loc(#loc27)
        %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc28)
        cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc199)
      } loc(#loc197)
    } loc(#loc196)
    cir.scope {
      %19 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc189)
      %20 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc201)
      %21 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc202)
      %22 = cir.get_global @__const.CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02_bad.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc189)
      cir.copy %22 to %19 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc189)
      %23 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc34)
      %24 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc35)
      %25 = cir.call @strlen(%24) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc34)
      cir.store %25, %21 : !u64i, !cir.ptr<!u64i> loc(#loc203)
      cir.scope {
        %27 = cir.const #cir.int<0> : !s32i loc(#loc40)
        %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc40)
        cir.store %28, %20 : !u64i, !cir.ptr<!u64i> loc(#loc205)
        cir.for : cond {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc42)
          %30 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc43)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc44)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc44)
          %33 = cir.binop(add, %30, %32) : !u64i loc(#loc206)
          %34 = cir.cmp(lt, %29, %33) : !u64i, !cir.bool loc(#loc207)
          cir.condition(%34) loc(#loc45)
        } body {
          cir.scope {
            %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc47)
            %30 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc48)
            %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc48)
            %32 = cir.load %31 : !cir.ptr<!s8i>, !s8i loc(#loc48)
            %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
            %34 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc50)
            %35 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc51)
            cir.store %32, %35 : !s8i, !cir.ptr<!s8i> loc(#loc209)
          } loc(#loc208)
          cir.yield loc(#loc39)
        } step {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc53)
          %30 = cir.unary(inc, %29) : !u64i, !u64i loc(#loc54)
          cir.store %30, %20 : !u64i, !cir.ptr<!u64i> loc(#loc210)
          cir.yield loc(#loc204)
        } loc(#loc204)
      } loc(#loc204)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc55)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    } loc(#loc200)
    cir.return loc(#loc12)
  } loc(#loc192)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc212)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc59)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc213)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc61)
    cir.return loc(#loc58)
  } loc(#loc211)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc214)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc215)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc67)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc68)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc70)
  cir.func @main(%arg0: !s32i loc(fused[#loc73, #loc74]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc75, #loc76])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc217)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc218)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc72)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc77)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc77)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc78)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc79)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc79)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc80)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc67)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02_good : !cir.ptr<!cir.func<!void ()>> loc(#loc219)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02_good() : () -> () loc(#loc82)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc68)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc84)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc69)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc220)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02_bad() : () -> () loc(#loc86)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc70)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc89)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc221)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc221)
    cir.return %17 : !s32i loc(#loc221)
  } loc(#loc216)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc91)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc223)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc224)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc97)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc97)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc97)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc97)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc97)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc225)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc97)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc97)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc224)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc99)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc99)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc99)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc99)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc99)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc99)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc99)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc99)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc99)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc225)
    cir.scope {
      %19 = cir.const #cir.int<0> : !s32i loc(#loc102)
      %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc102)
      cir.if %20 {
        %21 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc91)
        %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc91)
        cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc106)
      } else {
        %21 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc107)
        cir.store %21, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc228)
        %22 = cir.const #cir.int<0> : !s32i loc(#loc109)
        %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc109)
        %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc110)
        %25 = cir.const #cir.int<0> : !s32i loc(#loc111)
        %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc112)
        cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc229)
      } loc(#loc227)
    } loc(#loc226)
    cir.scope {
      %19 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc188)
      %20 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc231)
      %21 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc232)
      %22 = cir.get_global @__const.goodG2B1.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc188)
      cir.copy %22 to %19 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc188)
      %23 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc118)
      %24 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc119)
      %25 = cir.call @strlen(%24) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc118)
      cir.store %25, %21 : !u64i, !cir.ptr<!u64i> loc(#loc233)
      cir.scope {
        %27 = cir.const #cir.int<0> : !s32i loc(#loc124)
        %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc124)
        cir.store %28, %20 : !u64i, !cir.ptr<!u64i> loc(#loc235)
        cir.for : cond {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc126)
          %30 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc127)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc128)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc128)
          %33 = cir.binop(add, %30, %32) : !u64i loc(#loc236)
          %34 = cir.cmp(lt, %29, %33) : !u64i, !cir.bool loc(#loc237)
          cir.condition(%34) loc(#loc129)
        } body {
          cir.scope {
            %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc131)
            %30 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc132)
            %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc132)
            %32 = cir.load %31 : !cir.ptr<!s8i>, !s8i loc(#loc132)
            %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc133)
            %34 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc134)
            %35 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc135)
            cir.store %32, %35 : !s8i, !cir.ptr<!s8i> loc(#loc239)
          } loc(#loc238)
          cir.yield loc(#loc123)
        } step {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc137)
          %30 = cir.unary(inc, %29) : !u64i, !u64i loc(#loc138)
          cir.store %30, %20 : !u64i, !cir.ptr<!u64i> loc(#loc240)
          cir.yield loc(#loc234)
        } loc(#loc234)
      } loc(#loc234)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc139)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc140)
    } loc(#loc230)
    cir.return loc(#loc93)
  } loc(#loc222)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc242)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc243)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc146)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc146)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc146)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc146)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc146)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc244)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc146)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc146)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc243)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc148)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc148)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc148)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc148)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc148)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc148)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc148)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc148)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc148)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc244)
    cir.scope {
      %19 = cir.const #cir.int<1> : !s32i loc(#loc151)
      %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc151)
      cir.if %20 {
        %21 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
        cir.store %21, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc247)
        %22 = cir.const #cir.int<0> : !s32i loc(#loc155)
        %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc155)
        %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc156)
        %25 = cir.const #cir.int<0> : !s32i loc(#loc157)
        %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc158)
        cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc248)
      } loc(#loc246)
    } loc(#loc245)
    cir.scope {
      %19 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc187)
      %20 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc250)
      %21 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc251)
      %22 = cir.get_global @__const.goodG2B2.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc187)
      cir.copy %22 to %19 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc187)
      %23 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc164)
      %24 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc165)
      %25 = cir.call @strlen(%24) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc164)
      cir.store %25, %21 : !u64i, !cir.ptr<!u64i> loc(#loc252)
      cir.scope {
        %27 = cir.const #cir.int<0> : !s32i loc(#loc170)
        %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc170)
        cir.store %28, %20 : !u64i, !cir.ptr<!u64i> loc(#loc254)
        cir.for : cond {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc172)
          %30 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc173)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc174)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc174)
          %33 = cir.binop(add, %30, %32) : !u64i loc(#loc255)
          %34 = cir.cmp(lt, %29, %33) : !u64i, !cir.bool loc(#loc256)
          cir.condition(%34) loc(#loc175)
        } body {
          cir.scope {
            %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc177)
            %30 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc178)
            %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc178)
            %32 = cir.load %31 : !cir.ptr<!s8i>, !s8i loc(#loc178)
            %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc179)
            %34 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc180)
            %35 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc181)
            cir.store %32, %35 : !s8i, !cir.ptr<!s8i> loc(#loc258)
          } loc(#loc257)
          cir.yield loc(#loc169)
        } step {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc183)
          %30 = cir.unary(inc, %29) : !u64i, !u64i loc(#loc184)
          cir.store %30, %20 : !u64i, !cir.ptr<!u64i> loc(#loc259)
          cir.yield loc(#loc253)
        } loc(#loc253)
      } loc(#loc253)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc185)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc186)
    } loc(#loc249)
    cir.return loc(#loc142)
  } loc(#loc241)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s02/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":104:9)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":104:29)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":77:9)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":77:29)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":41:9)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":41:29)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":28:1)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":52:1)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":30:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":30:12)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":31:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":31:36)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":32:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":32:37)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":33:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":39:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":33:8)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":34:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":37:16)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":37:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":38:19)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":38:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":38:14)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":38:15)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":40:5)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":51:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":42:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":42:16)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":42:19)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":43:21)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":43:28)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":43:9)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":43:34)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":46:9)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":49:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":46:18)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":46:14)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":46:21)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":46:25)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":46:37)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":46:23)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":47:9)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":48:30)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":48:23)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":48:13)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":48:18)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":48:19)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":48:31)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":46:41)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":46:40)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":50:19)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":50:9)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":117:1)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":121:1)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":119:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":119:14)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":120:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":120:14)
#loc63 = loc("/usr/include/stdlib.h":575:1)
#loc64 = loc("/usr/include/stdlib.h":575:41)
#loc65 = loc("/usr/include/time.h":76:1)
#loc66 = loc("/usr/include/time.h":76:38)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":138:15)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":140:15)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":143:15)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":145:15)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":133:1)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":148:1)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":134:1)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":136:27)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":136:22)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":136:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":138:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":139:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":139:73)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":140:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":143:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":144:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":144:72)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":145:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":147:12)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":147:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":67:19)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":59:1)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":88:1)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":61:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":61:12)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":62:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":62:36)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":63:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":63:37)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":64:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":75:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":64:8)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":65:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":68:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":70:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":67:9)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":73:16)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":73:9)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":74:19)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":74:9)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":74:14)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":74:15)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":76:5)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":87:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":78:9)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":78:16)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":78:19)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":79:21)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":79:28)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":79:9)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":79:34)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":82:9)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":85:9)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":82:18)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":82:14)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":82:21)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":82:25)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":82:37)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":82:23)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":83:9)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":84:30)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":84:23)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":84:13)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":84:18)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":84:19)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":84:31)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":82:41)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":82:40)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":86:19)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":86:9)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":91:1)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":115:1)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":93:5)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":93:12)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":94:5)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":94:36)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":95:5)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":95:37)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":96:5)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":102:5)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":96:8)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":97:5)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":100:16)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":100:9)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":101:19)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":101:9)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":101:14)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":101:15)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":103:5)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":114:5)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":105:9)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":105:16)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":105:19)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":106:21)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":106:28)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":106:9)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":106:34)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":109:9)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":112:9)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":109:18)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":109:14)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":109:21)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":109:25)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":109:37)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":109:23)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":110:9)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":111:30)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":111:23)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":111:13)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":111:18)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":111:19)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":111:31)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":109:41)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":109:40)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":113:19)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c":113:9)
#loc187 = loc(fused[#loc1, #loc2])
#loc188 = loc(fused[#loc3, #loc4])
#loc189 = loc(fused[#loc5, #loc6])
#loc190 = loc(fused[#loc7, #loc8])
#loc191 = loc(fused[#loc9, #loc10])
#loc192 = loc(fused[#loc11, #loc12])
#loc193 = loc(fused[#loc13, #loc14])
#loc194 = loc(fused[#loc15, #loc16])
#loc195 = loc(fused[#loc17, #loc18])
#loc196 = loc(fused[#loc19, #loc20])
#loc197 = loc(fused[#loc22, #loc20])
#loc198 = loc(fused[#loc24, #loc23])
#loc199 = loc(fused[#loc26, #loc25])
#loc200 = loc(fused[#loc29, #loc30])
#loc201 = loc(fused[#loc31, #loc32])
#loc202 = loc(fused[#loc31, #loc33])
#loc203 = loc(fused[#loc36, #loc37])
#loc204 = loc(fused[#loc38, #loc39])
#loc205 = loc(fused[#loc41, #loc40])
#loc206 = loc(fused[#loc43, #loc44])
#loc207 = loc(fused[#loc42, #loc44])
#loc208 = loc(fused[#loc46, #loc39])
#loc209 = loc(fused[#loc49, #loc52])
#loc210 = loc(fused[#loc54, #loc53])
#loc211 = loc(fused[#loc57, #loc58])
#loc212 = loc(fused[#loc59, #loc60])
#loc213 = loc(fused[#loc61, #loc62])
#loc214 = loc(fused[#loc63, #loc64])
#loc215 = loc(fused[#loc65, #loc66])
#loc216 = loc(fused[#loc71, #loc72])
#loc219 = loc(fused[#loc82, #loc83])
#loc220 = loc(fused[#loc86, #loc87])
#loc221 = loc(fused[#loc90, #loc89])
#loc222 = loc(fused[#loc92, #loc93])
#loc223 = loc(fused[#loc94, #loc95])
#loc224 = loc(fused[#loc96, #loc97])
#loc225 = loc(fused[#loc98, #loc99])
#loc226 = loc(fused[#loc100, #loc101])
#loc227 = loc(fused[#loc103, #loc104, #loc105, #loc101])
#loc228 = loc(fused[#loc108, #loc107])
#loc229 = loc(fused[#loc110, #loc109])
#loc230 = loc(fused[#loc113, #loc114])
#loc231 = loc(fused[#loc115, #loc116])
#loc232 = loc(fused[#loc115, #loc117])
#loc233 = loc(fused[#loc120, #loc121])
#loc234 = loc(fused[#loc122, #loc123])
#loc235 = loc(fused[#loc125, #loc124])
#loc236 = loc(fused[#loc127, #loc128])
#loc237 = loc(fused[#loc126, #loc128])
#loc238 = loc(fused[#loc130, #loc123])
#loc239 = loc(fused[#loc133, #loc136])
#loc240 = loc(fused[#loc138, #loc137])
#loc241 = loc(fused[#loc141, #loc142])
#loc242 = loc(fused[#loc143, #loc144])
#loc243 = loc(fused[#loc145, #loc146])
#loc244 = loc(fused[#loc147, #loc148])
#loc245 = loc(fused[#loc149, #loc150])
#loc246 = loc(fused[#loc152, #loc150])
#loc247 = loc(fused[#loc154, #loc153])
#loc248 = loc(fused[#loc156, #loc155])
#loc249 = loc(fused[#loc159, #loc160])
#loc250 = loc(fused[#loc161, #loc162])
#loc251 = loc(fused[#loc161, #loc163])
#loc252 = loc(fused[#loc166, #loc167])
#loc253 = loc(fused[#loc168, #loc169])
#loc254 = loc(fused[#loc171, #loc170])
#loc255 = loc(fused[#loc173, #loc174])
#loc256 = loc(fused[#loc172, #loc174])
#loc257 = loc(fused[#loc176, #loc169])
#loc258 = loc(fused[#loc179, #loc182])
#loc259 = loc(fused[#loc184, #loc183])
