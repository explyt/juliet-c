!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @strncpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc142)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc143)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc144)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc146)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc147)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc148)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc14)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc14)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc14)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc14)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc14)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc14)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc14)
    cir.store %9, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc148)
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc15)
    cir.store %10, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc149)
    cir.br ^bb1 loc(#loc150)
  ^bb1:  // pred: ^bb0
    %11 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc151)
    %12 = cir.call %11() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc19)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %13 ^bb2, ^bb3 loc(#loc152)
  ^bb2:  // pred: ^bb1
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc22)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc22)
    %16 = cir.const #cir.int<65> : !s32i loc(#loc23)
    %17 = cir.const #cir.int<100> : !s32i loc(#loc24)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc24)
    %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc24)
    cir.libc.memset %20 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc153)
    %21 = cir.const #cir.int<0> : !s32i loc(#loc28)
    %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc28)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc29)
    %24 = cir.const #cir.int<100> : !s32i loc(#loc30)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc30)
    %27 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc32)
    cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc154)
    cir.br ^bb3 loc(#loc18)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc18)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc155)
  ^bb5:  // pred: ^bb4
    %28 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc146)
    cir.store %28, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc146)
    %29 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc35)
    %30 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc36)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
    %32 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc38)
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc39)
    %34 = cir.call @strlen(%33) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc38)
    %35 = cir.call @strncpy(%30, %31, %34) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc35)
    %36 = cir.const #cir.int<0> : !s32i loc(#loc40)
    %37 = cir.cast(integral, %36 : !s32i), !s8i loc(#loc40)
    %38 = cir.const #cir.int<50> : !s32i loc(#loc41)
    %39 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %40 = cir.binop(sub, %38, %39) nsw : !s32i loc(#loc41)
    %41 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc43)
    %42 = cir.ptr_stride(%41 : !cir.ptr<!s8i>, %40 : !s32i), !cir.ptr<!s8i> loc(#loc43)
    cir.store %37, %42 : !s8i, !cir.ptr<!s8i> loc(#loc156)
    %43 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%43) : (!cir.ptr<!s8i>) -> () loc(#loc45)
    cir.br ^bb6 loc(#loc34)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc8)
  } loc(#loc145)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc158)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc48)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc159)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc50)
    cir.return loc(#loc47)
  } loc(#loc157)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc53)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc54)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc161)
    cir.return %2 : !s32i loc(#loc161)
  } loc(#loc160)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc56)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc163)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc164)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc165)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc64)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc64)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc64)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc64)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc64)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc64)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc64)
    cir.store %9, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc165)
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc65)
    cir.store %10, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc166)
    cir.br ^bb1 loc(#loc167)
  ^bb1:  // pred: ^bb0
    %11 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc168)
    %12 = cir.call %11() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc69)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc69)
    cir.brcond %13 ^bb2, ^bb3 loc(#loc169)
  ^bb2:  // pred: ^bb1
    %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc56)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    cir.br ^bb4 loc(#loc72)
  ^bb3:  // pred: ^bb1
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc75)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc75)
    %18 = cir.const #cir.int<65> : !s32i loc(#loc76)
    %19 = cir.const #cir.int<50> : !s32i loc(#loc77)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc78)
    %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc77)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc77)
    cir.libc.memset %22 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc170)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc81)
    %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc81)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc82)
    %26 = cir.const #cir.int<50> : !s32i loc(#loc83)
    %27 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %28 = cir.binop(sub, %26, %27) nsw : !s32i loc(#loc83)
    %29 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %28 : !s32i), !cir.ptr<!s8i> loc(#loc85)
    cir.store %24, %29 : !s8i, !cir.ptr<!s8i> loc(#loc171)
    cir.br ^bb4 loc(#loc68)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc68)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc172)
  ^bb6:  // pred: ^bb5
    %30 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc163)
    cir.store %30, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc163)
    %31 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc88)
    %32 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc89)
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc90)
    %34 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc91)
    %35 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc92)
    %36 = cir.call @strlen(%35) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc91)
    %37 = cir.call @strncpy(%32, %33, %36) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc88)
    %38 = cir.const #cir.int<0> : !s32i loc(#loc93)
    %39 = cir.cast(integral, %38 : !s32i), !s8i loc(#loc93)
    %40 = cir.const #cir.int<50> : !s32i loc(#loc94)
    %41 = cir.const #cir.int<1> : !s32i loc(#loc95)
    %42 = cir.binop(sub, %40, %41) nsw : !s32i loc(#loc94)
    %43 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc96)
    %44 = cir.ptr_stride(%43 : !cir.ptr<!s8i>, %42 : !s32i), !cir.ptr<!s8i> loc(#loc96)
    cir.store %39, %44 : !s8i, !cir.ptr<!s8i> loc(#loc173)
    %45 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc97)
    cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc98)
    cir.br ^bb7 loc(#loc87)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc58)
  } loc(#loc162)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc100)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc101)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc175)
    cir.return %2 : !s32i loc(#loc175)
  } loc(#loc174)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc177)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc178)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc179)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc110)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc110)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc110)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc110)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc110)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc110)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc110)
    cir.store %9, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc179)
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc111)
    cir.store %10, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc180)
    cir.br ^bb1 loc(#loc181)
  ^bb1:  // pred: ^bb0
    %11 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc182)
    %12 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc115)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc115)
    cir.brcond %13 ^bb2, ^bb3 loc(#loc183)
  ^bb2:  // pred: ^bb1
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc118)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc118)
    %16 = cir.const #cir.int<65> : !s32i loc(#loc119)
    %17 = cir.const #cir.int<50> : !s32i loc(#loc120)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc121)
    %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc120)
    %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc120)
    cir.libc.memset %20 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc184)
    %21 = cir.const #cir.int<0> : !s32i loc(#loc124)
    %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc124)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc125)
    %24 = cir.const #cir.int<50> : !s32i loc(#loc126)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc127)
    %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc126)
    %27 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc128)
    cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc185)
    cir.br ^bb3 loc(#loc114)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc114)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc186)
  ^bb5:  // pred: ^bb4
    %28 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc177)
    cir.store %28, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc177)
    %29 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc131)
    %30 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc132)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc133)
    %32 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc134)
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc135)
    %34 = cir.call @strlen(%33) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc134)
    %35 = cir.call @strncpy(%30, %31, %34) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc131)
    %36 = cir.const #cir.int<0> : !s32i loc(#loc136)
    %37 = cir.cast(integral, %36 : !s32i), !s8i loc(#loc136)
    %38 = cir.const #cir.int<50> : !s32i loc(#loc137)
    %39 = cir.const #cir.int<1> : !s32i loc(#loc138)
    %40 = cir.binop(sub, %38, %39) nsw : !s32i loc(#loc137)
    %41 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc139)
    %42 = cir.ptr_stride(%41 : !cir.ptr<!s8i>, %40 : !s32i), !cir.ptr<!s8i> loc(#loc139)
    cir.store %37, %42 : !s8i, !cir.ptr<!s8i> loc(#loc187)
    %43 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc140)
    cir.call @printLine(%43) : (!cir.ptr<!s8i>) -> () loc(#loc141)
    cir.br ^bb6 loc(#loc130)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc104)
  } loc(#loc176)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":0:0)
#loc1 = loc("/usr/include/string.h":144:1)
#loc2 = loc("/usr/include/string.h":146:14)
#loc3 = loc("/usr/include/string.h":407:1)
#loc4 = loc("/usr/include/string.h":408:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":37:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":55:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":49:9)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":49:25)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":39:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":39:12)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":40:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":40:33)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":41:12)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":41:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":42:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":47:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":42:8)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":42:26)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":43:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":45:16)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":45:22)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":45:27)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":45:31)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":45:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":45:32)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":46:23)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":46:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":46:14)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":46:18)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":46:19)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":48:5)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":54:5)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":51:9)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":51:17)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":51:23)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":51:29)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":51:36)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":52:22)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":52:14)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":52:17)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":52:9)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":53:19)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":53:9)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":108:1)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":112:1)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":110:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":110:14)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":111:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":111:14)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":25:1)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":28:1)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":27:12)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":27:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":70:19)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":62:1)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":85:1)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":79:9)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":79:25)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":64:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":64:12)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":65:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":65:33)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":66:12)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":66:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":67:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":77:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":67:8)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":67:27)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":68:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":71:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":73:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":70:9)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":75:16)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":75:22)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":75:27)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":75:30)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":75:9)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":75:31)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":76:22)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":76:9)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":76:14)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":76:17)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":76:18)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":78:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":84:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":81:9)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":81:17)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":81:23)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":81:29)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":81:36)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":82:22)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":82:14)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":82:17)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":82:9)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":83:19)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":83:9)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":30:1)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":33:1)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":32:12)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":32:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":88:1)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":106:1)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":100:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":100:25)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":90:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":90:12)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":91:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":91:33)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":92:12)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":92:5)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":93:5)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":98:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":93:8)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":93:26)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":94:5)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":96:16)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":96:22)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":96:27)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":96:30)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":96:9)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":96:31)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":97:22)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":97:9)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":97:14)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":97:17)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":97:18)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":99:5)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":105:5)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":102:9)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":102:17)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":102:23)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":102:29)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":102:36)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":103:22)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":103:14)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":103:17)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":103:9)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":104:19)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c":104:9)
#loc142 = loc(fused[#loc1, #loc2])
#loc143 = loc(fused[#loc3, #loc4])
#loc144 = loc(fused[#loc5, #loc6])
#loc145 = loc(fused[#loc7, #loc8])
#loc146 = loc(fused[#loc9, #loc10])
#loc147 = loc(fused[#loc11, #loc12])
#loc148 = loc(fused[#loc13, #loc14])
#loc149 = loc(fused[#loc16, #loc15])
#loc150 = loc(fused[#loc17, #loc18])
#loc151 = loc(fused[#loc19, #loc20])
#loc152 = loc(fused[#loc21, #loc18])
#loc153 = loc(fused[#loc26, #loc27])
#loc154 = loc(fused[#loc29, #loc28])
#loc155 = loc(fused[#loc33, #loc34])
#loc156 = loc(fused[#loc43, #loc40])
#loc157 = loc(fused[#loc46, #loc47])
#loc158 = loc(fused[#loc48, #loc49])
#loc159 = loc(fused[#loc50, #loc51])
#loc160 = loc(fused[#loc52, #loc53])
#loc161 = loc(fused[#loc55, #loc54])
#loc162 = loc(fused[#loc57, #loc58])
#loc163 = loc(fused[#loc59, #loc60])
#loc164 = loc(fused[#loc61, #loc62])
#loc165 = loc(fused[#loc63, #loc64])
#loc166 = loc(fused[#loc66, #loc65])
#loc167 = loc(fused[#loc67, #loc68])
#loc168 = loc(fused[#loc69, #loc70])
#loc169 = loc(fused[#loc71, #loc72, #loc73, #loc68])
#loc170 = loc(fused[#loc79, #loc80])
#loc171 = loc(fused[#loc82, #loc81])
#loc172 = loc(fused[#loc86, #loc87])
#loc173 = loc(fused[#loc96, #loc93])
#loc174 = loc(fused[#loc99, #loc100])
#loc175 = loc(fused[#loc102, #loc101])
#loc176 = loc(fused[#loc103, #loc104])
#loc177 = loc(fused[#loc105, #loc106])
#loc178 = loc(fused[#loc107, #loc108])
#loc179 = loc(fused[#loc109, #loc110])
#loc180 = loc(fused[#loc112, #loc111])
#loc181 = loc(fused[#loc113, #loc114])
#loc182 = loc(fused[#loc115, #loc116])
#loc183 = loc(fused[#loc117, #loc114])
#loc184 = loc(fused[#loc122, #loc123])
#loc185 = loc(fused[#loc125, #loc124])
#loc186 = loc(fused[#loc129, #loc130])
#loc187 = loc(fused[#loc139, #loc136])
