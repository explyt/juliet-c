!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_add_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc87)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc88)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printHexCharLine(!s8i) loc(#loc89)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_add_31_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["dataCopy", init] {alignment = 1 : i64} loc(#loc91)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc92)
    %2 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc93)
    %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc94)
    %4 = cir.const #cir.int<32> : !s32i loc(#loc18)
    %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc18)
    cir.store %5, %3 : !s8i, !cir.ptr<!s8i> loc(#loc95)
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc20)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc88)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc21)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %3) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc20)
    cir.br ^bb1 loc(#loc96)
  ^bb1:  // pred: ^bb0
    %12 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc11)
    cir.store %12, %0 : !s8i, !cir.ptr<!s8i> loc(#loc91)
    %13 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc13)
    cir.store %13, %1 : !s8i, !cir.ptr<!s8i> loc(#loc92)
    cir.br ^bb2 loc(#loc97)
  ^bb2:  // pred: ^bb1
    %14 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc26)
    %15 = cir.cast(integral, %14 : !s8i), !s32i loc(#loc26)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %17 = cir.binop(add, %15, %16) nsw : !s32i loc(#loc26)
    %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc26)
    cir.store %18, %2 : !s8i, !cir.ptr<!s8i> loc(#loc93)
    %19 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc27)
    cir.call @printHexCharLine(%19) : (!s8i) -> () loc(#loc28)
    cir.br ^bb3 loc(#loc25)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc23)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc9)
  } loc(#loc90)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_add_31_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc99)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc100)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    cir.return loc(#loc30)
  } loc(#loc98)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["dataCopy", init] {alignment = 1 : i64} loc(#loc102)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc103)
    %2 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc104)
    %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc105)
    %4 = cir.const #cir.int<32> : !s32i loc(#loc45)
    %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc45)
    cir.store %5, %3 : !s8i, !cir.ptr<!s8i> loc(#loc106)
    %6 = cir.const #cir.int<2> : !s32i loc(#loc47)
    %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc47)
    cir.store %7, %3 : !s8i, !cir.ptr<!s8i> loc(#loc107)
    cir.br ^bb1 loc(#loc108)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc38)
    cir.store %8, %0 : !s8i, !cir.ptr<!s8i> loc(#loc102)
    %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc40)
    cir.store %9, %1 : !s8i, !cir.ptr<!s8i> loc(#loc103)
    cir.br ^bb2 loc(#loc109)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc53)
    %11 = cir.cast(integral, %10 : !s8i), !s32i loc(#loc53)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc53)
    %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc53)
    cir.store %14, %2 : !s8i, !cir.ptr<!s8i> loc(#loc104)
    %15 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc54)
    cir.call @printHexCharLine(%15) : (!s8i) -> () loc(#loc55)
    cir.br ^bb3 loc(#loc52)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc50)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc36)
  } loc(#loc101)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc110)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc58)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["dataCopy", init] {alignment = 1 : i64} loc(#loc112)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc113)
    %2 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc114)
    %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc115)
    %4 = cir.const #cir.int<32> : !s32i loc(#loc69)
    %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc69)
    cir.store %5, %3 : !s8i, !cir.ptr<!s8i> loc(#loc116)
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc71)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc88)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc72)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc73)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc73)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %3) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc71)
    cir.br ^bb1 loc(#loc117)
  ^bb1:  // pred: ^bb0
    %12 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc62)
    cir.store %12, %0 : !s8i, !cir.ptr<!s8i> loc(#loc112)
    %13 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc64)
    cir.store %13, %1 : !s8i, !cir.ptr<!s8i> loc(#loc113)
    cir.br ^bb2 loc(#loc118)
  ^bb2:  // pred: ^bb1
    %14 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc78)
    %15 = cir.cast(integral, %14 : !s8i), !s32i loc(#loc78)
    %16 = cir.const #cir.int<127> : !s32i loc(#loc79)
    %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc119)
    cir.brcond %17 ^bb3, ^bb4 loc(#loc120)
  ^bb3:  // pred: ^bb2
    %18 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc83)
    %19 = cir.cast(integral, %18 : !s8i), !s32i loc(#loc83)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc66)
    %21 = cir.binop(add, %19, %20) nsw : !s32i loc(#loc83)
    %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc83)
    cir.store %22, %2 : !s8i, !cir.ptr<!s8i> loc(#loc114)
    %23 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc84)
    cir.call @printHexCharLine(%23) : (!s8i) -> () loc(#loc85)
    cir.br ^bb5 loc(#loc81)
  ^bb4:  // pred: ^bb2
    %24 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc58)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    cir.br ^bb5 loc(#loc77)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc77)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc75)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc60)
  } loc(#loc111)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_add_31.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":27:20)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc8 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":22:1)
#loc9 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":37:1)
#loc10 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":29:9)
#loc11 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":29:25)
#loc12 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":30:9)
#loc13 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":30:21)
#loc14 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":33:13)
#loc15 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":33:34)
#loc16 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":24:5)
#loc17 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":24:10)
#loc18 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":25:12)
#loc19 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":25:5)
#loc20 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":27:5)
#loc21 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":27:13)
#loc22 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":28:5)
#loc23 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":36:5)
#loc24 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":31:9)
#loc25 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":35:9)
#loc26 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":33:27)
#loc27 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":34:30)
#loc28 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":34:13)
#loc29 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":84:1)
#loc30 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":88:1)
#loc31 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":86:5)
#loc32 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":86:13)
#loc33 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":87:5)
#loc34 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":87:13)
#loc35 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":44:1)
#loc36 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":59:1)
#loc37 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":51:9)
#loc38 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":51:25)
#loc39 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":52:9)
#loc40 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":52:21)
#loc41 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":55:13)
#loc42 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":55:34)
#loc43 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":46:5)
#loc44 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":46:10)
#loc45 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":47:12)
#loc46 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":47:5)
#loc47 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":49:12)
#loc48 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":49:5)
#loc49 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":50:5)
#loc50 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":58:5)
#loc51 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":53:9)
#loc52 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":57:9)
#loc53 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":55:27)
#loc54 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":56:30)
#loc55 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":56:13)
#loc56 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc57 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc58 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":79:23)
#loc59 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":62:1)
#loc60 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":82:1)
#loc61 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":69:9)
#loc62 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":69:25)
#loc63 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":70:9)
#loc64 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":70:21)
#loc65 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":74:13)
#loc66 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":74:34)
#loc67 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":64:5)
#loc68 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":64:10)
#loc69 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":65:12)
#loc70 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":65:5)
#loc71 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":67:5)
#loc72 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":67:13)
#loc73 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":67:20)
#loc74 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":68:5)
#loc75 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":81:5)
#loc76 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":72:9)
#loc77 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":80:9)
#loc78 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":72:13)
#loc79 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":72:20)
#loc80 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":73:9)
#loc81 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":76:9)
#loc82 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":78:9)
#loc83 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":74:27)
#loc84 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":75:30)
#loc85 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":75:13)
#loc86 = loc("CWE190_Integer_Overflow__char_fscanf_add_31.c":79:13)
#loc87 = loc(fused[#loc1, #loc2])
#loc88 = loc(fused[#loc3, #loc4])
#loc89 = loc(fused[#loc6, #loc7])
#loc90 = loc(fused[#loc8, #loc9])
#loc91 = loc(fused[#loc10, #loc11])
#loc92 = loc(fused[#loc12, #loc13])
#loc93 = loc(fused[#loc14, #loc15])
#loc94 = loc(fused[#loc16, #loc17])
#loc95 = loc(fused[#loc19, #loc18])
#loc96 = loc(fused[#loc22, #loc23])
#loc97 = loc(fused[#loc24, #loc25])
#loc98 = loc(fused[#loc29, #loc30])
#loc99 = loc(fused[#loc31, #loc32])
#loc100 = loc(fused[#loc33, #loc34])
#loc101 = loc(fused[#loc35, #loc36])
#loc102 = loc(fused[#loc37, #loc38])
#loc103 = loc(fused[#loc39, #loc40])
#loc104 = loc(fused[#loc41, #loc42])
#loc105 = loc(fused[#loc43, #loc44])
#loc106 = loc(fused[#loc46, #loc45])
#loc107 = loc(fused[#loc48, #loc47])
#loc108 = loc(fused[#loc49, #loc50])
#loc109 = loc(fused[#loc51, #loc52])
#loc110 = loc(fused[#loc56, #loc57])
#loc111 = loc(fused[#loc59, #loc60])
#loc112 = loc(fused[#loc61, #loc62])
#loc113 = loc(fused[#loc63, #loc64])
#loc114 = loc(fused[#loc65, #loc66])
#loc115 = loc(fused[#loc67, #loc68])
#loc116 = loc(fused[#loc70, #loc69])
#loc117 = loc(fused[#loc74, #loc75])
#loc118 = loc(fused[#loc76, #loc77])
#loc119 = loc(fused[#loc78, #loc79])
#loc120 = loc(fused[#loc80, #loc81, #loc82, #loc77])
