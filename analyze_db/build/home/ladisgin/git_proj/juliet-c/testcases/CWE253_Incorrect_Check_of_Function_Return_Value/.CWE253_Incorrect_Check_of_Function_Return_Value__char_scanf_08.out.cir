!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc43 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":118:10)
#loc44 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":118:14)
#loc45 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":118:20)
#loc46 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":118:32)
#loc135 = loc(fused[#loc43, #loc44])
#loc136 = loc(fused[#loc45, #loc46])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_scanf(!cir.ptr<!s8i>, ...) -> !s32i loc(#loc117)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%99s" : !cir.array<!s8i x 4>, trailing_zeros> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc3)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc118)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"scanf failed!\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc120)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc121)
    cir.br ^bb1 loc(#loc122)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc123)
    %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc15)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %4 ^bb2, ^bb9 loc(#loc124)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc125)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc120)
    cir.store %5, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc120)
    %6 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc12)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc121)
    cir.br ^bb4 loc(#loc126)
  ^bb4:  // pred: ^bb3
    %7 = cir.get_global @__isoc99_scanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, ...)>> loc(#loc22)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc3)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc3)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
    %11 = cir.call @__isoc99_scanf(%9, %10) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc22)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc24)
    %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc127)
    cir.brcond %13 ^bb5, ^bb6 loc(#loc128)
  ^bb5:  // pred: ^bb4
    %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc6)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc6)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc26)
    cir.br ^bb6 loc(#loc21)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc21)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc19)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc14)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc14)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc8)
  } loc(#loc119)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc130)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc131)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc129)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc132)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc133)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc40)
  cir.func @main(%arg0: !s32i loc(fused[#loc43, #loc44]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc45, #loc46])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc135)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc136)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc42)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc47)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc47)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc48)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc49)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc49)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc50)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc37)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    %8 = cir.get_global @CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08_good : !cir.ptr<!cir.func<!void ()>> loc(#loc137)
    cir.call @CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08_good() : () -> () loc(#loc52)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc38)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc39)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %13 = cir.get_global @CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc138)
    cir.call @CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08_bad() : () -> () loc(#loc56)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc40)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc59)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc139)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc139)
    cir.return %17 : !s32i loc(#loc139)
  } loc(#loc134)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc62)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc63)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc141)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc141)
    cir.return %2 : !s32i loc(#loc141)
  } loc(#loc140)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc65)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc143)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc144)
    cir.br ^bb1 loc(#loc145)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc146)
    %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc74)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc74)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc147)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc65)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    cir.br ^bb10 loc(#loc77)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc148)
  ^bb4:  // pred: ^bb3
    %7 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc143)
    cir.store %7, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc143)
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc71)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc144)
    cir.br ^bb5 loc(#loc149)
  ^bb5:  // pred: ^bb4
    %9 = cir.get_global @__isoc99_scanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, ...)>> loc(#loc84)
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc85)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc85)
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc86)
    %13 = cir.call @__isoc99_scanf(%11, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc84)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc87)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc87)
    %16 = cir.cmp(eq, %13, %15) : !s32i, !cir.bool loc(#loc150)
    cir.brcond %16 ^bb6, ^bb7 loc(#loc151)
  ^bb6:  // pred: ^bb5
    %17 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc89)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc89)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    cir.br ^bb7 loc(#loc83)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc83)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc81)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc73)
  ^bb10:  // 2 preds: ^bb2, ^bb9
    cir.br ^bb11 loc(#loc73)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc67)
  } loc(#loc142)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc92)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc93)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc153)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc153)
    cir.return %2 : !s32i loc(#loc153)
  } loc(#loc152)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc155)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc156)
    cir.br ^bb1 loc(#loc157)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc158)
    %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc103)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc103)
    cir.brcond %4 ^bb2, ^bb9 loc(#loc159)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc160)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc155)
    cir.store %5, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc155)
    %6 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc100)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc156)
    cir.br ^bb4 loc(#loc161)
  ^bb4:  // pred: ^bb3
    %7 = cir.get_global @__isoc99_scanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, ...)>> loc(#loc110)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc111)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc111)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc112)
    %11 = cir.call @__isoc99_scanf(%9, %10) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc110)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc113)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc113)
    %14 = cir.cmp(eq, %11, %13) : !s32i, !cir.bool loc(#loc162)
    cir.brcond %14 ^bb5, ^bb6 loc(#loc163)
  ^bb5:  // pred: ^bb4
    %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc115)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc115)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc116)
    cir.br ^bb6 loc(#loc109)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc109)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc107)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc102)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc102)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc96)
  } loc(#loc154)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":0:0)
#loc1 = loc("/usr/include/stdio.h":466:1)
#loc2 = loc("/usr/include/stdio.h":466:12)
#loc3 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":48:23)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc6 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":50:27)
#loc7 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":37:1)
#loc8 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":54:1)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":44:13)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":44:36)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":45:13)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":45:27)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":39:5)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":53:5)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":39:8)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":39:26)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":40:5)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":41:9)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":52:9)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":48:13)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":51:13)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":48:17)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":48:33)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":48:42)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":49:13)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":50:17)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":103:1)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":107:1)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":105:5)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":105:11)
#loc31 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":106:5)
#loc32 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":106:11)
#loc33 = loc("/usr/include/stdlib.h":575:1)
#loc34 = loc("/usr/include/stdlib.h":575:41)
#loc35 = loc("/usr/include/time.h":76:1)
#loc36 = loc("/usr/include/time.h":76:38)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":123:15)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":125:15)
#loc39 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":128:15)
#loc40 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":130:15)
#loc41 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":118:1)
#loc42 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":133:1)
#loc47 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":119:1)
#loc48 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":121:27)
#loc49 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":121:22)
#loc50 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":121:5)
#loc51 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":123:5)
#loc52 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":124:5)
#loc53 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":124:73)
#loc54 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":125:5)
#loc55 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":128:5)
#loc56 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":129:5)
#loc57 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":129:72)
#loc58 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":130:5)
#loc59 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":132:12)
#loc60 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":132:5)
#loc61 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":25:1)
#loc62 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":28:1)
#loc63 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":27:12)
#loc64 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":27:5)
#loc65 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":66:19)
#loc66 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":61:1)
#loc67 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":82:1)
#loc68 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":73:13)
#loc69 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":73:36)
#loc70 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":74:13)
#loc71 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":74:27)
#loc72 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":63:5)
#loc73 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":81:5)
#loc74 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":63:8)
#loc75 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":63:27)
#loc76 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":64:5)
#loc77 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":67:5)
#loc78 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":69:5)
#loc79 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":66:9)
#loc80 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":70:9)
#loc81 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":80:9)
#loc82 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":76:13)
#loc83 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":79:13)
#loc84 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":76:17)
#loc85 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":76:23)
#loc86 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":76:33)
#loc87 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":76:42)
#loc88 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":77:13)
#loc89 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":78:27)
#loc90 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":78:17)
#loc91 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":30:1)
#loc92 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":33:1)
#loc93 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":32:12)
#loc94 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":32:5)
#loc95 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":85:1)
#loc96 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":101:1)
#loc97 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":92:13)
#loc98 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":92:36)
#loc99 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":93:13)
#loc100 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":93:27)
#loc101 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":87:5)
#loc102 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":100:5)
#loc103 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":87:8)
#loc104 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":87:26)
#loc105 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":88:5)
#loc106 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":89:9)
#loc107 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":99:9)
#loc108 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":95:13)
#loc109 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":98:13)
#loc110 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":95:17)
#loc111 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":95:23)
#loc112 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":95:33)
#loc113 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":95:42)
#loc114 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":96:13)
#loc115 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":97:27)
#loc116 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_08.c":97:17)
#loc117 = loc(fused[#loc1, #loc2])
#loc118 = loc(fused[#loc4, #loc5])
#loc119 = loc(fused[#loc7, #loc8])
#loc120 = loc(fused[#loc9, #loc10])
#loc121 = loc(fused[#loc11, #loc12])
#loc122 = loc(fused[#loc13, #loc14])
#loc123 = loc(fused[#loc15, #loc16])
#loc124 = loc(fused[#loc17, #loc14])
#loc125 = loc(fused[#loc18, #loc19])
#loc126 = loc(fused[#loc20, #loc21])
#loc127 = loc(fused[#loc22, #loc24])
#loc128 = loc(fused[#loc25, #loc21])
#loc129 = loc(fused[#loc27, #loc28])
#loc130 = loc(fused[#loc29, #loc30])
#loc131 = loc(fused[#loc31, #loc32])
#loc132 = loc(fused[#loc33, #loc34])
#loc133 = loc(fused[#loc35, #loc36])
#loc134 = loc(fused[#loc41, #loc42])
#loc137 = loc(fused[#loc52, #loc53])
#loc138 = loc(fused[#loc56, #loc57])
#loc139 = loc(fused[#loc60, #loc59])
#loc140 = loc(fused[#loc61, #loc62])
#loc141 = loc(fused[#loc64, #loc63])
#loc142 = loc(fused[#loc66, #loc67])
#loc143 = loc(fused[#loc68, #loc69])
#loc144 = loc(fused[#loc70, #loc71])
#loc145 = loc(fused[#loc72, #loc73])
#loc146 = loc(fused[#loc74, #loc75])
#loc147 = loc(fused[#loc76, #loc77, #loc78, #loc73])
#loc148 = loc(fused[#loc80, #loc81])
#loc149 = loc(fused[#loc82, #loc83])
#loc150 = loc(fused[#loc84, #loc87])
#loc151 = loc(fused[#loc88, #loc83])
#loc152 = loc(fused[#loc91, #loc92])
#loc153 = loc(fused[#loc94, #loc93])
#loc154 = loc(fused[#loc95, #loc96])
#loc155 = loc(fused[#loc97, #loc98])
#loc156 = loc(fused[#loc99, #loc100])
#loc157 = loc(fused[#loc101, #loc102])
#loc158 = loc(fused[#loc103, #loc104])
#loc159 = loc(fused[#loc105, #loc102])
#loc160 = loc(fused[#loc106, #loc107])
#loc161 = loc(fused[#loc108, #loc109])
#loc162 = loc(fused[#loc110, #loc113])
#loc163 = loc(fused[#loc114, #loc109])
