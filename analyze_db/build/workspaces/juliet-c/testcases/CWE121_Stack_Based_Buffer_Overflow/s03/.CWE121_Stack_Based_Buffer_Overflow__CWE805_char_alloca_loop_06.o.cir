!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s03/CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc187)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc189)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc190)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc8)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc8)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc8)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc8)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc8)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc191)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc8)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc8)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc190)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc10)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc10)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc10)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc10)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc10)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc191)
    cir.scope {
      %17 = cir.const #cir.int<5> : !s32i loc(#loc13)
      %18 = cir.const #cir.int<5> : !s32i loc(#loc14)
      %19 = cir.cmp(eq, %17, %18) : !s32i, !cir.bool loc(#loc193)
      cir.if %19 {
        %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc16)
        cir.store %20, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc195)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc18)
        %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc18)
        %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc19)
        %24 = cir.const #cir.int<0> : !s32i loc(#loc20)
        %25 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc21)
        cir.store %22, %25 : !s8i, !cir.ptr<!s8i> loc(#loc196)
      } loc(#loc194)
    } loc(#loc192)
    cir.scope {
      %17 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc198)
      %18 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc199)
      %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc28)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc28)
      %21 = cir.const #cir.int<67> : !s32i loc(#loc29)
      %22 = cir.const #cir.int<100> : !s32i loc(#loc30)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc31)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc30)
      %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc30)
      cir.libc.memset %25 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc200)
      %26 = cir.const #cir.int<0> : !s32i loc(#loc34)
      %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc34)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc35)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc36)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc35)
      %31 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc37)
      %32 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc37)
      cir.store %27, %32 : !s8i, !cir.ptr<!s8i> loc(#loc201)
      cir.scope {
        %41 = cir.const #cir.int<0> : !s32i loc(#loc40)
        %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc40)
        cir.store %42, %17 : !u64i, !cir.ptr<!u64i> loc(#loc203)
        cir.for : cond {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc42)
          %44 = cir.const #cir.int<100> : !s32i loc(#loc43)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc43)
          %46 = cir.cmp(lt, %43, %45) : !u64i, !cir.bool loc(#loc204)
          cir.condition(%46) loc(#loc44)
        } body {
          cir.scope {
            %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc46)
            %44 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc47)
            %45 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %43 : !u64i), !cir.ptr<!s8i> loc(#loc47)
            %46 = cir.load %45 : !cir.ptr<!s8i>, !s8i loc(#loc47)
            %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
            %48 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc49)
            %49 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %48 : !u64i), !cir.ptr<!s8i> loc(#loc50)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc206)
          } loc(#loc205)
          cir.yield loc(#loc39)
        } step {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc52)
          %44 = cir.unary(inc, %43) : !u64i, !u64i loc(#loc53)
          cir.store %44, %17 : !u64i, !cir.ptr<!u64i> loc(#loc207)
          cir.yield loc(#loc202)
        } loc(#loc202)
      } loc(#loc202)
      %33 = cir.const #cir.int<0> : !s32i loc(#loc54)
      %34 = cir.cast(integral, %33 : !s32i), !s8i loc(#loc54)
      %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc55)
      %36 = cir.const #cir.int<100> : !s32i loc(#loc56)
      %37 = cir.const #cir.int<1> : !s32i loc(#loc57)
      %38 = cir.binop(sub, %36, %37) nsw : !s32i loc(#loc56)
      %39 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %38 : !s32i), !cir.ptr<!s8i> loc(#loc58)
      cir.store %34, %39 : !s8i, !cir.ptr<!s8i> loc(#loc208)
      %40 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
      cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    } loc(#loc197)
    cir.return loc(#loc4)
  } loc(#loc188)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc210)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc63)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc211)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc65)
    cir.return loc(#loc62)
  } loc(#loc209)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc67)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc213)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc214)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc73)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc73)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc73)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc73)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc73)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc215)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc73)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc73)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc214)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc75)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc75)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc75)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc75)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc75)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc75)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc75)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc215)
    cir.scope {
      %17 = cir.const #cir.int<5> : !s32i loc(#loc78)
      %18 = cir.const #cir.int<5> : !s32i loc(#loc79)
      %19 = cir.cmp(ne, %17, %18) : !s32i, !cir.bool loc(#loc217)
      cir.if %19 {
        %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc67)
        %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc67)
        cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc83)
      } else {
        %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc84)
        cir.store %20, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc219)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc86)
        %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc86)
        %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc87)
        %24 = cir.const #cir.int<0> : !s32i loc(#loc88)
        %25 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc89)
        cir.store %22, %25 : !s8i, !cir.ptr<!s8i> loc(#loc220)
      } loc(#loc218)
    } loc(#loc216)
    cir.scope {
      %17 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc222)
      %18 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc223)
      %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc96)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc96)
      %21 = cir.const #cir.int<67> : !s32i loc(#loc97)
      %22 = cir.const #cir.int<100> : !s32i loc(#loc98)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc99)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc98)
      %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc98)
      cir.libc.memset %25 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc224)
      %26 = cir.const #cir.int<0> : !s32i loc(#loc102)
      %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc102)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc103)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc104)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc103)
      %31 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc105)
      %32 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc105)
      cir.store %27, %32 : !s8i, !cir.ptr<!s8i> loc(#loc225)
      cir.scope {
        %41 = cir.const #cir.int<0> : !s32i loc(#loc108)
        %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc108)
        cir.store %42, %17 : !u64i, !cir.ptr<!u64i> loc(#loc227)
        cir.for : cond {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc110)
          %44 = cir.const #cir.int<100> : !s32i loc(#loc111)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc111)
          %46 = cir.cmp(lt, %43, %45) : !u64i, !cir.bool loc(#loc228)
          cir.condition(%46) loc(#loc112)
        } body {
          cir.scope {
            %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc114)
            %44 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc115)
            %45 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %43 : !u64i), !cir.ptr<!s8i> loc(#loc115)
            %46 = cir.load %45 : !cir.ptr<!s8i>, !s8i loc(#loc115)
            %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc116)
            %48 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc117)
            %49 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %48 : !u64i), !cir.ptr<!s8i> loc(#loc118)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc230)
          } loc(#loc229)
          cir.yield loc(#loc107)
        } step {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc120)
          %44 = cir.unary(inc, %43) : !u64i, !u64i loc(#loc121)
          cir.store %44, %17 : !u64i, !cir.ptr<!u64i> loc(#loc231)
          cir.yield loc(#loc226)
        } loc(#loc226)
      } loc(#loc226)
      %33 = cir.const #cir.int<0> : !s32i loc(#loc122)
      %34 = cir.cast(integral, %33 : !s32i), !s8i loc(#loc122)
      %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
      %36 = cir.const #cir.int<100> : !s32i loc(#loc124)
      %37 = cir.const #cir.int<1> : !s32i loc(#loc125)
      %38 = cir.binop(sub, %36, %37) nsw : !s32i loc(#loc124)
      %39 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %38 : !s32i), !cir.ptr<!s8i> loc(#loc126)
      cir.store %34, %39 : !s8i, !cir.ptr<!s8i> loc(#loc232)
      %40 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc127)
      cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc128)
    } loc(#loc221)
    cir.return loc(#loc69)
  } loc(#loc212)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc234)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc235)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc134)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc134)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc134)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc134)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc134)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc236)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc134)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc134)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc235)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc136)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc136)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc136)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc136)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc136)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc136)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc136)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc236)
    cir.scope {
      %17 = cir.const #cir.int<5> : !s32i loc(#loc139)
      %18 = cir.const #cir.int<5> : !s32i loc(#loc140)
      %19 = cir.cmp(eq, %17, %18) : !s32i, !cir.bool loc(#loc238)
      cir.if %19 {
        %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc142)
        cir.store %20, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc240)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc144)
        %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc144)
        %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
        %24 = cir.const #cir.int<0> : !s32i loc(#loc146)
        %25 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc147)
        cir.store %22, %25 : !s8i, !cir.ptr<!s8i> loc(#loc241)
      } loc(#loc239)
    } loc(#loc237)
    cir.scope {
      %17 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc243)
      %18 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc244)
      %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc154)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc154)
      %21 = cir.const #cir.int<67> : !s32i loc(#loc155)
      %22 = cir.const #cir.int<100> : !s32i loc(#loc156)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc157)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc156)
      %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc156)
      cir.libc.memset %25 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc245)
      %26 = cir.const #cir.int<0> : !s32i loc(#loc160)
      %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc160)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc161)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc162)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc161)
      %31 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc163)
      %32 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc163)
      cir.store %27, %32 : !s8i, !cir.ptr<!s8i> loc(#loc246)
      cir.scope {
        %41 = cir.const #cir.int<0> : !s32i loc(#loc166)
        %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc166)
        cir.store %42, %17 : !u64i, !cir.ptr<!u64i> loc(#loc248)
        cir.for : cond {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc168)
          %44 = cir.const #cir.int<100> : !s32i loc(#loc169)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc169)
          %46 = cir.cmp(lt, %43, %45) : !u64i, !cir.bool loc(#loc249)
          cir.condition(%46) loc(#loc170)
        } body {
          cir.scope {
            %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc172)
            %44 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc173)
            %45 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %43 : !u64i), !cir.ptr<!s8i> loc(#loc173)
            %46 = cir.load %45 : !cir.ptr<!s8i>, !s8i loc(#loc173)
            %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc174)
            %48 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc175)
            %49 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %48 : !u64i), !cir.ptr<!s8i> loc(#loc176)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc251)
          } loc(#loc250)
          cir.yield loc(#loc165)
        } step {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc178)
          %44 = cir.unary(inc, %43) : !u64i, !u64i loc(#loc179)
          cir.store %44, %17 : !u64i, !cir.ptr<!u64i> loc(#loc252)
          cir.yield loc(#loc247)
        } loc(#loc247)
      } loc(#loc247)
      %33 = cir.const #cir.int<0> : !s32i loc(#loc180)
      %34 = cir.cast(integral, %33 : !s32i), !s8i loc(#loc180)
      %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc181)
      %36 = cir.const #cir.int<100> : !s32i loc(#loc182)
      %37 = cir.const #cir.int<1> : !s32i loc(#loc183)
      %38 = cir.binop(sub, %36, %37) nsw : !s32i loc(#loc182)
      %39 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %38 : !s32i), !cir.ptr<!s8i> loc(#loc184)
      cir.store %34, %39 : !s8i, !cir.ptr<!s8i> loc(#loc253)
      %40 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc185)
      cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc186)
    } loc(#loc242)
    cir.return loc(#loc130)
  } loc(#loc233)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s03/CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":27:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":52:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":29:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":29:12)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":30:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":30:36)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":31:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":31:37)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":32:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":38:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":32:8)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":32:27)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":33:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":36:16)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":36:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":37:19)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":37:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":37:14)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":37:15)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":39:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":51:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":40:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":40:16)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":41:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":41:24)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":42:16)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":42:24)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":42:29)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":42:33)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":42:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":42:34)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":43:25)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":43:16)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":43:20)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":43:9)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":45:9)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":48:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":45:18)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":45:14)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":45:21)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":45:25)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":45:23)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":46:9)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":47:30)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":47:23)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":47:13)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":47:18)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":47:19)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":47:31)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":45:31)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":45:30)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":49:23)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":49:9)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":49:14)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":49:18)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":49:19)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":50:19)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":50:9)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":117:1)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":121:1)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":119:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":119:14)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":120:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":120:14)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":67:19)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":59:1)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":88:1)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":61:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":61:12)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":62:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":62:36)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":63:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":63:37)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":64:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":74:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":64:8)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":64:27)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":65:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":68:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":70:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":67:9)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":72:16)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":72:9)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":73:19)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":73:9)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":73:14)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":73:15)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":75:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":87:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":76:9)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":76:16)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":77:9)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":77:24)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":78:16)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":78:24)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":78:29)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":78:33)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":78:9)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":78:34)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":79:25)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":79:16)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":79:20)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":79:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":81:9)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":84:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":81:18)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":81:14)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":81:21)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":81:25)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":81:23)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":82:9)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":83:30)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":83:23)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":83:13)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":83:18)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":83:19)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":83:31)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":81:31)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":81:30)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":85:23)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":85:9)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":85:14)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":85:18)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":85:19)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":86:19)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":86:9)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":91:1)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":115:1)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":93:5)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":93:12)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":94:5)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":94:36)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":95:5)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":95:37)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":96:5)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":101:5)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":96:8)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":96:27)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":97:5)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":99:16)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":99:9)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":100:19)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":100:9)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":100:14)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":100:15)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":102:5)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":114:5)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":103:9)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":103:16)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":104:9)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":104:24)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":105:16)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":105:24)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":105:29)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":105:33)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":105:9)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":105:34)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":106:25)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":106:16)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":106:20)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":106:9)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":108:9)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":111:9)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":108:18)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":108:14)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":108:21)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":108:25)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":108:23)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":109:9)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":110:30)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":110:23)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":110:13)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":110:18)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":110:19)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":110:31)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":108:31)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":108:30)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":112:23)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":112:9)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":112:14)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":112:18)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":112:19)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":113:19)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":113:9)
#loc187 = loc(fused[#loc1, #loc2])
#loc188 = loc(fused[#loc3, #loc4])
#loc189 = loc(fused[#loc5, #loc6])
#loc190 = loc(fused[#loc7, #loc8])
#loc191 = loc(fused[#loc9, #loc10])
#loc192 = loc(fused[#loc11, #loc12])
#loc193 = loc(fused[#loc13, #loc14])
#loc194 = loc(fused[#loc15, #loc12])
#loc195 = loc(fused[#loc17, #loc16])
#loc196 = loc(fused[#loc19, #loc18])
#loc197 = loc(fused[#loc22, #loc23])
#loc198 = loc(fused[#loc24, #loc25])
#loc199 = loc(fused[#loc26, #loc27])
#loc200 = loc(fused[#loc32, #loc33])
#loc201 = loc(fused[#loc37, #loc34])
#loc202 = loc(fused[#loc38, #loc39])
#loc203 = loc(fused[#loc41, #loc40])
#loc204 = loc(fused[#loc42, #loc43])
#loc205 = loc(fused[#loc45, #loc39])
#loc206 = loc(fused[#loc48, #loc51])
#loc207 = loc(fused[#loc53, #loc52])
#loc208 = loc(fused[#loc55, #loc54])
#loc209 = loc(fused[#loc61, #loc62])
#loc210 = loc(fused[#loc63, #loc64])
#loc211 = loc(fused[#loc65, #loc66])
#loc212 = loc(fused[#loc68, #loc69])
#loc213 = loc(fused[#loc70, #loc71])
#loc214 = loc(fused[#loc72, #loc73])
#loc215 = loc(fused[#loc74, #loc75])
#loc216 = loc(fused[#loc76, #loc77])
#loc217 = loc(fused[#loc78, #loc79])
#loc218 = loc(fused[#loc80, #loc81, #loc82, #loc77])
#loc219 = loc(fused[#loc85, #loc84])
#loc220 = loc(fused[#loc87, #loc86])
#loc221 = loc(fused[#loc90, #loc91])
#loc222 = loc(fused[#loc92, #loc93])
#loc223 = loc(fused[#loc94, #loc95])
#loc224 = loc(fused[#loc100, #loc101])
#loc225 = loc(fused[#loc105, #loc102])
#loc226 = loc(fused[#loc106, #loc107])
#loc227 = loc(fused[#loc109, #loc108])
#loc228 = loc(fused[#loc110, #loc111])
#loc229 = loc(fused[#loc113, #loc107])
#loc230 = loc(fused[#loc116, #loc119])
#loc231 = loc(fused[#loc121, #loc120])
#loc232 = loc(fused[#loc123, #loc122])
#loc233 = loc(fused[#loc129, #loc130])
#loc234 = loc(fused[#loc131, #loc132])
#loc235 = loc(fused[#loc133, #loc134])
#loc236 = loc(fused[#loc135, #loc136])
#loc237 = loc(fused[#loc137, #loc138])
#loc238 = loc(fused[#loc139, #loc140])
#loc239 = loc(fused[#loc141, #loc138])
#loc240 = loc(fused[#loc143, #loc142])
#loc241 = loc(fused[#loc145, #loc144])
#loc242 = loc(fused[#loc148, #loc149])
#loc243 = loc(fused[#loc150, #loc151])
#loc244 = loc(fused[#loc152, #loc153])
#loc245 = loc(fused[#loc158, #loc159])
#loc246 = loc(fused[#loc163, #loc160])
#loc247 = loc(fused[#loc164, #loc165])
#loc248 = loc(fused[#loc167, #loc166])
#loc249 = loc(fused[#loc168, #loc169])
#loc250 = loc(fused[#loc171, #loc165])
#loc251 = loc(fused[#loc174, #loc177])
#loc252 = loc(fused[#loc179, #loc178])
#loc253 = loc(fused[#loc181, #loc180])
