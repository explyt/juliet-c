!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":135:10)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":135:14)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":135:20)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":135:32)
#loc206 = loc(fused[#loc64, #loc65])
#loc207 = loc(fused[#loc66, #loc67])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc180)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc182)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc183)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc184)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc185)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc12)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc12)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc12)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc12)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc186)
    %10 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc12)
    cir.store %11, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc185)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc14)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc14)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc14)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc14)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc14)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc14)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc14)
    cir.store %18, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc186)
    cir.br ^bb1 loc(#loc187)
  ^bb1:  // pred: ^bb0
    %19 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc188)
    %20 = cir.call %19() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc17)
    %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %21 ^bb2, ^bb3 loc(#loc189)
  ^bb2:  // pred: ^bb1
    %22 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc20)
    cir.store %22, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc190)
    cir.br ^bb3 loc(#loc16)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc16)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc191)
  ^bb5:  // pred: ^bb4
    %23 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc182)
    cir.store %23, %0 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc182)
    cir.br ^bb6 loc(#loc192)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc193)
  ^bb7:  // pred: ^bb6
    %24 = cir.const #cir.int<0> : !s32i loc(#loc28)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc28)
    cir.store %25, %1 : !u64i, !cir.ptr<!u64i> loc(#loc194)
    cir.br ^bb8 loc(#loc193)
  ^bb8:  // 2 preds: ^bb7, ^bb12
    %26 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc30)
    %27 = cir.const #cir.int<100> : !s32i loc(#loc31)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc31)
    %29 = cir.cmp(lt, %26, %28) : !u64i, !cir.bool loc(#loc195)
    cir.brcond %29 ^bb9, ^bb13 loc(#loc32)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc196)
  ^bb10:  // pred: ^bb9
    %30 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc34)
    %31 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc35)
    %32 = cir.ptr_stride(%31 : !cir.ptr<!s32i>, %30 : !u64i), !cir.ptr<!s32i> loc(#loc35)
    %33 = cir.load %32 : !cir.ptr<!s32i>, !s32i loc(#loc35)
    %34 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc36)
    %35 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc37)
    %36 = cir.ptr_stride(%34 : !cir.ptr<!s32i>, %35 : !u64i), !cir.ptr<!s32i> loc(#loc38)
    cir.store %33, %36 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    cir.br ^bb11 loc(#loc27)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc27)
  ^bb12:  // pred: ^bb11
    %37 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc40)
    %38 = cir.unary(inc, %37) : !u64i, !u64i loc(#loc41)
    cir.store %38, %1 : !u64i, !cir.ptr<!u64i> loc(#loc198)
    cir.br ^bb8 loc(#loc193)
  ^bb13:  // pred: ^bb8
    cir.br ^bb14 loc(#loc27)
  ^bb14:  // pred: ^bb13
    %39 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc42)
    %40 = cir.const #cir.int<0> : !s32i loc(#loc43)
    %41 = cir.ptr_stride(%39 : !cir.ptr<!s32i>, %40 : !s32i), !cir.ptr<!s32i> loc(#loc44)
    %42 = cir.load %41 : !cir.ptr<!s32i>, !s32i loc(#loc42)
    cir.call @printIntLine(%42) : (!s32i) -> () loc(#loc45)
    cir.br ^bb15 loc(#loc25)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc23)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc4)
  } loc(#loc181)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc200)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc201)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    cir.return loc(#loc47)
  } loc(#loc199)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc202)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc203)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc204)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc61)
  cir.func @main(%arg0: !s32i loc(fused[#loc64, #loc65]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc66, #loc67])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc206)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc207)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc63)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc68)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc68)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc69)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc70)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc70)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc71)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc58)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08_good : !cir.ptr<!cir.func<!void ()>> loc(#loc208)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08_good() : () -> () loc(#loc73)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc59)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc60)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc209)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08_bad() : () -> () loc(#loc77)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc61)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc80)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc210)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc210)
    cir.return %17 : !s32i loc(#loc210)
  } loc(#loc205)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc83)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc84)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc212)
    cir.return %2 : !s32i loc(#loc212)
  } loc(#loc211)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc86)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc214)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc215)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc216)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc217)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc96)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc96)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc96)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc96)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc96)
    %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc218)
    %10 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc96)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc96)
    cir.store %11, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc217)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc98)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc98)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc98)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc98)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc98)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc98)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc98)
    cir.store %18, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc218)
    cir.br ^bb1 loc(#loc219)
  ^bb1:  // pred: ^bb0
    %19 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc220)
    %20 = cir.call %19() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc101)
    %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc101)
    cir.brcond %21 ^bb2, ^bb3 loc(#loc221)
  ^bb2:  // pred: ^bb1
    %22 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc86)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc86)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc106)
    cir.br ^bb4 loc(#loc104)
  ^bb3:  // pred: ^bb1
    %24 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc107)
    cir.store %24, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc222)
    cir.br ^bb4 loc(#loc100)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc100)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc223)
  ^bb6:  // pred: ^bb5
    %25 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc214)
    cir.store %25, %0 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc214)
    cir.br ^bb7 loc(#loc224)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc225)
  ^bb8:  // pred: ^bb7
    %26 = cir.const #cir.int<0> : !s32i loc(#loc115)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc115)
    cir.store %27, %1 : !u64i, !cir.ptr<!u64i> loc(#loc226)
    cir.br ^bb9 loc(#loc225)
  ^bb9:  // 2 preds: ^bb8, ^bb13
    %28 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc117)
    %29 = cir.const #cir.int<100> : !s32i loc(#loc118)
    %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc118)
    %31 = cir.cmp(lt, %28, %30) : !u64i, !cir.bool loc(#loc227)
    cir.brcond %31 ^bb10, ^bb14 loc(#loc119)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc228)
  ^bb11:  // pred: ^bb10
    %32 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc121)
    %33 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc122)
    %34 = cir.ptr_stride(%33 : !cir.ptr<!s32i>, %32 : !u64i), !cir.ptr<!s32i> loc(#loc122)
    %35 = cir.load %34 : !cir.ptr<!s32i>, !s32i loc(#loc122)
    %36 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc123)
    %37 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc124)
    %38 = cir.ptr_stride(%36 : !cir.ptr<!s32i>, %37 : !u64i), !cir.ptr<!s32i> loc(#loc125)
    cir.store %35, %38 : !s32i, !cir.ptr<!s32i> loc(#loc229)
    cir.br ^bb12 loc(#loc114)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc114)
  ^bb13:  // pred: ^bb12
    %39 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc127)
    %40 = cir.unary(inc, %39) : !u64i, !u64i loc(#loc128)
    cir.store %40, %1 : !u64i, !cir.ptr<!u64i> loc(#loc230)
    cir.br ^bb9 loc(#loc225)
  ^bb14:  // pred: ^bb9
    cir.br ^bb15 loc(#loc114)
  ^bb15:  // pred: ^bb14
    %41 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc129)
    %42 = cir.const #cir.int<0> : !s32i loc(#loc130)
    %43 = cir.ptr_stride(%41 : !cir.ptr<!s32i>, %42 : !s32i), !cir.ptr<!s32i> loc(#loc131)
    %44 = cir.load %43 : !cir.ptr<!s32i>, !s32i loc(#loc129)
    cir.call @printIntLine(%44) : (!s32i) -> () loc(#loc132)
    cir.br ^bb16 loc(#loc112)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc110)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc88)
  } loc(#loc213)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc134)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc135)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc232)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc232)
    cir.return %2 : !s32i loc(#loc232)
  } loc(#loc231)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc234)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc235)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc236)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc237)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc146)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc146)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc146)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc146)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc146)
    %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc238)
    %10 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc146)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc146)
    cir.store %11, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc237)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc148)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc148)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc148)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc148)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc148)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc148)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc148)
    cir.store %18, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc238)
    cir.br ^bb1 loc(#loc239)
  ^bb1:  // pred: ^bb0
    %19 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc240)
    %20 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc151)
    %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc151)
    cir.brcond %21 ^bb2, ^bb3 loc(#loc241)
  ^bb2:  // pred: ^bb1
    %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc154)
    cir.store %22, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc242)
    cir.br ^bb3 loc(#loc150)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc150)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc243)
  ^bb5:  // pred: ^bb4
    %23 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc234)
    cir.store %23, %0 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc234)
    cir.br ^bb6 loc(#loc244)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc245)
  ^bb7:  // pred: ^bb6
    %24 = cir.const #cir.int<0> : !s32i loc(#loc162)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc162)
    cir.store %25, %1 : !u64i, !cir.ptr<!u64i> loc(#loc246)
    cir.br ^bb8 loc(#loc245)
  ^bb8:  // 2 preds: ^bb7, ^bb12
    %26 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc164)
    %27 = cir.const #cir.int<100> : !s32i loc(#loc165)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc165)
    %29 = cir.cmp(lt, %26, %28) : !u64i, !cir.bool loc(#loc247)
    cir.brcond %29 ^bb9, ^bb13 loc(#loc166)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc248)
  ^bb10:  // pred: ^bb9
    %30 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc168)
    %31 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc169)
    %32 = cir.ptr_stride(%31 : !cir.ptr<!s32i>, %30 : !u64i), !cir.ptr<!s32i> loc(#loc169)
    %33 = cir.load %32 : !cir.ptr<!s32i>, !s32i loc(#loc169)
    %34 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc170)
    %35 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc171)
    %36 = cir.ptr_stride(%34 : !cir.ptr<!s32i>, %35 : !u64i), !cir.ptr<!s32i> loc(#loc172)
    cir.store %33, %36 : !s32i, !cir.ptr<!s32i> loc(#loc249)
    cir.br ^bb11 loc(#loc161)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc161)
  ^bb12:  // pred: ^bb11
    %37 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc174)
    %38 = cir.unary(inc, %37) : !u64i, !u64i loc(#loc175)
    cir.store %38, %1 : !u64i, !cir.ptr<!u64i> loc(#loc250)
    cir.br ^bb8 loc(#loc245)
  ^bb13:  // pred: ^bb8
    cir.br ^bb14 loc(#loc161)
  ^bb14:  // pred: ^bb13
    %39 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc176)
    %40 = cir.const #cir.int<0> : !s32i loc(#loc177)
    %41 = cir.ptr_stride(%39 : !cir.ptr<!s32i>, %40 : !s32i), !cir.ptr<!s32i> loc(#loc178)
    %42 = cir.load %41 : !cir.ptr<!s32i>, !s32i loc(#loc176)
    cir.call @printIntLine(%42) : (!s32i) -> () loc(#loc179)
    cir.br ^bb15 loc(#loc159)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc157)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc138)
  } loc(#loc233)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":35:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":58:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":47:9)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":47:29)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":49:13)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":49:20)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":37:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":37:11)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":38:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":38:34)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":39:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":39:35)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":40:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":45:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":40:8)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":40:26)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":41:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":44:16)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":44:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":46:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":57:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":48:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":56:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":51:13)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":54:13)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":51:22)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":51:18)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":51:25)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":51:29)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":51:27)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":52:13)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":53:34)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":53:27)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":53:17)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":53:22)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":53:23)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":53:35)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":51:35)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":51:34)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":55:26)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":55:31)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":55:32)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":55:13)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":119:1)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":123:1)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":121:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":121:14)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":122:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":122:14)
#loc52 = loc("/usr/include/stdlib.h":575:1)
#loc53 = loc("/usr/include/stdlib.h":575:41)
#loc54 = loc("/usr/include/time.h":76:1)
#loc55 = loc("/usr/include/time.h":76:38)
#loc56 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc57 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":140:15)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":142:15)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":145:15)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":147:15)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":135:1)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":150:1)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":136:1)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":138:27)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":138:22)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":138:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":140:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":141:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":141:72)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":142:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":145:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":146:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":146:71)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":147:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":149:12)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":149:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":23:1)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":26:1)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":25:12)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":25:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":73:19)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":65:1)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":92:1)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":81:9)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":81:29)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":83:13)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":83:20)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":67:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":67:11)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":68:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":68:34)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":69:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":69:35)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":70:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":79:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":70:8)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":70:27)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":71:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":74:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":76:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":73:9)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":78:16)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":78:9)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":80:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":91:5)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":82:9)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":90:9)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":85:13)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":88:13)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":85:22)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":85:18)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":85:25)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":85:29)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":85:27)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":86:13)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":87:34)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":87:27)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":87:17)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":87:22)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":87:23)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":87:35)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":85:35)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":85:34)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":89:26)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":89:31)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":89:32)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":89:13)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":28:1)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":31:1)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":30:12)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":30:5)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":95:1)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":117:1)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":106:9)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":106:29)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":108:13)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":108:20)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":97:5)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":97:11)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":98:5)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":98:34)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":99:5)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":99:35)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":100:5)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":104:5)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":100:8)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":100:26)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":101:5)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":103:16)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":103:9)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":105:5)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":116:5)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":107:9)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":115:9)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":110:13)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":113:13)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":110:22)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":110:18)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":110:25)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":110:29)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":110:27)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":111:13)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":112:34)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":112:27)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":112:17)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":112:22)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":112:23)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":112:35)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":110:35)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":110:34)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":114:26)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":114:31)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":114:32)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c":114:13)
#loc180 = loc(fused[#loc1, #loc2])
#loc181 = loc(fused[#loc3, #loc4])
#loc182 = loc(fused[#loc5, #loc6])
#loc183 = loc(fused[#loc7, #loc8])
#loc184 = loc(fused[#loc9, #loc10])
#loc185 = loc(fused[#loc11, #loc12])
#loc186 = loc(fused[#loc13, #loc14])
#loc187 = loc(fused[#loc15, #loc16])
#loc188 = loc(fused[#loc17, #loc18])
#loc189 = loc(fused[#loc19, #loc16])
#loc190 = loc(fused[#loc21, #loc20])
#loc191 = loc(fused[#loc22, #loc23])
#loc192 = loc(fused[#loc24, #loc25])
#loc193 = loc(fused[#loc26, #loc27])
#loc194 = loc(fused[#loc29, #loc28])
#loc195 = loc(fused[#loc30, #loc31])
#loc196 = loc(fused[#loc33, #loc27])
#loc197 = loc(fused[#loc36, #loc39])
#loc198 = loc(fused[#loc41, #loc40])
#loc199 = loc(fused[#loc46, #loc47])
#loc200 = loc(fused[#loc48, #loc49])
#loc201 = loc(fused[#loc50, #loc51])
#loc202 = loc(fused[#loc52, #loc53])
#loc203 = loc(fused[#loc54, #loc55])
#loc204 = loc(fused[#loc56, #loc57])
#loc205 = loc(fused[#loc62, #loc63])
#loc208 = loc(fused[#loc73, #loc74])
#loc209 = loc(fused[#loc77, #loc78])
#loc210 = loc(fused[#loc81, #loc80])
#loc211 = loc(fused[#loc82, #loc83])
#loc212 = loc(fused[#loc85, #loc84])
#loc213 = loc(fused[#loc87, #loc88])
#loc214 = loc(fused[#loc89, #loc90])
#loc215 = loc(fused[#loc91, #loc92])
#loc216 = loc(fused[#loc93, #loc94])
#loc217 = loc(fused[#loc95, #loc96])
#loc218 = loc(fused[#loc97, #loc98])
#loc219 = loc(fused[#loc99, #loc100])
#loc220 = loc(fused[#loc101, #loc102])
#loc221 = loc(fused[#loc103, #loc104, #loc105, #loc100])
#loc222 = loc(fused[#loc108, #loc107])
#loc223 = loc(fused[#loc109, #loc110])
#loc224 = loc(fused[#loc111, #loc112])
#loc225 = loc(fused[#loc113, #loc114])
#loc226 = loc(fused[#loc116, #loc115])
#loc227 = loc(fused[#loc117, #loc118])
#loc228 = loc(fused[#loc120, #loc114])
#loc229 = loc(fused[#loc123, #loc126])
#loc230 = loc(fused[#loc128, #loc127])
#loc231 = loc(fused[#loc133, #loc134])
#loc232 = loc(fused[#loc136, #loc135])
#loc233 = loc(fused[#loc137, #loc138])
#loc234 = loc(fused[#loc139, #loc140])
#loc235 = loc(fused[#loc141, #loc142])
#loc236 = loc(fused[#loc143, #loc144])
#loc237 = loc(fused[#loc145, #loc146])
#loc238 = loc(fused[#loc147, #loc148])
#loc239 = loc(fused[#loc149, #loc150])
#loc240 = loc(fused[#loc151, #loc152])
#loc241 = loc(fused[#loc153, #loc150])
#loc242 = loc(fused[#loc155, #loc154])
#loc243 = loc(fused[#loc156, #loc157])
#loc244 = loc(fused[#loc158, #loc159])
#loc245 = loc(fused[#loc160, #loc161])
#loc246 = loc(fused[#loc163, #loc162])
#loc247 = loc(fused[#loc164, #loc165])
#loc248 = loc(fused[#loc167, #loc161])
#loc249 = loc(fused[#loc170, #loc173])
#loc250 = loc(fused[#loc175, #loc174])
