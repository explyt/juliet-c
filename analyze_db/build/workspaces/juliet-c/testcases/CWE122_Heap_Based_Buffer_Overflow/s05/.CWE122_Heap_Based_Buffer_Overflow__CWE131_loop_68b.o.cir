!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68_badData : !cir.ptr<!s32i> {alignment = 8 : i64} loc(#loc73)
  cir.func private @printIntLine(!s32i) loc(#loc74)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc75)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b_badSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc77)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68_badData : !cir.ptr<!cir.ptr<!s32i>> loc(#loc73)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc10)
    cir.store %2, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc77)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc79)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc80)
      %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc79)
      cir.store %5, %3 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc79)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc19)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc19)
        cir.store %14, %4 : !u64i, !cir.ptr<!u64i> loc(#loc82)
        cir.for : cond {
          %15 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc21)
          %16 = cir.const #cir.int<10> : !s32i loc(#loc22)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc22)
          %18 = cir.cmp(lt, %15, %17) : !u64i, !cir.bool loc(#loc83)
          cir.condition(%18) loc(#loc23)
        } body {
          cir.scope {
            %15 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc25)
            %16 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc26)
            %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !u64i), !cir.ptr<!s32i> loc(#loc26)
            %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc26)
            %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
            %20 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc28)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !u64i), !cir.ptr<!s32i> loc(#loc29)
            cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc85)
          } loc(#loc84)
          cir.yield loc(#loc18)
        } step {
          %15 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc31)
          %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc32)
          cir.store %16, %4 : !u64i, !cir.ptr<!u64i> loc(#loc86)
          cir.yield loc(#loc81)
        } loc(#loc81)
      } loc(#loc81)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc33)
      %7 = cir.const #cir.int<0> : !s32i loc(#loc34)
      %8 = cir.ptr_stride(%6 : !cir.ptr<!s32i>, %7 : !s32i), !cir.ptr<!s32i> loc(#loc35)
      %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc33)
      cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc36)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc37)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc38)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc38)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc37)
    } loc(#loc78)
    cir.return loc(#loc8)
  } loc(#loc76)
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68_goodG2BData : !cir.ptr<!s32i> {alignment = 8 : i64} loc(#loc87)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b_goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc89)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68_goodG2BData : !cir.ptr<!cir.ptr<!s32i>> loc(#loc87)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
    cir.store %2, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc89)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc91)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc92)
      %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc91)
      cir.store %5, %3 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc91)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc53)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc53)
        cir.store %14, %4 : !u64i, !cir.ptr<!u64i> loc(#loc94)
        cir.for : cond {
          %15 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc55)
          %16 = cir.const #cir.int<10> : !s32i loc(#loc56)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc56)
          %18 = cir.cmp(lt, %15, %17) : !u64i, !cir.bool loc(#loc95)
          cir.condition(%18) loc(#loc57)
        } body {
          cir.scope {
            %15 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc59)
            %16 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc60)
            %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !u64i), !cir.ptr<!s32i> loc(#loc60)
            %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc60)
            %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc61)
            %20 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc62)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !u64i), !cir.ptr<!s32i> loc(#loc63)
            cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc97)
          } loc(#loc96)
          cir.yield loc(#loc52)
        } step {
          %15 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc65)
          %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc66)
          cir.store %16, %4 : !u64i, !cir.ptr<!u64i> loc(#loc98)
          cir.yield loc(#loc93)
        } loc(#loc93)
      } loc(#loc93)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc67)
      %7 = cir.const #cir.int<0> : !s32i loc(#loc68)
      %8 = cir.ptr_stride(%6 : !cir.ptr<!s32i>, %7 : !s32i), !cir.ptr<!s32i> loc(#loc69)
      %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc67)
      cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc70)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc71)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc72)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc72)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc71)
    } loc(#loc90)
    cir.return loc(#loc42)
  } loc(#loc88)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":19:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":19:14)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("/usr/include/stdlib.h":687:1)
#loc6 = loc("/usr/include/stdlib.h":687:32)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":26:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":40:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":28:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":28:18)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":29:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":39:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":30:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":30:28)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":31:9)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":31:16)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":33:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":36:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":33:18)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":33:14)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":33:21)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":33:25)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":33:23)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":34:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":35:30)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":35:23)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":35:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":35:18)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":35:19)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":35:31)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":33:30)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":33:29)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":37:22)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":37:27)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":37:28)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":37:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":38:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":38:14)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":20:1)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":20:14)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":47:1)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":61:1)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":49:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":49:18)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":50:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":60:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":51:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":51:28)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":52:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":52:16)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":54:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":57:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":54:18)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":54:14)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":54:21)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":54:25)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":54:23)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":55:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":56:30)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":56:23)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":56:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":56:18)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":56:19)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":56:31)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":54:30)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":54:29)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":58:22)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":58:27)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":58:28)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":58:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":59:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c":59:14)
#loc73 = loc(fused[#loc1, #loc2])
#loc74 = loc(fused[#loc3, #loc4])
#loc75 = loc(fused[#loc5, #loc6])
#loc76 = loc(fused[#loc7, #loc8])
#loc77 = loc(fused[#loc9, #loc10])
#loc78 = loc(fused[#loc11, #loc12])
#loc79 = loc(fused[#loc13, #loc14])
#loc80 = loc(fused[#loc15, #loc16])
#loc81 = loc(fused[#loc17, #loc18])
#loc82 = loc(fused[#loc20, #loc19])
#loc83 = loc(fused[#loc21, #loc22])
#loc84 = loc(fused[#loc24, #loc18])
#loc85 = loc(fused[#loc27, #loc30])
#loc86 = loc(fused[#loc32, #loc31])
#loc87 = loc(fused[#loc39, #loc40])
#loc88 = loc(fused[#loc41, #loc42])
#loc89 = loc(fused[#loc43, #loc44])
#loc90 = loc(fused[#loc45, #loc46])
#loc91 = loc(fused[#loc47, #loc48])
#loc92 = loc(fused[#loc49, #loc50])
#loc93 = loc(fused[#loc51, #loc52])
#loc94 = loc(fused[#loc54, #loc53])
#loc95 = loc(fused[#loc55, #loc56])
#loc96 = loc(fused[#loc58, #loc52])
#loc97 = loc(fused[#loc61, #loc64])
#loc98 = loc(fused[#loc66, #loc65])
