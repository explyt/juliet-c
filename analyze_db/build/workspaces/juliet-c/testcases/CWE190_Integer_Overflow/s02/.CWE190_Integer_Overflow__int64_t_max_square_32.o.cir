!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_square_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printLongLongLine(!s64i) loc(#loc120)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_max_square_32_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc122)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc123)
    %2 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc124)
    cir.store %0, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc123)
    cir.store %0, %2 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc124)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc11)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc125)
    cir.scope {
      %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc127)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc16)
      %6 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc17)
      cir.store %6, %4 : !s64i, !cir.ptr<!s64i> loc(#loc127)
      %7 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc18)
      cir.store %7, %4 : !s64i, !cir.ptr<!s64i> loc(#loc128)
      %8 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc20)
      %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc21)
      cir.store %8, %9 : !s64i, !cir.ptr<!s64i> loc(#loc129)
    } loc(#loc126)
    cir.scope {
      %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc131)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc26)
      %6 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc27)
      cir.store %6, %4 : !s64i, !cir.ptr<!s64i> loc(#loc131)
      cir.scope {
        %7 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc133)
        %8 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc32)
        %9 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc31)
        %10 = cir.binop(mul, %8, %9) nsw : !s64i loc(#loc32)
        cir.store %10, %7 : !s64i, !cir.ptr<!s64i> loc(#loc133)
        %11 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc33)
        cir.call @printLongLongLine(%11) : (!s64i) -> () loc(#loc34)
      } loc(#loc132)
    } loc(#loc130)
    cir.return loc(#loc4)
  } loc(#loc121)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_max_square_32_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc135)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc136)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    cir.return loc(#loc36)
  } loc(#loc134)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc138)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc139)
    %2 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc140)
    cir.store %0, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc139)
    cir.store %0, %2 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc140)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc49)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc141)
    cir.scope {
      %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc143)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc54)
      %6 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc55)
      cir.store %6, %4 : !s64i, !cir.ptr<!s64i> loc(#loc143)
      %7 = cir.const #cir.int<2> : !s32i loc(#loc56)
      %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc56)
      cir.store %8, %4 : !s64i, !cir.ptr<!s64i> loc(#loc144)
      %9 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc58)
      %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc59)
      cir.store %9, %10 : !s64i, !cir.ptr<!s64i> loc(#loc145)
    } loc(#loc142)
    cir.scope {
      %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc147)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc64)
      %6 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc65)
      cir.store %6, %4 : !s64i, !cir.ptr<!s64i> loc(#loc147)
      cir.scope {
        %7 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc149)
        %8 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc70)
        %9 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc69)
        %10 = cir.binop(mul, %8, %9) nsw : !s64i loc(#loc70)
        cir.store %10, %7 : !s64i, !cir.ptr<!s64i> loc(#loc149)
        %11 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc71)
        cir.call @printLongLongLine(%11) : (!s64i) -> () loc(#loc72)
      } loc(#loc148)
    } loc(#loc146)
    cir.return loc(#loc42)
  } loc(#loc137)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr1) loc(#loc150)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc75)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc151)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc78)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc153)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc154)
    %2 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc155)
    cir.store %0, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc154)
    cir.store %0, %2 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc155)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc87)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc156)
    cir.scope {
      %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc158)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc92)
      %6 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc93)
      cir.store %6, %4 : !s64i, !cir.ptr<!s64i> loc(#loc158)
      %7 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc94)
      cir.store %7, %4 : !s64i, !cir.ptr<!s64i> loc(#loc159)
      %8 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc96)
      %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc97)
      cir.store %8, %9 : !s64i, !cir.ptr<!s64i> loc(#loc160)
    } loc(#loc157)
    cir.scope {
      %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc162)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc102)
      %6 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc103)
      cir.store %6, %4 : !s64i, !cir.ptr<!s64i> loc(#loc162)
      cir.scope {
        %7 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc106)
        %8 = cir.call @imaxabs(%7) : (!s64i) -> !s64i side_effect(const) extra(#fn_attr1) loc(#loc107)
        %9 = cir.cast(int_to_float, %8 : !s64i), !cir.long_double<!cir.f80> loc(#loc107)
        %10 = cir.get_global @sqrtl : !cir.ptr<!cir.func<(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80>>> loc(#loc108)
        %11 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc109)
        %12 = cir.cast(int_to_float, %11 : !s64i), !cir.long_double<!cir.f80> loc(#loc109)
        %13 = cir.call @sqrtl(%12) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc108)
        %14 = cir.cmp(le, %9, %13) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc164)
        cir.if %14 {
          %15 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc166)
          %16 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc116)
          %17 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc115)
          %18 = cir.binop(mul, %16, %17) nsw : !s64i loc(#loc116)
          cir.store %18, %15 : !s64i, !cir.ptr<!s64i> loc(#loc166)
          %19 = cir.load %15 : !cir.ptr<!s64i>, !s64i loc(#loc117)
          cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc118)
        } else {
          %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc78)
          %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc78)
          cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc119)
        } loc(#loc165)
      } loc(#loc163)
    } loc(#loc161)
    cir.return loc(#loc80)
  } loc(#loc152)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_square_32.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":25:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":45:1)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":27:5)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":27:13)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":28:5)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":28:26)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":29:5)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":29:26)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":30:12)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":30:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":31:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":36:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":32:9)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":32:25)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":32:24)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":34:16)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":34:9)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":35:21)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":35:10)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":35:9)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":37:5)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":44:5)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":38:9)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":38:25)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":38:24)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":39:9)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":43:9)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":41:13)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":41:37)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":41:30)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":42:31)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":42:13)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":102:1)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":106:1)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":104:5)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":104:13)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":105:5)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":105:13)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":52:1)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":72:1)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":54:5)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":54:13)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":55:5)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":55:26)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":56:5)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":56:26)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":57:12)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":57:5)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":58:5)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":63:5)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":59:9)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":59:25)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":59:24)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":61:16)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":61:9)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":62:21)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":62:10)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":62:9)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":64:5)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":71:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":65:9)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":65:25)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":65:24)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":66:9)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":70:9)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":68:13)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":68:37)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":68:30)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":69:31)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":69:13)
#loc73 = loc("/usr/include/inttypes.h":351:1)
#loc74 = loc("/usr/include/inttypes.h":351:74)
#loc75 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc76 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc77 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":97:23)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":75:1)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":100:1)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":77:5)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":77:13)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":78:5)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":78:26)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":79:5)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":79:26)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":80:12)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":80:5)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":81:5)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":86:5)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":82:9)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":82:25)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":82:24)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":84:16)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":84:9)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":85:21)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":85:10)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":85:9)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":87:5)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":99:5)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":88:9)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":88:25)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":88:24)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":90:9)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":98:9)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":90:31)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":90:13)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":90:40)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":90:46)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":90:55)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":91:9)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":94:9)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":96:9)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":92:13)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":92:37)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":92:30)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":93:31)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":93:13)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_max_square_32.c":97:13)
#loc120 = loc(fused[#loc1, #loc2])
#loc121 = loc(fused[#loc3, #loc4])
#loc122 = loc(fused[#loc5, #loc6])
#loc123 = loc(fused[#loc7, #loc8])
#loc124 = loc(fused[#loc9, #loc10])
#loc125 = loc(fused[#loc12, #loc11])
#loc126 = loc(fused[#loc13, #loc14])
#loc127 = loc(fused[#loc15, #loc16])
#loc128 = loc(fused[#loc19, #loc18])
#loc129 = loc(fused[#loc22, #loc20])
#loc130 = loc(fused[#loc23, #loc24])
#loc131 = loc(fused[#loc25, #loc26])
#loc132 = loc(fused[#loc28, #loc29])
#loc133 = loc(fused[#loc30, #loc31])
#loc134 = loc(fused[#loc35, #loc36])
#loc135 = loc(fused[#loc37, #loc38])
#loc136 = loc(fused[#loc39, #loc40])
#loc137 = loc(fused[#loc41, #loc42])
#loc138 = loc(fused[#loc43, #loc44])
#loc139 = loc(fused[#loc45, #loc46])
#loc140 = loc(fused[#loc47, #loc48])
#loc141 = loc(fused[#loc50, #loc49])
#loc142 = loc(fused[#loc51, #loc52])
#loc143 = loc(fused[#loc53, #loc54])
#loc144 = loc(fused[#loc57, #loc56])
#loc145 = loc(fused[#loc60, #loc58])
#loc146 = loc(fused[#loc61, #loc62])
#loc147 = loc(fused[#loc63, #loc64])
#loc148 = loc(fused[#loc66, #loc67])
#loc149 = loc(fused[#loc68, #loc69])
#loc150 = loc(fused[#loc73, #loc74])
#loc151 = loc(fused[#loc76, #loc77])
#loc152 = loc(fused[#loc79, #loc80])
#loc153 = loc(fused[#loc81, #loc82])
#loc154 = loc(fused[#loc83, #loc84])
#loc155 = loc(fused[#loc85, #loc86])
#loc156 = loc(fused[#loc88, #loc87])
#loc157 = loc(fused[#loc89, #loc90])
#loc158 = loc(fused[#loc91, #loc92])
#loc159 = loc(fused[#loc95, #loc94])
#loc160 = loc(fused[#loc98, #loc96])
#loc161 = loc(fused[#loc99, #loc100])
#loc162 = loc(fused[#loc101, #loc102])
#loc163 = loc(fused[#loc104, #loc105])
#loc164 = loc(fused[#loc107, #loc110])
#loc165 = loc(fused[#loc111, #loc112, #loc113, #loc105])
#loc166 = loc(fused[#loc114, #loc115])
