!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_negative_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc192)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc193)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto  @CWE124_Buffer_Underwrite__CWE839_negative_32_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc195)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc196)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc197)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc196)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc197)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc15)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc198)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc200)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc20)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc21)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc200)
      %8 = cir.const #cir.int<5> : !s32i loc(#loc22)
      %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc23)
      cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc201)
      %10 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc25)
      %11 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
      cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    } loc(#loc199)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc204)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc31)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc32)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc204)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc206)
        %9 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc207)
        %10 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc207)
        cir.store %10, %9 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc207)
        cir.scope {
          %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc41)
          %12 = cir.const #cir.int<10> : !s32i loc(#loc42)
          %13 = cir.cmp(lt, %11, %12) : !s32i, !s32i loc(#loc209)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc43)
          cir.if %14 {
            %15 = cir.const #cir.int<1> : !s32i loc(#loc47)
            %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc48)
            %17 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc49)
            %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc49)
            cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc211)
            cir.scope {
              %19 = cir.const #cir.int<0> : !s32i loc(#loc52)
              cir.store %19, %8 : !s32i, !cir.ptr<!s32i> loc(#loc213)
              cir.for : cond {
                %20 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc54)
                %21 = cir.const #cir.int<10> : !s32i loc(#loc55)
                %22 = cir.cmp(lt, %20, %21) : !s32i, !s32i loc(#loc214)
                %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc56)
                cir.condition(%23) loc(#loc56)
              } body {
                cir.scope {
                  %20 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc58)
                  %21 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc59)
                  %22 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc59)
                  %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc59)
                  cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc60)
                } loc(#loc215)
                cir.yield loc(#loc51)
              } step {
                %20 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc61)
                %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc62)
                cir.store %21, %8 : !s32i, !cir.ptr<!s32i> loc(#loc216)
                cir.yield loc(#loc212)
              } loc(#loc212)
            } loc(#loc212)
          } else {
            %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc5)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc5)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc63)
          } loc(#loc210)
        } loc(#loc208)
      } loc(#loc205)
    } loc(#loc203)
    cir.return loc(#loc7)
  } loc(#loc194)
  cir.func no_proto  @CWE124_Buffer_Underwrite__CWE839_negative_32_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc66)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc219)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc68)
    cir.return loc(#loc65)
  } loc(#loc217)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc221)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc222)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc223)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc222)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc223)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc78)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc79)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc226)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc84)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc85)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc226)
      %8 = cir.const #cir.int<7> : !s32i loc(#loc86)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc227)
      %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc88)
      %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc89)
      cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc228)
    } loc(#loc225)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc230)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc94)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc95)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc230)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc232)
        %9 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc233)
        %10 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc233)
        cir.store %10, %9 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc233)
        cir.scope {
          %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc104)
          %12 = cir.const #cir.int<10> : !s32i loc(#loc105)
          %13 = cir.cmp(lt, %11, %12) : !s32i, !s32i loc(#loc235)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc106)
          cir.if %14 {
            %15 = cir.const #cir.int<1> : !s32i loc(#loc110)
            %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc111)
            %17 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc112)
            %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc112)
            cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc237)
            cir.scope {
              %19 = cir.const #cir.int<0> : !s32i loc(#loc115)
              cir.store %19, %8 : !s32i, !cir.ptr<!s32i> loc(#loc239)
              cir.for : cond {
                %20 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc117)
                %21 = cir.const #cir.int<10> : !s32i loc(#loc118)
                %22 = cir.cmp(lt, %20, %21) : !s32i, !s32i loc(#loc240)
                %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc119)
                cir.condition(%23) loc(#loc119)
              } body {
                cir.scope {
                  %20 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc121)
                  %21 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc122)
                  %22 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc122)
                  %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc122)
                  cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc123)
                } loc(#loc241)
                cir.yield loc(#loc114)
              } step {
                %20 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc124)
                %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc125)
                cir.store %21, %8 : !s32i, !cir.ptr<!s32i> loc(#loc242)
                cir.yield loc(#loc238)
              } loc(#loc238)
            } loc(#loc238)
          } else {
            %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc126)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc126)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc127)
          } loc(#loc236)
        } loc(#loc234)
      } loc(#loc231)
    } loc(#loc229)
    cir.return loc(#loc71)
  } loc(#loc220)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc128)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc244)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc245)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc246)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc245)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc246)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc137)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc138)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc247)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc249)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc143)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc144)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc249)
      %8 = cir.const #cir.int<5> : !s32i loc(#loc145)
      %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc146)
      cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc250)
      %10 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc148)
      %11 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc149)
      cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc251)
    } loc(#loc248)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc253)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc154)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc155)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc253)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc255)
        %9 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc256)
        %10 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc256)
        cir.store %10, %9 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc256)
        cir.scope {
          %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc164)
          %12 = cir.const #cir.int<0> : !s32i loc(#loc165)
          %13 = cir.cmp(ge, %11, %12) : !s32i, !s32i loc(#loc258)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc166)
          %15 = cir.ternary(%14, true {
            %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc168)
            %17 = cir.const #cir.int<10> : !s32i loc(#loc169)
            %18 = cir.cmp(lt, %16, %17) : !s32i, !s32i loc(#loc259)
            %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc171)
            %20 = cir.ternary(%19, true {
              %21 = cir.const #true loc(#loc167)
              cir.yield %21 : !cir.bool loc(#loc167)
            }, false {
              %21 = cir.const #false loc(#loc167)
              cir.yield %21 : !cir.bool loc(#loc167)
            }) : (!cir.bool) -> !cir.bool loc(#loc167)
            cir.yield %20 : !cir.bool loc(#loc167)
          }, false {
            %16 = cir.const #false loc(#loc167)
            cir.yield %16 : !cir.bool loc(#loc167)
          }) : (!cir.bool) -> !cir.bool loc(#loc167)
          cir.if %15 {
            %16 = cir.const #cir.int<1> : !s32i loc(#loc175)
            %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc176)
            %18 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc177)
            %19 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc177)
            cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc261)
            cir.scope {
              %20 = cir.const #cir.int<0> : !s32i loc(#loc180)
              cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc263)
              cir.for : cond {
                %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc182)
                %22 = cir.const #cir.int<10> : !s32i loc(#loc183)
                %23 = cir.cmp(lt, %21, %22) : !s32i, !s32i loc(#loc264)
                %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc184)
                cir.condition(%24) loc(#loc184)
              } body {
                cir.scope {
                  %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc186)
                  %22 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc187)
                  %23 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc187)
                  %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc187)
                  cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc188)
                } loc(#loc265)
                cir.yield loc(#loc179)
              } step {
                %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc189)
                %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc190)
                cir.store %22, %8 : !s32i, !cir.ptr<!s32i> loc(#loc266)
                cir.yield loc(#loc262)
              } loc(#loc262)
            } loc(#loc262)
          } else {
            %16 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc128)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc128)
            cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc191)
          } loc(#loc260)
        } loc(#loc257)
      } loc(#loc254)
    } loc(#loc252)
    cir.return loc(#loc130)
  } loc(#loc243)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_negative_32.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":53:27)
#loc6 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":22:1)
#loc7 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":57:1)
#loc8 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":24:5)
#loc9 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":24:9)
#loc10 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":25:5)
#loc11 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":25:22)
#loc12 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":26:5)
#loc13 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":26:22)
#loc14 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":28:13)
#loc15 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":28:12)
#loc16 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":28:5)
#loc17 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":29:5)
#loc18 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":34:5)
#loc19 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":30:9)
#loc20 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":30:21)
#loc21 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":30:20)
#loc22 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":32:17)
#loc23 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":32:16)
#loc24 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":32:9)
#loc25 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":33:21)
#loc26 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":33:10)
#loc27 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":33:9)
#loc28 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":35:5)
#loc29 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":56:5)
#loc30 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":36:9)
#loc31 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":36:21)
#loc32 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":36:20)
#loc33 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":37:9)
#loc34 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":55:9)
#loc35 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":38:13)
#loc36 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":38:17)
#loc37 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":39:13)
#loc38 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":39:34)
#loc39 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":42:13)
#loc40 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":54:13)
#loc41 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":42:17)
#loc42 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":42:24)
#loc43 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":42:22)
#loc44 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":43:13)
#loc45 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":50:13)
#loc46 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":52:13)
#loc47 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":44:32)
#loc48 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":44:24)
#loc49 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":44:17)
#loc50 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":46:17)
#loc51 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":49:17)
#loc52 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":46:25)
#loc53 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":46:21)
#loc54 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":46:28)
#loc55 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":46:32)
#loc56 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":46:30)
#loc57 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":47:17)
#loc58 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":48:41)
#loc59 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":48:34)
#loc60 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":48:21)
#loc61 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":46:37)
#loc62 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":46:36)
#loc63 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":53:17)
#loc64 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":139:1)
#loc65 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":143:1)
#loc66 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":141:5)
#loc67 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":141:13)
#loc68 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":142:5)
#loc69 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":142:13)
#loc70 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":64:1)
#loc71 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":100:1)
#loc72 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":66:5)
#loc73 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":66:9)
#loc74 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":67:5)
#loc75 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":67:22)
#loc76 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":68:5)
#loc77 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":68:22)
#loc78 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":70:13)
#loc79 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":70:12)
#loc80 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":70:5)
#loc81 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":71:5)
#loc82 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":77:5)
#loc83 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":72:9)
#loc84 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":72:21)
#loc85 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":72:20)
#loc86 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":75:16)
#loc87 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":75:9)
#loc88 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":76:21)
#loc89 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":76:10)
#loc90 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":76:9)
#loc91 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":78:5)
#loc92 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":99:5)
#loc93 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":79:9)
#loc94 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":79:21)
#loc95 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":79:20)
#loc96 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":80:9)
#loc97 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":98:9)
#loc98 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":81:13)
#loc99 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":81:17)
#loc100 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":82:13)
#loc101 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":82:34)
#loc102 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":85:13)
#loc103 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":97:13)
#loc104 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":85:17)
#loc105 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":85:24)
#loc106 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":85:22)
#loc107 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":86:13)
#loc108 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":93:13)
#loc109 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":95:13)
#loc110 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":87:32)
#loc111 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":87:24)
#loc112 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":87:17)
#loc113 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":89:17)
#loc114 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":92:17)
#loc115 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":89:25)
#loc116 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":89:21)
#loc117 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":89:28)
#loc118 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":89:32)
#loc119 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":89:30)
#loc120 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":90:17)
#loc121 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":91:41)
#loc122 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":91:34)
#loc123 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":91:21)
#loc124 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":89:37)
#loc125 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":89:36)
#loc126 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":96:27)
#loc127 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":96:17)
#loc128 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":133:27)
#loc129 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":103:1)
#loc130 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":137:1)
#loc131 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":105:5)
#loc132 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":105:9)
#loc133 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":106:5)
#loc134 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":106:22)
#loc135 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":107:5)
#loc136 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":107:22)
#loc137 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":109:13)
#loc138 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":109:12)
#loc139 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":109:5)
#loc140 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":110:5)
#loc141 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":115:5)
#loc142 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":111:9)
#loc143 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":111:21)
#loc144 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":111:20)
#loc145 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":113:17)
#loc146 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":113:16)
#loc147 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":113:9)
#loc148 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":114:21)
#loc149 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":114:10)
#loc150 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":114:9)
#loc151 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":116:5)
#loc152 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":136:5)
#loc153 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":117:9)
#loc154 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":117:21)
#loc155 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":117:20)
#loc156 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":118:9)
#loc157 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":135:9)
#loc158 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":119:13)
#loc159 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":119:17)
#loc160 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":120:13)
#loc161 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":120:34)
#loc162 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":122:13)
#loc163 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":134:13)
#loc164 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":122:17)
#loc165 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":122:25)
#loc166 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":122:22)
#loc167 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":122:27)
#loc168 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":122:30)
#loc169 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":122:38)
#loc170 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":122:40)
#loc171 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":122:35)
#loc172 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":123:13)
#loc173 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":130:13)
#loc174 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":132:13)
#loc175 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":124:32)
#loc176 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":124:24)
#loc177 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":124:17)
#loc178 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":126:17)
#loc179 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":129:17)
#loc180 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":126:25)
#loc181 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":126:21)
#loc182 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":126:28)
#loc183 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":126:32)
#loc184 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":126:30)
#loc185 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":127:17)
#loc186 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":128:41)
#loc187 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":128:34)
#loc188 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":128:21)
#loc189 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":126:37)
#loc190 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":126:36)
#loc191 = loc("CWE124_Buffer_Underwrite__CWE839_negative_32.c":133:17)
#loc192 = loc(fused[#loc1, #loc2])
#loc193 = loc(fused[#loc3, #loc4])
#loc194 = loc(fused[#loc6, #loc7])
#loc195 = loc(fused[#loc8, #loc9])
#loc196 = loc(fused[#loc10, #loc11])
#loc197 = loc(fused[#loc12, #loc13])
#loc198 = loc(fused[#loc16, #loc14])
#loc199 = loc(fused[#loc17, #loc18])
#loc200 = loc(fused[#loc19, #loc20])
#loc201 = loc(fused[#loc24, #loc22])
#loc202 = loc(fused[#loc27, #loc25])
#loc203 = loc(fused[#loc28, #loc29])
#loc204 = loc(fused[#loc30, #loc31])
#loc205 = loc(fused[#loc33, #loc34])
#loc206 = loc(fused[#loc35, #loc36])
#loc207 = loc(fused[#loc37, #loc38])
#loc208 = loc(fused[#loc39, #loc40])
#loc209 = loc(fused[#loc41, #loc42])
#loc210 = loc(fused[#loc44, #loc45, #loc46, #loc40])
#loc211 = loc(fused[#loc49, #loc47])
#loc212 = loc(fused[#loc50, #loc51])
#loc213 = loc(fused[#loc53, #loc52])
#loc214 = loc(fused[#loc54, #loc55])
#loc215 = loc(fused[#loc57, #loc51])
#loc216 = loc(fused[#loc62, #loc61])
#loc217 = loc(fused[#loc64, #loc65])
#loc218 = loc(fused[#loc66, #loc67])
#loc219 = loc(fused[#loc68, #loc69])
#loc220 = loc(fused[#loc70, #loc71])
#loc221 = loc(fused[#loc72, #loc73])
#loc222 = loc(fused[#loc74, #loc75])
#loc223 = loc(fused[#loc76, #loc77])
#loc224 = loc(fused[#loc80, #loc78])
#loc225 = loc(fused[#loc81, #loc82])
#loc226 = loc(fused[#loc83, #loc84])
#loc227 = loc(fused[#loc87, #loc86])
#loc228 = loc(fused[#loc90, #loc88])
#loc229 = loc(fused[#loc91, #loc92])
#loc230 = loc(fused[#loc93, #loc94])
#loc231 = loc(fused[#loc96, #loc97])
#loc232 = loc(fused[#loc98, #loc99])
#loc233 = loc(fused[#loc100, #loc101])
#loc234 = loc(fused[#loc102, #loc103])
#loc235 = loc(fused[#loc104, #loc105])
#loc236 = loc(fused[#loc107, #loc108, #loc109, #loc103])
#loc237 = loc(fused[#loc112, #loc110])
#loc238 = loc(fused[#loc113, #loc114])
#loc239 = loc(fused[#loc116, #loc115])
#loc240 = loc(fused[#loc117, #loc118])
#loc241 = loc(fused[#loc120, #loc114])
#loc242 = loc(fused[#loc125, #loc124])
#loc243 = loc(fused[#loc129, #loc130])
#loc244 = loc(fused[#loc131, #loc132])
#loc245 = loc(fused[#loc133, #loc134])
#loc246 = loc(fused[#loc135, #loc136])
#loc247 = loc(fused[#loc139, #loc137])
#loc248 = loc(fused[#loc140, #loc141])
#loc249 = loc(fused[#loc142, #loc143])
#loc250 = loc(fused[#loc147, #loc145])
#loc251 = loc(fused[#loc150, #loc148])
#loc252 = loc(fused[#loc151, #loc152])
#loc253 = loc(fused[#loc153, #loc154])
#loc254 = loc(fused[#loc156, #loc157])
#loc255 = loc(fused[#loc158, #loc159])
#loc256 = loc(fused[#loc160, #loc161])
#loc257 = loc(fused[#loc162, #loc163])
#loc258 = loc(fused[#loc164, #loc165])
#loc259 = loc(fused[#loc168, #loc170])
#loc260 = loc(fused[#loc172, #loc173, #loc174, #loc163])
#loc261 = loc(fused[#loc177, #loc175])
#loc262 = loc(fused[#loc178, #loc179])
#loc263 = loc(fused[#loc181, #loc180])
#loc264 = loc(fused[#loc182, #loc183])
#loc265 = loc(fused[#loc185, #loc179])
#loc266 = loc(fused[#loc190, #loc189])
