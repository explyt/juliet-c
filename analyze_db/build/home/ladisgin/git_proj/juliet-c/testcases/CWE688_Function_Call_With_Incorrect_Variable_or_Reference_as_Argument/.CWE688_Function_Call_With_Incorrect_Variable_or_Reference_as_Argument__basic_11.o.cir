!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc76)
  cir.func private @sprintf(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc78)
  cir.func no_proto @CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dest"] {alignment = 16 : i64} loc(#loc80)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intFive", init] {alignment = 4 : i64} loc(#loc81)
    cir.br ^bb1 loc(#loc82)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc83)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc83)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc16)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc16)
    cir.brcond %5 ^bb2, ^bb5 loc(#loc84)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc85)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.int<5> : !s32i loc(#loc13)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    %7 = cir.get_global @sprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...)>> loc(#loc21)
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc22)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    %12 = cir.call @sprintf(%8, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !s32i) -> !s32i extra(#fn_attr) loc(#loc21)
    %13 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc24)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc25)
    cir.br ^bb4 loc(#loc20)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc15)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc15)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc9)
  } loc(#loc79)
  cir.func no_proto @CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc87)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc88)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    cir.return loc(#loc27)
  } loc(#loc86)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc89)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc34)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc35)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dest"] {alignment = 16 : i64} loc(#loc91)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intFive", init] {alignment = 4 : i64} loc(#loc92)
    cir.br ^bb1 loc(#loc93)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc94)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc94)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc44)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc44)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc95)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc34)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    cir.br ^bb6 loc(#loc47)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc96)
  ^bb4:  // pred: ^bb3
    %8 = cir.const #cir.int<5> : !s32i loc(#loc41)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    %9 = cir.get_global @sprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...)>> loc(#loc52)
    %10 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc53)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc35)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc35)
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc54)
    %14 = cir.call @sprintf(%10, %12, %13) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !s32i) -> !s32i extra(#fn_attr) loc(#loc52)
    %15 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    cir.br ^bb5 loc(#loc51)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc43)
  ^bb6:  // 2 preds: ^bb2, ^bb5
    cir.br ^bb7 loc(#loc43)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc37)
  } loc(#loc90)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dest"] {alignment = 16 : i64} loc(#loc98)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intFive", init] {alignment = 4 : i64} loc(#loc99)
    cir.br ^bb1 loc(#loc100)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc101)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc101)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc65)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc65)
    cir.brcond %5 ^bb2, ^bb5 loc(#loc102)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc103)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.int<5> : !s32i loc(#loc62)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    %7 = cir.get_global @sprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...)>> loc(#loc70)
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc71)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc72)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc72)
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc73)
    %12 = cir.call @sprintf(%8, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !s32i) -> !s32i extra(#fn_attr) loc(#loc70)
    %13 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    cir.br ^bb4 loc(#loc69)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc64)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc64)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc58)
  } loc(#loc97)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdio.h":365:1)
#loc4 = loc("/usr/include/stdio.h":366:45)
#loc5 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":30:27)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":22:1)
#loc9 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":34:1)
#loc10 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":27:13)
#loc11 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":27:32)
#loc12 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":28:13)
#loc13 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":28:27)
#loc14 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":24:5)
#loc15 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":33:5)
#loc16 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":24:8)
#loc17 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":24:26)
#loc18 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":25:5)
#loc19 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":26:9)
#loc20 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":32:9)
#loc21 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":30:13)
#loc22 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":30:21)
#loc23 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":30:33)
#loc24 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":31:23)
#loc25 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":31:13)
#loc26 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":75:1)
#loc27 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":79:1)
#loc28 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":77:5)
#loc29 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":77:11)
#loc30 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":78:5)
#loc31 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":78:11)
#loc32 = loc("../../testcasesupport/std_testcase_io.h":50:1)
#loc33 = loc("../../testcasesupport/std_testcase_io.h":50:24)
#loc34 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":46:19)
#loc35 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":54:27)
#loc36 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":41:1)
#loc37 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":58:1)
#loc38 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":51:13)
#loc39 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":51:32)
#loc40 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":52:13)
#loc41 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":52:27)
#loc42 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":43:5)
#loc43 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":57:5)
#loc44 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":43:8)
#loc45 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":43:27)
#loc46 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":44:5)
#loc47 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":47:5)
#loc48 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":49:5)
#loc49 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":46:9)
#loc50 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":50:9)
#loc51 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":56:9)
#loc52 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":54:13)
#loc53 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":54:21)
#loc54 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":54:33)
#loc55 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":55:23)
#loc56 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":55:13)
#loc57 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":61:1)
#loc58 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":73:1)
#loc59 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":66:13)
#loc60 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":66:32)
#loc61 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":67:13)
#loc62 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":67:27)
#loc63 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":63:5)
#loc64 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":72:5)
#loc65 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":63:8)
#loc66 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":63:26)
#loc67 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":64:5)
#loc68 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":65:9)
#loc69 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":71:9)
#loc70 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":69:13)
#loc71 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":69:21)
#loc72 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":69:27)
#loc73 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":69:33)
#loc74 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":70:23)
#loc75 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c":70:13)
#loc76 = loc(fused[#loc1, #loc2])
#loc77 = loc(fused[#loc3, #loc4])
#loc78 = loc(fused[#loc6, #loc7])
#loc79 = loc(fused[#loc8, #loc9])
#loc80 = loc(fused[#loc10, #loc11])
#loc81 = loc(fused[#loc12, #loc13])
#loc82 = loc(fused[#loc14, #loc15])
#loc83 = loc(fused[#loc16, #loc17])
#loc84 = loc(fused[#loc18, #loc15])
#loc85 = loc(fused[#loc19, #loc20])
#loc86 = loc(fused[#loc26, #loc27])
#loc87 = loc(fused[#loc28, #loc29])
#loc88 = loc(fused[#loc30, #loc31])
#loc89 = loc(fused[#loc32, #loc33])
#loc90 = loc(fused[#loc36, #loc37])
#loc91 = loc(fused[#loc38, #loc39])
#loc92 = loc(fused[#loc40, #loc41])
#loc93 = loc(fused[#loc42, #loc43])
#loc94 = loc(fused[#loc44, #loc45])
#loc95 = loc(fused[#loc46, #loc47, #loc48, #loc43])
#loc96 = loc(fused[#loc50, #loc51])
#loc97 = loc(fused[#loc57, #loc58])
#loc98 = loc(fused[#loc59, #loc60])
#loc99 = loc(fused[#loc61, #loc62])
#loc100 = loc(fused[#loc63, #loc64])
#loc101 = loc(fused[#loc65, #loc66])
#loc102 = loc(fused[#loc67, #loc64])
#loc103 = loc(fused[#loc68, #loc69])
