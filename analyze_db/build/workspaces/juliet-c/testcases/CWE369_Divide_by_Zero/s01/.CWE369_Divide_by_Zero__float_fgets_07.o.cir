!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fgets_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc231)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc232)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc233)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc234)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc235)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private @printIntLine(!s32i) loc(#loc236)
  cir.func no_proto @CWE369_Divide_by_Zero__float_fgets_07_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc238)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc18)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc239)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc231)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc22)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc23)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc241)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc244)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc31)
            %8 = cir.const #cir.int<20> : !s32i loc(#loc32)
            %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc233)
            %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc33)
            %11 = cir.call @fgets(%7, %8, %10) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc34)
            %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc35)
            %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc35)
            %14 = cir.cmp(ne, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc246)
            cir.if %14 {
              %15 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc39)
              %16 = cir.call @atof(%15) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc40)
              %17 = cir.cast(floating, %16 : !cir.double), !cir.float loc(#loc40)
              cir.store %17, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc248)
            } else {
              %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
              %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
              cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc43)
            } loc(#loc247)
          } loc(#loc245)
        } loc(#loc243)
      } loc(#loc242)
    } loc(#loc240)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc231)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc46)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc47)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc250)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc253)
          %7 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc53)
          %8 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc54)
          %9 = cir.cast(floating, %8 : !cir.float), !cir.double loc(#loc54)
          %10 = cir.binop(div, %7, %9) : !cir.double loc(#loc254)
          %11 = cir.cast(float_to_int, %10 : !cir.double), !s32i loc(#loc254)
          cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc253)
          %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc55)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc56)
        } loc(#loc252)
      } loc(#loc251)
    } loc(#loc249)
    cir.return loc(#loc15)
  } loc(#loc237)
  cir.func no_proto @CWE369_Divide_by_Zero__float_fgets_07_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc256)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc59)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc257)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc61)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc258)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc63)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc259)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc65)
    cir.return loc(#loc58)
  } loc(#loc255)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc67)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc68)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc261)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc73)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc262)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc231)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc77)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc78)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc264)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc267)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc86)
            %8 = cir.const #cir.int<20> : !s32i loc(#loc87)
            %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc233)
            %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc88)
            %11 = cir.call @fgets(%7, %8, %10) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc89)
            %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc90)
            %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc90)
            %14 = cir.cmp(ne, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc269)
            cir.if %14 {
              %15 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc94)
              %16 = cir.call @atof(%15) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc95)
              %17 = cir.cast(floating, %16 : !cir.double), !cir.float loc(#loc95)
              cir.store %17, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc271)
            } else {
              %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc98)
              %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc98)
              cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc99)
            } loc(#loc270)
          } loc(#loc268)
        } loc(#loc266)
      } loc(#loc265)
    } loc(#loc263)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc231)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc102)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc103)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc273)
      cir.if %5 {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc67)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc67)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc107)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc110)
          %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc110)
          %8 = cir.fabs %7 : !cir.double loc(#loc110)
          %9 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc111)
          %10 = cir.cmp(gt, %8, %9) : !cir.double, !cir.bool loc(#loc276)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc278)
            %12 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc118)
            %13 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc119)
            %14 = cir.cast(floating, %13 : !cir.float), !cir.double loc(#loc119)
            %15 = cir.binop(div, %12, %14) : !cir.double loc(#loc279)
            %16 = cir.cast(float_to_int, %15 : !cir.double), !s32i loc(#loc279)
            cir.store %16, %11 : !s32i, !cir.ptr<!s32i> loc(#loc278)
            %17 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc120)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc121)
          } else {
            %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc68)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc68)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc122)
          } loc(#loc277)
        } loc(#loc275)
      } loc(#loc274)
    } loc(#loc272)
    cir.return loc(#loc70)
  } loc(#loc260)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc281)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc127)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc282)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc231)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc131)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc132)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc284)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc287)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc140)
            %8 = cir.const #cir.int<20> : !s32i loc(#loc141)
            %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc233)
            %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc142)
            %11 = cir.call @fgets(%7, %8, %10) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc143)
            %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc144)
            %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc144)
            %14 = cir.cmp(ne, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc289)
            cir.if %14 {
              %15 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc148)
              %16 = cir.call @atof(%15) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc149)
              %17 = cir.cast(floating, %16 : !cir.double), !cir.float loc(#loc149)
              cir.store %17, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc291)
            } else {
              %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc152)
              %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc152)
              cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc153)
            } loc(#loc290)
          } loc(#loc288)
        } loc(#loc286)
      } loc(#loc285)
    } loc(#loc283)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc231)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc156)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc157)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc293)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc161)
          %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc161)
          %8 = cir.fabs %7 : !cir.double loc(#loc161)
          %9 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc162)
          %10 = cir.cmp(gt, %8, %9) : !cir.double, !cir.bool loc(#loc296)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc298)
            %12 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc169)
            %13 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc170)
            %14 = cir.cast(floating, %13 : !cir.float), !cir.double loc(#loc170)
            %15 = cir.binop(div, %12, %14) : !cir.double loc(#loc299)
            %16 = cir.cast(float_to_int, %15 : !cir.double), !s32i loc(#loc299)
            cir.store %16, %11 : !s32i, !cir.ptr<!s32i> loc(#loc298)
            %17 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc171)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc172)
          } else {
            %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc173)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc173)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc174)
          } loc(#loc297)
        } loc(#loc295)
      } loc(#loc294)
    } loc(#loc292)
    cir.return loc(#loc124)
  } loc(#loc280)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc301)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc179)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc302)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc231)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc183)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc184)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc304)
      cir.if %5 {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc188)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc188)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc189)
      } else {
        %6 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc190)
        cir.store %6, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc306)
      } loc(#loc305)
    } loc(#loc303)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc231)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc194)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc195)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc308)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc311)
          %7 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc201)
          %8 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc202)
          %9 = cir.cast(floating, %8 : !cir.float), !cir.double loc(#loc202)
          %10 = cir.binop(div, %7, %9) : !cir.double loc(#loc312)
          %11 = cir.cast(float_to_int, %10 : !cir.double), !s32i loc(#loc312)
          cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc311)
          %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc203)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc204)
        } loc(#loc310)
      } loc(#loc309)
    } loc(#loc307)
    cir.return loc(#loc176)
  } loc(#loc300)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc314)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc209)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc315)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc231)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc213)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc214)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc317)
      cir.if %5 {
        %6 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc216)
        cir.store %6, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc319)
      } loc(#loc318)
    } loc(#loc316)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc231)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc220)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc221)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc321)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc324)
          %7 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc227)
          %8 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc228)
          %9 = cir.cast(floating, %8 : !cir.float), !cir.double loc(#loc228)
          %10 = cir.binop(div, %7, %9) : !cir.double loc(#loc325)
          %11 = cir.cast(float_to_int, %10 : !cir.double), !s32i loc(#loc325)
          cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc324)
          %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc229)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc230)
        } loc(#loc323)
      } loc(#loc322)
    } loc(#loc320)
    cir.return loc(#loc206)
  } loc(#loc313)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fgets_07.c":0:0)
#loc1 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":27:1)
#loc2 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":27:25)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":102:1)
#loc8 = loc("/usr/include/stdlib.h":103:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":48:27)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":31:1)
#loc15 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":60:1)
#loc16 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":33:5)
#loc17 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":33:11)
#loc18 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":35:12)
#loc19 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":35:5)
#loc20 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":36:5)
#loc21 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":51:5)
#loc22 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":36:8)
#loc23 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":36:20)
#loc24 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":37:5)
#loc25 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":38:9)
#loc26 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":50:9)
#loc27 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":39:13)
#loc28 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":39:45)
#loc29 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":41:13)
#loc30 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":49:13)
#loc31 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":41:23)
#loc32 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":41:36)
#loc33 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":41:53)
#loc34 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":41:17)
#loc35 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":41:63)
#loc36 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":42:13)
#loc37 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":45:13)
#loc38 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":47:13)
#loc39 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":44:36)
#loc40 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":44:31)
#loc41 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":44:17)
#loc42 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":44:47)
#loc43 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":48:17)
#loc44 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":52:5)
#loc45 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":59:5)
#loc46 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":52:8)
#loc47 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":52:20)
#loc48 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":53:5)
#loc49 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":54:9)
#loc50 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":58:9)
#loc51 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":56:13)
#loc52 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":56:44)
#loc53 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":56:32)
#loc54 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":56:40)
#loc55 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":57:26)
#loc56 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":57:13)
#loc57 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":192:1)
#loc58 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":198:1)
#loc59 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":194:5)
#loc60 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":194:14)
#loc61 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":195:5)
#loc62 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":195:14)
#loc63 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":196:5)
#loc64 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":196:14)
#loc65 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":197:5)
#loc66 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":197:14)
#loc67 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":91:19)
#loc68 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":103:23)
#loc69 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":67:1)
#loc70 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":106:1)
#loc71 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":69:5)
#loc72 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":69:11)
#loc73 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":71:12)
#loc74 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":71:5)
#loc75 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":72:5)
#loc76 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":87:5)
#loc77 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":72:8)
#loc78 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":72:20)
#loc79 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":73:5)
#loc80 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":74:9)
#loc81 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":86:9)
#loc82 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":75:13)
#loc83 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":75:45)
#loc84 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":77:13)
#loc85 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":85:13)
#loc86 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":77:23)
#loc87 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":77:36)
#loc88 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":77:53)
#loc89 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":77:17)
#loc90 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":77:63)
#loc91 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":78:13)
#loc92 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":81:13)
#loc93 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":83:13)
#loc94 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":80:36)
#loc95 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":80:31)
#loc96 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":80:17)
#loc97 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":80:47)
#loc98 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":84:27)
#loc99 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":84:17)
#loc100 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":88:5)
#loc101 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":105:5)
#loc102 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":88:8)
#loc103 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":88:20)
#loc104 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":89:5)
#loc105 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":92:5)
#loc106 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":94:5)
#loc107 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":91:9)
#loc108 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":96:9)
#loc109 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":104:9)
#loc110 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":96:17)
#loc111 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":96:25)
#loc112 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":96:12)
#loc113 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":97:9)
#loc114 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":100:9)
#loc115 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":102:9)
#loc116 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":98:13)
#loc117 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":98:44)
#loc118 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":98:32)
#loc119 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":98:40)
#loc120 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":99:26)
#loc121 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":99:13)
#loc122 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":103:13)
#loc123 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":109:1)
#loc124 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":143:1)
#loc125 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":111:5)
#loc126 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":111:11)
#loc127 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":113:12)
#loc128 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":113:5)
#loc129 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":114:5)
#loc130 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":129:5)
#loc131 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":114:8)
#loc132 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":114:20)
#loc133 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":115:5)
#loc134 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":116:9)
#loc135 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":128:9)
#loc136 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":117:13)
#loc137 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":117:45)
#loc138 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":119:13)
#loc139 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":127:13)
#loc140 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":119:23)
#loc141 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":119:36)
#loc142 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":119:53)
#loc143 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":119:17)
#loc144 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":119:63)
#loc145 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":120:13)
#loc146 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":123:13)
#loc147 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":125:13)
#loc148 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":122:36)
#loc149 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":122:31)
#loc150 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":122:17)
#loc151 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":122:47)
#loc152 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":126:27)
#loc153 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":126:17)
#loc154 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":130:5)
#loc155 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":142:5)
#loc156 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":130:8)
#loc157 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":130:20)
#loc158 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":131:5)
#loc159 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":133:9)
#loc160 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":141:9)
#loc161 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":133:17)
#loc162 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":133:25)
#loc163 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":133:12)
#loc164 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":134:9)
#loc165 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":137:9)
#loc166 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":139:9)
#loc167 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":135:13)
#loc168 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":135:44)
#loc169 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":135:32)
#loc170 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":135:40)
#loc171 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":136:26)
#loc172 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":136:13)
#loc173 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":140:23)
#loc174 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":140:13)
#loc175 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":146:1)
#loc176 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":169:1)
#loc177 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":148:5)
#loc178 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":148:11)
#loc179 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":150:12)
#loc180 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":150:5)
#loc181 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":151:5)
#loc182 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":160:5)
#loc183 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":151:8)
#loc184 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":151:20)
#loc185 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":152:5)
#loc186 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":155:5)
#loc187 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":157:5)
#loc188 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":154:19)
#loc189 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":154:9)
#loc190 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":159:16)
#loc191 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":159:9)
#loc192 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":161:5)
#loc193 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":168:5)
#loc194 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":161:8)
#loc195 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":161:20)
#loc196 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":162:5)
#loc197 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":163:9)
#loc198 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":167:9)
#loc199 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":165:13)
#loc200 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":165:44)
#loc201 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":165:32)
#loc202 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":165:40)
#loc203 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":166:26)
#loc204 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":166:13)
#loc205 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":172:1)
#loc206 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":190:1)
#loc207 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":174:5)
#loc208 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":174:11)
#loc209 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":176:12)
#loc210 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":176:5)
#loc211 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":177:5)
#loc212 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":181:5)
#loc213 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":177:8)
#loc214 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":177:20)
#loc215 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":178:5)
#loc216 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":180:16)
#loc217 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":180:9)
#loc218 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":182:5)
#loc219 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":189:5)
#loc220 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":182:8)
#loc221 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":182:20)
#loc222 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":183:5)
#loc223 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":184:9)
#loc224 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":188:9)
#loc225 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":186:13)
#loc226 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":186:44)
#loc227 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":186:32)
#loc228 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":186:40)
#loc229 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":187:26)
#loc230 = loc("CWE369_Divide_by_Zero__float_fgets_07.c":187:13)
#loc231 = loc(fused[#loc1, #loc2])
#loc232 = loc(fused[#loc3, #loc4])
#loc233 = loc(fused[#loc5, #loc6])
#loc234 = loc(fused[#loc7, #loc8])
#loc235 = loc(fused[#loc9, #loc10])
#loc236 = loc(fused[#loc12, #loc13])
#loc237 = loc(fused[#loc14, #loc15])
#loc238 = loc(fused[#loc16, #loc17])
#loc239 = loc(fused[#loc19, #loc18])
#loc240 = loc(fused[#loc20, #loc21])
#loc241 = loc(fused[#loc22, #loc23])
#loc242 = loc(fused[#loc24, #loc21])
#loc243 = loc(fused[#loc25, #loc26])
#loc244 = loc(fused[#loc27, #loc28])
#loc245 = loc(fused[#loc29, #loc30])
#loc246 = loc(fused[#loc34, #loc35])
#loc247 = loc(fused[#loc36, #loc37, #loc38, #loc30])
#loc248 = loc(fused[#loc41, #loc42])
#loc249 = loc(fused[#loc44, #loc45])
#loc250 = loc(fused[#loc46, #loc47])
#loc251 = loc(fused[#loc48, #loc45])
#loc252 = loc(fused[#loc49, #loc50])
#loc253 = loc(fused[#loc51, #loc52])
#loc254 = loc(fused[#loc53, #loc54])
#loc255 = loc(fused[#loc57, #loc58])
#loc256 = loc(fused[#loc59, #loc60])
#loc257 = loc(fused[#loc61, #loc62])
#loc258 = loc(fused[#loc63, #loc64])
#loc259 = loc(fused[#loc65, #loc66])
#loc260 = loc(fused[#loc69, #loc70])
#loc261 = loc(fused[#loc71, #loc72])
#loc262 = loc(fused[#loc74, #loc73])
#loc263 = loc(fused[#loc75, #loc76])
#loc264 = loc(fused[#loc77, #loc78])
#loc265 = loc(fused[#loc79, #loc76])
#loc266 = loc(fused[#loc80, #loc81])
#loc267 = loc(fused[#loc82, #loc83])
#loc268 = loc(fused[#loc84, #loc85])
#loc269 = loc(fused[#loc89, #loc90])
#loc270 = loc(fused[#loc91, #loc92, #loc93, #loc85])
#loc271 = loc(fused[#loc96, #loc97])
#loc272 = loc(fused[#loc100, #loc101])
#loc273 = loc(fused[#loc102, #loc103])
#loc274 = loc(fused[#loc104, #loc105, #loc106, #loc101])
#loc275 = loc(fused[#loc108, #loc109])
#loc276 = loc(fused[#loc112, #loc111])
#loc277 = loc(fused[#loc113, #loc114, #loc115, #loc109])
#loc278 = loc(fused[#loc116, #loc117])
#loc279 = loc(fused[#loc118, #loc119])
#loc280 = loc(fused[#loc123, #loc124])
#loc281 = loc(fused[#loc125, #loc126])
#loc282 = loc(fused[#loc128, #loc127])
#loc283 = loc(fused[#loc129, #loc130])
#loc284 = loc(fused[#loc131, #loc132])
#loc285 = loc(fused[#loc133, #loc130])
#loc286 = loc(fused[#loc134, #loc135])
#loc287 = loc(fused[#loc136, #loc137])
#loc288 = loc(fused[#loc138, #loc139])
#loc289 = loc(fused[#loc143, #loc144])
#loc290 = loc(fused[#loc145, #loc146, #loc147, #loc139])
#loc291 = loc(fused[#loc150, #loc151])
#loc292 = loc(fused[#loc154, #loc155])
#loc293 = loc(fused[#loc156, #loc157])
#loc294 = loc(fused[#loc158, #loc155])
#loc295 = loc(fused[#loc159, #loc160])
#loc296 = loc(fused[#loc163, #loc162])
#loc297 = loc(fused[#loc164, #loc165, #loc166, #loc160])
#loc298 = loc(fused[#loc167, #loc168])
#loc299 = loc(fused[#loc169, #loc170])
#loc300 = loc(fused[#loc175, #loc176])
#loc301 = loc(fused[#loc177, #loc178])
#loc302 = loc(fused[#loc180, #loc179])
#loc303 = loc(fused[#loc181, #loc182])
#loc304 = loc(fused[#loc183, #loc184])
#loc305 = loc(fused[#loc185, #loc186, #loc187, #loc182])
#loc306 = loc(fused[#loc191, #loc190])
#loc307 = loc(fused[#loc192, #loc193])
#loc308 = loc(fused[#loc194, #loc195])
#loc309 = loc(fused[#loc196, #loc193])
#loc310 = loc(fused[#loc197, #loc198])
#loc311 = loc(fused[#loc199, #loc200])
#loc312 = loc(fused[#loc201, #loc202])
#loc313 = loc(fused[#loc205, #loc206])
#loc314 = loc(fused[#loc207, #loc208])
#loc315 = loc(fused[#loc210, #loc209])
#loc316 = loc(fused[#loc211, #loc212])
#loc317 = loc(fused[#loc213, #loc214])
#loc318 = loc(fused[#loc215, #loc212])
#loc319 = loc(fused[#loc217, #loc216])
#loc320 = loc(fused[#loc218, #loc219])
#loc321 = loc(fused[#loc220, #loc221])
#loc322 = loc(fused[#loc222, #loc219])
#loc323 = loc(fused[#loc223, #loc224])
#loc324 = loc(fused[#loc225, #loc226])
#loc325 = loc(fused[#loc227, #loc228])
