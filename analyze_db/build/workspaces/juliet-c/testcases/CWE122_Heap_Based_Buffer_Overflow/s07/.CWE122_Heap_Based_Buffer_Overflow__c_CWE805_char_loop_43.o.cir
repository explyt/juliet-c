!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":26:23)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":26:31)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":60:27)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":60:35)
#loc155 = loc(fused[#loc7, #loc8])
#loc182 = loc(fused[#loc81, #loc82])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc152)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc153)
  cir.func internal private @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43L9badSourceERPc(%arg0: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["data", init, const] {alignment = 8 : i64} loc(#loc155)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc9)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc10)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc11)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc156)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc157)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc10)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc158)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc15)
    cir.store %7, %8 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc159)
    cir.scope {
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc18)
      %15 = cir.load %14 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc18)
      %16 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc19)
      %17 = cir.cmp(eq, %15, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc161)
      cir.if %17 {
        %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc21)
        %19 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc23)
        cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc21)
      } loc(#loc162)
    } loc(#loc160)
    %9 = cir.const #cir.int<0> : !s8i loc(#loc24)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc25)
    %11 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc26)
    %13 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc27)
    cir.store %9, %13 : !s8i, !cir.ptr<!s8i> loc(#loc163)
    cir.return loc(#loc6)
  } loc(#loc154)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc164)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc165)
  cir.func @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_433badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc167)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc36)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc168)
    cir.call @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43L9badSourceERPc(%0) : (!cir.ptr<!cir.ptr<!s8i>>) -> () loc(#loc38)
    cir.scope {
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc170)
      %3 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc171)
      %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc45)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc45)
      %6 = cir.const #cir.int<67> : !s8i loc(#loc46)
      %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc46)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc47)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc48)
      %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc47)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc47)
      cir.libc.memset %11 bytes from %5 set to %7 : !cir.ptr<!void>, !s32i, !u64i loc(#loc172)
      %12 = cir.const #cir.int<0> : !s8i loc(#loc51)
      %13 = cir.const #cir.int<100> : !s32i loc(#loc52)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc53)
      %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc52)
      %16 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc54)
      %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc54)
      cir.store %12, %17 : !s8i, !cir.ptr<!s8i> loc(#loc173)
      cir.scope {
        %28 = cir.const #cir.int<0> : !s32i loc(#loc57)
        %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc57)
        cir.store %29, %2 : !u64i, !cir.ptr<!u64i> loc(#loc175)
        cir.for : cond {
          %30 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc59)
          %31 = cir.const #cir.int<100> : !s32i loc(#loc60)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc60)
          %33 = cir.cmp(lt, %30, %32) : !u64i, !cir.bool loc(#loc176)
          cir.condition(%33) loc(#loc176)
        } body {
          cir.scope {
            %30 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc62)
            %31 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc63)
            %32 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %30 : !u64i), !cir.ptr<!s8i> loc(#loc63)
            %33 = cir.load %32 : !cir.ptr<!s8i>, !s8i loc(#loc63)
            %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
            %35 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc65)
            %36 = cir.ptr_stride(%34 : !cir.ptr<!s8i>, %35 : !u64i), !cir.ptr<!s8i> loc(#loc66)
            cir.store %33, %36 : !s8i, !cir.ptr<!s8i> loc(#loc178)
          } loc(#loc177)
          cir.yield loc(#loc56)
        } step {
          %30 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc68)
          %31 = cir.unary(inc, %30) : !u64i, !u64i loc(#loc69)
          cir.store %31, %2 : !u64i, !cir.ptr<!u64i> loc(#loc179)
          cir.yield loc(#loc174)
        } loc(#loc174)
      } loc(#loc174)
      %18 = cir.const #cir.int<0> : !s8i loc(#loc70)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc71)
      %20 = cir.const #cir.int<100> : !s32i loc(#loc72)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc73)
      %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc72)
      %23 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc74)
      cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc180)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc75)
      cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc76)
      %25 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc77)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc78)
      cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc77)
    } loc(#loc169)
    cir.return loc(#loc33)
  } loc(#loc166)
  cir.func internal private @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43L13goodG2BSourceERPc(%arg0: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc81, #loc82])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["data", init, const] {alignment = 8 : i64} loc(#loc182)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc83)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc84)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc85)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc85)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc183)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc184)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc84)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc185)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc89)
    cir.store %7, %8 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc186)
    cir.scope {
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc92)
      %15 = cir.load %14 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc92)
      %16 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc93)
      %17 = cir.cmp(eq, %15, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc188)
      cir.if %17 {
        %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc95)
        %19 = cir.const #cir.int<1> : !s32i loc(#loc96)
        %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc97)
        cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc95)
      } loc(#loc189)
    } loc(#loc187)
    %9 = cir.const #cir.int<0> : !s8i loc(#loc98)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc99)
    %11 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc99)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc100)
    %13 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc101)
    cir.store %9, %13 : !s8i, !cir.ptr<!s8i> loc(#loc190)
    cir.return loc(#loc80)
  } loc(#loc181)
  cir.func internal private @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc192)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc106)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc193)
    cir.call @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43L13goodG2BSourceERPc(%0) : (!cir.ptr<!cir.ptr<!s8i>>) -> () loc(#loc108)
    cir.scope {
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc195)
      %3 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc196)
      %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc115)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc115)
      %6 = cir.const #cir.int<67> : !s8i loc(#loc116)
      %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc116)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc117)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc118)
      %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc117)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc117)
      cir.libc.memset %11 bytes from %5 set to %7 : !cir.ptr<!void>, !s32i, !u64i loc(#loc197)
      %12 = cir.const #cir.int<0> : !s8i loc(#loc121)
      %13 = cir.const #cir.int<100> : !s32i loc(#loc122)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc123)
      %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc122)
      %16 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc124)
      %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc124)
      cir.store %12, %17 : !s8i, !cir.ptr<!s8i> loc(#loc198)
      cir.scope {
        %28 = cir.const #cir.int<0> : !s32i loc(#loc127)
        %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc127)
        cir.store %29, %2 : !u64i, !cir.ptr<!u64i> loc(#loc200)
        cir.for : cond {
          %30 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc129)
          %31 = cir.const #cir.int<100> : !s32i loc(#loc130)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc130)
          %33 = cir.cmp(lt, %30, %32) : !u64i, !cir.bool loc(#loc201)
          cir.condition(%33) loc(#loc201)
        } body {
          cir.scope {
            %30 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc132)
            %31 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc133)
            %32 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %30 : !u64i), !cir.ptr<!s8i> loc(#loc133)
            %33 = cir.load %32 : !cir.ptr<!s8i>, !s8i loc(#loc133)
            %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc134)
            %35 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc135)
            %36 = cir.ptr_stride(%34 : !cir.ptr<!s8i>, %35 : !u64i), !cir.ptr<!s8i> loc(#loc136)
            cir.store %33, %36 : !s8i, !cir.ptr<!s8i> loc(#loc203)
          } loc(#loc202)
          cir.yield loc(#loc126)
        } step {
          %30 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc138)
          %31 = cir.unary(inc, %30) : !u64i, !u64i loc(#loc139)
          cir.store %31, %2 : !u64i, !cir.ptr<!u64i> loc(#loc204)
          cir.yield loc(#loc199)
        } loc(#loc199)
      } loc(#loc199)
      %18 = cir.const #cir.int<0> : !s8i loc(#loc140)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc141)
      %20 = cir.const #cir.int<100> : !s32i loc(#loc142)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc143)
      %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc142)
      %23 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc144)
      cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc205)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
      cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc146)
      %25 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc147)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc148)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc148)
      cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc147)
    } loc(#loc194)
    cir.return loc(#loc103)
  } loc(#loc191)
  cir.func @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_434goodEv() extra(#fn_attr1) {
    cir.call @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43L7goodG2BEv() : () -> () loc(#loc151)
    cir.return loc(#loc150)
  } loc(#loc206)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":26:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":32:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":27:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":29:20)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":29:27)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":29:30)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":29:41)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":29:42)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":29:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":30:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":30:33)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":30:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":30:17)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":30:23)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":30:24)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":30:30)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":30:29)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":31:15)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":31:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":31:10)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":31:11)
#loc28 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc29 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc30 = loc("/usr/include/stdlib.h":687:1)
#loc31 = loc("/usr/include/stdlib.h":687:32)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":34:1)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":53:1)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":36:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":36:12)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":37:12)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":37:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":38:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":39:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":52:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":40:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":40:16)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":41:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":41:24)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":42:16)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":42:24)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":42:29)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":42:33)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":42:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":42:34)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":43:25)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":43:16)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":43:20)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":43:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":45:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":48:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":45:18)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":45:14)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":45:21)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":45:25)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":46:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":47:30)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":47:23)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":47:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":47:18)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":47:19)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":47:31)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":45:31)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":45:30)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":49:23)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":49:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":49:14)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":49:18)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":49:19)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":50:19)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":50:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":51:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":51:14)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":60:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":66:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":61:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":63:20)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":63:27)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":63:31)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":63:42)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":63:43)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":63:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":64:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":64:33)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":64:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":64:17)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":64:23)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":64:24)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":64:30)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":64:29)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":65:15)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":65:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":65:10)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":65:11)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":68:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":87:1)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":70:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":70:12)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":71:12)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":71:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":72:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":73:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":86:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":74:9)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":74:16)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":75:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":75:24)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":76:16)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":76:24)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":76:29)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":76:33)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":76:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":76:34)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":77:25)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":77:16)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":77:20)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":77:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":79:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":82:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":79:18)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":79:14)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":79:21)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":79:25)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":80:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":81:30)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":81:23)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":81:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":81:18)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":81:19)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":81:31)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":79:31)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":79:30)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":83:23)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":83:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":83:14)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":83:18)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":83:19)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":84:19)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":84:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":85:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":85:14)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":89:1)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":92:1)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_43.cpp":91:5)
#loc152 = loc(fused[#loc1, #loc2])
#loc153 = loc(fused[#loc3, #loc4])
#loc154 = loc(fused[#loc5, #loc6])
#loc156 = loc(fused[#loc12, #loc13])
#loc157 = loc(fused[#loc11, #loc13])
#loc158 = loc(fused[#loc10, #loc14])
#loc159 = loc(fused[#loc15, #loc14])
#loc160 = loc(fused[#loc16, #loc17])
#loc161 = loc(fused[#loc18, #loc19])
#loc162 = loc(fused[#loc20, #loc17])
#loc163 = loc(fused[#loc25, #loc24])
#loc164 = loc(fused[#loc28, #loc29])
#loc165 = loc(fused[#loc30, #loc31])
#loc166 = loc(fused[#loc32, #loc33])
#loc167 = loc(fused[#loc34, #loc35])
#loc168 = loc(fused[#loc37, #loc36])
#loc169 = loc(fused[#loc39, #loc40])
#loc170 = loc(fused[#loc41, #loc42])
#loc171 = loc(fused[#loc43, #loc44])
#loc172 = loc(fused[#loc49, #loc50])
#loc173 = loc(fused[#loc54, #loc51])
#loc174 = loc(fused[#loc55, #loc56])
#loc175 = loc(fused[#loc58, #loc57])
#loc176 = loc(fused[#loc59, #loc60])
#loc177 = loc(fused[#loc61, #loc56])
#loc178 = loc(fused[#loc64, #loc67])
#loc179 = loc(fused[#loc69, #loc68])
#loc180 = loc(fused[#loc71, #loc70])
#loc181 = loc(fused[#loc79, #loc80])
#loc183 = loc(fused[#loc86, #loc87])
#loc184 = loc(fused[#loc85, #loc87])
#loc185 = loc(fused[#loc84, #loc88])
#loc186 = loc(fused[#loc89, #loc88])
#loc187 = loc(fused[#loc90, #loc91])
#loc188 = loc(fused[#loc92, #loc93])
#loc189 = loc(fused[#loc94, #loc91])
#loc190 = loc(fused[#loc99, #loc98])
#loc191 = loc(fused[#loc102, #loc103])
#loc192 = loc(fused[#loc104, #loc105])
#loc193 = loc(fused[#loc107, #loc106])
#loc194 = loc(fused[#loc109, #loc110])
#loc195 = loc(fused[#loc111, #loc112])
#loc196 = loc(fused[#loc113, #loc114])
#loc197 = loc(fused[#loc119, #loc120])
#loc198 = loc(fused[#loc124, #loc121])
#loc199 = loc(fused[#loc125, #loc126])
#loc200 = loc(fused[#loc128, #loc127])
#loc201 = loc(fused[#loc129, #loc130])
#loc202 = loc(fused[#loc131, #loc126])
#loc203 = loc(fused[#loc134, #loc137])
#loc204 = loc(fused[#loc139, #loc138])
#loc205 = loc(fused[#loc141, #loc140])
#loc206 = loc(fused[#loc149, #loc150])
