!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc9 = loc("CWE401_Memory_Leak__int_malloc_42.c":24:24)
#loc10 = loc("CWE401_Memory_Leak__int_malloc_42.c":24:30)
#loc64 = loc("CWE401_Memory_Leak__int_malloc_42.c":104:10)
#loc65 = loc("CWE401_Memory_Leak__int_malloc_42.c":104:14)
#loc66 = loc("CWE401_Memory_Leak__int_malloc_42.c":104:20)
#loc67 = loc("CWE401_Memory_Leak__int_malloc_42.c":104:32)
#loc84 = loc("CWE401_Memory_Leak__int_malloc_42.c":69:28)
#loc85 = loc("CWE401_Memory_Leak__int_malloc_42.c":69:34)
#loc127 = loc("CWE401_Memory_Leak__int_malloc_42.c":49:28)
#loc128 = loc("CWE401_Memory_Leak__int_malloc_42.c":49:34)
#loc156 = loc(fused[#loc9, #loc10])
#loc177 = loc(fused[#loc64, #loc65])
#loc178 = loc(fused[#loc66, #loc67])
#loc183 = loc(fused[#loc84, #loc85])
#loc199 = loc(fused[#loc127, #loc128])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int_malloc_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc152)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc153)
  cir.func private @printIntLine(!s32i) loc(#loc154)
  cir.func internal private @badSource(%arg0: !cir.ptr<!s32i> loc(fused[#loc9, #loc10])) -> !cir.ptr<!s32i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc156)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["__retval"] {alignment = 8 : i64} loc(#loc8)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc11)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc12)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc13)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc13)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc157)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc158)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc12)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc159)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc160)
    cir.scope {
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc20)
      %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc21)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc21)
      %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc162)
      cir.if %22 {
        %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc23)
        %24 = cir.const #cir.int<1> : !s32i loc(#loc24)
        %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc25)
        cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc23)
      } loc(#loc163)
    } loc(#loc161)
    %9 = cir.const #cir.int<5> : !s32i loc(#loc26)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc28)
    %12 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc29)
    cir.store %9, %12 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc30)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc31)
    %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc32)
    %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc30)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc33)
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc34)
    cir.store %17, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc165)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc165)
    cir.return %18 : !cir.ptr<!s32i> loc(#loc165)
  } loc(#loc155)
  cir.func no_proto @CWE401_Memory_Leak__int_malloc_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc167)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc40)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc168)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc42)
    %3 = cir.call @badSource(%2) : (!cir.ptr<!s32i>) -> !cir.ptr<!s32i> loc(#loc43)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc169)
    cir.return loc(#loc37)
  } loc(#loc166)
  cir.func no_proto @CWE401_Memory_Leak__int_malloc_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc171)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc172)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    cir.return loc(#loc47)
  } loc(#loc170)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc173)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc174)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc175)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc61)
  cir.func @main(%arg0: !s32i loc(fused[#loc64, #loc65]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc66, #loc67])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc177)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc178)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc63)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc68)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc68)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc69)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc70)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc70)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc71)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc58)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %8 = cir.get_global @CWE401_Memory_Leak__int_malloc_42_good : !cir.ptr<!cir.func<!void ()>> loc(#loc179)
    cir.call @CWE401_Memory_Leak__int_malloc_42_good() : () -> () loc(#loc73)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc59)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc60)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %13 = cir.get_global @CWE401_Memory_Leak__int_malloc_42_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc180)
    cir.call @CWE401_Memory_Leak__int_malloc_42_bad() : () -> () loc(#loc77)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc61)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc80)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc181)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc181)
    cir.return %17 : !s32i loc(#loc181)
  } loc(#loc176)
  cir.func internal private @goodB2GSource(%arg0: !cir.ptr<!s32i> loc(fused[#loc84, #loc85])) -> !cir.ptr<!s32i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc183)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["__retval"] {alignment = 8 : i64} loc(#loc83)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc86)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc87)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc88)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc88)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc184)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc185)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc87)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc186)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc187)
    cir.scope {
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc95)
      %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc96)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc96)
      %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc189)
      cir.if %22 {
        %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc98)
        %24 = cir.const #cir.int<1> : !s32i loc(#loc99)
        %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc100)
        cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc98)
      } loc(#loc190)
    } loc(#loc188)
    %9 = cir.const #cir.int<5> : !s32i loc(#loc101)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc102)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc103)
    %12 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc104)
    cir.store %9, %12 : !s32i, !cir.ptr<!s32i> loc(#loc191)
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc105)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc106)
    %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc107)
    %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc105)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc108)
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc109)
    cir.store %17, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc192)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc192)
    cir.return %18 : !cir.ptr<!s32i> loc(#loc192)
  } loc(#loc182)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc193)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc195)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc117)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc196)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc119)
    %3 = cir.call @goodB2GSource(%2) : (!cir.ptr<!s32i>) -> !cir.ptr<!s32i> loc(#loc120)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc197)
    %4 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc123)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc124)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc124)
    cir.call @free(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc123)
    cir.return loc(#loc114)
  } loc(#loc194)
  cir.func internal private @goodG2BSource(%arg0: !cir.ptr<!s32i> loc(fused[#loc127, #loc128])) -> !cir.ptr<!s32i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc199)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["__retval"] {alignment = 8 : i64} loc(#loc126)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc129)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc130)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc130)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc130)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc130)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc130)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc130)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc130)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc200)
    %9 = cir.const #cir.int<5> : !s32i loc(#loc132)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc133)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc134)
    %12 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc135)
    cir.store %9, %12 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc136)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc137)
    %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc138)
    %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc136)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc139)
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc140)
    cir.store %17, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc202)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc202)
    cir.return %18 : !cir.ptr<!s32i> loc(#loc202)
  } loc(#loc198)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc204)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc146)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc205)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc148)
    %3 = cir.call @goodG2BSource(%2) : (!cir.ptr<!s32i>) -> !cir.ptr<!s32i> loc(#loc149)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc206)
    cir.return loc(#loc143)
  } loc(#loc203)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int_malloc_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE401_Memory_Leak__int_malloc_42.c":24:1)
#loc8 = loc("CWE401_Memory_Leak__int_malloc_42.c":33:1)
#loc11 = loc("CWE401_Memory_Leak__int_malloc_42.c":25:1)
#loc12 = loc("CWE401_Memory_Leak__int_malloc_42.c":27:19)
#loc13 = loc("CWE401_Memory_Leak__int_malloc_42.c":27:26)
#loc14 = loc("CWE401_Memory_Leak__int_malloc_42.c":27:30)
#loc15 = loc("CWE401_Memory_Leak__int_malloc_42.c":27:40)
#loc16 = loc("CWE401_Memory_Leak__int_malloc_42.c":27:41)
#loc17 = loc("CWE401_Memory_Leak__int_malloc_42.c":27:5)
#loc18 = loc("CWE401_Memory_Leak__int_malloc_42.c":28:5)
#loc19 = loc("CWE401_Memory_Leak__int_malloc_42.c":28:33)
#loc20 = loc("CWE401_Memory_Leak__int_malloc_42.c":28:9)
#loc21 = loc("CWE401_Memory_Leak__int_malloc_42.c":28:17)
#loc22 = loc("CWE401_Memory_Leak__int_malloc_42.c":28:23)
#loc23 = loc("CWE401_Memory_Leak__int_malloc_42.c":28:24)
#loc24 = loc("CWE401_Memory_Leak__int_malloc_42.c":28:30)
#loc25 = loc("CWE401_Memory_Leak__int_malloc_42.c":28:29)
#loc26 = loc("CWE401_Memory_Leak__int_malloc_42.c":30:15)
#loc27 = loc("CWE401_Memory_Leak__int_malloc_42.c":30:5)
#loc28 = loc("CWE401_Memory_Leak__int_malloc_42.c":30:10)
#loc29 = loc("CWE401_Memory_Leak__int_malloc_42.c":30:11)
#loc30 = loc("CWE401_Memory_Leak__int_malloc_42.c":31:18)
#loc31 = loc("CWE401_Memory_Leak__int_malloc_42.c":31:23)
#loc32 = loc("CWE401_Memory_Leak__int_malloc_42.c":31:24)
#loc33 = loc("CWE401_Memory_Leak__int_malloc_42.c":31:5)
#loc34 = loc("CWE401_Memory_Leak__int_malloc_42.c":32:12)
#loc35 = loc("CWE401_Memory_Leak__int_malloc_42.c":32:5)
#loc36 = loc("CWE401_Memory_Leak__int_malloc_42.c":35:1)
#loc37 = loc("CWE401_Memory_Leak__int_malloc_42.c":42:1)
#loc38 = loc("CWE401_Memory_Leak__int_malloc_42.c":37:5)
#loc39 = loc("CWE401_Memory_Leak__int_malloc_42.c":37:11)
#loc40 = loc("CWE401_Memory_Leak__int_malloc_42.c":38:12)
#loc41 = loc("CWE401_Memory_Leak__int_malloc_42.c":38:5)
#loc42 = loc("CWE401_Memory_Leak__int_malloc_42.c":39:22)
#loc43 = loc("CWE401_Memory_Leak__int_malloc_42.c":39:12)
#loc44 = loc("CWE401_Memory_Leak__int_malloc_42.c":39:5)
#loc45 = loc("CWE401_Memory_Leak__int_malloc_42.c":39:26)
#loc46 = loc("CWE401_Memory_Leak__int_malloc_42.c":89:1)
#loc47 = loc("CWE401_Memory_Leak__int_malloc_42.c":93:1)
#loc48 = loc("CWE401_Memory_Leak__int_malloc_42.c":91:5)
#loc49 = loc("CWE401_Memory_Leak__int_malloc_42.c":91:13)
#loc50 = loc("CWE401_Memory_Leak__int_malloc_42.c":92:5)
#loc51 = loc("CWE401_Memory_Leak__int_malloc_42.c":92:13)
#loc52 = loc("/usr/include/stdlib.h":575:1)
#loc53 = loc("/usr/include/stdlib.h":575:41)
#loc54 = loc("/usr/include/time.h":76:1)
#loc55 = loc("/usr/include/time.h":76:38)
#loc56 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc57 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc58 = loc("CWE401_Memory_Leak__int_malloc_42.c":109:15)
#loc59 = loc("CWE401_Memory_Leak__int_malloc_42.c":111:15)
#loc60 = loc("CWE401_Memory_Leak__int_malloc_42.c":114:15)
#loc61 = loc("CWE401_Memory_Leak__int_malloc_42.c":116:15)
#loc62 = loc("CWE401_Memory_Leak__int_malloc_42.c":104:1)
#loc63 = loc("CWE401_Memory_Leak__int_malloc_42.c":119:1)
#loc68 = loc("CWE401_Memory_Leak__int_malloc_42.c":105:1)
#loc69 = loc("CWE401_Memory_Leak__int_malloc_42.c":107:27)
#loc70 = loc("CWE401_Memory_Leak__int_malloc_42.c":107:22)
#loc71 = loc("CWE401_Memory_Leak__int_malloc_42.c":107:5)
#loc72 = loc("CWE401_Memory_Leak__int_malloc_42.c":109:5)
#loc73 = loc("CWE401_Memory_Leak__int_malloc_42.c":110:5)
#loc74 = loc("CWE401_Memory_Leak__int_malloc_42.c":110:44)
#loc75 = loc("CWE401_Memory_Leak__int_malloc_42.c":111:5)
#loc76 = loc("CWE401_Memory_Leak__int_malloc_42.c":114:5)
#loc77 = loc("CWE401_Memory_Leak__int_malloc_42.c":115:5)
#loc78 = loc("CWE401_Memory_Leak__int_malloc_42.c":115:43)
#loc79 = loc("CWE401_Memory_Leak__int_malloc_42.c":116:5)
#loc80 = loc("CWE401_Memory_Leak__int_malloc_42.c":118:12)
#loc81 = loc("CWE401_Memory_Leak__int_malloc_42.c":118:5)
#loc82 = loc("CWE401_Memory_Leak__int_malloc_42.c":69:1)
#loc83 = loc("CWE401_Memory_Leak__int_malloc_42.c":78:1)
#loc86 = loc("CWE401_Memory_Leak__int_malloc_42.c":70:1)
#loc87 = loc("CWE401_Memory_Leak__int_malloc_42.c":72:19)
#loc88 = loc("CWE401_Memory_Leak__int_malloc_42.c":72:26)
#loc89 = loc("CWE401_Memory_Leak__int_malloc_42.c":72:30)
#loc90 = loc("CWE401_Memory_Leak__int_malloc_42.c":72:40)
#loc91 = loc("CWE401_Memory_Leak__int_malloc_42.c":72:41)
#loc92 = loc("CWE401_Memory_Leak__int_malloc_42.c":72:5)
#loc93 = loc("CWE401_Memory_Leak__int_malloc_42.c":73:5)
#loc94 = loc("CWE401_Memory_Leak__int_malloc_42.c":73:33)
#loc95 = loc("CWE401_Memory_Leak__int_malloc_42.c":73:9)
#loc96 = loc("CWE401_Memory_Leak__int_malloc_42.c":73:17)
#loc97 = loc("CWE401_Memory_Leak__int_malloc_42.c":73:23)
#loc98 = loc("CWE401_Memory_Leak__int_malloc_42.c":73:24)
#loc99 = loc("CWE401_Memory_Leak__int_malloc_42.c":73:30)
#loc100 = loc("CWE401_Memory_Leak__int_malloc_42.c":73:29)
#loc101 = loc("CWE401_Memory_Leak__int_malloc_42.c":75:15)
#loc102 = loc("CWE401_Memory_Leak__int_malloc_42.c":75:5)
#loc103 = loc("CWE401_Memory_Leak__int_malloc_42.c":75:10)
#loc104 = loc("CWE401_Memory_Leak__int_malloc_42.c":75:11)
#loc105 = loc("CWE401_Memory_Leak__int_malloc_42.c":76:18)
#loc106 = loc("CWE401_Memory_Leak__int_malloc_42.c":76:23)
#loc107 = loc("CWE401_Memory_Leak__int_malloc_42.c":76:24)
#loc108 = loc("CWE401_Memory_Leak__int_malloc_42.c":76:5)
#loc109 = loc("CWE401_Memory_Leak__int_malloc_42.c":77:12)
#loc110 = loc("CWE401_Memory_Leak__int_malloc_42.c":77:5)
#loc111 = loc("/usr/include/stdlib.h":687:1)
#loc112 = loc("/usr/include/stdlib.h":687:32)
#loc113 = loc("CWE401_Memory_Leak__int_malloc_42.c":80:1)
#loc114 = loc("CWE401_Memory_Leak__int_malloc_42.c":87:1)
#loc115 = loc("CWE401_Memory_Leak__int_malloc_42.c":82:5)
#loc116 = loc("CWE401_Memory_Leak__int_malloc_42.c":82:11)
#loc117 = loc("CWE401_Memory_Leak__int_malloc_42.c":83:12)
#loc118 = loc("CWE401_Memory_Leak__int_malloc_42.c":83:5)
#loc119 = loc("CWE401_Memory_Leak__int_malloc_42.c":84:26)
#loc120 = loc("CWE401_Memory_Leak__int_malloc_42.c":84:12)
#loc121 = loc("CWE401_Memory_Leak__int_malloc_42.c":84:5)
#loc122 = loc("CWE401_Memory_Leak__int_malloc_42.c":84:30)
#loc123 = loc("CWE401_Memory_Leak__int_malloc_42.c":86:5)
#loc124 = loc("CWE401_Memory_Leak__int_malloc_42.c":86:10)
#loc125 = loc("CWE401_Memory_Leak__int_malloc_42.c":49:1)
#loc126 = loc("CWE401_Memory_Leak__int_malloc_42.c":57:1)
#loc129 = loc("CWE401_Memory_Leak__int_malloc_42.c":50:1)
#loc130 = loc("CWE401_Memory_Leak__int_malloc_42.c":52:19)
#loc131 = loc("CWE401_Memory_Leak__int_malloc_42.c":52:5)
#loc132 = loc("CWE401_Memory_Leak__int_malloc_42.c":54:15)
#loc133 = loc("CWE401_Memory_Leak__int_malloc_42.c":54:5)
#loc134 = loc("CWE401_Memory_Leak__int_malloc_42.c":54:10)
#loc135 = loc("CWE401_Memory_Leak__int_malloc_42.c":54:11)
#loc136 = loc("CWE401_Memory_Leak__int_malloc_42.c":55:18)
#loc137 = loc("CWE401_Memory_Leak__int_malloc_42.c":55:23)
#loc138 = loc("CWE401_Memory_Leak__int_malloc_42.c":55:24)
#loc139 = loc("CWE401_Memory_Leak__int_malloc_42.c":55:5)
#loc140 = loc("CWE401_Memory_Leak__int_malloc_42.c":56:12)
#loc141 = loc("CWE401_Memory_Leak__int_malloc_42.c":56:5)
#loc142 = loc("CWE401_Memory_Leak__int_malloc_42.c":59:1)
#loc143 = loc("CWE401_Memory_Leak__int_malloc_42.c":66:1)
#loc144 = loc("CWE401_Memory_Leak__int_malloc_42.c":61:5)
#loc145 = loc("CWE401_Memory_Leak__int_malloc_42.c":61:11)
#loc146 = loc("CWE401_Memory_Leak__int_malloc_42.c":62:12)
#loc147 = loc("CWE401_Memory_Leak__int_malloc_42.c":62:5)
#loc148 = loc("CWE401_Memory_Leak__int_malloc_42.c":63:26)
#loc149 = loc("CWE401_Memory_Leak__int_malloc_42.c":63:12)
#loc150 = loc("CWE401_Memory_Leak__int_malloc_42.c":63:5)
#loc151 = loc("CWE401_Memory_Leak__int_malloc_42.c":63:30)
#loc152 = loc(fused[#loc1, #loc2])
#loc153 = loc(fused[#loc3, #loc4])
#loc154 = loc(fused[#loc5, #loc6])
#loc155 = loc(fused[#loc7, #loc8])
#loc157 = loc(fused[#loc14, #loc15])
#loc158 = loc(fused[#loc13, #loc15])
#loc159 = loc(fused[#loc12, #loc16])
#loc160 = loc(fused[#loc17, #loc16])
#loc161 = loc(fused[#loc18, #loc19])
#loc162 = loc(fused[#loc20, #loc21])
#loc163 = loc(fused[#loc22, #loc19])
#loc164 = loc(fused[#loc27, #loc26])
#loc165 = loc(fused[#loc35, #loc34])
#loc166 = loc(fused[#loc36, #loc37])
#loc167 = loc(fused[#loc38, #loc39])
#loc168 = loc(fused[#loc41, #loc40])
#loc169 = loc(fused[#loc44, #loc45])
#loc170 = loc(fused[#loc46, #loc47])
#loc171 = loc(fused[#loc48, #loc49])
#loc172 = loc(fused[#loc50, #loc51])
#loc173 = loc(fused[#loc52, #loc53])
#loc174 = loc(fused[#loc54, #loc55])
#loc175 = loc(fused[#loc56, #loc57])
#loc176 = loc(fused[#loc62, #loc63])
#loc179 = loc(fused[#loc73, #loc74])
#loc180 = loc(fused[#loc77, #loc78])
#loc181 = loc(fused[#loc81, #loc80])
#loc182 = loc(fused[#loc82, #loc83])
#loc184 = loc(fused[#loc89, #loc90])
#loc185 = loc(fused[#loc88, #loc90])
#loc186 = loc(fused[#loc87, #loc91])
#loc187 = loc(fused[#loc92, #loc91])
#loc188 = loc(fused[#loc93, #loc94])
#loc189 = loc(fused[#loc95, #loc96])
#loc190 = loc(fused[#loc97, #loc94])
#loc191 = loc(fused[#loc102, #loc101])
#loc192 = loc(fused[#loc110, #loc109])
#loc193 = loc(fused[#loc111, #loc112])
#loc194 = loc(fused[#loc113, #loc114])
#loc195 = loc(fused[#loc115, #loc116])
#loc196 = loc(fused[#loc118, #loc117])
#loc197 = loc(fused[#loc121, #loc122])
#loc198 = loc(fused[#loc125, #loc126])
#loc200 = loc(fused[#loc131, #loc130])
#loc201 = loc(fused[#loc133, #loc132])
#loc202 = loc(fused[#loc141, #loc140])
#loc203 = loc(fused[#loc142, #loc143])
#loc204 = loc(fused[#loc144, #loc145])
#loc205 = loc(fused[#loc147, #loc146])
#loc206 = loc(fused[#loc150, #loc151])
