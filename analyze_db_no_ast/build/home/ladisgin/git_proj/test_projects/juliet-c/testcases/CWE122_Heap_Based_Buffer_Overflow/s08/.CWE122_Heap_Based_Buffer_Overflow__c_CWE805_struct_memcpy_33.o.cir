!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc136)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc137)
  cir.func private  @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc138)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc139)
  cir.func  @_ZN60CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc141)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc142)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>> loc(#loc14)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc15)
    cir.store %2, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc143)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc17)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc18)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc18)
    %6 = cir.const #cir.int<8> : !u64i loc(#loc144)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc145)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc17)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc146)
    cir.store %9, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc147)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc25)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc26)
      %12 = cir.cmp(eq, %10, %11) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc149)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc28)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc30)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
      } loc(#loc150)
    } loc(#loc148)
    cir.scope {
      %10 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc152)
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc34)
      %12 = cir.load %11 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc34)
      cir.store %12, %10 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc152)
      cir.scope {
        %13 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc154)
        cir.scope {
          %28 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc156)
          cir.scope {
            %29 = cir.const #cir.int<0> : !s32i loc(#loc45)
            %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc45)
            cir.store %30, %28 : !u64i, !cir.ptr<!u64i> loc(#loc158)
            cir.for : cond {
              %31 = cir.load %28 : !cir.ptr<!u64i>, !u64i loc(#loc47)
              %32 = cir.const #cir.int<100> : !s32i loc(#loc48)
              %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc48)
              %34 = cir.cmp(lt, %31, %33) : !u64i, !cir.bool loc(#loc159)
              cir.condition(%34) loc(#loc159)
            } body {
              %31 = cir.const #cir.int<0> : !s32i loc(#loc49)
              %32 = cir.load %28 : !cir.ptr<!u64i>, !u64i loc(#loc50)
              %33 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc51)
              %34 = cir.ptr_stride(%33 : !cir.ptr<!ty__twoIntsStruct>, %32 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc51)
              %35 = cir.get_member %34[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc52)
              cir.store %31, %35 : !s32i, !cir.ptr<!s32i> loc(#loc160)
              %36 = cir.const #cir.int<0> : !s32i loc(#loc53)
              %37 = cir.load %28 : !cir.ptr<!u64i>, !u64i loc(#loc54)
              %38 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc55)
              %39 = cir.ptr_stride(%38 : !cir.ptr<!ty__twoIntsStruct>, %37 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc55)
              %40 = cir.get_member %39[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc56)
              cir.store %36, %40 : !s32i, !cir.ptr<!s32i> loc(#loc161)
              cir.yield loc(#loc44)
            } step {
              %31 = cir.load %28 : !cir.ptr<!u64i>, !u64i loc(#loc57)
              %32 = cir.unary(inc, %31) : !u64i, !u64i loc(#loc58)
              cir.store %32, %28 : !u64i, !cir.ptr<!u64i> loc(#loc162)
              cir.yield loc(#loc157)
            } loc(#loc157)
          } loc(#loc157)
        } loc(#loc155)
        %14 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc59)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc59)
        %16 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc60)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc60)
        %18 = cir.const #cir.int<100> : !s32i loc(#loc61)
        %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc61)
        %20 = cir.const #cir.int<8> : !u64i loc(#loc163)
        %21 = cir.binop(mul, %19, %20) : !u64i loc(#loc164)
        cir.libc.memcpy %21 bytes from %17 to %15 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc165)
        %22 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc66)
        %23 = cir.const #cir.int<0> : !s32i loc(#loc67)
        %24 = cir.ptr_stride(%22 : !cir.ptr<!ty__twoIntsStruct>, %23 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc68)
        cir.call @printStructLine(%24) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc69)
        %25 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc70)
        %26 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc71)
        %27 = cir.cast(bitcast, %26 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc71)
        cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc70)
      } loc(#loc153)
    } loc(#loc151)
    cir.return loc(#loc10)
  } loc(#loc140)
  cir.func internal private  @_ZN60CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc167)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc168)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>> loc(#loc77)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc78)
    cir.store %2, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc169)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc80)
    %4 = cir.const #cir.int<100> : !s32i loc(#loc81)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc81)
    %6 = cir.const #cir.int<8> : !u64i loc(#loc170)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc171)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc80)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc172)
    cir.store %9, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc173)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc88)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc89)
      %12 = cir.cmp(eq, %10, %11) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc175)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc91)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc92)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc93)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc91)
      } loc(#loc176)
    } loc(#loc174)
    cir.scope {
      %10 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc178)
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc97)
      %12 = cir.load %11 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc97)
      cir.store %12, %10 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc178)
      cir.scope {
        %13 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc180)
        cir.scope {
          %28 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc182)
          cir.scope {
            %29 = cir.const #cir.int<0> : !s32i loc(#loc108)
            %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc108)
            cir.store %30, %28 : !u64i, !cir.ptr<!u64i> loc(#loc184)
            cir.for : cond {
              %31 = cir.load %28 : !cir.ptr<!u64i>, !u64i loc(#loc110)
              %32 = cir.const #cir.int<100> : !s32i loc(#loc111)
              %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc111)
              %34 = cir.cmp(lt, %31, %33) : !u64i, !cir.bool loc(#loc185)
              cir.condition(%34) loc(#loc185)
            } body {
              %31 = cir.const #cir.int<0> : !s32i loc(#loc112)
              %32 = cir.load %28 : !cir.ptr<!u64i>, !u64i loc(#loc113)
              %33 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc114)
              %34 = cir.ptr_stride(%33 : !cir.ptr<!ty__twoIntsStruct>, %32 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc114)
              %35 = cir.get_member %34[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc52)
              cir.store %31, %35 : !s32i, !cir.ptr<!s32i> loc(#loc186)
              %36 = cir.const #cir.int<0> : !s32i loc(#loc115)
              %37 = cir.load %28 : !cir.ptr<!u64i>, !u64i loc(#loc116)
              %38 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc117)
              %39 = cir.ptr_stride(%38 : !cir.ptr<!ty__twoIntsStruct>, %37 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc117)
              %40 = cir.get_member %39[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc56)
              cir.store %36, %40 : !s32i, !cir.ptr<!s32i> loc(#loc187)
              cir.yield loc(#loc107)
            } step {
              %31 = cir.load %28 : !cir.ptr<!u64i>, !u64i loc(#loc118)
              %32 = cir.unary(inc, %31) : !u64i, !u64i loc(#loc119)
              cir.store %32, %28 : !u64i, !cir.ptr<!u64i> loc(#loc188)
              cir.yield loc(#loc183)
            } loc(#loc183)
          } loc(#loc183)
        } loc(#loc181)
        %14 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc120)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc120)
        %16 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc121)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc121)
        %18 = cir.const #cir.int<100> : !s32i loc(#loc122)
        %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc122)
        %20 = cir.const #cir.int<8> : !u64i loc(#loc189)
        %21 = cir.binop(mul, %19, %20) : !u64i loc(#loc190)
        cir.libc.memcpy %21 bytes from %17 to %15 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc191)
        %22 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc127)
        %23 = cir.const #cir.int<0> : !s32i loc(#loc128)
        %24 = cir.ptr_stride(%22 : !cir.ptr<!ty__twoIntsStruct>, %23 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc129)
        cir.call @printStructLine(%24) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc130)
        %25 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc131)
        %26 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc132)
        %27 = cir.cast(bitcast, %26 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc132)
        cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc131)
      } loc(#loc179)
    } loc(#loc177)
    cir.return loc(#loc73)
  } loc(#loc166)
  cir.func  @_ZN60CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN60CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33L7goodG2BEv() : () -> () loc(#loc135)
    cir.return loc(#loc134)
  } loc(#loc192)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":24:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":51:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":26:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":26:21)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":27:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":27:32)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":28:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":28:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":30:29)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":30:36)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":30:39)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":30:59)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":30:60)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":30:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":31:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":31:33)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":31:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":31:17)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":31:23)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":31:24)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":31:30)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":31:29)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":32:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":50:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":33:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":33:32)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":34:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":49:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":35:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":35:37)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":36:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":44:13)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":37:17)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":37:24)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":39:17)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":43:17)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":39:26)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":39:22)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":39:29)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":39:33)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":41:40)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":41:28)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":41:21)
#loc52 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":42:40)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":42:28)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":42:21)
#loc56 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":39:39)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":39:38)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":46:20)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":46:26)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":46:34)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":46:38)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":46:58)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":46:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":46:59)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":47:30)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":47:35)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":47:36)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":47:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":48:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":48:18)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":58:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":85:1)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":60:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":60:21)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":61:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":61:32)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":62:12)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":62:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":64:29)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":64:36)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":64:40)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":64:60)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":64:61)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":64:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":65:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":65:33)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":65:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":65:17)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":65:23)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":65:24)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":65:30)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":65:29)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":66:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":84:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":67:9)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":67:32)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":68:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":83:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":69:13)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":69:37)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":70:13)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":78:13)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":71:17)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":71:24)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":73:17)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":77:17)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":73:26)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":73:22)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":73:29)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":73:33)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":75:40)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":75:28)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":75:21)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":76:40)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":76:28)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":76:21)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":73:39)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":73:38)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":80:20)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":80:26)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":80:34)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":80:38)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":80:58)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":80:13)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":80:59)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":81:30)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":81:35)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":81:36)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":81:13)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":82:13)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":82:18)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":87:1)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":90:1)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":89:5)
#loc136 = loc(fused[#loc1, #loc2])
#loc137 = loc(fused[#loc3, #loc4])
#loc138 = loc(fused[#loc5, #loc6])
#loc139 = loc(fused[#loc7, #loc8])
#loc140 = loc(fused[#loc9, #loc10])
#loc141 = loc(fused[#loc11, #loc12])
#loc142 = loc(fused[#loc13, #loc14])
#loc143 = loc(fused[#loc16, #loc15])
#loc144 = loc(fused[#loc19, #loc20])
#loc145 = loc(fused[#loc18, #loc20])
#loc146 = loc(fused[#loc17, #loc21])
#loc147 = loc(fused[#loc22, #loc21])
#loc148 = loc(fused[#loc23, #loc24])
#loc149 = loc(fused[#loc25, #loc26])
#loc150 = loc(fused[#loc27, #loc24])
#loc151 = loc(fused[#loc31, #loc32])
#loc152 = loc(fused[#loc33, #loc34])
#loc153 = loc(fused[#loc35, #loc36])
#loc154 = loc(fused[#loc37, #loc38])
#loc155 = loc(fused[#loc39, #loc40])
#loc156 = loc(fused[#loc41, #loc42])
#loc157 = loc(fused[#loc43, #loc44])
#loc158 = loc(fused[#loc46, #loc45])
#loc159 = loc(fused[#loc47, #loc48])
#loc160 = loc(fused[#loc51, #loc49])
#loc161 = loc(fused[#loc55, #loc53])
#loc162 = loc(fused[#loc58, #loc57])
#loc163 = loc(fused[#loc62, #loc63])
#loc164 = loc(fused[#loc61, #loc63])
#loc165 = loc(fused[#loc64, #loc65])
#loc166 = loc(fused[#loc72, #loc73])
#loc167 = loc(fused[#loc74, #loc75])
#loc168 = loc(fused[#loc76, #loc77])
#loc169 = loc(fused[#loc79, #loc78])
#loc170 = loc(fused[#loc82, #loc83])
#loc171 = loc(fused[#loc81, #loc83])
#loc172 = loc(fused[#loc80, #loc84])
#loc173 = loc(fused[#loc85, #loc84])
#loc174 = loc(fused[#loc86, #loc87])
#loc175 = loc(fused[#loc88, #loc89])
#loc176 = loc(fused[#loc90, #loc87])
#loc177 = loc(fused[#loc94, #loc95])
#loc178 = loc(fused[#loc96, #loc97])
#loc179 = loc(fused[#loc98, #loc99])
#loc180 = loc(fused[#loc100, #loc101])
#loc181 = loc(fused[#loc102, #loc103])
#loc182 = loc(fused[#loc104, #loc105])
#loc183 = loc(fused[#loc106, #loc107])
#loc184 = loc(fused[#loc109, #loc108])
#loc185 = loc(fused[#loc110, #loc111])
#loc186 = loc(fused[#loc114, #loc112])
#loc187 = loc(fused[#loc117, #loc115])
#loc188 = loc(fused[#loc119, #loc118])
#loc189 = loc(fused[#loc123, #loc124])
#loc190 = loc(fused[#loc122, #loc124])
#loc191 = loc(fused[#loc125, #loc126])
#loc192 = loc(fused[#loc133, #loc134])
