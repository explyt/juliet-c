!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":21:80)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":21:90)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":52:84)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":52:94)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":94:10)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":94:14)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":94:20)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":94:32)
#loc129 = loc(fused[#loc5, #loc6])
#loc146 = loc(fused[#loc50, #loc51])
#loc163 = loc(fused[#loc97, #loc98])
#loc164 = loc(fused[#loc99, #loc100])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLongLongLine(!s64i) loc(#loc127)
  cir.func @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41_badSink(%arg0: !cir.ptr<!s64i> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc129)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc131)
      %2 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc131)
      cir.store %2, %1 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc131)
      cir.scope {
        %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc133)
        cir.scope {
          %8 = cir.const #cir.int<0> : !s32i loc(#loc18)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc18)
          cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc135)
          cir.for : cond {
            %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc20)
            %11 = cir.const #cir.int<100> : !s32i loc(#loc21)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc21)
            %13 = cir.cmp(lt, %10, %12) : !u64i, !cir.bool loc(#loc136)
            cir.condition(%13) loc(#loc22)
          } body {
            cir.scope {
              %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc24)
              %11 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc25)
              %12 = cir.ptr_stride(%11 : !cir.ptr<!s64i>, %10 : !u64i), !cir.ptr<!s64i> loc(#loc25)
              %13 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc25)
              %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc26)
              %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc27)
              %16 = cir.ptr_stride(%14 : !cir.ptr<!s64i>, %15 : !u64i), !cir.ptr<!s64i> loc(#loc28)
              cir.store %13, %16 : !s64i, !cir.ptr<!s64i> loc(#loc138)
            } loc(#loc137)
            cir.yield loc(#loc17)
          } step {
            %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc30)
            %11 = cir.unary(inc, %10) : !u64i, !u64i loc(#loc31)
            cir.store %11, %3 : !u64i, !cir.ptr<!u64i> loc(#loc139)
            cir.yield loc(#loc134)
          } loc(#loc134)
        } loc(#loc134)
        %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc32)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc33)
        %6 = cir.ptr_stride(%4 : !cir.ptr<!s64i>, %5 : !s32i), !cir.ptr<!s64i> loc(#loc34)
        %7 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc32)
        cir.call @printLongLongLine(%7) : (!s64i) -> () loc(#loc35)
      } loc(#loc132)
    } loc(#loc130)
    cir.return loc(#loc4)
  } loc(#loc128)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc141)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc142)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc41)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc41)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc41)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc41)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc41)
    %7 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc143)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc41)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc41)
    cir.store %9, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc142)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc43)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc43)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc43)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc43)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc43)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc43)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc43)
    cir.store %16, %7 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc143)
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc44)
    cir.store %17, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc144)
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc46)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41_badSink(%18) : (!cir.ptr<!s64i>) -> () loc(#loc47)
    cir.return loc(#loc37)
  } loc(#loc140)
  cir.func @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41_goodG2BSink(%arg0: !cir.ptr<!s64i> loc(fused[#loc50, #loc51])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc146)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc52)
    cir.scope {
      %1 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc148)
      %2 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc148)
      cir.store %2, %1 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc148)
      cir.scope {
        %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc150)
        cir.scope {
          %8 = cir.const #cir.int<0> : !s32i loc(#loc63)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc63)
          cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc152)
          cir.for : cond {
            %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc65)
            %11 = cir.const #cir.int<100> : !s32i loc(#loc66)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc66)
            %13 = cir.cmp(lt, %10, %12) : !u64i, !cir.bool loc(#loc153)
            cir.condition(%13) loc(#loc67)
          } body {
            cir.scope {
              %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc69)
              %11 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc70)
              %12 = cir.ptr_stride(%11 : !cir.ptr<!s64i>, %10 : !u64i), !cir.ptr<!s64i> loc(#loc70)
              %13 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc70)
              %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc71)
              %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc72)
              %16 = cir.ptr_stride(%14 : !cir.ptr<!s64i>, %15 : !u64i), !cir.ptr<!s64i> loc(#loc73)
              cir.store %13, %16 : !s64i, !cir.ptr<!s64i> loc(#loc155)
            } loc(#loc154)
            cir.yield loc(#loc62)
          } step {
            %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc75)
            %11 = cir.unary(inc, %10) : !u64i, !u64i loc(#loc76)
            cir.store %11, %3 : !u64i, !cir.ptr<!u64i> loc(#loc156)
            cir.yield loc(#loc151)
          } loc(#loc151)
        } loc(#loc151)
        %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc77)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc78)
        %6 = cir.ptr_stride(%4 : !cir.ptr<!s64i>, %5 : !s32i), !cir.ptr<!s64i> loc(#loc79)
        %7 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc77)
        cir.call @printLongLongLine(%7) : (!s64i) -> () loc(#loc80)
      } loc(#loc149)
    } loc(#loc147)
    cir.return loc(#loc49)
  } loc(#loc145)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc158)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc83)
    cir.return loc(#loc82)
  } loc(#loc157)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc159)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc160)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc161)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc91)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc92)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc93)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc94)
  cir.func @main(%arg0: !s32i loc(fused[#loc97, #loc98]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc99, #loc100])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc163)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc164)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc96)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc101)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc102)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc103)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc103)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc104)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc91)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc91)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc105)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41_good : !cir.ptr<!cir.func<!void ()>> loc(#loc165)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41_good() : () -> () loc(#loc106)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc92)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc92)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc108)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc93)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc93)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc109)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc166)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41_bad() : () -> () loc(#loc110)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc94)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc94)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc112)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc113)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc167)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc167)
    cir.return %17 : !s32i loc(#loc167)
  } loc(#loc162)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc169)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc170)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc120)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc120)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc120)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc120)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc120)
    %7 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc171)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc120)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc120)
    cir.store %9, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc170)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc122)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc122)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc122)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc122)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc122)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc122)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc122)
    cir.store %16, %7 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc171)
    %17 = cir.load %7 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc123)
    cir.store %17, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc172)
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc125)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41_goodG2BSink(%18) : (!cir.ptr<!s64i>) -> () loc(#loc126)
    cir.return loc(#loc116)
  } loc(#loc168)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":35:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":22:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":23:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":34:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":24:9)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":24:33)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":25:9)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":33:9)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":26:13)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":26:20)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":28:13)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":31:13)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":28:22)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":28:18)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":28:25)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":28:29)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":28:27)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":29:13)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":30:34)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":30:27)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":30:17)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":30:22)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":30:23)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":30:35)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":28:35)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":28:34)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":32:31)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":32:36)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":32:37)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":32:13)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":37:1)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":46:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":39:5)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":39:15)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":40:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":40:42)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":41:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":41:43)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":44:12)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":44:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":45:79)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":45:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":52:1)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":66:1)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":53:1)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":54:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":65:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":55:9)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":55:33)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":56:9)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":64:9)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":57:13)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":57:20)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":59:13)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":62:13)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":59:22)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":59:18)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":59:25)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":59:29)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":59:27)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":60:13)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":61:34)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":61:27)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":61:17)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":61:22)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":61:23)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":61:35)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":59:35)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":59:34)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":63:31)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":63:36)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":63:37)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":63:13)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":79:1)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":82:1)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":81:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":81:13)
#loc85 = loc("/usr/include/stdlib.h":575:1)
#loc86 = loc("/usr/include/stdlib.h":575:41)
#loc87 = loc("/usr/include/time.h":76:1)
#loc88 = loc("/usr/include/time.h":76:38)
#loc89 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc90 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":99:15)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":101:15)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":104:15)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":106:15)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":94:1)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":109:1)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":95:1)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":97:27)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":97:22)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":97:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":99:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":100:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":100:76)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":101:5)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":104:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":105:5)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":105:75)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":106:5)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":108:12)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":108:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":69:1)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":77:1)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":71:5)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":71:15)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":72:5)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":72:42)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":73:5)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":73:43)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":75:12)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":75:5)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":76:83)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":76:5)
#loc127 = loc(fused[#loc1, #loc2])
#loc128 = loc(fused[#loc3, #loc4])
#loc130 = loc(fused[#loc8, #loc9])
#loc131 = loc(fused[#loc10, #loc11])
#loc132 = loc(fused[#loc12, #loc13])
#loc133 = loc(fused[#loc14, #loc15])
#loc134 = loc(fused[#loc16, #loc17])
#loc135 = loc(fused[#loc19, #loc18])
#loc136 = loc(fused[#loc20, #loc21])
#loc137 = loc(fused[#loc23, #loc17])
#loc138 = loc(fused[#loc26, #loc29])
#loc139 = loc(fused[#loc31, #loc30])
#loc140 = loc(fused[#loc36, #loc37])
#loc141 = loc(fused[#loc38, #loc39])
#loc142 = loc(fused[#loc40, #loc41])
#loc143 = loc(fused[#loc42, #loc43])
#loc144 = loc(fused[#loc45, #loc44])
#loc145 = loc(fused[#loc48, #loc49])
#loc147 = loc(fused[#loc53, #loc54])
#loc148 = loc(fused[#loc55, #loc56])
#loc149 = loc(fused[#loc57, #loc58])
#loc150 = loc(fused[#loc59, #loc60])
#loc151 = loc(fused[#loc61, #loc62])
#loc152 = loc(fused[#loc64, #loc63])
#loc153 = loc(fused[#loc65, #loc66])
#loc154 = loc(fused[#loc68, #loc62])
#loc155 = loc(fused[#loc71, #loc74])
#loc156 = loc(fused[#loc76, #loc75])
#loc157 = loc(fused[#loc81, #loc82])
#loc158 = loc(fused[#loc83, #loc84])
#loc159 = loc(fused[#loc85, #loc86])
#loc160 = loc(fused[#loc87, #loc88])
#loc161 = loc(fused[#loc89, #loc90])
#loc162 = loc(fused[#loc95, #loc96])
#loc165 = loc(fused[#loc106, #loc107])
#loc166 = loc(fused[#loc110, #loc111])
#loc167 = loc(fused[#loc114, #loc113])
#loc168 = loc(fused[#loc115, #loc116])
#loc169 = loc(fused[#loc117, #loc118])
#loc170 = loc(fused[#loc119, #loc120])
#loc171 = loc(fused[#loc121, #loc122])
#loc172 = loc(fused[#loc124, #loc123])
