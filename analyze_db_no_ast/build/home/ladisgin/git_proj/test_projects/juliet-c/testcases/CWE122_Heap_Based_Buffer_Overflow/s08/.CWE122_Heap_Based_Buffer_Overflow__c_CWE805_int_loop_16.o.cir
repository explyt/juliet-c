!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc123)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc124)
  cir.func private  @printIntLine(!s32i) loc(#loc125)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc126)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc128)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc129)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc17)
        cir.condition(%3) loc(#loc17)
      } do {
        %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc18)
        %3 = cir.const #cir.int<50> : !s32i loc(#loc19)
        %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc19)
        %5 = cir.const #cir.int<4> : !u64i loc(#loc131)
        %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc132)
        %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc18)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc133)
        cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc134)
        cir.scope {
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
          %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc27)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc27)
          %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s32i>, !s32i loc(#loc136)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc28)
          cir.if %13 {
            %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc30)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc31)
            %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc32)
            cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
          } loc(#loc137)
        } loc(#loc135)
        cir.break loc(#loc33)
      } loc(#loc130)
    } loc(#loc130)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc139)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc139)
      cir.store %3, %2 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc139)
      cir.scope {
        %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc141)
        cir.scope {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc44)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc44)
          cir.store %13, %4 : !u64i, !cir.ptr<!u64i> loc(#loc143)
          cir.for : cond {
            %14 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc46)
            %15 = cir.const #cir.int<100> : !s32i loc(#loc47)
            %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc47)
            %17 = cir.cmp(lt, %14, %16) : !u64i, !s32i loc(#loc144)
            %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc48)
            cir.condition(%18) loc(#loc48)
          } body {
            cir.scope {
              %14 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc50)
              %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc51)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !u64i), !cir.ptr<!s32i> loc(#loc51)
              %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc51)
              %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc52)
              %19 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc53)
              %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !u64i), !cir.ptr<!s32i> loc(#loc54)
              cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc146)
            } loc(#loc145)
            cir.yield loc(#loc43)
          } step {
            %14 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc56)
            %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc57)
            cir.store %15, %4 : !u64i, !cir.ptr<!u64i> loc(#loc147)
            cir.yield loc(#loc142)
          } loc(#loc142)
        } loc(#loc142)
        %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc58)
        %6 = cir.const #cir.int<0> : !s32i loc(#loc59)
        %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc60)
        %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc58)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc61)
        %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc62)
        %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc63)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc63)
        cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc62)
      } loc(#loc140)
    } loc(#loc138)
    cir.return loc(#loc10)
  } loc(#loc127)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc149)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc66)
    cir.return loc(#loc65)
  } loc(#loc148)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc151)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc72)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc152)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc76)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc76)
        cir.condition(%3) loc(#loc76)
      } do {
        %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc77)
        %3 = cir.const #cir.int<100> : !s32i loc(#loc78)
        %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc78)
        %5 = cir.const #cir.int<4> : !u64i loc(#loc154)
        %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc155)
        %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc77)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc156)
        cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc157)
        cir.scope {
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc85)
          %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc86)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc86)
          %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s32i>, !s32i loc(#loc159)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc87)
          cir.if %13 {
            %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc89)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc90)
            %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc91)
            cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc89)
          } loc(#loc160)
        } loc(#loc158)
        cir.break loc(#loc92)
      } loc(#loc153)
    } loc(#loc153)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc162)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc162)
      cir.store %3, %2 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc162)
      cir.scope {
        %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc164)
        cir.scope {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc103)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc103)
          cir.store %13, %4 : !u64i, !cir.ptr<!u64i> loc(#loc166)
          cir.for : cond {
            %14 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc105)
            %15 = cir.const #cir.int<100> : !s32i loc(#loc106)
            %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc106)
            %17 = cir.cmp(lt, %14, %16) : !u64i, !s32i loc(#loc167)
            %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc107)
            cir.condition(%18) loc(#loc107)
          } body {
            cir.scope {
              %14 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc109)
              %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc110)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !u64i), !cir.ptr<!s32i> loc(#loc110)
              %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc110)
              %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc111)
              %19 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc112)
              %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !u64i), !cir.ptr<!s32i> loc(#loc113)
              cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc169)
            } loc(#loc168)
            cir.yield loc(#loc102)
          } step {
            %14 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc115)
            %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc116)
            cir.store %15, %4 : !u64i, !cir.ptr<!u64i> loc(#loc170)
            cir.yield loc(#loc165)
          } loc(#loc165)
        } loc(#loc165)
        %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc117)
        %6 = cir.const #cir.int<0> : !s32i loc(#loc118)
        %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc119)
        %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc117)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc120)
        %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc121)
        %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc122)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc122)
        cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc121)
      } loc(#loc163)
    } loc(#loc161)
    cir.return loc(#loc69)
  } loc(#loc150)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":45:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":23:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":23:11)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":24:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":24:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":25:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":31:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":25:11)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":28:23)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":28:30)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":28:33)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":28:43)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":28:44)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":28:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":29:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":29:37)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":29:13)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":29:21)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":29:18)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":29:27)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":29:28)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":29:34)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":29:33)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":30:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":32:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":44:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":33:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":33:29)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":34:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":43:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":35:13)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":35:20)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":37:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":40:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":37:22)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":37:18)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":37:25)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":37:29)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":37:27)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":38:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":39:34)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":39:27)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":39:17)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":39:22)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":39:23)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":39:35)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":37:35)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":37:34)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":41:26)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":41:31)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":41:32)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":41:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":42:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":42:18)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":78:1)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":81:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":80:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":80:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":52:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":76:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":54:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":54:11)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":55:12)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":55:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":56:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":62:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":56:11)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":59:23)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":59:30)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":59:34)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":59:44)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":59:45)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":59:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":60:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":60:37)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":60:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":60:21)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":60:18)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":60:27)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":60:28)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":60:34)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":60:33)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":61:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":63:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":75:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":64:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":64:29)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":65:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":74:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":66:13)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":66:20)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":68:13)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":71:13)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":68:22)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":68:18)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":68:25)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":68:29)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":68:27)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":69:13)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":70:34)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":70:27)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":70:17)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":70:22)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":70:23)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":70:35)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":68:35)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":68:34)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":72:26)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":72:31)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":72:32)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":72:13)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":73:13)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c":73:18)
#loc123 = loc(fused[#loc1, #loc2])
#loc124 = loc(fused[#loc3, #loc4])
#loc125 = loc(fused[#loc5, #loc6])
#loc126 = loc(fused[#loc7, #loc8])
#loc127 = loc(fused[#loc9, #loc10])
#loc128 = loc(fused[#loc11, #loc12])
#loc129 = loc(fused[#loc14, #loc13])
#loc130 = loc(fused[#loc15, #loc16])
#loc131 = loc(fused[#loc20, #loc21])
#loc132 = loc(fused[#loc19, #loc21])
#loc133 = loc(fused[#loc18, #loc22])
#loc134 = loc(fused[#loc23, #loc22])
#loc135 = loc(fused[#loc24, #loc25])
#loc136 = loc(fused[#loc26, #loc27])
#loc137 = loc(fused[#loc29, #loc25])
#loc138 = loc(fused[#loc34, #loc35])
#loc139 = loc(fused[#loc36, #loc37])
#loc140 = loc(fused[#loc38, #loc39])
#loc141 = loc(fused[#loc40, #loc41])
#loc142 = loc(fused[#loc42, #loc43])
#loc143 = loc(fused[#loc45, #loc44])
#loc144 = loc(fused[#loc46, #loc47])
#loc145 = loc(fused[#loc49, #loc43])
#loc146 = loc(fused[#loc52, #loc55])
#loc147 = loc(fused[#loc57, #loc56])
#loc148 = loc(fused[#loc64, #loc65])
#loc149 = loc(fused[#loc66, #loc67])
#loc150 = loc(fused[#loc68, #loc69])
#loc151 = loc(fused[#loc70, #loc71])
#loc152 = loc(fused[#loc73, #loc72])
#loc153 = loc(fused[#loc74, #loc75])
#loc154 = loc(fused[#loc79, #loc80])
#loc155 = loc(fused[#loc78, #loc80])
#loc156 = loc(fused[#loc77, #loc81])
#loc157 = loc(fused[#loc82, #loc81])
#loc158 = loc(fused[#loc83, #loc84])
#loc159 = loc(fused[#loc85, #loc86])
#loc160 = loc(fused[#loc88, #loc84])
#loc161 = loc(fused[#loc93, #loc94])
#loc162 = loc(fused[#loc95, #loc96])
#loc163 = loc(fused[#loc97, #loc98])
#loc164 = loc(fused[#loc99, #loc100])
#loc165 = loc(fused[#loc101, #loc102])
#loc166 = loc(fused[#loc104, #loc103])
#loc167 = loc(fused[#loc105, #loc106])
#loc168 = loc(fused[#loc108, #loc102])
#loc169 = loc(fused[#loc111, #loc114])
#loc170 = loc(fused[#loc116, #loc115])
