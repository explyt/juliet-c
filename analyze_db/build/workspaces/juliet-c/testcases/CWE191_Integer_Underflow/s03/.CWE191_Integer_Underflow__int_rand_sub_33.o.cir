!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc17 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":32:12)
#loc63 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":74:12)
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_sub_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc82)
  cir.func private @printIntLine(!s32i) loc(#loc83)
  cir.func @_ZN41CWE191_Integer_Underflow__int_rand_sub_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc85)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc86)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc87)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc88)
    cir.store %2, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc14)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc15)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc89)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc17)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc17)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc17)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc17)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc17)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc17)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc17)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc17)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc17)
    cir.br ^bb3(%20 : !u32i) loc(#loc17)
  ^bb2:  // pred: ^bb0
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc17)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc17)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc17)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc17)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc17)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc17)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc17)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc17)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc17)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc17)
    cir.br ^bb3(%36 : !u32i) loc(#loc17)
  ^bb3(%37: !u32i loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":32:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // pred: ^bb3
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc17)
    cir.store %38, %2 : !s32i, !cir.ptr<!s32i> loc(#loc90)
    cir.br ^bb5 loc(#loc91)
  ^bb5:  // pred: ^bb4
    %39 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc8)
    %40 = cir.load %39 : !cir.ptr<!s32i>, !s32i loc(#loc8)
    cir.store %40, %0 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    cir.br ^bb6 loc(#loc92)
  ^bb6:  // pred: ^bb5
    %41 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    %42 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %43 = cir.binop(sub, %41, %42) nsw : !s32i loc(#loc23)
    cir.store %43, %1 : !s32i, !cir.ptr<!s32i> loc(#loc86)
    %44 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    cir.call @printIntLine(%44) : (!s32i) -> () loc(#loc25)
    cir.br ^bb7 loc(#loc22)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc20)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc6)
  } loc(#loc84)
  cir.func internal private @_ZN41CWE191_Integer_Underflow__int_rand_sub_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc94)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc95)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc96)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc97)
    cir.store %2, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc35)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc36)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc98)
    %5 = cir.const #cir.int<2> : !s32i loc(#loc38)
    %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc39)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    cir.br ^bb1 loc(#loc100)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc29)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc29)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc94)
    cir.br ^bb2 loc(#loc101)
  ^bb2:  // pred: ^bb1
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc45)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc45)
    cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc95)
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc46)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc47)
    cir.br ^bb3 loc(#loc44)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc42)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc27)
  } loc(#loc93)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc102)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc50)
  cir.func internal private @_ZN41CWE191_Integer_Underflow__int_rand_sub_33L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc104)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc105)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc106)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc107)
    cir.store %2, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc60)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc61)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc63)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc63)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc63)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc63)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc63)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc63)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc63)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc63)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc63)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc63)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc63)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc63)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc63)
    cir.br ^bb3(%20 : !u32i) loc(#loc63)
  ^bb2:  // pred: ^bb0
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc63)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc63)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc63)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc63)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc63)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc63)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc63)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc63)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc63)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc63)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc63)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc63)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc63)
    cir.br ^bb3(%36 : !u32i) loc(#loc63)
  ^bb3(%37: !u32i loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":74:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc63)
  ^bb4:  // pred: ^bb3
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc63)
    cir.store %38, %2 : !s32i, !cir.ptr<!s32i> loc(#loc109)
    cir.br ^bb5 loc(#loc110)
  ^bb5:  // pred: ^bb4
    %39 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc54)
    %40 = cir.load %39 : !cir.ptr<!s32i>, !s32i loc(#loc54)
    cir.store %40, %0 : !s32i, !cir.ptr<!s32i> loc(#loc104)
    cir.br ^bb6 loc(#loc111)
  ^bb6:  // pred: ^bb5
    %41 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
    %42 = cir.const #cir.int<2147483647> : !s32i loc(#loc70)
    %43 = cir.unary(minus, %42) nsw : !s32i, !s32i loc(#loc70)
    %44 = cir.const #cir.int<1> : !s32i loc(#loc70)
    %45 = cir.binop(sub, %43, %44) nsw : !s32i loc(#loc70)
    %46 = cir.cmp(gt, %41, %45) : !s32i, !cir.bool loc(#loc112)
    cir.brcond %46 ^bb7, ^bb8 loc(#loc113)
  ^bb7:  // pred: ^bb6
    %47 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc74)
    %48 = cir.const #cir.int<1> : !s32i loc(#loc56)
    %49 = cir.binop(sub, %47, %48) nsw : !s32i loc(#loc74)
    cir.store %49, %1 : !s32i, !cir.ptr<!s32i> loc(#loc105)
    %50 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc75)
    cir.call @printIntLine(%50) : (!s32i) -> () loc(#loc76)
    cir.br ^bb9 loc(#loc72)
  ^bb8:  // pred: ^bb6
    %51 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc50)
    %52 = cir.cast(array_to_ptrdecay, %51 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%52) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    cir.br ^bb9 loc(#loc68)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc68)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc66)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc52)
  } loc(#loc103)
  cir.func @_ZN41CWE191_Integer_Underflow__int_rand_sub_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN41CWE191_Integer_Underflow__int_rand_sub_33L7goodG2BEv() : () -> () loc(#loc80)
    cir.call @_ZN41CWE191_Integer_Underflow__int_rand_sub_33L7goodB2GEv() : () -> () loc(#loc81)
    cir.return loc(#loc79)
  } loc(#loc114)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_sub_33.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":25:1)
#loc6 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":41:1)
#loc7 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":34:9)
#loc8 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":34:20)
#loc9 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":37:13)
#loc10 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":37:33)
#loc11 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":27:5)
#loc12 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":27:9)
#loc13 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":28:5)
#loc14 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":28:20)
#loc15 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":30:12)
#loc16 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":30:5)
#loc18 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":32:5)
#loc19 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":33:5)
#loc20 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":40:5)
#loc21 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":35:9)
#loc22 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":39:9)
#loc23 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":37:26)
#loc24 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":38:26)
#loc25 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":38:13)
#loc26 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":48:1)
#loc27 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":64:1)
#loc28 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":57:9)
#loc29 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":57:20)
#loc30 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":60:13)
#loc31 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":60:33)
#loc32 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":50:5)
#loc33 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":50:9)
#loc34 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":51:5)
#loc35 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":51:20)
#loc36 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":53:12)
#loc37 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":53:5)
#loc38 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":55:13)
#loc39 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":55:12)
#loc40 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":55:5)
#loc41 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":56:5)
#loc42 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":63:5)
#loc43 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":58:9)
#loc44 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":62:9)
#loc45 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":60:26)
#loc46 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":61:26)
#loc47 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":61:13)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc50 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":85:23)
#loc51 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":67:1)
#loc52 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":88:1)
#loc53 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":76:9)
#loc54 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":76:20)
#loc55 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":80:13)
#loc56 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":80:33)
#loc57 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":69:5)
#loc58 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":69:9)
#loc59 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":70:5)
#loc60 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":70:20)
#loc61 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":72:12)
#loc62 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":72:5)
#loc64 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":74:5)
#loc65 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":75:5)
#loc66 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":87:5)
#loc67 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":78:9)
#loc68 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":86:9)
#loc69 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":78:13)
#loc70 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":78:20)
#loc71 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":79:9)
#loc72 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":82:9)
#loc73 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":84:9)
#loc74 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":80:26)
#loc75 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":81:26)
#loc76 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":81:13)
#loc77 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":85:13)
#loc78 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":90:1)
#loc79 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":94:1)
#loc80 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":92:5)
#loc81 = loc("CWE191_Integer_Underflow__int_rand_sub_33.cpp":93:5)
#loc82 = loc(fused[#loc1, #loc2])
#loc83 = loc(fused[#loc3, #loc4])
#loc84 = loc(fused[#loc5, #loc6])
#loc85 = loc(fused[#loc7, #loc8])
#loc86 = loc(fused[#loc9, #loc10])
#loc87 = loc(fused[#loc11, #loc12])
#loc88 = loc(fused[#loc13, #loc14])
#loc89 = loc(fused[#loc16, #loc15])
#loc90 = loc(fused[#loc18, #loc17])
#loc91 = loc(fused[#loc19, #loc20])
#loc92 = loc(fused[#loc21, #loc22])
#loc93 = loc(fused[#loc26, #loc27])
#loc94 = loc(fused[#loc28, #loc29])
#loc95 = loc(fused[#loc30, #loc31])
#loc96 = loc(fused[#loc32, #loc33])
#loc97 = loc(fused[#loc34, #loc35])
#loc98 = loc(fused[#loc37, #loc36])
#loc99 = loc(fused[#loc40, #loc38])
#loc100 = loc(fused[#loc41, #loc42])
#loc101 = loc(fused[#loc43, #loc44])
#loc102 = loc(fused[#loc48, #loc49])
#loc103 = loc(fused[#loc51, #loc52])
#loc104 = loc(fused[#loc53, #loc54])
#loc105 = loc(fused[#loc55, #loc56])
#loc106 = loc(fused[#loc57, #loc58])
#loc107 = loc(fused[#loc59, #loc60])
#loc108 = loc(fused[#loc62, #loc61])
#loc109 = loc(fused[#loc64, #loc63])
#loc110 = loc(fused[#loc65, #loc66])
#loc111 = loc(fused[#loc67, #loc68])
#loc112 = loc(fused[#loc69, #loc70])
#loc113 = loc(fused[#loc71, #loc72, #loc73, #loc68])
#loc114 = loc(fused[#loc78, #loc79])
