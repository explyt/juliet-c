!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_multiply_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrue(...) -> !s32i loc(#loc196)
  cir.func private  @printIntLine(!s32i) loc(#loc197)
  cir.func no_proto  @CWE190_Integer_Overflow__int_max_multiply_11_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc199)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc200)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc202)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc202)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc13)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc13)
      cir.if %5 {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc16)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
      } loc(#loc203)
    } loc(#loc201)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc206)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc206)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc20)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc20)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc26)
          %8 = cir.cmp(gt, %6, %7) : !s32i, !s32i loc(#loc209)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc27)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc211)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc30)
            %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc31)
            cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc211)
            %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc32)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc33)
          } loc(#loc210)
        } loc(#loc208)
      } loc(#loc207)
    } loc(#loc205)
    cir.return loc(#loc6)
  } loc(#loc198)
  cir.func no_proto  @CWE190_Integer_Overflow__int_max_multiply_11_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc213)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc214)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc215)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc216)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    cir.return loc(#loc35)
  } loc(#loc212)
  cir.func no_proto private  @globalReturnsFalse(...) -> !s32i loc(#loc217)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc218)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc48)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc49)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc220)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc54)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc221)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc223)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc223)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc58)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc58)
      cir.if %5 {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc61)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc225)
      } loc(#loc224)
    } loc(#loc222)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc227)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc227)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc65)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc65)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc48)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc48)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc70)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc74)
          %8 = cir.cmp(gt, %6, %7) : !s32i, !s32i loc(#loc230)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc75)
          cir.if %9 {
            cir.scope {
              %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
              %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc80)
              %12 = cir.const #cir.int<2> : !s32i loc(#loc81)
              %13 = cir.binop(div, %11, %12) : !s32i loc(#loc233)
              %14 = cir.cmp(lt, %10, %13) : !s32i, !s32i loc(#loc234)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc83)
              cir.if %15 {
                %16 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc236)
                %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
                %18 = cir.const #cir.int<2> : !s32i loc(#loc88)
                %19 = cir.binop(mul, %17, %18) nsw : !s32i loc(#loc89)
                cir.store %19, %16 : !s32i, !cir.ptr<!s32i> loc(#loc236)
                %20 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc90)
                cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc91)
              } else {
                %16 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc49)
                %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc49)
                cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc92)
              } loc(#loc235)
            } loc(#loc232)
          } loc(#loc231)
        } loc(#loc229)
      } loc(#loc228)
    } loc(#loc226)
    cir.return loc(#loc51)
  } loc(#loc219)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc238)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc97)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc239)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc241)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc241)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc101)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc101)
      cir.if %5 {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc104)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc243)
      } loc(#loc242)
    } loc(#loc240)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc245)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc245)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc108)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc108)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc113)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc114)
          %8 = cir.cmp(gt, %6, %7) : !s32i, !s32i loc(#loc248)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc115)
          cir.if %9 {
            cir.scope {
              %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc119)
              %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc120)
              %12 = cir.const #cir.int<2> : !s32i loc(#loc121)
              %13 = cir.binop(div, %11, %12) : !s32i loc(#loc251)
              %14 = cir.cmp(lt, %10, %13) : !s32i, !s32i loc(#loc252)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc123)
              cir.if %15 {
                %16 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc254)
                %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
                %18 = cir.const #cir.int<2> : !s32i loc(#loc128)
                %19 = cir.binop(mul, %17, %18) nsw : !s32i loc(#loc129)
                cir.store %19, %16 : !s32i, !cir.ptr<!s32i> loc(#loc254)
                %20 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc130)
                cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc131)
              } else {
                %16 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc132)
                %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc132)
                cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc133)
              } loc(#loc253)
            } loc(#loc250)
          } loc(#loc249)
        } loc(#loc247)
      } loc(#loc246)
    } loc(#loc244)
    cir.return loc(#loc94)
  } loc(#loc237)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc256)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc138)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc257)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc259)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc259)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc142)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc142)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc147)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc147)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc148)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc149)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc261)
      } loc(#loc260)
    } loc(#loc258)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc263)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc263)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc153)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc153)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc158)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc159)
          %8 = cir.cmp(gt, %6, %7) : !s32i, !s32i loc(#loc266)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc160)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc268)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc164)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc163)
            %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc164)
            cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc268)
            %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc165)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc166)
          } loc(#loc267)
        } loc(#loc265)
      } loc(#loc264)
    } loc(#loc262)
    cir.return loc(#loc135)
  } loc(#loc255)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc270)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc171)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc271)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc273)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc273)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc175)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc175)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc178)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc275)
      } loc(#loc274)
    } loc(#loc272)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc277)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc277)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc182)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc182)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc187)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc188)
          %8 = cir.cmp(gt, %6, %7) : !s32i, !s32i loc(#loc280)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc189)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc282)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc193)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc192)
            %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc193)
            cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc282)
            %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc194)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc195)
          } loc(#loc281)
        } loc(#loc279)
      } loc(#loc278)
    } loc(#loc276)
    cir.return loc(#loc168)
  } loc(#loc269)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_multiply_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":22:1)
#loc6 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":41:1)
#loc7 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":24:5)
#loc8 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":24:9)
#loc9 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":26:12)
#loc10 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":26:5)
#loc11 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":27:5)
#loc12 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":31:5)
#loc13 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":27:8)
#loc14 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":27:26)
#loc15 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":28:5)
#loc16 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":30:16)
#loc17 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":30:9)
#loc18 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":32:5)
#loc19 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":40:5)
#loc20 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":32:8)
#loc21 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":32:26)
#loc22 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":33:5)
#loc23 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":34:9)
#loc24 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":39:9)
#loc25 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":34:12)
#loc26 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":34:19)
#loc27 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":34:17)
#loc28 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":35:9)
#loc29 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":37:13)
#loc30 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":37:33)
#loc31 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":37:26)
#loc32 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":38:26)
#loc33 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":38:13)
#loc34 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":159:1)
#loc35 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":165:1)
#loc36 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":161:5)
#loc37 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":161:14)
#loc38 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":162:5)
#loc39 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":162:14)
#loc40 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":163:5)
#loc41 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":163:14)
#loc42 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":164:5)
#loc43 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":164:14)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc48 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":61:19)
#loc49 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":75:27)
#loc50 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":48:1)
#loc51 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":79:1)
#loc52 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":50:5)
#loc53 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":50:9)
#loc54 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":52:12)
#loc55 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":52:5)
#loc56 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":53:5)
#loc57 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":57:5)
#loc58 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":53:8)
#loc59 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":53:26)
#loc60 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":54:5)
#loc61 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":56:16)
#loc62 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":56:9)
#loc63 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":58:5)
#loc64 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":78:5)
#loc65 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":58:8)
#loc66 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":58:27)
#loc67 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":59:5)
#loc68 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":62:5)
#loc69 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":64:5)
#loc70 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":61:9)
#loc71 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":65:9)
#loc72 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":77:9)
#loc73 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":65:12)
#loc74 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":65:19)
#loc75 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":65:17)
#loc76 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":66:9)
#loc77 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":68:13)
#loc78 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":76:13)
#loc79 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":68:17)
#loc80 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":68:25)
#loc81 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":68:33)
#loc82 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":68:34)
#loc83 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":68:22)
#loc84 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":69:13)
#loc85 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":72:13)
#loc86 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":74:13)
#loc87 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":70:17)
#loc88 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":70:37)
#loc89 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":70:30)
#loc90 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":71:30)
#loc91 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":71:17)
#loc92 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":75:17)
#loc93 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":82:1)
#loc94 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":108:1)
#loc95 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":84:5)
#loc96 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":84:9)
#loc97 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":86:12)
#loc98 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":86:5)
#loc99 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":87:5)
#loc100 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":91:5)
#loc101 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":87:8)
#loc102 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":87:26)
#loc103 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":88:5)
#loc104 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":90:16)
#loc105 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":90:9)
#loc106 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":92:5)
#loc107 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":107:5)
#loc108 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":92:8)
#loc109 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":92:26)
#loc110 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":93:5)
#loc111 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":94:9)
#loc112 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":106:9)
#loc113 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":94:12)
#loc114 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":94:19)
#loc115 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":94:17)
#loc116 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":95:9)
#loc117 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":97:13)
#loc118 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":105:13)
#loc119 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":97:17)
#loc120 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":97:25)
#loc121 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":97:33)
#loc122 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":97:34)
#loc123 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":97:22)
#loc124 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":98:13)
#loc125 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":101:13)
#loc126 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":103:13)
#loc127 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":99:17)
#loc128 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":99:37)
#loc129 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":99:30)
#loc130 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":100:30)
#loc131 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":100:17)
#loc132 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":104:27)
#loc133 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":104:17)
#loc134 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":111:1)
#loc135 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":135:1)
#loc136 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":113:5)
#loc137 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":113:9)
#loc138 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":115:12)
#loc139 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":115:5)
#loc140 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":116:5)
#loc141 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":125:5)
#loc142 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":116:8)
#loc143 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":116:27)
#loc144 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":117:5)
#loc145 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":120:5)
#loc146 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":122:5)
#loc147 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":119:19)
#loc148 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":119:9)
#loc149 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":124:16)
#loc150 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":124:9)
#loc151 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":126:5)
#loc152 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":134:5)
#loc153 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":126:8)
#loc154 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":126:26)
#loc155 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":127:5)
#loc156 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":128:9)
#loc157 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":133:9)
#loc158 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":128:12)
#loc159 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":128:19)
#loc160 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":128:17)
#loc161 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":129:9)
#loc162 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":131:13)
#loc163 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":131:33)
#loc164 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":131:26)
#loc165 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":132:26)
#loc166 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":132:13)
#loc167 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":138:1)
#loc168 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":157:1)
#loc169 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":140:5)
#loc170 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":140:9)
#loc171 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":142:12)
#loc172 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":142:5)
#loc173 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":143:5)
#loc174 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":147:5)
#loc175 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":143:8)
#loc176 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":143:26)
#loc177 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":144:5)
#loc178 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":146:16)
#loc179 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":146:9)
#loc180 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":148:5)
#loc181 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":156:5)
#loc182 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":148:8)
#loc183 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":148:26)
#loc184 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":149:5)
#loc185 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":150:9)
#loc186 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":155:9)
#loc187 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":150:12)
#loc188 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":150:19)
#loc189 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":150:17)
#loc190 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":151:9)
#loc191 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":153:13)
#loc192 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":153:33)
#loc193 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":153:26)
#loc194 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":154:26)
#loc195 = loc("CWE190_Integer_Overflow__int_max_multiply_11.c":154:13)
#loc196 = loc(fused[#loc1, #loc2])
#loc197 = loc(fused[#loc3, #loc4])
#loc198 = loc(fused[#loc5, #loc6])
#loc199 = loc(fused[#loc7, #loc8])
#loc200 = loc(fused[#loc10, #loc9])
#loc201 = loc(fused[#loc11, #loc12])
#loc202 = loc(fused[#loc13, #loc14])
#loc203 = loc(fused[#loc15, #loc12])
#loc204 = loc(fused[#loc17, #loc16])
#loc205 = loc(fused[#loc18, #loc19])
#loc206 = loc(fused[#loc20, #loc21])
#loc207 = loc(fused[#loc22, #loc19])
#loc208 = loc(fused[#loc23, #loc24])
#loc209 = loc(fused[#loc25, #loc26])
#loc210 = loc(fused[#loc28, #loc24])
#loc211 = loc(fused[#loc29, #loc30])
#loc212 = loc(fused[#loc34, #loc35])
#loc213 = loc(fused[#loc36, #loc37])
#loc214 = loc(fused[#loc38, #loc39])
#loc215 = loc(fused[#loc40, #loc41])
#loc216 = loc(fused[#loc42, #loc43])
#loc217 = loc(fused[#loc44, #loc45])
#loc218 = loc(fused[#loc46, #loc47])
#loc219 = loc(fused[#loc50, #loc51])
#loc220 = loc(fused[#loc52, #loc53])
#loc221 = loc(fused[#loc55, #loc54])
#loc222 = loc(fused[#loc56, #loc57])
#loc223 = loc(fused[#loc58, #loc59])
#loc224 = loc(fused[#loc60, #loc57])
#loc225 = loc(fused[#loc62, #loc61])
#loc226 = loc(fused[#loc63, #loc64])
#loc227 = loc(fused[#loc65, #loc66])
#loc228 = loc(fused[#loc67, #loc68, #loc69, #loc64])
#loc229 = loc(fused[#loc71, #loc72])
#loc230 = loc(fused[#loc73, #loc74])
#loc231 = loc(fused[#loc76, #loc72])
#loc232 = loc(fused[#loc77, #loc78])
#loc233 = loc(fused[#loc80, #loc81])
#loc234 = loc(fused[#loc79, #loc82])
#loc235 = loc(fused[#loc84, #loc85, #loc86, #loc78])
#loc236 = loc(fused[#loc87, #loc88])
#loc237 = loc(fused[#loc93, #loc94])
#loc238 = loc(fused[#loc95, #loc96])
#loc239 = loc(fused[#loc98, #loc97])
#loc240 = loc(fused[#loc99, #loc100])
#loc241 = loc(fused[#loc101, #loc102])
#loc242 = loc(fused[#loc103, #loc100])
#loc243 = loc(fused[#loc105, #loc104])
#loc244 = loc(fused[#loc106, #loc107])
#loc245 = loc(fused[#loc108, #loc109])
#loc246 = loc(fused[#loc110, #loc107])
#loc247 = loc(fused[#loc111, #loc112])
#loc248 = loc(fused[#loc113, #loc114])
#loc249 = loc(fused[#loc116, #loc112])
#loc250 = loc(fused[#loc117, #loc118])
#loc251 = loc(fused[#loc120, #loc121])
#loc252 = loc(fused[#loc119, #loc122])
#loc253 = loc(fused[#loc124, #loc125, #loc126, #loc118])
#loc254 = loc(fused[#loc127, #loc128])
#loc255 = loc(fused[#loc134, #loc135])
#loc256 = loc(fused[#loc136, #loc137])
#loc257 = loc(fused[#loc139, #loc138])
#loc258 = loc(fused[#loc140, #loc141])
#loc259 = loc(fused[#loc142, #loc143])
#loc260 = loc(fused[#loc144, #loc145, #loc146, #loc141])
#loc261 = loc(fused[#loc150, #loc149])
#loc262 = loc(fused[#loc151, #loc152])
#loc263 = loc(fused[#loc153, #loc154])
#loc264 = loc(fused[#loc155, #loc152])
#loc265 = loc(fused[#loc156, #loc157])
#loc266 = loc(fused[#loc158, #loc159])
#loc267 = loc(fused[#loc161, #loc157])
#loc268 = loc(fused[#loc162, #loc163])
#loc269 = loc(fused[#loc167, #loc168])
#loc270 = loc(fused[#loc169, #loc170])
#loc271 = loc(fused[#loc172, #loc171])
#loc272 = loc(fused[#loc173, #loc174])
#loc273 = loc(fused[#loc175, #loc176])
#loc274 = loc(fused[#loc177, #loc174])
#loc275 = loc(fused[#loc179, #loc178])
#loc276 = loc(fused[#loc180, #loc181])
#loc277 = loc(fused[#loc182, #loc183])
#loc278 = loc(fused[#loc184, #loc181])
#loc279 = loc(fused[#loc185, #loc186])
#loc280 = loc(fused[#loc187, #loc188])
#loc281 = loc(fused[#loc190, #loc186])
#loc282 = loc(fused[#loc191, #loc192])
