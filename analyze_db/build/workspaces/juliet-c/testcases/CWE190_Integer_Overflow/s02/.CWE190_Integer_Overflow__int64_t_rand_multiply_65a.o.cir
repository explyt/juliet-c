!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":32:21)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":63:21)
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @CWE190_Integer_Overflow__int64_t_rand_multiply_65b_badSink(!s64i) loc(#loc51)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc52)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_multiply_65_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc54)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s64i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc55)
    %2 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_multiply_65b_badSink : !cir.ptr<!cir.func<(!s64i)>> loc(#loc10)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s64i)>>> loc(#loc55)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc11)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc56)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc13)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %7 ^bb1, ^bb2 loc(#loc13)
  ^bb1:  // pred: ^bb0
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc13)
    %10 = cir.const #cir.int<60> : !s32i loc(#loc13)
    %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc13)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc13)
    %14 = cir.const #cir.int<45> : !s32i loc(#loc13)
    %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc13)
    %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc13)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc13)
    %19 = cir.const #cir.int<30> : !s32i loc(#loc13)
    %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc13)
    %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc13)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc13)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc13)
    %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc13)
    %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc13)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc13)
    %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc13)
    cir.br ^bb3(%29 : !u64i) loc(#loc13)
  ^bb2:  // pred: ^bb0
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc13)
    %32 = cir.const #cir.int<60> : !s32i loc(#loc13)
    %33 = cir.shift(left, %31 : !u64i, %32 : !s32i) -> !u64i loc(#loc13)
    %34 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc13)
    %36 = cir.const #cir.int<45> : !s32i loc(#loc13)
    %37 = cir.shift(left, %35 : !u64i, %36 : !s32i) -> !u64i loc(#loc13)
    %38 = cir.binop(xor, %33, %37) : !u64i loc(#loc13)
    %39 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc13)
    %41 = cir.const #cir.int<30> : !s32i loc(#loc13)
    %42 = cir.shift(left, %40 : !u64i, %41 : !s32i) -> !u64i loc(#loc13)
    %43 = cir.binop(xor, %38, %42) : !u64i loc(#loc13)
    %44 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc13)
    %46 = cir.const #cir.int<15> : !s32i loc(#loc13)
    %47 = cir.shift(left, %45 : !u64i, %46 : !s32i) -> !u64i loc(#loc13)
    %48 = cir.binop(xor, %43, %47) : !u64i loc(#loc13)
    %49 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %50 = cir.cast(integral, %49 : !s32i), !u64i loc(#loc13)
    %51 = cir.binop(xor, %48, %50) : !u64i loc(#loc13)
    %52 = cir.unary(minus, %51) : !u64i, !u64i loc(#loc13)
    %53 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %54 = cir.cast(integral, %53 : !s32i), !u64i loc(#loc13)
    %55 = cir.binop(sub, %52, %54) : !u64i loc(#loc13)
    cir.br ^bb3(%55 : !u64i) loc(#loc13)
  ^bb3(%56: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":32:21)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc13)
  ^bb4:  // pred: ^bb3
    %57 = cir.cast(integral, %56 : !u64i), !s64i loc(#loc13)
    cir.store %57, %0 : !s64i, !cir.ptr<!s64i> loc(#loc57)
    %58 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s64i)>>>, !cir.ptr<!cir.func<(!s64i)>> loc(#loc15)
    %59 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc16)
    cir.call %58(%59) : (!cir.ptr<!cir.func<(!s64i)>>, !s64i) -> () loc(#loc15)
    cir.return loc(#loc6)
  } loc(#loc53)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_multiply_65_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc59)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc19)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc60)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc21)
    cir.return loc(#loc18)
  } loc(#loc58)
  cir.func private @CWE190_Integer_Overflow__int64_t_rand_multiply_65b_goodG2BSink(!s64i) loc(#loc61)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc63)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s64i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc64)
    %2 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_multiply_65b_goodG2BSink : !cir.ptr<!cir.func<(!s64i)>> loc(#loc30)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s64i)>>> loc(#loc64)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc31)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc65)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc33)
    %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc33)
    cir.store %5, %0 : !s64i, !cir.ptr<!s64i> loc(#loc66)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s64i)>>>, !cir.ptr<!cir.func<(!s64i)>> loc(#loc35)
    %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc36)
    cir.call %6(%7) : (!cir.ptr<!cir.func<(!s64i)>>, !s64i) -> () loc(#loc35)
    cir.return loc(#loc26)
  } loc(#loc62)
  cir.func private @CWE190_Integer_Overflow__int64_t_rand_multiply_65b_goodB2GSink(!s64i) loc(#loc67)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc69)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s64i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc70)
    %2 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_multiply_65b_goodB2GSink : !cir.ptr<!cir.func<(!s64i)>> loc(#loc44)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s64i)>>> loc(#loc70)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc45)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc71)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc47)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc47)
    cir.brcond %7 ^bb1, ^bb2 loc(#loc47)
  ^bb1:  // pred: ^bb0
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc47)
    %10 = cir.const #cir.int<60> : !s32i loc(#loc47)
    %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc47)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc47)
    %14 = cir.const #cir.int<45> : !s32i loc(#loc47)
    %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc47)
    %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc47)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
    %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc47)
    %19 = cir.const #cir.int<30> : !s32i loc(#loc47)
    %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc47)
    %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc47)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc47)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc47)
    %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc47)
    %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc47)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc47)
    %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc47)
    cir.br ^bb3(%29 : !u64i) loc(#loc47)
  ^bb2:  // pred: ^bb0
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc47)
    %32 = cir.const #cir.int<60> : !s32i loc(#loc47)
    %33 = cir.shift(left, %31 : !u64i, %32 : !s32i) -> !u64i loc(#loc47)
    %34 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
    %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc47)
    %36 = cir.const #cir.int<45> : !s32i loc(#loc47)
    %37 = cir.shift(left, %35 : !u64i, %36 : !s32i) -> !u64i loc(#loc47)
    %38 = cir.binop(xor, %33, %37) : !u64i loc(#loc47)
    %39 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
    %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc47)
    %41 = cir.const #cir.int<30> : !s32i loc(#loc47)
    %42 = cir.shift(left, %40 : !u64i, %41 : !s32i) -> !u64i loc(#loc47)
    %43 = cir.binop(xor, %38, %42) : !u64i loc(#loc47)
    %44 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
    %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc47)
    %46 = cir.const #cir.int<15> : !s32i loc(#loc47)
    %47 = cir.shift(left, %45 : !u64i, %46 : !s32i) -> !u64i loc(#loc47)
    %48 = cir.binop(xor, %43, %47) : !u64i loc(#loc47)
    %49 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
    %50 = cir.cast(integral, %49 : !s32i), !u64i loc(#loc47)
    %51 = cir.binop(xor, %48, %50) : !u64i loc(#loc47)
    %52 = cir.unary(minus, %51) : !u64i, !u64i loc(#loc47)
    %53 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %54 = cir.cast(integral, %53 : !s32i), !u64i loc(#loc47)
    %55 = cir.binop(sub, %52, %54) : !u64i loc(#loc47)
    cir.br ^bb3(%55 : !u64i) loc(#loc47)
  ^bb3(%56: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":63:21)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc47)
  ^bb4:  // pred: ^bb3
    %57 = cir.cast(integral, %56 : !u64i), !s64i loc(#loc47)
    cir.store %57, %0 : !s64i, !cir.ptr<!s64i> loc(#loc72)
    %58 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s64i)>>>, !cir.ptr<!cir.func<(!s64i)>> loc(#loc49)
    %59 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc50)
    cir.call %58(%59) : (!cir.ptr<!cir.func<(!s64i)>>, !s64i) -> () loc(#loc49)
    cir.return loc(#loc40)
  } loc(#loc68)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":23:1)
#loc2 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":23:77)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":25:1)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":35:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":27:5)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":27:13)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":29:5)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":29:33)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":30:12)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":30:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":32:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":34:5)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":34:13)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":67:1)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":71:1)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":69:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":69:13)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":70:5)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":70:13)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":42:1)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":42:81)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":44:1)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":52:1)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":46:5)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":46:13)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":47:5)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":47:33)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":48:12)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":48:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":50:12)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":50:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":51:5)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":51:13)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":55:1)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":55:81)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":57:1)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":65:1)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":59:5)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":59:13)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":60:5)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":60:33)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":61:12)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":61:5)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":63:5)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":64:5)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_65a.c":64:13)
#loc51 = loc(fused[#loc1, #loc2])
#loc52 = loc(fused[#loc3, #loc4])
#loc53 = loc(fused[#loc5, #loc6])
#loc54 = loc(fused[#loc7, #loc8])
#loc55 = loc(fused[#loc9, #loc10])
#loc56 = loc(fused[#loc12, #loc11])
#loc57 = loc(fused[#loc14, #loc13])
#loc58 = loc(fused[#loc17, #loc18])
#loc59 = loc(fused[#loc19, #loc20])
#loc60 = loc(fused[#loc21, #loc22])
#loc61 = loc(fused[#loc23, #loc24])
#loc62 = loc(fused[#loc25, #loc26])
#loc63 = loc(fused[#loc27, #loc28])
#loc64 = loc(fused[#loc29, #loc30])
#loc65 = loc(fused[#loc32, #loc31])
#loc66 = loc(fused[#loc34, #loc33])
#loc67 = loc(fused[#loc37, #loc38])
#loc68 = loc(fused[#loc39, #loc40])
#loc69 = loc(fused[#loc41, #loc42])
#loc70 = loc(fused[#loc43, #loc44])
#loc71 = loc(fused[#loc46, #loc45])
#loc72 = loc(fused[#loc48, #loc47])
