!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_square_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLongLongLine(!s64i) loc(#loc161)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_max_square_04_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc163)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc164)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc9)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc165)
    cir.br ^bb1 loc(#loc166)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc167)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc15)
    cir.store %5, %1 : !s64i, !cir.ptr<!s64i> loc(#loc168)
    cir.br ^bb3 loc(#loc12)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc12)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc169)
  ^bb5:  // pred: ^bb4
    %6 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %7 ^bb6, ^bb9 loc(#loc170)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc171)
  ^bb7:  // pred: ^bb6
    %8 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc23)
    %9 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc6)
    %10 = cir.binop(mul, %8, %9) nsw : !s64i loc(#loc23)
    cir.store %10, %0 : !s64i, !cir.ptr<!s64i> loc(#loc163)
    %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc24)
    cir.call @printLongLongLine(%11) : (!s64i) -> () loc(#loc25)
    cir.br ^bb8 loc(#loc22)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc18)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc18)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc4)
  } loc(#loc162)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_max_square_04_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc173)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc174)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc175)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc176)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    cir.return loc(#loc27)
  } loc(#loc172)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc177)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc38)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr1) loc(#loc178)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc42)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc180)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc181)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc49)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc182)
    cir.br ^bb1 loc(#loc183)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc53)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc184)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc55)
    cir.store %5, %1 : !s64i, !cir.ptr<!s64i> loc(#loc185)
    cir.br ^bb3 loc(#loc52)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc52)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc186)
  ^bb5:  // pred: ^bb4
    %6 = cir.const #cir.int<0> : !s32i loc(#loc59)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc59)
    cir.brcond %7 ^bb6, ^bb7 loc(#loc187)
  ^bb6:  // pred: ^bb5
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc38)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    cir.br ^bb13 loc(#loc61)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc188)
  ^bb8:  // pred: ^bb7
    %10 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc66)
    %11 = cir.call @imaxabs(%10) : (!s64i) -> !s64i side_effect(const) extra(#fn_attr1) loc(#loc67)
    %12 = cir.cast(int_to_float, %11 : !s64i), !cir.long_double<!cir.f80> loc(#loc67)
    %13 = cir.get_global @sqrtl : !cir.ptr<!cir.func<(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80>>> loc(#loc68)
    %14 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc69)
    %15 = cir.cast(int_to_float, %14 : !s64i), !cir.long_double<!cir.f80> loc(#loc69)
    %16 = cir.call @sqrtl(%15) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc68)
    %17 = cir.cmp(le, %12, %16) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc189)
    cir.brcond %17 ^bb9, ^bb10 loc(#loc190)
  ^bb9:  // pred: ^bb8
    %18 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc74)
    %19 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc46)
    %20 = cir.binop(mul, %18, %19) nsw : !s64i loc(#loc74)
    cir.store %20, %0 : !s64i, !cir.ptr<!s64i> loc(#loc180)
    %21 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc75)
    cir.call @printLongLongLine(%21) : (!s64i) -> () loc(#loc76)
    cir.br ^bb11 loc(#loc72)
  ^bb10:  // pred: ^bb8
    %22 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc42)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    cir.br ^bb11 loc(#loc65)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc65)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc58)
  ^bb13:  // 2 preds: ^bb6, ^bb12
    cir.br ^bb14 loc(#loc58)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc44)
  } loc(#loc179)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc192)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc193)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc84)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc194)
    cir.br ^bb1 loc(#loc195)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc88)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc196)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc90)
    cir.store %5, %1 : !s64i, !cir.ptr<!s64i> loc(#loc197)
    cir.br ^bb3 loc(#loc87)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc87)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc198)
  ^bb5:  // pred: ^bb4
    %6 = cir.const #cir.int<1> : !s32i loc(#loc94)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc94)
    cir.brcond %7 ^bb6, ^bb12 loc(#loc199)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc200)
  ^bb7:  // pred: ^bb6
    %8 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc98)
    %9 = cir.call @imaxabs(%8) : (!s64i) -> !s64i side_effect(const) extra(#fn_attr1) loc(#loc99)
    %10 = cir.cast(int_to_float, %9 : !s64i), !cir.long_double<!cir.f80> loc(#loc99)
    %11 = cir.get_global @sqrtl : !cir.ptr<!cir.func<(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80>>> loc(#loc100)
    %12 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc101)
    %13 = cir.cast(int_to_float, %12 : !s64i), !cir.long_double<!cir.f80> loc(#loc101)
    %14 = cir.call @sqrtl(%13) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc100)
    %15 = cir.cmp(le, %10, %14) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc201)
    cir.brcond %15 ^bb8, ^bb9 loc(#loc202)
  ^bb8:  // pred: ^bb7
    %16 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc106)
    %17 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc81)
    %18 = cir.binop(mul, %16, %17) nsw : !s64i loc(#loc106)
    cir.store %18, %0 : !s64i, !cir.ptr<!s64i> loc(#loc192)
    %19 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc107)
    cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc108)
    cir.br ^bb10 loc(#loc104)
  ^bb9:  // pred: ^bb7
    %20 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc109)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc109)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc110)
    cir.br ^bb10 loc(#loc97)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc97)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc93)
  ^bb12:  // 2 preds: ^bb5, ^bb11
    cir.br ^bb13 loc(#loc93)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc79)
  } loc(#loc191)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc204)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc205)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc117)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc206)
    cir.br ^bb1 loc(#loc207)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<0> : !s32i loc(#loc121)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc121)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc208)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc125)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc125)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc126)
    cir.br ^bb4 loc(#loc123)
  ^bb3:  // pred: ^bb1
    %7 = cir.const #cir.int<2> : !s32i loc(#loc127)
    %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc127)
    cir.store %8, %1 : !s64i, !cir.ptr<!s64i> loc(#loc209)
    cir.br ^bb4 loc(#loc120)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc120)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc210)
  ^bb6:  // pred: ^bb5
    %9 = cir.const #cir.int<1> : !s32i loc(#loc131)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc131)
    cir.brcond %10 ^bb7, ^bb10 loc(#loc211)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc212)
  ^bb8:  // pred: ^bb7
    %11 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc135)
    %12 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc114)
    %13 = cir.binop(mul, %11, %12) nsw : !s64i loc(#loc135)
    cir.store %13, %0 : !s64i, !cir.ptr<!s64i> loc(#loc204)
    %14 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc136)
    cir.call @printLongLongLine(%14) : (!s64i) -> () loc(#loc137)
    cir.br ^bb9 loc(#loc134)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc130)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc130)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc112)
  } loc(#loc203)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc214)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc215)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc144)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc216)
    cir.br ^bb1 loc(#loc217)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc148)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc148)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc218)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<2> : !s32i loc(#loc150)
    %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc150)
    cir.store %6, %1 : !s64i, !cir.ptr<!s64i> loc(#loc219)
    cir.br ^bb3 loc(#loc147)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc147)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc220)
  ^bb5:  // pred: ^bb4
    %7 = cir.const #cir.int<1> : !s32i loc(#loc154)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc154)
    cir.brcond %8 ^bb6, ^bb9 loc(#loc221)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc222)
  ^bb7:  // pred: ^bb6
    %9 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc158)
    %10 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc141)
    %11 = cir.binop(mul, %9, %10) nsw : !s64i loc(#loc158)
    cir.store %11, %0 : !s64i, !cir.ptr<!s64i> loc(#loc214)
    %12 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc159)
    cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc160)
    cir.br ^bb8 loc(#loc157)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc153)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc153)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc139)
  } loc(#loc213)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_square_04.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":31:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":48:1)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":44:13)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":44:37)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":33:5)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":33:13)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":34:12)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":34:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":35:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":39:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":35:8)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":36:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":38:16)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":38:9)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":40:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":47:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":40:8)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":41:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":42:9)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":46:9)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":44:30)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":45:31)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":45:13)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":154:1)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":160:1)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":156:5)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":156:14)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":157:5)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":157:14)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":158:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":158:14)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":159:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":159:14)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":67:19)
#loc39 = loc("/usr/include/inttypes.h":351:1)
#loc40 = loc("/usr/include/inttypes.h":351:74)
#loc41 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":79:23)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":55:1)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":82:1)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":74:13)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":74:37)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":57:5)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":57:13)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":58:12)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":58:5)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":59:5)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":63:5)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":59:8)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":60:5)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":62:16)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":62:9)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":64:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":81:5)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":64:8)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":65:5)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":68:5)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":70:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":67:9)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":72:9)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":80:9)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":72:31)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":72:13)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":72:40)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":72:46)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":72:55)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":73:9)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":76:9)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":78:9)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":74:30)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":75:31)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":75:13)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":79:13)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":85:1)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":107:1)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":99:13)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":99:37)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":87:5)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":87:13)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":88:12)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":88:5)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":89:5)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":93:5)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":89:8)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":90:5)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":92:16)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":92:9)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":94:5)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":106:5)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":94:8)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":95:5)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":97:9)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":105:9)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":97:31)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":97:13)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":97:40)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":97:46)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":97:55)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":98:9)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":101:9)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":103:9)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":99:30)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":100:31)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":100:13)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":104:23)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":104:13)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":110:1)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":132:1)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":128:13)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":128:37)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":112:5)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":112:13)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":113:12)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":113:5)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":114:5)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":123:5)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":114:8)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":115:5)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":118:5)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":120:5)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":117:19)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":117:9)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":122:16)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":122:9)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":124:5)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":131:5)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":124:8)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":125:5)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":126:9)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":130:9)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":128:30)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":129:31)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":129:13)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":135:1)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":152:1)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":148:13)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":148:37)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":137:5)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":137:13)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":138:12)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":138:5)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":139:5)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":143:5)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":139:8)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":140:5)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":142:16)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":142:9)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":144:5)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":151:5)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":144:8)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":145:5)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":146:9)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":150:9)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":148:30)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":149:31)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":149:13)
#loc161 = loc(fused[#loc1, #loc2])
#loc162 = loc(fused[#loc3, #loc4])
#loc163 = loc(fused[#loc5, #loc6])
#loc164 = loc(fused[#loc7, #loc8])
#loc165 = loc(fused[#loc10, #loc9])
#loc166 = loc(fused[#loc11, #loc12])
#loc167 = loc(fused[#loc14, #loc12])
#loc168 = loc(fused[#loc16, #loc15])
#loc169 = loc(fused[#loc17, #loc18])
#loc170 = loc(fused[#loc20, #loc18])
#loc171 = loc(fused[#loc21, #loc22])
#loc172 = loc(fused[#loc26, #loc27])
#loc173 = loc(fused[#loc28, #loc29])
#loc174 = loc(fused[#loc30, #loc31])
#loc175 = loc(fused[#loc32, #loc33])
#loc176 = loc(fused[#loc34, #loc35])
#loc177 = loc(fused[#loc36, #loc37])
#loc178 = loc(fused[#loc39, #loc40])
#loc179 = loc(fused[#loc43, #loc44])
#loc180 = loc(fused[#loc45, #loc46])
#loc181 = loc(fused[#loc47, #loc48])
#loc182 = loc(fused[#loc50, #loc49])
#loc183 = loc(fused[#loc51, #loc52])
#loc184 = loc(fused[#loc54, #loc52])
#loc185 = loc(fused[#loc56, #loc55])
#loc186 = loc(fused[#loc57, #loc58])
#loc187 = loc(fused[#loc60, #loc61, #loc62, #loc58])
#loc188 = loc(fused[#loc64, #loc65])
#loc189 = loc(fused[#loc67, #loc70])
#loc190 = loc(fused[#loc71, #loc72, #loc73, #loc65])
#loc191 = loc(fused[#loc78, #loc79])
#loc192 = loc(fused[#loc80, #loc81])
#loc193 = loc(fused[#loc82, #loc83])
#loc194 = loc(fused[#loc85, #loc84])
#loc195 = loc(fused[#loc86, #loc87])
#loc196 = loc(fused[#loc89, #loc87])
#loc197 = loc(fused[#loc91, #loc90])
#loc198 = loc(fused[#loc92, #loc93])
#loc199 = loc(fused[#loc95, #loc93])
#loc200 = loc(fused[#loc96, #loc97])
#loc201 = loc(fused[#loc99, #loc102])
#loc202 = loc(fused[#loc103, #loc104, #loc105, #loc97])
#loc203 = loc(fused[#loc111, #loc112])
#loc204 = loc(fused[#loc113, #loc114])
#loc205 = loc(fused[#loc115, #loc116])
#loc206 = loc(fused[#loc118, #loc117])
#loc207 = loc(fused[#loc119, #loc120])
#loc208 = loc(fused[#loc122, #loc123, #loc124, #loc120])
#loc209 = loc(fused[#loc128, #loc127])
#loc210 = loc(fused[#loc129, #loc130])
#loc211 = loc(fused[#loc132, #loc130])
#loc212 = loc(fused[#loc133, #loc134])
#loc213 = loc(fused[#loc138, #loc139])
#loc214 = loc(fused[#loc140, #loc141])
#loc215 = loc(fused[#loc142, #loc143])
#loc216 = loc(fused[#loc145, #loc144])
#loc217 = loc(fused[#loc146, #loc147])
#loc218 = loc(fused[#loc149, #loc147])
#loc219 = loc(fused[#loc151, #loc150])
#loc220 = loc(fused[#loc152, #loc153])
#loc221 = loc(fused[#loc155, #loc153])
#loc222 = loc(fused[#loc156, #loc157])
