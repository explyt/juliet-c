!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":25:64)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":25:77)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":47:69)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":47:82)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":70:69)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":70:82)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":88:68)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":88:81)
#loc98 = loc(fused[#loc7, #loc8])
#loc107 = loc(fused[#loc29, #loc30])
#loc117 = loc(fused[#loc56, #loc57])
#loc127 = loc(fused[#loc81, #loc82])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @CWE190_Integer_Overflow__unsigned_int_rand_add_22_badGlobal : !s32i {alignment = 4 : i64} loc(#loc95)
  cir.func private @printUnsignedLine(!u32i) loc(#loc96)
  cir.func @CWE190_Integer_Overflow__unsigned_int_rand_add_22_badSink(%arg0: !u32i loc(fused[#loc7, #loc8])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc99)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc98)
    cir.store %arg0, %1 : !u32i, !cir.ptr<!u32i> loc(#loc11)
    cir.br ^bb1 loc(#loc100)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_rand_add_22_badGlobal : !cir.ptr<!s32i> loc(#loc95)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc14)
    cir.brcond %4 ^bb2, ^bb5 loc(#loc101)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc102)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc18)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc10)
    %8 = cir.binop(add, %5, %7) : !u32i loc(#loc103)
    cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc99)
    %9 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc19)
    cir.call @printUnsignedLine(%9) : (!u32i) -> () loc(#loc20)
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc13)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc13)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc6)
  } loc(#loc97)
  cir.global "private" external @CWE190_Integer_Overflow__unsigned_int_rand_add_22_goodB2G1Global : !s32i {alignment = 4 : i64} loc(#loc104)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc105)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc25)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc26)
  cir.func @CWE190_Integer_Overflow__unsigned_int_rand_add_22_goodB2G1Sink(%arg0: !u32i loc(fused[#loc29, #loc30])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc108)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc107)
    cir.store %arg0, %1 : !u32i, !cir.ptr<!u32i> loc(#loc33)
    cir.br ^bb1 loc(#loc109)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_rand_add_22_goodB2G1Global : !cir.ptr<!s32i> loc(#loc104)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc36)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc36)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc110)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc25)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc25)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc40)
    cir.br ^bb9 loc(#loc38)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc111)
  ^bb4:  // pred: ^bb3
    %7 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc43)
    %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc44)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc44)
    %10 = cir.const #cir.int<2> : !u32i loc(#loc44)
    %11 = cir.binop(mul, %9, %10) : !u32i loc(#loc44)
    %12 = cir.const #cir.int<1> : !u32i loc(#loc44)
    %13 = cir.binop(add, %11, %12) : !u32i loc(#loc44)
    %14 = cir.cmp(lt, %7, %13) : !u32i, !cir.bool loc(#loc112)
    cir.brcond %14 ^bb5, ^bb6 loc(#loc113)
  ^bb5:  // pred: ^bb4
    %15 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc48)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc32)
    %18 = cir.binop(add, %15, %17) : !u32i loc(#loc114)
    cir.store %18, %0 : !u32i, !cir.ptr<!u32i> loc(#loc108)
    %19 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc49)
    cir.call @printUnsignedLine(%19) : (!u32i) -> () loc(#loc50)
    cir.br ^bb7 loc(#loc46)
  ^bb6:  // pred: ^bb4
    %20 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc26)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc26)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    cir.br ^bb7 loc(#loc42)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc42)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc35)
  ^bb9:  // 2 preds: ^bb2, ^bb8
    cir.br ^bb10 loc(#loc35)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc28)
  } loc(#loc106)
  cir.global "private" external @CWE190_Integer_Overflow__unsigned_int_rand_add_22_goodB2G2Global : !s32i {alignment = 4 : i64} loc(#loc115)
  cir.func @CWE190_Integer_Overflow__unsigned_int_rand_add_22_goodB2G2Sink(%arg0: !u32i loc(fused[#loc56, #loc57])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc118)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc117)
    cir.store %arg0, %1 : !u32i, !cir.ptr<!u32i> loc(#loc60)
    cir.br ^bb1 loc(#loc119)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_rand_add_22_goodB2G2Global : !cir.ptr<!s32i> loc(#loc115)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc63)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc63)
    cir.brcond %4 ^bb2, ^bb8 loc(#loc120)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc121)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc67)
    %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc68)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc68)
    %8 = cir.const #cir.int<2> : !u32i loc(#loc68)
    %9 = cir.binop(mul, %7, %8) : !u32i loc(#loc68)
    %10 = cir.const #cir.int<1> : !u32i loc(#loc68)
    %11 = cir.binop(add, %9, %10) : !u32i loc(#loc68)
    %12 = cir.cmp(lt, %5, %11) : !u32i, !cir.bool loc(#loc122)
    cir.brcond %12 ^bb4, ^bb5 loc(#loc123)
  ^bb4:  // pred: ^bb3
    %13 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc72)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc59)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc59)
    %16 = cir.binop(add, %13, %15) : !u32i loc(#loc124)
    cir.store %16, %0 : !u32i, !cir.ptr<!u32i> loc(#loc118)
    %17 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc73)
    cir.call @printUnsignedLine(%17) : (!u32i) -> () loc(#loc74)
    cir.br ^bb6 loc(#loc70)
  ^bb5:  // pred: ^bb3
    %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc75)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    cir.br ^bb6 loc(#loc66)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc66)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc62)
  ^bb8:  // 2 preds: ^bb1, ^bb7
    cir.br ^bb9 loc(#loc62)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc55)
  } loc(#loc116)
  cir.global "private" external @CWE190_Integer_Overflow__unsigned_int_rand_add_22_goodG2BGlobal : !s32i {alignment = 4 : i64} loc(#loc125)
  cir.func @CWE190_Integer_Overflow__unsigned_int_rand_add_22_goodG2BSink(%arg0: !u32i loc(fused[#loc81, #loc82])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc128)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc127)
    cir.store %arg0, %1 : !u32i, !cir.ptr<!u32i> loc(#loc85)
    cir.br ^bb1 loc(#loc129)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_rand_add_22_goodG2BGlobal : !cir.ptr<!s32i> loc(#loc125)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc88)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc88)
    cir.brcond %4 ^bb2, ^bb5 loc(#loc130)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc131)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc92)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc84)
    %8 = cir.binop(add, %5, %7) : !u32i loc(#loc132)
    cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc128)
    %9 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc93)
    cir.call @printUnsignedLine(%9) : (!u32i) -> () loc(#loc94)
    cir.br ^bb4 loc(#loc91)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc87)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc87)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc80)
  } loc(#loc126)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":23:1)
#loc2 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":23:12)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":25:1)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":35:1)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":31:13)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":31:42)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":26:1)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":27:5)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":34:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":27:8)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":28:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":29:9)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":33:9)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":31:35)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":32:31)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":32:13)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":42:1)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":42:12)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc24 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":52:19)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":64:23)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":47:1)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":67:1)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":59:13)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":59:42)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":48:1)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":49:5)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":66:5)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":49:8)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":50:5)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":53:5)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":55:5)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":52:9)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":57:9)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":65:9)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":57:13)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":57:20)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":58:9)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":61:9)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":63:9)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":59:35)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":60:31)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":60:13)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":64:13)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":43:1)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":43:12)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":70:1)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":85:1)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":77:13)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":77:42)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":71:1)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":72:5)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":84:5)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":72:8)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":73:5)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":75:9)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":83:9)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":75:13)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":75:20)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":76:9)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":79:9)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":81:9)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":77:35)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":78:31)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":78:13)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":82:23)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":82:13)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":44:1)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":44:12)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":88:1)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":98:1)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":94:13)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":94:42)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":89:1)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":90:5)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":97:5)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":90:8)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":91:5)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":92:9)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":96:9)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":94:35)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":95:31)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_22b.c":95:13)
#loc95 = loc(fused[#loc1, #loc2])
#loc96 = loc(fused[#loc3, #loc4])
#loc97 = loc(fused[#loc5, #loc6])
#loc99 = loc(fused[#loc9, #loc10])
#loc100 = loc(fused[#loc12, #loc13])
#loc101 = loc(fused[#loc15, #loc13])
#loc102 = loc(fused[#loc16, #loc17])
#loc103 = loc(fused[#loc18, #loc10])
#loc104 = loc(fused[#loc21, #loc22])
#loc105 = loc(fused[#loc23, #loc24])
#loc106 = loc(fused[#loc27, #loc28])
#loc108 = loc(fused[#loc31, #loc32])
#loc109 = loc(fused[#loc34, #loc35])
#loc110 = loc(fused[#loc37, #loc38, #loc39, #loc35])
#loc111 = loc(fused[#loc41, #loc42])
#loc112 = loc(fused[#loc43, #loc44])
#loc113 = loc(fused[#loc45, #loc46, #loc47, #loc42])
#loc114 = loc(fused[#loc48, #loc32])
#loc115 = loc(fused[#loc52, #loc53])
#loc116 = loc(fused[#loc54, #loc55])
#loc118 = loc(fused[#loc58, #loc59])
#loc119 = loc(fused[#loc61, #loc62])
#loc120 = loc(fused[#loc64, #loc62])
#loc121 = loc(fused[#loc65, #loc66])
#loc122 = loc(fused[#loc67, #loc68])
#loc123 = loc(fused[#loc69, #loc70, #loc71, #loc66])
#loc124 = loc(fused[#loc72, #loc59])
#loc125 = loc(fused[#loc77, #loc78])
#loc126 = loc(fused[#loc79, #loc80])
#loc128 = loc(fused[#loc83, #loc84])
#loc129 = loc(fused[#loc86, #loc87])
#loc130 = loc(fused[#loc89, #loc87])
#loc131 = loc(fused[#loc90, #loc91])
#loc132 = loc(fused[#loc92, #loc84])
