!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__charVoid = !cir.struct<struct "_charVoid" {!cir.array<!s8i x 16>, !cir.ptr<!void>, !cir.ptr<!void>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc117)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc118)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"0123456789abcdef0123456789abcde\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc5)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc119)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc120)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16_bad() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc14)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc14)
        cir.condition(%1) loc(#loc14)
      } do {
        cir.scope {
          %0 = cir.alloca !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>>, ["structCharVoid", init] {alignment = 8 : i64} loc(#loc124)
          %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc19)
          %2 = cir.const #cir.int<32> : !u64i loc(#loc125)
          %3 = cir.call @malloc(%2) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc19)
          %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc126)
          cir.store %4, %0 : !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>> loc(#loc124)
          cir.scope {
            %44 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc24)
            %45 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc25)
            %46 = cir.cast(bitcast, %45 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc25)
            %47 = cir.cmp(eq, %44, %46) : !cir.ptr<!ty__charVoid>, !s32i loc(#loc128)
            %48 = cir.cast(int_to_bool, %47 : !s32i), !cir.bool loc(#loc26)
            cir.if %48 {
              %49 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc28)
              %50 = cir.const #cir.int<1> : !s32i loc(#loc29)
              %51 = cir.unary(minus, %50) : !s32i, !s32i loc(#loc30)
              cir.call @exit(%51) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
            } loc(#loc129)
          } loc(#loc127)
          %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc5)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc5)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc5)
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc31)
          %9 = cir.get_member %8[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc32)
          cir.store %7, %9 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc130)
          %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc33)
          %11 = cir.get_member %10[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc32)
          %12 = cir.load %11 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc34)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc131)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc35)
          %14 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc36)
          %15 = cir.get_member %14[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc37)
          %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc132)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc132)
          %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc39)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc39)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc39)
          %21 = cir.const #cir.int<32> : !u64i loc(#loc133)
          cir.libc.memcpy %21 bytes from %20 to %17 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc134)
          %22 = cir.const #cir.int<0> : !s32i loc(#loc44)
          %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc44)
          %24 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc45)
          %25 = cir.get_member %24[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc37)
          %26 = cir.const #cir.int<16> : !u64i loc(#loc135)
          %27 = cir.const #cir.int<1> : !u64i loc(#loc136)
          %28 = cir.binop(div, %26, %27) : !u64i loc(#loc137)
          %29 = cir.const #cir.int<1> : !s32i loc(#loc50)
          %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc50)
          %31 = cir.binop(sub, %28, %30) : !u64i loc(#loc138)
          %32 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc45)
          %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc52)
          cir.store %23, %33 : !s8i, !cir.ptr<!s8i> loc(#loc139)
          %34 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc53)
          %35 = cir.get_member %34[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc37)
          %36 = cir.cast(array_to_ptrdecay, %35 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc140)
          cir.call @printLine(%36) : (!cir.ptr<!s8i>) -> () loc(#loc55)
          %37 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc56)
          %38 = cir.get_member %37[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc32)
          %39 = cir.load %38 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc57)
          %40 = cir.cast(bitcast, %39 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc141)
          cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc58)
          %41 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc59)
          %42 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc60)
          %43 = cir.cast(bitcast, %42 : !cir.ptr<!ty__charVoid>), !cir.ptr<!void> loc(#loc60)
          cir.call @free(%43) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc59)
        } loc(#loc123)
        cir.break loc(#loc61)
      } loc(#loc122)
    } loc(#loc122)
    cir.return loc(#loc11)
  } loc(#loc121)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc143)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc64)
    cir.return loc(#loc63)
  } loc(#loc142)
  cir.func no_proto internal private  @good1() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc70)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc70)
        cir.condition(%1) loc(#loc70)
      } do {
        cir.scope {
          %0 = cir.alloca !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>>, ["structCharVoid", init] {alignment = 8 : i64} loc(#loc147)
          %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc75)
          %2 = cir.const #cir.int<32> : !u64i loc(#loc148)
          %3 = cir.call @malloc(%2) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc75)
          %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc149)
          cir.store %4, %0 : !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>> loc(#loc147)
          cir.scope {
            %44 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc80)
            %45 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc81)
            %46 = cir.cast(bitcast, %45 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc81)
            %47 = cir.cmp(eq, %44, %46) : !cir.ptr<!ty__charVoid>, !s32i loc(#loc151)
            %48 = cir.cast(int_to_bool, %47 : !s32i), !cir.bool loc(#loc82)
            cir.if %48 {
              %49 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc84)
              %50 = cir.const #cir.int<1> : !s32i loc(#loc85)
              %51 = cir.unary(minus, %50) : !s32i, !s32i loc(#loc86)
              cir.call @exit(%51) : (!s32i) -> () extra(#fn_attr) loc(#loc84)
            } loc(#loc152)
          } loc(#loc150)
          %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc87)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc87)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc87)
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc88)
          %9 = cir.get_member %8[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc32)
          cir.store %7, %9 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc153)
          %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc89)
          %11 = cir.get_member %10[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc32)
          %12 = cir.load %11 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc90)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc154)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc91)
          %14 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc92)
          %15 = cir.get_member %14[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc37)
          %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc155)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc155)
          %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc94)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc94)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc94)
          %21 = cir.const #cir.int<16> : !u64i loc(#loc156)
          cir.libc.memcpy %21 bytes from %20 to %17 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc157)
          %22 = cir.const #cir.int<0> : !s32i loc(#loc99)
          %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc99)
          %24 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc100)
          %25 = cir.get_member %24[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc37)
          %26 = cir.const #cir.int<16> : !u64i loc(#loc158)
          %27 = cir.const #cir.int<1> : !u64i loc(#loc159)
          %28 = cir.binop(div, %26, %27) : !u64i loc(#loc160)
          %29 = cir.const #cir.int<1> : !s32i loc(#loc105)
          %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc105)
          %31 = cir.binop(sub, %28, %30) : !u64i loc(#loc161)
          %32 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc100)
          %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc107)
          cir.store %23, %33 : !s8i, !cir.ptr<!s8i> loc(#loc162)
          %34 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc108)
          %35 = cir.get_member %34[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc37)
          %36 = cir.cast(array_to_ptrdecay, %35 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc163)
          cir.call @printLine(%36) : (!cir.ptr<!s8i>) -> () loc(#loc110)
          %37 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc111)
          %38 = cir.get_member %37[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc32)
          %39 = cir.load %38 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc112)
          %40 = cir.cast(bitcast, %39 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc164)
          cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc113)
          %41 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc114)
          %42 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc115)
          %43 = cir.cast(bitcast, %42 : !cir.ptr<!ty__charVoid>), !cir.ptr<!void> loc(#loc115)
          cir.call @free(%43) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc114)
        } loc(#loc146)
        cir.break loc(#loc116)
      } loc(#loc145)
    } loc(#loc145)
    cir.return loc(#loc67)
  } loc(#loc144)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":40:50)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("/usr/include/stdlib.h":687:1)
#loc9 = loc("/usr/include/stdlib.h":687:32)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":33:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":52:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":35:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":51:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":35:11)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":37:9)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":49:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":38:13)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":38:76)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":38:53)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":38:60)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":38:75)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":39:13)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":39:51)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":39:17)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":39:35)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":39:32)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":39:41)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":39:42)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":39:48)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":39:47)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":40:13)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":27:12)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":42:31)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":42:47)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":42:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":44:20)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":26:10)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":44:36)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":44:47)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":44:56)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":44:78)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":44:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":44:79)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":45:93)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":45:13)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":45:40)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":45:72)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":45:74)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":45:85)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":45:88)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":45:39)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":45:29)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":46:31)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":46:47)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":46:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":47:31)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":47:47)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":47:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":48:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":48:18)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":50:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":80:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":83:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":82:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":82:11)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":59:1)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":78:1)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":61:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":77:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":61:11)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":63:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":75:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":64:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":64:76)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":64:53)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":64:60)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":64:75)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":65:13)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":65:51)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":65:17)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":65:35)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":65:32)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":65:41)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":65:42)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":65:48)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":65:47)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":66:50)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":66:13)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":68:31)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":68:47)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":68:13)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":70:20)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":70:36)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":70:47)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":70:56)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":70:88)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":70:13)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":70:89)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":71:93)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":71:13)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":71:40)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":71:72)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":71:74)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":71:85)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":71:88)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":71:39)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":71:29)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":72:31)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":72:47)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":72:13)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":73:31)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":73:47)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":73:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":74:13)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":74:18)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c":76:9)
#loc117 = loc(fused[#loc1, #loc2])
#loc118 = loc(fused[#loc3, #loc4])
#loc119 = loc(fused[#loc6, #loc7])
#loc120 = loc(fused[#loc8, #loc9])
#loc121 = loc(fused[#loc10, #loc11])
#loc122 = loc(fused[#loc12, #loc13])
#loc123 = loc(fused[#loc15, #loc16])
#loc124 = loc(fused[#loc17, #loc18])
#loc125 = loc(fused[#loc20, #loc21])
#loc126 = loc(fused[#loc19, #loc18])
#loc127 = loc(fused[#loc22, #loc23])
#loc128 = loc(fused[#loc24, #loc25])
#loc129 = loc(fused[#loc27, #loc23])
#loc130 = loc(fused[#loc31, #loc5])
#loc131 = loc(fused[#loc33, #loc34])
#loc132 = loc(fused[#loc36, #loc38])
#loc133 = loc(fused[#loc40, #loc41])
#loc134 = loc(fused[#loc42, #loc43])
#loc135 = loc(fused[#loc46, #loc47])
#loc136 = loc(fused[#loc48, #loc49])
#loc137 = loc(fused[#loc46, #loc49])
#loc138 = loc(fused[#loc51, #loc50])
#loc139 = loc(fused[#loc45, #loc44])
#loc140 = loc(fused[#loc53, #loc54])
#loc141 = loc(fused[#loc56, #loc57])
#loc142 = loc(fused[#loc62, #loc63])
#loc143 = loc(fused[#loc64, #loc65])
#loc144 = loc(fused[#loc66, #loc67])
#loc145 = loc(fused[#loc68, #loc69])
#loc146 = loc(fused[#loc71, #loc72])
#loc147 = loc(fused[#loc73, #loc74])
#loc148 = loc(fused[#loc76, #loc77])
#loc149 = loc(fused[#loc75, #loc74])
#loc150 = loc(fused[#loc78, #loc79])
#loc151 = loc(fused[#loc80, #loc81])
#loc152 = loc(fused[#loc83, #loc79])
#loc153 = loc(fused[#loc88, #loc87])
#loc154 = loc(fused[#loc89, #loc90])
#loc155 = loc(fused[#loc92, #loc93])
#loc156 = loc(fused[#loc95, #loc96])
#loc157 = loc(fused[#loc97, #loc98])
#loc158 = loc(fused[#loc101, #loc102])
#loc159 = loc(fused[#loc103, #loc104])
#loc160 = loc(fused[#loc101, #loc104])
#loc161 = loc(fused[#loc106, #loc105])
#loc162 = loc(fused[#loc100, #loc99])
#loc163 = loc(fused[#loc108, #loc109])
#loc164 = loc(fused[#loc111, #loc112])
