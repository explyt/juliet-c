!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":21:21)
#loc6 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":21:27)
#loc25 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":38:19)
#loc35 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":48:25)
#loc36 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":48:31)
#loc60 = loc(fused[#loc5, #loc6])
#loc72 = loc(fused[#loc35, #loc36])
module @"/workspaces/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s02/CWE197_Numeric_Truncation_Error__short_rand_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printHexCharLine(!s8i) loc(#loc58)
  cir.func internal private @badSink(%arg0: !s16i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc61)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc60)
    cir.store %arg0, %1 : !s16i, !cir.ptr<!s16i> loc(#loc9)
    cir.br ^bb1 loc(#loc62)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc8)
    %3 = cir.cast(integral, %2 : !s16i), !s8i loc(#loc8)
    cir.store %3, %0 : !s8i, !cir.ptr<!s8i> loc(#loc61)
    %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc12)
    cir.call @printHexCharLine(%4) : (!s8i) -> () loc(#loc13)
    cir.br ^bb2 loc(#loc11)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc4)
  } loc(#loc59)
  cir.func private @rand() -> !s32i extra(#fn_attr1) loc(#loc63)
  cir.func no_proto @CWE197_Numeric_Truncation_Error__short_rand_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc65)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s16i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s16i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc66)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<(!s16i)>> loc(#loc21)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s16i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s16i)>>> loc(#loc66)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc23)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc23)
    cir.store %5, %0 : !s16i, !cir.ptr<!s16i> loc(#loc67)
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc25)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc25)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc25)
    cir.brcond %9 ^bb1, ^bb2 loc(#loc25)
  ^bb1:  // pred: ^bb0
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc25)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc25)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc25)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc25)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc25)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc25)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc25)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc25)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc25)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc25)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc25)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc25)
    cir.br ^bb3(%21 : !u32i) loc(#loc25)
  ^bb2:  // pred: ^bb0
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc25)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc25)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc25)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc25)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc25)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc25)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc25)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc25)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc25)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc25)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc25)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc25)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc25)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc25)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc25)
    cir.br ^bb3(%37 : !u32i) loc(#loc25)
  ^bb3(%38: !u32i loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":38:19)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc25)
  ^bb4:  // pred: ^bb3
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc25)
    %40 = cir.cast(integral, %39 : !s32i), !s16i loc(#loc25)
    cir.store %40, %0 : !s16i, !cir.ptr<!s16i> loc(#loc68)
    %41 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s16i)>>>, !cir.ptr<!cir.func<(!s16i)>> loc(#loc27)
    %42 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc28)
    cir.call %41(%42) : (!cir.ptr<!cir.func<(!s16i)>>, !s16i) -> () loc(#loc27)
    cir.return loc(#loc17)
  } loc(#loc64)
  cir.func no_proto @CWE197_Numeric_Truncation_Error__short_rand_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc70)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    cir.return loc(#loc30)
  } loc(#loc69)
  cir.func internal private @goodG2BSink(%arg0: !s16i loc(fused[#loc35, #loc36])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc73)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc72)
    cir.store %arg0, %1 : !s16i, !cir.ptr<!s16i> loc(#loc39)
    cir.br ^bb1 loc(#loc74)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc38)
    %3 = cir.cast(integral, %2 : !s16i), !s8i loc(#loc38)
    cir.store %3, %0 : !s8i, !cir.ptr<!s8i> loc(#loc73)
    %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc42)
    cir.call @printHexCharLine(%4) : (!s8i) -> () loc(#loc43)
    cir.br ^bb2 loc(#loc41)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc34)
  } loc(#loc71)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc76)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s16i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s16i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc77)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<(!s16i)>> loc(#loc49)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s16i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s16i)>>> loc(#loc77)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc51)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc51)
    cir.store %5, %0 : !s16i, !cir.ptr<!s16i> loc(#loc78)
    %6 = cir.const #cir.int<127> : !s32i loc(#loc53)
    %7 = cir.const #cir.int<5> : !s32i loc(#loc54)
    %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc53)
    %9 = cir.cast(integral, %8 : !s32i), !s16i loc(#loc53)
    cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc79)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s16i)>>>, !cir.ptr<!cir.func<(!s16i)>> loc(#loc56)
    %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc57)
    cir.call %10(%11) : (!cir.ptr<!cir.func<(!s16i)>>, !s16i) -> () loc(#loc56)
    cir.return loc(#loc45)
  } loc(#loc75)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s02/CWE197_Numeric_Truncation_Error__short_rand_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc3 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":21:1)
#loc4 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":28:1)
#loc7 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":25:9)
#loc8 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":25:31)
#loc9 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":22:1)
#loc10 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":23:5)
#loc11 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":27:5)
#loc12 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":26:26)
#loc13 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":26:9)
#loc14 = loc("/usr/include/stdlib.h":573:1)
#loc15 = loc("/usr/include/stdlib.h":573:24)
#loc16 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":30:1)
#loc17 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":41:1)
#loc18 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":32:5)
#loc19 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":32:11)
#loc20 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":34:5)
#loc21 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":34:31)
#loc22 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":36:13)
#loc23 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":36:12)
#loc24 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":36:5)
#loc26 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":38:5)
#loc27 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":40:5)
#loc28 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":40:13)
#loc29 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":68:1)
#loc30 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":71:1)
#loc31 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":70:5)
#loc32 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":70:13)
#loc33 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":48:1)
#loc34 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":55:1)
#loc37 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":52:9)
#loc38 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":52:31)
#loc39 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":49:1)
#loc40 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":50:5)
#loc41 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":54:5)
#loc42 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":53:26)
#loc43 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":53:9)
#loc44 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":57:1)
#loc45 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":66:1)
#loc46 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":59:5)
#loc47 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":59:11)
#loc48 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":60:5)
#loc49 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":60:31)
#loc50 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":62:13)
#loc51 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":62:12)
#loc52 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":62:5)
#loc53 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":64:12)
#loc54 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":64:21)
#loc55 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":64:5)
#loc56 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":65:5)
#loc57 = loc("CWE197_Numeric_Truncation_Error__short_rand_44.c":65:13)
#loc58 = loc(fused[#loc1, #loc2])
#loc59 = loc(fused[#loc3, #loc4])
#loc61 = loc(fused[#loc7, #loc8])
#loc62 = loc(fused[#loc10, #loc11])
#loc63 = loc(fused[#loc14, #loc15])
#loc64 = loc(fused[#loc16, #loc17])
#loc65 = loc(fused[#loc18, #loc19])
#loc66 = loc(fused[#loc20, #loc21])
#loc67 = loc(fused[#loc24, #loc22])
#loc68 = loc(fused[#loc26, #loc25])
#loc69 = loc(fused[#loc29, #loc30])
#loc70 = loc(fused[#loc31, #loc32])
#loc71 = loc(fused[#loc33, #loc34])
#loc73 = loc(fused[#loc37, #loc38])
#loc74 = loc(fused[#loc40, #loc41])
#loc75 = loc(fused[#loc44, #loc45])
#loc76 = loc(fused[#loc46, #loc47])
#loc77 = loc(fused[#loc48, #loc49])
#loc78 = loc(fused[#loc52, #loc50])
#loc79 = loc(fused[#loc55, #loc54])
