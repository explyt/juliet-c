!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc142)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc143)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%u\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printUnsignedLine(!u32i) loc(#loc144)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_fscanf_square_17_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc146)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc147)
    %2 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc148)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc15)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc15)
    cir.store %4, %2 : !u32i, !cir.ptr<!u32i> loc(#loc149)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc19)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc151)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc152)
        cir.condition(%8) loc(#loc23)
      } body {
        cir.scope {
          %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc25)
          %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc143)
          %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc26)
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
          %11 = cir.call @__isoc99_fscanf(%8, %10, %2) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc25)
        } loc(#loc153)
        cir.yield loc(#loc18)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc28)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc154)
        cir.yield loc(#loc150)
      } loc(#loc150)
    } loc(#loc150)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc31)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc156)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc33)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc34)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc157)
        cir.condition(%8) loc(#loc35)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc160)
            %7 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc41)
            %8 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc40)
            %9 = cir.binop(mul, %7, %8) : !u32i loc(#loc161)
            cir.store %9, %6 : !u32i, !cir.ptr<!u32i> loc(#loc160)
            %10 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc42)
            cir.call @printUnsignedLine(%10) : (!u32i) -> () loc(#loc43)
          } loc(#loc159)
        } loc(#loc158)
        cir.yield loc(#loc30)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc44)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc45)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc162)
        cir.yield loc(#loc155)
      } loc(#loc155)
    } loc(#loc155)
    cir.return loc(#loc9)
  } loc(#loc145)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_fscanf_square_17_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc164)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc48)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc165)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc50)
    cir.return loc(#loc47)
  } loc(#loc163)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc52)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc166)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc55)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc168)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc169)
    %2 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc170)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc63)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc63)
    cir.store %4, %2 : !u32i, !cir.ptr<!u32i> loc(#loc171)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc67)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc173)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc70)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc174)
        cir.condition(%8) loc(#loc71)
      } body {
        cir.scope {
          %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc73)
          %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc143)
          %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc74)
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc75)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc75)
          %11 = cir.call @__isoc99_fscanf(%8, %10, %2) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc73)
        } loc(#loc175)
        cir.yield loc(#loc66)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc76)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc77)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc176)
        cir.yield loc(#loc172)
      } loc(#loc172)
    } loc(#loc172)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc80)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc178)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc82)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc83)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc179)
        cir.condition(%8) loc(#loc84)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc88)
            %7 = cir.cast(integral, %6 : !u32i), !s64i loc(#loc88)
            %8 = cir.cast(integral, %7 : !s64i), !s32i loc(#loc88)
            %9 = cir.abs %8 poison : !s32i loc(#loc89)
            %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc89)
            %11 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc90)
            %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc91)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc91)
            %14 = cir.const #cir.int<2> : !u32i loc(#loc91)
            %15 = cir.binop(mul, %13, %14) : !u32i loc(#loc91)
            %16 = cir.const #cir.int<1> : !u32i loc(#loc91)
            %17 = cir.binop(add, %15, %16) : !u32i loc(#loc91)
            %18 = cir.cast(int_to_float, %17 : !u32i), !cir.double loc(#loc91)
            %19 = cir.call @sqrt(%18) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc90)
            %20 = cir.cast(float_to_int, %19 : !cir.double), !s64i loc(#loc90)
            %21 = cir.cmp(lt, %10, %20) : !s64i, !cir.bool loc(#loc182)
            cir.if %21 {
              %22 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc184)
              %23 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc98)
              %24 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc97)
              %25 = cir.binop(mul, %23, %24) : !u32i loc(#loc185)
              cir.store %25, %22 : !u32i, !cir.ptr<!u32i> loc(#loc184)
              %26 = cir.load %22 : !cir.ptr<!u32i>, !u32i loc(#loc99)
              cir.call @printUnsignedLine(%26) : (!u32i) -> () loc(#loc100)
            } else {
              %22 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc55)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc55)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc101)
            } loc(#loc183)
          } loc(#loc181)
        } loc(#loc180)
        cir.yield loc(#loc79)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc102)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc103)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc186)
        cir.yield loc(#loc177)
      } loc(#loc177)
    } loc(#loc177)
    cir.return loc(#loc57)
  } loc(#loc167)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc188)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc189)
    %2 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc190)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc111)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc111)
    cir.store %4, %2 : !u32i, !cir.ptr<!u32i> loc(#loc191)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc115)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc193)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc118)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc194)
        cir.condition(%8) loc(#loc119)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<2> : !s32i loc(#loc121)
          %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc121)
          cir.store %7, %2 : !u32i, !cir.ptr<!u32i> loc(#loc196)
        } loc(#loc195)
        cir.yield loc(#loc114)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc123)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc124)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
        cir.yield loc(#loc192)
      } loc(#loc192)
    } loc(#loc192)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc127)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc199)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc129)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc130)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc200)
        cir.condition(%8) loc(#loc131)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc203)
            %7 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc137)
            %8 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc136)
            %9 = cir.binop(mul, %7, %8) : !u32i loc(#loc204)
            cir.store %9, %6 : !u32i, !cir.ptr<!u32i> loc(#loc203)
            %10 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc138)
            cir.call @printUnsignedLine(%10) : (!u32i) -> () loc(#loc139)
          } loc(#loc202)
        } loc(#loc201)
        cir.yield loc(#loc126)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc140)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc141)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc205)
        cir.yield loc(#loc198)
      } loc(#loc198)
    } loc(#loc198)
    cir.return loc(#loc105)
  } loc(#loc187)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":32:24)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":24:1)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":42:1)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":26:5)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":26:9)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":26:11)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":27:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":27:18)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":28:12)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":28:5)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":29:5)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":33:5)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":29:13)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":29:9)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":29:16)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":29:20)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":29:18)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":30:5)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":32:9)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":32:17)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":29:24)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":29:23)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":34:5)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":41:5)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":34:13)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":34:9)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":34:16)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":34:20)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":34:18)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":35:5)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":36:9)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":40:9)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":38:13)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":38:42)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":38:35)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":39:31)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":39:13)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":34:24)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":34:23)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":95:1)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":99:1)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":97:5)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":97:13)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":98:5)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":98:13)
#loc52 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":69:23)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":49:1)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":72:1)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":51:5)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":51:9)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":51:11)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":52:5)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":52:18)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":53:12)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":53:5)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":54:5)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":58:5)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":54:13)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":54:9)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":54:16)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":54:20)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":54:18)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":55:5)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":57:9)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":57:17)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":57:24)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":54:24)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":54:23)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":59:5)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":71:5)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":59:13)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":59:9)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":59:16)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":59:20)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":59:18)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":60:5)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":62:9)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":70:9)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":62:23)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":62:13)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":62:37)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":62:50)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":62:58)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":63:9)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":66:9)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":68:9)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":64:13)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":64:42)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":64:35)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":65:31)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":65:13)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":69:13)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":59:24)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":59:23)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":75:1)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":93:1)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":77:5)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":77:9)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":77:11)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":78:5)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":78:18)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":79:12)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":79:5)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":80:5)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":84:5)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":80:13)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":80:9)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":80:16)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":80:20)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":80:18)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":81:5)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":83:16)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":83:9)
#loc123 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":80:24)
#loc124 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":80:23)
#loc125 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":85:5)
#loc126 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":92:5)
#loc127 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":85:13)
#loc128 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":85:9)
#loc129 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":85:16)
#loc130 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":85:20)
#loc131 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":85:18)
#loc132 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":86:5)
#loc133 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":87:9)
#loc134 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":91:9)
#loc135 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":89:13)
#loc136 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":89:42)
#loc137 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":89:35)
#loc138 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":90:31)
#loc139 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":90:13)
#loc140 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":85:24)
#loc141 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c":85:23)
#loc142 = loc(fused[#loc1, #loc2])
#loc143 = loc(fused[#loc3, #loc4])
#loc144 = loc(fused[#loc6, #loc7])
#loc145 = loc(fused[#loc8, #loc9])
#loc146 = loc(fused[#loc10, #loc11])
#loc147 = loc(fused[#loc10, #loc12])
#loc148 = loc(fused[#loc13, #loc14])
#loc149 = loc(fused[#loc16, #loc15])
#loc150 = loc(fused[#loc17, #loc18])
#loc151 = loc(fused[#loc20, #loc19])
#loc152 = loc(fused[#loc21, #loc22])
#loc153 = loc(fused[#loc24, #loc18])
#loc154 = loc(fused[#loc28, #loc27])
#loc155 = loc(fused[#loc29, #loc30])
#loc156 = loc(fused[#loc32, #loc31])
#loc157 = loc(fused[#loc33, #loc34])
#loc158 = loc(fused[#loc36, #loc30])
#loc159 = loc(fused[#loc37, #loc38])
#loc160 = loc(fused[#loc39, #loc40])
#loc161 = loc(fused[#loc41, #loc40])
#loc162 = loc(fused[#loc45, #loc44])
#loc163 = loc(fused[#loc46, #loc47])
#loc164 = loc(fused[#loc48, #loc49])
#loc165 = loc(fused[#loc50, #loc51])
#loc166 = loc(fused[#loc53, #loc54])
#loc167 = loc(fused[#loc56, #loc57])
#loc168 = loc(fused[#loc58, #loc59])
#loc169 = loc(fused[#loc58, #loc60])
#loc170 = loc(fused[#loc61, #loc62])
#loc171 = loc(fused[#loc64, #loc63])
#loc172 = loc(fused[#loc65, #loc66])
#loc173 = loc(fused[#loc68, #loc67])
#loc174 = loc(fused[#loc69, #loc70])
#loc175 = loc(fused[#loc72, #loc66])
#loc176 = loc(fused[#loc77, #loc76])
#loc177 = loc(fused[#loc78, #loc79])
#loc178 = loc(fused[#loc81, #loc80])
#loc179 = loc(fused[#loc82, #loc83])
#loc180 = loc(fused[#loc85, #loc79])
#loc181 = loc(fused[#loc86, #loc87])
#loc182 = loc(fused[#loc89, #loc92])
#loc183 = loc(fused[#loc93, #loc94, #loc95, #loc87])
#loc184 = loc(fused[#loc96, #loc97])
#loc185 = loc(fused[#loc98, #loc97])
#loc186 = loc(fused[#loc103, #loc102])
#loc187 = loc(fused[#loc104, #loc105])
#loc188 = loc(fused[#loc106, #loc107])
#loc189 = loc(fused[#loc106, #loc108])
#loc190 = loc(fused[#loc109, #loc110])
#loc191 = loc(fused[#loc112, #loc111])
#loc192 = loc(fused[#loc113, #loc114])
#loc193 = loc(fused[#loc116, #loc115])
#loc194 = loc(fused[#loc117, #loc118])
#loc195 = loc(fused[#loc120, #loc114])
#loc196 = loc(fused[#loc122, #loc121])
#loc197 = loc(fused[#loc124, #loc123])
#loc198 = loc(fused[#loc125, #loc126])
#loc199 = loc(fused[#loc128, #loc127])
#loc200 = loc(fused[#loc129, #loc130])
#loc201 = loc(fused[#loc132, #loc126])
#loc202 = loc(fused[#loc133, #loc134])
#loc203 = loc(fused[#loc135, #loc136])
#loc204 = loc(fused[#loc137, #loc136])
#loc205 = loc(fused[#loc141, #loc140])
