!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":24:16)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":24:33)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":39:20)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":39:37)
!ty__twoIntsStruct = !cir.record<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
#loc54 = loc(fused[#loc7, #loc8])
#loc64 = loc(fused[#loc31, #loc32])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc51)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc52)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_629badSourceERP14_twoIntsStruct(%arg0: !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, ["data", init, const] {alignment = 8 : i64} loc(#loc54)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>> loc(#loc9)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc10)
    %2 = cir.const #cir.int<8> : !u64i loc(#loc55)
    %3 = cir.call @malloc(%2) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc10)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc56)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc14)
    cir.store %4, %5 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc57)
    cir.br ^bb1 loc(#loc58)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc17)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc17)
    %8 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc18)
    %9 = cir.cmp(eq, %7, %8) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc59)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc60)
  ^bb2:  // pred: ^bb1
    %10 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc20)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc22)
    cir.call @exit(%12) : (!s32i) -> () extra(#fn_attr) loc(#loc20)
    cir.br ^bb3 loc(#loc16)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc16)
  ^bb4:  // pred: ^bb3
    %13 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc24)
    %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc24)
    %16 = cir.get_member %15[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc25)
    cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc61)
    %17 = cir.const #cir.int<2> : !s32i loc(#loc26)
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc27)
    %19 = cir.load %18 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc27)
    %20 = cir.get_member %19[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc28)
    cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc62)
    cir.return loc(#loc6)
  } loc(#loc53)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_6213goodG2BSourceERP14_twoIntsStruct(%arg0: !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(fused[#loc31, #loc32])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, ["data", init, const] {alignment = 8 : i64} loc(#loc64)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>> loc(#loc33)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc34)
    %2 = cir.const #cir.int<8> : !u64i loc(#loc65)
    %3 = cir.call @malloc(%2) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc34)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc66)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc38)
    cir.store %4, %5 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc67)
    cir.br ^bb1 loc(#loc68)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc41)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc41)
    %8 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc42)
    %9 = cir.cmp(eq, %7, %8) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc69)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc70)
  ^bb2:  // pred: ^bb1
    %10 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc44)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc46)
    cir.call @exit(%12) : (!s32i) -> () extra(#fn_attr) loc(#loc44)
    cir.br ^bb3 loc(#loc40)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc40)
  ^bb4:  // pred: ^bb3
    %13 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc48)
    %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc48)
    %16 = cir.get_member %15[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc25)
    cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc71)
    %17 = cir.const #cir.int<2> : !s32i loc(#loc49)
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc50)
    %19 = cir.load %18 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc50)
    %20 = cir.get_member %19[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc28)
    cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc72)
    cir.return loc(#loc30)
  } loc(#loc63)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":24:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":32:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":25:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":28:29)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":28:36)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":28:47)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":28:48)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":28:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":29:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":29:33)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":29:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":29:17)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":29:23)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":29:24)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":29:30)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":29:29)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":30:20)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":30:5)
#loc25 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":31:20)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":31:5)
#loc28 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":39:1)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":46:1)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":40:1)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":42:29)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":42:36)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":42:48)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":42:49)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":42:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":43:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":43:33)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":43:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":43:17)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":43:23)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":43:24)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":43:30)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":43:29)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":44:20)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":44:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":45:20)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_62b.cpp":45:5)
#loc51 = loc(fused[#loc1, #loc2])
#loc52 = loc(fused[#loc3, #loc4])
#loc53 = loc(fused[#loc5, #loc6])
#loc55 = loc(fused[#loc11, #loc12])
#loc56 = loc(fused[#loc10, #loc13])
#loc57 = loc(fused[#loc14, #loc13])
#loc58 = loc(fused[#loc15, #loc16])
#loc59 = loc(fused[#loc17, #loc18])
#loc60 = loc(fused[#loc19, #loc16])
#loc61 = loc(fused[#loc24, #loc23])
#loc62 = loc(fused[#loc27, #loc26])
#loc63 = loc(fused[#loc29, #loc30])
#loc65 = loc(fused[#loc35, #loc36])
#loc66 = loc(fused[#loc34, #loc37])
#loc67 = loc(fused[#loc38, #loc37])
#loc68 = loc(fused[#loc39, #loc40])
#loc69 = loc(fused[#loc41, #loc42])
#loc70 = loc(fused[#loc43, #loc40])
#loc71 = loc(fused[#loc48, #loc47])
#loc72 = loc(fused[#loc50, #loc49])
