!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_console_execl_65a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @CWE78_OS_Command_Injection__char_console_execl_65b_badSink(!cir.ptr<!s8i>) loc(#loc101)
  cir.func private  @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc102)
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc103)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc104)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc105)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc11)
  cir.func no_proto  @CWE78_OS_Command_Injection__char_console_execl_65_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc107)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc108)
    %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc109)
    %3 = cir.get_global @CWE78_OS_Command_Injection__char_console_execl_65b_badSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc17)
    cir.store %3, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>> loc(#loc108)
    %4 = cir.const #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc109)
    cir.store %4, %2 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc109)
    %5 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc20)
    cir.store %5, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc110)
    cir.scope {
      %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc112)
      %9 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc26)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
      %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc26)
      cir.store %11, %8 : !u64i, !cir.ptr<!u64i> loc(#loc112)
      cir.scope {
        %12 = cir.const #cir.int<100> : !s32i loc(#loc30)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc30)
        %14 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc31)
        %15 = cir.binop(sub, %13, %14) : !u64i loc(#loc114)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc32)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc32)
        %18 = cir.cmp(gt, %15, %17) : !u64i, !s32i loc(#loc115)
        %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc33)
        cir.if %19 {
          cir.scope {
            %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
            %21 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc38)
            %22 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %21 : !u64i), !cir.ptr<!s8i> loc(#loc39)
            %23 = cir.const #cir.int<100> : !s32i loc(#loc40)
            %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc40)
            %25 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc41)
            %26 = cir.binop(sub, %24, %25) : !u64i loc(#loc118)
            %27 = cir.cast(integral, %26 : !u64i), !s32i loc(#loc118)
            %28 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc104)
            %29 = cir.load %28 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc42)
            %30 = cir.call @fgets(%22, %27, %29) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc43)
            %31 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc44)
            %32 = cir.cast(bitcast, %31 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc44)
            %33 = cir.cmp(ne, %30, %32) : !cir.ptr<!s8i>, !s32i loc(#loc119)
            %34 = cir.cast(int_to_bool, %33 : !s32i), !cir.bool loc(#loc45)
            cir.if %34 {
              %35 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc49)
              %36 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
              %37 = cir.call @strlen(%36) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc49)
              cir.store %37, %8 : !u64i, !cir.ptr<!u64i> loc(#loc121)
              cir.scope {
                %38 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc55)
                %39 = cir.const #cir.int<0> : !s32i loc(#loc56)
                %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc56)
                %41 = cir.cmp(gt, %38, %40) : !u64i, !s32i loc(#loc123)
                %42 = cir.cast(int_to_bool, %41 : !s32i), !cir.bool loc(#loc57)
                %43 = cir.ternary(%42, true {
                  %44 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
                  %45 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc60)
                  %46 = cir.const #cir.int<1> : !s32i loc(#loc61)
                  %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc61)
                  %48 = cir.binop(sub, %45, %47) : !u64i loc(#loc124)
                  %49 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %48 : !u64i), !cir.ptr<!s8i> loc(#loc62)
                  %50 = cir.load %49 : !cir.ptr<!s8i>, !s8i loc(#loc59)
                  %51 = cir.cast(integral, %50 : !s8i), !s32i loc(#loc59)
                  %52 = cir.const #cir.int<10> : !s32i loc(#loc63)
                  %53 = cir.cmp(eq, %51, %52) : !s32i, !s32i loc(#loc125)
                  %54 = cir.cast(int_to_bool, %53 : !s32i), !cir.bool loc(#loc64)
                  %55 = cir.ternary(%54, true {
                    %56 = cir.const #true loc(#loc58)
                    cir.yield %56 : !cir.bool loc(#loc58)
                  }, false {
                    %56 = cir.const #false loc(#loc58)
                    cir.yield %56 : !cir.bool loc(#loc58)
                  }) : (!cir.bool) -> !cir.bool loc(#loc58)
                  cir.yield %55 : !cir.bool loc(#loc58)
                }, false {
                  %44 = cir.const #false loc(#loc58)
                  cir.yield %44 : !cir.bool loc(#loc58)
                }) : (!cir.bool) -> !cir.bool loc(#loc58)
                cir.if %43 {
                  %44 = cir.const #cir.int<0> : !s32i loc(#loc66)
                  %45 = cir.cast(integral, %44 : !s32i), !s8i loc(#loc66)
                  %46 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc67)
                  %47 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc68)
                  %48 = cir.const #cir.int<1> : !s32i loc(#loc69)
                  %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc69)
                  %50 = cir.binop(sub, %47, %49) : !u64i loc(#loc127)
                  %51 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %50 : !u64i), !cir.ptr<!s8i> loc(#loc70)
                  cir.store %45, %51 : !s8i, !cir.ptr<!s8i> loc(#loc128)
                } loc(#loc126)
              } loc(#loc122)
            } else {
              %35 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc11)
              %36 = cir.cast(array_to_ptrdecay, %35 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc11)
              cir.call @printLine(%36) : (!cir.ptr<!s8i>) -> () loc(#loc71)
              %37 = cir.const #cir.int<0> : !s32i loc(#loc72)
              %38 = cir.cast(integral, %37 : !s32i), !s8i loc(#loc72)
              %39 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc73)
              %40 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc74)
              %41 = cir.ptr_stride(%39 : !cir.ptr<!s8i>, %40 : !u64i), !cir.ptr<!s8i> loc(#loc75)
              cir.store %38, %41 : !s8i, !cir.ptr<!s8i> loc(#loc129)
            } loc(#loc120)
          } loc(#loc117)
        } loc(#loc116)
      } loc(#loc113)
    } loc(#loc111)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc76)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc77)
    cir.call %6(%7) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc76)
    cir.return loc(#loc13)
  } loc(#loc106)
  cir.func no_proto  @CWE78_OS_Command_Injection__char_console_execl_65_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc131)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc80)
    cir.return loc(#loc79)
  } loc(#loc130)
  cir.func private  @CWE78_OS_Command_Injection__char_console_execl_65b_goodG2BSink(!cir.ptr<!s8i>) loc(#loc132)
  cir.func private  @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc133)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc86)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc135)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc136)
    %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc137)
    %3 = cir.get_global @CWE78_OS_Command_Injection__char_console_execl_65b_goodG2BSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc92)
    cir.store %3, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>> loc(#loc136)
    %4 = cir.const #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc137)
    cir.store %4, %2 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc137)
    %5 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc95)
    cir.store %5, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc138)
    %6 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc97)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc98)
    %8 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc86)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc86)
    %10 = cir.call @strcat(%7, %9) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc97)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc99)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc100)
    cir.call %11(%12) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc99)
    cir.return loc(#loc88)
  } loc(#loc134)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_console_execl_65a.c":0:0)
#loc1 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":46:1)
#loc2 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":46:76)
#loc3 = loc("/usr/include/string.h":407:1)
#loc4 = loc("/usr/include/string.h":408:33)
#loc5 = loc("/usr/include/stdio.h":654:1)
#loc6 = loc("/usr/include/stdio.h":655:59)
#loc7 = loc("/usr/include/stdio.h":149:1)
#loc8 = loc("/usr/include/stdio.h":149:14)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":74:27)
#loc12 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":48:1)
#loc13 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":82:1)
#loc14 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":50:5)
#loc15 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":50:12)
#loc16 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":52:5)
#loc17 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":52:32)
#loc18 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":53:5)
#loc19 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":53:28)
#loc20 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":54:12)
#loc21 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":54:5)
#loc22 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":55:5)
#loc23 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":79:5)
#loc24 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":57:9)
#loc25 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":57:37)
#loc26 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":57:26)
#loc27 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":57:33)
#loc28 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":59:9)
#loc29 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":78:9)
#loc30 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":59:13)
#loc31 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":59:17)
#loc32 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":59:27)
#loc33 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":59:25)
#loc34 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":60:9)
#loc35 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":62:13)
#loc36 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":77:13)
#loc37 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":62:23)
#loc38 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":62:28)
#loc39 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":62:27)
#loc40 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":62:43)
#loc41 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":62:47)
#loc42 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":62:57)
#loc43 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":62:17)
#loc44 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":62:67)
#loc45 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":62:64)
#loc46 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":63:13)
#loc47 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":71:13)
#loc48 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":73:13)
#loc49 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":66:27)
#loc50 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":66:34)
#loc51 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":66:17)
#loc52 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":66:38)
#loc53 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":67:17)
#loc54 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":70:17)
#loc55 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":67:21)
#loc56 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":67:31)
#loc57 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":67:29)
#loc58 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":67:33)
#loc59 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":67:36)
#loc60 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":67:41)
#loc61 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":67:49)
#loc62 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":67:50)
#loc63 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":67:55)
#loc64 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":67:52)
#loc65 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":68:17)
#loc66 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":69:39)
#loc67 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":69:21)
#loc68 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":69:26)
#loc69 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":69:34)
#loc70 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":69:35)
#loc71 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":74:17)
#loc72 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":76:33)
#loc73 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":76:17)
#loc74 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":76:22)
#loc75 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":76:29)
#loc76 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":81:5)
#loc77 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":81:13)
#loc78 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":102:1)
#loc79 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":105:1)
#loc80 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":104:5)
#loc81 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":104:13)
#loc82 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":89:1)
#loc83 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":89:80)
#loc84 = loc("/usr/include/string.h":149:1)
#loc85 = loc("/usr/include/string.h":150:14)
#loc86 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":98:18)
#loc87 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":91:1)
#loc88 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":100:1)
#loc89 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":93:5)
#loc90 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":93:12)
#loc91 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":94:5)
#loc92 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":94:32)
#loc93 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":95:5)
#loc94 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":95:28)
#loc95 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":96:12)
#loc96 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":96:5)
#loc97 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":98:5)
#loc98 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":98:12)
#loc99 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":99:5)
#loc100 = loc("CWE78_OS_Command_Injection__char_console_execl_65a.c":99:13)
#loc101 = loc(fused[#loc1, #loc2])
#loc102 = loc(fused[#loc3, #loc4])
#loc103 = loc(fused[#loc5, #loc6])
#loc104 = loc(fused[#loc7, #loc8])
#loc105 = loc(fused[#loc9, #loc10])
#loc106 = loc(fused[#loc12, #loc13])
#loc107 = loc(fused[#loc14, #loc15])
#loc108 = loc(fused[#loc16, #loc17])
#loc109 = loc(fused[#loc18, #loc19])
#loc110 = loc(fused[#loc21, #loc20])
#loc111 = loc(fused[#loc22, #loc23])
#loc112 = loc(fused[#loc24, #loc25])
#loc113 = loc(fused[#loc28, #loc29])
#loc114 = loc(fused[#loc30, #loc31])
#loc115 = loc(fused[#loc30, #loc32])
#loc116 = loc(fused[#loc34, #loc29])
#loc117 = loc(fused[#loc35, #loc36])
#loc118 = loc(fused[#loc40, #loc41])
#loc119 = loc(fused[#loc43, #loc44])
#loc120 = loc(fused[#loc46, #loc47, #loc48, #loc36])
#loc121 = loc(fused[#loc51, #loc52])
#loc122 = loc(fused[#loc53, #loc54])
#loc123 = loc(fused[#loc55, #loc56])
#loc124 = loc(fused[#loc60, #loc61])
#loc125 = loc(fused[#loc59, #loc63])
#loc126 = loc(fused[#loc65, #loc54])
#loc127 = loc(fused[#loc68, #loc69])
#loc128 = loc(fused[#loc67, #loc66])
#loc129 = loc(fused[#loc73, #loc72])
#loc130 = loc(fused[#loc78, #loc79])
#loc131 = loc(fused[#loc80, #loc81])
#loc132 = loc(fused[#loc82, #loc83])
#loc133 = loc(fused[#loc84, #loc85])
#loc134 = loc(fused[#loc87, #loc88])
#loc135 = loc(fused[#loc89, #loc90])
#loc136 = loc(fused[#loc91, #loc92])
#loc137 = loc(fused[#loc93, #loc94])
#loc138 = loc(fused[#loc96, #loc95])
