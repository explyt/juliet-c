!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc140)
  cir.func private @printLongLongLine(!s64i) loc(#loc141)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_square_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc143)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc144)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc145)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc12)
    cir.store %3, %2 : !s64i, !cir.ptr<!s64i> loc(#loc146)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc16)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc148)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc18)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc19)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc149)
        cir.condition(%7) loc(#loc20)
      } body {
        cir.scope {
          %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc22)
          %7 = cir.binop(and, %5, %6) : !s32i loc(#loc22)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc22)
          %9 = cir.ternary(%8, true {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc22)
            %13 = cir.const #cir.int<60> : !s32i loc(#loc22)
            %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc22)
            %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc22)
            %17 = cir.const #cir.int<45> : !s32i loc(#loc22)
            %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc22)
            %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc22)
            %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc22)
            %22 = cir.const #cir.int<30> : !s32i loc(#loc22)
            %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc22)
            %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc22)
            %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc22)
            %27 = cir.const #cir.int<15> : !s32i loc(#loc22)
            %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc22)
            %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc22)
            %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc22)
            %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc22)
            cir.yield %32 : !u64i loc(#loc22)
          }, false {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc22)
            %13 = cir.const #cir.int<60> : !s32i loc(#loc22)
            %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc22)
            %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc22)
            %17 = cir.const #cir.int<45> : !s32i loc(#loc22)
            %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc22)
            %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc22)
            %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc22)
            %22 = cir.const #cir.int<30> : !s32i loc(#loc22)
            %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc22)
            %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc22)
            %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc22)
            %27 = cir.const #cir.int<15> : !s32i loc(#loc22)
            %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc22)
            %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc22)
            %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc22)
            %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc22)
            %33 = cir.unary(minus, %32) : !u64i, !u64i loc(#loc22)
            %34 = cir.const #cir.int<1> : !s32i loc(#loc22)
            %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc22)
            %36 = cir.binop(sub, %33, %35) : !u64i loc(#loc22)
            cir.yield %36 : !u64i loc(#loc22)
          }) : (!cir.bool) -> !u64i loc(#loc22)
          %10 = cir.cast(integral, %9 : !u64i), !s64i loc(#loc22)
          cir.store %10, %2 : !s64i, !cir.ptr<!s64i> loc(#loc151)
        } loc(#loc150)
        cir.yield loc(#loc15)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc25)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc152)
        cir.yield loc(#loc147)
      } loc(#loc147)
    } loc(#loc147)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc28)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc154)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc30)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc31)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc155)
        cir.condition(%7) loc(#loc32)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc158)
            %6 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc38)
            %7 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc37)
            %8 = cir.binop(mul, %6, %7) nsw : !s64i loc(#loc38)
            cir.store %8, %5 : !s64i, !cir.ptr<!s64i> loc(#loc158)
            %9 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc39)
            cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc40)
          } loc(#loc157)
        } loc(#loc156)
        cir.yield loc(#loc27)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc41)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc42)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc159)
        cir.yield loc(#loc153)
      } loc(#loc153)
    } loc(#loc153)
    cir.return loc(#loc6)
  } loc(#loc142)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_square_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc161)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc45)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc162)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc47)
    cir.return loc(#loc44)
  } loc(#loc160)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr) loc(#loc163)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc51)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc164)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc54)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc166)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc167)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc168)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc62)
    cir.store %3, %2 : !s64i, !cir.ptr<!s64i> loc(#loc169)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc66)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc171)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc68)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc69)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc172)
        cir.condition(%7) loc(#loc70)
      } body {
        cir.scope {
          %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc72)
          %7 = cir.binop(and, %5, %6) : !s32i loc(#loc72)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc72)
          %9 = cir.ternary(%8, true {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc72)
            %13 = cir.const #cir.int<60> : !s32i loc(#loc72)
            %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc72)
            %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
            %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc72)
            %17 = cir.const #cir.int<45> : !s32i loc(#loc72)
            %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc72)
            %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc72)
            %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
            %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc72)
            %22 = cir.const #cir.int<30> : !s32i loc(#loc72)
            %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc72)
            %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc72)
            %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
            %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc72)
            %27 = cir.const #cir.int<15> : !s32i loc(#loc72)
            %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc72)
            %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc72)
            %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
            %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc72)
            %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc72)
            cir.yield %32 : !u64i loc(#loc72)
          }, false {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc72)
            %13 = cir.const #cir.int<60> : !s32i loc(#loc72)
            %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc72)
            %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
            %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc72)
            %17 = cir.const #cir.int<45> : !s32i loc(#loc72)
            %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc72)
            %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc72)
            %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
            %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc72)
            %22 = cir.const #cir.int<30> : !s32i loc(#loc72)
            %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc72)
            %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc72)
            %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
            %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc72)
            %27 = cir.const #cir.int<15> : !s32i loc(#loc72)
            %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc72)
            %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc72)
            %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
            %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc72)
            %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc72)
            %33 = cir.unary(minus, %32) : !u64i, !u64i loc(#loc72)
            %34 = cir.const #cir.int<1> : !s32i loc(#loc72)
            %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc72)
            %36 = cir.binop(sub, %33, %35) : !u64i loc(#loc72)
            cir.yield %36 : !u64i loc(#loc72)
          }) : (!cir.bool) -> !u64i loc(#loc72)
          %10 = cir.cast(integral, %9 : !u64i), !s64i loc(#loc72)
          cir.store %10, %2 : !s64i, !cir.ptr<!s64i> loc(#loc174)
        } loc(#loc173)
        cir.yield loc(#loc65)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc74)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc75)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc175)
        cir.yield loc(#loc170)
      } loc(#loc170)
    } loc(#loc170)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc78)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc177)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc80)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc81)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc178)
        cir.condition(%7) loc(#loc82)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc86)
            %6 = cir.call @imaxabs(%5) : (!s64i) -> !s64i side_effect(const) extra(#fn_attr) loc(#loc87)
            %7 = cir.cast(int_to_float, %6 : !s64i), !cir.long_double<!cir.f80> loc(#loc87)
            %8 = cir.get_global @sqrtl : !cir.ptr<!cir.func<(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80>>> loc(#loc88)
            %9 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc89)
            %10 = cir.cast(int_to_float, %9 : !s64i), !cir.long_double<!cir.f80> loc(#loc89)
            %11 = cir.call @sqrtl(%10) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc88)
            %12 = cir.cmp(le, %7, %11) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc181)
            cir.if %12 {
              %13 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc183)
              %14 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc96)
              %15 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc95)
              %16 = cir.binop(mul, %14, %15) nsw : !s64i loc(#loc96)
              cir.store %16, %13 : !s64i, !cir.ptr<!s64i> loc(#loc183)
              %17 = cir.load %13 : !cir.ptr<!s64i>, !s64i loc(#loc97)
              cir.call @printLongLongLine(%17) : (!s64i) -> () loc(#loc98)
            } else {
              %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc54)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc54)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc99)
            } loc(#loc182)
          } loc(#loc180)
        } loc(#loc179)
        cir.yield loc(#loc77)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc100)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc101)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc184)
        cir.yield loc(#loc176)
      } loc(#loc176)
    } loc(#loc176)
    cir.return loc(#loc56)
  } loc(#loc165)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc186)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc187)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc188)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc109)
    cir.store %3, %2 : !s64i, !cir.ptr<!s64i> loc(#loc189)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc113)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc191)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc115)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc116)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc192)
        cir.condition(%7) loc(#loc117)
      } body {
        cir.scope {
          %5 = cir.const #cir.int<2> : !s32i loc(#loc119)
          %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc119)
          cir.store %6, %2 : !s64i, !cir.ptr<!s64i> loc(#loc194)
        } loc(#loc193)
        cir.yield loc(#loc112)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc121)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc122)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc195)
        cir.yield loc(#loc190)
      } loc(#loc190)
    } loc(#loc190)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc125)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc197)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc127)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc128)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc198)
        cir.condition(%7) loc(#loc129)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc201)
            %6 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc135)
            %7 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc134)
            %8 = cir.binop(mul, %6, %7) nsw : !s64i loc(#loc135)
            cir.store %8, %5 : !s64i, !cir.ptr<!s64i> loc(#loc201)
            %9 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc136)
            cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc137)
          } loc(#loc200)
        } loc(#loc199)
        cir.yield loc(#loc124)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc138)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc139)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc202)
        cir.yield loc(#loc196)
      } loc(#loc196)
    } loc(#loc196)
    cir.return loc(#loc103)
  } loc(#loc185)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":25:1)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":43:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":27:5)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":27:9)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":27:11)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":28:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":28:13)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":29:12)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":29:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":30:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":34:5)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":30:13)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":30:9)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":30:16)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":30:20)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":30:18)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":31:5)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":33:25)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":33:9)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":30:24)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":30:23)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":35:5)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":42:5)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":35:13)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":35:9)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":35:16)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":35:20)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":35:18)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":36:5)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":37:9)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":41:9)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":39:13)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":39:37)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":39:30)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":40:31)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":40:13)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":35:24)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":35:23)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":96:1)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":100:1)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":98:5)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":98:13)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":99:5)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":99:13)
#loc49 = loc("/usr/include/inttypes.h":351:1)
#loc50 = loc("/usr/include/inttypes.h":351:74)
#loc51 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":70:23)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":50:1)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":73:1)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":52:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":52:9)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":52:11)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":53:5)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":53:13)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":54:12)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":54:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":55:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":59:5)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":55:13)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":55:9)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":55:16)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":55:20)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":55:18)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":56:5)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":58:25)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":58:9)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":55:24)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":55:23)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":60:5)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":72:5)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":60:13)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":60:9)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":60:16)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":60:20)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":60:18)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":61:5)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":63:9)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":71:9)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":63:31)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":63:13)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":63:40)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":63:46)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":63:55)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":64:9)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":67:9)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":69:9)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":65:13)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":65:37)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":65:30)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":66:31)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":66:13)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":70:13)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":60:24)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":60:23)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":76:1)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":94:1)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":78:5)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":78:9)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":78:11)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":79:5)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":79:13)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":80:12)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":80:5)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":81:5)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":85:5)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":81:13)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":81:9)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":81:16)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":81:20)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":81:18)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":82:5)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":84:16)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":84:9)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":81:24)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":81:23)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":86:5)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":93:5)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":86:13)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":86:9)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":86:16)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":86:20)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":86:18)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":87:5)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":88:9)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":92:9)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":90:13)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":90:37)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":90:30)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":91:31)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":91:13)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":86:24)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_rand_square_17.c":86:23)
#loc140 = loc(fused[#loc1, #loc2])
#loc141 = loc(fused[#loc3, #loc4])
#loc142 = loc(fused[#loc5, #loc6])
#loc143 = loc(fused[#loc7, #loc8])
#loc144 = loc(fused[#loc7, #loc9])
#loc145 = loc(fused[#loc10, #loc11])
#loc146 = loc(fused[#loc13, #loc12])
#loc147 = loc(fused[#loc14, #loc15])
#loc148 = loc(fused[#loc17, #loc16])
#loc149 = loc(fused[#loc18, #loc19])
#loc150 = loc(fused[#loc21, #loc15])
#loc151 = loc(fused[#loc23, #loc22])
#loc152 = loc(fused[#loc25, #loc24])
#loc153 = loc(fused[#loc26, #loc27])
#loc154 = loc(fused[#loc29, #loc28])
#loc155 = loc(fused[#loc30, #loc31])
#loc156 = loc(fused[#loc33, #loc27])
#loc157 = loc(fused[#loc34, #loc35])
#loc158 = loc(fused[#loc36, #loc37])
#loc159 = loc(fused[#loc42, #loc41])
#loc160 = loc(fused[#loc43, #loc44])
#loc161 = loc(fused[#loc45, #loc46])
#loc162 = loc(fused[#loc47, #loc48])
#loc163 = loc(fused[#loc49, #loc50])
#loc164 = loc(fused[#loc52, #loc53])
#loc165 = loc(fused[#loc55, #loc56])
#loc166 = loc(fused[#loc57, #loc58])
#loc167 = loc(fused[#loc57, #loc59])
#loc168 = loc(fused[#loc60, #loc61])
#loc169 = loc(fused[#loc63, #loc62])
#loc170 = loc(fused[#loc64, #loc65])
#loc171 = loc(fused[#loc67, #loc66])
#loc172 = loc(fused[#loc68, #loc69])
#loc173 = loc(fused[#loc71, #loc65])
#loc174 = loc(fused[#loc73, #loc72])
#loc175 = loc(fused[#loc75, #loc74])
#loc176 = loc(fused[#loc76, #loc77])
#loc177 = loc(fused[#loc79, #loc78])
#loc178 = loc(fused[#loc80, #loc81])
#loc179 = loc(fused[#loc83, #loc77])
#loc180 = loc(fused[#loc84, #loc85])
#loc181 = loc(fused[#loc87, #loc90])
#loc182 = loc(fused[#loc91, #loc92, #loc93, #loc85])
#loc183 = loc(fused[#loc94, #loc95])
#loc184 = loc(fused[#loc101, #loc100])
#loc185 = loc(fused[#loc102, #loc103])
#loc186 = loc(fused[#loc104, #loc105])
#loc187 = loc(fused[#loc104, #loc106])
#loc188 = loc(fused[#loc107, #loc108])
#loc189 = loc(fused[#loc110, #loc109])
#loc190 = loc(fused[#loc111, #loc112])
#loc191 = loc(fused[#loc114, #loc113])
#loc192 = loc(fused[#loc115, #loc116])
#loc193 = loc(fused[#loc118, #loc112])
#loc194 = loc(fused[#loc120, #loc119])
#loc195 = loc(fused[#loc122, #loc121])
#loc196 = loc(fused[#loc123, #loc124])
#loc197 = loc(fused[#loc126, #loc125])
#loc198 = loc(fused[#loc127, #loc128])
#loc199 = loc(fused[#loc130, #loc124])
#loc200 = loc(fused[#loc131, #loc132])
#loc201 = loc(fused[#loc133, #loc134])
#loc202 = loc(fused[#loc139, #loc138])
