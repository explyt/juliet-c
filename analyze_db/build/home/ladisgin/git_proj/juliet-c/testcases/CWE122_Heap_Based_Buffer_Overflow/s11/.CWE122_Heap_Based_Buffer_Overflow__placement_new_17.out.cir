!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc5 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc78 = loc("../../../testcasesupport/std_testcase.h":68:7)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":143:10)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":143:14)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":143:20)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":143:32)
!ty_OneIntClass = !cir.struct<class "OneIntClass" {!s32i} #cir.record.decl.ast>
!ty_TwoIntsClass = !cir.struct<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
#loc340 = loc(fused[#loc226, #loc227])
#loc341 = loc(fused[#loc228, #loc229])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc242)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc243)
  cir.func linkonce_odr @_ZN12TwoIntsClassC2Ev(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc5)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc5)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc5)
    cir.return loc(#loc5)
  } loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc244)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc245)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_173badEv() extra(#fn_attr2) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc247)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc248)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc249)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc250)
    %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc251)
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc21)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc252)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc253)
    cir.store %8, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc250)
    cir.scope {
      %13 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc26)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc27)
      %15 = cir.cmp(eq, %13, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc255)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc29)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc30)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc31)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc29)
      } loc(#loc256)
    } loc(#loc254)
    %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc32)
    %10 = cir.const #cir.int<8> : !u64i loc(#loc257)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc32)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc258)
    cir.store %12, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc251)
    cir.scope {
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc38)
      %15 = cir.cmp(eq, %13, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc260)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc40)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc41)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc42)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc40)
      } loc(#loc261)
    } loc(#loc259)
    cir.scope {
      %13 = cir.const #cir.int<0> : !s32i loc(#loc45)
      cir.store %13, %0 : !s32i, !cir.ptr<!s32i> loc(#loc263)
      cir.for : cond {
        %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc47)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc48)
        %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc264)
        cir.condition(%16) loc(#loc264)
      } body {
        %14 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
        cir.store %14, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc265)
        cir.yield loc(#loc44)
      } step {
        %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
        %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc52)
        cir.store %15, %0 : !s32i, !cir.ptr<!s32i> loc(#loc266)
        cir.yield loc(#loc262)
      } loc(#loc262)
    } loc(#loc262)
    cir.scope {
      %13 = cir.const #cir.int<0> : !s32i loc(#loc55)
      cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc268)
      cir.for : cond {
        %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc57)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc58)
        %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc269)
        cir.condition(%16) loc(#loc269)
      } body {
        cir.scope {
          %14 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc271)
          %15 = cir.const #cir.int<8> : !u64i loc(#loc272)
          %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc64)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc272)
          cir.call @_ZN12TwoIntsClassC2Ev(%18) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc62)
          cir.store %18, %14 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc271)
          %19 = cir.const #cir.int<5> : !s32i loc(#loc65)
          %20 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc66)
          %21 = cir.get_member %20[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc67)
          cir.store %19, %21 : !s32i, !cir.ptr<!s32i> loc(#loc273)
          %22 = cir.const #cir.int<10> : !s32i loc(#loc68)
          %23 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc69)
          %24 = cir.get_member %23[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc70)
          cir.store %22, %24 : !s32i, !cir.ptr<!s32i> loc(#loc274)
          %25 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc71)
          %26 = cir.get_member %25[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc67)
          %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc72)
          cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc73)
          %28 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc74)
          %29 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc75)
          %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc75)
          cir.call @free(%30) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc74)
        } loc(#loc270)
        cir.yield loc(#loc54)
      } step {
        %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc76)
        %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc77)
        cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc275)
        cir.yield loc(#loc267)
      } loc(#loc267)
    } loc(#loc267)
    cir.return loc(#loc11)
  } loc(#loc246)
  cir.func linkonce_odr @_ZN11OneIntClassC2Ev(%arg0: !cir.ptr<!ty_OneIntClass> loc("../../../testcasesupport/std_testcase.h":68:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["this", init] {alignment = 8 : i64} loc(#loc78)
    cir.store %arg0, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc78)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc78)
    cir.return loc(#loc78)
  } loc(#loc78)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_17L7goodB2GEv() extra(#fn_attr2) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc277)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc278)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc279)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc280)
    %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc281)
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc90)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc282)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc90)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc283)
    cir.store %8, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc280)
    cir.scope {
      %13 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc95)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc96)
      %15 = cir.cmp(eq, %13, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc285)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc98)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc99)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc100)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc98)
      } loc(#loc286)
    } loc(#loc284)
    %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc101)
    %10 = cir.const #cir.int<8> : !u64i loc(#loc287)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc101)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc288)
    cir.store %12, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc281)
    cir.scope {
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc106)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc107)
      %15 = cir.cmp(eq, %13, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc290)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc109)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc110)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc111)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc109)
      } loc(#loc291)
    } loc(#loc289)
    cir.scope {
      %13 = cir.const #cir.int<0> : !s32i loc(#loc114)
      cir.store %13, %0 : !s32i, !cir.ptr<!s32i> loc(#loc293)
      cir.for : cond {
        %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc117)
        %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc294)
        cir.condition(%16) loc(#loc294)
      } body {
        %14 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc118)
        cir.store %14, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc295)
        cir.yield loc(#loc113)
      } step {
        %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc120)
        %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc121)
        cir.store %15, %0 : !s32i, !cir.ptr<!s32i> loc(#loc296)
        cir.yield loc(#loc292)
      } loc(#loc292)
    } loc(#loc292)
    cir.scope {
      %13 = cir.const #cir.int<0> : !s32i loc(#loc124)
      cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc298)
      cir.for : cond {
        %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc126)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc127)
        %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc299)
        cir.condition(%16) loc(#loc299)
      } body {
        cir.scope {
          %14 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc301)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc302)
          %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc133)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc133)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc302)
          cir.call @_ZN11OneIntClassC2Ev(%18) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc131)
          cir.store %18, %14 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc301)
          %19 = cir.const #cir.int<5> : !s32i loc(#loc134)
          %20 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc135)
          %21 = cir.get_member %20[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc136)
          cir.store %19, %21 : !s32i, !cir.ptr<!s32i> loc(#loc303)
          %22 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc137)
          %23 = cir.get_member %22[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc136)
          %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc138)
          cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc139)
          %25 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc140)
          %26 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc141)
          %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc141)
          cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc140)
        } loc(#loc300)
        cir.yield loc(#loc123)
      } step {
        %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc142)
        %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc143)
        cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc304)
        cir.yield loc(#loc297)
      } loc(#loc297)
    } loc(#loc297)
    cir.return loc(#loc80)
  } loc(#loc276)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_17L7goodG2BEv() extra(#fn_attr2) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc306)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc307)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc308)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc309)
    %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc310)
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc155)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc311)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc155)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc312)
    cir.store %8, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc309)
    cir.scope {
      %13 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc160)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc161)
      %15 = cir.cmp(eq, %13, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc314)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc163)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc164)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc165)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc163)
      } loc(#loc315)
    } loc(#loc313)
    %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc166)
    %10 = cir.const #cir.int<8> : !u64i loc(#loc316)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc166)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc317)
    cir.store %12, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc310)
    cir.scope {
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc171)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc172)
      %15 = cir.cmp(eq, %13, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc319)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc174)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc175)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc176)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc174)
      } loc(#loc320)
    } loc(#loc318)
    cir.scope {
      %13 = cir.const #cir.int<0> : !s32i loc(#loc179)
      cir.store %13, %0 : !s32i, !cir.ptr<!s32i> loc(#loc322)
      cir.for : cond {
        %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc181)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc182)
        %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc323)
        cir.condition(%16) loc(#loc323)
      } body {
        %14 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc183)
        cir.store %14, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc324)
        cir.yield loc(#loc178)
      } step {
        %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc185)
        %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc186)
        cir.store %15, %0 : !s32i, !cir.ptr<!s32i> loc(#loc325)
        cir.yield loc(#loc321)
      } loc(#loc321)
    } loc(#loc321)
    cir.scope {
      %13 = cir.const #cir.int<0> : !s32i loc(#loc189)
      cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc327)
      cir.for : cond {
        %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc191)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc192)
        %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc328)
        cir.condition(%16) loc(#loc328)
      } body {
        cir.scope {
          %14 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc330)
          %15 = cir.const #cir.int<8> : !u64i loc(#loc331)
          %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc198)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc198)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc331)
          cir.call @_ZN12TwoIntsClassC2Ev(%18) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc196)
          cir.store %18, %14 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc330)
          %19 = cir.const #cir.int<5> : !s32i loc(#loc199)
          %20 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc200)
          %21 = cir.get_member %20[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc67)
          cir.store %19, %21 : !s32i, !cir.ptr<!s32i> loc(#loc332)
          %22 = cir.const #cir.int<10> : !s32i loc(#loc201)
          %23 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc202)
          %24 = cir.get_member %23[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc70)
          cir.store %22, %24 : !s32i, !cir.ptr<!s32i> loc(#loc333)
          %25 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc203)
          %26 = cir.get_member %25[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc67)
          %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc204)
          cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc205)
          %28 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc206)
          %29 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc207)
          %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc207)
          cir.call @free(%30) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc206)
        } loc(#loc329)
        cir.yield loc(#loc188)
      } step {
        %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc208)
        %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc209)
        cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc334)
        cir.yield loc(#loc326)
      } loc(#loc326)
    } loc(#loc326)
    cir.return loc(#loc145)
  } loc(#loc305)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_174goodEv() extra(#fn_attr2) {
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_17L7goodB2GEv() : () -> () loc(#loc212)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_17L7goodG2BEv() : () -> () loc(#loc213)
    cir.return loc(#loc211)
  } loc(#loc335)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc336)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc337)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc338)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc220)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc221)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc222)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc223)
  cir.func @main(%arg0: !s32i loc(fused[#loc226, #loc227]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc228, #loc229])) -> !s32i extra(#fn_attr2) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc340)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc341)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc225)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc230)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc230)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc231)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc232)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc232)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc233)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc220)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc220)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc234)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_174goodEv() : () -> () loc(#loc235)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc221)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc221)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc236)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc222)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc222)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc237)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_173badEv() : () -> () loc(#loc238)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc223)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc223)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc239)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc240)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc342)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc342)
    cir.return %15 : !s32i loc(#loc342)
  } loc(#loc339)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("/usr/include/stdlib.h":687:1)
#loc9 = loc("/usr/include/stdlib.h":687:32)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":24:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":54:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":26:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":26:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":26:11)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":27:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":27:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":28:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":28:62)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":30:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":30:64)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":28:36)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":28:43)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":28:61)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":29:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":29:42)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":29:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":29:26)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":29:32)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":29:33)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":29:39)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":29:38)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":30:37)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":30:44)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":30:63)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":31:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":31:43)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":31:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":31:27)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":31:33)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":31:34)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":31:40)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":31:39)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":32:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":36:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":32:13)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":32:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":32:16)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":32:20)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":35:16)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":35:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":32:24)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":32:23)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":37:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":53:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":37:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":37:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":37:16)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":37:20)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":39:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":52:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":45:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":45:49)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":45:39)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":45:43)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":47:32)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":47:13)
#loc67 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":48:32)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":48:13)
#loc70 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":49:26)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":49:36)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":49:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":51:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":51:18)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":37:24)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":37:23)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":61:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":89:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":63:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":63:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":63:11)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":64:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":64:12)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":65:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":65:62)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":67:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":67:64)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":65:36)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":65:43)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":65:61)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":66:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":66:42)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":66:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":66:26)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":66:32)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":66:33)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":66:39)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":66:38)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":67:37)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":67:44)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":67:63)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":68:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":68:43)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":68:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":68:27)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":68:33)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":68:34)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":68:40)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":68:39)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":69:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":73:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":69:13)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":69:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":69:16)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":69:20)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":72:16)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":72:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":69:24)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":69:23)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":74:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":88:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":74:13)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":74:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":74:16)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":74:20)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":76:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":87:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":82:13)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":82:48)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":82:38)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":82:42)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":84:32)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":84:13)
#loc136 = loc("../../../testcasesupport/std_testcase.h":71:13)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":85:26)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":85:36)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":85:13)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":86:13)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":86:18)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":74:24)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":74:23)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":92:1)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":122:1)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":94:5)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":94:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":94:11)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":95:5)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":95:12)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":96:5)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":96:62)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":98:5)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":98:64)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":96:36)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":96:43)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":96:61)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":97:5)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":97:42)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":97:9)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":97:26)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":97:32)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":97:33)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":97:39)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":97:38)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":98:37)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":98:44)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":98:63)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":99:5)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":99:43)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":99:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":99:27)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":99:33)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":99:34)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":99:40)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":99:39)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":100:5)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":104:5)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":100:13)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":100:9)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":100:16)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":100:20)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":103:16)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":103:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":100:24)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":100:23)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":105:5)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":121:5)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":105:13)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":105:9)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":105:16)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":105:20)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":107:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":120:9)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":113:13)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":113:49)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":113:39)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":113:43)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":115:32)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":115:13)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":116:32)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":116:13)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":117:26)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":117:36)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":117:13)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":119:13)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":119:18)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":105:24)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":105:23)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":124:1)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":128:1)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":126:5)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":127:5)
#loc214 = loc("/usr/include/stdlib.h":575:1)
#loc215 = loc("/usr/include/stdlib.h":575:41)
#loc216 = loc("/usr/include/time.h":76:1)
#loc217 = loc("/usr/include/time.h":76:38)
#loc218 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc219 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":148:15)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":150:15)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":153:15)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":155:15)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":143:1)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":158:1)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":144:1)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":146:27)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":146:22)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":146:5)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":148:5)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":149:5)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":150:5)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":153:5)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":154:5)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":155:5)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":157:12)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_17.cpp":157:5)
#loc242 = loc(fused[#loc1, #loc2])
#loc243 = loc(fused[#loc3, #loc4])
#loc244 = loc(fused[#loc6, #loc7])
#loc245 = loc(fused[#loc8, #loc9])
#loc246 = loc(fused[#loc10, #loc11])
#loc247 = loc(fused[#loc12, #loc13])
#loc248 = loc(fused[#loc12, #loc14])
#loc249 = loc(fused[#loc15, #loc16])
#loc250 = loc(fused[#loc17, #loc18])
#loc251 = loc(fused[#loc19, #loc20])
#loc252 = loc(fused[#loc22, #loc23])
#loc253 = loc(fused[#loc21, #loc18])
#loc254 = loc(fused[#loc24, #loc25])
#loc255 = loc(fused[#loc26, #loc27])
#loc256 = loc(fused[#loc28, #loc25])
#loc257 = loc(fused[#loc33, #loc34])
#loc258 = loc(fused[#loc32, #loc20])
#loc259 = loc(fused[#loc35, #loc36])
#loc260 = loc(fused[#loc37, #loc38])
#loc261 = loc(fused[#loc39, #loc36])
#loc262 = loc(fused[#loc43, #loc44])
#loc263 = loc(fused[#loc46, #loc45])
#loc264 = loc(fused[#loc47, #loc48])
#loc265 = loc(fused[#loc50, #loc49])
#loc266 = loc(fused[#loc52, #loc51])
#loc267 = loc(fused[#loc53, #loc54])
#loc268 = loc(fused[#loc56, #loc55])
#loc269 = loc(fused[#loc57, #loc58])
#loc270 = loc(fused[#loc59, #loc60])
#loc271 = loc(fused[#loc61, #loc62])
#loc272 = loc(fused[#loc63, #loc62])
#loc273 = loc(fused[#loc66, #loc65])
#loc274 = loc(fused[#loc69, #loc68])
#loc275 = loc(fused[#loc77, #loc76])
#loc276 = loc(fused[#loc79, #loc80])
#loc277 = loc(fused[#loc81, #loc82])
#loc278 = loc(fused[#loc81, #loc83])
#loc279 = loc(fused[#loc84, #loc85])
#loc280 = loc(fused[#loc86, #loc87])
#loc281 = loc(fused[#loc88, #loc89])
#loc282 = loc(fused[#loc91, #loc92])
#loc283 = loc(fused[#loc90, #loc87])
#loc284 = loc(fused[#loc93, #loc94])
#loc285 = loc(fused[#loc95, #loc96])
#loc286 = loc(fused[#loc97, #loc94])
#loc287 = loc(fused[#loc102, #loc103])
#loc288 = loc(fused[#loc101, #loc89])
#loc289 = loc(fused[#loc104, #loc105])
#loc290 = loc(fused[#loc106, #loc107])
#loc291 = loc(fused[#loc108, #loc105])
#loc292 = loc(fused[#loc112, #loc113])
#loc293 = loc(fused[#loc115, #loc114])
#loc294 = loc(fused[#loc116, #loc117])
#loc295 = loc(fused[#loc119, #loc118])
#loc296 = loc(fused[#loc121, #loc120])
#loc297 = loc(fused[#loc122, #loc123])
#loc298 = loc(fused[#loc125, #loc124])
#loc299 = loc(fused[#loc126, #loc127])
#loc300 = loc(fused[#loc128, #loc129])
#loc301 = loc(fused[#loc130, #loc131])
#loc302 = loc(fused[#loc132, #loc131])
#loc303 = loc(fused[#loc135, #loc134])
#loc304 = loc(fused[#loc143, #loc142])
#loc305 = loc(fused[#loc144, #loc145])
#loc306 = loc(fused[#loc146, #loc147])
#loc307 = loc(fused[#loc146, #loc148])
#loc308 = loc(fused[#loc149, #loc150])
#loc309 = loc(fused[#loc151, #loc152])
#loc310 = loc(fused[#loc153, #loc154])
#loc311 = loc(fused[#loc156, #loc157])
#loc312 = loc(fused[#loc155, #loc152])
#loc313 = loc(fused[#loc158, #loc159])
#loc314 = loc(fused[#loc160, #loc161])
#loc315 = loc(fused[#loc162, #loc159])
#loc316 = loc(fused[#loc167, #loc168])
#loc317 = loc(fused[#loc166, #loc154])
#loc318 = loc(fused[#loc169, #loc170])
#loc319 = loc(fused[#loc171, #loc172])
#loc320 = loc(fused[#loc173, #loc170])
#loc321 = loc(fused[#loc177, #loc178])
#loc322 = loc(fused[#loc180, #loc179])
#loc323 = loc(fused[#loc181, #loc182])
#loc324 = loc(fused[#loc184, #loc183])
#loc325 = loc(fused[#loc186, #loc185])
#loc326 = loc(fused[#loc187, #loc188])
#loc327 = loc(fused[#loc190, #loc189])
#loc328 = loc(fused[#loc191, #loc192])
#loc329 = loc(fused[#loc193, #loc194])
#loc330 = loc(fused[#loc195, #loc196])
#loc331 = loc(fused[#loc197, #loc196])
#loc332 = loc(fused[#loc200, #loc199])
#loc333 = loc(fused[#loc202, #loc201])
#loc334 = loc(fused[#loc209, #loc208])
#loc335 = loc(fused[#loc210, #loc211])
#loc336 = loc(fused[#loc214, #loc215])
#loc337 = loc(fused[#loc216, #loc217])
#loc338 = loc(fused[#loc218, #loc219])
#loc339 = loc(fused[#loc224, #loc225])
#loc342 = loc(fused[#loc241, #loc240])
