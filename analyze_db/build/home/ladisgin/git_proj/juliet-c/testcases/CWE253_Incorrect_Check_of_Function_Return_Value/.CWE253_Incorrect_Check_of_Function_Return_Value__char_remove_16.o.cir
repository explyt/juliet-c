!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @remove(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"removemebad.txt\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc3)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"remove failed!\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16_bad() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc40)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc40)
  ^bb2:  // pred: ^bb1
    %0 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc11)
    cir.brcond %1 ^bb3, ^bb8 loc(#loc11)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc41)
  ^bb4:  // pred: ^bb3
    %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc3)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc3)
    %4 = cir.call @remove(%3) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc14)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc15)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc42)
    cir.brcond %6 ^bb5, ^bb6 loc(#loc43)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc6)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc6)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc17)
    cir.br ^bb6 loc(#loc13)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc13)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc18)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc10)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc8)
  } loc(#loc39)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc45)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc21)
    cir.return loc(#loc20)
  } loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"removemegood.txt\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc23)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc47)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc47)
  ^bb2:  // pred: ^bb1
    %0 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc28)
    cir.brcond %1 ^bb3, ^bb8 loc(#loc28)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc48)
  ^bb4:  // pred: ^bb3
    %2 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc23)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc23)
    %4 = cir.call @remove(%3) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc31)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc32)
    %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc49)
    cir.brcond %6 ^bb5, ^bb6 loc(#loc50)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc34)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc35)
    cir.br ^bb6 loc(#loc30)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc30)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc36)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc27)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc25)
  } loc(#loc46)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":158:1)
#loc2 = loc("/usr/include/stdio.h":158:44)
#loc3 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":36:20)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc6 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":38:23)
#loc7 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":30:1)
#loc8 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":42:1)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":32:5)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":41:5)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":32:11)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":36:9)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":39:9)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":36:13)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":36:42)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":37:9)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":38:13)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":40:9)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":62:1)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":65:1)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":64:5)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":64:11)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":54:20)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":49:1)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":60:1)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":51:5)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":59:5)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":51:11)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":54:9)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":57:9)
#loc31 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":54:13)
#loc32 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":54:43)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":55:9)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":56:23)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":56:13)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_16.c":58:9)
#loc37 = loc(fused[#loc1, #loc2])
#loc38 = loc(fused[#loc4, #loc5])
#loc39 = loc(fused[#loc7, #loc8])
#loc40 = loc(fused[#loc9, #loc10])
#loc41 = loc(fused[#loc12, #loc13])
#loc42 = loc(fused[#loc14, #loc15])
#loc43 = loc(fused[#loc16, #loc13])
#loc44 = loc(fused[#loc19, #loc20])
#loc45 = loc(fused[#loc21, #loc22])
#loc46 = loc(fused[#loc24, #loc25])
#loc47 = loc(fused[#loc26, #loc27])
#loc48 = loc(fused[#loc29, #loc30])
#loc49 = loc(fused[#loc31, #loc32])
#loc50 = loc(fused[#loc33, #loc30])
