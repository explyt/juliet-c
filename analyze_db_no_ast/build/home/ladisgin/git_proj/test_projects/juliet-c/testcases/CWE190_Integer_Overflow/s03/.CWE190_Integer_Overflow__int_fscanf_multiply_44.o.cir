!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":22:21)
#loc6 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":22:25)
#loc44 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":50:25)
#loc45 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":50:29)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":72:25)
#loc76 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":72:29)
#loc115 = loc(fused[#loc5, #loc6])
#loc130 = loc(fused[#loc44, #loc45])
#loc142 = loc(fused[#loc75, #loc76])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_multiply_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc113)
  cir.func internal private  @badSink(%arg0: !s32i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc115)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
      %3 = cir.cmp(gt, %1, %2) : !s32i, !s32i loc(#loc117)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc12)
      cir.if %4 {
        %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc119)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
        %7 = cir.const #cir.int<2> : !s32i loc(#loc15)
        %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc16)
        cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc119)
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc17)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc18)
      } loc(#loc118)
    } loc(#loc116)
    cir.return loc(#loc4)
  } loc(#loc114)
  cir.func private  @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc120)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc121)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc23)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fscanf_multiply_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc123)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc124)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc29)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc124)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc30)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc32)
    %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc121)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc33)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc23)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc23)
    %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc32)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc34)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc35)
    cir.call %10(%11) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc34)
    cir.return loc(#loc25)
  } loc(#loc122)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fscanf_multiply_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc127)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc128)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    cir.return loc(#loc37)
  } loc(#loc126)
  cir.func internal private  @goodG2BSink(%arg0: !s32i loc(fused[#loc44, #loc45])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc130)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc46)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc50)
      %3 = cir.cmp(gt, %1, %2) : !s32i, !s32i loc(#loc132)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc51)
      cir.if %4 {
        %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc134)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc55)
        %7 = cir.const #cir.int<2> : !s32i loc(#loc54)
        %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc55)
        cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc134)
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc56)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc57)
      } loc(#loc133)
    } loc(#loc131)
    cir.return loc(#loc43)
  } loc(#loc129)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc136)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc137)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc63)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc137)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc64)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc138)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc66)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc139)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc68)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
    cir.call %5(%6) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc68)
    cir.return loc(#loc59)
  } loc(#loc135)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc140)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc72)
  cir.func internal private  @goodB2GSink(%arg0: !s32i loc(fused[#loc75, #loc76])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc142)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc77)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc80)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc81)
      %3 = cir.cmp(gt, %1, %2) : !s32i, !s32i loc(#loc144)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc82)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc87)
          %7 = cir.const #cir.int<2> : !s32i loc(#loc88)
          %8 = cir.binop(div, %6, %7) : !s32i loc(#loc147)
          %9 = cir.cmp(lt, %5, %8) : !s32i, !s32i loc(#loc148)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc90)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc150)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc96)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc95)
            %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc96)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc150)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc97)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc98)
          } else {
            %11 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc72)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc72)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc99)
          } loc(#loc149)
        } loc(#loc146)
      } loc(#loc145)
    } loc(#loc143)
    cir.return loc(#loc74)
  } loc(#loc141)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc152)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc153)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc105)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc153)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc106)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc154)
    %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc108)
    %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc121)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc109)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc110)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc110)
    %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc108)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc111)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc112)
    cir.call %10(%11) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc111)
    cir.return loc(#loc101)
  } loc(#loc151)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_multiply_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":30:1)
#loc7 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":23:1)
#loc8 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":24:5)
#loc9 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":29:5)
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":24:8)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":24:15)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":24:13)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":25:5)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":27:9)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":27:29)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":27:22)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":28:22)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":28:9)
#loc19 = loc("/usr/include/stdio.h":463:1)
#loc20 = loc("/usr/include/stdio.h":465:33)
#loc21 = loc("/usr/include/stdio.h":149:1)
#loc22 = loc("/usr/include/stdio.h":149:14)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":40:19)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":32:1)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":43:1)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":34:5)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":34:9)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":36:5)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":36:29)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":38:12)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":38:5)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":40:5)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":40:12)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":42:5)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":42:13)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":100:1)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":104:1)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":102:5)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":102:13)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":103:5)
#loc41 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":103:13)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":50:1)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":58:1)
#loc46 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":51:1)
#loc47 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":52:5)
#loc48 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":57:5)
#loc49 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":52:8)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":52:15)
#loc51 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":52:13)
#loc52 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":53:5)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":55:9)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":55:29)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":55:22)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":56:22)
#loc57 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":56:9)
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":60:1)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":69:1)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":62:5)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":62:9)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":63:5)
#loc63 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":63:29)
#loc64 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":65:12)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":65:5)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":67:12)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":67:5)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":68:5)
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":68:13)
#loc70 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc71 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":84:23)
#loc73 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":72:1)
#loc74 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":87:1)
#loc77 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":73:1)
#loc78 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":74:5)
#loc79 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":86:5)
#loc80 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":74:8)
#loc81 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":74:15)
#loc82 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":74:13)
#loc83 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":75:5)
#loc84 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":77:9)
#loc85 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":85:9)
#loc86 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":77:13)
#loc87 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":77:21)
#loc88 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":77:29)
#loc89 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":77:30)
#loc90 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":77:18)
#loc91 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":78:9)
#loc92 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":81:9)
#loc93 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":83:9)
#loc94 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":79:13)
#loc95 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":79:33)
#loc96 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":79:26)
#loc97 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":80:26)
#loc98 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":80:13)
#loc99 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":84:13)
#loc100 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":89:1)
#loc101 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":98:1)
#loc102 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":91:5)
#loc103 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":91:9)
#loc104 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":92:5)
#loc105 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":92:29)
#loc106 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":94:12)
#loc107 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":94:5)
#loc108 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":96:5)
#loc109 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":96:12)
#loc110 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":96:19)
#loc111 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":97:5)
#loc112 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_44.c":97:13)
#loc113 = loc(fused[#loc1, #loc2])
#loc114 = loc(fused[#loc3, #loc4])
#loc116 = loc(fused[#loc8, #loc9])
#loc117 = loc(fused[#loc10, #loc11])
#loc118 = loc(fused[#loc13, #loc9])
#loc119 = loc(fused[#loc14, #loc15])
#loc120 = loc(fused[#loc19, #loc20])
#loc121 = loc(fused[#loc21, #loc22])
#loc122 = loc(fused[#loc24, #loc25])
#loc123 = loc(fused[#loc26, #loc27])
#loc124 = loc(fused[#loc28, #loc29])
#loc125 = loc(fused[#loc31, #loc30])
#loc126 = loc(fused[#loc36, #loc37])
#loc127 = loc(fused[#loc38, #loc39])
#loc128 = loc(fused[#loc40, #loc41])
#loc129 = loc(fused[#loc42, #loc43])
#loc131 = loc(fused[#loc47, #loc48])
#loc132 = loc(fused[#loc49, #loc50])
#loc133 = loc(fused[#loc52, #loc48])
#loc134 = loc(fused[#loc53, #loc54])
#loc135 = loc(fused[#loc58, #loc59])
#loc136 = loc(fused[#loc60, #loc61])
#loc137 = loc(fused[#loc62, #loc63])
#loc138 = loc(fused[#loc65, #loc64])
#loc139 = loc(fused[#loc67, #loc66])
#loc140 = loc(fused[#loc70, #loc71])
#loc141 = loc(fused[#loc73, #loc74])
#loc143 = loc(fused[#loc78, #loc79])
#loc144 = loc(fused[#loc80, #loc81])
#loc145 = loc(fused[#loc83, #loc79])
#loc146 = loc(fused[#loc84, #loc85])
#loc147 = loc(fused[#loc87, #loc88])
#loc148 = loc(fused[#loc86, #loc89])
#loc149 = loc(fused[#loc91, #loc92, #loc93, #loc85])
#loc150 = loc(fused[#loc94, #loc95])
#loc151 = loc(fused[#loc100, #loc101])
#loc152 = loc(fused[#loc102, #loc103])
#loc153 = loc(fused[#loc104, #loc105])
#loc154 = loc(fused[#loc107, #loc106])
