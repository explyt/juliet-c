!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__CWE135_68_badData : !cir.ptr<!void> {alignment = 8 : i64} loc(#loc120)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc121)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc122)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc123)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc124)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc125)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc126)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_68b_badSink() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc128)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc129)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc130)
    %3 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_68_badData : !cir.ptr<!cir.ptr<!void>> loc(#loc120)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc22)
    cir.store %4, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc130)
    cir.br ^bb1 loc(#loc131)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc25)
    %6 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc26)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc26)
    %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc25)
    cir.store %8, %0 : !u64i, !cir.ptr<!u64i> loc(#loc128)
    %9 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc27)
    %10 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc28)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc29)
    %13 = cir.binop(add, %10, %12) : !u64i loc(#loc132)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc133)
    %15 = cir.call @calloc(%13, %14) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc27)
    cir.store %15, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc129)
    cir.br ^bb2 loc(#loc134)
  ^bb2:  // pred: ^bb1
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc34)
    %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc35)
    %18 = cir.cmp(eq, %16, %17) : !cir.ptr<!void>, !cir.bool loc(#loc135)
    cir.brcond %18 ^bb3, ^bb4 loc(#loc136)
  ^bb3:  // pred: ^bb2
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc37)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc38)
    %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc39)
    cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc37)
    cir.br ^bb4 loc(#loc33)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc33)
  ^bb5:  // pred: ^bb4
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc40)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc40)
    %24 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc41)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc41)
    %26 = cir.call @wcscpy(%23, %25) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc42)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc43)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc44)
    %29 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc45)
    cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc46)
    cir.br ^bb6 loc(#loc24)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc16)
  } loc(#loc127)
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__CWE135_68_goodG2BData : !cir.ptr<!void> {alignment = 8 : i64} loc(#loc137)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc138)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_68b_goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc140)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc141)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc142)
    %3 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_68_goodG2BData : !cir.ptr<!cir.ptr<!void>> loc(#loc137)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc58)
    cir.store %4, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc142)
    cir.br ^bb1 loc(#loc143)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc61)
    %6 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc62)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc62)
    %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc61)
    cir.store %8, %0 : !u64i, !cir.ptr<!u64i> loc(#loc140)
    %9 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc63)
    %10 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc64)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc65)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc65)
    %13 = cir.binop(add, %10, %12) : !u64i loc(#loc144)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc66)
    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc66)
    %16 = cir.call @calloc(%13, %15) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc63)
    cir.store %16, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc141)
    cir.br ^bb2 loc(#loc145)
  ^bb2:  // pred: ^bb1
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc69)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc70)
    %19 = cir.cmp(eq, %17, %18) : !cir.ptr<!void>, !cir.bool loc(#loc146)
    cir.brcond %19 ^bb3, ^bb4 loc(#loc147)
  ^bb3:  // pred: ^bb2
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc72)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc73)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc74)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc72)
    cir.br ^bb4 loc(#loc68)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc68)
  ^bb5:  // pred: ^bb4
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc75)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc75)
    %25 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc76)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc76)
    %27 = cir.call @strcpy(%24, %26) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc77)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc78)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc80)
    cir.call @free(%30) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc81)
    cir.br ^bb6 loc(#loc60)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc52)
  } loc(#loc139)
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__CWE135_68_goodB2GData : !cir.ptr<!void> {alignment = 8 : i64} loc(#loc148)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc149)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc150)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_68b_goodB2GSink() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc152)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc153)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc154)
    %3 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_68_goodB2GData : !cir.ptr<!cir.ptr<!void>> loc(#loc148)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc95)
    cir.store %4, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc154)
    cir.br ^bb1 loc(#loc155)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc98)
    %6 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc99)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc99)
    %8 = cir.call @wcslen(%7) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc98)
    cir.store %8, %0 : !u64i, !cir.ptr<!u64i> loc(#loc152)
    %9 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc100)
    %10 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc101)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc102)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc102)
    %13 = cir.binop(add, %10, %12) : !u64i loc(#loc156)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc157)
    %15 = cir.call @calloc(%13, %14) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc100)
    cir.store %15, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc153)
    cir.br ^bb2 loc(#loc158)
  ^bb2:  // pred: ^bb1
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc107)
    %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc108)
    %18 = cir.cmp(eq, %16, %17) : !cir.ptr<!void>, !cir.bool loc(#loc159)
    cir.brcond %18 ^bb3, ^bb4 loc(#loc160)
  ^bb3:  // pred: ^bb2
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc110)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc111)
    %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc112)
    cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc110)
    cir.br ^bb4 loc(#loc106)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc106)
  ^bb5:  // pred: ^bb4
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc113)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc113)
    %24 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc114)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc114)
    %26 = cir.call @wcscpy(%23, %25) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc115)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc116)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc116)
    cir.call @printWLine(%28) : (!cir.ptr<!s32i>) -> () loc(#loc117)
    %29 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc118)
    cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc119)
    cir.br ^bb6 loc(#loc97)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc89)
  } loc(#loc151)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":22:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":22:15)
#loc3 = loc("/usr/include/string.h":407:1)
#loc4 = loc("/usr/include/string.h":408:33)
#loc5 = loc("/usr/include/stdlib.h":675:1)
#loc6 = loc("/usr/include/stdlib.h":676:14)
#loc7 = loc("/usr/include/stdlib.h":756:1)
#loc8 = loc("/usr/include/stdlib.h":756:70)
#loc9 = loc("/usr/include/wchar.h":98:1)
#loc10 = loc("/usr/include/wchar.h":100:14)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc13 = loc("/usr/include/stdlib.h":687:1)
#loc14 = loc("/usr/include/stdlib.h":687:32)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":28:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":40:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":33:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":33:45)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":34:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":34:64)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":30:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":30:19)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":31:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":39:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":33:26)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":33:41)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":34:31)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":34:38)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":34:46)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":34:49)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":34:63)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":35:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":35:37)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":35:13)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":35:21)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":35:27)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":35:28)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":35:34)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":35:33)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":36:22)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":36:28)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":36:15)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":37:27)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":37:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":38:14)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":38:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":23:1)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":23:15)
#loc49 = loc("/usr/include/string.h":141:1)
#loc50 = loc("/usr/include/string.h":142:14)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":47:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":59:1)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":52:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":52:45)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":53:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":53:50)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":49:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":49:19)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":50:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":58:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":52:26)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":52:41)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":53:31)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":53:38)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":53:46)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":53:49)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":54:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":54:37)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":54:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":54:21)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":54:27)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":54:28)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":54:34)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":54:33)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":55:22)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":55:28)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":55:15)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":56:27)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":56:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":57:14)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":57:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":24:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":24:15)
#loc84 = loc("/usr/include/wchar.h":247:1)
#loc85 = loc("/usr/include/wchar.h":247:51)
#loc86 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc87 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":62:1)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":74:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":67:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":67:48)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":68:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":68:64)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":64:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":64:19)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":65:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":73:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":67:26)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":67:44)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":68:31)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":68:38)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":68:46)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":68:49)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":68:63)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":69:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":69:37)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":69:13)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":69:21)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":69:27)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":69:28)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":69:34)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":69:33)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":70:22)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":70:28)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":70:15)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":71:31)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":71:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":72:14)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c":72:9)
#loc120 = loc(fused[#loc1, #loc2])
#loc121 = loc(fused[#loc3, #loc4])
#loc122 = loc(fused[#loc5, #loc6])
#loc123 = loc(fused[#loc7, #loc8])
#loc124 = loc(fused[#loc9, #loc10])
#loc125 = loc(fused[#loc11, #loc12])
#loc126 = loc(fused[#loc13, #loc14])
#loc127 = loc(fused[#loc15, #loc16])
#loc128 = loc(fused[#loc17, #loc18])
#loc129 = loc(fused[#loc19, #loc20])
#loc130 = loc(fused[#loc21, #loc22])
#loc131 = loc(fused[#loc23, #loc24])
#loc132 = loc(fused[#loc28, #loc29])
#loc133 = loc(fused[#loc30, #loc31])
#loc134 = loc(fused[#loc32, #loc33])
#loc135 = loc(fused[#loc34, #loc35])
#loc136 = loc(fused[#loc36, #loc33])
#loc137 = loc(fused[#loc47, #loc48])
#loc138 = loc(fused[#loc49, #loc50])
#loc139 = loc(fused[#loc51, #loc52])
#loc140 = loc(fused[#loc53, #loc54])
#loc141 = loc(fused[#loc55, #loc56])
#loc142 = loc(fused[#loc57, #loc58])
#loc143 = loc(fused[#loc59, #loc60])
#loc144 = loc(fused[#loc64, #loc65])
#loc145 = loc(fused[#loc67, #loc68])
#loc146 = loc(fused[#loc69, #loc70])
#loc147 = loc(fused[#loc71, #loc68])
#loc148 = loc(fused[#loc82, #loc83])
#loc149 = loc(fused[#loc84, #loc85])
#loc150 = loc(fused[#loc86, #loc87])
#loc151 = loc(fused[#loc88, #loc89])
#loc152 = loc(fused[#loc90, #loc91])
#loc153 = loc(fused[#loc92, #loc93])
#loc154 = loc(fused[#loc94, #loc95])
#loc155 = loc(fused[#loc96, #loc97])
#loc156 = loc(fused[#loc101, #loc102])
#loc157 = loc(fused[#loc103, #loc104])
#loc158 = loc(fused[#loc105, #loc106])
#loc159 = loc(fused[#loc107, #loc108])
#loc160 = loc(fused[#loc109, #loc106])
