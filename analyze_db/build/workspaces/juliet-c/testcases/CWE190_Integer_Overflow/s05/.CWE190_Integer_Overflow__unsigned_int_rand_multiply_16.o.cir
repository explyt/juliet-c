!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":29:30)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":56:30)
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc108)
  cir.func private @printUnsignedLine(!u32i) loc(#loc109)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_multiply_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc111)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc112)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc11)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc113)
    cir.br ^bb1 loc(#loc114)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc114)
  ^bb2:  // 2 preds: ^bb1, ^bb9
    %4 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %5 ^bb3, ^bb10 loc(#loc15)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc115)
  ^bb4:  // pred: ^bb3
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc17)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %9 ^bb5, ^bb6 loc(#loc17)
  ^bb5:  // pred: ^bb4
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc17)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc17)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc17)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc17)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc17)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc17)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc17)
    cir.br ^bb7(%21 : !u32i) loc(#loc17)
  ^bb6:  // pred: ^bb4
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc17)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc17)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc17)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc17)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc17)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc17)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc17)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc17)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc17)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc17)
    cir.br ^bb7(%37 : !u32i) loc(#loc17)
  ^bb7(%38: !u32i loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":29:30)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc17)
  ^bb8:  // pred: ^bb7
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc17)
    %40 = cir.cast(integral, %39 : !s32i), !u32i loc(#loc17)
    cir.store %40, %1 : !u32i, !cir.ptr<!u32i> loc(#loc116)
    cir.br ^bb10 loc(#loc19)
  ^bb9:  // no predecessors
    cir.br ^bb2 loc(#loc14)
  ^bb10:  // 2 preds: ^bb2, ^bb8
    cir.br ^bb11 loc(#loc14)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc117)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc117)
  ^bb13:  // 2 preds: ^bb12, ^bb20
    %41 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %42 = cir.cast(int_to_bool, %41 : !s32i), !cir.bool loc(#loc22)
    cir.brcond %42 ^bb14, ^bb21 loc(#loc22)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc118)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc119)
  ^bb16:  // pred: ^bb15
    %43 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc26)
    %44 = cir.const #cir.int<0> : !s32i loc(#loc27)
    %45 = cir.cast(integral, %44 : !s32i), !u32i loc(#loc27)
    %46 = cir.cmp(gt, %43, %45) : !u32i, !cir.bool loc(#loc120)
    cir.brcond %46 ^bb17, ^bb18 loc(#loc121)
  ^bb17:  // pred: ^bb16
    %47 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc29)
    %48 = cir.const #cir.int<2> : !s32i loc(#loc8)
    %49 = cir.cast(integral, %48 : !s32i), !u32i loc(#loc8)
    %50 = cir.binop(mul, %47, %49) : !u32i loc(#loc122)
    cir.store %50, %0 : !u32i, !cir.ptr<!u32i> loc(#loc111)
    %51 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc30)
    cir.call @printUnsignedLine(%51) : (!u32i) -> () loc(#loc31)
    cir.br ^bb18 loc(#loc25)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc25)
  ^bb19:  // pred: ^bb18
    cir.br ^bb21 loc(#loc32)
  ^bb20:  // no predecessors
    cir.br ^bb13 loc(#loc21)
  ^bb21:  // 2 preds: ^bb13, ^bb19
    cir.br ^bb22 loc(#loc21)
  ^bb22:  // pred: ^bb21
    cir.return loc(#loc6)
  } loc(#loc110)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_multiply_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc124)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc125)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    cir.return loc(#loc34)
  } loc(#loc123)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc126)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc41)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc128)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc129)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc48)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc48)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc130)
    cir.br ^bb1 loc(#loc131)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc131)
  ^bb2:  // 2 preds: ^bb1, ^bb9
    %4 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc52)
    cir.brcond %5 ^bb3, ^bb10 loc(#loc52)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc132)
  ^bb4:  // pred: ^bb3
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc54)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc54)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc54)
    cir.brcond %9 ^bb5, ^bb6 loc(#loc54)
  ^bb5:  // pred: ^bb4
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc54)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc54)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc54)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc54)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc54)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc54)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc54)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc54)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc54)
    cir.br ^bb7(%21 : !u32i) loc(#loc54)
  ^bb6:  // pred: ^bb4
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc54)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc54)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc54)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc54)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc54)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc54)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc54)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc54)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc54)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc54)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc54)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc54)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc54)
    cir.br ^bb7(%37 : !u32i) loc(#loc54)
  ^bb7(%38: !u32i loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":56:30)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc54)
  ^bb8:  // pred: ^bb7
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc54)
    %40 = cir.cast(integral, %39 : !s32i), !u32i loc(#loc54)
    cir.store %40, %1 : !u32i, !cir.ptr<!u32i> loc(#loc133)
    cir.br ^bb10 loc(#loc56)
  ^bb9:  // no predecessors
    cir.br ^bb2 loc(#loc51)
  ^bb10:  // 2 preds: ^bb2, ^bb8
    cir.br ^bb11 loc(#loc51)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc134)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc134)
  ^bb13:  // 2 preds: ^bb12, ^bb25
    %41 = cir.const #cir.int<1> : !s32i loc(#loc59)
    %42 = cir.cast(int_to_bool, %41 : !s32i), !cir.bool loc(#loc59)
    cir.brcond %42 ^bb14, ^bb26 loc(#loc59)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc135)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc136)
  ^bb16:  // pred: ^bb15
    %43 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc63)
    %44 = cir.const #cir.int<0> : !s32i loc(#loc64)
    %45 = cir.cast(integral, %44 : !s32i), !u32i loc(#loc64)
    %46 = cir.cmp(gt, %43, %45) : !u32i, !cir.bool loc(#loc137)
    cir.brcond %46 ^bb17, ^bb23 loc(#loc138)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc139)
  ^bb18:  // pred: ^bb17
    %47 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc68)
    %48 = cir.const #cir.int<2147483647> : !s32i loc(#loc69)
    %49 = cir.cast(integral, %48 : !s32i), !u32i loc(#loc69)
    %50 = cir.const #cir.int<2> : !u32i loc(#loc69)
    %51 = cir.binop(mul, %49, %50) : !u32i loc(#loc69)
    %52 = cir.const #cir.int<1> : !u32i loc(#loc69)
    %53 = cir.binop(add, %51, %52) : !u32i loc(#loc69)
    %54 = cir.const #cir.int<2> : !s32i loc(#loc70)
    %55 = cir.cast(integral, %54 : !s32i), !u32i loc(#loc70)
    %56 = cir.binop(div, %53, %55) : !u32i loc(#loc140)
    %57 = cir.cmp(lt, %47, %56) : !u32i, !cir.bool loc(#loc141)
    cir.brcond %57 ^bb19, ^bb20 loc(#loc142)
  ^bb19:  // pred: ^bb18
    %58 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc75)
    %59 = cir.const #cir.int<2> : !s32i loc(#loc45)
    %60 = cir.cast(integral, %59 : !s32i), !u32i loc(#loc45)
    %61 = cir.binop(mul, %58, %60) : !u32i loc(#loc143)
    cir.store %61, %0 : !u32i, !cir.ptr<!u32i> loc(#loc128)
    %62 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc76)
    cir.call @printUnsignedLine(%62) : (!u32i) -> () loc(#loc77)
    cir.br ^bb21 loc(#loc73)
  ^bb20:  // pred: ^bb18
    %63 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc41)
    %64 = cir.cast(array_to_ptrdecay, %63 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%64) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    cir.br ^bb21 loc(#loc67)
  ^bb21:  // 2 preds: ^bb19, ^bb20
    cir.br ^bb22 loc(#loc67)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc62)
  ^bb23:  // 2 preds: ^bb16, ^bb22
    cir.br ^bb24 loc(#loc62)
  ^bb24:  // pred: ^bb23
    cir.br ^bb26 loc(#loc79)
  ^bb25:  // no predecessors
    cir.br ^bb13 loc(#loc58)
  ^bb26:  // 2 preds: ^bb13, ^bb24
    cir.br ^bb27 loc(#loc58)
  ^bb27:  // pred: ^bb26
    cir.return loc(#loc43)
  } loc(#loc127)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc145)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc146)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc86)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc86)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc147)
    cir.br ^bb1 loc(#loc148)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc148)
  ^bb2:  // 2 preds: ^bb1, ^bb5
    %4 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc90)
    cir.brcond %5 ^bb3, ^bb6 loc(#loc90)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc149)
  ^bb4:  // pred: ^bb3
    %6 = cir.const #cir.int<2> : !s32i loc(#loc92)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc92)
    cir.store %7, %1 : !u32i, !cir.ptr<!u32i> loc(#loc150)
    cir.br ^bb6 loc(#loc94)
  ^bb5:  // no predecessors
    cir.br ^bb2 loc(#loc89)
  ^bb6:  // 2 preds: ^bb2, ^bb4
    cir.br ^bb7 loc(#loc89)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc151)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc151)
  ^bb9:  // 2 preds: ^bb8, ^bb16
    %8 = cir.const #cir.int<1> : !s32i loc(#loc97)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc97)
    cir.brcond %9 ^bb10, ^bb17 loc(#loc97)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc152)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc153)
  ^bb12:  // pred: ^bb11
    %10 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc101)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc102)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc102)
    %13 = cir.cmp(gt, %10, %12) : !u32i, !cir.bool loc(#loc154)
    cir.brcond %13 ^bb13, ^bb14 loc(#loc155)
  ^bb13:  // pred: ^bb12
    %14 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc104)
    %15 = cir.const #cir.int<2> : !s32i loc(#loc83)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc83)
    %17 = cir.binop(mul, %14, %16) : !u32i loc(#loc156)
    cir.store %17, %0 : !u32i, !cir.ptr<!u32i> loc(#loc145)
    %18 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc105)
    cir.call @printUnsignedLine(%18) : (!u32i) -> () loc(#loc106)
    cir.br ^bb14 loc(#loc100)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc100)
  ^bb15:  // pred: ^bb14
    cir.br ^bb17 loc(#loc107)
  ^bb16:  // no predecessors
    cir.br ^bb9 loc(#loc96)
  ^bb17:  // 2 preds: ^bb9, ^bb15
    cir.br ^bb18 loc(#loc96)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc81)
  } loc(#loc144)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":22:1)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":42:1)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":37:13)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":37:42)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":24:5)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":24:18)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":25:12)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":25:5)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":26:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":31:5)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":26:11)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":27:5)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":29:9)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":30:9)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":32:5)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":41:5)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":32:11)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":33:5)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":34:9)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":39:9)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":34:12)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":34:19)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":35:9)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":37:35)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":38:31)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":38:13)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":40:9)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":101:1)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":105:1)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":103:5)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":103:13)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":104:5)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":104:13)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":71:27)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":49:1)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":76:1)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":66:17)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":66:46)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":51:5)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":51:18)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":52:12)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":52:5)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":53:5)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":58:5)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":53:11)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":54:5)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":56:9)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":57:9)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":59:5)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":75:5)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":59:11)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":60:5)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":61:9)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":73:9)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":61:12)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":61:19)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":62:9)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":64:13)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":72:13)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":64:17)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":64:25)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":64:34)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":64:35)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":65:13)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":68:13)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":70:13)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":66:39)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":67:35)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":67:17)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":71:17)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":74:9)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":79:1)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":99:1)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":94:13)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":94:42)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":81:5)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":81:18)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":82:12)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":82:5)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":83:5)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":88:5)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":83:11)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":84:5)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":86:16)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":86:9)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":87:9)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":89:5)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":98:5)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":89:11)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":90:5)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":91:9)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":96:9)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":91:12)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":91:19)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":92:9)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":94:35)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":95:31)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":95:13)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_16.c":97:9)
#loc108 = loc(fused[#loc1, #loc2])
#loc109 = loc(fused[#loc3, #loc4])
#loc110 = loc(fused[#loc5, #loc6])
#loc111 = loc(fused[#loc7, #loc8])
#loc112 = loc(fused[#loc9, #loc10])
#loc113 = loc(fused[#loc12, #loc11])
#loc114 = loc(fused[#loc13, #loc14])
#loc115 = loc(fused[#loc16, #loc14])
#loc116 = loc(fused[#loc18, #loc17])
#loc117 = loc(fused[#loc20, #loc21])
#loc118 = loc(fused[#loc23, #loc21])
#loc119 = loc(fused[#loc24, #loc25])
#loc120 = loc(fused[#loc26, #loc27])
#loc121 = loc(fused[#loc28, #loc25])
#loc122 = loc(fused[#loc29, #loc8])
#loc123 = loc(fused[#loc33, #loc34])
#loc124 = loc(fused[#loc35, #loc36])
#loc125 = loc(fused[#loc37, #loc38])
#loc126 = loc(fused[#loc39, #loc40])
#loc127 = loc(fused[#loc42, #loc43])
#loc128 = loc(fused[#loc44, #loc45])
#loc129 = loc(fused[#loc46, #loc47])
#loc130 = loc(fused[#loc49, #loc48])
#loc131 = loc(fused[#loc50, #loc51])
#loc132 = loc(fused[#loc53, #loc51])
#loc133 = loc(fused[#loc55, #loc54])
#loc134 = loc(fused[#loc57, #loc58])
#loc135 = loc(fused[#loc60, #loc58])
#loc136 = loc(fused[#loc61, #loc62])
#loc137 = loc(fused[#loc63, #loc64])
#loc138 = loc(fused[#loc65, #loc62])
#loc139 = loc(fused[#loc66, #loc67])
#loc140 = loc(fused[#loc69, #loc70])
#loc141 = loc(fused[#loc68, #loc71])
#loc142 = loc(fused[#loc72, #loc73, #loc74, #loc67])
#loc143 = loc(fused[#loc75, #loc45])
#loc144 = loc(fused[#loc80, #loc81])
#loc145 = loc(fused[#loc82, #loc83])
#loc146 = loc(fused[#loc84, #loc85])
#loc147 = loc(fused[#loc87, #loc86])
#loc148 = loc(fused[#loc88, #loc89])
#loc149 = loc(fused[#loc91, #loc89])
#loc150 = loc(fused[#loc93, #loc92])
#loc151 = loc(fused[#loc95, #loc96])
#loc152 = loc(fused[#loc98, #loc96])
#loc153 = loc(fused[#loc99, #loc100])
#loc154 = loc(fused[#loc101, #loc102])
#loc155 = loc(fused[#loc103, #loc100])
#loc156 = loc(fused[#loc104, #loc83])
