!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc5 = loc("CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":31:18)
#loc6 = loc("CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":31:25)
#loc15 = loc("CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":43:22)
#loc16 = loc("CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":43:29)
#loc24 = loc("CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":51:22)
#loc25 = loc("CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":51:29)
#loc34 = loc(fused[#loc5, #loc6])
#loc38 = loc(fused[#loc15, #loc16])
#loc42 = loc(fused[#loc24, #loc25])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s02/CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc32)
  cir.func @_ZN47CWE789_Uncontrolled_Mem_Alloc__new_char_rand_619badSourceEm(%arg0: !u64i loc(fused[#loc5, #loc6])) -> !u64i extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["data", init] {alignment = 8 : i64} loc(#loc34)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["__retval"] {alignment = 8 : i64} loc(#loc4)
    cir.store %arg0, %0 : !u64i, !cir.ptr<!u64i> loc(#loc7)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc8)
    cir.store %3, %0 : !u64i, !cir.ptr<!u64i> loc(#loc35)
    %4 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc11)
    cir.store %4, %1 : !u64i, !cir.ptr<!u64i> loc(#loc36)
    %5 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc36)
    cir.return %5 : !u64i loc(#loc36)
  } loc(#loc33)
  cir.func @_ZN47CWE789_Uncontrolled_Mem_Alloc__new_char_rand_6113goodG2BSourceEm(%arg0: !u64i loc(fused[#loc15, #loc16])) -> !u64i extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["data", init] {alignment = 8 : i64} loc(#loc38)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["__retval"] {alignment = 8 : i64} loc(#loc14)
    cir.store %arg0, %0 : !u64i, !cir.ptr<!u64i> loc(#loc17)
    %2 = cir.const #cir.int<20> : !s32i loc(#loc18)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc18)
    cir.store %3, %0 : !u64i, !cir.ptr<!u64i> loc(#loc39)
    %4 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc20)
    cir.store %4, %1 : !u64i, !cir.ptr<!u64i> loc(#loc40)
    %5 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc40)
    cir.return %5 : !u64i loc(#loc40)
  } loc(#loc37)
  cir.func @_ZN47CWE789_Uncontrolled_Mem_Alloc__new_char_rand_6113goodB2GSourceEm(%arg0: !u64i loc(fused[#loc24, #loc25])) -> !u64i extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["data", init] {alignment = 8 : i64} loc(#loc42)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["__retval"] {alignment = 8 : i64} loc(#loc23)
    cir.store %arg0, %0 : !u64i, !cir.ptr<!u64i> loc(#loc26)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc27)
    cir.store %3, %0 : !u64i, !cir.ptr<!u64i> loc(#loc43)
    %4 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc30)
    cir.store %4, %1 : !u64i, !cir.ptr<!u64i> loc(#loc44)
    %5 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc44)
    cir.return %5 : !u64i loc(#loc44)
  } loc(#loc41)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s02/CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":31:1)
#loc4 = loc("CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":36:1)
#loc7 = loc("CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":32:1)
#loc8 = loc("CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":34:12)
#loc9 = loc("CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":34:5)
#loc10 = loc("CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":34:17)
#loc11 = loc("CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":35:12)
#loc12 = loc("CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":35:5)
#loc13 = loc("CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":43:1)
#loc14 = loc("CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":48:1)
#loc17 = loc("CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":44:1)
#loc18 = loc("CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":46:12)
#loc19 = loc("CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":46:5)
#loc20 = loc("CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":47:12)
#loc21 = loc("CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":47:5)
#loc22 = loc("CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":51:1)
#loc23 = loc("CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":56:1)
#loc26 = loc("CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":52:1)
#loc27 = loc("CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":54:12)
#loc28 = loc("CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":54:5)
#loc29 = loc("CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":54:17)
#loc30 = loc("CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":55:12)
#loc31 = loc("CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61b.cpp":55:5)
#loc32 = loc(fused[#loc1, #loc2])
#loc33 = loc(fused[#loc3, #loc4])
#loc35 = loc(fused[#loc9, #loc10])
#loc36 = loc(fused[#loc12, #loc11])
#loc37 = loc(fused[#loc13, #loc14])
#loc39 = loc(fused[#loc19, #loc18])
#loc40 = loc(fused[#loc21, #loc20])
#loc41 = loc(fused[#loc22, #loc23])
#loc43 = loc(fused[#loc28, #loc29])
#loc44 = loc(fused[#loc31, #loc30])
