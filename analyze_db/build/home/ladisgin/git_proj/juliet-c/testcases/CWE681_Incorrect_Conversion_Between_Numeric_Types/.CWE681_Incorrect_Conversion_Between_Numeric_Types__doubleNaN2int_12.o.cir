!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc163)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc164)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc165)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc166)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc167)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private @printIntLine(!s32i) loc(#loc168)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc14)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Value is negative\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc15)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc170)
    %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc171)
    %2 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc172)
    %3 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc173)
    cir.br ^bb1 loc(#loc174)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc175)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc175)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc28)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc28)
    cir.brcond %7 ^bb2, ^bb10 loc(#loc176)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc177)
  ^bb3:  // pred: ^bb2
    %8 = cir.const #cir.int<0> : !s32i loc(#loc21)
    %9 = cir.cast(int_to_float, %8 : !s32i), !cir.double loc(#loc21)
    cir.store %9, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc171)
    cir.br ^bb4 loc(#loc178)
  ^bb4:  // pred: ^bb3
    %10 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc37)
    %11 = cir.const #cir.int<256> : !s32i loc(#loc38)
    %12 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc165)
    %13 = cir.load %12 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc39)
    %14 = cir.call @fgets(%10, %11, %13) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc40)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc41)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc41)
    %17 = cir.cmp(ne, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc179)
    cir.brcond %17 ^bb5, ^bb6 loc(#loc180)
  ^bb5:  // pred: ^bb4
    %18 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc45)
    %19 = cir.call @atof(%18) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc46)
    cir.store %19, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc181)
    cir.br ^bb7 loc(#loc43)
  ^bb6:  // pred: ^bb4
    %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    cir.br ^bb7 loc(#loc36)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc36)
  ^bb8:  // pred: ^bb7
    %22 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc50)
    %23 = cir.call @sqrt(%22) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc51)
    %24 = cir.cast(float_to_int, %23 : !cir.double), !s32i loc(#loc51)
    cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc52)
    cir.br ^bb9 loc(#loc34)
  ^bb9:  // pred: ^bb8
    cir.br ^bb23 loc(#loc31)
  ^bb10:  // pred: ^bb1
    cir.br ^bb11 loc(#loc182)
  ^bb11:  // pred: ^bb10
    %25 = cir.const #cir.int<0> : !s32i loc(#loc25)
    %26 = cir.cast(int_to_float, %25 : !s32i), !cir.double loc(#loc25)
    cir.store %26, %3 : !cir.double, !cir.ptr<!cir.double> loc(#loc173)
    cir.br ^bb12 loc(#loc183)
  ^bb12:  // pred: ^bb11
    %27 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc57)
    %28 = cir.const #cir.int<256> : !s32i loc(#loc58)
    %29 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc165)
    %30 = cir.load %29 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc59)
    %31 = cir.call @fgets(%27, %28, %30) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc60)
    %32 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc61)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc61)
    %34 = cir.cmp(ne, %31, %33) : !cir.ptr<!s8i>, !cir.bool loc(#loc184)
    cir.brcond %34 ^bb13, ^bb14 loc(#loc185)
  ^bb13:  // pred: ^bb12
    %35 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc65)
    %36 = cir.call @atof(%35) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc66)
    cir.store %36, %3 : !cir.double, !cir.ptr<!cir.double> loc(#loc186)
    cir.br ^bb15 loc(#loc63)
  ^bb14:  // pred: ^bb12
    %37 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc69)
    %38 = cir.cast(array_to_ptrdecay, %37 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%38) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    cir.br ^bb15 loc(#loc56)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc56)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc187)
  ^bb17:  // pred: ^bb16
    %39 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double loc(#loc73)
    %40 = cir.const #cir.int<0> : !s32i loc(#loc74)
    %41 = cir.cast(int_to_float, %40 : !s32i), !cir.double loc(#loc74)
    %42 = cir.cmp(lt, %39, %41) : !cir.double, !cir.bool loc(#loc188)
    cir.brcond %42 ^bb18, ^bb19 loc(#loc189)
  ^bb18:  // pred: ^bb17
    %43 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc15)
    %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc15)
    cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    cir.br ^bb20 loc(#loc76)
  ^bb19:  // pred: ^bb17
    %45 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc79)
    %46 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double loc(#loc80)
    %47 = cir.call @sqrt(%46) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc79)
    %48 = cir.cast(float_to_int, %47 : !cir.double), !s32i loc(#loc79)
    cir.call @printIntLine(%48) : (!s32i) -> () loc(#loc81)
    cir.br ^bb20 loc(#loc72)
  ^bb20:  // 2 preds: ^bb18, ^bb19
    cir.br ^bb21 loc(#loc72)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc54)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc27)
  ^bb23:  // 2 preds: ^bb9, ^bb22
    cir.br ^bb24 loc(#loc27)
  ^bb24:  // pred: ^bb23
    cir.return loc(#loc17)
  } loc(#loc169)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc191)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc84)
    cir.return loc(#loc83)
  } loc(#loc190)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc193)
    %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc194)
    %2 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc195)
    %3 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc196)
    cir.br ^bb1 loc(#loc197)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc198)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc198)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc98)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc98)
    cir.brcond %7 ^bb2, ^bb15 loc(#loc199)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc200)
  ^bb3:  // pred: ^bb2
    %8 = cir.const #cir.int<0> : !s32i loc(#loc91)
    %9 = cir.cast(int_to_float, %8 : !s32i), !cir.double loc(#loc91)
    cir.store %9, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc194)
    cir.br ^bb4 loc(#loc201)
  ^bb4:  // pred: ^bb3
    %10 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc107)
    %11 = cir.const #cir.int<256> : !s32i loc(#loc108)
    %12 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc165)
    %13 = cir.load %12 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc109)
    %14 = cir.call @fgets(%10, %11, %13) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc110)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc111)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc111)
    %17 = cir.cmp(ne, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc202)
    cir.brcond %17 ^bb5, ^bb6 loc(#loc203)
  ^bb5:  // pred: ^bb4
    %18 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc115)
    %19 = cir.call @atof(%18) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc116)
    cir.store %19, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc204)
    cir.br ^bb7 loc(#loc113)
  ^bb6:  // pred: ^bb4
    %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc119)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc119)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc120)
    cir.br ^bb7 loc(#loc106)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc106)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc205)
  ^bb9:  // pred: ^bb8
    %22 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc123)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc124)
    %24 = cir.cast(int_to_float, %23 : !s32i), !cir.double loc(#loc124)
    %25 = cir.cmp(lt, %22, %24) : !cir.double, !cir.bool loc(#loc206)
    cir.brcond %25 ^bb10, ^bb11 loc(#loc207)
  ^bb10:  // pred: ^bb9
    %26 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc128)
    %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc128)
    cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc129)
    cir.br ^bb12 loc(#loc126)
  ^bb11:  // pred: ^bb9
    %28 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc130)
    %29 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc131)
    %30 = cir.call @sqrt(%29) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc130)
    %31 = cir.cast(float_to_int, %30 : !cir.double), !s32i loc(#loc130)
    cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc132)
    cir.br ^bb12 loc(#loc122)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc122)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc104)
  ^bb14:  // pred: ^bb13
    cir.br ^bb28 loc(#loc101)
  ^bb15:  // pred: ^bb1
    cir.br ^bb16 loc(#loc208)
  ^bb16:  // pred: ^bb15
    %32 = cir.const #cir.int<0> : !s32i loc(#loc95)
    %33 = cir.cast(int_to_float, %32 : !s32i), !cir.double loc(#loc95)
    cir.store %33, %3 : !cir.double, !cir.ptr<!cir.double> loc(#loc196)
    cir.br ^bb17 loc(#loc209)
  ^bb17:  // pred: ^bb16
    %34 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc137)
    %35 = cir.const #cir.int<256> : !s32i loc(#loc138)
    %36 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc165)
    %37 = cir.load %36 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc139)
    %38 = cir.call @fgets(%34, %35, %37) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc140)
    %39 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc141)
    %40 = cir.cast(bitcast, %39 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc141)
    %41 = cir.cmp(ne, %38, %40) : !cir.ptr<!s8i>, !cir.bool loc(#loc210)
    cir.brcond %41 ^bb18, ^bb19 loc(#loc211)
  ^bb18:  // pred: ^bb17
    %42 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc145)
    %43 = cir.call @atof(%42) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc146)
    cir.store %43, %3 : !cir.double, !cir.ptr<!cir.double> loc(#loc212)
    cir.br ^bb20 loc(#loc143)
  ^bb19:  // pred: ^bb17
    %44 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc149)
    %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc149)
    cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc150)
    cir.br ^bb20 loc(#loc136)
  ^bb20:  // 2 preds: ^bb18, ^bb19
    cir.br ^bb21 loc(#loc136)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc213)
  ^bb22:  // pred: ^bb21
    %46 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double loc(#loc153)
    %47 = cir.const #cir.int<0> : !s32i loc(#loc154)
    %48 = cir.cast(int_to_float, %47 : !s32i), !cir.double loc(#loc154)
    %49 = cir.cmp(lt, %46, %48) : !cir.double, !cir.bool loc(#loc214)
    cir.brcond %49 ^bb23, ^bb24 loc(#loc215)
  ^bb23:  // pred: ^bb22
    %50 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc158)
    %51 = cir.cast(array_to_ptrdecay, %50 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc158)
    cir.call @printLine(%51) : (!cir.ptr<!s8i>) -> () loc(#loc159)
    cir.br ^bb25 loc(#loc156)
  ^bb24:  // pred: ^bb22
    %52 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc160)
    %53 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double loc(#loc161)
    %54 = cir.call @sqrt(%53) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc160)
    %55 = cir.cast(float_to_int, %54 : !cir.double), !s32i loc(#loc160)
    cir.call @printIntLine(%55) : (!s32i) -> () loc(#loc162)
    cir.br ^bb25 loc(#loc152)
  ^bb25:  // 2 preds: ^bb23, ^bb24
    cir.br ^bb26 loc(#loc152)
  ^bb26:  // pred: ^bb25
    cir.br ^bb27 loc(#loc134)
  ^bb27:  // pred: ^bb26
    cir.br ^bb28 loc(#loc97)
  ^bb28:  // 2 preds: ^bb14, ^bb27
    cir.br ^bb29 loc(#loc97)
  ^bb29:  // pred: ^bb28
    cir.return loc(#loc87)
  } loc(#loc192)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":102:1)
#loc8 = loc("/usr/include/stdlib.h":103:33)
#loc9 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":41:27)
#loc12 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc15 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":69:27)
#loc16 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":23:1)
#loc17 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":77:1)
#loc18 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":28:13)
#loc19 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":28:45)
#loc20 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":29:13)
#loc21 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":29:35)
#loc22 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":50:13)
#loc23 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":50:45)
#loc24 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":51:13)
#loc25 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":51:35)
#loc26 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":25:5)
#loc27 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":76:5)
#loc28 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":25:8)
#loc29 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":25:33)
#loc30 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":26:5)
#loc31 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":46:5)
#loc32 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":48:5)
#loc33 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":27:9)
#loc34 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":45:9)
#loc35 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":34:13)
#loc36 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":42:13)
#loc37 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":34:23)
#loc38 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":34:36)
#loc39 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":34:53)
#loc40 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":34:17)
#loc41 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":34:63)
#loc42 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":35:13)
#loc43 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":38:13)
#loc44 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":40:13)
#loc45 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":37:37)
#loc46 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":37:32)
#loc47 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":37:17)
#loc48 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":37:48)
#loc49 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":41:17)
#loc50 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":44:37)
#loc51 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":44:32)
#loc52 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":44:13)
#loc53 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":49:9)
#loc54 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":75:9)
#loc55 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":56:13)
#loc56 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":64:13)
#loc57 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":56:23)
#loc58 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":56:36)
#loc59 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":56:53)
#loc60 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":56:17)
#loc61 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":56:63)
#loc62 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":57:13)
#loc63 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":60:13)
#loc64 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":62:13)
#loc65 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":59:37)
#loc66 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":59:32)
#loc67 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":59:17)
#loc68 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":59:48)
#loc69 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":63:27)
#loc70 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":63:17)
#loc71 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":67:13)
#loc72 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":74:13)
#loc73 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":67:17)
#loc74 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":67:32)
#loc75 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":68:13)
#loc76 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":70:13)
#loc77 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":72:13)
#loc78 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":69:17)
#loc79 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":73:36)
#loc80 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":73:41)
#loc81 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":73:17)
#loc82 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":148:1)
#loc83 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":151:1)
#loc84 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":150:5)
#loc85 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":150:11)
#loc86 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":84:1)
#loc87 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":146:1)
#loc88 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":89:13)
#loc89 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":89:45)
#loc90 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":90:13)
#loc91 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":90:35)
#loc92 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":119:13)
#loc93 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":119:45)
#loc94 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":120:13)
#loc95 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":120:35)
#loc96 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":86:5)
#loc97 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":145:5)
#loc98 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":86:8)
#loc99 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":86:33)
#loc100 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":87:5)
#loc101 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":115:5)
#loc102 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":117:5)
#loc103 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":88:9)
#loc104 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":114:9)
#loc105 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":95:13)
#loc106 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":103:13)
#loc107 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":95:23)
#loc108 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":95:36)
#loc109 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":95:53)
#loc110 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":95:17)
#loc111 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":95:63)
#loc112 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":96:13)
#loc113 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":99:13)
#loc114 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":101:13)
#loc115 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":98:37)
#loc116 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":98:32)
#loc117 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":98:17)
#loc118 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":98:48)
#loc119 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":102:27)
#loc120 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":102:17)
#loc121 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":106:13)
#loc122 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":113:13)
#loc123 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":106:17)
#loc124 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":106:32)
#loc125 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":107:13)
#loc126 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":109:13)
#loc127 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":111:13)
#loc128 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":108:27)
#loc129 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":108:17)
#loc130 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":112:36)
#loc131 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":112:41)
#loc132 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":112:17)
#loc133 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":118:9)
#loc134 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":144:9)
#loc135 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":125:13)
#loc136 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":133:13)
#loc137 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":125:23)
#loc138 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":125:36)
#loc139 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":125:53)
#loc140 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":125:17)
#loc141 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":125:63)
#loc142 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":126:13)
#loc143 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":129:13)
#loc144 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":131:13)
#loc145 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":128:37)
#loc146 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":128:32)
#loc147 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":128:17)
#loc148 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":128:48)
#loc149 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":132:27)
#loc150 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":132:17)
#loc151 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":136:13)
#loc152 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":143:13)
#loc153 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":136:17)
#loc154 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":136:32)
#loc155 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":137:13)
#loc156 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":139:13)
#loc157 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":141:13)
#loc158 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":138:27)
#loc159 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":138:17)
#loc160 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":142:36)
#loc161 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":142:41)
#loc162 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":142:17)
#loc163 = loc(fused[#loc1, #loc2])
#loc164 = loc(fused[#loc3, #loc4])
#loc165 = loc(fused[#loc5, #loc6])
#loc166 = loc(fused[#loc7, #loc8])
#loc167 = loc(fused[#loc9, #loc10])
#loc168 = loc(fused[#loc12, #loc13])
#loc169 = loc(fused[#loc16, #loc17])
#loc170 = loc(fused[#loc18, #loc19])
#loc171 = loc(fused[#loc20, #loc21])
#loc172 = loc(fused[#loc22, #loc23])
#loc173 = loc(fused[#loc24, #loc25])
#loc174 = loc(fused[#loc26, #loc27])
#loc175 = loc(fused[#loc28, #loc29])
#loc176 = loc(fused[#loc30, #loc31, #loc32, #loc27])
#loc177 = loc(fused[#loc33, #loc34])
#loc178 = loc(fused[#loc35, #loc36])
#loc179 = loc(fused[#loc40, #loc41])
#loc180 = loc(fused[#loc42, #loc43, #loc44, #loc36])
#loc181 = loc(fused[#loc47, #loc48])
#loc182 = loc(fused[#loc53, #loc54])
#loc183 = loc(fused[#loc55, #loc56])
#loc184 = loc(fused[#loc60, #loc61])
#loc185 = loc(fused[#loc62, #loc63, #loc64, #loc56])
#loc186 = loc(fused[#loc67, #loc68])
#loc187 = loc(fused[#loc71, #loc72])
#loc188 = loc(fused[#loc73, #loc74])
#loc189 = loc(fused[#loc75, #loc76, #loc77, #loc72])
#loc190 = loc(fused[#loc82, #loc83])
#loc191 = loc(fused[#loc84, #loc85])
#loc192 = loc(fused[#loc86, #loc87])
#loc193 = loc(fused[#loc88, #loc89])
#loc194 = loc(fused[#loc90, #loc91])
#loc195 = loc(fused[#loc92, #loc93])
#loc196 = loc(fused[#loc94, #loc95])
#loc197 = loc(fused[#loc96, #loc97])
#loc198 = loc(fused[#loc98, #loc99])
#loc199 = loc(fused[#loc100, #loc101, #loc102, #loc97])
#loc200 = loc(fused[#loc103, #loc104])
#loc201 = loc(fused[#loc105, #loc106])
#loc202 = loc(fused[#loc110, #loc111])
#loc203 = loc(fused[#loc112, #loc113, #loc114, #loc106])
#loc204 = loc(fused[#loc117, #loc118])
#loc205 = loc(fused[#loc121, #loc122])
#loc206 = loc(fused[#loc123, #loc124])
#loc207 = loc(fused[#loc125, #loc126, #loc127, #loc122])
#loc208 = loc(fused[#loc133, #loc134])
#loc209 = loc(fused[#loc135, #loc136])
#loc210 = loc(fused[#loc140, #loc141])
#loc211 = loc(fused[#loc142, #loc143, #loc144, #loc136])
#loc212 = loc(fused[#loc147, #loc148])
#loc213 = loc(fused[#loc151, #loc152])
#loc214 = loc(fused[#loc153, #loc154])
#loc215 = loc(fused[#loc155, #loc156, #loc157, #loc152])
