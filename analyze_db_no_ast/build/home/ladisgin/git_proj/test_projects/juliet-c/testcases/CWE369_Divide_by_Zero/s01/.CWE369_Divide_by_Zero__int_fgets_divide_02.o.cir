!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fgets_divide_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc206)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc207)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc208)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc209)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @printIntLine(!s32i) loc(#loc210)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_fgets_divide_02_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc212)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc17)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc213)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc21)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc21)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc217)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc217)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc217)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc29)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc30)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc30)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc30)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc30)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc30)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc30)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc30)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc30)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc207)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc31)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc32)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc33)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !s32i loc(#loc219)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc34)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc38)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc39)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc221)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc42)
            } loc(#loc220)
          } loc(#loc218)
        } loc(#loc216)
      } loc(#loc215)
    } loc(#loc214)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc45)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc45)
      cir.if %4 {
        %5 = cir.const #cir.int<100> : !s32i loc(#loc47)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc48)
        %7 = cir.binop(div, %5, %6) : !s32i loc(#loc224)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc49)
      } loc(#loc223)
    } loc(#loc222)
    cir.return loc(#loc13)
  } loc(#loc211)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_fgets_divide_02_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc226)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc52)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc227)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc54)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc228)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc56)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc229)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    cir.return loc(#loc51)
  } loc(#loc225)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc60)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc61)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc231)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc66)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc67)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc232)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc71)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc71)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc236)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc236)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc236)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc79)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc80)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc80)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc80)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc80)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc80)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc80)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc80)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc80)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc207)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc81)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc82)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc83)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc83)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !s32i loc(#loc238)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc84)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc88)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc89)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc240)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc92)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc92)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc93)
            } loc(#loc239)
          } loc(#loc237)
        } loc(#loc235)
      } loc(#loc234)
    } loc(#loc233)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc96)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc96)
      cir.if %4 {
        %5 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc60)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc60)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc100)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc104)
          %7 = cir.cmp(ne, %5, %6) : !s32i, !s32i loc(#loc244)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc105)
          cir.if %8 {
            %9 = cir.const #cir.int<100> : !s32i loc(#loc109)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
            %11 = cir.binop(div, %9, %10) : !s32i loc(#loc246)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc111)
          } else {
            %9 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc61)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc61)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc112)
          } loc(#loc245)
        } loc(#loc243)
      } loc(#loc242)
    } loc(#loc241)
    cir.return loc(#loc63)
  } loc(#loc230)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc248)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc117)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc118)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc249)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc122)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc122)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc253)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc253)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc253)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc130)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc131)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc131)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc131)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc131)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc131)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc131)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc131)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc131)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc207)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc132)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc133)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc134)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc134)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !s32i loc(#loc255)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc135)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc139)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc140)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc257)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc143)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc143)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc144)
            } loc(#loc256)
          } loc(#loc254)
        } loc(#loc252)
      } loc(#loc251)
    } loc(#loc250)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc147)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc147)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc151)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc152)
          %7 = cir.cmp(ne, %5, %6) : !s32i, !s32i loc(#loc261)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc153)
          cir.if %8 {
            %9 = cir.const #cir.int<100> : !s32i loc(#loc157)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc158)
            %11 = cir.binop(div, %9, %10) : !s32i loc(#loc263)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc159)
          } else {
            %9 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc160)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc160)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc161)
          } loc(#loc262)
        } loc(#loc260)
      } loc(#loc259)
    } loc(#loc258)
    cir.return loc(#loc114)
  } loc(#loc247)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc265)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc166)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc167)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc266)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc171)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc171)
      cir.if %4 {
        %5 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc175)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc175)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc176)
      } else {
        %5 = cir.const #cir.int<7> : !s32i loc(#loc177)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc269)
      } loc(#loc268)
    } loc(#loc267)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc181)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc181)
      cir.if %4 {
        %5 = cir.const #cir.int<100> : !s32i loc(#loc183)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc184)
        %7 = cir.binop(div, %5, %6) : !s32i loc(#loc272)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc185)
      } loc(#loc271)
    } loc(#loc270)
    cir.return loc(#loc163)
  } loc(#loc264)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc274)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc190)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc191)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc275)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc195)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc195)
      cir.if %4 {
        %5 = cir.const #cir.int<7> : !s32i loc(#loc197)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc278)
      } loc(#loc277)
    } loc(#loc276)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc201)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc201)
      cir.if %4 {
        %5 = cir.const #cir.int<100> : !s32i loc(#loc203)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc204)
        %7 = cir.binop(div, %5, %6) : !s32i loc(#loc281)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc205)
      } loc(#loc280)
    } loc(#loc279)
    cir.return loc(#loc187)
  } loc(#loc273)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fgets_divide_02.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":41:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":24:1)
#loc13 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":50:1)
#loc14 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":26:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":26:9)
#loc16 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":28:13)
#loc17 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":28:12)
#loc18 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":28:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":29:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":44:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":29:8)
#loc22 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":30:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":31:9)
#loc24 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":43:9)
#loc25 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":32:13)
#loc26 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":32:49)
#loc27 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":34:13)
#loc28 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":42:13)
#loc29 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":34:23)
#loc30 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":34:36)
#loc31 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":34:53)
#loc32 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":34:17)
#loc33 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":34:63)
#loc34 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":34:60)
#loc35 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":35:13)
#loc36 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":38:13)
#loc37 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":40:13)
#loc38 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":37:29)
#loc39 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":37:24)
#loc40 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":37:17)
#loc41 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":37:40)
#loc42 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":41:17)
#loc43 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":45:5)
#loc44 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":49:5)
#loc45 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":45:8)
#loc46 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":46:5)
#loc47 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":48:22)
#loc48 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":48:28)
#loc49 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":48:9)
#loc50 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":174:1)
#loc51 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":180:1)
#loc52 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":176:5)
#loc53 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":176:14)
#loc54 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":177:5)
#loc55 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":177:14)
#loc56 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":178:5)
#loc57 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":178:14)
#loc58 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":179:5)
#loc59 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":179:14)
#loc60 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":81:19)
#loc61 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":92:23)
#loc62 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":57:1)
#loc63 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":95:1)
#loc64 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":59:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":59:9)
#loc66 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":61:13)
#loc67 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":61:12)
#loc68 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":61:5)
#loc69 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":62:5)
#loc70 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":77:5)
#loc71 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":62:8)
#loc72 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":63:5)
#loc73 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":64:9)
#loc74 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":76:9)
#loc75 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":65:13)
#loc76 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":65:49)
#loc77 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":67:13)
#loc78 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":75:13)
#loc79 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":67:23)
#loc80 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":67:36)
#loc81 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":67:53)
#loc82 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":67:17)
#loc83 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":67:63)
#loc84 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":67:60)
#loc85 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":68:13)
#loc86 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":71:13)
#loc87 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":73:13)
#loc88 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":70:29)
#loc89 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":70:24)
#loc90 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":70:17)
#loc91 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":70:40)
#loc92 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":74:27)
#loc93 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":74:17)
#loc94 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":78:5)
#loc95 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":94:5)
#loc96 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":78:8)
#loc97 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":79:5)
#loc98 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":82:5)
#loc99 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":84:5)
#loc100 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":81:9)
#loc101 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":86:9)
#loc102 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":93:9)
#loc103 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":86:13)
#loc104 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":86:21)
#loc105 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":86:18)
#loc106 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":87:9)
#loc107 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":89:9)
#loc108 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":91:9)
#loc109 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":88:26)
#loc110 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":88:32)
#loc111 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":88:13)
#loc112 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":92:13)
#loc113 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":98:1)
#loc114 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":131:1)
#loc115 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":100:5)
#loc116 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":100:9)
#loc117 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":102:13)
#loc118 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":102:12)
#loc119 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":102:5)
#loc120 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":103:5)
#loc121 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":118:5)
#loc122 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":103:8)
#loc123 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":104:5)
#loc124 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":105:9)
#loc125 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":117:9)
#loc126 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":106:13)
#loc127 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":106:49)
#loc128 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":108:13)
#loc129 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":116:13)
#loc130 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":108:23)
#loc131 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":108:36)
#loc132 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":108:53)
#loc133 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":108:17)
#loc134 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":108:63)
#loc135 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":108:60)
#loc136 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":109:13)
#loc137 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":112:13)
#loc138 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":114:13)
#loc139 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":111:29)
#loc140 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":111:24)
#loc141 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":111:17)
#loc142 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":111:40)
#loc143 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":115:27)
#loc144 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":115:17)
#loc145 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":119:5)
#loc146 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":130:5)
#loc147 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":119:8)
#loc148 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":120:5)
#loc149 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":122:9)
#loc150 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":129:9)
#loc151 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":122:13)
#loc152 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":122:21)
#loc153 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":122:18)
#loc154 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":123:9)
#loc155 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":125:9)
#loc156 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":127:9)
#loc157 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":124:26)
#loc158 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":124:32)
#loc159 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":124:13)
#loc160 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":128:23)
#loc161 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":128:13)
#loc162 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":134:1)
#loc163 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":154:1)
#loc164 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":136:5)
#loc165 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":136:9)
#loc166 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":138:13)
#loc167 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":138:12)
#loc168 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":138:5)
#loc169 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":139:5)
#loc170 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":148:5)
#loc171 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":139:8)
#loc172 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":140:5)
#loc173 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":143:5)
#loc174 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":145:5)
#loc175 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":142:19)
#loc176 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":142:9)
#loc177 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":147:16)
#loc178 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":147:9)
#loc179 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":149:5)
#loc180 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":153:5)
#loc181 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":149:8)
#loc182 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":150:5)
#loc183 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":152:22)
#loc184 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":152:28)
#loc185 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":152:9)
#loc186 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":157:1)
#loc187 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":172:1)
#loc188 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":159:5)
#loc189 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":159:9)
#loc190 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":161:13)
#loc191 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":161:12)
#loc192 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":161:5)
#loc193 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":162:5)
#loc194 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":166:5)
#loc195 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":162:8)
#loc196 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":163:5)
#loc197 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":165:16)
#loc198 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":165:9)
#loc199 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":167:5)
#loc200 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":171:5)
#loc201 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":167:8)
#loc202 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":168:5)
#loc203 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":170:22)
#loc204 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":170:28)
#loc205 = loc("CWE369_Divide_by_Zero__int_fgets_divide_02.c":170:9)
#loc206 = loc(fused[#loc1, #loc2])
#loc207 = loc(fused[#loc3, #loc4])
#loc208 = loc(fused[#loc5, #loc6])
#loc209 = loc(fused[#loc7, #loc8])
#loc210 = loc(fused[#loc10, #loc11])
#loc211 = loc(fused[#loc12, #loc13])
#loc212 = loc(fused[#loc14, #loc15])
#loc213 = loc(fused[#loc18, #loc16])
#loc214 = loc(fused[#loc19, #loc20])
#loc215 = loc(fused[#loc22, #loc20])
#loc216 = loc(fused[#loc23, #loc24])
#loc217 = loc(fused[#loc25, #loc26])
#loc218 = loc(fused[#loc27, #loc28])
#loc219 = loc(fused[#loc32, #loc33])
#loc220 = loc(fused[#loc35, #loc36, #loc37, #loc28])
#loc221 = loc(fused[#loc40, #loc41])
#loc222 = loc(fused[#loc43, #loc44])
#loc223 = loc(fused[#loc46, #loc44])
#loc224 = loc(fused[#loc47, #loc48])
#loc225 = loc(fused[#loc50, #loc51])
#loc226 = loc(fused[#loc52, #loc53])
#loc227 = loc(fused[#loc54, #loc55])
#loc228 = loc(fused[#loc56, #loc57])
#loc229 = loc(fused[#loc58, #loc59])
#loc230 = loc(fused[#loc62, #loc63])
#loc231 = loc(fused[#loc64, #loc65])
#loc232 = loc(fused[#loc68, #loc66])
#loc233 = loc(fused[#loc69, #loc70])
#loc234 = loc(fused[#loc72, #loc70])
#loc235 = loc(fused[#loc73, #loc74])
#loc236 = loc(fused[#loc75, #loc76])
#loc237 = loc(fused[#loc77, #loc78])
#loc238 = loc(fused[#loc82, #loc83])
#loc239 = loc(fused[#loc85, #loc86, #loc87, #loc78])
#loc240 = loc(fused[#loc90, #loc91])
#loc241 = loc(fused[#loc94, #loc95])
#loc242 = loc(fused[#loc97, #loc98, #loc99, #loc95])
#loc243 = loc(fused[#loc101, #loc102])
#loc244 = loc(fused[#loc103, #loc104])
#loc245 = loc(fused[#loc106, #loc107, #loc108, #loc102])
#loc246 = loc(fused[#loc109, #loc110])
#loc247 = loc(fused[#loc113, #loc114])
#loc248 = loc(fused[#loc115, #loc116])
#loc249 = loc(fused[#loc119, #loc117])
#loc250 = loc(fused[#loc120, #loc121])
#loc251 = loc(fused[#loc123, #loc121])
#loc252 = loc(fused[#loc124, #loc125])
#loc253 = loc(fused[#loc126, #loc127])
#loc254 = loc(fused[#loc128, #loc129])
#loc255 = loc(fused[#loc133, #loc134])
#loc256 = loc(fused[#loc136, #loc137, #loc138, #loc129])
#loc257 = loc(fused[#loc141, #loc142])
#loc258 = loc(fused[#loc145, #loc146])
#loc259 = loc(fused[#loc148, #loc146])
#loc260 = loc(fused[#loc149, #loc150])
#loc261 = loc(fused[#loc151, #loc152])
#loc262 = loc(fused[#loc154, #loc155, #loc156, #loc150])
#loc263 = loc(fused[#loc157, #loc158])
#loc264 = loc(fused[#loc162, #loc163])
#loc265 = loc(fused[#loc164, #loc165])
#loc266 = loc(fused[#loc168, #loc166])
#loc267 = loc(fused[#loc169, #loc170])
#loc268 = loc(fused[#loc172, #loc173, #loc174, #loc170])
#loc269 = loc(fused[#loc178, #loc177])
#loc270 = loc(fused[#loc179, #loc180])
#loc271 = loc(fused[#loc182, #loc180])
#loc272 = loc(fused[#loc183, #loc184])
#loc273 = loc(fused[#loc186, #loc187])
#loc274 = loc(fused[#loc188, #loc189])
#loc275 = loc(fused[#loc192, #loc190])
#loc276 = loc(fused[#loc193, #loc194])
#loc277 = loc(fused[#loc196, #loc194])
#loc278 = loc(fused[#loc198, #loc197])
#loc279 = loc(fused[#loc199, #loc200])
#loc280 = loc(fused[#loc202, #loc200])
#loc281 = loc(fused[#loc203, #loc204])
