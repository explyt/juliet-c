!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc56 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":104:10)
#loc57 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":104:14)
#loc58 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":104:20)
#loc59 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":104:32)
#loc178 = loc(fused[#loc56, #loc57])
#loc179 = loc(fused[#loc58, #loc59])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_divide_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc153)
  cir.func no_proto @CWE369_Divide_by_Zero__int_zero_divide_17_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc155)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc156)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc157)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc11)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    cir.br ^bb1 loc(#loc159)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<0> : !s32i loc(#loc15)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc160)
    cir.br ^bb2 loc(#loc159)
  ^bb2:  // 2 preds: ^bb1, ^bb6
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc161)
    cir.brcond %8 ^bb3, ^bb7 loc(#loc19)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc162)
  ^bb4:  // pred: ^bb3
    %9 = cir.const #cir.int<0> : !s32i loc(#loc21)
    cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc163)
    cir.br ^bb5 loc(#loc14)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc14)
  ^bb6:  // pred: ^bb5
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    %11 = cir.unary(inc, %10) : !s32i, !s32i loc(#loc24)
    cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    cir.br ^bb2 loc(#loc159)
  ^bb7:  // pred: ^bb2
    cir.br ^bb8 loc(#loc14)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc165)
  ^bb9:  // pred: ^bb8
    %12 = cir.const #cir.int<0> : !s32i loc(#loc27)
    cir.store %12, %1 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    cir.br ^bb10 loc(#loc165)
  ^bb10:  // 2 preds: ^bb9, ^bb14
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc29)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc30)
    %15 = cir.cmp(lt, %13, %14) : !s32i, !cir.bool loc(#loc167)
    cir.brcond %15 ^bb11, ^bb15 loc(#loc31)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc168)
  ^bb12:  // pred: ^bb11
    %16 = cir.const #cir.int<100> : !s32i loc(#loc33)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc34)
    %18 = cir.binop(div, %16, %17) : !s32i loc(#loc169)
    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc35)
    cir.br ^bb13 loc(#loc26)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc26)
  ^bb14:  // pred: ^bb13
    %19 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc36)
    %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc37)
    cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc170)
    cir.br ^bb10 loc(#loc165)
  ^bb15:  // pred: ^bb10
    cir.br ^bb16 loc(#loc26)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc4)
  } loc(#loc154)
  cir.func no_proto @CWE369_Divide_by_Zero__int_zero_divide_17_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc172)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc173)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    cir.return loc(#loc39)
  } loc(#loc171)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc174)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc175)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc176)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc53)
  cir.func @main(%arg0: !s32i loc(fused[#loc56, #loc57]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc58, #loc59])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc178)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc179)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc55)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc60)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc60)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc61)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc62)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc62)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc63)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc50)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_zero_divide_17_good : !cir.ptr<!cir.func<!void ()>> loc(#loc180)
    cir.call @CWE369_Divide_by_Zero__int_zero_divide_17_good() : () -> () loc(#loc65)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc51)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc52)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_zero_divide_17_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc181)
    cir.call @CWE369_Divide_by_Zero__int_zero_divide_17_bad() : () -> () loc(#loc69)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc53)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc72)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc182)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc182)
    cir.return %17 : !s32i loc(#loc182)
  } loc(#loc177)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc74)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc184)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc185)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc186)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc83)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    cir.br ^bb1 loc(#loc188)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<0> : !s32i loc(#loc87)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc189)
    cir.br ^bb2 loc(#loc188)
  ^bb2:  // 2 preds: ^bb1, ^bb6
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc190)
    cir.brcond %8 ^bb3, ^bb7 loc(#loc91)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc191)
  ^bb4:  // pred: ^bb3
    %9 = cir.const #cir.int<0> : !s32i loc(#loc93)
    cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    cir.br ^bb5 loc(#loc86)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc86)
  ^bb6:  // pred: ^bb5
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc95)
    %11 = cir.unary(inc, %10) : !s32i, !s32i loc(#loc96)
    cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc193)
    cir.br ^bb2 loc(#loc188)
  ^bb7:  // pred: ^bb2
    cir.br ^bb8 loc(#loc86)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc194)
  ^bb9:  // pred: ^bb8
    %12 = cir.const #cir.int<0> : !s32i loc(#loc99)
    cir.store %12, %1 : !s32i, !cir.ptr<!s32i> loc(#loc195)
    cir.br ^bb10 loc(#loc194)
  ^bb10:  // 2 preds: ^bb9, ^bb19
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc101)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc102)
    %15 = cir.cmp(lt, %13, %14) : !s32i, !cir.bool loc(#loc196)
    cir.brcond %15 ^bb11, ^bb20 loc(#loc103)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc197)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc198)
  ^bb13:  // pred: ^bb12
    %16 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc107)
    %17 = cir.const #cir.int<0> : !s32i loc(#loc108)
    %18 = cir.cmp(ne, %16, %17) : !s32i, !cir.bool loc(#loc199)
    cir.brcond %18 ^bb14, ^bb15 loc(#loc200)
  ^bb14:  // pred: ^bb13
    %19 = cir.const #cir.int<100> : !s32i loc(#loc112)
    %20 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    %21 = cir.binop(div, %19, %20) : !s32i loc(#loc201)
    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc114)
    cir.br ^bb16 loc(#loc110)
  ^bb15:  // pred: ^bb13
    %22 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc74)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc115)
    cir.br ^bb16 loc(#loc106)
  ^bb16:  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc106)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc98)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc98)
  ^bb19:  // pred: ^bb18
    %24 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc116)
    %25 = cir.unary(inc, %24) : !s32i, !s32i loc(#loc117)
    cir.store %25, %1 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    cir.br ^bb10 loc(#loc194)
  ^bb20:  // pred: ^bb10
    cir.br ^bb21 loc(#loc98)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc76)
  } loc(#loc183)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc204)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc205)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc206)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc125)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc126)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    cir.br ^bb1 loc(#loc208)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<0> : !s32i loc(#loc130)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    cir.br ^bb2 loc(#loc208)
  ^bb2:  // 2 preds: ^bb1, ^bb6
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc132)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc133)
    %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc210)
    cir.brcond %8 ^bb3, ^bb7 loc(#loc134)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc211)
  ^bb4:  // pred: ^bb3
    %9 = cir.const #cir.int<7> : !s32i loc(#loc136)
    cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    cir.br ^bb5 loc(#loc129)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc129)
  ^bb6:  // pred: ^bb5
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc138)
    %11 = cir.unary(inc, %10) : !s32i, !s32i loc(#loc139)
    cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc213)
    cir.br ^bb2 loc(#loc208)
  ^bb7:  // pred: ^bb2
    cir.br ^bb8 loc(#loc129)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc214)
  ^bb9:  // pred: ^bb8
    %12 = cir.const #cir.int<0> : !s32i loc(#loc142)
    cir.store %12, %1 : !s32i, !cir.ptr<!s32i> loc(#loc215)
    cir.br ^bb10 loc(#loc214)
  ^bb10:  // 2 preds: ^bb9, ^bb14
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc144)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc145)
    %15 = cir.cmp(lt, %13, %14) : !s32i, !cir.bool loc(#loc216)
    cir.brcond %15 ^bb11, ^bb15 loc(#loc146)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc217)
  ^bb12:  // pred: ^bb11
    %16 = cir.const #cir.int<100> : !s32i loc(#loc148)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    %18 = cir.binop(div, %16, %17) : !s32i loc(#loc218)
    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc150)
    cir.br ^bb13 loc(#loc141)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc141)
  ^bb14:  // pred: ^bb13
    %19 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc152)
    cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    cir.br ^bb10 loc(#loc214)
  ^bb15:  // pred: ^bb10
    cir.br ^bb16 loc(#loc141)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc119)
  } loc(#loc203)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_divide_17.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":22:1)
#loc4 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":38:1)
#loc5 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":24:5)
#loc6 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":24:9)
#loc7 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":24:11)
#loc8 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":25:5)
#loc9 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":25:9)
#loc10 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":27:13)
#loc11 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":27:12)
#loc12 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":27:5)
#loc13 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":28:5)
#loc14 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":32:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":28:13)
#loc16 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":28:9)
#loc17 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":28:16)
#loc18 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":28:20)
#loc19 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":28:18)
#loc20 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":29:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":31:16)
#loc22 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":31:9)
#loc23 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":28:24)
#loc24 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":28:23)
#loc25 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":33:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":37:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":33:13)
#loc28 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":33:9)
#loc29 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":33:16)
#loc30 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":33:20)
#loc31 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":33:18)
#loc32 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":34:5)
#loc33 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":36:22)
#loc34 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":36:28)
#loc35 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":36:9)
#loc36 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":33:24)
#loc37 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":33:23)
#loc38 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":89:1)
#loc39 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":93:1)
#loc40 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":91:5)
#loc41 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":91:13)
#loc42 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":92:5)
#loc43 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":92:13)
#loc44 = loc("/usr/include/stdlib.h":575:1)
#loc45 = loc("/usr/include/stdlib.h":575:41)
#loc46 = loc("/usr/include/time.h":76:1)
#loc47 = loc("/usr/include/time.h":76:38)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc50 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":109:15)
#loc51 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":111:15)
#loc52 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":114:15)
#loc53 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":116:15)
#loc54 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":104:1)
#loc55 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":119:1)
#loc60 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":105:1)
#loc61 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":107:27)
#loc62 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":107:22)
#loc63 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":107:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":109:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":110:5)
#loc66 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":110:52)
#loc67 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":111:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":114:5)
#loc69 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":115:5)
#loc70 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":115:51)
#loc71 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":116:5)
#loc72 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":118:12)
#loc73 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":118:5)
#loc74 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":65:23)
#loc75 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":45:1)
#loc76 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":68:1)
#loc77 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":47:5)
#loc78 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":47:9)
#loc79 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":47:11)
#loc80 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":48:5)
#loc81 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":48:9)
#loc82 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":50:13)
#loc83 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":50:12)
#loc84 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":50:5)
#loc85 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":51:5)
#loc86 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":55:5)
#loc87 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":51:13)
#loc88 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":51:9)
#loc89 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":51:16)
#loc90 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":51:20)
#loc91 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":51:18)
#loc92 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":52:5)
#loc93 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":54:16)
#loc94 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":54:9)
#loc95 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":51:24)
#loc96 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":51:23)
#loc97 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":56:5)
#loc98 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":67:5)
#loc99 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":56:13)
#loc100 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":56:9)
#loc101 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":56:16)
#loc102 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":56:20)
#loc103 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":56:18)
#loc104 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":57:5)
#loc105 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":59:9)
#loc106 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":66:9)
#loc107 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":59:13)
#loc108 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":59:21)
#loc109 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":60:9)
#loc110 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":62:9)
#loc111 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":64:9)
#loc112 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":61:26)
#loc113 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":61:32)
#loc114 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":61:13)
#loc115 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":65:13)
#loc116 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":56:24)
#loc117 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":56:23)
#loc118 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":71:1)
#loc119 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":87:1)
#loc120 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":73:5)
#loc121 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":73:9)
#loc122 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":73:11)
#loc123 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":74:5)
#loc124 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":74:9)
#loc125 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":76:13)
#loc126 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":76:12)
#loc127 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":76:5)
#loc128 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":77:5)
#loc129 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":81:5)
#loc130 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":77:13)
#loc131 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":77:9)
#loc132 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":77:16)
#loc133 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":77:20)
#loc134 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":77:18)
#loc135 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":78:5)
#loc136 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":80:16)
#loc137 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":80:9)
#loc138 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":77:24)
#loc139 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":77:23)
#loc140 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":82:5)
#loc141 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":86:5)
#loc142 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":82:13)
#loc143 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":82:9)
#loc144 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":82:16)
#loc145 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":82:20)
#loc146 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":82:18)
#loc147 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":83:5)
#loc148 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":85:22)
#loc149 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":85:28)
#loc150 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":85:9)
#loc151 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":82:24)
#loc152 = loc("CWE369_Divide_by_Zero__int_zero_divide_17.c":82:23)
#loc153 = loc(fused[#loc1, #loc2])
#loc154 = loc(fused[#loc3, #loc4])
#loc155 = loc(fused[#loc5, #loc6])
#loc156 = loc(fused[#loc5, #loc7])
#loc157 = loc(fused[#loc8, #loc9])
#loc158 = loc(fused[#loc12, #loc10])
#loc159 = loc(fused[#loc13, #loc14])
#loc160 = loc(fused[#loc16, #loc15])
#loc161 = loc(fused[#loc17, #loc18])
#loc162 = loc(fused[#loc20, #loc14])
#loc163 = loc(fused[#loc22, #loc21])
#loc164 = loc(fused[#loc24, #loc23])
#loc165 = loc(fused[#loc25, #loc26])
#loc166 = loc(fused[#loc28, #loc27])
#loc167 = loc(fused[#loc29, #loc30])
#loc168 = loc(fused[#loc32, #loc26])
#loc169 = loc(fused[#loc33, #loc34])
#loc170 = loc(fused[#loc37, #loc36])
#loc171 = loc(fused[#loc38, #loc39])
#loc172 = loc(fused[#loc40, #loc41])
#loc173 = loc(fused[#loc42, #loc43])
#loc174 = loc(fused[#loc44, #loc45])
#loc175 = loc(fused[#loc46, #loc47])
#loc176 = loc(fused[#loc48, #loc49])
#loc177 = loc(fused[#loc54, #loc55])
#loc180 = loc(fused[#loc65, #loc66])
#loc181 = loc(fused[#loc69, #loc70])
#loc182 = loc(fused[#loc73, #loc72])
#loc183 = loc(fused[#loc75, #loc76])
#loc184 = loc(fused[#loc77, #loc78])
#loc185 = loc(fused[#loc77, #loc79])
#loc186 = loc(fused[#loc80, #loc81])
#loc187 = loc(fused[#loc84, #loc82])
#loc188 = loc(fused[#loc85, #loc86])
#loc189 = loc(fused[#loc88, #loc87])
#loc190 = loc(fused[#loc89, #loc90])
#loc191 = loc(fused[#loc92, #loc86])
#loc192 = loc(fused[#loc94, #loc93])
#loc193 = loc(fused[#loc96, #loc95])
#loc194 = loc(fused[#loc97, #loc98])
#loc195 = loc(fused[#loc100, #loc99])
#loc196 = loc(fused[#loc101, #loc102])
#loc197 = loc(fused[#loc104, #loc98])
#loc198 = loc(fused[#loc105, #loc106])
#loc199 = loc(fused[#loc107, #loc108])
#loc200 = loc(fused[#loc109, #loc110, #loc111, #loc106])
#loc201 = loc(fused[#loc112, #loc113])
#loc202 = loc(fused[#loc117, #loc116])
#loc203 = loc(fused[#loc118, #loc119])
#loc204 = loc(fused[#loc120, #loc121])
#loc205 = loc(fused[#loc120, #loc122])
#loc206 = loc(fused[#loc123, #loc124])
#loc207 = loc(fused[#loc127, #loc125])
#loc208 = loc(fused[#loc128, #loc129])
#loc209 = loc(fused[#loc131, #loc130])
#loc210 = loc(fused[#loc132, #loc133])
#loc211 = loc(fused[#loc135, #loc129])
#loc212 = loc(fused[#loc137, #loc136])
#loc213 = loc(fused[#loc139, #loc138])
#loc214 = loc(fused[#loc140, #loc141])
#loc215 = loc(fused[#loc143, #loc142])
#loc216 = loc(fused[#loc144, #loc145])
#loc217 = loc(fused[#loc147, #loc141])
#loc218 = loc(fused[#loc148, #loc149])
#loc219 = loc(fused[#loc152, #loc151])
