!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_scanf_14.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" external @globalFive : !s32i {alignment = 4 : i64} loc(#loc77)
  cir.func private @__isoc99_scanf(!cir.ptr<!s8i>, ...) -> !s32i loc(#loc78)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%99s" : !cir.array<!s8i x 4>, trailing_zeros> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE252_Unchecked_Return_Value__char_scanf_14_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc80)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc81)
    cir.br ^bb1 loc(#loc82)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc77)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc15)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc83)
    cir.brcond %5 ^bb2, ^bb5 loc(#loc84)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc85)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc80)
    cir.store %6, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc80)
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc11)
    cir.store %7, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc81)
    %8 = cir.get_global @__isoc99_scanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, ...)>> loc(#loc19)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc5)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc5)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc20)
    %12 = cir.call @__isoc99_scanf(%10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc19)
    cir.br ^bb4 loc(#loc18)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc13)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc13)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc7)
  } loc(#loc79)
  cir.func no_proto @CWE252_Unchecked_Return_Value__char_scanf_14_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc87)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc23)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc88)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc25)
    cir.return loc(#loc22)
  } loc(#loc86)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc89)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc29)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"scanf failed!\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc30)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc91)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc92)
    cir.br ^bb1 loc(#loc93)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc77)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc40)
    %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc94)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc95)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc29)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc29)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc44)
    cir.br ^bb10 loc(#loc42)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc96)
  ^bb4:  // pred: ^bb3
    %8 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc91)
    cir.store %8, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc91)
    %9 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc36)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc92)
    cir.br ^bb5 loc(#loc97)
  ^bb5:  // pred: ^bb4
    %10 = cir.get_global @__isoc99_scanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, ...)>> loc(#loc49)
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc50)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc50)
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
    %14 = cir.call @__isoc99_scanf(%12, %13) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc49)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc52)
    %17 = cir.cmp(eq, %14, %16) : !s32i, !cir.bool loc(#loc98)
    cir.brcond %17 ^bb6, ^bb7 loc(#loc99)
  ^bb6:  // pred: ^bb5
    %18 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc30)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc30)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    cir.br ^bb7 loc(#loc48)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc48)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc46)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc38)
  ^bb10:  // 2 preds: ^bb2, ^bb9
    cir.br ^bb11 loc(#loc38)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc32)
  } loc(#loc90)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc101)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc102)
    cir.br ^bb1 loc(#loc103)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc77)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc63)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc64)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc104)
    cir.brcond %5 ^bb2, ^bb9 loc(#loc105)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc106)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc101)
    cir.store %6, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc101)
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc60)
    cir.store %7, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc102)
    cir.br ^bb4 loc(#loc107)
  ^bb4:  // pred: ^bb3
    %8 = cir.get_global @__isoc99_scanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, ...)>> loc(#loc70)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc71)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc71)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc72)
    %12 = cir.call @__isoc99_scanf(%10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc70)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc73)
    %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc73)
    %15 = cir.cmp(eq, %12, %14) : !s32i, !cir.bool loc(#loc108)
    cir.brcond %15 ^bb5, ^bb6 loc(#loc109)
  ^bb5:  // pred: ^bb4
    %16 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc75)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    cir.br ^bb6 loc(#loc69)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc69)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc67)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc62)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc62)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc56)
  } loc(#loc100)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_scanf_14.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":118:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":118:12)
#loc3 = loc("/usr/include/stdio.h":466:1)
#loc4 = loc("/usr/include/stdio.h":466:12)
#loc5 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":34:19)
#loc6 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":24:1)
#loc7 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":37:1)
#loc8 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":31:13)
#loc9 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":31:36)
#loc10 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":32:13)
#loc11 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":32:27)
#loc12 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":26:5)
#loc13 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":36:5)
#loc14 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":26:8)
#loc15 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":26:20)
#loc16 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":27:5)
#loc17 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":28:9)
#loc18 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":35:9)
#loc19 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":34:13)
#loc20 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":34:29)
#loc21 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":86:1)
#loc22 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":90:1)
#loc23 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":88:5)
#loc24 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":88:11)
#loc25 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":89:5)
#loc26 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":89:11)
#loc27 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc28 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc29 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":49:19)
#loc30 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":61:27)
#loc31 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":44:1)
#loc32 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":65:1)
#loc33 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":56:13)
#loc34 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":56:36)
#loc35 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":57:13)
#loc36 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":57:27)
#loc37 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":46:5)
#loc38 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":64:5)
#loc39 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":46:8)
#loc40 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":46:20)
#loc41 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":47:5)
#loc42 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":50:5)
#loc43 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":52:5)
#loc44 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":49:9)
#loc45 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":53:9)
#loc46 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":63:9)
#loc47 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":59:13)
#loc48 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":62:13)
#loc49 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":59:17)
#loc50 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":59:23)
#loc51 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":59:33)
#loc52 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":59:42)
#loc53 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":60:13)
#loc54 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":61:17)
#loc55 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":68:1)
#loc56 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":84:1)
#loc57 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":75:13)
#loc58 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":75:36)
#loc59 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":76:13)
#loc60 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":76:27)
#loc61 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":70:5)
#loc62 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":83:5)
#loc63 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":70:8)
#loc64 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":70:20)
#loc65 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":71:5)
#loc66 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":72:9)
#loc67 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":82:9)
#loc68 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":78:13)
#loc69 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":81:13)
#loc70 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":78:17)
#loc71 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":78:23)
#loc72 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":78:33)
#loc73 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":78:42)
#loc74 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":79:13)
#loc75 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":80:27)
#loc76 = loc("CWE252_Unchecked_Return_Value__char_scanf_14.c":80:17)
#loc77 = loc(fused[#loc1, #loc2])
#loc78 = loc(fused[#loc3, #loc4])
#loc79 = loc(fused[#loc6, #loc7])
#loc80 = loc(fused[#loc8, #loc9])
#loc81 = loc(fused[#loc10, #loc11])
#loc82 = loc(fused[#loc12, #loc13])
#loc83 = loc(fused[#loc14, #loc15])
#loc84 = loc(fused[#loc16, #loc13])
#loc85 = loc(fused[#loc17, #loc18])
#loc86 = loc(fused[#loc21, #loc22])
#loc87 = loc(fused[#loc23, #loc24])
#loc88 = loc(fused[#loc25, #loc26])
#loc89 = loc(fused[#loc27, #loc28])
#loc90 = loc(fused[#loc31, #loc32])
#loc91 = loc(fused[#loc33, #loc34])
#loc92 = loc(fused[#loc35, #loc36])
#loc93 = loc(fused[#loc37, #loc38])
#loc94 = loc(fused[#loc39, #loc40])
#loc95 = loc(fused[#loc41, #loc42, #loc43, #loc38])
#loc96 = loc(fused[#loc45, #loc46])
#loc97 = loc(fused[#loc47, #loc48])
#loc98 = loc(fused[#loc49, #loc52])
#loc99 = loc(fused[#loc53, #loc48])
#loc100 = loc(fused[#loc55, #loc56])
#loc101 = loc(fused[#loc57, #loc58])
#loc102 = loc(fused[#loc59, #loc60])
#loc103 = loc(fused[#loc61, #loc62])
#loc104 = loc(fused[#loc63, #loc64])
#loc105 = loc(fused[#loc65, #loc62])
#loc106 = loc(fused[#loc66, #loc67])
#loc107 = loc(fused[#loc68, #loc69])
#loc108 = loc(fused[#loc70, #loc73])
#loc109 = loc(fused[#loc74, #loc69])
