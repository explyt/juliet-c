!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc9 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":25:21)
#loc10 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":25:25)
#loc26 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":40:12)
#loc52 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":152:10)
#loc53 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":152:14)
#loc54 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":152:20)
#loc55 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":152:32)
#loc76 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":55:26)
#loc77 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":55:30)
#loc104 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":82:12)
#loc114 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":88:26)
#loc115 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":88:30)
#loc140 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":110:12)
#loc150 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":116:25)
#loc151 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":116:29)
#loc177 = loc(fused[#loc9, #loc10])
#loc194 = loc(fused[#loc52, #loc53])
#loc195 = loc(fused[#loc54, #loc55])
#loc201 = loc(fused[#loc76, #loc77])
#loc215 = loc(fused[#loc114, #loc115])
#loc229 = loc(fused[#loc150, #loc151])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc173)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc174)
  cir.func private @printIntLine(!s32i) loc(#loc175)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc9, #loc10])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc177)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc11)
    cir.br ^bb1 loc(#loc178)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc174)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc14)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc179)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<100> : !s32i loc(#loc16)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %6 = cir.binop(div, %4, %5) : !s32i loc(#loc180)
    cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc18)
    cir.br ^bb3 loc(#loc13)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc13)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc8)
  } loc(#loc176)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_divide_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc182)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc24)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc26)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc26)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc26)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc26)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc26)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc26)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc26)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc26)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc26)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc26)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc26)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc26)
    cir.br ^bb3(%18 : !u32i) loc(#loc26)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc26)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc26)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc26)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc26)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc26)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc26)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc26)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc26)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc26)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc26)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc26)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc26)
    cir.br ^bb3(%34 : !u32i) loc(#loc26)
  ^bb3(%35: !u32i loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":40:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc26)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc26)
    cir.store %36, %0 : !s32i, !cir.ptr<!s32i> loc(#loc184)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %38 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc174)
    cir.store %37, %38 : !s32i, !cir.ptr<!s32i> loc(#loc185)
    %39 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
    cir.call @badSink(%39) : (!s32i) -> () loc(#loc31)
    cir.return loc(#loc20)
  } loc(#loc181)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_divide_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc187)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc188)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc189)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc33)
  } loc(#loc186)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc190)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc191)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc192)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc49)
  cir.func @main(%arg0: !s32i loc(fused[#loc52, #loc53]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc54, #loc55])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc194)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc195)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc51)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc56)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc56)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc57)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc58)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc58)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc59)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc46)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_rand_divide_21_good : !cir.ptr<!cir.func<!void ()>> loc(#loc196)
    cir.call @CWE369_Divide_by_Zero__int_rand_divide_21_good() : () -> () loc(#loc61)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc47)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc48)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_rand_divide_21_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc197)
    cir.call @CWE369_Divide_by_Zero__int_rand_divide_21_bad() : () -> () loc(#loc65)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc49)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc68)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc198)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc198)
    cir.return %17 : !s32i loc(#loc198)
  } loc(#loc193)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc199)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc72)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc73)
  cir.func internal private @goodB2G1Sink(%arg0: !s32i loc(fused[#loc76, #loc77])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc201)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc78)
    cir.br ^bb1 loc(#loc202)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc199)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc81)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc81)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc203)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc72)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    cir.br ^bb9 loc(#loc83)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc204)
  ^bb4:  // pred: ^bb3
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc88)
    %7 = cir.const #cir.int<0> : !s32i loc(#loc89)
    %8 = cir.cmp(ne, %6, %7) : !s32i, !cir.bool loc(#loc205)
    cir.brcond %8 ^bb5, ^bb6 loc(#loc206)
  ^bb5:  // pred: ^bb4
    %9 = cir.const #cir.int<100> : !s32i loc(#loc93)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
    %11 = cir.binop(div, %9, %10) : !s32i loc(#loc207)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc95)
    cir.br ^bb7 loc(#loc91)
  ^bb6:  // pred: ^bb4
    %12 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc73)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    cir.br ^bb7 loc(#loc87)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc87)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc80)
  ^bb9:  // 2 preds: ^bb2, ^bb8
    cir.br ^bb10 loc(#loc80)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc75)
  } loc(#loc200)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc209)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc101)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc102)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc210)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc104)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc104)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc104)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc104)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc104)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc104)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc104)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc104)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc104)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc104)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc104)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc104)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc104)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc104)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc104)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc104)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc104)
    cir.br ^bb3(%18 : !u32i) loc(#loc104)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc104)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc104)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc104)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc104)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc104)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc104)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc104)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc104)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc104)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc104)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc104)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc104)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc104)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc104)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc104)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc104)
    cir.br ^bb3(%34 : !u32i) loc(#loc104)
  ^bb3(%35: !u32i loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":82:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc104)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc104)
    cir.store %36, %0 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    %37 = cir.const #cir.int<0> : !s32i loc(#loc106)
    %38 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc199)
    cir.store %37, %38 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    %39 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc108)
    cir.call @goodB2G1Sink(%39) : (!s32i) -> () loc(#loc109)
    cir.return loc(#loc98)
  } loc(#loc208)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc213)
  cir.func internal private @goodB2G2Sink(%arg0: !s32i loc(fused[#loc114, #loc115])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc215)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc116)
    cir.br ^bb1 loc(#loc216)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc213)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc119)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc119)
    cir.brcond %3 ^bb2, ^bb8 loc(#loc217)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc218)
  ^bb3:  // pred: ^bb2
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc123)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc124)
    %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc219)
    cir.brcond %6 ^bb4, ^bb5 loc(#loc220)
  ^bb4:  // pred: ^bb3
    %7 = cir.const #cir.int<100> : !s32i loc(#loc128)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
    %9 = cir.binop(div, %7, %8) : !s32i loc(#loc221)
    cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc130)
    cir.br ^bb6 loc(#loc126)
  ^bb5:  // pred: ^bb3
    %10 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc131)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc131)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc132)
    cir.br ^bb6 loc(#loc122)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc122)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc118)
  ^bb8:  // 2 preds: ^bb1, ^bb7
    cir.br ^bb9 loc(#loc118)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc113)
  } loc(#loc214)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc223)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc137)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc138)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc140)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc140)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc140)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc140)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc140)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc140)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc140)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc140)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc140)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc140)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc140)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc140)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc140)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc140)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc140)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc140)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc140)
    cir.br ^bb3(%18 : !u32i) loc(#loc140)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc140)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc140)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc140)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc140)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc140)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc140)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc140)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc140)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc140)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc140)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc140)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc140)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc140)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc140)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc140)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc140)
    cir.br ^bb3(%34 : !u32i) loc(#loc140)
  ^bb3(%35: !u32i loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":110:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc140)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc140)
    cir.store %36, %0 : !s32i, !cir.ptr<!s32i> loc(#loc225)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc142)
    %38 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc213)
    cir.store %37, %38 : !s32i, !cir.ptr<!s32i> loc(#loc226)
    %39 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc144)
    cir.call @goodB2G2Sink(%39) : (!s32i) -> () loc(#loc145)
    cir.return loc(#loc134)
  } loc(#loc222)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc227)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc150, #loc151])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc229)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc152)
    cir.br ^bb1 loc(#loc230)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc227)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc155)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc155)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc231)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<100> : !s32i loc(#loc157)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc158)
    %6 = cir.binop(div, %4, %5) : !s32i loc(#loc232)
    cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc159)
    cir.br ^bb3 loc(#loc154)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc154)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc149)
  } loc(#loc228)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc234)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc164)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc165)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc235)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc167)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc236)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc169)
    %5 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc227)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc237)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc171)
    cir.call @goodG2BSink(%6) : (!s32i) -> () loc(#loc172)
    cir.return loc(#loc161)
  } loc(#loc233)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_21.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":23:1)
#loc4 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":23:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":25:1)
#loc8 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":32:1)
#loc11 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":26:1)
#loc12 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":27:5)
#loc13 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":31:5)
#loc14 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":27:8)
#loc15 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":28:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":30:22)
#loc17 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":30:28)
#loc18 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":30:9)
#loc19 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":34:1)
#loc20 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":43:1)
#loc21 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":36:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":36:9)
#loc23 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":38:13)
#loc24 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":38:12)
#loc25 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":38:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":40:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":41:17)
#loc29 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":41:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":42:13)
#loc31 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":42:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":136:1)
#loc33 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":141:1)
#loc34 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":138:5)
#loc35 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":138:14)
#loc36 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":139:5)
#loc37 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":139:14)
#loc38 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":140:5)
#loc39 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":140:13)
#loc40 = loc("/usr/include/stdlib.h":575:1)
#loc41 = loc("/usr/include/stdlib.h":575:41)
#loc42 = loc("/usr/include/time.h":76:1)
#loc43 = loc("/usr/include/time.h":76:38)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":157:15)
#loc47 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":159:15)
#loc48 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":162:15)
#loc49 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":164:15)
#loc50 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":152:1)
#loc51 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":167:1)
#loc56 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":153:1)
#loc57 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":155:27)
#loc58 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":155:22)
#loc59 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":155:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":157:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":158:5)
#loc62 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":158:52)
#loc63 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":159:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":162:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":163:5)
#loc66 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":163:51)
#loc67 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":164:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":166:12)
#loc69 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":166:5)
#loc70 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":50:1)
#loc71 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":50:29)
#loc72 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":60:19)
#loc73 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":71:23)
#loc74 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":55:1)
#loc75 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":74:1)
#loc78 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":56:1)
#loc79 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":57:5)
#loc80 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":73:5)
#loc81 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":57:8)
#loc82 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":58:5)
#loc83 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":61:5)
#loc84 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":63:5)
#loc85 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":60:9)
#loc86 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":65:9)
#loc87 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":72:9)
#loc88 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":65:13)
#loc89 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":65:21)
#loc90 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":66:9)
#loc91 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":68:9)
#loc92 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":70:9)
#loc93 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":67:26)
#loc94 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":67:32)
#loc95 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":67:13)
#loc96 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":71:13)
#loc97 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":76:1)
#loc98 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":85:1)
#loc99 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":78:5)
#loc100 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":78:9)
#loc101 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":80:13)
#loc102 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":80:12)
#loc103 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":80:5)
#loc105 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":82:5)
#loc106 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":83:22)
#loc107 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":83:5)
#loc108 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":84:18)
#loc109 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":84:5)
#loc110 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":51:1)
#loc111 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":51:29)
#loc112 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":88:1)
#loc113 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":102:1)
#loc116 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":89:1)
#loc117 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":90:5)
#loc118 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":101:5)
#loc119 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":90:8)
#loc120 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":91:5)
#loc121 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":93:9)
#loc122 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":100:9)
#loc123 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":93:13)
#loc124 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":93:21)
#loc125 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":94:9)
#loc126 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":96:9)
#loc127 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":98:9)
#loc128 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":95:26)
#loc129 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":95:32)
#loc130 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":95:13)
#loc131 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":99:23)
#loc132 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":99:13)
#loc133 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":104:1)
#loc134 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":113:1)
#loc135 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":106:5)
#loc136 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":106:9)
#loc137 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":108:13)
#loc138 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":108:12)
#loc139 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":108:5)
#loc141 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":110:5)
#loc142 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":111:22)
#loc143 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":111:5)
#loc144 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":112:18)
#loc145 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":112:5)
#loc146 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":52:1)
#loc147 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":52:28)
#loc148 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":116:1)
#loc149 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":123:1)
#loc152 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":117:1)
#loc153 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":118:5)
#loc154 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":122:5)
#loc155 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":118:8)
#loc156 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":119:5)
#loc157 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":121:22)
#loc158 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":121:28)
#loc159 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":121:9)
#loc160 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":125:1)
#loc161 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":134:1)
#loc162 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":127:5)
#loc163 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":127:9)
#loc164 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":129:13)
#loc165 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":129:12)
#loc166 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":129:5)
#loc167 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":131:12)
#loc168 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":131:5)
#loc169 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":132:21)
#loc170 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":132:5)
#loc171 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":133:17)
#loc172 = loc("CWE369_Divide_by_Zero__int_rand_divide_21.c":133:5)
#loc173 = loc(fused[#loc1, #loc2])
#loc174 = loc(fused[#loc3, #loc4])
#loc175 = loc(fused[#loc5, #loc6])
#loc176 = loc(fused[#loc7, #loc8])
#loc178 = loc(fused[#loc12, #loc13])
#loc179 = loc(fused[#loc15, #loc13])
#loc180 = loc(fused[#loc16, #loc17])
#loc181 = loc(fused[#loc19, #loc20])
#loc182 = loc(fused[#loc21, #loc22])
#loc183 = loc(fused[#loc25, #loc23])
#loc184 = loc(fused[#loc27, #loc26])
#loc185 = loc(fused[#loc29, #loc28])
#loc186 = loc(fused[#loc32, #loc33])
#loc187 = loc(fused[#loc34, #loc35])
#loc188 = loc(fused[#loc36, #loc37])
#loc189 = loc(fused[#loc38, #loc39])
#loc190 = loc(fused[#loc40, #loc41])
#loc191 = loc(fused[#loc42, #loc43])
#loc192 = loc(fused[#loc44, #loc45])
#loc193 = loc(fused[#loc50, #loc51])
#loc196 = loc(fused[#loc61, #loc62])
#loc197 = loc(fused[#loc65, #loc66])
#loc198 = loc(fused[#loc69, #loc68])
#loc199 = loc(fused[#loc70, #loc71])
#loc200 = loc(fused[#loc74, #loc75])
#loc202 = loc(fused[#loc79, #loc80])
#loc203 = loc(fused[#loc82, #loc83, #loc84, #loc80])
#loc204 = loc(fused[#loc86, #loc87])
#loc205 = loc(fused[#loc88, #loc89])
#loc206 = loc(fused[#loc90, #loc91, #loc92, #loc87])
#loc207 = loc(fused[#loc93, #loc94])
#loc208 = loc(fused[#loc97, #loc98])
#loc209 = loc(fused[#loc99, #loc100])
#loc210 = loc(fused[#loc103, #loc101])
#loc211 = loc(fused[#loc105, #loc104])
#loc212 = loc(fused[#loc107, #loc106])
#loc213 = loc(fused[#loc110, #loc111])
#loc214 = loc(fused[#loc112, #loc113])
#loc216 = loc(fused[#loc117, #loc118])
#loc217 = loc(fused[#loc120, #loc118])
#loc218 = loc(fused[#loc121, #loc122])
#loc219 = loc(fused[#loc123, #loc124])
#loc220 = loc(fused[#loc125, #loc126, #loc127, #loc122])
#loc221 = loc(fused[#loc128, #loc129])
#loc222 = loc(fused[#loc133, #loc134])
#loc223 = loc(fused[#loc135, #loc136])
#loc224 = loc(fused[#loc139, #loc137])
#loc225 = loc(fused[#loc141, #loc140])
#loc226 = loc(fused[#loc143, #loc142])
#loc227 = loc(fused[#loc146, #loc147])
#loc228 = loc(fused[#loc148, #loc149])
#loc230 = loc(fused[#loc153, #loc154])
#loc231 = loc(fused[#loc156, #loc154])
#loc232 = loc(fused[#loc157, #loc158])
#loc233 = loc(fused[#loc160, #loc161])
#loc234 = loc(fused[#loc162, #loc163])
#loc235 = loc(fused[#loc166, #loc164])
#loc236 = loc(fused[#loc168, #loc167])
#loc237 = loc(fused[#loc170, #loc169])
