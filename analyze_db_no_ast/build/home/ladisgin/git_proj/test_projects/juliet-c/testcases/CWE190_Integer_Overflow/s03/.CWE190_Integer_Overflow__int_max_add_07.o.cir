!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_add_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc176)
  cir.func private  @printIntLine(!s32i) loc(#loc177)
  cir.func no_proto  @CWE190_Integer_Overflow__int_max_add_07_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc179)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc176)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc13)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc14)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc182)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc15)
      cir.if %6 {
        %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc17)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc184)
      } loc(#loc183)
    } loc(#loc181)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc176)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc21)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc22)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc186)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc23)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc189)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc29)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc28)
          %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc29)
          cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc189)
          %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc30)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc31)
        } loc(#loc188)
      } loc(#loc187)
    } loc(#loc185)
    cir.return loc(#loc6)
  } loc(#loc178)
  cir.func no_proto  @CWE190_Integer_Overflow__int_max_add_07_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc191)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc192)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc193)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc194)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    cir.return loc(#loc33)
  } loc(#loc190)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc195)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc44)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc45)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc197)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc50)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc198)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc176)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc54)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc55)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc200)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc56)
      cir.if %6 {
        %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc58)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc202)
      } loc(#loc201)
    } loc(#loc199)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc176)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc62)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc63)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !s32i loc(#loc204)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc64)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc44)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc44)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc68)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
          %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc72)
          %9 = cir.cmp(lt, %7, %8) : !s32i, !s32i loc(#loc207)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc73)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc209)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc78)
            %14 = cir.binop(add, %12, %13) nsw : !s32i loc(#loc79)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc209)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc80)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc81)
          } else {
            %11 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc45)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc45)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc82)
          } loc(#loc208)
        } loc(#loc206)
      } loc(#loc205)
    } loc(#loc203)
    cir.return loc(#loc47)
  } loc(#loc196)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc211)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc87)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc176)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc91)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc92)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc214)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc93)
      cir.if %6 {
        %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc95)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc216)
      } loc(#loc215)
    } loc(#loc213)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc176)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc99)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc100)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc218)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc101)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc105)
          %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc106)
          %9 = cir.cmp(lt, %7, %8) : !s32i, !s32i loc(#loc221)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc107)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc223)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc113)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc112)
            %14 = cir.binop(add, %12, %13) nsw : !s32i loc(#loc113)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc223)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc114)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc115)
          } else {
            %11 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc116)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc116)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc117)
          } loc(#loc222)
        } loc(#loc220)
      } loc(#loc219)
    } loc(#loc217)
    cir.return loc(#loc84)
  } loc(#loc210)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc225)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc122)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc226)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc176)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc126)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc127)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !s32i loc(#loc228)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc128)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc132)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc132)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc133)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc134)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc230)
      } loc(#loc229)
    } loc(#loc227)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc176)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc138)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc139)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc232)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc140)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc235)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc146)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc145)
          %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc146)
          cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc235)
          %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc147)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc148)
        } loc(#loc234)
      } loc(#loc233)
    } loc(#loc231)
    cir.return loc(#loc119)
  } loc(#loc224)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc237)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc153)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc238)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc176)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc157)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc158)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc240)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc159)
      cir.if %6 {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc161)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc242)
      } loc(#loc241)
    } loc(#loc239)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc176)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc165)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc166)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc244)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc167)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc247)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc173)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc172)
          %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc173)
          cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc247)
          %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc174)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc175)
        } loc(#loc246)
      } loc(#loc245)
    } loc(#loc243)
    cir.return loc(#loc150)
  } loc(#loc236)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_add_07.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int_max_add_07.c":23:1)
#loc2 = loc("CWE190_Integer_Overflow__int_max_add_07.c":23:25)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_max_add_07.c":27:1)
#loc6 = loc("CWE190_Integer_Overflow__int_max_add_07.c":45:1)
#loc7 = loc("CWE190_Integer_Overflow__int_max_add_07.c":29:5)
#loc8 = loc("CWE190_Integer_Overflow__int_max_add_07.c":29:9)
#loc9 = loc("CWE190_Integer_Overflow__int_max_add_07.c":31:12)
#loc10 = loc("CWE190_Integer_Overflow__int_max_add_07.c":31:5)
#loc11 = loc("CWE190_Integer_Overflow__int_max_add_07.c":32:5)
#loc12 = loc("CWE190_Integer_Overflow__int_max_add_07.c":36:5)
#loc13 = loc("CWE190_Integer_Overflow__int_max_add_07.c":32:8)
#loc14 = loc("CWE190_Integer_Overflow__int_max_add_07.c":32:20)
#loc15 = loc("CWE190_Integer_Overflow__int_max_add_07.c":32:18)
#loc16 = loc("CWE190_Integer_Overflow__int_max_add_07.c":33:5)
#loc17 = loc("CWE190_Integer_Overflow__int_max_add_07.c":35:16)
#loc18 = loc("CWE190_Integer_Overflow__int_max_add_07.c":35:9)
#loc19 = loc("CWE190_Integer_Overflow__int_max_add_07.c":37:5)
#loc20 = loc("CWE190_Integer_Overflow__int_max_add_07.c":44:5)
#loc21 = loc("CWE190_Integer_Overflow__int_max_add_07.c":37:8)
#loc22 = loc("CWE190_Integer_Overflow__int_max_add_07.c":37:20)
#loc23 = loc("CWE190_Integer_Overflow__int_max_add_07.c":37:18)
#loc24 = loc("CWE190_Integer_Overflow__int_max_add_07.c":38:5)
#loc25 = loc("CWE190_Integer_Overflow__int_max_add_07.c":39:9)
#loc26 = loc("CWE190_Integer_Overflow__int_max_add_07.c":43:9)
#loc27 = loc("CWE190_Integer_Overflow__int_max_add_07.c":41:13)
#loc28 = loc("CWE190_Integer_Overflow__int_max_add_07.c":41:33)
#loc29 = loc("CWE190_Integer_Overflow__int_max_add_07.c":41:26)
#loc30 = loc("CWE190_Integer_Overflow__int_max_add_07.c":42:26)
#loc31 = loc("CWE190_Integer_Overflow__int_max_add_07.c":42:13)
#loc32 = loc("CWE190_Integer_Overflow__int_max_add_07.c":155:1)
#loc33 = loc("CWE190_Integer_Overflow__int_max_add_07.c":161:1)
#loc34 = loc("CWE190_Integer_Overflow__int_max_add_07.c":157:5)
#loc35 = loc("CWE190_Integer_Overflow__int_max_add_07.c":157:14)
#loc36 = loc("CWE190_Integer_Overflow__int_max_add_07.c":158:5)
#loc37 = loc("CWE190_Integer_Overflow__int_max_add_07.c":158:14)
#loc38 = loc("CWE190_Integer_Overflow__int_max_add_07.c":159:5)
#loc39 = loc("CWE190_Integer_Overflow__int_max_add_07.c":159:14)
#loc40 = loc("CWE190_Integer_Overflow__int_max_add_07.c":160:5)
#loc41 = loc("CWE190_Integer_Overflow__int_max_add_07.c":160:14)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE190_Integer_Overflow__int_max_add_07.c":65:19)
#loc45 = loc("CWE190_Integer_Overflow__int_max_add_07.c":77:23)
#loc46 = loc("CWE190_Integer_Overflow__int_max_add_07.c":52:1)
#loc47 = loc("CWE190_Integer_Overflow__int_max_add_07.c":80:1)
#loc48 = loc("CWE190_Integer_Overflow__int_max_add_07.c":54:5)
#loc49 = loc("CWE190_Integer_Overflow__int_max_add_07.c":54:9)
#loc50 = loc("CWE190_Integer_Overflow__int_max_add_07.c":56:12)
#loc51 = loc("CWE190_Integer_Overflow__int_max_add_07.c":56:5)
#loc52 = loc("CWE190_Integer_Overflow__int_max_add_07.c":57:5)
#loc53 = loc("CWE190_Integer_Overflow__int_max_add_07.c":61:5)
#loc54 = loc("CWE190_Integer_Overflow__int_max_add_07.c":57:8)
#loc55 = loc("CWE190_Integer_Overflow__int_max_add_07.c":57:20)
#loc56 = loc("CWE190_Integer_Overflow__int_max_add_07.c":57:18)
#loc57 = loc("CWE190_Integer_Overflow__int_max_add_07.c":58:5)
#loc58 = loc("CWE190_Integer_Overflow__int_max_add_07.c":60:16)
#loc59 = loc("CWE190_Integer_Overflow__int_max_add_07.c":60:9)
#loc60 = loc("CWE190_Integer_Overflow__int_max_add_07.c":62:5)
#loc61 = loc("CWE190_Integer_Overflow__int_max_add_07.c":79:5)
#loc62 = loc("CWE190_Integer_Overflow__int_max_add_07.c":62:8)
#loc63 = loc("CWE190_Integer_Overflow__int_max_add_07.c":62:20)
#loc64 = loc("CWE190_Integer_Overflow__int_max_add_07.c":62:18)
#loc65 = loc("CWE190_Integer_Overflow__int_max_add_07.c":63:5)
#loc66 = loc("CWE190_Integer_Overflow__int_max_add_07.c":66:5)
#loc67 = loc("CWE190_Integer_Overflow__int_max_add_07.c":68:5)
#loc68 = loc("CWE190_Integer_Overflow__int_max_add_07.c":65:9)
#loc69 = loc("CWE190_Integer_Overflow__int_max_add_07.c":70:9)
#loc70 = loc("CWE190_Integer_Overflow__int_max_add_07.c":78:9)
#loc71 = loc("CWE190_Integer_Overflow__int_max_add_07.c":70:13)
#loc72 = loc("CWE190_Integer_Overflow__int_max_add_07.c":70:20)
#loc73 = loc("CWE190_Integer_Overflow__int_max_add_07.c":70:18)
#loc74 = loc("CWE190_Integer_Overflow__int_max_add_07.c":71:9)
#loc75 = loc("CWE190_Integer_Overflow__int_max_add_07.c":74:9)
#loc76 = loc("CWE190_Integer_Overflow__int_max_add_07.c":76:9)
#loc77 = loc("CWE190_Integer_Overflow__int_max_add_07.c":72:13)
#loc78 = loc("CWE190_Integer_Overflow__int_max_add_07.c":72:33)
#loc79 = loc("CWE190_Integer_Overflow__int_max_add_07.c":72:26)
#loc80 = loc("CWE190_Integer_Overflow__int_max_add_07.c":73:26)
#loc81 = loc("CWE190_Integer_Overflow__int_max_add_07.c":73:13)
#loc82 = loc("CWE190_Integer_Overflow__int_max_add_07.c":77:13)
#loc83 = loc("CWE190_Integer_Overflow__int_max_add_07.c":83:1)
#loc84 = loc("CWE190_Integer_Overflow__int_max_add_07.c":106:1)
#loc85 = loc("CWE190_Integer_Overflow__int_max_add_07.c":85:5)
#loc86 = loc("CWE190_Integer_Overflow__int_max_add_07.c":85:9)
#loc87 = loc("CWE190_Integer_Overflow__int_max_add_07.c":87:12)
#loc88 = loc("CWE190_Integer_Overflow__int_max_add_07.c":87:5)
#loc89 = loc("CWE190_Integer_Overflow__int_max_add_07.c":88:5)
#loc90 = loc("CWE190_Integer_Overflow__int_max_add_07.c":92:5)
#loc91 = loc("CWE190_Integer_Overflow__int_max_add_07.c":88:8)
#loc92 = loc("CWE190_Integer_Overflow__int_max_add_07.c":88:20)
#loc93 = loc("CWE190_Integer_Overflow__int_max_add_07.c":88:18)
#loc94 = loc("CWE190_Integer_Overflow__int_max_add_07.c":89:5)
#loc95 = loc("CWE190_Integer_Overflow__int_max_add_07.c":91:16)
#loc96 = loc("CWE190_Integer_Overflow__int_max_add_07.c":91:9)
#loc97 = loc("CWE190_Integer_Overflow__int_max_add_07.c":93:5)
#loc98 = loc("CWE190_Integer_Overflow__int_max_add_07.c":105:5)
#loc99 = loc("CWE190_Integer_Overflow__int_max_add_07.c":93:8)
#loc100 = loc("CWE190_Integer_Overflow__int_max_add_07.c":93:20)
#loc101 = loc("CWE190_Integer_Overflow__int_max_add_07.c":93:18)
#loc102 = loc("CWE190_Integer_Overflow__int_max_add_07.c":94:5)
#loc103 = loc("CWE190_Integer_Overflow__int_max_add_07.c":96:9)
#loc104 = loc("CWE190_Integer_Overflow__int_max_add_07.c":104:9)
#loc105 = loc("CWE190_Integer_Overflow__int_max_add_07.c":96:13)
#loc106 = loc("CWE190_Integer_Overflow__int_max_add_07.c":96:20)
#loc107 = loc("CWE190_Integer_Overflow__int_max_add_07.c":96:18)
#loc108 = loc("CWE190_Integer_Overflow__int_max_add_07.c":97:9)
#loc109 = loc("CWE190_Integer_Overflow__int_max_add_07.c":100:9)
#loc110 = loc("CWE190_Integer_Overflow__int_max_add_07.c":102:9)
#loc111 = loc("CWE190_Integer_Overflow__int_max_add_07.c":98:13)
#loc112 = loc("CWE190_Integer_Overflow__int_max_add_07.c":98:33)
#loc113 = loc("CWE190_Integer_Overflow__int_max_add_07.c":98:26)
#loc114 = loc("CWE190_Integer_Overflow__int_max_add_07.c":99:26)
#loc115 = loc("CWE190_Integer_Overflow__int_max_add_07.c":99:13)
#loc116 = loc("CWE190_Integer_Overflow__int_max_add_07.c":103:23)
#loc117 = loc("CWE190_Integer_Overflow__int_max_add_07.c":103:13)
#loc118 = loc("CWE190_Integer_Overflow__int_max_add_07.c":109:1)
#loc119 = loc("CWE190_Integer_Overflow__int_max_add_07.c":132:1)
#loc120 = loc("CWE190_Integer_Overflow__int_max_add_07.c":111:5)
#loc121 = loc("CWE190_Integer_Overflow__int_max_add_07.c":111:9)
#loc122 = loc("CWE190_Integer_Overflow__int_max_add_07.c":113:12)
#loc123 = loc("CWE190_Integer_Overflow__int_max_add_07.c":113:5)
#loc124 = loc("CWE190_Integer_Overflow__int_max_add_07.c":114:5)
#loc125 = loc("CWE190_Integer_Overflow__int_max_add_07.c":123:5)
#loc126 = loc("CWE190_Integer_Overflow__int_max_add_07.c":114:8)
#loc127 = loc("CWE190_Integer_Overflow__int_max_add_07.c":114:20)
#loc128 = loc("CWE190_Integer_Overflow__int_max_add_07.c":114:18)
#loc129 = loc("CWE190_Integer_Overflow__int_max_add_07.c":115:5)
#loc130 = loc("CWE190_Integer_Overflow__int_max_add_07.c":118:5)
#loc131 = loc("CWE190_Integer_Overflow__int_max_add_07.c":120:5)
#loc132 = loc("CWE190_Integer_Overflow__int_max_add_07.c":117:19)
#loc133 = loc("CWE190_Integer_Overflow__int_max_add_07.c":117:9)
#loc134 = loc("CWE190_Integer_Overflow__int_max_add_07.c":122:16)
#loc135 = loc("CWE190_Integer_Overflow__int_max_add_07.c":122:9)
#loc136 = loc("CWE190_Integer_Overflow__int_max_add_07.c":124:5)
#loc137 = loc("CWE190_Integer_Overflow__int_max_add_07.c":131:5)
#loc138 = loc("CWE190_Integer_Overflow__int_max_add_07.c":124:8)
#loc139 = loc("CWE190_Integer_Overflow__int_max_add_07.c":124:20)
#loc140 = loc("CWE190_Integer_Overflow__int_max_add_07.c":124:18)
#loc141 = loc("CWE190_Integer_Overflow__int_max_add_07.c":125:5)
#loc142 = loc("CWE190_Integer_Overflow__int_max_add_07.c":126:9)
#loc143 = loc("CWE190_Integer_Overflow__int_max_add_07.c":130:9)
#loc144 = loc("CWE190_Integer_Overflow__int_max_add_07.c":128:13)
#loc145 = loc("CWE190_Integer_Overflow__int_max_add_07.c":128:33)
#loc146 = loc("CWE190_Integer_Overflow__int_max_add_07.c":128:26)
#loc147 = loc("CWE190_Integer_Overflow__int_max_add_07.c":129:26)
#loc148 = loc("CWE190_Integer_Overflow__int_max_add_07.c":129:13)
#loc149 = loc("CWE190_Integer_Overflow__int_max_add_07.c":135:1)
#loc150 = loc("CWE190_Integer_Overflow__int_max_add_07.c":153:1)
#loc151 = loc("CWE190_Integer_Overflow__int_max_add_07.c":137:5)
#loc152 = loc("CWE190_Integer_Overflow__int_max_add_07.c":137:9)
#loc153 = loc("CWE190_Integer_Overflow__int_max_add_07.c":139:12)
#loc154 = loc("CWE190_Integer_Overflow__int_max_add_07.c":139:5)
#loc155 = loc("CWE190_Integer_Overflow__int_max_add_07.c":140:5)
#loc156 = loc("CWE190_Integer_Overflow__int_max_add_07.c":144:5)
#loc157 = loc("CWE190_Integer_Overflow__int_max_add_07.c":140:8)
#loc158 = loc("CWE190_Integer_Overflow__int_max_add_07.c":140:20)
#loc159 = loc("CWE190_Integer_Overflow__int_max_add_07.c":140:18)
#loc160 = loc("CWE190_Integer_Overflow__int_max_add_07.c":141:5)
#loc161 = loc("CWE190_Integer_Overflow__int_max_add_07.c":143:16)
#loc162 = loc("CWE190_Integer_Overflow__int_max_add_07.c":143:9)
#loc163 = loc("CWE190_Integer_Overflow__int_max_add_07.c":145:5)
#loc164 = loc("CWE190_Integer_Overflow__int_max_add_07.c":152:5)
#loc165 = loc("CWE190_Integer_Overflow__int_max_add_07.c":145:8)
#loc166 = loc("CWE190_Integer_Overflow__int_max_add_07.c":145:20)
#loc167 = loc("CWE190_Integer_Overflow__int_max_add_07.c":145:18)
#loc168 = loc("CWE190_Integer_Overflow__int_max_add_07.c":146:5)
#loc169 = loc("CWE190_Integer_Overflow__int_max_add_07.c":147:9)
#loc170 = loc("CWE190_Integer_Overflow__int_max_add_07.c":151:9)
#loc171 = loc("CWE190_Integer_Overflow__int_max_add_07.c":149:13)
#loc172 = loc("CWE190_Integer_Overflow__int_max_add_07.c":149:33)
#loc173 = loc("CWE190_Integer_Overflow__int_max_add_07.c":149:26)
#loc174 = loc("CWE190_Integer_Overflow__int_max_add_07.c":150:26)
#loc175 = loc("CWE190_Integer_Overflow__int_max_add_07.c":150:13)
#loc176 = loc(fused[#loc1, #loc2])
#loc177 = loc(fused[#loc3, #loc4])
#loc178 = loc(fused[#loc5, #loc6])
#loc179 = loc(fused[#loc7, #loc8])
#loc180 = loc(fused[#loc10, #loc9])
#loc181 = loc(fused[#loc11, #loc12])
#loc182 = loc(fused[#loc13, #loc14])
#loc183 = loc(fused[#loc16, #loc12])
#loc184 = loc(fused[#loc18, #loc17])
#loc185 = loc(fused[#loc19, #loc20])
#loc186 = loc(fused[#loc21, #loc22])
#loc187 = loc(fused[#loc24, #loc20])
#loc188 = loc(fused[#loc25, #loc26])
#loc189 = loc(fused[#loc27, #loc28])
#loc190 = loc(fused[#loc32, #loc33])
#loc191 = loc(fused[#loc34, #loc35])
#loc192 = loc(fused[#loc36, #loc37])
#loc193 = loc(fused[#loc38, #loc39])
#loc194 = loc(fused[#loc40, #loc41])
#loc195 = loc(fused[#loc42, #loc43])
#loc196 = loc(fused[#loc46, #loc47])
#loc197 = loc(fused[#loc48, #loc49])
#loc198 = loc(fused[#loc51, #loc50])
#loc199 = loc(fused[#loc52, #loc53])
#loc200 = loc(fused[#loc54, #loc55])
#loc201 = loc(fused[#loc57, #loc53])
#loc202 = loc(fused[#loc59, #loc58])
#loc203 = loc(fused[#loc60, #loc61])
#loc204 = loc(fused[#loc62, #loc63])
#loc205 = loc(fused[#loc65, #loc66, #loc67, #loc61])
#loc206 = loc(fused[#loc69, #loc70])
#loc207 = loc(fused[#loc71, #loc72])
#loc208 = loc(fused[#loc74, #loc75, #loc76, #loc70])
#loc209 = loc(fused[#loc77, #loc78])
#loc210 = loc(fused[#loc83, #loc84])
#loc211 = loc(fused[#loc85, #loc86])
#loc212 = loc(fused[#loc88, #loc87])
#loc213 = loc(fused[#loc89, #loc90])
#loc214 = loc(fused[#loc91, #loc92])
#loc215 = loc(fused[#loc94, #loc90])
#loc216 = loc(fused[#loc96, #loc95])
#loc217 = loc(fused[#loc97, #loc98])
#loc218 = loc(fused[#loc99, #loc100])
#loc219 = loc(fused[#loc102, #loc98])
#loc220 = loc(fused[#loc103, #loc104])
#loc221 = loc(fused[#loc105, #loc106])
#loc222 = loc(fused[#loc108, #loc109, #loc110, #loc104])
#loc223 = loc(fused[#loc111, #loc112])
#loc224 = loc(fused[#loc118, #loc119])
#loc225 = loc(fused[#loc120, #loc121])
#loc226 = loc(fused[#loc123, #loc122])
#loc227 = loc(fused[#loc124, #loc125])
#loc228 = loc(fused[#loc126, #loc127])
#loc229 = loc(fused[#loc129, #loc130, #loc131, #loc125])
#loc230 = loc(fused[#loc135, #loc134])
#loc231 = loc(fused[#loc136, #loc137])
#loc232 = loc(fused[#loc138, #loc139])
#loc233 = loc(fused[#loc141, #loc137])
#loc234 = loc(fused[#loc142, #loc143])
#loc235 = loc(fused[#loc144, #loc145])
#loc236 = loc(fused[#loc149, #loc150])
#loc237 = loc(fused[#loc151, #loc152])
#loc238 = loc(fused[#loc154, #loc153])
#loc239 = loc(fused[#loc155, #loc156])
#loc240 = loc(fused[#loc157, #loc158])
#loc241 = loc(fused[#loc160, #loc156])
#loc242 = loc(fused[#loc162, #loc161])
#loc243 = loc(fused[#loc163, #loc164])
#loc244 = loc(fused[#loc165, #loc166])
#loc245 = loc(fused[#loc168, #loc164])
#loc246 = loc(fused[#loc169, #loc170])
#loc247 = loc(fused[#loc171, #loc172])
