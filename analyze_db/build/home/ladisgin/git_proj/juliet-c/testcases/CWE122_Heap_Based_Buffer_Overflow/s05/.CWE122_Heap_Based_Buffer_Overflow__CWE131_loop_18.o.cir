!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc111)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc112)
  cir.func private @printIntLine(!s32i) loc(#loc113)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc114)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc116)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc117)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc118)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc17)
    cir.store %3, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc119)
    cir.br ^bb1 loc(#loc120)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc21)
    %5 = cir.const #cir.int<10> : !s32i loc(#loc22)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc22)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc121)
    cir.store %8, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc122)
    cir.br ^bb2 loc(#loc123)
  ^bb2:  // pred: ^bb1
    %9 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc28)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc124)
    cir.brcond %12 ^bb3, ^bb4 loc(#loc125)
  ^bb3:  // pred: ^bb2
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc30)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc32)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
    cir.br ^bb4 loc(#loc26)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc26)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc126)
  ^bb6:  // pred: ^bb5
    %16 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc116)
    cir.store %16, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc116)
    cir.br ^bb7 loc(#loc127)
  ^bb7:  // pred: ^bb6
    %17 = cir.const #cir.int<0> : !s32i loc(#loc37)
    %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc37)
    cir.store %18, %1 : !u64i, !cir.ptr<!u64i> loc(#loc128)
    cir.br ^bb8 loc(#loc127)
  ^bb8:  // 2 preds: ^bb7, ^bb12
    %19 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc39)
    %20 = cir.const #cir.int<10> : !s32i loc(#loc40)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc40)
    %22 = cir.cmp(lt, %19, %21) : !u64i, !cir.bool loc(#loc129)
    cir.brcond %22 ^bb9, ^bb13 loc(#loc41)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc130)
  ^bb10:  // pred: ^bb9
    %23 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc43)
    %24 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc44)
    %25 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc44)
    %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    %27 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc45)
    %28 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc46)
    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !u64i), !cir.ptr<!s32i> loc(#loc47)
    cir.store %26, %29 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    cir.br ^bb11 loc(#loc36)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc36)
  ^bb12:  // pred: ^bb11
    %30 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc49)
    %31 = cir.unary(inc, %30) : !u64i, !u64i loc(#loc50)
    cir.store %31, %1 : !u64i, !cir.ptr<!u64i> loc(#loc132)
    cir.br ^bb8 loc(#loc127)
  ^bb13:  // pred: ^bb8
    cir.br ^bb14 loc(#loc36)
  ^bb14:  // pred: ^bb13
    %32 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc51)
    %33 = cir.const #cir.int<0> : !s32i loc(#loc52)
    %34 = cir.ptr_stride(%32 : !cir.ptr<!s32i>, %33 : !s32i), !cir.ptr<!s32i> loc(#loc53)
    %35 = cir.load %34 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    cir.call @printIntLine(%35) : (!s32i) -> () loc(#loc54)
    %36 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc55)
    %37 = cir.cast(bitcast, %36 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc55)
    cir.call @free(%37) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc56)
    cir.br ^bb15 loc(#loc34)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc10)
  } loc(#loc115)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc134)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc59)
    cir.return loc(#loc58)
  } loc(#loc133)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc136)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc137)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc138)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc69)
    cir.store %3, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc139)
    cir.br ^bb1 loc(#loc140)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc73)
    %5 = cir.const #cir.int<10> : !s32i loc(#loc74)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc74)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc141)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc142)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc73)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc143)
    cir.store %10, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc144)
    cir.br ^bb2 loc(#loc145)
  ^bb2:  // pred: ^bb1
    %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc81)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc82)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc82)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s32i>, !cir.bool loc(#loc146)
    cir.brcond %14 ^bb3, ^bb4 loc(#loc147)
  ^bb3:  // pred: ^bb2
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc84)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc85)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc86)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc84)
    cir.br ^bb4 loc(#loc80)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc80)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc148)
  ^bb6:  // pred: ^bb5
    %18 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc136)
    cir.store %18, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc136)
    cir.br ^bb7 loc(#loc149)
  ^bb7:  // pred: ^bb6
    %19 = cir.const #cir.int<0> : !s32i loc(#loc91)
    %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc91)
    cir.store %20, %1 : !u64i, !cir.ptr<!u64i> loc(#loc150)
    cir.br ^bb8 loc(#loc149)
  ^bb8:  // 2 preds: ^bb7, ^bb12
    %21 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc93)
    %22 = cir.const #cir.int<10> : !s32i loc(#loc94)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc94)
    %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc151)
    cir.brcond %24 ^bb9, ^bb13 loc(#loc95)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc152)
  ^bb10:  // pred: ^bb9
    %25 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc97)
    %26 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc98)
    %27 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %25 : !u64i), !cir.ptr<!s32i> loc(#loc98)
    %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc98)
    %29 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc99)
    %30 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc100)
    %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !u64i), !cir.ptr<!s32i> loc(#loc101)
    cir.store %28, %31 : !s32i, !cir.ptr<!s32i> loc(#loc153)
    cir.br ^bb11 loc(#loc90)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc90)
  ^bb12:  // pred: ^bb11
    %32 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc103)
    %33 = cir.unary(inc, %32) : !u64i, !u64i loc(#loc104)
    cir.store %33, %1 : !u64i, !cir.ptr<!u64i> loc(#loc154)
    cir.br ^bb8 loc(#loc149)
  ^bb13:  // pred: ^bb8
    cir.br ^bb14 loc(#loc90)
  ^bb14:  // pred: ^bb13
    %34 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc105)
    %35 = cir.const #cir.int<0> : !s32i loc(#loc106)
    %36 = cir.ptr_stride(%34 : !cir.ptr<!s32i>, %35 : !s32i), !cir.ptr<!s32i> loc(#loc107)
    %37 = cir.load %36 : !cir.ptr<!s32i>, !s32i loc(#loc105)
    cir.call @printIntLine(%37) : (!s32i) -> () loc(#loc108)
    %38 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc109)
    %39 = cir.cast(bitcast, %38 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc109)
    cir.call @free(%39) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc110)
    cir.br ^bb15 loc(#loc88)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc62)
  } loc(#loc135)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":41:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":31:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":31:28)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":32:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":32:16)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":23:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":23:11)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":24:12)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":24:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":25:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":25:10)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":28:19)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":28:26)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":28:28)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":28:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":29:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":29:33)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":29:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":29:17)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":29:23)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":29:24)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":29:30)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":29:29)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":30:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":40:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":34:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":37:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":34:18)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":34:14)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":34:21)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":34:25)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":34:23)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":35:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":36:30)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":36:23)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":36:13)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":36:18)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":36:19)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":36:31)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":34:30)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":34:29)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":38:22)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":38:27)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":38:28)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":38:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":39:14)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":39:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":70:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":73:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":72:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":72:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":48:1)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":68:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":58:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":58:28)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":59:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":59:16)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":50:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":50:11)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":51:12)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":51:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":52:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":52:10)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":55:19)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":55:26)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":55:29)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":55:39)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":55:40)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":55:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":56:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":56:33)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":56:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":56:17)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":56:23)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":56:24)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":56:30)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":56:29)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":57:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":67:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":61:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":64:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":61:18)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":61:14)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":61:21)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":61:25)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":61:23)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":62:9)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":63:30)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":63:23)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":63:13)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":63:18)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":63:19)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":63:31)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":61:30)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":61:29)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":65:22)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":65:27)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":65:28)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":65:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":66:14)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":66:9)
#loc111 = loc(fused[#loc1, #loc2])
#loc112 = loc(fused[#loc3, #loc4])
#loc113 = loc(fused[#loc5, #loc6])
#loc114 = loc(fused[#loc7, #loc8])
#loc115 = loc(fused[#loc9, #loc10])
#loc116 = loc(fused[#loc11, #loc12])
#loc117 = loc(fused[#loc13, #loc14])
#loc118 = loc(fused[#loc15, #loc16])
#loc119 = loc(fused[#loc18, #loc17])
#loc120 = loc(fused[#loc19, #loc20])
#loc121 = loc(fused[#loc21, #loc23])
#loc122 = loc(fused[#loc24, #loc23])
#loc123 = loc(fused[#loc25, #loc26])
#loc124 = loc(fused[#loc27, #loc28])
#loc125 = loc(fused[#loc29, #loc26])
#loc126 = loc(fused[#loc33, #loc34])
#loc127 = loc(fused[#loc35, #loc36])
#loc128 = loc(fused[#loc38, #loc37])
#loc129 = loc(fused[#loc39, #loc40])
#loc130 = loc(fused[#loc42, #loc36])
#loc131 = loc(fused[#loc45, #loc48])
#loc132 = loc(fused[#loc50, #loc49])
#loc133 = loc(fused[#loc57, #loc58])
#loc134 = loc(fused[#loc59, #loc60])
#loc135 = loc(fused[#loc61, #loc62])
#loc136 = loc(fused[#loc63, #loc64])
#loc137 = loc(fused[#loc65, #loc66])
#loc138 = loc(fused[#loc67, #loc68])
#loc139 = loc(fused[#loc70, #loc69])
#loc140 = loc(fused[#loc71, #loc72])
#loc141 = loc(fused[#loc75, #loc76])
#loc142 = loc(fused[#loc74, #loc76])
#loc143 = loc(fused[#loc73, #loc77])
#loc144 = loc(fused[#loc78, #loc77])
#loc145 = loc(fused[#loc79, #loc80])
#loc146 = loc(fused[#loc81, #loc82])
#loc147 = loc(fused[#loc83, #loc80])
#loc148 = loc(fused[#loc87, #loc88])
#loc149 = loc(fused[#loc89, #loc90])
#loc150 = loc(fused[#loc92, #loc91])
#loc151 = loc(fused[#loc93, #loc94])
#loc152 = loc(fused[#loc96, #loc90])
#loc153 = loc(fused[#loc99, #loc102])
#loc154 = loc(fused[#loc104, #loc103])
