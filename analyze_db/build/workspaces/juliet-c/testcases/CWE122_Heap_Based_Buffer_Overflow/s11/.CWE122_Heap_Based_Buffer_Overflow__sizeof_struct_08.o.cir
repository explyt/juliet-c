!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__twoIntsStruct = !cir.record<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc127)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc128)
  cir.func private @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc129)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc130)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc132)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc133)
    cir.scope {
      %6 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc135)
      %7 = cir.call %6() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc17)
      %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc17)
      cir.if %8 {
        %9 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc20)
        %10 = cir.const #cir.int<8> : !u64i loc(#loc137)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc20)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc138)
        cir.store %12, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc139)
        cir.scope {
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc27)
          %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc28)
          %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc141)
          cir.if %22 {
            %23 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc30)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc31)
            %25 = cir.unary(minus, %24) nsw : !s32i, !s32i loc(#loc32)
            cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
          } loc(#loc142)
        } loc(#loc140)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc33)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc34)
        %15 = cir.get_member %14[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc35)
        cir.store %13, %15 : !s32i, !cir.ptr<!s32i> loc(#loc143)
        %16 = cir.const #cir.int<2> : !s32i loc(#loc36)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc37)
        %18 = cir.get_member %17[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc38)
        cir.store %16, %18 : !s32i, !cir.ptr<!s32i> loc(#loc144)
      } loc(#loc136)
    } loc(#loc134)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc39)
    cir.call @printStructLine(%2) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc40)
    %3 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc41)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc42)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc42)
    cir.call @free(%5) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc41)
    cir.return loc(#loc10)
  } loc(#loc131)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc146)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc45)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc147)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc47)
    cir.return loc(#loc44)
  } loc(#loc145)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc50)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc51)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    cir.return %2 : !s32i loc(#loc149)
  } loc(#loc148)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc150)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc55)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc152)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc60)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc153)
    cir.scope {
      %6 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc155)
      %7 = cir.call %6() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc64)
      %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc64)
      cir.if %8 {
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc55)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc55)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc69)
      } else {
        %9 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc70)
        %10 = cir.const #cir.int<8> : !u64i loc(#loc157)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc70)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc158)
        cir.store %12, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc159)
        cir.scope {
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc77)
          %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc78)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc78)
          %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc161)
          cir.if %22 {
            %23 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc80)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc81)
            %25 = cir.unary(minus, %24) nsw : !s32i, !s32i loc(#loc82)
            cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc80)
          } loc(#loc162)
        } loc(#loc160)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc83)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc84)
        %15 = cir.get_member %14[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc35)
        cir.store %13, %15 : !s32i, !cir.ptr<!s32i> loc(#loc163)
        %16 = cir.const #cir.int<2> : !s32i loc(#loc85)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc86)
        %18 = cir.get_member %17[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc38)
        cir.store %16, %18 : !s32i, !cir.ptr<!s32i> loc(#loc164)
      } loc(#loc156)
    } loc(#loc154)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc87)
    cir.call @printStructLine(%2) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc88)
    %3 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc89)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc90)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc90)
    cir.call @free(%5) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc89)
    cir.return loc(#loc57)
  } loc(#loc151)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc92)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc93)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc166)
    cir.return %2 : !s32i loc(#loc166)
  } loc(#loc165)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc168)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc99)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc169)
    cir.scope {
      %6 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc171)
      %7 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc103)
      %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc103)
      cir.if %8 {
        %9 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc106)
        %10 = cir.const #cir.int<8> : !u64i loc(#loc173)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc106)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc174)
        cir.store %12, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc175)
        cir.scope {
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc113)
          %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc114)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc114)
          %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc177)
          cir.if %22 {
            %23 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc116)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc117)
            %25 = cir.unary(minus, %24) nsw : !s32i, !s32i loc(#loc118)
            cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc116)
          } loc(#loc178)
        } loc(#loc176)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc119)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc120)
        %15 = cir.get_member %14[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc35)
        cir.store %13, %15 : !s32i, !cir.ptr<!s32i> loc(#loc179)
        %16 = cir.const #cir.int<2> : !s32i loc(#loc121)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc122)
        %18 = cir.get_member %17[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc38)
        cir.store %16, %18 : !s32i, !cir.ptr<!s32i> loc(#loc180)
      } loc(#loc172)
    } loc(#loc170)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc123)
    cir.call @printStructLine(%2) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc124)
    %3 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc125)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc126)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc126)
    cir.call @free(%5) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc125)
    cir.return loc(#loc96)
  } loc(#loc167)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":35:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":52:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":37:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":37:21)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":39:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":39:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":40:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":48:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":40:8)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":40:26)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":41:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":44:33)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":44:40)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":44:51)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":44:52)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":44:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":45:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":45:37)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":45:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":45:21)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":45:27)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":45:28)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":45:34)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":45:33)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":46:24)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":46:9)
#loc35 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":47:24)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":47:9)
#loc38 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":50:21)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":50:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":51:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":51:10)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":101:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":105:1)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":103:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":103:14)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":104:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":104:14)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":23:1)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":26:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":25:12)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":25:5)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":67:19)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":59:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":80:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":61:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":61:21)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":63:12)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":63:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":64:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":76:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":64:8)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":64:27)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":65:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":68:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":70:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":67:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":72:33)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":72:40)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":72:52)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":72:53)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":72:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":73:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":73:37)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":73:13)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":73:21)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":73:27)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":73:28)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":73:34)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":73:33)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":74:24)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":74:9)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":75:24)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":75:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":78:21)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":78:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":79:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":79:10)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":28:1)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":31:1)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":30:12)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":30:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":83:1)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":99:1)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":85:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":85:21)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":87:12)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":87:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":88:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":95:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":88:8)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":88:26)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":89:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":91:33)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":91:40)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":91:52)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":91:53)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":91:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":92:9)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":92:37)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":92:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":92:21)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":92:27)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":92:28)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":92:34)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":92:33)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":93:24)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":93:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":94:24)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":94:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":97:21)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":97:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":98:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":98:10)
#loc127 = loc(fused[#loc1, #loc2])
#loc128 = loc(fused[#loc3, #loc4])
#loc129 = loc(fused[#loc5, #loc6])
#loc130 = loc(fused[#loc7, #loc8])
#loc131 = loc(fused[#loc9, #loc10])
#loc132 = loc(fused[#loc11, #loc12])
#loc133 = loc(fused[#loc14, #loc13])
#loc134 = loc(fused[#loc15, #loc16])
#loc135 = loc(fused[#loc17, #loc18])
#loc136 = loc(fused[#loc19, #loc16])
#loc137 = loc(fused[#loc21, #loc22])
#loc138 = loc(fused[#loc20, #loc23])
#loc139 = loc(fused[#loc24, #loc23])
#loc140 = loc(fused[#loc25, #loc26])
#loc141 = loc(fused[#loc27, #loc28])
#loc142 = loc(fused[#loc29, #loc26])
#loc143 = loc(fused[#loc34, #loc33])
#loc144 = loc(fused[#loc37, #loc36])
#loc145 = loc(fused[#loc43, #loc44])
#loc146 = loc(fused[#loc45, #loc46])
#loc147 = loc(fused[#loc47, #loc48])
#loc148 = loc(fused[#loc49, #loc50])
#loc149 = loc(fused[#loc52, #loc51])
#loc150 = loc(fused[#loc53, #loc54])
#loc151 = loc(fused[#loc56, #loc57])
#loc152 = loc(fused[#loc58, #loc59])
#loc153 = loc(fused[#loc61, #loc60])
#loc154 = loc(fused[#loc62, #loc63])
#loc155 = loc(fused[#loc64, #loc65])
#loc156 = loc(fused[#loc66, #loc67, #loc68, #loc63])
#loc157 = loc(fused[#loc71, #loc72])
#loc158 = loc(fused[#loc70, #loc73])
#loc159 = loc(fused[#loc74, #loc73])
#loc160 = loc(fused[#loc75, #loc76])
#loc161 = loc(fused[#loc77, #loc78])
#loc162 = loc(fused[#loc79, #loc76])
#loc163 = loc(fused[#loc84, #loc83])
#loc164 = loc(fused[#loc86, #loc85])
#loc165 = loc(fused[#loc91, #loc92])
#loc166 = loc(fused[#loc94, #loc93])
#loc167 = loc(fused[#loc95, #loc96])
#loc168 = loc(fused[#loc97, #loc98])
#loc169 = loc(fused[#loc100, #loc99])
#loc170 = loc(fused[#loc101, #loc102])
#loc171 = loc(fused[#loc103, #loc104])
#loc172 = loc(fused[#loc105, #loc102])
#loc173 = loc(fused[#loc107, #loc108])
#loc174 = loc(fused[#loc106, #loc109])
#loc175 = loc(fused[#loc110, #loc109])
#loc176 = loc(fused[#loc111, #loc112])
#loc177 = loc(fused[#loc113, #loc114])
#loc178 = loc(fused[#loc115, #loc112])
#loc179 = loc(fused[#loc120, #loc119])
#loc180 = loc(fused[#loc122, #loc121])
