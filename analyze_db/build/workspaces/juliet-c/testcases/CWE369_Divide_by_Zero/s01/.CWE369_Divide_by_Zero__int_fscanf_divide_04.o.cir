!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fscanf_divide_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc148)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc149)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc150)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fscanf_divide_04_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc152)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc153)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc17)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc17)
      cir.if %4 {
        %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc19)
        %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc149)
        %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc20)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
        %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc19)
      } loc(#loc155)
    } loc(#loc154)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc23)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc23)
      cir.if %4 {
        %5 = cir.const #cir.int<100> : !s32i loc(#loc25)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
        %7 = cir.binop(div, %5, %6) : !s32i loc(#loc158)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc27)
      } loc(#loc157)
    } loc(#loc156)
    cir.return loc(#loc9)
  } loc(#loc151)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fscanf_divide_04_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc160)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc161)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc162)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc163)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    cir.return loc(#loc29)
  } loc(#loc159)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc164)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc41)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc166)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc46)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc47)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc167)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc51)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc51)
      cir.if %4 {
        %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc53)
        %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc149)
        %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc54)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc55)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc55)
        %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc53)
      } loc(#loc169)
    } loc(#loc168)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc58)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc58)
      cir.if %4 {
        %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc40)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc40)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc62)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc66)
          %7 = cir.cmp(ne, %5, %6) : !s32i, !cir.bool loc(#loc173)
          cir.if %7 {
            %8 = cir.const #cir.int<100> : !s32i loc(#loc70)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
            %10 = cir.binop(div, %8, %9) : !s32i loc(#loc175)
            cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc72)
          } else {
            %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc41)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc41)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc73)
          } loc(#loc174)
        } loc(#loc172)
      } loc(#loc171)
    } loc(#loc170)
    cir.return loc(#loc43)
  } loc(#loc165)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc177)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc78)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc79)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc83)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc83)
      cir.if %4 {
        %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc85)
        %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc149)
        %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc86)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc87)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc87)
        %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc85)
      } loc(#loc180)
    } loc(#loc179)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc90)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc90)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc95)
          %7 = cir.cmp(ne, %5, %6) : !s32i, !cir.bool loc(#loc184)
          cir.if %7 {
            %8 = cir.const #cir.int<100> : !s32i loc(#loc99)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
            %10 = cir.binop(div, %8, %9) : !s32i loc(#loc186)
            cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc101)
          } else {
            %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc102)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc102)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc103)
          } loc(#loc185)
        } loc(#loc183)
      } loc(#loc182)
    } loc(#loc181)
    cir.return loc(#loc75)
  } loc(#loc176)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc188)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc108)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc109)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc189)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc113)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc113)
      cir.if %4 {
        %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc117)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc117)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc118)
      } else {
        %5 = cir.const #cir.int<7> : !s32i loc(#loc119)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc192)
      } loc(#loc191)
    } loc(#loc190)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc123)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc123)
      cir.if %4 {
        %5 = cir.const #cir.int<100> : !s32i loc(#loc125)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc126)
        %7 = cir.binop(div, %5, %6) : !s32i loc(#loc195)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc127)
      } loc(#loc194)
    } loc(#loc193)
    cir.return loc(#loc105)
  } loc(#loc187)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc197)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc132)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc133)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc198)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc137)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc137)
      cir.if %4 {
        %5 = cir.const #cir.int<7> : !s32i loc(#loc139)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc201)
      } loc(#loc200)
    } loc(#loc199)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc143)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc143)
      cir.if %4 {
        %5 = cir.const #cir.int<100> : !s32i loc(#loc145)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc146)
        %7 = cir.binop(div, %5, %6) : !s32i loc(#loc204)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc147)
      } loc(#loc203)
    } loc(#loc202)
    cir.return loc(#loc129)
  } loc(#loc196)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fscanf_divide_04.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":36:23)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":28:1)
#loc9 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":43:1)
#loc10 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":30:5)
#loc11 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":30:9)
#loc12 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":32:13)
#loc13 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":32:12)
#loc14 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":32:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":33:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":37:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":33:8)
#loc18 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":34:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":36:9)
#loc20 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":36:16)
#loc21 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":38:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":42:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":38:8)
#loc24 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":39:5)
#loc25 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":41:22)
#loc26 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":41:28)
#loc27 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":41:9)
#loc28 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":145:1)
#loc29 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":151:1)
#loc30 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":147:5)
#loc31 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":147:14)
#loc32 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":148:5)
#loc33 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":148:14)
#loc34 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":149:5)
#loc35 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":149:14)
#loc36 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":150:5)
#loc37 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":150:14)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc40 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":63:19)
#loc41 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":74:23)
#loc42 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":50:1)
#loc43 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":77:1)
#loc44 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":52:5)
#loc45 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":52:9)
#loc46 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":54:13)
#loc47 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":54:12)
#loc48 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":54:5)
#loc49 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":55:5)
#loc50 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":59:5)
#loc51 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":55:8)
#loc52 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":56:5)
#loc53 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":58:9)
#loc54 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":58:16)
#loc55 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":58:23)
#loc56 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":60:5)
#loc57 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":76:5)
#loc58 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":60:8)
#loc59 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":61:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":64:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":66:5)
#loc62 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":63:9)
#loc63 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":68:9)
#loc64 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":75:9)
#loc65 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":68:13)
#loc66 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":68:21)
#loc67 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":69:9)
#loc68 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":71:9)
#loc69 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":73:9)
#loc70 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":70:26)
#loc71 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":70:32)
#loc72 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":70:13)
#loc73 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":74:13)
#loc74 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":80:1)
#loc75 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":102:1)
#loc76 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":82:5)
#loc77 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":82:9)
#loc78 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":84:13)
#loc79 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":84:12)
#loc80 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":84:5)
#loc81 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":85:5)
#loc82 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":89:5)
#loc83 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":85:8)
#loc84 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":86:5)
#loc85 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":88:9)
#loc86 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":88:16)
#loc87 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":88:23)
#loc88 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":90:5)
#loc89 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":101:5)
#loc90 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":90:8)
#loc91 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":91:5)
#loc92 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":93:9)
#loc93 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":100:9)
#loc94 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":93:13)
#loc95 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":93:21)
#loc96 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":94:9)
#loc97 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":96:9)
#loc98 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":98:9)
#loc99 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":95:26)
#loc100 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":95:32)
#loc101 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":95:13)
#loc102 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":99:23)
#loc103 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":99:13)
#loc104 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":105:1)
#loc105 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":125:1)
#loc106 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":107:5)
#loc107 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":107:9)
#loc108 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":109:13)
#loc109 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":109:12)
#loc110 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":109:5)
#loc111 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":110:5)
#loc112 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":119:5)
#loc113 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":110:8)
#loc114 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":111:5)
#loc115 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":114:5)
#loc116 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":116:5)
#loc117 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":113:19)
#loc118 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":113:9)
#loc119 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":118:16)
#loc120 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":118:9)
#loc121 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":120:5)
#loc122 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":124:5)
#loc123 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":120:8)
#loc124 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":121:5)
#loc125 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":123:22)
#loc126 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":123:28)
#loc127 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":123:9)
#loc128 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":128:1)
#loc129 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":143:1)
#loc130 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":130:5)
#loc131 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":130:9)
#loc132 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":132:13)
#loc133 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":132:12)
#loc134 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":132:5)
#loc135 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":133:5)
#loc136 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":137:5)
#loc137 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":133:8)
#loc138 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":134:5)
#loc139 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":136:16)
#loc140 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":136:9)
#loc141 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":138:5)
#loc142 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":142:5)
#loc143 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":138:8)
#loc144 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":139:5)
#loc145 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":141:22)
#loc146 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":141:28)
#loc147 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":141:9)
#loc148 = loc(fused[#loc1, #loc2])
#loc149 = loc(fused[#loc3, #loc4])
#loc150 = loc(fused[#loc6, #loc7])
#loc151 = loc(fused[#loc8, #loc9])
#loc152 = loc(fused[#loc10, #loc11])
#loc153 = loc(fused[#loc14, #loc12])
#loc154 = loc(fused[#loc15, #loc16])
#loc155 = loc(fused[#loc18, #loc16])
#loc156 = loc(fused[#loc21, #loc22])
#loc157 = loc(fused[#loc24, #loc22])
#loc158 = loc(fused[#loc25, #loc26])
#loc159 = loc(fused[#loc28, #loc29])
#loc160 = loc(fused[#loc30, #loc31])
#loc161 = loc(fused[#loc32, #loc33])
#loc162 = loc(fused[#loc34, #loc35])
#loc163 = loc(fused[#loc36, #loc37])
#loc164 = loc(fused[#loc38, #loc39])
#loc165 = loc(fused[#loc42, #loc43])
#loc166 = loc(fused[#loc44, #loc45])
#loc167 = loc(fused[#loc48, #loc46])
#loc168 = loc(fused[#loc49, #loc50])
#loc169 = loc(fused[#loc52, #loc50])
#loc170 = loc(fused[#loc56, #loc57])
#loc171 = loc(fused[#loc59, #loc60, #loc61, #loc57])
#loc172 = loc(fused[#loc63, #loc64])
#loc173 = loc(fused[#loc65, #loc66])
#loc174 = loc(fused[#loc67, #loc68, #loc69, #loc64])
#loc175 = loc(fused[#loc70, #loc71])
#loc176 = loc(fused[#loc74, #loc75])
#loc177 = loc(fused[#loc76, #loc77])
#loc178 = loc(fused[#loc80, #loc78])
#loc179 = loc(fused[#loc81, #loc82])
#loc180 = loc(fused[#loc84, #loc82])
#loc181 = loc(fused[#loc88, #loc89])
#loc182 = loc(fused[#loc91, #loc89])
#loc183 = loc(fused[#loc92, #loc93])
#loc184 = loc(fused[#loc94, #loc95])
#loc185 = loc(fused[#loc96, #loc97, #loc98, #loc93])
#loc186 = loc(fused[#loc99, #loc100])
#loc187 = loc(fused[#loc104, #loc105])
#loc188 = loc(fused[#loc106, #loc107])
#loc189 = loc(fused[#loc110, #loc108])
#loc190 = loc(fused[#loc111, #loc112])
#loc191 = loc(fused[#loc114, #loc115, #loc116, #loc112])
#loc192 = loc(fused[#loc120, #loc119])
#loc193 = loc(fused[#loc121, #loc122])
#loc194 = loc(fused[#loc124, #loc122])
#loc195 = loc(fused[#loc125, #loc126])
#loc196 = loc(fused[#loc128, #loc129])
#loc197 = loc(fused[#loc130, #loc131])
#loc198 = loc(fused[#loc134, #loc132])
#loc199 = loc(fused[#loc135, #loc136])
#loc200 = loc(fused[#loc138, #loc136])
#loc201 = loc(fused[#loc140, #loc139])
#loc202 = loc(fused[#loc141, #loc142])
#loc203 = loc(fused[#loc144, #loc142])
#loc204 = loc(fused[#loc145, #loc146])
