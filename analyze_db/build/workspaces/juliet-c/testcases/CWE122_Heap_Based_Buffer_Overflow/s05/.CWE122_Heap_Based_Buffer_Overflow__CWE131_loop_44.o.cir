!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":21:21)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":21:27)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":54:25)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":54:31)
#loc128 = loc(fused[#loc7, #loc8])
#loc152 = loc(fused[#loc70, #loc71])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc125)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc126)
  cir.func internal private @badSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc129)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc130)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc128)
    cir.store %arg0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc13)
    cir.br ^bb1 loc(#loc131)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc129)
    cir.store %3, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc129)
    cir.br ^bb2 loc(#loc132)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<0> : !s32i loc(#loc18)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc18)
    cir.store %5, %1 : !u64i, !cir.ptr<!u64i> loc(#loc133)
    cir.br ^bb3 loc(#loc132)
  ^bb3:  // 2 preds: ^bb2, ^bb7
    %6 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc20)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc21)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc21)
    %9 = cir.cmp(lt, %6, %8) : !u64i, !cir.bool loc(#loc134)
    cir.brcond %9 ^bb4, ^bb8 loc(#loc22)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc135)
  ^bb5:  // pred: ^bb4
    %10 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc24)
    %11 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc25)
    %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !u64i), !cir.ptr<!s32i> loc(#loc25)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    %14 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
    %15 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc27)
    %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !u64i), !cir.ptr<!s32i> loc(#loc28)
    cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc136)
    cir.br ^bb6 loc(#loc17)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc17)
  ^bb7:  // pred: ^bb6
    %17 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc30)
    %18 = cir.unary(inc, %17) : !u64i, !u64i loc(#loc31)
    cir.store %18, %1 : !u64i, !cir.ptr<!u64i> loc(#loc137)
    cir.br ^bb3 loc(#loc132)
  ^bb8:  // pred: ^bb3
    cir.br ^bb9 loc(#loc17)
  ^bb9:  // pred: ^bb8
    %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc33)
    %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc34)
    %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc32)
    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc35)
    %23 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc36)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc36)
    cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc37)
    cir.br ^bb10 loc(#loc15)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc6)
  } loc(#loc127)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc138)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc139)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc141)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc142)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<(!cir.ptr<!s32i>)>> loc(#loc47)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>> loc(#loc142)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc48)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc143)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc50)
    %5 = cir.const #cir.int<10> : !s32i loc(#loc51)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc51)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc50)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc144)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc145)
    cir.br ^bb1 loc(#loc146)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc56)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc57)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc57)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc147)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc148)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc59)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc60)
    %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc61)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc59)
    cir.br ^bb3 loc(#loc55)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc55)
  ^bb4:  // pred: ^bb3
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!s32i>)>> loc(#loc62)
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc63)
    cir.call %16(%17) : (!cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>, !cir.ptr<!s32i>) -> () loc(#loc62)
    cir.return loc(#loc43)
  } loc(#loc140)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc150)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc66)
    cir.return loc(#loc65)
  } loc(#loc149)
  cir.func internal private @goodG2BSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc70, #loc71])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc153)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc154)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc152)
    cir.store %arg0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc76)
    cir.br ^bb1 loc(#loc155)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc153)
    cir.store %3, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc153)
    cir.br ^bb2 loc(#loc156)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<0> : !s32i loc(#loc81)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc81)
    cir.store %5, %1 : !u64i, !cir.ptr<!u64i> loc(#loc157)
    cir.br ^bb3 loc(#loc156)
  ^bb3:  // 2 preds: ^bb2, ^bb7
    %6 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc83)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc84)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc84)
    %9 = cir.cmp(lt, %6, %8) : !u64i, !cir.bool loc(#loc158)
    cir.brcond %9 ^bb4, ^bb8 loc(#loc85)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc159)
  ^bb5:  // pred: ^bb4
    %10 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc87)
    %11 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc88)
    %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !u64i), !cir.ptr<!s32i> loc(#loc88)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc88)
    %14 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc89)
    %15 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc90)
    %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !u64i), !cir.ptr<!s32i> loc(#loc91)
    cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc160)
    cir.br ^bb6 loc(#loc80)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc80)
  ^bb7:  // pred: ^bb6
    %17 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc93)
    %18 = cir.unary(inc, %17) : !u64i, !u64i loc(#loc94)
    cir.store %18, %1 : !u64i, !cir.ptr<!u64i> loc(#loc161)
    cir.br ^bb3 loc(#loc156)
  ^bb8:  // pred: ^bb3
    cir.br ^bb9 loc(#loc80)
  ^bb9:  // pred: ^bb8
    %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc95)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc96)
    %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc97)
    %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc95)
    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc98)
    %23 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc99)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc99)
    cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc100)
    cir.br ^bb10 loc(#loc78)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc69)
  } loc(#loc151)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc163)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc164)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<(!cir.ptr<!s32i>)>> loc(#loc106)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>> loc(#loc164)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc107)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc165)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc109)
    %5 = cir.const #cir.int<10> : !s32i loc(#loc110)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc110)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc166)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc167)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc109)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc168)
    cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc169)
    cir.br ^bb1 loc(#loc170)
  ^bb1:  // pred: ^bb0
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc117)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc118)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc118)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s32i>, !cir.bool loc(#loc171)
    cir.brcond %14 ^bb2, ^bb3 loc(#loc172)
  ^bb2:  // pred: ^bb1
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc120)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc121)
    %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc122)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc120)
    cir.br ^bb3 loc(#loc116)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc116)
  ^bb4:  // pred: ^bb3
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!s32i>)>> loc(#loc123)
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc124)
    cir.call %18(%19) : (!cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>, !cir.ptr<!s32i>) -> () loc(#loc123)
    cir.return loc(#loc102)
  } loc(#loc162)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":34:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":24:9)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":24:28)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":25:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":25:16)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":22:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":23:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":33:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":27:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":30:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":27:18)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":27:14)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":27:21)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":27:25)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":27:23)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":28:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":29:30)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":29:23)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":29:13)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":29:18)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":29:19)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":29:31)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":27:30)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":27:29)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":31:22)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":31:27)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":31:28)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":31:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":32:14)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":32:9)
#loc38 = loc("/usr/include/stdlib.h":672:1)
#loc39 = loc("/usr/include/stdlib.h":672:45)
#loc40 = loc("/usr/include/stdlib.h":756:1)
#loc41 = loc("/usr/include/stdlib.h":756:70)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":36:1)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":47:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":38:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":38:11)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":40:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":40:31)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":41:12)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":41:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":43:19)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":43:26)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":43:28)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":43:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":44:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":44:33)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":44:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":44:17)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":44:23)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":44:24)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":44:30)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":44:29)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":46:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":46:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":80:1)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":83:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":82:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":82:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":54:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":67:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":57:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":57:28)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":58:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":58:16)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":55:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":56:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":66:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":60:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":63:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":60:18)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":60:14)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":60:21)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":60:25)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":60:23)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":61:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":62:30)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":62:23)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":62:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":62:18)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":62:19)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":62:31)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":60:30)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":60:29)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":64:22)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":64:27)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":64:28)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":64:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":65:14)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":65:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":69:1)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":78:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":71:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":71:11)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":72:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":72:31)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":73:12)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":73:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":75:19)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":75:26)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":75:29)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":75:39)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":75:40)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":75:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":76:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":76:33)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":76:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":76:17)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":76:23)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":76:24)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":76:30)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":76:29)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":77:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c":77:13)
#loc125 = loc(fused[#loc1, #loc2])
#loc126 = loc(fused[#loc3, #loc4])
#loc127 = loc(fused[#loc5, #loc6])
#loc129 = loc(fused[#loc9, #loc10])
#loc130 = loc(fused[#loc11, #loc12])
#loc131 = loc(fused[#loc14, #loc15])
#loc132 = loc(fused[#loc16, #loc17])
#loc133 = loc(fused[#loc19, #loc18])
#loc134 = loc(fused[#loc20, #loc21])
#loc135 = loc(fused[#loc23, #loc17])
#loc136 = loc(fused[#loc26, #loc29])
#loc137 = loc(fused[#loc31, #loc30])
#loc138 = loc(fused[#loc38, #loc39])
#loc139 = loc(fused[#loc40, #loc41])
#loc140 = loc(fused[#loc42, #loc43])
#loc141 = loc(fused[#loc44, #loc45])
#loc142 = loc(fused[#loc46, #loc47])
#loc143 = loc(fused[#loc49, #loc48])
#loc144 = loc(fused[#loc50, #loc52])
#loc145 = loc(fused[#loc53, #loc52])
#loc146 = loc(fused[#loc54, #loc55])
#loc147 = loc(fused[#loc56, #loc57])
#loc148 = loc(fused[#loc58, #loc55])
#loc149 = loc(fused[#loc64, #loc65])
#loc150 = loc(fused[#loc66, #loc67])
#loc151 = loc(fused[#loc68, #loc69])
#loc153 = loc(fused[#loc72, #loc73])
#loc154 = loc(fused[#loc74, #loc75])
#loc155 = loc(fused[#loc77, #loc78])
#loc156 = loc(fused[#loc79, #loc80])
#loc157 = loc(fused[#loc82, #loc81])
#loc158 = loc(fused[#loc83, #loc84])
#loc159 = loc(fused[#loc86, #loc80])
#loc160 = loc(fused[#loc89, #loc92])
#loc161 = loc(fused[#loc94, #loc93])
#loc162 = loc(fused[#loc101, #loc102])
#loc163 = loc(fused[#loc103, #loc104])
#loc164 = loc(fused[#loc105, #loc106])
#loc165 = loc(fused[#loc108, #loc107])
#loc166 = loc(fused[#loc111, #loc112])
#loc167 = loc(fused[#loc110, #loc112])
#loc168 = loc(fused[#loc109, #loc113])
#loc169 = loc(fused[#loc114, #loc113])
#loc170 = loc(fused[#loc115, #loc116])
#loc171 = loc(fused[#loc117, #loc118])
#loc172 = loc(fused[#loc119, #loc116])
