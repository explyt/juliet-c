!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":26:22)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":26:26)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":83:26)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":83:30)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":108:24)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":62:26)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":62:30)
#true = #cir.bool<true> : !cir.bool
#loc150 = loc(fused[#loc12, #loc13])
#loc169 = loc(fused[#loc63, #loc64])
#loc187 = loc(fused[#loc121, #loc122])
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_square_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc145)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc146)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc147)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc148)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc12, #loc13])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc151)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc150)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc11)
    cir.store %arg0, %1 : !s32i, !cir.ptr<!s32i> loc(#loc16)
    cir.br ^bb1 loc(#loc152)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc151)
    cir.store %3, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc151)
    cir.br ^bb2 loc(#loc153)
  ^bb2:  // pred: ^bb1
    %4 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc21)
    %5 = cir.const #cir.int<3> : !s32i loc(#loc22)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc22)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc22)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc22)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc22)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc22)
    %11 = cir.binop(add, %8, %10) : !u64i loc(#loc22)
    %12 = cir.cast(integral, %11 : !u64i), !s32i loc(#loc22)
    %13 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc146)
    %14 = cir.load %13 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc23)
    %15 = cir.call @fgets(%4, %12, %14) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc24)
    %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc25)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc25)
    %18 = cir.cmp(ne, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc154)
    cir.brcond %18 ^bb3, ^bb4 loc(#loc155)
  ^bb3:  // pred: ^bb2
    %19 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc29)
    %20 = cir.call @atoi(%19) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc30)
    cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc156)
    cir.br ^bb5 loc(#loc27)
  ^bb4:  // pred: ^bb2
    %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc33)
    cir.br ^bb5 loc(#loc20)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc20)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc18)
  ^bb7:  // pred: ^bb6
    %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc34)
    cir.store %23, %2 : !s32i, !cir.ptr<!s32i> loc(#loc157)
    %24 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc157)
    cir.return %24 : !s32i loc(#loc157)
  } loc(#loc149)
  cir.func private @printIntLine(!s32i) loc(#loc158)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_square_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc160)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc161)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc44)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc162)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc46)
    %4 = cir.call @badSource(%3) : (!s32i) -> !s32i loc(#loc47)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc163)
    cir.br ^bb1 loc(#loc164)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc52)
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc41)
    %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc52)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc160)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc54)
    cir.br ^bb2 loc(#loc51)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc39)
  } loc(#loc159)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_square_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc166)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc57)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc167)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc59)
    cir.return loc(#loc56)
  } loc(#loc165)
  cir.func internal private @goodB2GSource(%arg0: !s32i loc(fused[#loc63, #loc64])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc170)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc169)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc62)
    cir.store %arg0, %1 : !s32i, !cir.ptr<!s32i> loc(#loc67)
    cir.br ^bb1 loc(#loc171)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc170)
    cir.store %3, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc170)
    cir.br ^bb2 loc(#loc172)
  ^bb2:  // pred: ^bb1
    %4 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc72)
    %5 = cir.const #cir.int<3> : !s32i loc(#loc73)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc73)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc73)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc73)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc73)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc73)
    %11 = cir.binop(add, %8, %10) : !u64i loc(#loc73)
    %12 = cir.cast(integral, %11 : !u64i), !s32i loc(#loc73)
    %13 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc146)
    %14 = cir.load %13 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc74)
    %15 = cir.call @fgets(%4, %12, %14) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc75)
    %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc76)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc76)
    %18 = cir.cmp(ne, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc173)
    cir.brcond %18 ^bb3, ^bb4 loc(#loc174)
  ^bb3:  // pred: ^bb2
    %19 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc80)
    %20 = cir.call @atoi(%19) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc81)
    cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    cir.br ^bb5 loc(#loc78)
  ^bb4:  // pred: ^bb2
    %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc84)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc84)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    cir.br ^bb5 loc(#loc71)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc71)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc69)
  ^bb7:  // pred: ^bb6
    %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    cir.store %23, %2 : !s32i, !cir.ptr<!s32i> loc(#loc176)
    %24 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc176)
    cir.return %24 : !s32i loc(#loc176)
  } loc(#loc168)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc88)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc89)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc178)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc179)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc96)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc98)
    %4 = cir.call @goodB2GSource(%3) : (!s32i) -> !s32i loc(#loc99)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc181)
    cir.br ^bb1 loc(#loc182)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc104)
    %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc105)
    %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc105)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc105)
    %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc105)
    %10 = cir.cmp(gt, %5, %9) : !s32i, !cir.bool loc(#loc183)
    cir.brcond %10 ^bb2, ^bb7 loc(#loc106)
  ^bb2:  // pred: ^bb1
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc107)
    %12 = cir.abs %11 poison : !s32i loc(#loc108)
    %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc108)
    %14 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc109)
    %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc110)
    %16 = cir.cast(int_to_float, %15 : !s32i), !cir.double loc(#loc110)
    %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc109)
    %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc109)
    %19 = cir.cmp(lt, %13, %18) : !s64i, !cir.bool loc(#loc184)
    cir.brcond %19 ^bb3, ^bb4 loc(#loc106)
  ^bb3:  // pred: ^bb2
    %20 = cir.const #true loc(#loc106)
    cir.br ^bb5(%20 : !cir.bool) loc(#loc106)
  ^bb4:  // pred: ^bb2
    %21 = cir.const #false loc(#loc106)
    cir.br ^bb5(%21 : !cir.bool) loc(#loc106)
  ^bb5(%22: !cir.bool loc("CWE190_Integer_Overflow__int_fgets_square_42.c":108:24)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc106)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8(%22 : !cir.bool) loc(#loc106)
  ^bb7:  // pred: ^bb1
    %23 = cir.const #false loc(#loc106)
    cir.br ^bb8(%23 : !cir.bool) loc(#loc106)
  ^bb8(%24: !cir.bool loc("CWE190_Integer_Overflow__int_fgets_square_42.c":108:24)):  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc106)
  ^bb9:  // pred: ^bb8
    cir.brcond %24 ^bb10, ^bb11 loc(#loc185)
  ^bb10:  // pred: ^bb9
    %25 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc115)
    %26 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc93)
    %27 = cir.binop(mul, %25, %26) nsw : !s32i loc(#loc115)
    cir.store %27, %0 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    %28 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
    cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc117)
    cir.br ^bb12 loc(#loc113)
  ^bb11:  // pred: ^bb9
    %29 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc89)
    %30 = cir.cast(array_to_ptrdecay, %29 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc89)
    cir.call @printLine(%30) : (!cir.ptr<!s8i>) -> () loc(#loc118)
    cir.br ^bb12 loc(#loc103)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc103)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc91)
  } loc(#loc177)
  cir.func internal private @goodG2BSource(%arg0: !s32i loc(fused[#loc121, #loc122])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc187)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc120)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc123)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc124)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc126)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc189)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc189)
    cir.return %4 : !s32i loc(#loc189)
  } loc(#loc186)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc191)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc192)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc134)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc193)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc136)
    %4 = cir.call @goodG2BSource(%3) : (!s32i) -> !s32i loc(#loc137)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    cir.br ^bb1 loc(#loc195)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc142)
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc131)
    %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc142)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc191)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc143)
    cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc144)
    cir.br ^bb2 loc(#loc141)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc129)
  } loc(#loc190)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_square_42.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":38:23)
#loc10 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":26:1)
#loc11 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":42:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":29:9)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":29:45)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":27:1)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":28:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":40:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":31:9)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":39:9)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":31:19)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":31:32)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":31:49)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":31:13)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":31:59)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":32:9)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":35:9)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":37:9)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":34:25)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":34:20)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":34:13)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":34:36)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":38:13)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":41:12)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":41:5)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":44:1)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":55:1)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":52:9)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":52:29)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":46:5)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":46:9)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":48:12)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":48:5)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":49:22)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":49:12)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":49:5)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":49:26)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":50:5)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":54:5)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":52:22)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":53:22)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":53:9)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":119:1)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":123:1)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":121:5)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":121:13)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":122:5)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":122:13)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":83:1)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":99:1)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":86:9)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":86:45)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":84:1)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":85:5)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":97:5)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":88:9)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":96:9)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":88:19)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":88:32)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":88:49)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":88:13)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":88:59)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":89:9)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":92:9)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":94:9)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":91:25)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":91:20)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":91:13)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":91:36)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":95:23)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":95:13)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":98:12)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":98:5)
#loc88 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":115:19)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":101:1)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":117:1)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":110:9)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":110:29)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":103:5)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":103:9)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":105:12)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":105:5)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":106:26)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":106:12)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":106:5)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":106:30)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":108:5)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":116:5)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":108:9)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":108:16)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":108:31)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":108:27)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":108:45)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":108:58)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":108:65)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":109:5)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":112:5)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":114:5)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":110:22)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":111:22)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":111:9)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":115:9)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":62:1)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":67:1)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":63:1)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":65:12)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":65:5)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":66:12)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":66:5)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":69:1)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":80:1)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":77:9)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":77:29)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":71:5)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":71:9)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":73:12)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":73:5)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":74:26)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":74:12)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":74:5)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":74:30)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":75:5)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":79:5)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":77:22)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":78:22)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_square_42.c":78:9)
#loc145 = loc(fused[#loc1, #loc2])
#loc146 = loc(fused[#loc3, #loc4])
#loc147 = loc(fused[#loc5, #loc6])
#loc148 = loc(fused[#loc7, #loc8])
#loc149 = loc(fused[#loc10, #loc11])
#loc151 = loc(fused[#loc14, #loc15])
#loc152 = loc(fused[#loc17, #loc18])
#loc153 = loc(fused[#loc19, #loc20])
#loc154 = loc(fused[#loc24, #loc25])
#loc155 = loc(fused[#loc26, #loc27, #loc28, #loc20])
#loc156 = loc(fused[#loc31, #loc32])
#loc157 = loc(fused[#loc35, #loc34])
#loc158 = loc(fused[#loc36, #loc37])
#loc159 = loc(fused[#loc38, #loc39])
#loc160 = loc(fused[#loc40, #loc41])
#loc161 = loc(fused[#loc42, #loc43])
#loc162 = loc(fused[#loc45, #loc44])
#loc163 = loc(fused[#loc48, #loc49])
#loc164 = loc(fused[#loc50, #loc51])
#loc165 = loc(fused[#loc55, #loc56])
#loc166 = loc(fused[#loc57, #loc58])
#loc167 = loc(fused[#loc59, #loc60])
#loc168 = loc(fused[#loc61, #loc62])
#loc170 = loc(fused[#loc65, #loc66])
#loc171 = loc(fused[#loc68, #loc69])
#loc172 = loc(fused[#loc70, #loc71])
#loc173 = loc(fused[#loc75, #loc76])
#loc174 = loc(fused[#loc77, #loc78, #loc79, #loc71])
#loc175 = loc(fused[#loc82, #loc83])
#loc176 = loc(fused[#loc87, #loc86])
#loc177 = loc(fused[#loc90, #loc91])
#loc178 = loc(fused[#loc92, #loc93])
#loc179 = loc(fused[#loc94, #loc95])
#loc180 = loc(fused[#loc97, #loc96])
#loc181 = loc(fused[#loc100, #loc101])
#loc182 = loc(fused[#loc102, #loc103])
#loc183 = loc(fused[#loc104, #loc105])
#loc184 = loc(fused[#loc108, #loc111])
#loc185 = loc(fused[#loc112, #loc113, #loc114, #loc103])
#loc186 = loc(fused[#loc119, #loc120])
#loc188 = loc(fused[#loc125, #loc124])
#loc189 = loc(fused[#loc127, #loc126])
#loc190 = loc(fused[#loc128, #loc129])
#loc191 = loc(fused[#loc130, #loc131])
#loc192 = loc(fused[#loc132, #loc133])
#loc193 = loc(fused[#loc135, #loc134])
#loc194 = loc(fused[#loc138, #loc139])
#loc195 = loc(fused[#loc140, #loc141])
