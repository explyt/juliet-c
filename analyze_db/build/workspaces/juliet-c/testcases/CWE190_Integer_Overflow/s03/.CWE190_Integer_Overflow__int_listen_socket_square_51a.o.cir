!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_listen_socket_square_51a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc285)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc286)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc287)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc288)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc289)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc290)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc291)
  cir.func private @close(!s32i) -> !s32i loc(#loc292)
  cir.func private @CWE190_Integer_Overflow__int_listen_socket_square_51b_badSink(!s32i) loc(#loc293)
  cir.func no_proto @CWE190_Integer_Overflow__int_listen_socket_square_51_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc295)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc23)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc296)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc298)
      %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc299)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc300)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc301)
      %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc302)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc32)
      %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc32)
      cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc300)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc34)
      %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc34)
      cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc301)
      cir.scope {
        cir.do {
          cir.scope {
            %12 = cir.const #cir.int<2> : !s32i loc(#loc41)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc42)
            %14 = cir.const #cir.int<6> : !s32i loc(#loc43)
            %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc44)
            cir.store %15, %5 : !s32i, !cir.ptr<!s32i> loc(#loc305)
            cir.scope {
              %57 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc49)
              %58 = cir.const #cir.int<1> : !s32i loc(#loc50)
              %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc50)
              %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc307)
              cir.if %60 {
                cir.break loc(#loc52)
              } loc(#loc308)
            } loc(#loc306)
            %16 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc309)
            %17 = cir.const #cir.int<0> : !s32i loc(#loc55)
            %18 = cir.const #cir.int<16> : !u64i loc(#loc310)
            cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc311)
            %19 = cir.const #cir.int<2> : !s32i loc(#loc60)
            %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc60)
            %21 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc61)
            cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc312)
            %22 = cir.const #cir.int<0> : !s32i loc(#loc63)
            %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc63)
            %24 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc64)
            %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc65)
            cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc313)
            %26 = cir.const #cir.int<27015> : !s32i loc(#loc67)
            %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc67)
            %28 = cir.call @htons(%27) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc68)
            %29 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
            cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc314)
            cir.scope {
              %57 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc74)
              %58 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc316)
              %59 = cir.const #cir.int<16> : !u64i loc(#loc317)
              %60 = cir.cast(integral, %59 : !u64i), !u32i loc(#loc317)
              %61 = cir.call @bind(%57, %58, %60) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc79)
              %62 = cir.const #cir.int<1> : !s32i loc(#loc80)
              %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc80)
              %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc318)
              cir.if %64 {
                cir.break loc(#loc82)
              } loc(#loc319)
            } loc(#loc315)
            cir.scope {
              %57 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc85)
              %58 = cir.const #cir.int<5> : !s32i loc(#loc86)
              %59 = cir.call @listen(%57, %58) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc87)
              %60 = cir.const #cir.int<1> : !s32i loc(#loc88)
              %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc88)
              %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc321)
              cir.if %62 {
                cir.break loc(#loc90)
              } loc(#loc322)
            } loc(#loc320)
            %30 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc91)
            %31 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc92)
            %32 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc93)
            %33 = cir.call @accept(%30, %31, %32) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc94)
            cir.store %33, %6 : !s32i, !cir.ptr<!s32i> loc(#loc323)
            cir.scope {
              %57 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc99)
              %58 = cir.const #cir.int<1> : !s32i loc(#loc100)
              %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc100)
              %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc325)
              cir.if %60 {
                cir.break loc(#loc102)
              } loc(#loc326)
            } loc(#loc324)
            %34 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc103)
            %35 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc104)
            %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc104)
            %37 = cir.const #cir.int<3> : !s32i loc(#loc105)
            %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc105)
            %39 = cir.const #cir.int<4> : !u64i loc(#loc105)
            %40 = cir.binop(mul, %38, %39) : !u64i loc(#loc105)
            %41 = cir.const #cir.int<2> : !s32i loc(#loc105)
            %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc105)
            %43 = cir.binop(add, %40, %42) : !u64i loc(#loc105)
            %44 = cir.const #cir.int<1> : !s32i loc(#loc106)
            %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc106)
            %46 = cir.binop(sub, %43, %45) : !u64i loc(#loc327)
            %47 = cir.const #cir.int<0> : !s32i loc(#loc107)
            %48 = cir.call @recv(%34, %36, %46, %47) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc108)
            %49 = cir.cast(integral, %48 : !s64i), !s32i loc(#loc108)
            cir.store %49, %3 : !s32i, !cir.ptr<!s32i> loc(#loc328)
            cir.scope {
              %57 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc113)
              %58 = cir.const #cir.int<1> : !s32i loc(#loc114)
              %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc114)
              %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc330)
              %61 = cir.ternary(%60, true {
                %62 = cir.const #true loc(#loc115)
                cir.yield %62 : !cir.bool loc(#loc115)
              }, false {
                %62 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                %63 = cir.const #cir.int<0> : !s32i loc(#loc117)
                %64 = cir.cmp(eq, %62, %63) : !s32i, !cir.bool loc(#loc331)
                %65 = cir.ternary(%64, true {
                  %66 = cir.const #true loc(#loc115)
                  cir.yield %66 : !cir.bool loc(#loc115)
                }, false {
                  %66 = cir.const #false loc(#loc115)
                  cir.yield %66 : !cir.bool loc(#loc115)
                }) : (!cir.bool) -> !cir.bool loc(#loc115)
                cir.yield %65 : !cir.bool loc(#loc115)
              }) : (!cir.bool) -> !cir.bool loc(#loc115)
              cir.if %61 {
                cir.break loc(#loc119)
              } loc(#loc332)
            } loc(#loc329)
            %50 = cir.const #cir.int<0> : !s32i loc(#loc120)
            %51 = cir.cast(integral, %50 : !s32i), !s8i loc(#loc120)
            %52 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc121)
            %53 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc122)
            %54 = cir.ptr_stride(%53 : !cir.ptr<!s8i>, %52 : !s32i), !cir.ptr<!s8i> loc(#loc122)
            cir.store %51, %54 : !s8i, !cir.ptr<!s8i> loc(#loc333)
            %55 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc123)
            %56 = cir.call @atoi(%55) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc124)
            cir.store %56, %0 : !s32i, !cir.ptr<!s32i> loc(#loc334)
          } loc(#loc304)
          cir.yield loc(#loc38)
        } while {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc127)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc127)
          cir.condition(%13) loc(#loc127)
        } loc(#loc303)
      } loc(#loc303)
      cir.scope {
        %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc130)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc131)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc131)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc336)
        cir.if %15 {
          %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc133)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc134)
        } loc(#loc337)
      } loc(#loc335)
      cir.scope {
        %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc137)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc138)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc138)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc339)
        cir.if %15 {
          %16 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc140)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc141)
        } loc(#loc340)
      } loc(#loc338)
    } loc(#loc297)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc142)
    cir.call @CWE190_Integer_Overflow__int_listen_socket_square_51b_badSink(%2) : (!s32i) -> () loc(#loc143)
    cir.return loc(#loc20)
  } loc(#loc294)
  cir.func no_proto @CWE190_Integer_Overflow__int_listen_socket_square_51_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc342)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc146)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc343)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc148)
    cir.return loc(#loc145)
  } loc(#loc341)
  cir.func private @CWE190_Integer_Overflow__int_listen_socket_square_51b_goodG2BSink(!s32i) loc(#loc344)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc346)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc156)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc347)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc158)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc348)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc160)
    cir.call @CWE190_Integer_Overflow__int_listen_socket_square_51b_goodG2BSink(%3) : (!s32i) -> () loc(#loc161)
    cir.return loc(#loc153)
  } loc(#loc345)
  cir.func private @CWE190_Integer_Overflow__int_listen_socket_square_51b_goodB2GSink(!s32i) loc(#loc349)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc351)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc168)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc352)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc354)
      %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc355)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc356)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc357)
      %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc358)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc177)
      %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc177)
      cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc356)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc179)
      %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc179)
      cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc357)
      cir.scope {
        cir.do {
          cir.scope {
            %12 = cir.const #cir.int<2> : !s32i loc(#loc186)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc187)
            %14 = cir.const #cir.int<6> : !s32i loc(#loc188)
            %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc189)
            cir.store %15, %5 : !s32i, !cir.ptr<!s32i> loc(#loc361)
            cir.scope {
              %57 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc194)
              %58 = cir.const #cir.int<1> : !s32i loc(#loc195)
              %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc195)
              %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc363)
              cir.if %60 {
                cir.break loc(#loc197)
              } loc(#loc364)
            } loc(#loc362)
            %16 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc365)
            %17 = cir.const #cir.int<0> : !s32i loc(#loc200)
            %18 = cir.const #cir.int<16> : !u64i loc(#loc366)
            cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc367)
            %19 = cir.const #cir.int<2> : !s32i loc(#loc205)
            %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc205)
            %21 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc61)
            cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc368)
            %22 = cir.const #cir.int<0> : !s32i loc(#loc207)
            %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc207)
            %24 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc64)
            %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc65)
            cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc369)
            %26 = cir.const #cir.int<27015> : !s32i loc(#loc209)
            %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc209)
            %28 = cir.call @htons(%27) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc210)
            %29 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
            cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc370)
            cir.scope {
              %57 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc215)
              %58 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc372)
              %59 = cir.const #cir.int<16> : !u64i loc(#loc373)
              %60 = cir.cast(integral, %59 : !u64i), !u32i loc(#loc373)
              %61 = cir.call @bind(%57, %58, %60) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc220)
              %62 = cir.const #cir.int<1> : !s32i loc(#loc221)
              %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc221)
              %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc374)
              cir.if %64 {
                cir.break loc(#loc223)
              } loc(#loc375)
            } loc(#loc371)
            cir.scope {
              %57 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc226)
              %58 = cir.const #cir.int<5> : !s32i loc(#loc227)
              %59 = cir.call @listen(%57, %58) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc228)
              %60 = cir.const #cir.int<1> : !s32i loc(#loc229)
              %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc229)
              %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc377)
              cir.if %62 {
                cir.break loc(#loc231)
              } loc(#loc378)
            } loc(#loc376)
            %30 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc232)
            %31 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc233)
            %32 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc234)
            %33 = cir.call @accept(%30, %31, %32) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc235)
            cir.store %33, %6 : !s32i, !cir.ptr<!s32i> loc(#loc379)
            cir.scope {
              %57 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc240)
              %58 = cir.const #cir.int<1> : !s32i loc(#loc241)
              %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc241)
              %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc381)
              cir.if %60 {
                cir.break loc(#loc243)
              } loc(#loc382)
            } loc(#loc380)
            %34 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc244)
            %35 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc245)
            %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc245)
            %37 = cir.const #cir.int<3> : !s32i loc(#loc246)
            %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc246)
            %39 = cir.const #cir.int<4> : !u64i loc(#loc246)
            %40 = cir.binop(mul, %38, %39) : !u64i loc(#loc246)
            %41 = cir.const #cir.int<2> : !s32i loc(#loc246)
            %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc246)
            %43 = cir.binop(add, %40, %42) : !u64i loc(#loc246)
            %44 = cir.const #cir.int<1> : !s32i loc(#loc247)
            %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc247)
            %46 = cir.binop(sub, %43, %45) : !u64i loc(#loc383)
            %47 = cir.const #cir.int<0> : !s32i loc(#loc248)
            %48 = cir.call @recv(%34, %36, %46, %47) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc249)
            %49 = cir.cast(integral, %48 : !s64i), !s32i loc(#loc249)
            cir.store %49, %3 : !s32i, !cir.ptr<!s32i> loc(#loc384)
            cir.scope {
              %57 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc254)
              %58 = cir.const #cir.int<1> : !s32i loc(#loc255)
              %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc255)
              %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc386)
              %61 = cir.ternary(%60, true {
                %62 = cir.const #true loc(#loc256)
                cir.yield %62 : !cir.bool loc(#loc256)
              }, false {
                %62 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc257)
                %63 = cir.const #cir.int<0> : !s32i loc(#loc258)
                %64 = cir.cmp(eq, %62, %63) : !s32i, !cir.bool loc(#loc387)
                %65 = cir.ternary(%64, true {
                  %66 = cir.const #true loc(#loc256)
                  cir.yield %66 : !cir.bool loc(#loc256)
                }, false {
                  %66 = cir.const #false loc(#loc256)
                  cir.yield %66 : !cir.bool loc(#loc256)
                }) : (!cir.bool) -> !cir.bool loc(#loc256)
                cir.yield %65 : !cir.bool loc(#loc256)
              }) : (!cir.bool) -> !cir.bool loc(#loc256)
              cir.if %61 {
                cir.break loc(#loc260)
              } loc(#loc388)
            } loc(#loc385)
            %50 = cir.const #cir.int<0> : !s32i loc(#loc261)
            %51 = cir.cast(integral, %50 : !s32i), !s8i loc(#loc261)
            %52 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc262)
            %53 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc263)
            %54 = cir.ptr_stride(%53 : !cir.ptr<!s8i>, %52 : !s32i), !cir.ptr<!s8i> loc(#loc263)
            cir.store %51, %54 : !s8i, !cir.ptr<!s8i> loc(#loc389)
            %55 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc264)
            %56 = cir.call @atoi(%55) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc265)
            cir.store %56, %0 : !s32i, !cir.ptr<!s32i> loc(#loc390)
          } loc(#loc360)
          cir.yield loc(#loc183)
        } while {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc268)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc268)
          cir.condition(%13) loc(#loc268)
        } loc(#loc359)
      } loc(#loc359)
      cir.scope {
        %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc271)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc272)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc272)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc392)
        cir.if %15 {
          %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc274)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc275)
        } loc(#loc393)
      } loc(#loc391)
      cir.scope {
        %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc278)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc279)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc279)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc395)
        cir.if %15 {
          %16 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc281)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc282)
        } loc(#loc396)
      } loc(#loc394)
    } loc(#loc353)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc283)
    cir.call @CWE190_Integer_Overflow__int_listen_socket_square_51b_goodB2GSink(%2) : (!s32i) -> () loc(#loc284)
    cir.return loc(#loc165)
  } loc(#loc350)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_listen_socket_square_51a.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":47:1)
#loc18 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":47:76)
#loc19 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":49:1)
#loc20 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":124:1)
#loc21 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":51:5)
#loc22 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":51:9)
#loc23 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":53:12)
#loc24 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":53:5)
#loc25 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":54:5)
#loc26 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":122:5)
#loc27 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":59:9)
#loc28 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":59:13)
#loc29 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":60:9)
#loc30 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":60:28)
#loc31 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":61:9)
#loc32 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":61:31)
#loc33 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":62:9)
#loc34 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":62:31)
#loc35 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":63:9)
#loc36 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":63:41)
#loc37 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":64:9)
#loc38 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":107:17)
#loc39 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":65:9)
#loc40 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":106:9)
#loc41 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":74:35)
#loc42 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":74:44)
#loc43 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":74:57)
#loc44 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":74:28)
#loc45 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":74:13)
#loc46 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":74:68)
#loc47 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":75:13)
#loc48 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":78:13)
#loc49 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":75:17)
#loc50 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":75:33)
#loc51 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":76:13)
#loc52 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":77:17)
#loc53 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":79:20)
#loc54 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":79:21)
#loc55 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":79:30)
#loc56 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":79:33)
#loc57 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":79:47)
#loc58 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":79:13)
#loc59 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":79:48)
#loc60 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":80:34)
#loc61 = loc("/usr/include/netinet/in.h":249:5)
#loc62 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":80:13)
#loc63 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":81:39)
#loc64 = loc("/usr/include/netinet/in.h":251:20)
#loc65 = loc("/usr/include/netinet/in.h":33:15)
#loc66 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":81:13)
#loc67 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":82:38)
#loc68 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":82:32)
#loc69 = loc("/usr/include/netinet/in.h":250:15)
#loc70 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":82:13)
#loc71 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":82:46)
#loc72 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":83:13)
#loc73 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":86:13)
#loc74 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":83:22)
#loc75 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":83:54)
#loc76 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":83:55)
#loc77 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":83:64)
#loc78 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":83:78)
#loc79 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":83:17)
#loc80 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":83:84)
#loc81 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":84:13)
#loc82 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":85:17)
#loc83 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":87:13)
#loc84 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":90:13)
#loc85 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":87:24)
#loc86 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":87:38)
#loc87 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":87:17)
#loc88 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":87:57)
#loc89 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":88:13)
#loc90 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":89:17)
#loc91 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":91:35)
#loc92 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":91:49)
#loc93 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":91:55)
#loc94 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":91:28)
#loc95 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":91:13)
#loc96 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":91:59)
#loc97 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":92:13)
#loc98 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":95:13)
#loc99 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":92:17)
#loc100 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":92:33)
#loc101 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":93:13)
#loc102 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":94:17)
#loc103 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":97:31)
#loc104 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":97:45)
#loc105 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":97:58)
#loc106 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":97:76)
#loc107 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":97:79)
#loc108 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":97:26)
#loc109 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":97:13)
#loc110 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":97:80)
#loc111 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":98:13)
#loc112 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":101:13)
#loc113 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":98:17)
#loc114 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":98:31)
#loc115 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":98:44)
#loc116 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":98:47)
#loc117 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":98:61)
#loc118 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":99:13)
#loc119 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":100:17)
#loc120 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":103:39)
#loc121 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":103:25)
#loc122 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":103:13)
#loc123 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":105:25)
#loc124 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":105:20)
#loc125 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":105:13)
#loc126 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":105:36)
#loc127 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":107:16)
#loc128 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":108:9)
#loc129 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":111:9)
#loc130 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":108:13)
#loc131 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":108:29)
#loc132 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":109:9)
#loc133 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":110:26)
#loc134 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":110:13)
#loc135 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":112:9)
#loc136 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":115:9)
#loc137 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":112:13)
#loc138 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":112:29)
#loc139 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":113:9)
#loc140 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":114:26)
#loc141 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":114:13)
#loc142 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":123:67)
#loc143 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":123:5)
#loc144 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":223:1)
#loc145 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":227:1)
#loc146 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":225:5)
#loc147 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":225:13)
#loc148 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":226:5)
#loc149 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":226:13)
#loc150 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":131:1)
#loc151 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":131:80)
#loc152 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":133:1)
#loc153 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":141:1)
#loc154 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":135:5)
#loc155 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":135:9)
#loc156 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":137:12)
#loc157 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":137:5)
#loc158 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":139:12)
#loc159 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":139:5)
#loc160 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":140:71)
#loc161 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":140:5)
#loc162 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":144:1)
#loc163 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":144:80)
#loc164 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":146:1)
#loc165 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":221:1)
#loc166 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":148:5)
#loc167 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":148:9)
#loc168 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":150:12)
#loc169 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":150:5)
#loc170 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":151:5)
#loc171 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":219:5)
#loc172 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":156:9)
#loc173 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":156:13)
#loc174 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":157:9)
#loc175 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":157:28)
#loc176 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":158:9)
#loc177 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":158:31)
#loc178 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":159:9)
#loc179 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":159:31)
#loc180 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":160:9)
#loc181 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":160:41)
#loc182 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":161:9)
#loc183 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":204:17)
#loc184 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":162:9)
#loc185 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":203:9)
#loc186 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":171:35)
#loc187 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":171:44)
#loc188 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":171:57)
#loc189 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":171:28)
#loc190 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":171:13)
#loc191 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":171:68)
#loc192 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":172:13)
#loc193 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":175:13)
#loc194 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":172:17)
#loc195 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":172:33)
#loc196 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":173:13)
#loc197 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":174:17)
#loc198 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":176:20)
#loc199 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":176:21)
#loc200 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":176:30)
#loc201 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":176:33)
#loc202 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":176:47)
#loc203 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":176:13)
#loc204 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":176:48)
#loc205 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":177:34)
#loc206 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":177:13)
#loc207 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":178:39)
#loc208 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":178:13)
#loc209 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":179:38)
#loc210 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":179:32)
#loc211 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":179:13)
#loc212 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":179:46)
#loc213 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":180:13)
#loc214 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":183:13)
#loc215 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":180:22)
#loc216 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":180:54)
#loc217 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":180:55)
#loc218 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":180:64)
#loc219 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":180:78)
#loc220 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":180:17)
#loc221 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":180:84)
#loc222 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":181:13)
#loc223 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":182:17)
#loc224 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":184:13)
#loc225 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":187:13)
#loc226 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":184:24)
#loc227 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":184:38)
#loc228 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":184:17)
#loc229 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":184:57)
#loc230 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":185:13)
#loc231 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":186:17)
#loc232 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":188:35)
#loc233 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":188:49)
#loc234 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":188:55)
#loc235 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":188:28)
#loc236 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":188:13)
#loc237 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":188:59)
#loc238 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":189:13)
#loc239 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":192:13)
#loc240 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":189:17)
#loc241 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":189:33)
#loc242 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":190:13)
#loc243 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":191:17)
#loc244 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":194:31)
#loc245 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":194:45)
#loc246 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":194:58)
#loc247 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":194:76)
#loc248 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":194:79)
#loc249 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":194:26)
#loc250 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":194:13)
#loc251 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":194:80)
#loc252 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":195:13)
#loc253 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":198:13)
#loc254 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":195:17)
#loc255 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":195:31)
#loc256 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":195:44)
#loc257 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":195:47)
#loc258 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":195:61)
#loc259 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":196:13)
#loc260 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":197:17)
#loc261 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":200:39)
#loc262 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":200:25)
#loc263 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":200:13)
#loc264 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":202:25)
#loc265 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":202:20)
#loc266 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":202:13)
#loc267 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":202:36)
#loc268 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":204:16)
#loc269 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":205:9)
#loc270 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":208:9)
#loc271 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":205:13)
#loc272 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":205:29)
#loc273 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":206:9)
#loc274 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":207:26)
#loc275 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":207:13)
#loc276 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":209:9)
#loc277 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":212:9)
#loc278 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":209:13)
#loc279 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":209:29)
#loc280 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":210:9)
#loc281 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":211:26)
#loc282 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":211:13)
#loc283 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":220:71)
#loc284 = loc("CWE190_Integer_Overflow__int_listen_socket_square_51a.c":220:5)
#loc285 = loc(fused[#loc1, #loc2])
#loc286 = loc(fused[#loc3, #loc4])
#loc287 = loc(fused[#loc5, #loc6])
#loc288 = loc(fused[#loc7, #loc8])
#loc289 = loc(fused[#loc9, #loc10])
#loc290 = loc(fused[#loc11, #loc12])
#loc291 = loc(fused[#loc13, #loc14])
#loc292 = loc(fused[#loc15, #loc16])
#loc293 = loc(fused[#loc17, #loc18])
#loc294 = loc(fused[#loc19, #loc20])
#loc295 = loc(fused[#loc21, #loc22])
#loc296 = loc(fused[#loc24, #loc23])
#loc297 = loc(fused[#loc25, #loc26])
#loc298 = loc(fused[#loc27, #loc28])
#loc299 = loc(fused[#loc29, #loc30])
#loc300 = loc(fused[#loc31, #loc32])
#loc301 = loc(fused[#loc33, #loc34])
#loc302 = loc(fused[#loc35, #loc36])
#loc303 = loc(fused[#loc37, #loc38])
#loc304 = loc(fused[#loc39, #loc40])
#loc305 = loc(fused[#loc45, #loc46])
#loc306 = loc(fused[#loc47, #loc48])
#loc307 = loc(fused[#loc49, #loc50])
#loc308 = loc(fused[#loc51, #loc48])
#loc309 = loc(fused[#loc53, #loc54])
#loc310 = loc(fused[#loc56, #loc57])
#loc311 = loc(fused[#loc58, #loc59])
#loc312 = loc(fused[#loc62, #loc60])
#loc313 = loc(fused[#loc66, #loc63])
#loc314 = loc(fused[#loc70, #loc71])
#loc315 = loc(fused[#loc72, #loc73])
#loc316 = loc(fused[#loc75, #loc76])
#loc317 = loc(fused[#loc77, #loc78])
#loc318 = loc(fused[#loc79, #loc80])
#loc319 = loc(fused[#loc81, #loc73])
#loc320 = loc(fused[#loc83, #loc84])
#loc321 = loc(fused[#loc87, #loc88])
#loc322 = loc(fused[#loc89, #loc84])
#loc323 = loc(fused[#loc95, #loc96])
#loc324 = loc(fused[#loc97, #loc98])
#loc325 = loc(fused[#loc99, #loc100])
#loc326 = loc(fused[#loc101, #loc98])
#loc327 = loc(fused[#loc105, #loc106])
#loc328 = loc(fused[#loc109, #loc110])
#loc329 = loc(fused[#loc111, #loc112])
#loc330 = loc(fused[#loc113, #loc114])
#loc331 = loc(fused[#loc116, #loc117])
#loc332 = loc(fused[#loc118, #loc112])
#loc333 = loc(fused[#loc122, #loc120])
#loc334 = loc(fused[#loc125, #loc126])
#loc335 = loc(fused[#loc128, #loc129])
#loc336 = loc(fused[#loc130, #loc131])
#loc337 = loc(fused[#loc132, #loc129])
#loc338 = loc(fused[#loc135, #loc136])
#loc339 = loc(fused[#loc137, #loc138])
#loc340 = loc(fused[#loc139, #loc136])
#loc341 = loc(fused[#loc144, #loc145])
#loc342 = loc(fused[#loc146, #loc147])
#loc343 = loc(fused[#loc148, #loc149])
#loc344 = loc(fused[#loc150, #loc151])
#loc345 = loc(fused[#loc152, #loc153])
#loc346 = loc(fused[#loc154, #loc155])
#loc347 = loc(fused[#loc157, #loc156])
#loc348 = loc(fused[#loc159, #loc158])
#loc349 = loc(fused[#loc162, #loc163])
#loc350 = loc(fused[#loc164, #loc165])
#loc351 = loc(fused[#loc166, #loc167])
#loc352 = loc(fused[#loc169, #loc168])
#loc353 = loc(fused[#loc170, #loc171])
#loc354 = loc(fused[#loc172, #loc173])
#loc355 = loc(fused[#loc174, #loc175])
#loc356 = loc(fused[#loc176, #loc177])
#loc357 = loc(fused[#loc178, #loc179])
#loc358 = loc(fused[#loc180, #loc181])
#loc359 = loc(fused[#loc182, #loc183])
#loc360 = loc(fused[#loc184, #loc185])
#loc361 = loc(fused[#loc190, #loc191])
#loc362 = loc(fused[#loc192, #loc193])
#loc363 = loc(fused[#loc194, #loc195])
#loc364 = loc(fused[#loc196, #loc193])
#loc365 = loc(fused[#loc198, #loc199])
#loc366 = loc(fused[#loc201, #loc202])
#loc367 = loc(fused[#loc203, #loc204])
#loc368 = loc(fused[#loc206, #loc205])
#loc369 = loc(fused[#loc208, #loc207])
#loc370 = loc(fused[#loc211, #loc212])
#loc371 = loc(fused[#loc213, #loc214])
#loc372 = loc(fused[#loc216, #loc217])
#loc373 = loc(fused[#loc218, #loc219])
#loc374 = loc(fused[#loc220, #loc221])
#loc375 = loc(fused[#loc222, #loc214])
#loc376 = loc(fused[#loc224, #loc225])
#loc377 = loc(fused[#loc228, #loc229])
#loc378 = loc(fused[#loc230, #loc225])
#loc379 = loc(fused[#loc236, #loc237])
#loc380 = loc(fused[#loc238, #loc239])
#loc381 = loc(fused[#loc240, #loc241])
#loc382 = loc(fused[#loc242, #loc239])
#loc383 = loc(fused[#loc246, #loc247])
#loc384 = loc(fused[#loc250, #loc251])
#loc385 = loc(fused[#loc252, #loc253])
#loc386 = loc(fused[#loc254, #loc255])
#loc387 = loc(fused[#loc257, #loc258])
#loc388 = loc(fused[#loc259, #loc253])
#loc389 = loc(fused[#loc263, #loc261])
#loc390 = loc(fused[#loc266, #loc267])
#loc391 = loc(fused[#loc269, #loc270])
#loc392 = loc(fused[#loc271, #loc272])
#loc393 = loc(fused[#loc273, #loc270])
#loc394 = loc(fused[#loc276, #loc277])
#loc395 = loc(fused[#loc278, #loc279])
#loc396 = loc(fused[#loc280, #loc277])
