!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc145)
  cir.func private  @printIntLine(!s32i) loc(#loc146)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_rand_divide_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc148)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc10)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc14)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc14)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc16)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc16)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc16)
        %9 = cir.ternary(%8, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc16)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc16)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc16)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc16)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc16)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc16)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc16)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc16)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc16)
          cir.yield %22 : !u32i loc(#loc16)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc16)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc16)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc16)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc16)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc16)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc16)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc16)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc16)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc16)
          %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc16)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc16)
          %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc16)
          %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc16)
          cir.yield %26 : !u32i loc(#loc16)
        }) : (!cir.bool) -> !u32i loc(#loc16)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc16)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc152)
      } loc(#loc151)
    } loc(#loc150)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc20)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc20)
      cir.if %4 {
        %5 = cir.const #cir.int<100> : !s32i loc(#loc22)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
        %7 = cir.binop(div, %5, %6) : !s32i loc(#loc155)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc24)
      } loc(#loc154)
    } loc(#loc153)
    cir.return loc(#loc6)
  } loc(#loc147)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_rand_divide_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc157)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc158)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc159)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc160)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    cir.return loc(#loc26)
  } loc(#loc156)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc161)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc37)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc38)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc163)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc43)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc44)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc48)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc48)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc50)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc50)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc50)
        %9 = cir.ternary(%8, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc50)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc50)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc50)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc50)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc50)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc50)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc50)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc50)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc50)
          cir.yield %22 : !u32i loc(#loc50)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc50)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc50)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc50)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc50)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc50)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc50)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc50)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc50)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc50)
          %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc50)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc50)
          %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc50)
          %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc50)
          cir.yield %26 : !u32i loc(#loc50)
        }) : (!cir.bool) -> !u32i loc(#loc50)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc50)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc167)
      } loc(#loc166)
    } loc(#loc165)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc54)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc54)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc37)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc37)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc58)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc61)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc62)
          %7 = cir.cmp(ne, %5, %6) : !s32i, !s32i loc(#loc171)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc63)
          cir.if %8 {
            %9 = cir.const #cir.int<100> : !s32i loc(#loc67)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc68)
            %11 = cir.binop(div, %9, %10) : !s32i loc(#loc173)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc69)
          } else {
            %9 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc38)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc38)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc70)
          } loc(#loc172)
        } loc(#loc170)
      } loc(#loc169)
    } loc(#loc168)
    cir.return loc(#loc40)
  } loc(#loc162)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc175)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc76)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc176)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc80)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc80)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc82)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc82)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc82)
        %9 = cir.ternary(%8, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc82)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc82)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc82)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc82)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc82)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc82)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc82)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc82)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc82)
          cir.yield %22 : !u32i loc(#loc82)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc82)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc82)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc82)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc82)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc82)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc82)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc82)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc82)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc82)
          %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc82)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc82)
          %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc82)
          %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc82)
          cir.yield %26 : !u32i loc(#loc82)
        }) : (!cir.bool) -> !u32i loc(#loc82)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc82)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc179)
      } loc(#loc178)
    } loc(#loc177)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc86)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc86)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc90)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc91)
          %7 = cir.cmp(ne, %5, %6) : !s32i, !s32i loc(#loc183)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc92)
          cir.if %8 {
            %9 = cir.const #cir.int<100> : !s32i loc(#loc96)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc97)
            %11 = cir.binop(div, %9, %10) : !s32i loc(#loc185)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc98)
          } else {
            %9 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc99)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc99)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc100)
          } loc(#loc184)
        } loc(#loc182)
      } loc(#loc181)
    } loc(#loc180)
    cir.return loc(#loc72)
  } loc(#loc174)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc187)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc105)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc106)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc110)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc110)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc114)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc114)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc115)
      } else {
        %5 = cir.const #cir.int<7> : !s32i loc(#loc116)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc191)
      } loc(#loc190)
    } loc(#loc189)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc120)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc120)
      cir.if %4 {
        %5 = cir.const #cir.int<100> : !s32i loc(#loc122)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc123)
        %7 = cir.binop(div, %5, %6) : !s32i loc(#loc194)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc124)
      } loc(#loc193)
    } loc(#loc192)
    cir.return loc(#loc102)
  } loc(#loc186)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc196)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc129)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc130)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc134)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc134)
      cir.if %4 {
        %5 = cir.const #cir.int<7> : !s32i loc(#loc136)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc200)
      } loc(#loc199)
    } loc(#loc198)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc140)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc140)
      cir.if %4 {
        %5 = cir.const #cir.int<100> : !s32i loc(#loc142)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc143)
        %7 = cir.binop(div, %5, %6) : !s32i loc(#loc203)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc144)
      } loc(#loc202)
    } loc(#loc201)
    cir.return loc(#loc126)
  } loc(#loc195)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_04.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":28:1)
#loc6 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":43:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":30:5)
#loc8 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":30:9)
#loc9 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":32:13)
#loc10 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":32:12)
#loc11 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":32:5)
#loc12 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":33:5)
#loc13 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":37:5)
#loc14 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":33:8)
#loc15 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":34:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":36:16)
#loc17 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":36:9)
#loc18 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":38:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":42:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":38:8)
#loc21 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":39:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":41:22)
#loc23 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":41:28)
#loc24 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":41:9)
#loc25 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":145:1)
#loc26 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":151:1)
#loc27 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":147:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":147:14)
#loc29 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":148:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":148:14)
#loc31 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":149:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":149:14)
#loc33 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":150:5)
#loc34 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":150:14)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc37 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":63:19)
#loc38 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":74:23)
#loc39 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":50:1)
#loc40 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":77:1)
#loc41 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":52:5)
#loc42 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":52:9)
#loc43 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":54:13)
#loc44 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":54:12)
#loc45 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":54:5)
#loc46 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":55:5)
#loc47 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":59:5)
#loc48 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":55:8)
#loc49 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":56:5)
#loc50 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":58:16)
#loc51 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":58:9)
#loc52 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":60:5)
#loc53 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":76:5)
#loc54 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":60:8)
#loc55 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":61:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":64:5)
#loc57 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":66:5)
#loc58 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":63:9)
#loc59 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":68:9)
#loc60 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":75:9)
#loc61 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":68:13)
#loc62 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":68:21)
#loc63 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":68:18)
#loc64 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":69:9)
#loc65 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":71:9)
#loc66 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":73:9)
#loc67 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":70:26)
#loc68 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":70:32)
#loc69 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":70:13)
#loc70 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":74:13)
#loc71 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":80:1)
#loc72 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":102:1)
#loc73 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":82:5)
#loc74 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":82:9)
#loc75 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":84:13)
#loc76 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":84:12)
#loc77 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":84:5)
#loc78 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":85:5)
#loc79 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":89:5)
#loc80 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":85:8)
#loc81 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":86:5)
#loc82 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":88:16)
#loc83 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":88:9)
#loc84 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":90:5)
#loc85 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":101:5)
#loc86 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":90:8)
#loc87 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":91:5)
#loc88 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":93:9)
#loc89 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":100:9)
#loc90 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":93:13)
#loc91 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":93:21)
#loc92 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":93:18)
#loc93 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":94:9)
#loc94 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":96:9)
#loc95 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":98:9)
#loc96 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":95:26)
#loc97 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":95:32)
#loc98 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":95:13)
#loc99 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":99:23)
#loc100 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":99:13)
#loc101 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":105:1)
#loc102 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":125:1)
#loc103 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":107:5)
#loc104 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":107:9)
#loc105 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":109:13)
#loc106 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":109:12)
#loc107 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":109:5)
#loc108 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":110:5)
#loc109 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":119:5)
#loc110 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":110:8)
#loc111 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":111:5)
#loc112 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":114:5)
#loc113 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":116:5)
#loc114 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":113:19)
#loc115 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":113:9)
#loc116 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":118:16)
#loc117 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":118:9)
#loc118 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":120:5)
#loc119 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":124:5)
#loc120 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":120:8)
#loc121 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":121:5)
#loc122 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":123:22)
#loc123 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":123:28)
#loc124 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":123:9)
#loc125 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":128:1)
#loc126 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":143:1)
#loc127 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":130:5)
#loc128 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":130:9)
#loc129 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":132:13)
#loc130 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":132:12)
#loc131 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":132:5)
#loc132 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":133:5)
#loc133 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":137:5)
#loc134 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":133:8)
#loc135 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":134:5)
#loc136 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":136:16)
#loc137 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":136:9)
#loc138 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":138:5)
#loc139 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":142:5)
#loc140 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":138:8)
#loc141 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":139:5)
#loc142 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":141:22)
#loc143 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":141:28)
#loc144 = loc("CWE369_Divide_by_Zero__int_rand_divide_04.c":141:9)
#loc145 = loc(fused[#loc1, #loc2])
#loc146 = loc(fused[#loc3, #loc4])
#loc147 = loc(fused[#loc5, #loc6])
#loc148 = loc(fused[#loc7, #loc8])
#loc149 = loc(fused[#loc11, #loc9])
#loc150 = loc(fused[#loc12, #loc13])
#loc151 = loc(fused[#loc15, #loc13])
#loc152 = loc(fused[#loc17, #loc16])
#loc153 = loc(fused[#loc18, #loc19])
#loc154 = loc(fused[#loc21, #loc19])
#loc155 = loc(fused[#loc22, #loc23])
#loc156 = loc(fused[#loc25, #loc26])
#loc157 = loc(fused[#loc27, #loc28])
#loc158 = loc(fused[#loc29, #loc30])
#loc159 = loc(fused[#loc31, #loc32])
#loc160 = loc(fused[#loc33, #loc34])
#loc161 = loc(fused[#loc35, #loc36])
#loc162 = loc(fused[#loc39, #loc40])
#loc163 = loc(fused[#loc41, #loc42])
#loc164 = loc(fused[#loc45, #loc43])
#loc165 = loc(fused[#loc46, #loc47])
#loc166 = loc(fused[#loc49, #loc47])
#loc167 = loc(fused[#loc51, #loc50])
#loc168 = loc(fused[#loc52, #loc53])
#loc169 = loc(fused[#loc55, #loc56, #loc57, #loc53])
#loc170 = loc(fused[#loc59, #loc60])
#loc171 = loc(fused[#loc61, #loc62])
#loc172 = loc(fused[#loc64, #loc65, #loc66, #loc60])
#loc173 = loc(fused[#loc67, #loc68])
#loc174 = loc(fused[#loc71, #loc72])
#loc175 = loc(fused[#loc73, #loc74])
#loc176 = loc(fused[#loc77, #loc75])
#loc177 = loc(fused[#loc78, #loc79])
#loc178 = loc(fused[#loc81, #loc79])
#loc179 = loc(fused[#loc83, #loc82])
#loc180 = loc(fused[#loc84, #loc85])
#loc181 = loc(fused[#loc87, #loc85])
#loc182 = loc(fused[#loc88, #loc89])
#loc183 = loc(fused[#loc90, #loc91])
#loc184 = loc(fused[#loc93, #loc94, #loc95, #loc89])
#loc185 = loc(fused[#loc96, #loc97])
#loc186 = loc(fused[#loc101, #loc102])
#loc187 = loc(fused[#loc103, #loc104])
#loc188 = loc(fused[#loc107, #loc105])
#loc189 = loc(fused[#loc108, #loc109])
#loc190 = loc(fused[#loc111, #loc112, #loc113, #loc109])
#loc191 = loc(fused[#loc117, #loc116])
#loc192 = loc(fused[#loc118, #loc119])
#loc193 = loc(fused[#loc121, #loc119])
#loc194 = loc(fused[#loc122, #loc123])
#loc195 = loc(fused[#loc125, #loc126])
#loc196 = loc(fused[#loc127, #loc128])
#loc197 = loc(fused[#loc131, #loc129])
#loc198 = loc(fused[#loc132, #loc133])
#loc199 = loc(fused[#loc135, #loc133])
#loc200 = loc(fused[#loc137, #loc136])
#loc201 = loc(fused[#loc138, #loc139])
#loc202 = loc(fused[#loc141, #loc139])
#loc203 = loc(fused[#loc142, #loc143])
