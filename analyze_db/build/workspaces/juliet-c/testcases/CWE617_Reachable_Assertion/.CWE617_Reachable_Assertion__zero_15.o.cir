!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__zero_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"0\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__zero_15.c\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__zero_15_bad()\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc3)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE617_Reachable_Assertion__zero_15_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc11)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.const #cir.int<4> : !u64i loc(#loc3)
          cir.scope {
            cir.scope {
              %2 = cir.const #cir.int<0> : !s32i loc(#loc3)
              %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc3)
              cir.if %3 {
              } else {
                %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc3)
                %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc3)
                %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc3)
                %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc3)
                %8 = cir.const #cir.int<28> : !s32i loc(#loc3)
                %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc3)
                %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc3)
                %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc3)
                cir.call @__assert_fail(%5, %7, %9, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc3)
              } loc(#loc3)
            } loc(#loc3)
          } loc(#loc3)
          cir.break loc(#loc13)
        } loc(#loc12)
        cir.case(default, []) {
          %1 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc6)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc6)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc15)
          cir.break loc(#loc16)
        } loc(#loc14)
        cir.yield loc(#loc9)
      } loc(#loc9)
    } loc(#loc50)
    cir.return loc(#loc8)
  } loc(#loc49)
  cir.func no_proto @CWE617_Reachable_Assertion__zero_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc52)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc19)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc53)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc21)
    cir.return loc(#loc18)
  } loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"1\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc23)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"void good1()\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc23)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc28)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc30)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc30)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc31)
          cir.break loc(#loc32)
        } loc(#loc29)
        cir.case(default, []) {
          %1 = cir.const #cir.int<4> : !u64i loc(#loc23)
          cir.scope {
            cir.scope {
              %2 = cir.const #cir.int<1> : !s32i loc(#loc23)
              %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc23)
              cir.if %3 {
              } else {
                %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc23)
                %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc23)
                %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc23)
                %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc23)
                %8 = cir.const #cir.int<54> : !s32i loc(#loc23)
                %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc23)
                %10 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc23)
                %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc23)
                cir.call @__assert_fail(%5, %7, %9, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc23)
              } loc(#loc23)
            } loc(#loc23)
          } loc(#loc23)
          cir.break loc(#loc34)
        } loc(#loc33)
        cir.yield loc(#loc26)
      } loc(#loc26)
    } loc(#loc55)
    cir.return loc(#loc25)
  } loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"void good2()\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc35)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc40)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.const #cir.int<4> : !u64i loc(#loc35)
          cir.scope {
            cir.scope {
              %2 = cir.const #cir.int<1> : !s32i loc(#loc35)
              %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc35)
              cir.if %3 {
              } else {
                %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc35)
                %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc35)
                %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc35)
                %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc35)
                %8 = cir.const #cir.int<68> : !s32i loc(#loc35)
                %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc35)
                %10 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc35)
                %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc35)
                cir.call @__assert_fail(%5, %7, %9, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc35)
              } loc(#loc35)
            } loc(#loc35)
          } loc(#loc35)
          cir.break loc(#loc42)
        } loc(#loc41)
        cir.case(default, []) {
          %1 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc44)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc44)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc45)
          cir.break loc(#loc46)
        } loc(#loc43)
        cir.yield loc(#loc38)
      } loc(#loc38)
    } loc(#loc57)
    cir.return loc(#loc37)
  } loc(#loc56)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__zero_15.c":0:0)
#loc1 = loc("/usr/include/assert.h":69:1)
#loc2 = loc("/usr/include/assert.h":71:43)
#loc3 = loc("CWE617_Reachable_Assertion__zero_15.c":28:9)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc6 = loc("CWE617_Reachable_Assertion__zero_15.c":32:19)
#loc7 = loc("CWE617_Reachable_Assertion__zero_15.c":22:1)
#loc8 = loc("CWE617_Reachable_Assertion__zero_15.c":35:1)
#loc9 = loc("CWE617_Reachable_Assertion__zero_15.c":24:5)
#loc10 = loc("CWE617_Reachable_Assertion__zero_15.c":34:5)
#loc11 = loc("CWE617_Reachable_Assertion__zero_15.c":24:12)
#loc12 = loc("CWE617_Reachable_Assertion__zero_15.c":26:5)
#loc13 = loc("CWE617_Reachable_Assertion__zero_15.c":29:9)
#loc14 = loc("CWE617_Reachable_Assertion__zero_15.c":30:5)
#loc15 = loc("CWE617_Reachable_Assertion__zero_15.c":32:9)
#loc16 = loc("CWE617_Reachable_Assertion__zero_15.c":33:9)
#loc17 = loc("CWE617_Reachable_Assertion__zero_15.c":77:1)
#loc18 = loc("CWE617_Reachable_Assertion__zero_15.c":81:1)
#loc19 = loc("CWE617_Reachable_Assertion__zero_15.c":79:5)
#loc20 = loc("CWE617_Reachable_Assertion__zero_15.c":79:11)
#loc21 = loc("CWE617_Reachable_Assertion__zero_15.c":80:5)
#loc22 = loc("CWE617_Reachable_Assertion__zero_15.c":80:11)
#loc23 = loc("CWE617_Reachable_Assertion__zero_15.c":54:9)
#loc24 = loc("CWE617_Reachable_Assertion__zero_15.c":42:1)
#loc25 = loc("CWE617_Reachable_Assertion__zero_15.c":57:1)
#loc26 = loc("CWE617_Reachable_Assertion__zero_15.c":44:5)
#loc27 = loc("CWE617_Reachable_Assertion__zero_15.c":56:5)
#loc28 = loc("CWE617_Reachable_Assertion__zero_15.c":44:12)
#loc29 = loc("CWE617_Reachable_Assertion__zero_15.c":46:5)
#loc30 = loc("CWE617_Reachable_Assertion__zero_15.c":48:19)
#loc31 = loc("CWE617_Reachable_Assertion__zero_15.c":48:9)
#loc32 = loc("CWE617_Reachable_Assertion__zero_15.c":49:9)
#loc33 = loc("CWE617_Reachable_Assertion__zero_15.c":50:5)
#loc34 = loc("CWE617_Reachable_Assertion__zero_15.c":55:9)
#loc35 = loc("CWE617_Reachable_Assertion__zero_15.c":68:9)
#loc36 = loc("CWE617_Reachable_Assertion__zero_15.c":60:1)
#loc37 = loc("CWE617_Reachable_Assertion__zero_15.c":75:1)
#loc38 = loc("CWE617_Reachable_Assertion__zero_15.c":62:5)
#loc39 = loc("CWE617_Reachable_Assertion__zero_15.c":74:5)
#loc40 = loc("CWE617_Reachable_Assertion__zero_15.c":62:12)
#loc41 = loc("CWE617_Reachable_Assertion__zero_15.c":64:5)
#loc42 = loc("CWE617_Reachable_Assertion__zero_15.c":69:9)
#loc43 = loc("CWE617_Reachable_Assertion__zero_15.c":70:5)
#loc44 = loc("CWE617_Reachable_Assertion__zero_15.c":72:19)
#loc45 = loc("CWE617_Reachable_Assertion__zero_15.c":72:9)
#loc46 = loc("CWE617_Reachable_Assertion__zero_15.c":73:9)
#loc47 = loc(fused[#loc1, #loc2])
#loc48 = loc(fused[#loc4, #loc5])
#loc49 = loc(fused[#loc7, #loc8])
#loc50 = loc(fused[#loc9, #loc10])
#loc51 = loc(fused[#loc17, #loc18])
#loc52 = loc(fused[#loc19, #loc20])
#loc53 = loc(fused[#loc21, #loc22])
#loc54 = loc(fused[#loc24, #loc25])
#loc55 = loc(fused[#loc26, #loc27])
#loc56 = loc(fused[#loc36, #loc37])
#loc57 = loc(fused[#loc38, #loc39])
