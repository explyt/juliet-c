!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc173 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":272:10)
#loc174 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":272:14)
#loc175 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":272:20)
#loc176 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":272:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc426 = loc(fused[#loc173, #loc174])
#loc427 = loc(fused[#loc175, #loc176])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_listen_socket_square_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc360)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc361)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc362)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc363)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc364)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc365)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc366)
  cir.func private @close(!s32i) -> !s32i loc(#loc367)
  cir.func private @printIntLine(!s32i) loc(#loc368)
  cir.func no_proto @CWE190_Integer_Overflow__int_listen_socket_square_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc370)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc23)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc371)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc27)
        cir.condition(%3) loc(#loc27)
      } do {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc374)
          %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc375)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc376)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc377)
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc378)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc35)
          %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc35)
          cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc376)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc37)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc37)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc377)
          cir.scope {
            cir.do {
              %11 = cir.const #cir.int<2> : !s32i loc(#loc42)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc43)
              %13 = cir.const #cir.int<6> : !s32i loc(#loc44)
              %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc45)
              cir.store %14, %4 : !s32i, !cir.ptr<!s32i> loc(#loc380)
              cir.scope {
                %56 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc50)
                %57 = cir.const #cir.int<1> : !s32i loc(#loc51)
                %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc51)
                %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc382)
                cir.if %59 {
                  cir.break loc(#loc53)
                } loc(#loc383)
              } loc(#loc381)
              %15 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc384)
              %16 = cir.const #cir.int<0> : !s32i loc(#loc56)
              %17 = cir.const #cir.int<16> : !u64i loc(#loc385)
              cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc386)
              %18 = cir.const #cir.int<2> : !s32i loc(#loc61)
              %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc61)
              %20 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc62)
              cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc387)
              %21 = cir.const #cir.int<0> : !s32i loc(#loc64)
              %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc64)
              %23 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc65)
              %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc66)
              cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc388)
              %25 = cir.const #cir.int<27015> : !s32i loc(#loc68)
              %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc68)
              %27 = cir.call @htons(%26) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc69)
              %28 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
              cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc389)
              cir.scope {
                %56 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc75)
                %57 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc391)
                %58 = cir.const #cir.int<16> : !u64i loc(#loc392)
                %59 = cir.cast(integral, %58 : !u64i), !u32i loc(#loc392)
                %60 = cir.call @bind(%56, %57, %59) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc80)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc81)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc81)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc393)
                cir.if %63 {
                  cir.break loc(#loc83)
                } loc(#loc394)
              } loc(#loc390)
              cir.scope {
                %56 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc86)
                %57 = cir.const #cir.int<5> : !s32i loc(#loc87)
                %58 = cir.call @listen(%56, %57) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc88)
                %59 = cir.const #cir.int<1> : !s32i loc(#loc89)
                %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc89)
                %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc396)
                cir.if %61 {
                  cir.break loc(#loc91)
                } loc(#loc397)
              } loc(#loc395)
              %29 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc92)
              %30 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc93)
              %31 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc94)
              %32 = cir.call @accept(%29, %30, %31) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc95)
              cir.store %32, %5 : !s32i, !cir.ptr<!s32i> loc(#loc398)
              cir.scope {
                %56 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc100)
                %57 = cir.const #cir.int<1> : !s32i loc(#loc101)
                %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc101)
                %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc400)
                cir.if %59 {
                  cir.break loc(#loc103)
                } loc(#loc401)
              } loc(#loc399)
              %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc104)
              %34 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc105)
              %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc105)
              %36 = cir.const #cir.int<3> : !s32i loc(#loc106)
              %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc106)
              %38 = cir.const #cir.int<4> : !u64i loc(#loc106)
              %39 = cir.binop(mul, %37, %38) : !u64i loc(#loc106)
              %40 = cir.const #cir.int<2> : !s32i loc(#loc106)
              %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc106)
              %42 = cir.binop(add, %39, %41) : !u64i loc(#loc106)
              %43 = cir.const #cir.int<1> : !s32i loc(#loc107)
              %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc107)
              %45 = cir.binop(sub, %42, %44) : !u64i loc(#loc402)
              %46 = cir.const #cir.int<0> : !s32i loc(#loc108)
              %47 = cir.call @recv(%33, %35, %45, %46) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc109)
              %48 = cir.cast(integral, %47 : !s64i), !s32i loc(#loc109)
              cir.store %48, %2 : !s32i, !cir.ptr<!s32i> loc(#loc403)
              cir.scope {
                %56 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc114)
                %57 = cir.const #cir.int<1> : !s32i loc(#loc115)
                %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc115)
                %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc405)
                %60 = cir.ternary(%59, true {
                  %61 = cir.const #true loc(#loc116)
                  cir.yield %61 : !cir.bool loc(#loc116)
                }, false {
                  %61 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc117)
                  %62 = cir.const #cir.int<0> : !s32i loc(#loc118)
                  %63 = cir.cmp(eq, %61, %62) : !s32i, !cir.bool loc(#loc406)
                  %64 = cir.ternary(%63, true {
                    %65 = cir.const #true loc(#loc116)
                    cir.yield %65 : !cir.bool loc(#loc116)
                  }, false {
                    %65 = cir.const #false loc(#loc116)
                    cir.yield %65 : !cir.bool loc(#loc116)
                  }) : (!cir.bool) -> !cir.bool loc(#loc116)
                  cir.yield %64 : !cir.bool loc(#loc116)
                }) : (!cir.bool) -> !cir.bool loc(#loc116)
                cir.if %60 {
                  cir.break loc(#loc120)
                } loc(#loc407)
              } loc(#loc404)
              %49 = cir.const #cir.int<0> : !s32i loc(#loc121)
              %50 = cir.cast(integral, %49 : !s32i), !s8i loc(#loc121)
              %51 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc122)
              %52 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc123)
              %53 = cir.ptr_stride(%52 : !cir.ptr<!s8i>, %51 : !s32i), !cir.ptr<!s8i> loc(#loc123)
              cir.store %50, %53 : !s8i, !cir.ptr<!s8i> loc(#loc408)
              %54 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc124)
              %55 = cir.call @atoi(%54) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc125)
              cir.store %55, %0 : !s32i, !cir.ptr<!s32i> loc(#loc409)
              cir.yield loc(#loc41)
            } while {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc128)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc128)
              cir.condition(%12) loc(#loc128)
            } loc(#loc379)
          } loc(#loc379)
          cir.scope {
            %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc131)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc132)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc132)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc411)
            cir.if %14 {
              %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc134)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc135)
            } loc(#loc412)
          } loc(#loc410)
          cir.scope {
            %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc138)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc139)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc139)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc414)
            cir.if %14 {
              %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc141)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc142)
            } loc(#loc415)
          } loc(#loc413)
        } loc(#loc373)
        cir.break loc(#loc143)
      } loc(#loc372)
    } loc(#loc372)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc146)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc146)
        cir.condition(%3) loc(#loc146)
      } do {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc418)
          %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc151)
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc150)
          %5 = cir.binop(mul, %3, %4) nsw : !s32i loc(#loc151)
          cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc418)
          %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc152)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc153)
        } loc(#loc417)
        cir.break loc(#loc154)
      } loc(#loc416)
    } loc(#loc416)
    cir.return loc(#loc20)
  } loc(#loc369)
  cir.func no_proto @CWE190_Integer_Overflow__int_listen_socket_square_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc420)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc157)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc421)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc159)
    cir.return loc(#loc156)
  } loc(#loc419)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc422)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc423)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc424)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc167)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc168)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc169)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc170)
  cir.func @main(%arg0: !s32i loc(fused[#loc173, #loc174]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc175, #loc176])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc426)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc427)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc172)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc177)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc177)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc178)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc179)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc179)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc180)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc167)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc167)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc181)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_listen_socket_square_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc428)
    cir.call @CWE190_Integer_Overflow__int_listen_socket_square_16_good() : () -> () loc(#loc182)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc168)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc168)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc184)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc169)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc169)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc185)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_listen_socket_square_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc429)
    cir.call @CWE190_Integer_Overflow__int_listen_socket_square_16_bad() : () -> () loc(#loc186)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc170)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc170)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc188)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc189)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc430)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc430)
    cir.return %17 : !s32i loc(#loc430)
  } loc(#loc425)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc191)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc192)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc432)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc197)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc433)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc201)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc201)
        cir.condition(%3) loc(#loc201)
      } do {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc436)
          %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc437)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc438)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc439)
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc440)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc209)
          %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc209)
          cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc438)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc211)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc211)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc439)
          cir.scope {
            cir.do {
              %11 = cir.const #cir.int<2> : !s32i loc(#loc216)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc217)
              %13 = cir.const #cir.int<6> : !s32i loc(#loc218)
              %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc219)
              cir.store %14, %4 : !s32i, !cir.ptr<!s32i> loc(#loc442)
              cir.scope {
                %56 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc224)
                %57 = cir.const #cir.int<1> : !s32i loc(#loc225)
                %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc225)
                %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc444)
                cir.if %59 {
                  cir.break loc(#loc227)
                } loc(#loc445)
              } loc(#loc443)
              %15 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc446)
              %16 = cir.const #cir.int<0> : !s32i loc(#loc230)
              %17 = cir.const #cir.int<16> : !u64i loc(#loc447)
              cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc448)
              %18 = cir.const #cir.int<2> : !s32i loc(#loc235)
              %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc235)
              %20 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc62)
              cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc449)
              %21 = cir.const #cir.int<0> : !s32i loc(#loc237)
              %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc237)
              %23 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc65)
              %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc66)
              cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc450)
              %25 = cir.const #cir.int<27015> : !s32i loc(#loc239)
              %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc239)
              %27 = cir.call @htons(%26) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc240)
              %28 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
              cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc451)
              cir.scope {
                %56 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc245)
                %57 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc453)
                %58 = cir.const #cir.int<16> : !u64i loc(#loc454)
                %59 = cir.cast(integral, %58 : !u64i), !u32i loc(#loc454)
                %60 = cir.call @bind(%56, %57, %59) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc250)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc251)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc251)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc455)
                cir.if %63 {
                  cir.break loc(#loc253)
                } loc(#loc456)
              } loc(#loc452)
              cir.scope {
                %56 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc256)
                %57 = cir.const #cir.int<5> : !s32i loc(#loc257)
                %58 = cir.call @listen(%56, %57) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc258)
                %59 = cir.const #cir.int<1> : !s32i loc(#loc259)
                %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc259)
                %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc458)
                cir.if %61 {
                  cir.break loc(#loc261)
                } loc(#loc459)
              } loc(#loc457)
              %29 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc262)
              %30 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc263)
              %31 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc264)
              %32 = cir.call @accept(%29, %30, %31) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc265)
              cir.store %32, %5 : !s32i, !cir.ptr<!s32i> loc(#loc460)
              cir.scope {
                %56 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc270)
                %57 = cir.const #cir.int<1> : !s32i loc(#loc271)
                %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc271)
                %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc462)
                cir.if %59 {
                  cir.break loc(#loc273)
                } loc(#loc463)
              } loc(#loc461)
              %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc274)
              %34 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc275)
              %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc275)
              %36 = cir.const #cir.int<3> : !s32i loc(#loc276)
              %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc276)
              %38 = cir.const #cir.int<4> : !u64i loc(#loc276)
              %39 = cir.binop(mul, %37, %38) : !u64i loc(#loc276)
              %40 = cir.const #cir.int<2> : !s32i loc(#loc276)
              %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc276)
              %42 = cir.binop(add, %39, %41) : !u64i loc(#loc276)
              %43 = cir.const #cir.int<1> : !s32i loc(#loc277)
              %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc277)
              %45 = cir.binop(sub, %42, %44) : !u64i loc(#loc464)
              %46 = cir.const #cir.int<0> : !s32i loc(#loc278)
              %47 = cir.call @recv(%33, %35, %45, %46) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc279)
              %48 = cir.cast(integral, %47 : !s64i), !s32i loc(#loc279)
              cir.store %48, %2 : !s32i, !cir.ptr<!s32i> loc(#loc465)
              cir.scope {
                %56 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc284)
                %57 = cir.const #cir.int<1> : !s32i loc(#loc285)
                %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc285)
                %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc467)
                %60 = cir.ternary(%59, true {
                  %61 = cir.const #true loc(#loc286)
                  cir.yield %61 : !cir.bool loc(#loc286)
                }, false {
                  %61 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc287)
                  %62 = cir.const #cir.int<0> : !s32i loc(#loc288)
                  %63 = cir.cmp(eq, %61, %62) : !s32i, !cir.bool loc(#loc468)
                  %64 = cir.ternary(%63, true {
                    %65 = cir.const #true loc(#loc286)
                    cir.yield %65 : !cir.bool loc(#loc286)
                  }, false {
                    %65 = cir.const #false loc(#loc286)
                    cir.yield %65 : !cir.bool loc(#loc286)
                  }) : (!cir.bool) -> !cir.bool loc(#loc286)
                  cir.yield %64 : !cir.bool loc(#loc286)
                }) : (!cir.bool) -> !cir.bool loc(#loc286)
                cir.if %60 {
                  cir.break loc(#loc290)
                } loc(#loc469)
              } loc(#loc466)
              %49 = cir.const #cir.int<0> : !s32i loc(#loc291)
              %50 = cir.cast(integral, %49 : !s32i), !s8i loc(#loc291)
              %51 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc292)
              %52 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc293)
              %53 = cir.ptr_stride(%52 : !cir.ptr<!s8i>, %51 : !s32i), !cir.ptr<!s8i> loc(#loc293)
              cir.store %50, %53 : !s8i, !cir.ptr<!s8i> loc(#loc470)
              %54 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc294)
              %55 = cir.call @atoi(%54) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc295)
              cir.store %55, %0 : !s32i, !cir.ptr<!s32i> loc(#loc471)
              cir.yield loc(#loc215)
            } while {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc298)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc298)
              cir.condition(%12) loc(#loc298)
            } loc(#loc441)
          } loc(#loc441)
          cir.scope {
            %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc301)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc302)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc302)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc473)
            cir.if %14 {
              %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc304)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc305)
            } loc(#loc474)
          } loc(#loc472)
          cir.scope {
            %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc308)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc309)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc309)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc476)
            cir.if %14 {
              %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc311)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc312)
            } loc(#loc477)
          } loc(#loc475)
        } loc(#loc435)
        cir.break loc(#loc313)
      } loc(#loc434)
    } loc(#loc434)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc316)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc316)
        cir.condition(%3) loc(#loc316)
      } do {
        cir.scope {
          %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc319)
          %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc320)
          %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc320)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc320)
          %6 = cir.binop(sub, %4, %5) nsw : !s32i loc(#loc320)
          %7 = cir.cmp(gt, %2, %6) : !s32i, !cir.bool loc(#loc480)
          %8 = cir.ternary(%7, true {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc322)
            %10 = cir.abs %9 poison : !s32i loc(#loc323)
            %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc323)
            %12 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc324)
            %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc325)
            %14 = cir.cast(int_to_float, %13 : !s32i), !cir.double loc(#loc325)
            %15 = cir.call @sqrt(%14) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc324)
            %16 = cir.cast(float_to_int, %15 : !cir.double), !s64i loc(#loc324)
            %17 = cir.cmp(lt, %11, %16) : !s64i, !cir.bool loc(#loc481)
            %18 = cir.ternary(%17, true {
              %19 = cir.const #true loc(#loc321)
              cir.yield %19 : !cir.bool loc(#loc321)
            }, false {
              %19 = cir.const #false loc(#loc321)
              cir.yield %19 : !cir.bool loc(#loc321)
            }) : (!cir.bool) -> !cir.bool loc(#loc321)
            cir.yield %18 : !cir.bool loc(#loc321)
          }, false {
            %9 = cir.const #false loc(#loc321)
            cir.yield %9 : !cir.bool loc(#loc321)
          }) : (!cir.bool) -> !cir.bool loc(#loc321)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc483)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc332)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc331)
            %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc332)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc483)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc333)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc334)
          } else {
            %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc192)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc192)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc335)
          } loc(#loc482)
        } loc(#loc479)
        cir.break loc(#loc336)
      } loc(#loc478)
    } loc(#loc478)
    cir.return loc(#loc194)
  } loc(#loc431)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc485)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc341)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc486)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc345)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc345)
        cir.condition(%3) loc(#loc345)
      } do {
        %2 = cir.const #cir.int<2> : !s32i loc(#loc346)
        cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc488)
        cir.break loc(#loc348)
      } loc(#loc487)
    } loc(#loc487)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc351)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc351)
        cir.condition(%3) loc(#loc351)
      } do {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc491)
          %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc356)
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc355)
          %5 = cir.binop(mul, %3, %4) nsw : !s32i loc(#loc356)
          cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc491)
          %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc357)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc358)
        } loc(#loc490)
        cir.break loc(#loc359)
      } loc(#loc489)
    } loc(#loc489)
    cir.return loc(#loc338)
  } loc(#loc484)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_listen_socket_square_16.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":145:1)
#loc12 = loc("/usr/include/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc19 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":46:1)
#loc20 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":133:1)
#loc21 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":48:5)
#loc22 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":48:9)
#loc23 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":50:12)
#loc24 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":50:5)
#loc25 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":51:5)
#loc26 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":123:5)
#loc27 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":51:11)
#loc28 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":53:9)
#loc29 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":121:9)
#loc30 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":58:13)
#loc31 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":58:17)
#loc32 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":59:13)
#loc33 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":59:32)
#loc34 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":60:13)
#loc35 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":60:35)
#loc36 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":61:13)
#loc37 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":61:35)
#loc38 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":62:13)
#loc39 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":62:45)
#loc40 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":63:13)
#loc41 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":106:21)
#loc42 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":73:39)
#loc43 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":73:48)
#loc44 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":73:61)
#loc45 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":73:32)
#loc46 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":73:17)
#loc47 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":73:72)
#loc48 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":74:17)
#loc49 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":77:17)
#loc50 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":74:21)
#loc51 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":74:37)
#loc52 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":75:17)
#loc53 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":76:21)
#loc54 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":78:24)
#loc55 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":78:25)
#loc56 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":78:34)
#loc57 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":78:37)
#loc58 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":78:51)
#loc59 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":78:17)
#loc60 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":78:52)
#loc61 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":79:38)
#loc62 = loc("/usr/include/netinet/in.h":249:5)
#loc63 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":79:17)
#loc64 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":80:43)
#loc65 = loc("/usr/include/netinet/in.h":251:20)
#loc66 = loc("/usr/include/netinet/in.h":33:15)
#loc67 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":80:17)
#loc68 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":81:42)
#loc69 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":81:36)
#loc70 = loc("/usr/include/netinet/in.h":250:15)
#loc71 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":81:17)
#loc72 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":81:50)
#loc73 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":82:17)
#loc74 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":85:17)
#loc75 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":82:26)
#loc76 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":82:58)
#loc77 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":82:59)
#loc78 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":82:68)
#loc79 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":82:82)
#loc80 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":82:21)
#loc81 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":82:88)
#loc82 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":83:17)
#loc83 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":84:21)
#loc84 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":86:17)
#loc85 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":89:17)
#loc86 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":86:28)
#loc87 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":86:42)
#loc88 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":86:21)
#loc89 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":86:61)
#loc90 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":87:17)
#loc91 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":88:21)
#loc92 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":90:39)
#loc93 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":90:53)
#loc94 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":90:59)
#loc95 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":90:32)
#loc96 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":90:17)
#loc97 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":90:63)
#loc98 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":91:17)
#loc99 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":94:17)
#loc100 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":91:21)
#loc101 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":91:37)
#loc102 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":92:17)
#loc103 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":93:21)
#loc104 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":96:35)
#loc105 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":96:49)
#loc106 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":96:62)
#loc107 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":96:80)
#loc108 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":96:83)
#loc109 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":96:30)
#loc110 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":96:17)
#loc111 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":96:84)
#loc112 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":97:17)
#loc113 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":100:17)
#loc114 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":97:21)
#loc115 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":97:35)
#loc116 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":97:48)
#loc117 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":97:51)
#loc118 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":97:65)
#loc119 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":98:17)
#loc120 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":99:21)
#loc121 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":102:43)
#loc122 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":102:29)
#loc123 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":102:17)
#loc124 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":104:29)
#loc125 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":104:24)
#loc126 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":104:17)
#loc127 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":104:40)
#loc128 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":106:20)
#loc129 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":107:13)
#loc130 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":110:13)
#loc131 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":107:17)
#loc132 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":107:33)
#loc133 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":108:13)
#loc134 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":109:30)
#loc135 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":109:17)
#loc136 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":111:13)
#loc137 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":114:13)
#loc138 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":111:17)
#loc139 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":111:33)
#loc140 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":112:13)
#loc141 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":113:30)
#loc142 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":113:17)
#loc143 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":122:9)
#loc144 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":124:5)
#loc145 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":132:5)
#loc146 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":124:11)
#loc147 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":126:9)
#loc148 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":130:9)
#loc149 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":128:13)
#loc150 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":128:33)
#loc151 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":128:26)
#loc152 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":129:26)
#loc153 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":129:13)
#loc154 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":131:9)
#loc155 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":257:1)
#loc156 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":261:1)
#loc157 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":259:5)
#loc158 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":259:13)
#loc159 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":260:5)
#loc160 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":260:13)
#loc161 = loc("/usr/include/stdlib.h":575:1)
#loc162 = loc("/usr/include/stdlib.h":575:41)
#loc163 = loc("/usr/include/time.h":76:1)
#loc164 = loc("/usr/include/time.h":76:38)
#loc165 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc166 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc167 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":277:15)
#loc168 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":279:15)
#loc169 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":282:15)
#loc170 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":284:15)
#loc171 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":272:1)
#loc172 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":287:1)
#loc177 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":273:1)
#loc178 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":275:27)
#loc179 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":275:22)
#loc180 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":275:5)
#loc181 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":277:5)
#loc182 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":278:5)
#loc183 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":278:63)
#loc184 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":279:5)
#loc185 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":282:5)
#loc186 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":283:5)
#loc187 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":283:62)
#loc188 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":284:5)
#loc189 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":286:12)
#loc190 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":286:5)
#loc191 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc192 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":228:23)
#loc193 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":140:1)
#loc194 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":232:1)
#loc195 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":142:5)
#loc196 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":142:9)
#loc197 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":144:12)
#loc198 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":144:5)
#loc199 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":145:5)
#loc200 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":217:5)
#loc201 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":145:11)
#loc202 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":147:9)
#loc203 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":215:9)
#loc204 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":152:13)
#loc205 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":152:17)
#loc206 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":153:13)
#loc207 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":153:32)
#loc208 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":154:13)
#loc209 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":154:35)
#loc210 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":155:13)
#loc211 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":155:35)
#loc212 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":156:13)
#loc213 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":156:45)
#loc214 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":157:13)
#loc215 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":200:21)
#loc216 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":167:39)
#loc217 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":167:48)
#loc218 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":167:61)
#loc219 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":167:32)
#loc220 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":167:17)
#loc221 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":167:72)
#loc222 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":168:17)
#loc223 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":171:17)
#loc224 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":168:21)
#loc225 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":168:37)
#loc226 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":169:17)
#loc227 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":170:21)
#loc228 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":172:24)
#loc229 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":172:25)
#loc230 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":172:34)
#loc231 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":172:37)
#loc232 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":172:51)
#loc233 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":172:17)
#loc234 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":172:52)
#loc235 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":173:38)
#loc236 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":173:17)
#loc237 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":174:43)
#loc238 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":174:17)
#loc239 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":175:42)
#loc240 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":175:36)
#loc241 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":175:17)
#loc242 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":175:50)
#loc243 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":176:17)
#loc244 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":179:17)
#loc245 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":176:26)
#loc246 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":176:58)
#loc247 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":176:59)
#loc248 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":176:68)
#loc249 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":176:82)
#loc250 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":176:21)
#loc251 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":176:88)
#loc252 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":177:17)
#loc253 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":178:21)
#loc254 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":180:17)
#loc255 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":183:17)
#loc256 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":180:28)
#loc257 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":180:42)
#loc258 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":180:21)
#loc259 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":180:61)
#loc260 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":181:17)
#loc261 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":182:21)
#loc262 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":184:39)
#loc263 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":184:53)
#loc264 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":184:59)
#loc265 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":184:32)
#loc266 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":184:17)
#loc267 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":184:63)
#loc268 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":185:17)
#loc269 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":188:17)
#loc270 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":185:21)
#loc271 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":185:37)
#loc272 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":186:17)
#loc273 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":187:21)
#loc274 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":190:35)
#loc275 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":190:49)
#loc276 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":190:62)
#loc277 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":190:80)
#loc278 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":190:83)
#loc279 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":190:30)
#loc280 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":190:17)
#loc281 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":190:84)
#loc282 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":191:17)
#loc283 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":194:17)
#loc284 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":191:21)
#loc285 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":191:35)
#loc286 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":191:48)
#loc287 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":191:51)
#loc288 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":191:65)
#loc289 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":192:17)
#loc290 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":193:21)
#loc291 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":196:43)
#loc292 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":196:29)
#loc293 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":196:17)
#loc294 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":198:29)
#loc295 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":198:24)
#loc296 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":198:17)
#loc297 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":198:40)
#loc298 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":200:20)
#loc299 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":201:13)
#loc300 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":204:13)
#loc301 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":201:17)
#loc302 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":201:33)
#loc303 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":202:13)
#loc304 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":203:30)
#loc305 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":203:17)
#loc306 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":205:13)
#loc307 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":208:13)
#loc308 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":205:17)
#loc309 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":205:33)
#loc310 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":206:13)
#loc311 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":207:30)
#loc312 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":207:17)
#loc313 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":216:9)
#loc314 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":218:5)
#loc315 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":231:5)
#loc316 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":218:11)
#loc317 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":221:9)
#loc318 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":229:9)
#loc319 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":221:13)
#loc320 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":221:20)
#loc321 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":221:28)
#loc322 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":221:35)
#loc323 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":221:31)
#loc324 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":221:49)
#loc325 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":221:62)
#loc326 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":221:69)
#loc327 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":222:9)
#loc328 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":225:9)
#loc329 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":227:9)
#loc330 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":223:13)
#loc331 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":223:33)
#loc332 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":223:26)
#loc333 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":224:26)
#loc334 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":224:13)
#loc335 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":228:13)
#loc336 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":230:9)
#loc337 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":235:1)
#loc338 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":255:1)
#loc339 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":237:5)
#loc340 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":237:9)
#loc341 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":239:12)
#loc342 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":239:5)
#loc343 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":240:5)
#loc344 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":245:5)
#loc345 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":240:11)
#loc346 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":243:16)
#loc347 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":243:9)
#loc348 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":244:9)
#loc349 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":246:5)
#loc350 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":254:5)
#loc351 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":246:11)
#loc352 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":248:9)
#loc353 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":252:9)
#loc354 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":250:13)
#loc355 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":250:33)
#loc356 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":250:26)
#loc357 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":251:26)
#loc358 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":251:13)
#loc359 = loc("CWE190_Integer_Overflow__int_listen_socket_square_16.c":253:9)
#loc360 = loc(fused[#loc1, #loc2])
#loc361 = loc(fused[#loc3, #loc4])
#loc362 = loc(fused[#loc5, #loc6])
#loc363 = loc(fused[#loc7, #loc8])
#loc364 = loc(fused[#loc9, #loc10])
#loc365 = loc(fused[#loc11, #loc12])
#loc366 = loc(fused[#loc13, #loc14])
#loc367 = loc(fused[#loc15, #loc16])
#loc368 = loc(fused[#loc17, #loc18])
#loc369 = loc(fused[#loc19, #loc20])
#loc370 = loc(fused[#loc21, #loc22])
#loc371 = loc(fused[#loc24, #loc23])
#loc372 = loc(fused[#loc25, #loc26])
#loc373 = loc(fused[#loc28, #loc29])
#loc374 = loc(fused[#loc30, #loc31])
#loc375 = loc(fused[#loc32, #loc33])
#loc376 = loc(fused[#loc34, #loc35])
#loc377 = loc(fused[#loc36, #loc37])
#loc378 = loc(fused[#loc38, #loc39])
#loc379 = loc(fused[#loc40, #loc41])
#loc380 = loc(fused[#loc46, #loc47])
#loc381 = loc(fused[#loc48, #loc49])
#loc382 = loc(fused[#loc50, #loc51])
#loc383 = loc(fused[#loc52, #loc49])
#loc384 = loc(fused[#loc54, #loc55])
#loc385 = loc(fused[#loc57, #loc58])
#loc386 = loc(fused[#loc59, #loc60])
#loc387 = loc(fused[#loc63, #loc61])
#loc388 = loc(fused[#loc67, #loc64])
#loc389 = loc(fused[#loc71, #loc72])
#loc390 = loc(fused[#loc73, #loc74])
#loc391 = loc(fused[#loc76, #loc77])
#loc392 = loc(fused[#loc78, #loc79])
#loc393 = loc(fused[#loc80, #loc81])
#loc394 = loc(fused[#loc82, #loc74])
#loc395 = loc(fused[#loc84, #loc85])
#loc396 = loc(fused[#loc88, #loc89])
#loc397 = loc(fused[#loc90, #loc85])
#loc398 = loc(fused[#loc96, #loc97])
#loc399 = loc(fused[#loc98, #loc99])
#loc400 = loc(fused[#loc100, #loc101])
#loc401 = loc(fused[#loc102, #loc99])
#loc402 = loc(fused[#loc106, #loc107])
#loc403 = loc(fused[#loc110, #loc111])
#loc404 = loc(fused[#loc112, #loc113])
#loc405 = loc(fused[#loc114, #loc115])
#loc406 = loc(fused[#loc117, #loc118])
#loc407 = loc(fused[#loc119, #loc113])
#loc408 = loc(fused[#loc123, #loc121])
#loc409 = loc(fused[#loc126, #loc127])
#loc410 = loc(fused[#loc129, #loc130])
#loc411 = loc(fused[#loc131, #loc132])
#loc412 = loc(fused[#loc133, #loc130])
#loc413 = loc(fused[#loc136, #loc137])
#loc414 = loc(fused[#loc138, #loc139])
#loc415 = loc(fused[#loc140, #loc137])
#loc416 = loc(fused[#loc144, #loc145])
#loc417 = loc(fused[#loc147, #loc148])
#loc418 = loc(fused[#loc149, #loc150])
#loc419 = loc(fused[#loc155, #loc156])
#loc420 = loc(fused[#loc157, #loc158])
#loc421 = loc(fused[#loc159, #loc160])
#loc422 = loc(fused[#loc161, #loc162])
#loc423 = loc(fused[#loc163, #loc164])
#loc424 = loc(fused[#loc165, #loc166])
#loc425 = loc(fused[#loc171, #loc172])
#loc428 = loc(fused[#loc182, #loc183])
#loc429 = loc(fused[#loc186, #loc187])
#loc430 = loc(fused[#loc190, #loc189])
#loc431 = loc(fused[#loc193, #loc194])
#loc432 = loc(fused[#loc195, #loc196])
#loc433 = loc(fused[#loc198, #loc197])
#loc434 = loc(fused[#loc199, #loc200])
#loc435 = loc(fused[#loc202, #loc203])
#loc436 = loc(fused[#loc204, #loc205])
#loc437 = loc(fused[#loc206, #loc207])
#loc438 = loc(fused[#loc208, #loc209])
#loc439 = loc(fused[#loc210, #loc211])
#loc440 = loc(fused[#loc212, #loc213])
#loc441 = loc(fused[#loc214, #loc215])
#loc442 = loc(fused[#loc220, #loc221])
#loc443 = loc(fused[#loc222, #loc223])
#loc444 = loc(fused[#loc224, #loc225])
#loc445 = loc(fused[#loc226, #loc223])
#loc446 = loc(fused[#loc228, #loc229])
#loc447 = loc(fused[#loc231, #loc232])
#loc448 = loc(fused[#loc233, #loc234])
#loc449 = loc(fused[#loc236, #loc235])
#loc450 = loc(fused[#loc238, #loc237])
#loc451 = loc(fused[#loc241, #loc242])
#loc452 = loc(fused[#loc243, #loc244])
#loc453 = loc(fused[#loc246, #loc247])
#loc454 = loc(fused[#loc248, #loc249])
#loc455 = loc(fused[#loc250, #loc251])
#loc456 = loc(fused[#loc252, #loc244])
#loc457 = loc(fused[#loc254, #loc255])
#loc458 = loc(fused[#loc258, #loc259])
#loc459 = loc(fused[#loc260, #loc255])
#loc460 = loc(fused[#loc266, #loc267])
#loc461 = loc(fused[#loc268, #loc269])
#loc462 = loc(fused[#loc270, #loc271])
#loc463 = loc(fused[#loc272, #loc269])
#loc464 = loc(fused[#loc276, #loc277])
#loc465 = loc(fused[#loc280, #loc281])
#loc466 = loc(fused[#loc282, #loc283])
#loc467 = loc(fused[#loc284, #loc285])
#loc468 = loc(fused[#loc287, #loc288])
#loc469 = loc(fused[#loc289, #loc283])
#loc470 = loc(fused[#loc293, #loc291])
#loc471 = loc(fused[#loc296, #loc297])
#loc472 = loc(fused[#loc299, #loc300])
#loc473 = loc(fused[#loc301, #loc302])
#loc474 = loc(fused[#loc303, #loc300])
#loc475 = loc(fused[#loc306, #loc307])
#loc476 = loc(fused[#loc308, #loc309])
#loc477 = loc(fused[#loc310, #loc307])
#loc478 = loc(fused[#loc314, #loc315])
#loc479 = loc(fused[#loc317, #loc318])
#loc480 = loc(fused[#loc319, #loc320])
#loc481 = loc(fused[#loc323, #loc326])
#loc482 = loc(fused[#loc327, #loc328, #loc329, #loc318])
#loc483 = loc(fused[#loc330, #loc331])
#loc484 = loc(fused[#loc337, #loc338])
#loc485 = loc(fused[#loc339, #loc340])
#loc486 = loc(fused[#loc342, #loc341])
#loc487 = loc(fused[#loc343, #loc344])
#loc488 = loc(fused[#loc347, #loc346])
#loc489 = loc(fused[#loc349, #loc350])
#loc490 = loc(fused[#loc352, #loc353])
#loc491 = loc(fused[#loc354, #loc355])
