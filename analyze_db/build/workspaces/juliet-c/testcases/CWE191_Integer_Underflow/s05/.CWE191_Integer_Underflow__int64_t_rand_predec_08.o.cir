!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s05/CWE191_Integer_Underflow__int64_t_rand_predec_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc179)
  cir.func private @printLongLongLine(!s64i) loc(#loc180)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_predec_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc182)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc9)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc183)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc185)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc13)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc13)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc16)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc16)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc16)
        %9 = cir.ternary(%8, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc16)
          %13 = cir.const #cir.int<60> : !s32i loc(#loc16)
          %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc16)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc16)
          %17 = cir.const #cir.int<45> : !s32i loc(#loc16)
          %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc16)
          %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc16)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc16)
          %22 = cir.const #cir.int<30> : !s32i loc(#loc16)
          %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc16)
          %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc16)
          %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc16)
          %27 = cir.const #cir.int<15> : !s32i loc(#loc16)
          %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc16)
          %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc16)
          %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc16)
          %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc16)
          cir.yield %32 : !u64i loc(#loc16)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc16)
          %13 = cir.const #cir.int<60> : !s32i loc(#loc16)
          %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc16)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc16)
          %17 = cir.const #cir.int<45> : !s32i loc(#loc16)
          %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc16)
          %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc16)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc16)
          %22 = cir.const #cir.int<30> : !s32i loc(#loc16)
          %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc16)
          %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc16)
          %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc16)
          %27 = cir.const #cir.int<15> : !s32i loc(#loc16)
          %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc16)
          %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc16)
          %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc16)
          %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc16)
          %33 = cir.unary(minus, %32) : !u64i, !u64i loc(#loc16)
          %34 = cir.const #cir.int<1> : !s32i loc(#loc16)
          %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc16)
          %36 = cir.binop(sub, %33, %35) : !u64i loc(#loc16)
          cir.yield %36 : !u64i loc(#loc16)
        }) : (!cir.bool) -> !u64i loc(#loc16)
        %10 = cir.cast(integral, %9 : !u64i), !s64i loc(#loc16)
        cir.store %10, %0 : !s64i, !cir.ptr<!s64i> loc(#loc187)
      } loc(#loc186)
    } loc(#loc184)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc189)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc20)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc20)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc192)
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc27)
          %7 = cir.unary(dec, %6) nsw : !s64i, !s64i loc(#loc27)
          cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc193)
          %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc26)
          cir.store %8, %5 : !s64i, !cir.ptr<!s64i> loc(#loc192)
          %9 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc29)
          cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc30)
        } loc(#loc191)
      } loc(#loc190)
    } loc(#loc188)
    cir.return loc(#loc6)
  } loc(#loc181)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_predec_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc195)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc196)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc197)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc198)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    cir.return loc(#loc32)
  } loc(#loc194)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc42)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc43)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc200)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc200)
    cir.return %2 : !s32i loc(#loc200)
  } loc(#loc199)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc201)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc48)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc203)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc53)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc204)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc206)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc57)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc57)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc60)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc60)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc60)
        %9 = cir.ternary(%8, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc60)
          %13 = cir.const #cir.int<60> : !s32i loc(#loc60)
          %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc60)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc60)
          %17 = cir.const #cir.int<45> : !s32i loc(#loc60)
          %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc60)
          %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc60)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc60)
          %22 = cir.const #cir.int<30> : !s32i loc(#loc60)
          %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc60)
          %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc60)
          %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc60)
          %27 = cir.const #cir.int<15> : !s32i loc(#loc60)
          %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc60)
          %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc60)
          %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc60)
          %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc60)
          cir.yield %32 : !u64i loc(#loc60)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc60)
          %13 = cir.const #cir.int<60> : !s32i loc(#loc60)
          %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc60)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc60)
          %17 = cir.const #cir.int<45> : !s32i loc(#loc60)
          %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc60)
          %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc60)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc60)
          %22 = cir.const #cir.int<30> : !s32i loc(#loc60)
          %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc60)
          %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc60)
          %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc60)
          %27 = cir.const #cir.int<15> : !s32i loc(#loc60)
          %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc60)
          %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc60)
          %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc60)
          %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc60)
          %33 = cir.unary(minus, %32) : !u64i, !u64i loc(#loc60)
          %34 = cir.const #cir.int<1> : !s32i loc(#loc60)
          %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc60)
          %36 = cir.binop(sub, %33, %35) : !u64i loc(#loc60)
          cir.yield %36 : !u64i loc(#loc60)
        }) : (!cir.bool) -> !u64i loc(#loc60)
        %10 = cir.cast(integral, %9 : !u64i), !s64i loc(#loc60)
        cir.store %10, %0 : !s64i, !cir.ptr<!s64i> loc(#loc208)
      } loc(#loc207)
    } loc(#loc205)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc210)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc64)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc64)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc47)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc47)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc69)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc72)
          %6 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc73)
          %7 = cir.unary(minus, %6) nsw : !s64i, !s64i loc(#loc73)
          %8 = cir.const #cir.int<1> : !s64i loc(#loc73)
          %9 = cir.binop(sub, %7, %8) nsw : !s64i loc(#loc73)
          %10 = cir.cmp(gt, %5, %9) : !s64i, !cir.bool loc(#loc213)
          cir.if %10 {
            %11 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc215)
            %12 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc79)
            %13 = cir.unary(dec, %12) nsw : !s64i, !s64i loc(#loc79)
            cir.store %13, %0 : !s64i, !cir.ptr<!s64i> loc(#loc216)
            %14 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc78)
            cir.store %14, %11 : !s64i, !cir.ptr<!s64i> loc(#loc215)
            %15 = cir.load %11 : !cir.ptr<!s64i>, !s64i loc(#loc81)
            cir.call @printLongLongLine(%15) : (!s64i) -> () loc(#loc82)
          } else {
            %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc48)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc48)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc83)
          } loc(#loc214)
        } loc(#loc212)
      } loc(#loc211)
    } loc(#loc209)
    cir.return loc(#loc50)
  } loc(#loc202)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc85)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc86)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc218)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc218)
    cir.return %2 : !s32i loc(#loc218)
  } loc(#loc217)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc220)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc92)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc221)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc223)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc96)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc96)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc99)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc99)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc99)
        %9 = cir.ternary(%8, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc99)
          %13 = cir.const #cir.int<60> : !s32i loc(#loc99)
          %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc99)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc99)
          %17 = cir.const #cir.int<45> : !s32i loc(#loc99)
          %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc99)
          %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc99)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc99)
          %22 = cir.const #cir.int<30> : !s32i loc(#loc99)
          %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc99)
          %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc99)
          %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc99)
          %27 = cir.const #cir.int<15> : !s32i loc(#loc99)
          %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc99)
          %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc99)
          %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
          %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc99)
          %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc99)
          cir.yield %32 : !u64i loc(#loc99)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc99)
          %13 = cir.const #cir.int<60> : !s32i loc(#loc99)
          %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc99)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc99)
          %17 = cir.const #cir.int<45> : !s32i loc(#loc99)
          %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc99)
          %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc99)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc99)
          %22 = cir.const #cir.int<30> : !s32i loc(#loc99)
          %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc99)
          %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc99)
          %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc99)
          %27 = cir.const #cir.int<15> : !s32i loc(#loc99)
          %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc99)
          %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc99)
          %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
          %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc99)
          %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc99)
          %33 = cir.unary(minus, %32) : !u64i, !u64i loc(#loc99)
          %34 = cir.const #cir.int<1> : !s32i loc(#loc99)
          %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc99)
          %36 = cir.binop(sub, %33, %35) : !u64i loc(#loc99)
          cir.yield %36 : !u64i loc(#loc99)
        }) : (!cir.bool) -> !u64i loc(#loc99)
        %10 = cir.cast(integral, %9 : !u64i), !s64i loc(#loc99)
        cir.store %10, %0 : !s64i, !cir.ptr<!s64i> loc(#loc225)
      } loc(#loc224)
    } loc(#loc222)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc227)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc103)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc103)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc108)
          %6 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc109)
          %7 = cir.unary(minus, %6) nsw : !s64i, !s64i loc(#loc109)
          %8 = cir.const #cir.int<1> : !s64i loc(#loc109)
          %9 = cir.binop(sub, %7, %8) nsw : !s64i loc(#loc109)
          %10 = cir.cmp(gt, %5, %9) : !s64i, !cir.bool loc(#loc230)
          cir.if %10 {
            %11 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc232)
            %12 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc115)
            %13 = cir.unary(dec, %12) nsw : !s64i, !s64i loc(#loc115)
            cir.store %13, %0 : !s64i, !cir.ptr<!s64i> loc(#loc233)
            %14 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc114)
            cir.store %14, %11 : !s64i, !cir.ptr<!s64i> loc(#loc232)
            %15 = cir.load %11 : !cir.ptr<!s64i>, !s64i loc(#loc117)
            cir.call @printLongLongLine(%15) : (!s64i) -> () loc(#loc118)
          } else {
            %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc119)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc119)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc120)
          } loc(#loc231)
        } loc(#loc229)
      } loc(#loc228)
    } loc(#loc226)
    cir.return loc(#loc89)
  } loc(#loc219)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc235)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc125)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc236)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc238)
      %3 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc129)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc129)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc134)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc134)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc135)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc136)
        %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc137)
        %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc137)
        cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc240)
      } loc(#loc239)
    } loc(#loc237)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc242)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc141)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc141)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc245)
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc148)
          %7 = cir.unary(dec, %6) nsw : !s64i, !s64i loc(#loc148)
          cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc246)
          %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc147)
          cir.store %8, %5 : !s64i, !cir.ptr<!s64i> loc(#loc245)
          %9 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc150)
          cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc151)
        } loc(#loc244)
      } loc(#loc243)
    } loc(#loc241)
    cir.return loc(#loc122)
  } loc(#loc234)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc248)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc156)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc249)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc251)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc160)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc160)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc163)
        %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc164)
        %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc164)
        cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc253)
      } loc(#loc252)
    } loc(#loc250)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc255)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc168)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc168)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc258)
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc175)
          %7 = cir.unary(dec, %6) nsw : !s64i, !s64i loc(#loc175)
          cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc259)
          %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc174)
          cir.store %8, %5 : !s64i, !cir.ptr<!s64i> loc(#loc258)
          %9 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc177)
          cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc178)
        } loc(#loc257)
      } loc(#loc256)
    } loc(#loc254)
    cir.return loc(#loc153)
  } loc(#loc247)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s05/CWE191_Integer_Underflow__int64_t_rand_predec_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":35:1)
#loc6 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":53:1)
#loc7 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":37:5)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":37:13)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":38:12)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":38:5)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":39:5)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":43:5)
#loc13 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":39:8)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":39:26)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":40:5)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":42:25)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":42:9)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":44:5)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":52:5)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":44:8)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":44:26)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":45:5)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":46:9)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":51:9)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":49:13)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":49:30)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":48:13)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":48:15)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":50:31)
#loc30 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":50:13)
#loc31 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":163:1)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":169:1)
#loc33 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":165:5)
#loc34 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":165:14)
#loc35 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":166:5)
#loc36 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":166:14)
#loc37 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":167:5)
#loc38 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":167:14)
#loc39 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":168:5)
#loc40 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":168:14)
#loc41 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":23:1)
#loc42 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":26:1)
#loc43 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":25:12)
#loc44 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":25:5)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc47 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":72:19)
#loc48 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":85:23)
#loc49 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":60:1)
#loc50 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":88:1)
#loc51 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":62:5)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":62:13)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":63:12)
#loc54 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":63:5)
#loc55 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":64:5)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":68:5)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":64:8)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":64:26)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":65:5)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":67:25)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":67:9)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":69:5)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":87:5)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":69:8)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":69:27)
#loc66 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":70:5)
#loc67 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":73:5)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":75:5)
#loc69 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":72:9)
#loc70 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":77:9)
#loc71 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":86:9)
#loc72 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":77:13)
#loc73 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":77:20)
#loc74 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":78:9)
#loc75 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":82:9)
#loc76 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":84:9)
#loc77 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":80:13)
#loc78 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":80:30)
#loc79 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":79:13)
#loc80 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":79:15)
#loc81 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":81:31)
#loc82 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":81:13)
#loc83 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":85:13)
#loc84 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":28:1)
#loc85 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":31:1)
#loc86 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":30:12)
#loc87 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":30:5)
#loc88 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":91:1)
#loc89 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":114:1)
#loc90 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":93:5)
#loc91 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":93:13)
#loc92 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":94:12)
#loc93 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":94:5)
#loc94 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":95:5)
#loc95 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":99:5)
#loc96 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":95:8)
#loc97 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":95:26)
#loc98 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":96:5)
#loc99 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":98:25)
#loc100 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":98:9)
#loc101 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":100:5)
#loc102 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":113:5)
#loc103 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":100:8)
#loc104 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":100:26)
#loc105 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":101:5)
#loc106 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":103:9)
#loc107 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":112:9)
#loc108 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":103:13)
#loc109 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":103:20)
#loc110 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":104:9)
#loc111 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":108:9)
#loc112 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":110:9)
#loc113 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":106:13)
#loc114 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":106:30)
#loc115 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":105:13)
#loc116 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":105:15)
#loc117 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":107:31)
#loc118 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":107:13)
#loc119 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":111:23)
#loc120 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":111:13)
#loc121 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":117:1)
#loc122 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":140:1)
#loc123 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":119:5)
#loc124 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":119:13)
#loc125 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":120:12)
#loc126 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":120:5)
#loc127 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":121:5)
#loc128 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":130:5)
#loc129 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":121:8)
#loc130 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":121:27)
#loc131 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":122:5)
#loc132 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":125:5)
#loc133 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":127:5)
#loc134 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":124:19)
#loc135 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":124:9)
#loc136 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":129:17)
#loc137 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":129:16)
#loc138 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":129:9)
#loc139 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":131:5)
#loc140 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":139:5)
#loc141 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":131:8)
#loc142 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":131:26)
#loc143 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":132:5)
#loc144 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":133:9)
#loc145 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":138:9)
#loc146 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":136:13)
#loc147 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":136:30)
#loc148 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":135:13)
#loc149 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":135:15)
#loc150 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":137:31)
#loc151 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":137:13)
#loc152 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":143:1)
#loc153 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":161:1)
#loc154 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":145:5)
#loc155 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":145:13)
#loc156 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":146:12)
#loc157 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":146:5)
#loc158 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":147:5)
#loc159 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":151:5)
#loc160 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":147:8)
#loc161 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":147:26)
#loc162 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":148:5)
#loc163 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":150:17)
#loc164 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":150:16)
#loc165 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":150:9)
#loc166 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":152:5)
#loc167 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":160:5)
#loc168 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":152:8)
#loc169 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":152:26)
#loc170 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":153:5)
#loc171 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":154:9)
#loc172 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":159:9)
#loc173 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":157:13)
#loc174 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":157:30)
#loc175 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":156:13)
#loc176 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":156:15)
#loc177 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":158:31)
#loc178 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_08.c":158:13)
#loc179 = loc(fused[#loc1, #loc2])
#loc180 = loc(fused[#loc3, #loc4])
#loc181 = loc(fused[#loc5, #loc6])
#loc182 = loc(fused[#loc7, #loc8])
#loc183 = loc(fused[#loc10, #loc9])
#loc184 = loc(fused[#loc11, #loc12])
#loc185 = loc(fused[#loc13, #loc14])
#loc186 = loc(fused[#loc15, #loc12])
#loc187 = loc(fused[#loc17, #loc16])
#loc188 = loc(fused[#loc18, #loc19])
#loc189 = loc(fused[#loc20, #loc21])
#loc190 = loc(fused[#loc22, #loc19])
#loc191 = loc(fused[#loc23, #loc24])
#loc192 = loc(fused[#loc25, #loc26])
#loc193 = loc(fused[#loc27, #loc28])
#loc194 = loc(fused[#loc31, #loc32])
#loc195 = loc(fused[#loc33, #loc34])
#loc196 = loc(fused[#loc35, #loc36])
#loc197 = loc(fused[#loc37, #loc38])
#loc198 = loc(fused[#loc39, #loc40])
#loc199 = loc(fused[#loc41, #loc42])
#loc200 = loc(fused[#loc44, #loc43])
#loc201 = loc(fused[#loc45, #loc46])
#loc202 = loc(fused[#loc49, #loc50])
#loc203 = loc(fused[#loc51, #loc52])
#loc204 = loc(fused[#loc54, #loc53])
#loc205 = loc(fused[#loc55, #loc56])
#loc206 = loc(fused[#loc57, #loc58])
#loc207 = loc(fused[#loc59, #loc56])
#loc208 = loc(fused[#loc61, #loc60])
#loc209 = loc(fused[#loc62, #loc63])
#loc210 = loc(fused[#loc64, #loc65])
#loc211 = loc(fused[#loc66, #loc67, #loc68, #loc63])
#loc212 = loc(fused[#loc70, #loc71])
#loc213 = loc(fused[#loc72, #loc73])
#loc214 = loc(fused[#loc74, #loc75, #loc76, #loc71])
#loc215 = loc(fused[#loc77, #loc78])
#loc216 = loc(fused[#loc79, #loc80])
#loc217 = loc(fused[#loc84, #loc85])
#loc218 = loc(fused[#loc87, #loc86])
#loc219 = loc(fused[#loc88, #loc89])
#loc220 = loc(fused[#loc90, #loc91])
#loc221 = loc(fused[#loc93, #loc92])
#loc222 = loc(fused[#loc94, #loc95])
#loc223 = loc(fused[#loc96, #loc97])
#loc224 = loc(fused[#loc98, #loc95])
#loc225 = loc(fused[#loc100, #loc99])
#loc226 = loc(fused[#loc101, #loc102])
#loc227 = loc(fused[#loc103, #loc104])
#loc228 = loc(fused[#loc105, #loc102])
#loc229 = loc(fused[#loc106, #loc107])
#loc230 = loc(fused[#loc108, #loc109])
#loc231 = loc(fused[#loc110, #loc111, #loc112, #loc107])
#loc232 = loc(fused[#loc113, #loc114])
#loc233 = loc(fused[#loc115, #loc116])
#loc234 = loc(fused[#loc121, #loc122])
#loc235 = loc(fused[#loc123, #loc124])
#loc236 = loc(fused[#loc126, #loc125])
#loc237 = loc(fused[#loc127, #loc128])
#loc238 = loc(fused[#loc129, #loc130])
#loc239 = loc(fused[#loc131, #loc132, #loc133, #loc128])
#loc240 = loc(fused[#loc138, #loc136])
#loc241 = loc(fused[#loc139, #loc140])
#loc242 = loc(fused[#loc141, #loc142])
#loc243 = loc(fused[#loc143, #loc140])
#loc244 = loc(fused[#loc144, #loc145])
#loc245 = loc(fused[#loc146, #loc147])
#loc246 = loc(fused[#loc148, #loc149])
#loc247 = loc(fused[#loc152, #loc153])
#loc248 = loc(fused[#loc154, #loc155])
#loc249 = loc(fused[#loc157, #loc156])
#loc250 = loc(fused[#loc158, #loc159])
#loc251 = loc(fused[#loc160, #loc161])
#loc252 = loc(fused[#loc162, #loc159])
#loc253 = loc(fused[#loc165, #loc163])
#loc254 = loc(fused[#loc166, #loc167])
#loc255 = loc(fused[#loc168, #loc169])
#loc256 = loc(fused[#loc170, #loc167])
#loc257 = loc(fused[#loc171, #loc172])
#loc258 = loc(fused[#loc173, #loc174])
#loc259 = loc(fused[#loc175, #loc176])
