!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc122)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc123)
  cir.func private @printIntLine(!s32i) loc(#loc124)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc125)
  cir.func @_ZN59CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc127)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc128)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc14)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc16)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc129)
    %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc18)
    %5 = cir.const #cir.int<2> : !s32i loc(#loc19)
    %6 = cir.binop(div, %4, %5) : !s32i loc(#loc130)
    %7 = cir.const #cir.int<2> : !s32i loc(#loc20)
    %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc130)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    cir.scope {
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc133)
      %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc25)
      %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc25)
      cir.store %11, %9 : !s32i, !cir.ptr<!s32i> loc(#loc133)
      cir.scope {
        %12 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc135)
        %13 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc136)
        %14 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc32)
        %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc33)
        %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc33)
        %17 = cir.const #cir.int<4> : !u64i loc(#loc137)
        %18 = cir.binop(mul, %16, %17) : !u64i loc(#loc138)
        %19 = cir.call @malloc(%18) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc32)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc139)
        cir.store %20, %13 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc140)
        cir.scope {
          %28 = cir.load %13 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc40)
          %29 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc41)
          %30 = cir.cmp(eq, %28, %29) : !cir.ptr<!s32i>, !cir.bool loc(#loc142)
          cir.if %30 {
            %31 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc43)
            %32 = cir.const #cir.int<1> : !s32i loc(#loc44)
            %33 = cir.unary(minus, %32) nsw : !s32i, !s32i loc(#loc45)
            cir.call @exit(%33) : (!s32i) -> () extra(#fn_attr) loc(#loc43)
          } loc(#loc143)
        } loc(#loc141)
        cir.scope {
          %28 = cir.const #cir.int<0> : !s32i loc(#loc48)
          %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc48)
          cir.store %29, %12 : !u64i, !cir.ptr<!u64i> loc(#loc145)
          cir.for : cond {
            %30 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc50)
            %31 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc51)
            %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc51)
            %33 = cir.cmp(lt, %30, %32) : !u64i, !cir.bool loc(#loc146)
            cir.condition(%33) loc(#loc146)
          } body {
            cir.scope {
              %30 = cir.const #cir.int<0> : !s32i loc(#loc53)
              %31 = cir.load %13 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc54)
              %32 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc55)
              %33 = cir.ptr_stride(%31 : !cir.ptr<!s32i>, %32 : !u64i), !cir.ptr<!s32i> loc(#loc56)
              cir.store %30, %33 : !s32i, !cir.ptr<!s32i> loc(#loc148)
            } loc(#loc147)
            cir.yield loc(#loc47)
          } step {
            %30 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc57)
            %31 = cir.unary(inc, %30) : !u64i, !u64i loc(#loc58)
            cir.store %31, %12 : !u64i, !cir.ptr<!u64i> loc(#loc149)
            cir.yield loc(#loc144)
          } loc(#loc144)
        } loc(#loc144)
        %21 = cir.load %13 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc59)
        %22 = cir.const #cir.int<0> : !s32i loc(#loc60)
        %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc61)
        %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc59)
        cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc62)
        %25 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc63)
        %26 = cir.load %13 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc64)
        %27 = cir.cast(bitcast, %26 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc64)
        cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc63)
      } loc(#loc134)
    } loc(#loc132)
    cir.return loc(#loc10)
  } loc(#loc126)
  cir.func internal private @_ZN59CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc151)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc152)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc70)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc71)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc72)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc153)
    %4 = cir.const #cir.int<20> : !s32i loc(#loc74)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc154)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc156)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc79)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc79)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc156)
      cir.scope {
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc158)
        %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc159)
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc86)
        %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc87)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc87)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc160)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc161)
        %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc86)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc162)
        cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc163)
        cir.scope {
          %24 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc94)
          %25 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc95)
          %26 = cir.cmp(eq, %24, %25) : !cir.ptr<!s32i>, !cir.bool loc(#loc165)
          cir.if %26 {
            %27 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc97)
            %28 = cir.const #cir.int<1> : !s32i loc(#loc98)
            %29 = cir.unary(minus, %28) nsw : !s32i, !s32i loc(#loc99)
            cir.call @exit(%29) : (!s32i) -> () extra(#fn_attr) loc(#loc97)
          } loc(#loc166)
        } loc(#loc164)
        cir.scope {
          %24 = cir.const #cir.int<0> : !s32i loc(#loc102)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc102)
          cir.store %25, %8 : !u64i, !cir.ptr<!u64i> loc(#loc168)
          cir.for : cond {
            %26 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc104)
            %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc105)
            %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc105)
            %29 = cir.cmp(lt, %26, %28) : !u64i, !cir.bool loc(#loc169)
            cir.condition(%29) loc(#loc169)
          } body {
            cir.scope {
              %26 = cir.const #cir.int<0> : !s32i loc(#loc107)
              %27 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc108)
              %28 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc109)
              %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !u64i), !cir.ptr<!s32i> loc(#loc110)
              cir.store %26, %29 : !s32i, !cir.ptr<!s32i> loc(#loc171)
            } loc(#loc170)
            cir.yield loc(#loc101)
          } step {
            %26 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc111)
            %27 = cir.unary(inc, %26) : !u64i, !u64i loc(#loc112)
            cir.store %27, %8 : !u64i, !cir.ptr<!u64i> loc(#loc172)
            cir.yield loc(#loc167)
          } loc(#loc167)
        } loc(#loc167)
        %17 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc113)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc114)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc115)
        %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc113)
        cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc116)
        %21 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc117)
        %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc118)
        %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc118)
        cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc117)
      } loc(#loc157)
    } loc(#loc155)
    cir.return loc(#loc66)
  } loc(#loc150)
  cir.func @_ZN59CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN59CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33L7goodG2BEv() : () -> () loc(#loc121)
    cir.return loc(#loc120)
  } loc(#loc173)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":24:1)
#loc10 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":51:1)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":26:5)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":26:9)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":27:5)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":27:20)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":29:13)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":29:12)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":29:5)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":31:12)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":31:22)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":31:26)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":31:5)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":34:5)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":50:5)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":35:9)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":35:20)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":36:9)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":49:9)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":37:13)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":37:20)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":38:13)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":38:18)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":41:32)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":41:39)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":41:46)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":41:56)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":41:57)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":41:13)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":42:13)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":42:47)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":42:17)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":42:31)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":42:37)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":42:38)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":42:44)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":42:43)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":43:13)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":46:13)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":43:22)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":43:18)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":43:25)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":43:37)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":44:13)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":45:33)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":45:17)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":45:28)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":45:29)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":43:44)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":43:43)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":47:26)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":47:37)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":47:38)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":47:13)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":48:13)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":48:18)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":58:1)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":83:1)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":60:5)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":60:9)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":61:5)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":61:20)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":63:13)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":63:12)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":63:5)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":65:12)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":65:5)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":66:5)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":82:5)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":67:9)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":67:20)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":68:9)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":81:9)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":69:13)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":69:20)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":70:13)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":70:18)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":73:32)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":73:39)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":73:46)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":73:56)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":73:57)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":73:13)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":74:13)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":74:47)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":74:17)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":74:31)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":74:37)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":74:38)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":74:44)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":74:43)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":75:13)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":78:13)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":75:22)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":75:18)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":75:25)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":75:37)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":76:13)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":77:33)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":77:17)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":77:28)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":77:29)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":75:44)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":75:43)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":79:26)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":79:37)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":79:38)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":79:13)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":80:13)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":80:18)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":85:1)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":88:1)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_33.cpp":87:5)
#loc122 = loc(fused[#loc1, #loc2])
#loc123 = loc(fused[#loc3, #loc4])
#loc124 = loc(fused[#loc5, #loc6])
#loc125 = loc(fused[#loc7, #loc8])
#loc126 = loc(fused[#loc9, #loc10])
#loc127 = loc(fused[#loc11, #loc12])
#loc128 = loc(fused[#loc13, #loc14])
#loc129 = loc(fused[#loc17, #loc15])
#loc130 = loc(fused[#loc18, #loc19])
#loc131 = loc(fused[#loc21, #loc20])
#loc132 = loc(fused[#loc22, #loc23])
#loc133 = loc(fused[#loc24, #loc25])
#loc134 = loc(fused[#loc26, #loc27])
#loc135 = loc(fused[#loc28, #loc29])
#loc136 = loc(fused[#loc30, #loc31])
#loc137 = loc(fused[#loc34, #loc35])
#loc138 = loc(fused[#loc33, #loc35])
#loc139 = loc(fused[#loc32, #loc36])
#loc140 = loc(fused[#loc37, #loc36])
#loc141 = loc(fused[#loc38, #loc39])
#loc142 = loc(fused[#loc40, #loc41])
#loc143 = loc(fused[#loc42, #loc39])
#loc144 = loc(fused[#loc46, #loc47])
#loc145 = loc(fused[#loc49, #loc48])
#loc146 = loc(fused[#loc50, #loc51])
#loc147 = loc(fused[#loc52, #loc47])
#loc148 = loc(fused[#loc54, #loc53])
#loc149 = loc(fused[#loc58, #loc57])
#loc150 = loc(fused[#loc65, #loc66])
#loc151 = loc(fused[#loc67, #loc68])
#loc152 = loc(fused[#loc69, #loc70])
#loc153 = loc(fused[#loc73, #loc71])
#loc154 = loc(fused[#loc75, #loc74])
#loc155 = loc(fused[#loc76, #loc77])
#loc156 = loc(fused[#loc78, #loc79])
#loc157 = loc(fused[#loc80, #loc81])
#loc158 = loc(fused[#loc82, #loc83])
#loc159 = loc(fused[#loc84, #loc85])
#loc160 = loc(fused[#loc88, #loc89])
#loc161 = loc(fused[#loc87, #loc89])
#loc162 = loc(fused[#loc86, #loc90])
#loc163 = loc(fused[#loc91, #loc90])
#loc164 = loc(fused[#loc92, #loc93])
#loc165 = loc(fused[#loc94, #loc95])
#loc166 = loc(fused[#loc96, #loc93])
#loc167 = loc(fused[#loc100, #loc101])
#loc168 = loc(fused[#loc103, #loc102])
#loc169 = loc(fused[#loc104, #loc105])
#loc170 = loc(fused[#loc106, #loc101])
#loc171 = loc(fused[#loc108, #loc107])
#loc172 = loc(fused[#loc112, #loc111])
#loc173 = loc(fused[#loc119, #loc120])
