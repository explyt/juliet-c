!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":106:10)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":106:14)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":106:20)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":106:32)
#loc208 = loc(fused[#loc90, #loc91])
#loc209 = loc(fused[#loc92, #loc93])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc177)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc178)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc179)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc181)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc182)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc12)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc12)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc12)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc12)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc12)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc182)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc13)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc183)
    cir.scope {
      %10 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc185)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc185)
      %12 = cir.call %11() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc17)
      %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc17)
      cir.if %13 {
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc22)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc22)
        %16 = cir.const #cir.int<65> : !s32i loc(#loc23)
        %17 = cir.const #cir.int<100> : !s32i loc(#loc24)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc25)
        %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc24)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc24)
        cir.libc.memset %20 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc187)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc28)
        %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc28)
        %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc29)
        %24 = cir.const #cir.int<100> : !s32i loc(#loc30)
        %25 = cir.const #cir.int<1> : !s32i loc(#loc31)
        %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc30)
        %27 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc32)
        cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc188)
      } else {
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc33)
        %16 = cir.const #cir.int<65> : !s32i loc(#loc34)
        %17 = cir.const #cir.int<50> : !s32i loc(#loc35)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc36)
        %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc35)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc35)
        cir.libc.memset %20 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc189)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc39)
        %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc39)
        %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
        %24 = cir.const #cir.int<50> : !s32i loc(#loc41)
        %25 = cir.const #cir.int<1> : !s32i loc(#loc42)
        %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc41)
        %27 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc43)
        cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc190)
      } loc(#loc186)
    } loc(#loc184)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc192)
      %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc193)
      %12 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc194)
      %13 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc192)
      cir.store %13, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc192)
      %14 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc51)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
      %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc51)
      cir.store %16, %12 : !u64i, !cir.ptr<!u64i> loc(#loc195)
      cir.scope {
        %25 = cir.const #cir.int<0> : !s32i loc(#loc57)
        %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc57)
        cir.store %26, %11 : !u64i, !cir.ptr<!u64i> loc(#loc197)
        cir.for : cond {
          %27 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc59)
          %28 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc60)
          %29 = cir.cmp(lt, %27, %28) : !u64i, !cir.bool loc(#loc198)
          cir.condition(%29) loc(#loc61)
        } body {
          cir.scope {
            %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc63)
            %28 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc64)
            %29 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %28 : !u64i), !cir.ptr<!s8i> loc(#loc65)
            %30 = cir.load %29 : !cir.ptr<!s8i>, !s8i loc(#loc63)
            %31 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc66)
            %32 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc67)
            %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc67)
            cir.store %30, %33 : !s8i, !cir.ptr<!s8i> loc(#loc200)
          } loc(#loc199)
          cir.yield loc(#loc56)
        } step {
          %27 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc68)
          %28 = cir.unary(inc, %27) : !u64i, !u64i loc(#loc69)
          cir.store %28, %11 : !u64i, !cir.ptr<!u64i> loc(#loc201)
          cir.yield loc(#loc196)
        } loc(#loc196)
      } loc(#loc196)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc70)
      %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc70)
      %19 = cir.const #cir.int<50> : !s32i loc(#loc71)
      %20 = cir.const #cir.int<1> : !s32i loc(#loc72)
      %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc71)
      %22 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc73)
      %23 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc73)
      cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc202)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc74)
      cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    } loc(#loc191)
    cir.return loc(#loc8)
  } loc(#loc180)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc204)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc78)
    cir.return loc(#loc77)
  } loc(#loc203)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc205)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc206)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc84)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc85)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc86)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc87)
  cir.func @main(%arg0: !s32i loc(fused[#loc90, #loc91]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc92, #loc93])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc208)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc209)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc89)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc94)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc94)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc95)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc96)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc96)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc97)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc84)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc84)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc98)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc210)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12_good() : () -> () loc(#loc99)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc85)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc85)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc101)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc86)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc86)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc102)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc211)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12_bad() : () -> () loc(#loc103)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc87)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc87)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc105)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc106)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc212)
    cir.return %17 : !s32i loc(#loc212)
  } loc(#loc207)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc214)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc215)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc113)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc113)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc113)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc113)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc113)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc113)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc113)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc215)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc114)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc216)
    cir.scope {
      %10 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc218)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc218)
      %12 = cir.call %11() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc118)
      %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc118)
      cir.if %13 {
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc123)
        %16 = cir.const #cir.int<65> : !s32i loc(#loc124)
        %17 = cir.const #cir.int<50> : !s32i loc(#loc125)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc126)
        %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc125)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc125)
        cir.libc.memset %20 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc220)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc129)
        %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc129)
        %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc130)
        %24 = cir.const #cir.int<50> : !s32i loc(#loc131)
        %25 = cir.const #cir.int<1> : !s32i loc(#loc132)
        %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc131)
        %27 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc133)
        cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc221)
      } else {
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc134)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc134)
        %16 = cir.const #cir.int<65> : !s32i loc(#loc135)
        %17 = cir.const #cir.int<50> : !s32i loc(#loc136)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc137)
        %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc136)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc136)
        cir.libc.memset %20 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc222)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc140)
        %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc140)
        %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc141)
        %24 = cir.const #cir.int<50> : !s32i loc(#loc142)
        %25 = cir.const #cir.int<1> : !s32i loc(#loc143)
        %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc142)
        %27 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc144)
        cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc223)
      } loc(#loc219)
    } loc(#loc217)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc225)
      %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc226)
      %12 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc227)
      %13 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc225)
      cir.store %13, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc225)
      %14 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc152)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
      %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc152)
      cir.store %16, %12 : !u64i, !cir.ptr<!u64i> loc(#loc228)
      cir.scope {
        %25 = cir.const #cir.int<0> : !s32i loc(#loc158)
        %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc158)
        cir.store %26, %11 : !u64i, !cir.ptr<!u64i> loc(#loc230)
        cir.for : cond {
          %27 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc160)
          %28 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc161)
          %29 = cir.cmp(lt, %27, %28) : !u64i, !cir.bool loc(#loc231)
          cir.condition(%29) loc(#loc162)
        } body {
          cir.scope {
            %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc164)
            %28 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc165)
            %29 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %28 : !u64i), !cir.ptr<!s8i> loc(#loc166)
            %30 = cir.load %29 : !cir.ptr<!s8i>, !s8i loc(#loc164)
            %31 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc167)
            %32 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc168)
            %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc168)
            cir.store %30, %33 : !s8i, !cir.ptr<!s8i> loc(#loc233)
          } loc(#loc232)
          cir.yield loc(#loc157)
        } step {
          %27 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc169)
          %28 = cir.unary(inc, %27) : !u64i, !u64i loc(#loc170)
          cir.store %28, %11 : !u64i, !cir.ptr<!u64i> loc(#loc234)
          cir.yield loc(#loc229)
        } loc(#loc229)
      } loc(#loc229)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc171)
      %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc171)
      %19 = cir.const #cir.int<50> : !s32i loc(#loc172)
      %20 = cir.const #cir.int<1> : !s32i loc(#loc173)
      %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc172)
      %22 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc174)
      %23 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc174)
      cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc235)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc175)
      cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc176)
    } loc(#loc224)
    cir.return loc(#loc109)
  } loc(#loc213)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/string.h":407:1)
#loc4 = loc("/usr/include/string.h":408:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":23:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":52:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":25:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":25:12)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":26:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":26:33)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":27:12)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":27:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":28:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":39:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":28:8)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":28:33)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":29:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":33:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":35:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":31:16)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":31:22)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":31:27)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":31:31)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":31:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":31:32)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":32:23)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":32:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":32:14)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":32:18)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":32:19)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":37:16)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":37:22)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":37:27)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":37:30)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":37:9)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":37:31)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":38:22)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":38:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":38:14)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":38:17)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":38:18)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":40:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":51:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":41:9)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":41:25)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":42:9)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":42:16)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":42:19)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":43:19)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":43:26)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":43:9)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":43:30)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":45:9)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":48:9)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":45:18)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":45:14)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":45:21)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":45:25)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":45:23)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":46:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":47:23)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":47:28)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":47:29)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":47:18)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":47:13)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":45:35)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":45:34)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":49:22)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":49:14)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":49:17)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":49:9)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":50:19)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":50:9)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":91:1)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":94:1)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":93:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":93:13)
#loc80 = loc("/usr/include/stdlib.h":575:1)
#loc81 = loc("/usr/include/stdlib.h":575:41)
#loc82 = loc("/usr/include/time.h":76:1)
#loc83 = loc("/usr/include/time.h":76:38)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":111:15)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":113:15)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":116:15)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":118:15)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":106:1)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":121:1)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":107:1)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":109:27)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":109:22)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":109:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":111:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":112:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":112:73)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":113:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":116:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":117:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":117:72)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":118:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":120:12)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":120:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":60:1)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":89:1)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":62:5)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":62:12)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":63:5)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":63:33)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":64:12)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":64:5)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":65:5)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":76:5)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":65:8)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":65:33)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":66:5)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":70:5)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":72:5)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":68:16)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":68:22)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":68:27)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":68:30)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":68:9)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":68:31)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":69:22)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":69:9)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":69:14)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":69:17)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":69:18)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":74:16)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":74:22)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":74:27)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":74:30)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":74:9)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":74:31)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":75:22)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":75:9)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":75:14)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":75:17)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":75:18)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":77:5)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":88:5)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":78:9)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":78:25)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":79:9)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":79:16)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":79:19)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":80:19)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":80:26)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":80:9)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":80:30)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":82:9)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":85:9)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":82:18)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":82:14)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":82:21)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":82:25)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":82:23)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":83:9)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":84:23)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":84:28)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":84:29)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":84:18)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":84:13)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":82:35)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":82:34)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":86:22)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":86:14)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":86:17)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":86:9)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":87:19)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c":87:9)
#loc177 = loc(fused[#loc1, #loc2])
#loc178 = loc(fused[#loc3, #loc4])
#loc179 = loc(fused[#loc5, #loc6])
#loc180 = loc(fused[#loc7, #loc8])
#loc181 = loc(fused[#loc9, #loc10])
#loc182 = loc(fused[#loc11, #loc12])
#loc183 = loc(fused[#loc14, #loc13])
#loc184 = loc(fused[#loc15, #loc16])
#loc185 = loc(fused[#loc17, #loc18])
#loc186 = loc(fused[#loc19, #loc20, #loc21, #loc16])
#loc187 = loc(fused[#loc26, #loc27])
#loc188 = loc(fused[#loc29, #loc28])
#loc189 = loc(fused[#loc37, #loc38])
#loc190 = loc(fused[#loc40, #loc39])
#loc191 = loc(fused[#loc44, #loc45])
#loc192 = loc(fused[#loc46, #loc47])
#loc193 = loc(fused[#loc48, #loc49])
#loc194 = loc(fused[#loc48, #loc50])
#loc195 = loc(fused[#loc53, #loc54])
#loc196 = loc(fused[#loc55, #loc56])
#loc197 = loc(fused[#loc58, #loc57])
#loc198 = loc(fused[#loc59, #loc60])
#loc199 = loc(fused[#loc62, #loc56])
#loc200 = loc(fused[#loc67, #loc65])
#loc201 = loc(fused[#loc69, #loc68])
#loc202 = loc(fused[#loc73, #loc70])
#loc203 = loc(fused[#loc76, #loc77])
#loc204 = loc(fused[#loc78, #loc79])
#loc205 = loc(fused[#loc80, #loc81])
#loc206 = loc(fused[#loc82, #loc83])
#loc207 = loc(fused[#loc88, #loc89])
#loc210 = loc(fused[#loc99, #loc100])
#loc211 = loc(fused[#loc103, #loc104])
#loc212 = loc(fused[#loc107, #loc106])
#loc213 = loc(fused[#loc108, #loc109])
#loc214 = loc(fused[#loc110, #loc111])
#loc215 = loc(fused[#loc112, #loc113])
#loc216 = loc(fused[#loc115, #loc114])
#loc217 = loc(fused[#loc116, #loc117])
#loc218 = loc(fused[#loc118, #loc119])
#loc219 = loc(fused[#loc120, #loc121, #loc122, #loc117])
#loc220 = loc(fused[#loc127, #loc128])
#loc221 = loc(fused[#loc130, #loc129])
#loc222 = loc(fused[#loc138, #loc139])
#loc223 = loc(fused[#loc141, #loc140])
#loc224 = loc(fused[#loc145, #loc146])
#loc225 = loc(fused[#loc147, #loc148])
#loc226 = loc(fused[#loc149, #loc150])
#loc227 = loc(fused[#loc149, #loc151])
#loc228 = loc(fused[#loc154, #loc155])
#loc229 = loc(fused[#loc156, #loc157])
#loc230 = loc(fused[#loc159, #loc158])
#loc231 = loc(fused[#loc160, #loc161])
#loc232 = loc(fused[#loc163, #loc157])
#loc233 = loc(fused[#loc168, #loc166])
#loc234 = loc(fused[#loc170, #loc169])
#loc235 = loc(fused[#loc174, #loc171])
