!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":21:67)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":21:77)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":45:71)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":45:81)
#loc86 = loc(fused[#loc7, #loc8])
#loc100 = loc(fused[#loc46, #loc47])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printLongLongLine(!s64i) loc(#loc83)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc84)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41_badSink(%arg0: !cir.ptr<!s64i> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc86)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc9)
    %1 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc10)
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc11)
    cir.call @printLongLongLine(%2) : (!s64i) -> () loc(#loc12)
    %3 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc13)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc14)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc14)
    cir.call @free(%5) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc13)
    cir.return loc(#loc6)
  } loc(#loc85)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc87)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc88)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc90)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc23)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc91)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc25)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc92)
    %4 = cir.call @malloc(%3) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc25)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc93)
    cir.store %5, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc94)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc32)
      %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc33)
      %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s64i>, !s32i loc(#loc96)
      %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc34)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc36)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc37)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc38)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc36)
      } loc(#loc97)
    } loc(#loc95)
    %6 = cir.const #cir.int<2147483643> : !s64i loc(#loc39)
    %7 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc40)
    cir.store %6, %7 : !s64i, !cir.ptr<!s64i> loc(#loc98)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc42)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41_badSink(%8) : (!cir.ptr<!s64i>) -> () loc(#loc43)
    cir.return loc(#loc20)
  } loc(#loc89)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41_goodG2BSink(%arg0: !cir.ptr<!s64i> loc(fused[#loc46, #loc47])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc100)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc48)
    %1 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc49)
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc50)
    cir.call @printLongLongLine(%2) : (!s64i) -> () loc(#loc51)
    %3 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc52)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc53)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc53)
    cir.call @free(%5) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc52)
    cir.return loc(#loc45)
  } loc(#loc99)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc102)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc56)
    cir.return loc(#loc55)
  } loc(#loc101)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc104)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc62)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc105)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc64)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc106)
    %4 = cir.call @malloc(%3) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc64)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc107)
    cir.store %5, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc108)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc71)
      %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc72)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc72)
      %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s64i>, !s32i loc(#loc110)
      %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc73)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc75)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc76)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc77)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc75)
      } loc(#loc111)
    } loc(#loc109)
    %6 = cir.const #cir.int<2147483643> : !s64i loc(#loc78)
    %7 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc79)
    cir.store %6, %7 : !s64i, !cir.ptr<!s64i> loc(#loc112)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc81)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41_goodG2BSink(%8) : (!cir.ptr<!s64i>) -> () loc(#loc82)
    cir.return loc(#loc59)
  } loc(#loc103)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":26:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":22:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":24:24)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":24:23)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":24:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":25:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":25:10)
#loc15 = loc("/usr/include/stdlib.h":672:1)
#loc16 = loc("/usr/include/stdlib.h":672:45)
#loc17 = loc("/usr/include/stdlib.h":756:1)
#loc18 = loc("/usr/include/stdlib.h":756:70)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":28:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":39:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":30:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":30:15)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":32:12)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":32:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":35:23)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":35:30)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":35:41)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":35:42)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":35:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":36:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":36:33)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":36:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":36:17)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":36:14)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":36:23)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":36:24)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":36:30)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":36:29)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":37:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":37:6)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":37:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":38:66)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":38:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":45:1)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":50:1)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":46:1)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":48:24)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":48:23)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":48:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":49:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":49:10)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":65:1)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":68:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":67:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":67:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":53:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":63:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":55:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":55:15)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":57:12)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":57:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":59:23)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":59:30)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":59:42)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":59:43)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":59:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":60:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":60:33)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":60:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":60:17)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":60:14)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":60:23)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":60:24)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":60:30)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":60:29)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":61:13)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":61:6)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":61:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":62:70)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c":62:5)
#loc83 = loc(fused[#loc1, #loc2])
#loc84 = loc(fused[#loc3, #loc4])
#loc85 = loc(fused[#loc5, #loc6])
#loc87 = loc(fused[#loc15, #loc16])
#loc88 = loc(fused[#loc17, #loc18])
#loc89 = loc(fused[#loc19, #loc20])
#loc90 = loc(fused[#loc21, #loc22])
#loc91 = loc(fused[#loc24, #loc23])
#loc92 = loc(fused[#loc26, #loc27])
#loc93 = loc(fused[#loc25, #loc28])
#loc94 = loc(fused[#loc29, #loc28])
#loc95 = loc(fused[#loc30, #loc31])
#loc96 = loc(fused[#loc32, #loc33])
#loc97 = loc(fused[#loc35, #loc31])
#loc98 = loc(fused[#loc41, #loc39])
#loc99 = loc(fused[#loc44, #loc45])
#loc101 = loc(fused[#loc54, #loc55])
#loc102 = loc(fused[#loc56, #loc57])
#loc103 = loc(fused[#loc58, #loc59])
#loc104 = loc(fused[#loc60, #loc61])
#loc105 = loc(fused[#loc63, #loc62])
#loc106 = loc(fused[#loc65, #loc66])
#loc107 = loc(fused[#loc64, #loc67])
#loc108 = loc(fused[#loc68, #loc67])
#loc109 = loc(fused[#loc69, #loc70])
#loc110 = loc(fused[#loc71, #loc72])
#loc111 = loc(fused[#loc74, #loc70])
#loc112 = loc(fused[#loc80, #loc78])
