!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int_fscanf_preinc_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc178)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc179)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc180)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printIntLine(!s32i) loc(#loc181)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_preinc_11_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc183)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc14)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc184)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc186)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc186)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc18)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc18)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc21)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc180)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc22)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc7)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc7)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc21)
      } loc(#loc187)
    } loc(#loc185)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc189)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc189)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc25)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc25)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc192)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
          %8 = cir.unary(inc, %7) nsw : !s32i, !s32i loc(#loc32)
          cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc193)
          %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc192)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc34)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc35)
        } loc(#loc191)
      } loc(#loc190)
    } loc(#loc188)
    cir.return loc(#loc11)
  } loc(#loc182)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_preinc_11_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc195)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc196)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc197)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc198)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    cir.return loc(#loc37)
  } loc(#loc194)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc199)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc200)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc51)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc202)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc56)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc203)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc205)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc205)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc60)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc60)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc63)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc180)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc64)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc65)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc65)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc63)
      } loc(#loc206)
    } loc(#loc204)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc208)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc208)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc68)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc68)
      cir.if %5 {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc50)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc50)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc73)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc76)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc77)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc211)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc213)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc83)
            %11 = cir.unary(inc, %10) nsw : !s32i, !s32i loc(#loc83)
            cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc214)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc82)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc213)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc85)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc86)
          } else {
            %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc51)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc51)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc87)
          } loc(#loc212)
        } loc(#loc210)
      } loc(#loc209)
    } loc(#loc207)
    cir.return loc(#loc53)
  } loc(#loc201)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc216)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc92)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc217)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc219)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc219)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc96)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc96)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc99)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc180)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc100)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc101)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc101)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc99)
      } loc(#loc220)
    } loc(#loc218)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc222)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc222)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc104)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc104)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc109)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc110)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc225)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc227)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
            %11 = cir.unary(inc, %10) nsw : !s32i, !s32i loc(#loc116)
            cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc228)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc115)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc227)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc118)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc119)
          } else {
            %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc120)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc120)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc121)
          } loc(#loc226)
        } loc(#loc224)
      } loc(#loc223)
    } loc(#loc221)
    cir.return loc(#loc89)
  } loc(#loc215)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc230)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc126)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc231)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc233)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc233)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc130)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc130)
      cir.if %5 {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc135)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc135)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc136)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc137)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc235)
      } loc(#loc234)
    } loc(#loc232)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc237)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc237)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc141)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc141)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc240)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc148)
          %8 = cir.unary(inc, %7) nsw : !s32i, !s32i loc(#loc148)
          cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc241)
          %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc147)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc240)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc150)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc151)
        } loc(#loc239)
      } loc(#loc238)
    } loc(#loc236)
    cir.return loc(#loc123)
  } loc(#loc229)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc243)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc156)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc244)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc246)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc246)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc160)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc160)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc163)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc248)
      } loc(#loc247)
    } loc(#loc245)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc250)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc250)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc167)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc167)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc253)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc174)
          %8 = cir.unary(inc, %7) nsw : !s32i, !s32i loc(#loc174)
          cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc254)
          %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc173)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc253)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc176)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc177)
        } loc(#loc252)
      } loc(#loc251)
    } loc(#loc249)
    cir.return loc(#loc153)
  } loc(#loc242)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int_fscanf_preinc_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":30:23)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":22:1)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":41:1)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":24:5)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":24:9)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":26:12)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":26:5)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":27:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":31:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":27:8)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":27:26)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":28:5)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":30:9)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":30:16)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":32:5)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":40:5)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":32:8)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":32:26)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":33:5)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":34:9)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":39:9)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":37:13)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":37:26)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":36:13)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":36:15)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":38:26)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":38:13)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":155:1)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":161:1)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":157:5)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":157:14)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":158:5)
#loc41 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":158:14)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":159:5)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":159:14)
#loc44 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":160:5)
#loc45 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":160:14)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":61:19)
#loc51 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":74:23)
#loc52 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":48:1)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":77:1)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":50:5)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":50:9)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":52:12)
#loc57 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":52:5)
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":53:5)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":57:5)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":53:8)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":53:26)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":54:5)
#loc63 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":56:9)
#loc64 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":56:16)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":56:23)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":58:5)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":76:5)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":58:8)
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":58:27)
#loc70 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":59:5)
#loc71 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":62:5)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":64:5)
#loc73 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":61:9)
#loc74 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":66:9)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":75:9)
#loc76 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":66:13)
#loc77 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":66:20)
#loc78 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":67:9)
#loc79 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":71:9)
#loc80 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":73:9)
#loc81 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":69:13)
#loc82 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":69:26)
#loc83 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":68:13)
#loc84 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":68:15)
#loc85 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":70:26)
#loc86 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":70:13)
#loc87 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":74:13)
#loc88 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":80:1)
#loc89 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":104:1)
#loc90 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":82:5)
#loc91 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":82:9)
#loc92 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":84:12)
#loc93 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":84:5)
#loc94 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":85:5)
#loc95 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":89:5)
#loc96 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":85:8)
#loc97 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":85:26)
#loc98 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":86:5)
#loc99 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":88:9)
#loc100 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":88:16)
#loc101 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":88:23)
#loc102 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":90:5)
#loc103 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":103:5)
#loc104 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":90:8)
#loc105 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":90:26)
#loc106 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":91:5)
#loc107 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":93:9)
#loc108 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":102:9)
#loc109 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":93:13)
#loc110 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":93:20)
#loc111 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":94:9)
#loc112 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":98:9)
#loc113 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":100:9)
#loc114 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":96:13)
#loc115 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":96:26)
#loc116 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":95:13)
#loc117 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":95:15)
#loc118 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":97:26)
#loc119 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":97:13)
#loc120 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":101:23)
#loc121 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":101:13)
#loc122 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":107:1)
#loc123 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":131:1)
#loc124 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":109:5)
#loc125 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":109:9)
#loc126 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":111:12)
#loc127 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":111:5)
#loc128 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":112:5)
#loc129 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":121:5)
#loc130 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":112:8)
#loc131 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":112:27)
#loc132 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":113:5)
#loc133 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":116:5)
#loc134 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":118:5)
#loc135 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":115:19)
#loc136 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":115:9)
#loc137 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":120:16)
#loc138 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":120:9)
#loc139 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":122:5)
#loc140 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":130:5)
#loc141 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":122:8)
#loc142 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":122:26)
#loc143 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":123:5)
#loc144 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":124:9)
#loc145 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":129:9)
#loc146 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":127:13)
#loc147 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":127:26)
#loc148 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":126:13)
#loc149 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":126:15)
#loc150 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":128:26)
#loc151 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":128:13)
#loc152 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":134:1)
#loc153 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":153:1)
#loc154 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":136:5)
#loc155 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":136:9)
#loc156 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":138:12)
#loc157 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":138:5)
#loc158 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":139:5)
#loc159 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":143:5)
#loc160 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":139:8)
#loc161 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":139:26)
#loc162 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":140:5)
#loc163 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":142:16)
#loc164 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":142:9)
#loc165 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":144:5)
#loc166 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":152:5)
#loc167 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":144:8)
#loc168 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":144:26)
#loc169 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":145:5)
#loc170 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":146:9)
#loc171 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":151:9)
#loc172 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":149:13)
#loc173 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":149:26)
#loc174 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":148:13)
#loc175 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":148:15)
#loc176 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":150:26)
#loc177 = loc("CWE190_Integer_Overflow__int_fscanf_preinc_11.c":150:13)
#loc178 = loc(fused[#loc1, #loc2])
#loc179 = loc(fused[#loc3, #loc4])
#loc180 = loc(fused[#loc5, #loc6])
#loc181 = loc(fused[#loc8, #loc9])
#loc182 = loc(fused[#loc10, #loc11])
#loc183 = loc(fused[#loc12, #loc13])
#loc184 = loc(fused[#loc15, #loc14])
#loc185 = loc(fused[#loc16, #loc17])
#loc186 = loc(fused[#loc18, #loc19])
#loc187 = loc(fused[#loc20, #loc17])
#loc188 = loc(fused[#loc23, #loc24])
#loc189 = loc(fused[#loc25, #loc26])
#loc190 = loc(fused[#loc27, #loc24])
#loc191 = loc(fused[#loc28, #loc29])
#loc192 = loc(fused[#loc30, #loc31])
#loc193 = loc(fused[#loc32, #loc33])
#loc194 = loc(fused[#loc36, #loc37])
#loc195 = loc(fused[#loc38, #loc39])
#loc196 = loc(fused[#loc40, #loc41])
#loc197 = loc(fused[#loc42, #loc43])
#loc198 = loc(fused[#loc44, #loc45])
#loc199 = loc(fused[#loc46, #loc47])
#loc200 = loc(fused[#loc48, #loc49])
#loc201 = loc(fused[#loc52, #loc53])
#loc202 = loc(fused[#loc54, #loc55])
#loc203 = loc(fused[#loc57, #loc56])
#loc204 = loc(fused[#loc58, #loc59])
#loc205 = loc(fused[#loc60, #loc61])
#loc206 = loc(fused[#loc62, #loc59])
#loc207 = loc(fused[#loc66, #loc67])
#loc208 = loc(fused[#loc68, #loc69])
#loc209 = loc(fused[#loc70, #loc71, #loc72, #loc67])
#loc210 = loc(fused[#loc74, #loc75])
#loc211 = loc(fused[#loc76, #loc77])
#loc212 = loc(fused[#loc78, #loc79, #loc80, #loc75])
#loc213 = loc(fused[#loc81, #loc82])
#loc214 = loc(fused[#loc83, #loc84])
#loc215 = loc(fused[#loc88, #loc89])
#loc216 = loc(fused[#loc90, #loc91])
#loc217 = loc(fused[#loc93, #loc92])
#loc218 = loc(fused[#loc94, #loc95])
#loc219 = loc(fused[#loc96, #loc97])
#loc220 = loc(fused[#loc98, #loc95])
#loc221 = loc(fused[#loc102, #loc103])
#loc222 = loc(fused[#loc104, #loc105])
#loc223 = loc(fused[#loc106, #loc103])
#loc224 = loc(fused[#loc107, #loc108])
#loc225 = loc(fused[#loc109, #loc110])
#loc226 = loc(fused[#loc111, #loc112, #loc113, #loc108])
#loc227 = loc(fused[#loc114, #loc115])
#loc228 = loc(fused[#loc116, #loc117])
#loc229 = loc(fused[#loc122, #loc123])
#loc230 = loc(fused[#loc124, #loc125])
#loc231 = loc(fused[#loc127, #loc126])
#loc232 = loc(fused[#loc128, #loc129])
#loc233 = loc(fused[#loc130, #loc131])
#loc234 = loc(fused[#loc132, #loc133, #loc134, #loc129])
#loc235 = loc(fused[#loc138, #loc137])
#loc236 = loc(fused[#loc139, #loc140])
#loc237 = loc(fused[#loc141, #loc142])
#loc238 = loc(fused[#loc143, #loc140])
#loc239 = loc(fused[#loc144, #loc145])
#loc240 = loc(fused[#loc146, #loc147])
#loc241 = loc(fused[#loc148, #loc149])
#loc242 = loc(fused[#loc152, #loc153])
#loc243 = loc(fused[#loc154, #loc155])
#loc244 = loc(fused[#loc157, #loc156])
#loc245 = loc(fused[#loc158, #loc159])
#loc246 = loc(fused[#loc160, #loc161])
#loc247 = loc(fused[#loc162, #loc159])
#loc248 = loc(fused[#loc164, #loc163])
#loc249 = loc(fused[#loc165, #loc166])
#loc250 = loc(fused[#loc167, #loc168])
#loc251 = loc(fused[#loc169, #loc166])
#loc252 = loc(fused[#loc170, #loc171])
#loc253 = loc(fused[#loc172, #loc173])
#loc254 = loc(fused[#loc174, #loc175])
