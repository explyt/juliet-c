!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc9 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":24:65)
#loc10 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":24:75)
#loc33 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":38:69)
#loc34 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":38:79)
#loc55 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":47:69)
#loc56 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":47:79)
#loc81 = loc(fused[#loc9, #loc10])
#loc91 = loc(fused[#loc33, #loc34])
#loc101 = loc(fused[#loc55, #loc56])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_61b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc77)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc78)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc79)
  cir.func  @CWE415_Double_Free__malloc_free_int64_t_61b_badSource(%arg0: !cir.ptr<!s64i> loc(fused[#loc9, #loc10])) -> !cir.ptr<!s64i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc81)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["__retval"] {alignment = 8 : i64} loc(#loc8)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc11)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc12)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc13)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc13)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc82)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc83)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc12)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc84)
    cir.store %8, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc85)
    cir.scope {
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc20)
      %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc21)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc21)
      %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s64i>, !s32i loc(#loc87)
      %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc22)
      cir.if %18 {
        %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc24)
        %20 = cir.const #cir.int<1> : !s32i loc(#loc25)
        %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc26)
        cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc24)
      } loc(#loc88)
    } loc(#loc86)
    %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc27)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc28)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc28)
    cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc27)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc29)
    cir.store %12, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc89)
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc89)
    cir.return %13 : !cir.ptr<!s64i> loc(#loc89)
  } loc(#loc80)
  cir.func  @CWE415_Double_Free__malloc_free_int64_t_61b_goodG2BSource(%arg0: !cir.ptr<!s64i> loc(fused[#loc33, #loc34])) -> !cir.ptr<!s64i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc91)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["__retval"] {alignment = 8 : i64} loc(#loc32)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc35)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc36)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc37)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc37)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc92)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc93)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc36)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc94)
    cir.store %8, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc95)
    cir.scope {
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc44)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc45)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc45)
      %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s64i>, !s32i loc(#loc97)
      %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc46)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc48)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc49)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc50)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc48)
      } loc(#loc98)
    } loc(#loc96)
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc51)
    cir.store %9, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc99)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc99)
    cir.return %10 : !cir.ptr<!s64i> loc(#loc99)
  } loc(#loc90)
  cir.func  @CWE415_Double_Free__malloc_free_int64_t_61b_goodB2GSource(%arg0: !cir.ptr<!s64i> loc(fused[#loc55, #loc56])) -> !cir.ptr<!s64i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc101)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["__retval"] {alignment = 8 : i64} loc(#loc54)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc57)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc58)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc59)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc59)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc102)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc103)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc58)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc104)
    cir.store %8, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc105)
    cir.scope {
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc66)
      %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc67)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc67)
      %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s64i>, !s32i loc(#loc107)
      %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc68)
      cir.if %18 {
        %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc70)
        %20 = cir.const #cir.int<1> : !s32i loc(#loc71)
        %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc72)
        cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc70)
      } loc(#loc108)
    } loc(#loc106)
    %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc73)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc74)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc74)
    cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc73)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc75)
    cir.store %12, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc109)
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc109)
    cir.return %13 : !cir.ptr<!s64i> loc(#loc109)
  } loc(#loc100)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_61b.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/stdlib.h":687:1)
#loc6 = loc("/usr/include/stdlib.h":687:32)
#loc7 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":24:1)
#loc8 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":31:1)
#loc11 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":25:1)
#loc12 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":26:23)
#loc13 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":26:30)
#loc14 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":26:34)
#loc15 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":26:48)
#loc16 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":26:49)
#loc17 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":26:5)
#loc18 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":27:5)
#loc19 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":27:33)
#loc20 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":27:9)
#loc21 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":27:17)
#loc22 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":27:14)
#loc23 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":27:23)
#loc24 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":27:24)
#loc25 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":27:30)
#loc26 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":27:29)
#loc27 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":29:5)
#loc28 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":29:10)
#loc29 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":30:12)
#loc30 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":30:5)
#loc31 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":38:1)
#loc32 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":44:1)
#loc35 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":39:1)
#loc36 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":40:23)
#loc37 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":40:30)
#loc38 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":40:34)
#loc39 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":40:48)
#loc40 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":40:49)
#loc41 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":40:5)
#loc42 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":41:5)
#loc43 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":41:33)
#loc44 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":41:9)
#loc45 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":41:17)
#loc46 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":41:14)
#loc47 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":41:23)
#loc48 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":41:24)
#loc49 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":41:30)
#loc50 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":41:29)
#loc51 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":43:12)
#loc52 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":43:5)
#loc53 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":47:1)
#loc54 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":54:1)
#loc57 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":48:1)
#loc58 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":49:23)
#loc59 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":49:30)
#loc60 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":49:34)
#loc61 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":49:48)
#loc62 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":49:49)
#loc63 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":49:5)
#loc64 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":50:5)
#loc65 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":50:33)
#loc66 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":50:9)
#loc67 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":50:17)
#loc68 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":50:14)
#loc69 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":50:23)
#loc70 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":50:24)
#loc71 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":50:30)
#loc72 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":50:29)
#loc73 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":52:5)
#loc74 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":52:10)
#loc75 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":53:12)
#loc76 = loc("CWE415_Double_Free__malloc_free_int64_t_61b.c":53:5)
#loc77 = loc(fused[#loc1, #loc2])
#loc78 = loc(fused[#loc3, #loc4])
#loc79 = loc(fused[#loc5, #loc6])
#loc80 = loc(fused[#loc7, #loc8])
#loc82 = loc(fused[#loc14, #loc15])
#loc83 = loc(fused[#loc13, #loc15])
#loc84 = loc(fused[#loc12, #loc16])
#loc85 = loc(fused[#loc17, #loc16])
#loc86 = loc(fused[#loc18, #loc19])
#loc87 = loc(fused[#loc20, #loc21])
#loc88 = loc(fused[#loc23, #loc19])
#loc89 = loc(fused[#loc30, #loc29])
#loc90 = loc(fused[#loc31, #loc32])
#loc92 = loc(fused[#loc38, #loc39])
#loc93 = loc(fused[#loc37, #loc39])
#loc94 = loc(fused[#loc36, #loc40])
#loc95 = loc(fused[#loc41, #loc40])
#loc96 = loc(fused[#loc42, #loc43])
#loc97 = loc(fused[#loc44, #loc45])
#loc98 = loc(fused[#loc47, #loc43])
#loc99 = loc(fused[#loc52, #loc51])
#loc100 = loc(fused[#loc53, #loc54])
#loc102 = loc(fused[#loc60, #loc61])
#loc103 = loc(fused[#loc59, #loc61])
#loc104 = loc(fused[#loc58, #loc62])
#loc105 = loc(fused[#loc63, #loc62])
#loc106 = loc(fused[#loc64, #loc65])
#loc107 = loc(fused[#loc66, #loc67])
#loc108 = loc(fused[#loc69, #loc65])
#loc109 = loc(fused[#loc76, #loc75])
