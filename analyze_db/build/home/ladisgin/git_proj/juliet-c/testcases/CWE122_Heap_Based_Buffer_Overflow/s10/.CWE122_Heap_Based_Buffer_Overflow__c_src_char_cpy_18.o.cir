!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc99)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc100)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc101)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc102)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc103)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc105)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc106)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc17)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc18)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc18)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc107)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc108)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc17)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc109)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc110)
    cir.br ^bb1 loc(#loc111)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc26)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc26)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc112)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc113)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc28)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc30)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
    cir.br ^bb3 loc(#loc24)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc24)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc114)
  ^bb5:  // pred: ^bb4
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc33)
    %18 = cir.const #cir.int<65> : !s32i loc(#loc34)
    %19 = cir.const #cir.int<100> : !s32i loc(#loc35)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc35)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc35)
    cir.libc.memset %22 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc115)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc39)
    %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc39)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
    %26 = cir.const #cir.int<100> : !s32i loc(#loc41)
    %27 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %28 = cir.binop(sub, %26, %27) nsw : !s32i loc(#loc41)
    %29 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %28 : !s32i), !cir.ptr<!s8i> loc(#loc43)
    cir.store %24, %29 : !s8i, !cir.ptr<!s8i> loc(#loc116)
    cir.br ^bb6 loc(#loc117)
  ^bb6:  // pred: ^bb5
    %30 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc105)
    cir.store %30, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc105)
    %31 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc46)
    %32 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc47)
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
    %34 = cir.call @strcpy(%32, %33) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc46)
    %35 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%35) : (!cir.ptr<!s8i>) -> () loc(#loc50)
    %36 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc51)
    %37 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
    %38 = cir.cast(bitcast, %37 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc52)
    cir.call @free(%38) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc51)
    cir.br ^bb7 loc(#loc45)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc12)
  } loc(#loc104)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc119)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc55)
    cir.return loc(#loc54)
  } loc(#loc118)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc121)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc122)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc63)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc64)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc64)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc123)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc124)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc63)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc125)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc126)
    cir.br ^bb1 loc(#loc127)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc71)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc72)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc72)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc128)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc129)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc74)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc76)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc74)
    cir.br ^bb3 loc(#loc70)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc70)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc130)
  ^bb5:  // pred: ^bb4
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc79)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc79)
    %18 = cir.const #cir.int<65> : !s32i loc(#loc80)
    %19 = cir.const #cir.int<50> : !s32i loc(#loc81)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc81)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc81)
    cir.libc.memset %22 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc131)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc85)
    %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc85)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc86)
    %26 = cir.const #cir.int<50> : !s32i loc(#loc87)
    %27 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %28 = cir.binop(sub, %26, %27) nsw : !s32i loc(#loc87)
    %29 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %28 : !s32i), !cir.ptr<!s8i> loc(#loc89)
    cir.store %24, %29 : !s8i, !cir.ptr<!s8i> loc(#loc132)
    cir.br ^bb6 loc(#loc133)
  ^bb6:  // pred: ^bb5
    %30 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc121)
    cir.store %30, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc121)
    %31 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc92)
    %32 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc93)
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc94)
    %34 = cir.call @strcpy(%32, %33) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc92)
    %35 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc95)
    cir.call @printLine(%35) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    %36 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc97)
    %37 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc98)
    %38 = cir.cast(bitcast, %37 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc98)
    cir.call @free(%38) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc97)
    cir.br ^bb7 loc(#loc91)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc58)
  } loc(#loc120)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":141:1)
#loc6 = loc("/usr/include/string.h":142:14)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":23:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":40:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":34:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":34:25)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":25:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":25:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":26:20)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":26:27)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":26:31)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":26:42)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":26:43)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":26:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":27:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":27:33)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":27:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":27:17)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":27:23)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":27:24)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":27:30)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":27:29)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":28:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":28:10)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":31:12)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":31:18)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":31:23)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":31:27)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":31:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":31:28)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":32:19)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":32:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":32:10)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":32:14)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":32:15)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":33:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":39:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":36:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":36:16)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":36:22)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":37:19)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":37:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":38:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":38:14)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":66:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":69:1)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":68:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":68:13)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":47:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":64:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":58:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":58:25)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":49:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":49:12)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":50:20)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":50:27)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":50:31)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":50:42)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":50:43)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":50:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":51:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":51:33)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":51:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":51:17)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":51:23)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":51:24)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":51:30)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":51:29)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":52:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":52:10)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":55:12)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":55:18)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":55:23)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":55:26)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":55:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":55:27)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":56:18)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":56:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":56:10)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":56:13)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":56:14)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":57:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":63:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":60:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":60:16)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":60:22)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":61:19)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":61:9)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":62:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c":62:14)
#loc99 = loc(fused[#loc1, #loc2])
#loc100 = loc(fused[#loc3, #loc4])
#loc101 = loc(fused[#loc5, #loc6])
#loc102 = loc(fused[#loc7, #loc8])
#loc103 = loc(fused[#loc9, #loc10])
#loc104 = loc(fused[#loc11, #loc12])
#loc105 = loc(fused[#loc13, #loc14])
#loc106 = loc(fused[#loc15, #loc16])
#loc107 = loc(fused[#loc19, #loc20])
#loc108 = loc(fused[#loc18, #loc20])
#loc109 = loc(fused[#loc17, #loc21])
#loc110 = loc(fused[#loc22, #loc21])
#loc111 = loc(fused[#loc23, #loc24])
#loc112 = loc(fused[#loc25, #loc26])
#loc113 = loc(fused[#loc27, #loc24])
#loc114 = loc(fused[#loc31, #loc32])
#loc115 = loc(fused[#loc37, #loc38])
#loc116 = loc(fused[#loc40, #loc39])
#loc117 = loc(fused[#loc44, #loc45])
#loc118 = loc(fused[#loc53, #loc54])
#loc119 = loc(fused[#loc55, #loc56])
#loc120 = loc(fused[#loc57, #loc58])
#loc121 = loc(fused[#loc59, #loc60])
#loc122 = loc(fused[#loc61, #loc62])
#loc123 = loc(fused[#loc65, #loc66])
#loc124 = loc(fused[#loc64, #loc66])
#loc125 = loc(fused[#loc63, #loc67])
#loc126 = loc(fused[#loc68, #loc67])
#loc127 = loc(fused[#loc69, #loc70])
#loc128 = loc(fused[#loc71, #loc72])
#loc129 = loc(fused[#loc73, #loc70])
#loc130 = loc(fused[#loc77, #loc78])
#loc131 = loc(fused[#loc83, #loc84])
#loc132 = loc(fused[#loc86, #loc85])
#loc133 = loc(fused[#loc90, #loc91])
