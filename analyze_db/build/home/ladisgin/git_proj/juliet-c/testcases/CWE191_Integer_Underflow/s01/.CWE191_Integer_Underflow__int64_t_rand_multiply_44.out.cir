!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":22:21)
#loc6 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":22:29)
#loc50 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":111:10)
#loc51 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":111:14)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":111:20)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":111:32)
#loc70 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":49:25)
#loc71 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":49:33)
#loc99 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":70:25)
#loc100 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":70:33)
#loc136 = loc(fused[#loc5, #loc6])
#loc154 = loc(fused[#loc50, #loc51])
#loc155 = loc(fused[#loc52, #loc53])
#loc160 = loc(fused[#loc70, #loc71])
#loc171 = loc(fused[#loc99, #loc100])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_rand_multiply_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printLongLongLine(!s64i) loc(#loc134)
  cir.func internal private @badSink(%arg0: !s64i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc136)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc7)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc10)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
      %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc11)
      %4 = cir.cmp(lt, %1, %3) : !s64i, !cir.bool loc(#loc138)
      cir.if %4 {
        %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc140)
        %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc15)
        %7 = cir.const #cir.int<2> : !s32i loc(#loc14)
        %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc14)
        %9 = cir.binop(mul, %6, %8) nsw : !s64i loc(#loc15)
        cir.store %9, %5 : !s64i, !cir.ptr<!s64i> loc(#loc140)
        %10 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc16)
        cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc17)
      } loc(#loc139)
    } loc(#loc137)
    cir.return loc(#loc4)
  } loc(#loc135)
  cir.func private @rand() -> !s32i extra(#fn_attr1) loc(#loc141)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_multiply_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc143)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc144)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc25)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>> loc(#loc144)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc26)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc145)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc28)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc28)
    %8 = cir.ternary(%7, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc28)
      %14 = cir.const #cir.int<60> : !s32i loc(#loc28)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc28)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
      %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc28)
      %18 = cir.const #cir.int<45> : !s32i loc(#loc28)
      %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc28)
      %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc28)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc28)
      %23 = cir.const #cir.int<30> : !s32i loc(#loc28)
      %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc28)
      %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc28)
      %26 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
      %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc28)
      %28 = cir.const #cir.int<15> : !s32i loc(#loc28)
      %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc28)
      %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc28)
      %31 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc28)
      %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc28)
      cir.yield %33 : !u64i loc(#loc28)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc28)
      %14 = cir.const #cir.int<60> : !s32i loc(#loc28)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc28)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
      %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc28)
      %18 = cir.const #cir.int<45> : !s32i loc(#loc28)
      %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc28)
      %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc28)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc28)
      %23 = cir.const #cir.int<30> : !s32i loc(#loc28)
      %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc28)
      %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc28)
      %26 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
      %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc28)
      %28 = cir.const #cir.int<15> : !s32i loc(#loc28)
      %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc28)
      %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc28)
      %31 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc28)
      %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc28)
      %34 = cir.unary(minus, %33) : !u64i, !u64i loc(#loc28)
      %35 = cir.const #cir.int<1> : !s32i loc(#loc28)
      %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc28)
      %37 = cir.binop(sub, %34, %36) : !u64i loc(#loc28)
      cir.yield %37 : !u64i loc(#loc28)
    }) : (!cir.bool) -> !u64i loc(#loc28)
    %9 = cir.cast(integral, %8 : !u64i), !s64i loc(#loc28)
    cir.store %9, %0 : !s64i, !cir.ptr<!s64i> loc(#loc146)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc30)
    %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc31)
    cir.call %10(%11) : (!cir.ptr<!cir.func<!void (!s64i)>>, !s64i) -> () loc(#loc30)
    cir.return loc(#loc21)
  } loc(#loc142)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_multiply_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc148)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc149)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc33)
  } loc(#loc147)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc150)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc151)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc152)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc47)
  cir.func @main(%arg0: !s32i loc(fused[#loc50, #loc51]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc52, #loc53])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc154)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc155)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc49)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc54)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc54)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc55)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc56)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc56)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc57)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc44)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %8 = cir.get_global @CWE191_Integer_Underflow__int64_t_rand_multiply_44_good : !cir.ptr<!cir.func<!void ()>> loc(#loc156)
    cir.call @CWE191_Integer_Underflow__int64_t_rand_multiply_44_good() : () -> () loc(#loc59)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc45)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc46)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %13 = cir.get_global @CWE191_Integer_Underflow__int64_t_rand_multiply_44_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc157)
    cir.call @CWE191_Integer_Underflow__int64_t_rand_multiply_44_bad() : () -> () loc(#loc63)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc47)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc66)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc158)
    cir.return %17 : !s32i loc(#loc158)
  } loc(#loc153)
  cir.func internal private @goodG2BSink(%arg0: !s64i loc(fused[#loc70, #loc71])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc160)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc72)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc75)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc76)
      %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc76)
      %4 = cir.cmp(lt, %1, %3) : !s64i, !cir.bool loc(#loc162)
      cir.if %4 {
        %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc164)
        %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc80)
        %7 = cir.const #cir.int<2> : !s32i loc(#loc79)
        %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc79)
        %9 = cir.binop(mul, %6, %8) nsw : !s64i loc(#loc80)
        cir.store %9, %5 : !s64i, !cir.ptr<!s64i> loc(#loc164)
        %10 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc81)
        cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc82)
      } loc(#loc163)
    } loc(#loc161)
    cir.return loc(#loc69)
  } loc(#loc159)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc166)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc167)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc88)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>> loc(#loc167)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc89)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc168)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc91)
    %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc92)
    %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc92)
    cir.store %6, %0 : !s64i, !cir.ptr<!s64i> loc(#loc169)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc94)
    %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc95)
    cir.call %7(%8) : (!cir.ptr<!cir.func<!void (!s64i)>>, !s64i) -> () loc(#loc94)
    cir.return loc(#loc84)
  } loc(#loc165)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc96)
  cir.func internal private @goodB2GSink(%arg0: !s64i loc(fused[#loc99, #loc100])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc171)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc101)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc104)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc105)
      %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc105)
      %4 = cir.cmp(lt, %1, %3) : !s64i, !cir.bool loc(#loc173)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc109)
          %6 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc110)
          %7 = cir.unary(minus, %6) : !s64i, !s64i loc(#loc110)
          %8 = cir.const #cir.int<1> : !s64i loc(#loc110)
          %9 = cir.binop(sub, %7, %8) nsw : !s64i loc(#loc110)
          %10 = cir.const #cir.int<2> : !s32i loc(#loc111)
          %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc111)
          %12 = cir.binop(div, %9, %11) : !s64i loc(#loc176)
          %13 = cir.cmp(gt, %5, %12) : !s64i, !cir.bool loc(#loc177)
          cir.if %13 {
            %14 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc179)
            %15 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc118)
            %16 = cir.const #cir.int<2> : !s32i loc(#loc117)
            %17 = cir.cast(integral, %16 : !s32i), !s64i loc(#loc117)
            %18 = cir.binop(mul, %15, %17) nsw : !s64i loc(#loc118)
            cir.store %18, %14 : !s64i, !cir.ptr<!s64i> loc(#loc179)
            %19 = cir.load %14 : !cir.ptr<!s64i>, !s64i loc(#loc119)
            cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc120)
          } else {
            %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc96)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc96)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc121)
          } loc(#loc178)
        } loc(#loc175)
      } loc(#loc174)
    } loc(#loc172)
    cir.return loc(#loc98)
  } loc(#loc170)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc181)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc182)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc127)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>> loc(#loc182)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc128)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc183)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc130)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc130)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc130)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc130)
    %8 = cir.ternary(%7, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc130)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc130)
      %14 = cir.const #cir.int<60> : !s32i loc(#loc130)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc130)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc130)
      %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc130)
      %18 = cir.const #cir.int<45> : !s32i loc(#loc130)
      %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc130)
      %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc130)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc130)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc130)
      %23 = cir.const #cir.int<30> : !s32i loc(#loc130)
      %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc130)
      %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc130)
      %26 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc130)
      %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc130)
      %28 = cir.const #cir.int<15> : !s32i loc(#loc130)
      %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc130)
      %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc130)
      %31 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc130)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc130)
      %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc130)
      cir.yield %33 : !u64i loc(#loc130)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc130)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc130)
      %14 = cir.const #cir.int<60> : !s32i loc(#loc130)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc130)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc130)
      %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc130)
      %18 = cir.const #cir.int<45> : !s32i loc(#loc130)
      %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc130)
      %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc130)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc130)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc130)
      %23 = cir.const #cir.int<30> : !s32i loc(#loc130)
      %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc130)
      %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc130)
      %26 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc130)
      %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc130)
      %28 = cir.const #cir.int<15> : !s32i loc(#loc130)
      %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc130)
      %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc130)
      %31 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc130)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc130)
      %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc130)
      %34 = cir.unary(minus, %33) : !u64i, !u64i loc(#loc130)
      %35 = cir.const #cir.int<1> : !s32i loc(#loc130)
      %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc130)
      %37 = cir.binop(sub, %34, %36) : !u64i loc(#loc130)
      cir.yield %37 : !u64i loc(#loc130)
    }) : (!cir.bool) -> !u64i loc(#loc130)
    %9 = cir.cast(integral, %8 : !u64i), !s64i loc(#loc130)
    cir.store %9, %0 : !s64i, !cir.ptr<!s64i> loc(#loc184)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc132)
    %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc133)
    cir.call %10(%11) : (!cir.ptr<!cir.func<!void (!s64i)>>, !s64i) -> () loc(#loc132)
    cir.return loc(#loc123)
  } loc(#loc180)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":30:1)
#loc7 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":23:1)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":24:5)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":29:5)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":24:8)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":24:15)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":25:5)
#loc13 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":27:9)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":27:33)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":27:26)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":28:27)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":28:9)
#loc18 = loc("/usr/include/stdlib.h":573:1)
#loc19 = loc("/usr/include/stdlib.h":573:24)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":32:1)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":42:1)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":34:5)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":34:13)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":36:5)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":36:33)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":37:12)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":37:5)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":39:21)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":39:5)
#loc30 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":41:5)
#loc31 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":41:13)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":97:1)
#loc33 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":101:1)
#loc34 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":99:5)
#loc35 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":99:13)
#loc36 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":100:5)
#loc37 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":100:13)
#loc38 = loc("/usr/include/stdlib.h":575:1)
#loc39 = loc("/usr/include/stdlib.h":575:41)
#loc40 = loc("/usr/include/time.h":76:1)
#loc41 = loc("/usr/include/time.h":76:38)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":116:15)
#loc45 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":118:15)
#loc46 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":121:15)
#loc47 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":123:15)
#loc48 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":111:1)
#loc49 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":126:1)
#loc54 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":112:1)
#loc55 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":114:27)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":114:22)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":114:5)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":116:5)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":117:5)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":117:61)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":118:5)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":121:5)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":122:5)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":122:60)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":123:5)
#loc66 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":125:12)
#loc67 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":125:5)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":49:1)
#loc69 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":57:1)
#loc72 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":50:1)
#loc73 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":51:5)
#loc74 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":56:5)
#loc75 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":51:8)
#loc76 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":51:15)
#loc77 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":52:5)
#loc78 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":54:9)
#loc79 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":54:33)
#loc80 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":54:26)
#loc81 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":55:27)
#loc82 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":55:9)
#loc83 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":59:1)
#loc84 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":67:1)
#loc85 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":61:5)
#loc86 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":61:13)
#loc87 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":62:5)
#loc88 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":62:33)
#loc89 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":63:12)
#loc90 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":63:5)
#loc91 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":65:13)
#loc92 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":65:12)
#loc93 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":65:5)
#loc94 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":66:5)
#loc95 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":66:13)
#loc96 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":82:23)
#loc97 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":70:1)
#loc98 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":85:1)
#loc101 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":71:1)
#loc102 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":72:5)
#loc103 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":84:5)
#loc104 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":72:8)
#loc105 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":72:15)
#loc106 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":73:5)
#loc107 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":75:9)
#loc108 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":83:9)
#loc109 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":75:13)
#loc110 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":75:21)
#loc111 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":75:31)
#loc112 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":75:32)
#loc113 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":76:9)
#loc114 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":79:9)
#loc115 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":81:9)
#loc116 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":77:13)
#loc117 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":77:37)
#loc118 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":77:30)
#loc119 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":78:31)
#loc120 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":78:13)
#loc121 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":82:13)
#loc122 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":87:1)
#loc123 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":95:1)
#loc124 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":89:5)
#loc125 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":89:13)
#loc126 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":90:5)
#loc127 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":90:33)
#loc128 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":91:12)
#loc129 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":91:5)
#loc130 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":93:21)
#loc131 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":93:5)
#loc132 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":94:5)
#loc133 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_44.c":94:13)
#loc134 = loc(fused[#loc1, #loc2])
#loc135 = loc(fused[#loc3, #loc4])
#loc137 = loc(fused[#loc8, #loc9])
#loc138 = loc(fused[#loc10, #loc11])
#loc139 = loc(fused[#loc12, #loc9])
#loc140 = loc(fused[#loc13, #loc14])
#loc141 = loc(fused[#loc18, #loc19])
#loc142 = loc(fused[#loc20, #loc21])
#loc143 = loc(fused[#loc22, #loc23])
#loc144 = loc(fused[#loc24, #loc25])
#loc145 = loc(fused[#loc27, #loc26])
#loc146 = loc(fused[#loc29, #loc28])
#loc147 = loc(fused[#loc32, #loc33])
#loc148 = loc(fused[#loc34, #loc35])
#loc149 = loc(fused[#loc36, #loc37])
#loc150 = loc(fused[#loc38, #loc39])
#loc151 = loc(fused[#loc40, #loc41])
#loc152 = loc(fused[#loc42, #loc43])
#loc153 = loc(fused[#loc48, #loc49])
#loc156 = loc(fused[#loc59, #loc60])
#loc157 = loc(fused[#loc63, #loc64])
#loc158 = loc(fused[#loc67, #loc66])
#loc159 = loc(fused[#loc68, #loc69])
#loc161 = loc(fused[#loc73, #loc74])
#loc162 = loc(fused[#loc75, #loc76])
#loc163 = loc(fused[#loc77, #loc74])
#loc164 = loc(fused[#loc78, #loc79])
#loc165 = loc(fused[#loc83, #loc84])
#loc166 = loc(fused[#loc85, #loc86])
#loc167 = loc(fused[#loc87, #loc88])
#loc168 = loc(fused[#loc90, #loc89])
#loc169 = loc(fused[#loc93, #loc91])
#loc170 = loc(fused[#loc97, #loc98])
#loc172 = loc(fused[#loc102, #loc103])
#loc173 = loc(fused[#loc104, #loc105])
#loc174 = loc(fused[#loc106, #loc103])
#loc175 = loc(fused[#loc107, #loc108])
#loc176 = loc(fused[#loc110, #loc111])
#loc177 = loc(fused[#loc109, #loc112])
#loc178 = loc(fused[#loc113, #loc114, #loc115, #loc108])
#loc179 = loc(fused[#loc116, #loc117])
#loc180 = loc(fused[#loc122, #loc123])
#loc181 = loc(fused[#loc124, #loc125])
#loc182 = loc(fused[#loc126, #loc127])
#loc183 = loc(fused[#loc129, #loc128])
#loc184 = loc(fused[#loc131, #loc130])
