!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc157)
  cir.func private @printIntLine(!s32i) loc(#loc158)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc159)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE369_Divide_by_Zero__float_zero_12_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc161)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc162)
    %2 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc163)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc16)
    cir.store %3, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc164)
    cir.br ^bb1 loc(#loc165)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc166)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc166)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc20)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc167)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc25)
    cir.store %8, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc168)
    cir.br ^bb4 loc(#loc23)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc27)
    cir.store %9, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc169)
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc19)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc170)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc171)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc171)
    %12 = cir.call %11() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc31)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc31)
    cir.brcond %13 ^bb7, ^bb10 loc(#loc172)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc173)
  ^bb8:  // pred: ^bb7
    %14 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc38)
    %15 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc39)
    %16 = cir.cast(floating, %15 : !cir.float), !cir.double loc(#loc39)
    %17 = cir.binop(div, %14, %16) : !cir.double loc(#loc174)
    %18 = cir.cast(float_to_int, %17 : !cir.double), !s32i loc(#loc174)
    cir.store %18, %0 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc40)
    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc41)
    cir.br ^bb9 loc(#loc37)
  ^bb9:  // pred: ^bb8
    cir.br ^bb16 loc(#loc34)
  ^bb10:  // pred: ^bb6
    cir.br ^bb11 loc(#loc175)
  ^bb11:  // pred: ^bb10
    %20 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc44)
    %21 = cir.cast(floating, %20 : !cir.float), !cir.double loc(#loc44)
    %22 = cir.fabs %21 : !cir.double loc(#loc44)
    %23 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc45)
    %24 = cir.cmp(gt, %22, %23) : !cir.double, !cir.bool loc(#loc176)
    cir.brcond %24 ^bb12, ^bb13 loc(#loc177)
  ^bb12:  // pred: ^bb11
    %25 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc50)
    %26 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc51)
    %27 = cir.cast(floating, %26 : !cir.float), !cir.double loc(#loc51)
    %28 = cir.binop(div, %25, %27) : !cir.double loc(#loc178)
    %29 = cir.cast(float_to_int, %28 : !cir.double), !s32i loc(#loc178)
    cir.store %29, %1 : !s32i, !cir.ptr<!s32i> loc(#loc162)
    %30 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc52)
    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc53)
    cir.br ^bb14 loc(#loc48)
  ^bb13:  // pred: ^bb11
    %31 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc7)
    %32 = cir.cast(array_to_ptrdecay, %31 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    cir.br ^bb14 loc(#loc43)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc43)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc30)
  ^bb16:  // 2 preds: ^bb9, ^bb15
    cir.br ^bb17 loc(#loc30)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc9)
  } loc(#loc160)
  cir.func no_proto @CWE369_Divide_by_Zero__float_zero_12_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc180)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc57)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc181)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc59)
    cir.return loc(#loc56)
  } loc(#loc179)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc183)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc184)
    %2 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc185)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc69)
    cir.store %3, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc186)
    cir.br ^bb1 loc(#loc187)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc188)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc188)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc73)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc73)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc189)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc78)
    cir.store %8, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc190)
    cir.br ^bb4 loc(#loc76)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc80)
    cir.store %9, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc191)
    cir.br ^bb4 loc(#loc72)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc72)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc192)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc193)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc193)
    %12 = cir.call %11() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc84)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc84)
    cir.brcond %13 ^bb7, ^bb13 loc(#loc194)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc195)
  ^bb8:  // pred: ^bb7
    %14 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc91)
    %15 = cir.cast(floating, %14 : !cir.float), !cir.double loc(#loc91)
    %16 = cir.fabs %15 : !cir.double loc(#loc91)
    %17 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc92)
    %18 = cir.cmp(gt, %16, %17) : !cir.double, !cir.bool loc(#loc196)
    cir.brcond %18 ^bb9, ^bb10 loc(#loc197)
  ^bb9:  // pred: ^bb8
    %19 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc97)
    %20 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc98)
    %21 = cir.cast(floating, %20 : !cir.float), !cir.double loc(#loc98)
    %22 = cir.binop(div, %19, %21) : !cir.double loc(#loc198)
    %23 = cir.cast(float_to_int, %22 : !cir.double), !s32i loc(#loc198)
    cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc99)
    cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc100)
    cir.br ^bb11 loc(#loc95)
  ^bb10:  // pred: ^bb8
    %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc101)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc101)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc102)
    cir.br ^bb11 loc(#loc90)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc90)
  ^bb12:  // pred: ^bb11
    cir.br ^bb19 loc(#loc87)
  ^bb13:  // pred: ^bb6
    cir.br ^bb14 loc(#loc199)
  ^bb14:  // pred: ^bb13
    %27 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc105)
    %28 = cir.cast(floating, %27 : !cir.float), !cir.double loc(#loc105)
    %29 = cir.fabs %28 : !cir.double loc(#loc105)
    %30 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc106)
    %31 = cir.cmp(gt, %29, %30) : !cir.double, !cir.bool loc(#loc200)
    cir.brcond %31 ^bb15, ^bb16 loc(#loc201)
  ^bb15:  // pred: ^bb14
    %32 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc111)
    %33 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc112)
    %34 = cir.cast(floating, %33 : !cir.float), !cir.double loc(#loc112)
    %35 = cir.binop(div, %32, %34) : !cir.double loc(#loc202)
    %36 = cir.cast(float_to_int, %35 : !cir.double), !s32i loc(#loc202)
    cir.store %36, %1 : !s32i, !cir.ptr<!s32i> loc(#loc184)
    %37 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    cir.call @printIntLine(%37) : (!s32i) -> () loc(#loc114)
    cir.br ^bb17 loc(#loc109)
  ^bb16:  // pred: ^bb14
    %38 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc115)
    %39 = cir.cast(array_to_ptrdecay, %38 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc115)
    cir.call @printLine(%39) : (!cir.ptr<!s8i>) -> () loc(#loc116)
    cir.br ^bb17 loc(#loc104)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc104)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc83)
  ^bb19:  // 2 preds: ^bb12, ^bb18
    cir.br ^bb20 loc(#loc83)
  ^bb20:  // pred: ^bb19
    cir.return loc(#loc62)
  } loc(#loc182)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc204)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc205)
    %2 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc206)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc125)
    cir.store %3, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc207)
    cir.br ^bb1 loc(#loc208)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc209)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc209)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc129)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc129)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc210)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc134)
    cir.store %8, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc211)
    cir.br ^bb4 loc(#loc132)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc136)
    cir.store %9, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc212)
    cir.br ^bb4 loc(#loc128)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc128)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc213)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc214)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc214)
    %12 = cir.call %11() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc140)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc140)
    cir.brcond %13 ^bb7, ^bb10 loc(#loc215)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc216)
  ^bb8:  // pred: ^bb7
    %14 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc147)
    %15 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc148)
    %16 = cir.cast(floating, %15 : !cir.float), !cir.double loc(#loc148)
    %17 = cir.binop(div, %14, %16) : !cir.double loc(#loc217)
    %18 = cir.cast(float_to_int, %17 : !cir.double), !s32i loc(#loc217)
    cir.store %18, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc150)
    cir.br ^bb9 loc(#loc146)
  ^bb9:  // pred: ^bb8
    cir.br ^bb13 loc(#loc143)
  ^bb10:  // pred: ^bb6
    cir.br ^bb11 loc(#loc218)
  ^bb11:  // pred: ^bb10
    %20 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc153)
    %21 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc154)
    %22 = cir.cast(floating, %21 : !cir.float), !cir.double loc(#loc154)
    %23 = cir.binop(div, %20, %22) : !cir.double loc(#loc219)
    %24 = cir.cast(float_to_int, %23 : !cir.double), !s32i loc(#loc219)
    cir.store %24, %1 : !s32i, !cir.ptr<!s32i> loc(#loc205)
    %25 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc155)
    cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc156)
    cir.br ^bb12 loc(#loc152)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc139)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc139)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc118)
  } loc(#loc203)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE369_Divide_by_Zero__float_zero_12.c":57:23)
#loc8 = loc("CWE369_Divide_by_Zero__float_zero_12.c":24:1)
#loc9 = loc("CWE369_Divide_by_Zero__float_zero_12.c":60:1)
#loc10 = loc("CWE369_Divide_by_Zero__float_zero_12.c":43:13)
#loc11 = loc("CWE369_Divide_by_Zero__float_zero_12.c":43:44)
#loc12 = loc("CWE369_Divide_by_Zero__float_zero_12.c":52:13)
#loc13 = loc("CWE369_Divide_by_Zero__float_zero_12.c":52:44)
#loc14 = loc("CWE369_Divide_by_Zero__float_zero_12.c":26:5)
#loc15 = loc("CWE369_Divide_by_Zero__float_zero_12.c":26:11)
#loc16 = loc("CWE369_Divide_by_Zero__float_zero_12.c":28:12)
#loc17 = loc("CWE369_Divide_by_Zero__float_zero_12.c":28:5)
#loc18 = loc("CWE369_Divide_by_Zero__float_zero_12.c":29:5)
#loc19 = loc("CWE369_Divide_by_Zero__float_zero_12.c":38:5)
#loc20 = loc("CWE369_Divide_by_Zero__float_zero_12.c":29:8)
#loc21 = loc("CWE369_Divide_by_Zero__float_zero_12.c":29:33)
#loc22 = loc("CWE369_Divide_by_Zero__float_zero_12.c":30:5)
#loc23 = loc("CWE369_Divide_by_Zero__float_zero_12.c":33:5)
#loc24 = loc("CWE369_Divide_by_Zero__float_zero_12.c":35:5)
#loc25 = loc("CWE369_Divide_by_Zero__float_zero_12.c":32:16)
#loc26 = loc("CWE369_Divide_by_Zero__float_zero_12.c":32:9)
#loc27 = loc("CWE369_Divide_by_Zero__float_zero_12.c":37:16)
#loc28 = loc("CWE369_Divide_by_Zero__float_zero_12.c":37:9)
#loc29 = loc("CWE369_Divide_by_Zero__float_zero_12.c":39:5)
#loc30 = loc("CWE369_Divide_by_Zero__float_zero_12.c":59:5)
#loc31 = loc("CWE369_Divide_by_Zero__float_zero_12.c":39:8)
#loc32 = loc("CWE369_Divide_by_Zero__float_zero_12.c":39:33)
#loc33 = loc("CWE369_Divide_by_Zero__float_zero_12.c":40:5)
#loc34 = loc("CWE369_Divide_by_Zero__float_zero_12.c":46:5)
#loc35 = loc("CWE369_Divide_by_Zero__float_zero_12.c":48:5)
#loc36 = loc("CWE369_Divide_by_Zero__float_zero_12.c":41:9)
#loc37 = loc("CWE369_Divide_by_Zero__float_zero_12.c":45:9)
#loc38 = loc("CWE369_Divide_by_Zero__float_zero_12.c":43:32)
#loc39 = loc("CWE369_Divide_by_Zero__float_zero_12.c":43:40)
#loc40 = loc("CWE369_Divide_by_Zero__float_zero_12.c":44:26)
#loc41 = loc("CWE369_Divide_by_Zero__float_zero_12.c":44:13)
#loc42 = loc("CWE369_Divide_by_Zero__float_zero_12.c":50:9)
#loc43 = loc("CWE369_Divide_by_Zero__float_zero_12.c":58:9)
#loc44 = loc("CWE369_Divide_by_Zero__float_zero_12.c":50:17)
#loc45 = loc("CWE369_Divide_by_Zero__float_zero_12.c":50:25)
#loc46 = loc("CWE369_Divide_by_Zero__float_zero_12.c":50:12)
#loc47 = loc("CWE369_Divide_by_Zero__float_zero_12.c":51:9)
#loc48 = loc("CWE369_Divide_by_Zero__float_zero_12.c":54:9)
#loc49 = loc("CWE369_Divide_by_Zero__float_zero_12.c":56:9)
#loc50 = loc("CWE369_Divide_by_Zero__float_zero_12.c":52:32)
#loc51 = loc("CWE369_Divide_by_Zero__float_zero_12.c":52:40)
#loc52 = loc("CWE369_Divide_by_Zero__float_zero_12.c":53:26)
#loc53 = loc("CWE369_Divide_by_Zero__float_zero_12.c":53:13)
#loc54 = loc("CWE369_Divide_by_Zero__float_zero_12.c":57:13)
#loc55 = loc("CWE369_Divide_by_Zero__float_zero_12.c":148:1)
#loc56 = loc("CWE369_Divide_by_Zero__float_zero_12.c":152:1)
#loc57 = loc("CWE369_Divide_by_Zero__float_zero_12.c":150:5)
#loc58 = loc("CWE369_Divide_by_Zero__float_zero_12.c":150:13)
#loc59 = loc("CWE369_Divide_by_Zero__float_zero_12.c":151:5)
#loc60 = loc("CWE369_Divide_by_Zero__float_zero_12.c":151:13)
#loc61 = loc("CWE369_Divide_by_Zero__float_zero_12.c":69:1)
#loc62 = loc("CWE369_Divide_by_Zero__float_zero_12.c":110:1)
#loc63 = loc("CWE369_Divide_by_Zero__float_zero_12.c":89:13)
#loc64 = loc("CWE369_Divide_by_Zero__float_zero_12.c":89:44)
#loc65 = loc("CWE369_Divide_by_Zero__float_zero_12.c":102:13)
#loc66 = loc("CWE369_Divide_by_Zero__float_zero_12.c":102:44)
#loc67 = loc("CWE369_Divide_by_Zero__float_zero_12.c":71:5)
#loc68 = loc("CWE369_Divide_by_Zero__float_zero_12.c":71:11)
#loc69 = loc("CWE369_Divide_by_Zero__float_zero_12.c":73:12)
#loc70 = loc("CWE369_Divide_by_Zero__float_zero_12.c":73:5)
#loc71 = loc("CWE369_Divide_by_Zero__float_zero_12.c":74:5)
#loc72 = loc("CWE369_Divide_by_Zero__float_zero_12.c":83:5)
#loc73 = loc("CWE369_Divide_by_Zero__float_zero_12.c":74:8)
#loc74 = loc("CWE369_Divide_by_Zero__float_zero_12.c":74:33)
#loc75 = loc("CWE369_Divide_by_Zero__float_zero_12.c":75:5)
#loc76 = loc("CWE369_Divide_by_Zero__float_zero_12.c":78:5)
#loc77 = loc("CWE369_Divide_by_Zero__float_zero_12.c":80:5)
#loc78 = loc("CWE369_Divide_by_Zero__float_zero_12.c":77:16)
#loc79 = loc("CWE369_Divide_by_Zero__float_zero_12.c":77:9)
#loc80 = loc("CWE369_Divide_by_Zero__float_zero_12.c":82:16)
#loc81 = loc("CWE369_Divide_by_Zero__float_zero_12.c":82:9)
#loc82 = loc("CWE369_Divide_by_Zero__float_zero_12.c":84:5)
#loc83 = loc("CWE369_Divide_by_Zero__float_zero_12.c":109:5)
#loc84 = loc("CWE369_Divide_by_Zero__float_zero_12.c":84:8)
#loc85 = loc("CWE369_Divide_by_Zero__float_zero_12.c":84:33)
#loc86 = loc("CWE369_Divide_by_Zero__float_zero_12.c":85:5)
#loc87 = loc("CWE369_Divide_by_Zero__float_zero_12.c":96:5)
#loc88 = loc("CWE369_Divide_by_Zero__float_zero_12.c":98:5)
#loc89 = loc("CWE369_Divide_by_Zero__float_zero_12.c":87:9)
#loc90 = loc("CWE369_Divide_by_Zero__float_zero_12.c":95:9)
#loc91 = loc("CWE369_Divide_by_Zero__float_zero_12.c":87:17)
#loc92 = loc("CWE369_Divide_by_Zero__float_zero_12.c":87:25)
#loc93 = loc("CWE369_Divide_by_Zero__float_zero_12.c":87:12)
#loc94 = loc("CWE369_Divide_by_Zero__float_zero_12.c":88:9)
#loc95 = loc("CWE369_Divide_by_Zero__float_zero_12.c":91:9)
#loc96 = loc("CWE369_Divide_by_Zero__float_zero_12.c":93:9)
#loc97 = loc("CWE369_Divide_by_Zero__float_zero_12.c":89:32)
#loc98 = loc("CWE369_Divide_by_Zero__float_zero_12.c":89:40)
#loc99 = loc("CWE369_Divide_by_Zero__float_zero_12.c":90:26)
#loc100 = loc("CWE369_Divide_by_Zero__float_zero_12.c":90:13)
#loc101 = loc("CWE369_Divide_by_Zero__float_zero_12.c":94:23)
#loc102 = loc("CWE369_Divide_by_Zero__float_zero_12.c":94:13)
#loc103 = loc("CWE369_Divide_by_Zero__float_zero_12.c":100:9)
#loc104 = loc("CWE369_Divide_by_Zero__float_zero_12.c":108:9)
#loc105 = loc("CWE369_Divide_by_Zero__float_zero_12.c":100:17)
#loc106 = loc("CWE369_Divide_by_Zero__float_zero_12.c":100:25)
#loc107 = loc("CWE369_Divide_by_Zero__float_zero_12.c":100:12)
#loc108 = loc("CWE369_Divide_by_Zero__float_zero_12.c":101:9)
#loc109 = loc("CWE369_Divide_by_Zero__float_zero_12.c":104:9)
#loc110 = loc("CWE369_Divide_by_Zero__float_zero_12.c":106:9)
#loc111 = loc("CWE369_Divide_by_Zero__float_zero_12.c":102:32)
#loc112 = loc("CWE369_Divide_by_Zero__float_zero_12.c":102:40)
#loc113 = loc("CWE369_Divide_by_Zero__float_zero_12.c":103:26)
#loc114 = loc("CWE369_Divide_by_Zero__float_zero_12.c":103:13)
#loc115 = loc("CWE369_Divide_by_Zero__float_zero_12.c":107:23)
#loc116 = loc("CWE369_Divide_by_Zero__float_zero_12.c":107:13)
#loc117 = loc("CWE369_Divide_by_Zero__float_zero_12.c":115:1)
#loc118 = loc("CWE369_Divide_by_Zero__float_zero_12.c":146:1)
#loc119 = loc("CWE369_Divide_by_Zero__float_zero_12.c":134:13)
#loc120 = loc("CWE369_Divide_by_Zero__float_zero_12.c":134:44)
#loc121 = loc("CWE369_Divide_by_Zero__float_zero_12.c":142:13)
#loc122 = loc("CWE369_Divide_by_Zero__float_zero_12.c":142:44)
#loc123 = loc("CWE369_Divide_by_Zero__float_zero_12.c":117:5)
#loc124 = loc("CWE369_Divide_by_Zero__float_zero_12.c":117:11)
#loc125 = loc("CWE369_Divide_by_Zero__float_zero_12.c":119:12)
#loc126 = loc("CWE369_Divide_by_Zero__float_zero_12.c":119:5)
#loc127 = loc("CWE369_Divide_by_Zero__float_zero_12.c":120:5)
#loc128 = loc("CWE369_Divide_by_Zero__float_zero_12.c":129:5)
#loc129 = loc("CWE369_Divide_by_Zero__float_zero_12.c":120:8)
#loc130 = loc("CWE369_Divide_by_Zero__float_zero_12.c":120:33)
#loc131 = loc("CWE369_Divide_by_Zero__float_zero_12.c":121:5)
#loc132 = loc("CWE369_Divide_by_Zero__float_zero_12.c":124:5)
#loc133 = loc("CWE369_Divide_by_Zero__float_zero_12.c":126:5)
#loc134 = loc("CWE369_Divide_by_Zero__float_zero_12.c":123:16)
#loc135 = loc("CWE369_Divide_by_Zero__float_zero_12.c":123:9)
#loc136 = loc("CWE369_Divide_by_Zero__float_zero_12.c":128:16)
#loc137 = loc("CWE369_Divide_by_Zero__float_zero_12.c":128:9)
#loc138 = loc("CWE369_Divide_by_Zero__float_zero_12.c":130:5)
#loc139 = loc("CWE369_Divide_by_Zero__float_zero_12.c":145:5)
#loc140 = loc("CWE369_Divide_by_Zero__float_zero_12.c":130:8)
#loc141 = loc("CWE369_Divide_by_Zero__float_zero_12.c":130:33)
#loc142 = loc("CWE369_Divide_by_Zero__float_zero_12.c":131:5)
#loc143 = loc("CWE369_Divide_by_Zero__float_zero_12.c":137:5)
#loc144 = loc("CWE369_Divide_by_Zero__float_zero_12.c":139:5)
#loc145 = loc("CWE369_Divide_by_Zero__float_zero_12.c":132:9)
#loc146 = loc("CWE369_Divide_by_Zero__float_zero_12.c":136:9)
#loc147 = loc("CWE369_Divide_by_Zero__float_zero_12.c":134:32)
#loc148 = loc("CWE369_Divide_by_Zero__float_zero_12.c":134:40)
#loc149 = loc("CWE369_Divide_by_Zero__float_zero_12.c":135:26)
#loc150 = loc("CWE369_Divide_by_Zero__float_zero_12.c":135:13)
#loc151 = loc("CWE369_Divide_by_Zero__float_zero_12.c":140:9)
#loc152 = loc("CWE369_Divide_by_Zero__float_zero_12.c":144:9)
#loc153 = loc("CWE369_Divide_by_Zero__float_zero_12.c":142:32)
#loc154 = loc("CWE369_Divide_by_Zero__float_zero_12.c":142:40)
#loc155 = loc("CWE369_Divide_by_Zero__float_zero_12.c":143:26)
#loc156 = loc("CWE369_Divide_by_Zero__float_zero_12.c":143:13)
#loc157 = loc(fused[#loc1, #loc2])
#loc158 = loc(fused[#loc3, #loc4])
#loc159 = loc(fused[#loc5, #loc6])
#loc160 = loc(fused[#loc8, #loc9])
#loc161 = loc(fused[#loc10, #loc11])
#loc162 = loc(fused[#loc12, #loc13])
#loc163 = loc(fused[#loc14, #loc15])
#loc164 = loc(fused[#loc17, #loc16])
#loc165 = loc(fused[#loc18, #loc19])
#loc166 = loc(fused[#loc20, #loc21])
#loc167 = loc(fused[#loc22, #loc23, #loc24, #loc19])
#loc168 = loc(fused[#loc26, #loc25])
#loc169 = loc(fused[#loc28, #loc27])
#loc170 = loc(fused[#loc29, #loc30])
#loc171 = loc(fused[#loc31, #loc32])
#loc172 = loc(fused[#loc33, #loc34, #loc35, #loc30])
#loc173 = loc(fused[#loc36, #loc37])
#loc174 = loc(fused[#loc38, #loc39])
#loc175 = loc(fused[#loc42, #loc43])
#loc176 = loc(fused[#loc46, #loc45])
#loc177 = loc(fused[#loc47, #loc48, #loc49, #loc43])
#loc178 = loc(fused[#loc50, #loc51])
#loc179 = loc(fused[#loc55, #loc56])
#loc180 = loc(fused[#loc57, #loc58])
#loc181 = loc(fused[#loc59, #loc60])
#loc182 = loc(fused[#loc61, #loc62])
#loc183 = loc(fused[#loc63, #loc64])
#loc184 = loc(fused[#loc65, #loc66])
#loc185 = loc(fused[#loc67, #loc68])
#loc186 = loc(fused[#loc70, #loc69])
#loc187 = loc(fused[#loc71, #loc72])
#loc188 = loc(fused[#loc73, #loc74])
#loc189 = loc(fused[#loc75, #loc76, #loc77, #loc72])
#loc190 = loc(fused[#loc79, #loc78])
#loc191 = loc(fused[#loc81, #loc80])
#loc192 = loc(fused[#loc82, #loc83])
#loc193 = loc(fused[#loc84, #loc85])
#loc194 = loc(fused[#loc86, #loc87, #loc88, #loc83])
#loc195 = loc(fused[#loc89, #loc90])
#loc196 = loc(fused[#loc93, #loc92])
#loc197 = loc(fused[#loc94, #loc95, #loc96, #loc90])
#loc198 = loc(fused[#loc97, #loc98])
#loc199 = loc(fused[#loc103, #loc104])
#loc200 = loc(fused[#loc107, #loc106])
#loc201 = loc(fused[#loc108, #loc109, #loc110, #loc104])
#loc202 = loc(fused[#loc111, #loc112])
#loc203 = loc(fused[#loc117, #loc118])
#loc204 = loc(fused[#loc119, #loc120])
#loc205 = loc(fused[#loc121, #loc122])
#loc206 = loc(fused[#loc123, #loc124])
#loc207 = loc(fused[#loc126, #loc125])
#loc208 = loc(fused[#loc127, #loc128])
#loc209 = loc(fused[#loc129, #loc130])
#loc210 = loc(fused[#loc131, #loc132, #loc133, #loc128])
#loc211 = loc(fused[#loc135, #loc134])
#loc212 = loc(fused[#loc137, #loc136])
#loc213 = loc(fused[#loc138, #loc139])
#loc214 = loc(fused[#loc140, #loc141])
#loc215 = loc(fused[#loc142, #loc143, #loc144, #loc139])
#loc216 = loc(fused[#loc145, #loc146])
#loc217 = loc(fused[#loc147, #loc148])
#loc218 = loc(fused[#loc151, #loc152])
#loc219 = loc(fused[#loc153, #loc154])
