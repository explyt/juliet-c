!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc215)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc216)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc217)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc218)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc10)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc219)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc220)
  cir.func private @printIntLine(!s32i) loc(#loc221)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc222)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc224)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc24)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc225)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc28)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc228)
            %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc228)
            cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc228)
            cir.scope {
              %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc36)
              %7 = cir.const #cir.int<3> : !s32i loc(#loc37)
              %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc37)
              %9 = cir.const #cir.int<4> : !u64i loc(#loc37)
              %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc37)
              %11 = cir.const #cir.int<2> : !s32i loc(#loc37)
              %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc37)
              %13 = cir.binop(add, %10, %12) : !u64i loc(#loc37)
              %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc37)
              %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc216)
              %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc38)
              %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc39)
              %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc40)
              %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc40)
              %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc230)
              cir.if %20 {
                %21 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc44)
                %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc45)
                cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc232)
              } else {
                %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
                %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
                cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc48)
              } loc(#loc231)
            } loc(#loc229)
          } loc(#loc227)
          cir.break loc(#loc49)
        } loc(#loc29)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc10)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc10)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc51)
          cir.break loc(#loc52)
        } loc(#loc50)
        cir.yield loc(#loc26)
      } loc(#loc26)
    } loc(#loc226)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc234)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc235)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc59)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc60)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc60)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc236)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc237)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc59)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc238)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc239)
      cir.scope {
        %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc67)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc68)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc68)
        %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc241)
        cir.if %22 {
          %23 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc70)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc71)
          %25 = cir.unary(minus, %24) nsw : !s32i, !s32i loc(#loc72)
          cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc70)
        } loc(#loc242)
      } loc(#loc240)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc75)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc75)
        cir.store %20, %3 : !u64i, !cir.ptr<!u64i> loc(#loc244)
        cir.for : cond {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc77)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc78)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc78)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc245)
          cir.condition(%24) loc(#loc79)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc81)
            %22 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc82)
            %23 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc83)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc84)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc247)
          } loc(#loc246)
          cir.yield loc(#loc74)
        } step {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc85)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc86)
          cir.store %22, %3 : !u64i, !cir.ptr<!u64i> loc(#loc248)
          cir.yield loc(#loc243)
        } loc(#loc243)
      } loc(#loc243)
      %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc87)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc88)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc89)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc87)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc90)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc91)
      %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc92)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc92)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc91)
    } loc(#loc233)
    cir.return loc(#loc20)
  } loc(#loc223)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc250)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc95)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc251)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc97)
    cir.return loc(#loc94)
  } loc(#loc249)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc253)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc103)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc104)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc254)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc108)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc110)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc110)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc111)
          cir.break loc(#loc112)
        } loc(#loc109)
        cir.case(default, []) {
          %4 = cir.const #cir.int<20> : !s32i loc(#loc114)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc256)
          cir.break loc(#loc116)
        } loc(#loc113)
        cir.yield loc(#loc106)
      } loc(#loc106)
    } loc(#loc255)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc258)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc259)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc123)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc124)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc124)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc260)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc261)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc123)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc262)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc263)
      cir.scope {
        %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc131)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc132)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc132)
        %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc265)
        cir.if %22 {
          %23 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc134)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc135)
          %25 = cir.unary(minus, %24) nsw : !s32i, !s32i loc(#loc136)
          cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc134)
        } loc(#loc266)
      } loc(#loc264)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc139)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc139)
        cir.store %20, %3 : !u64i, !cir.ptr<!u64i> loc(#loc268)
        cir.for : cond {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc141)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc142)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc142)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc269)
          cir.condition(%24) loc(#loc143)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc145)
            %22 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc146)
            %23 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc147)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc148)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc271)
          } loc(#loc270)
          cir.yield loc(#loc138)
        } step {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc149)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc150)
          cir.store %22, %3 : !u64i, !cir.ptr<!u64i> loc(#loc272)
          cir.yield loc(#loc267)
        } loc(#loc267)
      } loc(#loc267)
      %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc151)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc152)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc153)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc151)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc154)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc155)
      %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc156)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc156)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc155)
    } loc(#loc257)
    cir.return loc(#loc100)
  } loc(#loc252)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc274)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc161)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc162)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc275)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc166)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<20> : !s32i loc(#loc168)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc277)
          cir.break loc(#loc170)
        } loc(#loc167)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc172)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc172)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc173)
          cir.break loc(#loc174)
        } loc(#loc171)
        cir.yield loc(#loc164)
      } loc(#loc164)
    } loc(#loc276)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc279)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc280)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc181)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc182)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc182)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc281)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc282)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc181)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc283)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc284)
      cir.scope {
        %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc189)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc190)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc190)
        %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc286)
        cir.if %22 {
          %23 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc192)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc193)
          %25 = cir.unary(minus, %24) nsw : !s32i, !s32i loc(#loc194)
          cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc192)
        } loc(#loc287)
      } loc(#loc285)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc197)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc197)
        cir.store %20, %3 : !u64i, !cir.ptr<!u64i> loc(#loc289)
        cir.for : cond {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc199)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc200)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc200)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc290)
          cir.condition(%24) loc(#loc201)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc203)
            %22 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc204)
            %23 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc205)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc206)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc292)
          } loc(#loc291)
          cir.yield loc(#loc196)
        } step {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc207)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc208)
          cir.store %22, %3 : !u64i, !cir.ptr<!u64i> loc(#loc293)
          cir.yield loc(#loc288)
        } loc(#loc288)
      } loc(#loc288)
      %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc209)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc210)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc211)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc209)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc212)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc213)
      %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc214)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc214)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc213)
    } loc(#loc278)
    cir.return loc(#loc158)
  } loc(#loc273)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":41:23)
#loc10 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":47:19)
#loc11 = loc("/usr/include/stdlib.h":672:1)
#loc12 = loc("/usr/include/stdlib.h":672:45)
#loc13 = loc("/usr/include/stdlib.h":756:1)
#loc14 = loc("/usr/include/stdlib.h":756:70)
#loc15 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc16 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc17 = loc("/usr/include/stdlib.h":687:1)
#loc18 = loc("/usr/include/stdlib.h":687:32)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":23:1)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":64:1)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":25:5)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":25:9)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":27:13)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":27:12)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":27:5)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":28:5)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":49:5)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":28:12)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":30:5)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":31:5)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":43:5)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":32:9)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":32:45)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":34:9)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":42:9)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":34:19)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":34:32)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":34:49)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":34:13)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":34:59)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":35:9)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":38:9)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":40:9)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":37:25)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":37:20)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":37:13)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":37:36)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":41:13)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":44:5)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":45:5)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":47:9)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":48:9)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":50:5)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":63:5)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":51:9)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":51:16)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":52:9)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":52:14)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":55:28)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":55:35)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":55:42)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":55:52)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":55:53)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":55:9)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":56:9)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":56:43)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":56:13)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":56:27)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":56:33)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":56:34)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":56:40)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":56:39)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":57:9)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":60:9)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":57:18)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":57:14)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":57:21)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":57:33)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":57:23)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":58:9)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":59:29)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":59:13)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":59:24)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":59:25)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":57:40)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":57:39)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":61:22)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":61:33)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":61:34)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":61:9)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":62:9)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":62:14)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":136:1)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":140:1)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":138:5)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":138:14)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":139:5)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":139:14)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":71:1)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":101:1)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":73:5)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":73:9)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":75:13)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":75:12)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":75:5)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":76:5)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":86:5)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":76:12)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":78:5)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":80:19)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":80:9)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":81:9)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":82:5)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":84:16)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":84:9)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":85:9)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":87:5)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":100:5)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":88:9)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":88:16)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":89:9)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":89:14)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":92:28)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":92:35)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":92:42)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":92:52)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":92:53)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":92:9)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":93:9)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":93:43)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":93:13)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":93:27)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":93:33)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":93:34)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":93:40)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":93:39)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":94:9)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":97:9)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":94:18)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":94:14)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":94:21)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":94:33)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":94:23)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":95:9)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":96:29)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":96:13)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":96:24)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":96:25)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":94:40)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":94:39)
#loc151 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":98:22)
#loc152 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":98:33)
#loc153 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":98:34)
#loc154 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":98:9)
#loc155 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":99:9)
#loc156 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":99:14)
#loc157 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":104:1)
#loc158 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":134:1)
#loc159 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":106:5)
#loc160 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":106:9)
#loc161 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":108:13)
#loc162 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":108:12)
#loc163 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":108:5)
#loc164 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":109:5)
#loc165 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":119:5)
#loc166 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":109:12)
#loc167 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":111:5)
#loc168 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":113:16)
#loc169 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":113:9)
#loc170 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":114:9)
#loc171 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":115:5)
#loc172 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":117:19)
#loc173 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":117:9)
#loc174 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":118:9)
#loc175 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":120:5)
#loc176 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":133:5)
#loc177 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":121:9)
#loc178 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":121:16)
#loc179 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":122:9)
#loc180 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":122:14)
#loc181 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":125:28)
#loc182 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":125:35)
#loc183 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":125:42)
#loc184 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":125:52)
#loc185 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":125:53)
#loc186 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":125:9)
#loc187 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":126:9)
#loc188 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":126:43)
#loc189 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":126:13)
#loc190 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":126:27)
#loc191 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":126:33)
#loc192 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":126:34)
#loc193 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":126:40)
#loc194 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":126:39)
#loc195 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":127:9)
#loc196 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":130:9)
#loc197 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":127:18)
#loc198 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":127:14)
#loc199 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":127:21)
#loc200 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":127:33)
#loc201 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":127:23)
#loc202 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":128:9)
#loc203 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":129:29)
#loc204 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":129:13)
#loc205 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":129:24)
#loc206 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":129:25)
#loc207 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":127:40)
#loc208 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":127:39)
#loc209 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":131:22)
#loc210 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":131:33)
#loc211 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":131:34)
#loc212 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":131:9)
#loc213 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":132:9)
#loc214 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":132:14)
#loc215 = loc(fused[#loc1, #loc2])
#loc216 = loc(fused[#loc3, #loc4])
#loc217 = loc(fused[#loc5, #loc6])
#loc218 = loc(fused[#loc7, #loc8])
#loc219 = loc(fused[#loc11, #loc12])
#loc220 = loc(fused[#loc13, #loc14])
#loc221 = loc(fused[#loc15, #loc16])
#loc222 = loc(fused[#loc17, #loc18])
#loc223 = loc(fused[#loc19, #loc20])
#loc224 = loc(fused[#loc21, #loc22])
#loc225 = loc(fused[#loc25, #loc23])
#loc226 = loc(fused[#loc26, #loc27])
#loc227 = loc(fused[#loc30, #loc31])
#loc228 = loc(fused[#loc32, #loc33])
#loc229 = loc(fused[#loc34, #loc35])
#loc230 = loc(fused[#loc39, #loc40])
#loc231 = loc(fused[#loc41, #loc42, #loc43, #loc35])
#loc232 = loc(fused[#loc46, #loc47])
#loc233 = loc(fused[#loc53, #loc54])
#loc234 = loc(fused[#loc55, #loc56])
#loc235 = loc(fused[#loc57, #loc58])
#loc236 = loc(fused[#loc61, #loc62])
#loc237 = loc(fused[#loc60, #loc62])
#loc238 = loc(fused[#loc59, #loc63])
#loc239 = loc(fused[#loc64, #loc63])
#loc240 = loc(fused[#loc65, #loc66])
#loc241 = loc(fused[#loc67, #loc68])
#loc242 = loc(fused[#loc69, #loc66])
#loc243 = loc(fused[#loc73, #loc74])
#loc244 = loc(fused[#loc76, #loc75])
#loc245 = loc(fused[#loc77, #loc78])
#loc246 = loc(fused[#loc80, #loc74])
#loc247 = loc(fused[#loc82, #loc81])
#loc248 = loc(fused[#loc86, #loc85])
#loc249 = loc(fused[#loc93, #loc94])
#loc250 = loc(fused[#loc95, #loc96])
#loc251 = loc(fused[#loc97, #loc98])
#loc252 = loc(fused[#loc99, #loc100])
#loc253 = loc(fused[#loc101, #loc102])
#loc254 = loc(fused[#loc105, #loc103])
#loc255 = loc(fused[#loc106, #loc107])
#loc256 = loc(fused[#loc115, #loc114])
#loc257 = loc(fused[#loc117, #loc118])
#loc258 = loc(fused[#loc119, #loc120])
#loc259 = loc(fused[#loc121, #loc122])
#loc260 = loc(fused[#loc125, #loc126])
#loc261 = loc(fused[#loc124, #loc126])
#loc262 = loc(fused[#loc123, #loc127])
#loc263 = loc(fused[#loc128, #loc127])
#loc264 = loc(fused[#loc129, #loc130])
#loc265 = loc(fused[#loc131, #loc132])
#loc266 = loc(fused[#loc133, #loc130])
#loc267 = loc(fused[#loc137, #loc138])
#loc268 = loc(fused[#loc140, #loc139])
#loc269 = loc(fused[#loc141, #loc142])
#loc270 = loc(fused[#loc144, #loc138])
#loc271 = loc(fused[#loc146, #loc145])
#loc272 = loc(fused[#loc150, #loc149])
#loc273 = loc(fused[#loc157, #loc158])
#loc274 = loc(fused[#loc159, #loc160])
#loc275 = loc(fused[#loc163, #loc161])
#loc276 = loc(fused[#loc164, #loc165])
#loc277 = loc(fused[#loc169, #loc168])
#loc278 = loc(fused[#loc175, #loc176])
#loc279 = loc(fused[#loc177, #loc178])
#loc280 = loc(fused[#loc179, #loc180])
#loc281 = loc(fused[#loc183, #loc184])
#loc282 = loc(fused[#loc182, #loc184])
#loc283 = loc(fused[#loc181, #loc185])
#loc284 = loc(fused[#loc186, #loc185])
#loc285 = loc(fused[#loc187, #loc188])
#loc286 = loc(fused[#loc189, #loc190])
#loc287 = loc(fused[#loc191, #loc188])
#loc288 = loc(fused[#loc195, #loc196])
#loc289 = loc(fused[#loc198, #loc197])
#loc290 = loc(fused[#loc199, #loc200])
#loc291 = loc(fused[#loc202, #loc196])
#loc292 = loc(fused[#loc204, #loc203])
#loc293 = loc(fused[#loc208, #loc207])
