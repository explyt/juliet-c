!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":29:30)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":167:10)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":167:14)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":167:20)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":167:32)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":54:30)
#loc125 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":85:30)
#loc226 = loc(fused[#loc55, #loc56])
#loc227 = loc(fused[#loc57, #loc58])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc201)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc202)
  cir.func private @printUnsignedLine(!u32i) loc(#loc203)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_preinc_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc205)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc206)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc13)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc13)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc207)
    cir.br ^bb1 loc(#loc208)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc209)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc209)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc17)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc210)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %10 = cir.binop(and, %8, %9) : !s32i loc(#loc20)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc20)
  ^bb3:  // pred: ^bb2
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc20)
    %14 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc20)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc20)
    %18 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc20)
    %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc20)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc20)
    %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc20)
    cir.br ^bb5(%23 : !u32i) loc(#loc20)
  ^bb4:  // pred: ^bb2
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc20)
    %26 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc20)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc20)
    %30 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %31 = cir.shift(left, %29 : !u32i, %30 : !s32i) -> !u32i loc(#loc20)
    %32 = cir.binop(xor, %27, %31) : !u32i loc(#loc20)
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc20)
    %35 = cir.binop(xor, %32, %34) : !u32i loc(#loc20)
    %36 = cir.unary(minus, %35) : !u32i, !u32i loc(#loc20)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc20)
    %39 = cir.binop(sub, %36, %38) : !u32i loc(#loc20)
    cir.br ^bb5(%39 : !u32i) loc(#loc20)
  ^bb5(%40: !u32i loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":29:30)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc20)
  ^bb6:  // pred: ^bb5
    %41 = cir.cast(integral, %40 : !u32i), !s32i loc(#loc20)
    %42 = cir.cast(integral, %41 : !s32i), !u32i loc(#loc20)
    cir.store %42, %1 : !u32i, !cir.ptr<!u32i> loc(#loc211)
    cir.br ^bb7 loc(#loc16)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc16)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc212)
  ^bb9:  // pred: ^bb8
    %43 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc213)
    %44 = cir.cast(bitcast, %43 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc213)
    %45 = cir.call %44() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc24)
    %46 = cir.cast(int_to_bool, %45 : !s32i), !cir.bool loc(#loc24)
    cir.brcond %46 ^bb10, ^bb13 loc(#loc214)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc215)
  ^bb11:  // pred: ^bb10
    %47 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc29)
    %48 = cir.unary(inc, %47) : !u32i, !u32i loc(#loc29)
    cir.store %48, %1 : !u32i, !cir.ptr<!u32i> loc(#loc216)
    %49 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc10)
    cir.store %49, %0 : !u32i, !cir.ptr<!u32i> loc(#loc205)
    %50 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc31)
    cir.call @printUnsignedLine(%50) : (!u32i) -> () loc(#loc32)
    cir.br ^bb12 loc(#loc28)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc23)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc23)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc8)
  } loc(#loc204)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_preinc_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc219)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc220)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc221)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    cir.return loc(#loc34)
  } loc(#loc217)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc222)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc223)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc224)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc52)
  cir.func @main(%arg0: !s32i loc(fused[#loc55, #loc56]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc57, #loc58])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc226)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc227)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc54)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc59)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc59)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc60)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc61)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc61)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc62)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc49)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %8 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_rand_preinc_11_good : !cir.ptr<!cir.func<!void ()>> loc(#loc228)
    cir.call @CWE190_Integer_Overflow__unsigned_int_rand_preinc_11_good() : () -> () loc(#loc64)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc50)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc51)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %13 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_rand_preinc_11_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc229)
    cir.call @CWE190_Integer_Overflow__unsigned_int_rand_preinc_11_bad() : () -> () loc(#loc68)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc52)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc71)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc230)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc230)
    cir.return %17 : !s32i loc(#loc230)
  } loc(#loc225)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc231)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc76)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc233)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc234)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc83)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc83)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc235)
    cir.br ^bb1 loc(#loc236)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc237)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc237)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc87)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc87)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc238)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %10 = cir.binop(and, %8, %9) : !s32i loc(#loc90)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc90)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc90)
  ^bb3:  // pred: ^bb2
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc90)
    %14 = cir.const #cir.int<30> : !s32i loc(#loc90)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc90)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc90)
    %18 = cir.const #cir.int<15> : !s32i loc(#loc90)
    %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc90)
    %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc90)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc90)
    %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc90)
    cir.br ^bb5(%23 : !u32i) loc(#loc90)
  ^bb4:  // pred: ^bb2
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc90)
    %26 = cir.const #cir.int<30> : !s32i loc(#loc90)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc90)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc90)
    %30 = cir.const #cir.int<15> : !s32i loc(#loc90)
    %31 = cir.shift(left, %29 : !u32i, %30 : !s32i) -> !u32i loc(#loc90)
    %32 = cir.binop(xor, %27, %31) : !u32i loc(#loc90)
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc90)
    %35 = cir.binop(xor, %32, %34) : !u32i loc(#loc90)
    %36 = cir.unary(minus, %35) : !u32i, !u32i loc(#loc90)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc90)
    %39 = cir.binop(sub, %36, %38) : !u32i loc(#loc90)
    cir.br ^bb5(%39 : !u32i) loc(#loc90)
  ^bb5(%40: !u32i loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":54:30)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc90)
  ^bb6:  // pred: ^bb5
    %41 = cir.cast(integral, %40 : !u32i), !s32i loc(#loc90)
    %42 = cir.cast(integral, %41 : !s32i), !u32i loc(#loc90)
    cir.store %42, %1 : !u32i, !cir.ptr<!u32i> loc(#loc239)
    cir.br ^bb7 loc(#loc86)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc86)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc240)
  ^bb9:  // pred: ^bb8
    %43 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc241)
    %44 = cir.cast(bitcast, %43 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc241)
    %45 = cir.call %44() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc94)
    %46 = cir.cast(int_to_bool, %45 : !s32i), !cir.bool loc(#loc94)
    cir.brcond %46 ^bb10, ^bb11 loc(#loc242)
  ^bb10:  // pred: ^bb9
    %47 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc75)
    %48 = cir.cast(array_to_ptrdecay, %47 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%48) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    cir.br ^bb17 loc(#loc97)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc243)
  ^bb12:  // pred: ^bb11
    %49 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc102)
    %50 = cir.const #cir.int<2147483647> : !s32i loc(#loc103)
    %51 = cir.cast(integral, %50 : !s32i), !u32i loc(#loc103)
    %52 = cir.const #cir.int<2> : !u32i loc(#loc103)
    %53 = cir.binop(mul, %51, %52) : !u32i loc(#loc103)
    %54 = cir.const #cir.int<1> : !u32i loc(#loc103)
    %55 = cir.binop(add, %53, %54) : !u32i loc(#loc103)
    %56 = cir.cmp(lt, %49, %55) : !u32i, !cir.bool loc(#loc244)
    cir.brcond %56 ^bb13, ^bb14 loc(#loc245)
  ^bb13:  // pred: ^bb12
    %57 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc107)
    %58 = cir.unary(inc, %57) : !u32i, !u32i loc(#loc107)
    cir.store %58, %1 : !u32i, !cir.ptr<!u32i> loc(#loc246)
    %59 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc80)
    cir.store %59, %0 : !u32i, !cir.ptr<!u32i> loc(#loc233)
    %60 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc109)
    cir.call @printUnsignedLine(%60) : (!u32i) -> () loc(#loc110)
    cir.br ^bb15 loc(#loc105)
  ^bb14:  // pred: ^bb12
    %61 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc76)
    %62 = cir.cast(array_to_ptrdecay, %61 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%62) : (!cir.ptr<!s8i>) -> () loc(#loc111)
    cir.br ^bb15 loc(#loc101)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc101)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc93)
  ^bb17:  // 2 preds: ^bb10, ^bb16
    cir.br ^bb18 loc(#loc93)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc78)
  } loc(#loc232)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc248)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc249)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc118)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc118)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc250)
    cir.br ^bb1 loc(#loc251)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc252)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc252)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc122)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc122)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc253)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc125)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc125)
    %10 = cir.binop(and, %8, %9) : !s32i loc(#loc125)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc125)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc125)
  ^bb3:  // pred: ^bb2
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc125)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc125)
    %14 = cir.const #cir.int<30> : !s32i loc(#loc125)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc125)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc125)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc125)
    %18 = cir.const #cir.int<15> : !s32i loc(#loc125)
    %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc125)
    %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc125)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc125)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc125)
    %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc125)
    cir.br ^bb5(%23 : !u32i) loc(#loc125)
  ^bb4:  // pred: ^bb2
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc125)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc125)
    %26 = cir.const #cir.int<30> : !s32i loc(#loc125)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc125)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc125)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc125)
    %30 = cir.const #cir.int<15> : !s32i loc(#loc125)
    %31 = cir.shift(left, %29 : !u32i, %30 : !s32i) -> !u32i loc(#loc125)
    %32 = cir.binop(xor, %27, %31) : !u32i loc(#loc125)
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc125)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc125)
    %35 = cir.binop(xor, %32, %34) : !u32i loc(#loc125)
    %36 = cir.unary(minus, %35) : !u32i, !u32i loc(#loc125)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc125)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc125)
    %39 = cir.binop(sub, %36, %38) : !u32i loc(#loc125)
    cir.br ^bb5(%39 : !u32i) loc(#loc125)
  ^bb5(%40: !u32i loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":85:30)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc125)
  ^bb6:  // pred: ^bb5
    %41 = cir.cast(integral, %40 : !u32i), !s32i loc(#loc125)
    %42 = cir.cast(integral, %41 : !s32i), !u32i loc(#loc125)
    cir.store %42, %1 : !u32i, !cir.ptr<!u32i> loc(#loc254)
    cir.br ^bb7 loc(#loc121)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc121)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc255)
  ^bb9:  // pred: ^bb8
    %43 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc256)
    %44 = cir.cast(bitcast, %43 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc256)
    %45 = cir.call %44() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc129)
    %46 = cir.cast(int_to_bool, %45 : !s32i), !cir.bool loc(#loc129)
    cir.brcond %46 ^bb10, ^bb16 loc(#loc257)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc258)
  ^bb11:  // pred: ^bb10
    %47 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc134)
    %48 = cir.const #cir.int<2147483647> : !s32i loc(#loc135)
    %49 = cir.cast(integral, %48 : !s32i), !u32i loc(#loc135)
    %50 = cir.const #cir.int<2> : !u32i loc(#loc135)
    %51 = cir.binop(mul, %49, %50) : !u32i loc(#loc135)
    %52 = cir.const #cir.int<1> : !u32i loc(#loc135)
    %53 = cir.binop(add, %51, %52) : !u32i loc(#loc135)
    %54 = cir.cmp(lt, %47, %53) : !u32i, !cir.bool loc(#loc259)
    cir.brcond %54 ^bb12, ^bb13 loc(#loc260)
  ^bb12:  // pred: ^bb11
    %55 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc139)
    %56 = cir.unary(inc, %55) : !u32i, !u32i loc(#loc139)
    cir.store %56, %1 : !u32i, !cir.ptr<!u32i> loc(#loc261)
    %57 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc115)
    cir.store %57, %0 : !u32i, !cir.ptr<!u32i> loc(#loc248)
    %58 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc141)
    cir.call @printUnsignedLine(%58) : (!u32i) -> () loc(#loc142)
    cir.br ^bb14 loc(#loc137)
  ^bb13:  // pred: ^bb11
    %59 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc143)
    %60 = cir.cast(array_to_ptrdecay, %59 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc143)
    cir.call @printLine(%60) : (!cir.ptr<!s8i>) -> () loc(#loc144)
    cir.br ^bb14 loc(#loc133)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc133)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc128)
  ^bb16:  // 2 preds: ^bb9, ^bb15
    cir.br ^bb17 loc(#loc128)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc113)
  } loc(#loc247)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc263)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc264)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc151)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc151)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc265)
    cir.br ^bb1 loc(#loc266)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc267)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc267)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc155)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc155)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc268)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc160)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc160)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc161)
    cir.br ^bb4 loc(#loc158)
  ^bb3:  // pred: ^bb1
    %10 = cir.const #cir.int<2> : !s32i loc(#loc162)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc162)
    cir.store %11, %1 : !u32i, !cir.ptr<!u32i> loc(#loc269)
    cir.br ^bb4 loc(#loc154)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc154)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc270)
  ^bb6:  // pred: ^bb5
    %12 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc271)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc271)
    %14 = cir.call %13() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc166)
    %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc166)
    cir.brcond %15 ^bb7, ^bb10 loc(#loc272)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc273)
  ^bb8:  // pred: ^bb7
    %16 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc171)
    %17 = cir.unary(inc, %16) : !u32i, !u32i loc(#loc171)
    cir.store %17, %1 : !u32i, !cir.ptr<!u32i> loc(#loc274)
    %18 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc148)
    cir.store %18, %0 : !u32i, !cir.ptr<!u32i> loc(#loc263)
    %19 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc173)
    cir.call @printUnsignedLine(%19) : (!u32i) -> () loc(#loc174)
    cir.br ^bb9 loc(#loc170)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc165)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc165)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc146)
  } loc(#loc262)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc276)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc277)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc181)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc181)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc278)
    cir.br ^bb1 loc(#loc279)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc280)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc280)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc185)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc185)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc281)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc188)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc188)
    cir.store %9, %1 : !u32i, !cir.ptr<!u32i> loc(#loc282)
    cir.br ^bb3 loc(#loc184)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc184)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc283)
  ^bb5:  // pred: ^bb4
    %10 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc284)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc284)
    %12 = cir.call %11() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc192)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc192)
    cir.brcond %13 ^bb6, ^bb9 loc(#loc285)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc286)
  ^bb7:  // pred: ^bb6
    %14 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc197)
    %15 = cir.unary(inc, %14) : !u32i, !u32i loc(#loc197)
    cir.store %15, %1 : !u32i, !cir.ptr<!u32i> loc(#loc287)
    %16 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc178)
    cir.store %16, %0 : !u32i, !cir.ptr<!u32i> loc(#loc276)
    %17 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc199)
    cir.call @printUnsignedLine(%17) : (!u32i) -> () loc(#loc200)
    cir.br ^bb8 loc(#loc196)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc191)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc191)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc176)
  } loc(#loc275)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":22:1)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":40:1)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":36:13)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":36:35)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":24:5)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":24:18)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":25:12)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":25:5)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":26:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":30:5)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":26:8)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":26:26)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":27:5)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":29:9)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":31:5)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":39:5)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":31:8)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":31:26)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":32:5)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":33:9)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":38:9)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":35:13)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":35:15)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":37:31)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":37:13)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":150:1)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":156:1)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":152:5)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":152:14)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":153:5)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":153:14)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":154:5)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":154:14)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":155:5)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":155:14)
#loc43 = loc("/usr/include/stdlib.h":575:1)
#loc44 = loc("/usr/include/stdlib.h":575:41)
#loc45 = loc("/usr/include/time.h":76:1)
#loc46 = loc("/usr/include/time.h":76:38)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":172:15)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":174:15)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":177:15)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":179:15)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":167:1)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":182:1)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":168:1)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":170:27)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":170:22)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":170:5)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":172:5)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":173:5)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":173:63)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":174:5)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":177:5)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":178:5)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":178:62)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":179:5)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":181:12)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":181:5)
#loc73 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc74 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":59:19)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":72:23)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":47:1)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":75:1)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":67:13)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":67:35)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":49:5)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":49:18)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":50:12)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":50:5)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":51:5)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":55:5)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":51:8)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":51:26)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":52:5)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":54:9)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":56:5)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":74:5)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":56:8)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":56:27)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":57:5)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":60:5)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":62:5)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":59:9)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":64:9)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":73:9)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":64:13)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":64:20)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":65:9)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":69:9)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":71:9)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":66:13)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":66:15)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":68:31)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":68:13)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":72:13)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":78:1)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":101:1)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":93:13)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":93:35)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":80:5)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":80:18)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":81:12)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":81:5)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":82:5)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":86:5)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":82:8)
#loc123 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":82:26)
#loc124 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":83:5)
#loc126 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":85:9)
#loc127 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":87:5)
#loc128 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":100:5)
#loc129 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":87:8)
#loc130 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":87:26)
#loc131 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":88:5)
#loc132 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":90:9)
#loc133 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":99:9)
#loc134 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":90:13)
#loc135 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":90:20)
#loc136 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":91:9)
#loc137 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":95:9)
#loc138 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":97:9)
#loc139 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":92:13)
#loc140 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":92:15)
#loc141 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":94:31)
#loc142 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":94:13)
#loc143 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":98:23)
#loc144 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":98:13)
#loc145 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":104:1)
#loc146 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":127:1)
#loc147 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":123:13)
#loc148 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":123:35)
#loc149 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":106:5)
#loc150 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":106:18)
#loc151 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":107:12)
#loc152 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":107:5)
#loc153 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":108:5)
#loc154 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":117:5)
#loc155 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":108:8)
#loc156 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":108:27)
#loc157 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":109:5)
#loc158 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":112:5)
#loc159 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":114:5)
#loc160 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":111:19)
#loc161 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":111:9)
#loc162 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":116:16)
#loc163 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":116:9)
#loc164 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":118:5)
#loc165 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":126:5)
#loc166 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":118:8)
#loc167 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":118:26)
#loc168 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":119:5)
#loc169 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":120:9)
#loc170 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":125:9)
#loc171 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":122:13)
#loc172 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":122:15)
#loc173 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":124:31)
#loc174 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":124:13)
#loc175 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":130:1)
#loc176 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":148:1)
#loc177 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":144:13)
#loc178 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":144:35)
#loc179 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":132:5)
#loc180 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":132:18)
#loc181 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":133:12)
#loc182 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":133:5)
#loc183 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":134:5)
#loc184 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":138:5)
#loc185 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":134:8)
#loc186 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":134:26)
#loc187 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":135:5)
#loc188 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":137:16)
#loc189 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":137:9)
#loc190 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":139:5)
#loc191 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":147:5)
#loc192 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":139:8)
#loc193 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":139:26)
#loc194 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":140:5)
#loc195 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":141:9)
#loc196 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":146:9)
#loc197 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":143:13)
#loc198 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":143:15)
#loc199 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":145:31)
#loc200 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_11.c":145:13)
#loc201 = loc(fused[#loc1, #loc2])
#loc202 = loc(fused[#loc3, #loc4])
#loc203 = loc(fused[#loc5, #loc6])
#loc204 = loc(fused[#loc7, #loc8])
#loc205 = loc(fused[#loc9, #loc10])
#loc206 = loc(fused[#loc11, #loc12])
#loc207 = loc(fused[#loc14, #loc13])
#loc208 = loc(fused[#loc15, #loc16])
#loc209 = loc(fused[#loc17, #loc18])
#loc210 = loc(fused[#loc19, #loc16])
#loc211 = loc(fused[#loc21, #loc20])
#loc212 = loc(fused[#loc22, #loc23])
#loc213 = loc(fused[#loc24, #loc25])
#loc214 = loc(fused[#loc26, #loc23])
#loc215 = loc(fused[#loc27, #loc28])
#loc216 = loc(fused[#loc29, #loc30])
#loc217 = loc(fused[#loc33, #loc34])
#loc218 = loc(fused[#loc35, #loc36])
#loc219 = loc(fused[#loc37, #loc38])
#loc220 = loc(fused[#loc39, #loc40])
#loc221 = loc(fused[#loc41, #loc42])
#loc222 = loc(fused[#loc43, #loc44])
#loc223 = loc(fused[#loc45, #loc46])
#loc224 = loc(fused[#loc47, #loc48])
#loc225 = loc(fused[#loc53, #loc54])
#loc228 = loc(fused[#loc64, #loc65])
#loc229 = loc(fused[#loc68, #loc69])
#loc230 = loc(fused[#loc72, #loc71])
#loc231 = loc(fused[#loc73, #loc74])
#loc232 = loc(fused[#loc77, #loc78])
#loc233 = loc(fused[#loc79, #loc80])
#loc234 = loc(fused[#loc81, #loc82])
#loc235 = loc(fused[#loc84, #loc83])
#loc236 = loc(fused[#loc85, #loc86])
#loc237 = loc(fused[#loc87, #loc88])
#loc238 = loc(fused[#loc89, #loc86])
#loc239 = loc(fused[#loc91, #loc90])
#loc240 = loc(fused[#loc92, #loc93])
#loc241 = loc(fused[#loc94, #loc95])
#loc242 = loc(fused[#loc96, #loc97, #loc98, #loc93])
#loc243 = loc(fused[#loc100, #loc101])
#loc244 = loc(fused[#loc102, #loc103])
#loc245 = loc(fused[#loc104, #loc105, #loc106, #loc101])
#loc246 = loc(fused[#loc107, #loc108])
#loc247 = loc(fused[#loc112, #loc113])
#loc248 = loc(fused[#loc114, #loc115])
#loc249 = loc(fused[#loc116, #loc117])
#loc250 = loc(fused[#loc119, #loc118])
#loc251 = loc(fused[#loc120, #loc121])
#loc252 = loc(fused[#loc122, #loc123])
#loc253 = loc(fused[#loc124, #loc121])
#loc254 = loc(fused[#loc126, #loc125])
#loc255 = loc(fused[#loc127, #loc128])
#loc256 = loc(fused[#loc129, #loc130])
#loc257 = loc(fused[#loc131, #loc128])
#loc258 = loc(fused[#loc132, #loc133])
#loc259 = loc(fused[#loc134, #loc135])
#loc260 = loc(fused[#loc136, #loc137, #loc138, #loc133])
#loc261 = loc(fused[#loc139, #loc140])
#loc262 = loc(fused[#loc145, #loc146])
#loc263 = loc(fused[#loc147, #loc148])
#loc264 = loc(fused[#loc149, #loc150])
#loc265 = loc(fused[#loc152, #loc151])
#loc266 = loc(fused[#loc153, #loc154])
#loc267 = loc(fused[#loc155, #loc156])
#loc268 = loc(fused[#loc157, #loc158, #loc159, #loc154])
#loc269 = loc(fused[#loc163, #loc162])
#loc270 = loc(fused[#loc164, #loc165])
#loc271 = loc(fused[#loc166, #loc167])
#loc272 = loc(fused[#loc168, #loc165])
#loc273 = loc(fused[#loc169, #loc170])
#loc274 = loc(fused[#loc171, #loc172])
#loc275 = loc(fused[#loc175, #loc176])
#loc276 = loc(fused[#loc177, #loc178])
#loc277 = loc(fused[#loc179, #loc180])
#loc278 = loc(fused[#loc182, #loc181])
#loc279 = loc(fused[#loc183, #loc184])
#loc280 = loc(fused[#loc185, #loc186])
#loc281 = loc(fused[#loc187, #loc184])
#loc282 = loc(fused[#loc189, #loc188])
#loc283 = loc(fused[#loc190, #loc191])
#loc284 = loc(fused[#loc192, #loc193])
#loc285 = loc(fused[#loc194, #loc191])
#loc286 = loc(fused[#loc195, #loc196])
#loc287 = loc(fused[#loc197, #loc198])
