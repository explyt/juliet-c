!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc7 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc74 = loc("../../../testcasesupport/std_testcase.h":68:7)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":214:10)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":214:14)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":214:20)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":214:32)
!ty_OneIntClass = !cir.struct<class "OneIntClass" {!s32i} #cir.record.decl.ast>
!ty_TwoIntsClass = !cir.struct<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
#loc480 = loc(fused[#loc325, #loc326])
#loc481 = loc(fused[#loc327, #loc328])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc341)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc342)
  cir.func private @globalReturnsTrue() -> !s32i loc(#loc343)
  cir.func linkonce_odr @_ZN12TwoIntsClassC2Ev(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc7)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc7)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc7)
    cir.return loc(#loc7)
  } loc(#loc7)
  cir.func private @printIntLine(!s32i) loc(#loc344)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc345)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_113badEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc347)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc348)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc349)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc20)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc350)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc20)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc351)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc348)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc26)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc353)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc28)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc30)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
      } loc(#loc354)
    } loc(#loc352)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc31)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc355)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc31)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc356)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc349)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc37)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc358)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc39)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc40)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc41)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc39)
      } loc(#loc359)
    } loc(#loc357)
    cir.scope {
      %11 = cir.call @globalReturnsTrue() : () -> !s32i loc(#loc44)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc361)
      cir.if %12 {
        %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
        cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc363)
      } loc(#loc362)
    } loc(#loc360)
    cir.scope {
      %11 = cir.call @globalReturnsTrue() : () -> !s32i loc(#loc51)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc365)
      cir.if %12 {
        cir.scope {
          %13 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc368)
          %14 = cir.const #cir.int<8> : !u64i loc(#loc369)
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc59)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc369)
          cir.call @_ZN12TwoIntsClassC2Ev(%17) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc57)
          cir.store %17, %13 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc368)
          %18 = cir.const #cir.int<5> : !s32i loc(#loc60)
          %19 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc61)
          %20 = cir.get_member %19[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc62)
          cir.store %18, %20 : !s32i, !cir.ptr<!s32i> loc(#loc370)
          %21 = cir.const #cir.int<10> : !s32i loc(#loc63)
          %22 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc64)
          %23 = cir.get_member %22[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc65)
          cir.store %21, %23 : !s32i, !cir.ptr<!s32i> loc(#loc371)
          %24 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc66)
          %25 = cir.get_member %24[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc62)
          %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc67)
          cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc68)
          %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc69)
          %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc70)
          %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc70)
          cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc69)
        } loc(#loc367)
      } loc(#loc366)
    } loc(#loc364)
    cir.return loc(#loc13)
  } loc(#loc346)
  cir.func private @globalReturnsFalse() -> !s32i loc(#loc372)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc73)
  cir.func linkonce_odr @_ZN11OneIntClassC2Ev(%arg0: !cir.ptr<!ty_OneIntClass> loc("../../../testcasesupport/std_testcase.h":68:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["this", init] {alignment = 8 : i64} loc(#loc74)
    cir.store %arg0, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc74)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc74)
    cir.return loc(#loc74)
  } loc(#loc74)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_11L8goodB2G1Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc374)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc375)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc376)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc83)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc377)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc83)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc378)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc375)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc88)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc89)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc380)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc91)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc92)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc93)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc91)
      } loc(#loc381)
    } loc(#loc379)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc94)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc382)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc94)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc383)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc376)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc99)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc100)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc385)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc102)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc103)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc104)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc102)
      } loc(#loc386)
    } loc(#loc384)
    cir.scope {
      %11 = cir.call @globalReturnsTrue() : () -> !s32i loc(#loc107)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc388)
      cir.if %12 {
        %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc110)
        cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc390)
      } loc(#loc389)
    } loc(#loc387)
    cir.scope {
      %11 = cir.call @globalReturnsFalse() : () -> !s32i loc(#loc114)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc392)
      cir.if %12 {
        %13 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc73)
        %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc73)
        cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc119)
      } else {
        cir.scope {
          %13 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc395)
          %14 = cir.const #cir.int<4> : !u64i loc(#loc396)
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc125)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc125)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc396)
          cir.call @_ZN11OneIntClassC2Ev(%17) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc123)
          cir.store %17, %13 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc395)
          %18 = cir.const #cir.int<5> : !s32i loc(#loc126)
          %19 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc127)
          %20 = cir.get_member %19[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc128)
          cir.store %18, %20 : !s32i, !cir.ptr<!s32i> loc(#loc397)
          %21 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc129)
          %22 = cir.get_member %21[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc128)
          %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc130)
          cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc131)
          %24 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc132)
          %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc133)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc133)
          cir.call @free(%26) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc132)
        } loc(#loc394)
      } loc(#loc393)
    } loc(#loc391)
    cir.return loc(#loc76)
  } loc(#loc373)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_11L8goodB2G2Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc399)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc400)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc401)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc142)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc402)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc142)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc403)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc400)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc147)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc148)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc405)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc150)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc151)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc152)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc150)
      } loc(#loc406)
    } loc(#loc404)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc153)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc407)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc153)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc408)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc401)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc158)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc159)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc410)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc161)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc162)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc163)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc161)
      } loc(#loc411)
    } loc(#loc409)
    cir.scope {
      %11 = cir.call @globalReturnsTrue() : () -> !s32i loc(#loc166)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc413)
      cir.if %12 {
        %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc169)
        cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc415)
      } loc(#loc414)
    } loc(#loc412)
    cir.scope {
      %11 = cir.call @globalReturnsTrue() : () -> !s32i loc(#loc173)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc417)
      cir.if %12 {
        cir.scope {
          %13 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc420)
          %14 = cir.const #cir.int<4> : !u64i loc(#loc421)
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc181)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc181)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc421)
          cir.call @_ZN11OneIntClassC2Ev(%17) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc179)
          cir.store %17, %13 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc420)
          %18 = cir.const #cir.int<5> : !s32i loc(#loc182)
          %19 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc183)
          %20 = cir.get_member %19[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc128)
          cir.store %18, %20 : !s32i, !cir.ptr<!s32i> loc(#loc422)
          %21 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc184)
          %22 = cir.get_member %21[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc128)
          %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc185)
          cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc186)
          %24 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc187)
          %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc188)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc188)
          cir.call @free(%26) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc187)
        } loc(#loc419)
      } loc(#loc418)
    } loc(#loc416)
    cir.return loc(#loc135)
  } loc(#loc398)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_11L8goodG2B1Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc424)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc425)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc426)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc197)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc427)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc197)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc428)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc425)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc202)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc203)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc430)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc205)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc206)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc207)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc205)
      } loc(#loc431)
    } loc(#loc429)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc208)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc432)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc208)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc433)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc426)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc213)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc214)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc435)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc216)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc217)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc218)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc216)
      } loc(#loc436)
    } loc(#loc434)
    cir.scope {
      %11 = cir.call @globalReturnsFalse() : () -> !s32i loc(#loc221)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc438)
      cir.if %12 {
        %13 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc226)
        %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc226)
        cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc227)
      } else {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc228)
        cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc440)
      } loc(#loc439)
    } loc(#loc437)
    cir.scope {
      %11 = cir.call @globalReturnsTrue() : () -> !s32i loc(#loc232)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc442)
      cir.if %12 {
        cir.scope {
          %13 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc445)
          %14 = cir.const #cir.int<8> : !u64i loc(#loc446)
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc240)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc240)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc446)
          cir.call @_ZN12TwoIntsClassC2Ev(%17) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc238)
          cir.store %17, %13 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc445)
          %18 = cir.const #cir.int<5> : !s32i loc(#loc241)
          %19 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc242)
          %20 = cir.get_member %19[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc62)
          cir.store %18, %20 : !s32i, !cir.ptr<!s32i> loc(#loc447)
          %21 = cir.const #cir.int<10> : !s32i loc(#loc243)
          %22 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc244)
          %23 = cir.get_member %22[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc65)
          cir.store %21, %23 : !s32i, !cir.ptr<!s32i> loc(#loc448)
          %24 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc245)
          %25 = cir.get_member %24[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc62)
          %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc246)
          cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc247)
          %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc248)
          %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc249)
          %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc249)
          cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc248)
        } loc(#loc444)
      } loc(#loc443)
    } loc(#loc441)
    cir.return loc(#loc190)
  } loc(#loc423)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_11L8goodG2B2Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc450)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc451)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc452)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc258)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc453)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc258)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc454)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc451)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc263)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc264)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc456)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc266)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc267)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc268)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc266)
      } loc(#loc457)
    } loc(#loc455)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc269)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc458)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc269)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc459)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc452)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc274)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc275)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc461)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc277)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc278)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc279)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc277)
      } loc(#loc462)
    } loc(#loc460)
    cir.scope {
      %11 = cir.call @globalReturnsTrue() : () -> !s32i loc(#loc282)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc464)
      cir.if %12 {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc285)
        cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc466)
      } loc(#loc465)
    } loc(#loc463)
    cir.scope {
      %11 = cir.call @globalReturnsTrue() : () -> !s32i loc(#loc289)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc468)
      cir.if %12 {
        cir.scope {
          %13 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc471)
          %14 = cir.const #cir.int<8> : !u64i loc(#loc472)
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc297)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc297)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc472)
          cir.call @_ZN12TwoIntsClassC2Ev(%17) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc295)
          cir.store %17, %13 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc471)
          %18 = cir.const #cir.int<5> : !s32i loc(#loc298)
          %19 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc299)
          %20 = cir.get_member %19[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc62)
          cir.store %18, %20 : !s32i, !cir.ptr<!s32i> loc(#loc473)
          %21 = cir.const #cir.int<10> : !s32i loc(#loc300)
          %22 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc301)
          %23 = cir.get_member %22[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc65)
          cir.store %21, %23 : !s32i, !cir.ptr<!s32i> loc(#loc474)
          %24 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc302)
          %25 = cir.get_member %24[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc62)
          %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc303)
          cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc304)
          %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc305)
          %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc306)
          %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc306)
          cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc305)
        } loc(#loc470)
      } loc(#loc469)
    } loc(#loc467)
    cir.return loc(#loc251)
  } loc(#loc449)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_114goodEv() extra(#fn_attr2) {
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_11L8goodB2G1Ev() : () -> () loc(#loc309)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_11L8goodB2G2Ev() : () -> () loc(#loc310)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_11L8goodG2B1Ev() : () -> () loc(#loc311)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_11L8goodG2B2Ev() : () -> () loc(#loc312)
    cir.return loc(#loc308)
  } loc(#loc475)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc476)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc477)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc478)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc319)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc320)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc321)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc322)
  cir.func @main(%arg0: !s32i loc(fused[#loc325, #loc326]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc327, #loc328])) -> !s32i extra(#fn_attr2) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc480)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc481)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc324)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc329)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc329)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc330)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc331)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc331)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc332)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc319)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc319)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc333)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_114goodEv() : () -> () loc(#loc334)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc320)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc320)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc335)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc321)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc321)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc336)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_113badEv() : () -> () loc(#loc337)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc322)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc322)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc338)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc339)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc482)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc482)
    cir.return %15 : !s32i loc(#loc482)
  } loc(#loc479)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":24:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":53:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":26:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":26:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":27:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":27:62)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":29:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":29:64)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":27:36)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":27:43)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":27:61)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":28:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":28:42)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":28:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":28:26)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":28:32)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":28:33)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":28:39)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":28:38)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":29:37)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":29:44)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":29:63)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":30:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":30:43)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":30:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":30:27)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":30:33)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":30:34)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":30:40)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":30:39)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":31:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":35:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":31:8)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":31:26)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":32:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":34:16)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":34:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":36:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":52:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":36:8)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":36:26)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":37:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":38:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":51:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":44:13)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":44:49)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":44:39)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":44:43)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":46:32)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":46:13)
#loc62 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":47:32)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":47:13)
#loc65 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":48:26)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":48:36)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":48:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":50:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":50:18)
#loc71 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc72 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":75:19)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":60:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":92:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":62:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":62:12)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":63:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":63:62)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":65:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":65:64)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":63:36)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":63:43)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":63:61)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":64:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":64:42)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":64:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":64:26)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":64:32)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":64:33)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":64:39)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":64:38)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":65:37)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":65:44)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":65:63)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":66:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":66:43)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":66:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":66:27)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":66:33)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":66:34)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":66:40)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":66:39)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":67:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":71:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":67:8)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":67:26)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":68:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":70:16)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":70:9)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":72:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":91:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":72:8)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":72:27)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":73:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":76:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":78:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":75:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":79:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":90:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":85:13)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":85:48)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":85:38)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":85:42)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":87:32)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":87:13)
#loc128 = loc("../../../testcasesupport/std_testcase.h":71:13)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":88:26)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":88:36)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":88:13)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":89:13)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":89:18)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":95:1)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":122:1)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":97:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":97:12)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":98:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":98:62)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":100:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":100:64)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":98:36)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":98:43)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":98:61)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":99:5)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":99:42)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":99:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":99:26)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":99:32)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":99:33)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":99:39)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":99:38)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":100:37)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":100:44)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":100:63)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":101:5)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":101:43)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":101:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":101:27)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":101:33)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":101:34)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":101:40)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":101:39)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":102:5)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":106:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":102:8)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":102:26)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":103:5)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":105:16)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":105:9)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":107:5)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":121:5)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":107:8)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":107:26)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":108:5)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":109:9)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":120:9)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":115:13)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":115:48)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":115:38)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":115:42)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":117:32)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":117:13)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":118:26)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":118:36)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":118:13)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":119:13)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":119:18)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":125:1)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":159:1)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":127:5)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":127:12)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":128:5)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":128:62)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":130:5)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":130:64)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":128:36)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":128:43)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":128:61)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":129:5)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":129:42)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":129:9)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":129:26)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":129:32)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":129:33)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":129:39)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":129:38)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":130:37)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":130:44)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":130:63)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":131:5)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":131:43)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":131:9)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":131:27)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":131:33)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":131:34)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":131:40)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":131:39)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":132:5)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":141:5)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":132:8)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":132:27)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":133:5)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":136:5)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":138:5)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":135:19)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":135:9)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":140:16)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":140:9)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":142:5)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":158:5)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":142:8)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":142:26)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":143:5)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":144:9)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":157:9)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":150:13)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":150:49)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":150:39)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":150:43)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":152:32)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":152:13)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":153:32)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":153:13)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":154:26)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":154:36)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":154:13)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":156:13)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":156:18)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":162:1)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":191:1)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":164:5)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":164:12)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":165:5)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":165:62)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":167:5)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":167:64)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":165:36)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":165:43)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":165:61)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":166:5)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":166:42)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":166:9)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":166:26)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":166:32)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":166:33)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":166:39)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":166:38)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":167:37)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":167:44)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":167:63)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":168:5)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":168:43)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":168:9)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":168:27)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":168:33)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":168:34)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":168:40)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":168:39)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":169:5)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":173:5)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":169:8)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":169:26)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":170:5)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":172:16)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":172:9)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":174:5)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":190:5)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":174:8)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":174:26)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":175:5)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":176:9)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":189:9)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":182:13)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":182:49)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":182:39)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":182:43)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":184:32)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":184:13)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":185:32)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":185:13)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":186:26)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":186:36)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":186:13)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":188:13)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":188:18)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":193:1)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":199:1)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":195:5)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":196:5)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":197:5)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":198:5)
#loc313 = loc("/usr/include/stdlib.h":575:1)
#loc314 = loc("/usr/include/stdlib.h":575:41)
#loc315 = loc("/usr/include/time.h":76:1)
#loc316 = loc("/usr/include/time.h":76:38)
#loc317 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc318 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":219:15)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":221:15)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":224:15)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":226:15)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":214:1)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":229:1)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":215:1)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":217:27)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":217:22)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":217:5)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":219:5)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":220:5)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":221:5)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":224:5)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":225:5)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":226:5)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":228:12)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":228:5)
#loc341 = loc(fused[#loc1, #loc2])
#loc342 = loc(fused[#loc3, #loc4])
#loc343 = loc(fused[#loc5, #loc6])
#loc344 = loc(fused[#loc8, #loc9])
#loc345 = loc(fused[#loc10, #loc11])
#loc346 = loc(fused[#loc12, #loc13])
#loc347 = loc(fused[#loc14, #loc15])
#loc348 = loc(fused[#loc16, #loc17])
#loc349 = loc(fused[#loc18, #loc19])
#loc350 = loc(fused[#loc21, #loc22])
#loc351 = loc(fused[#loc20, #loc17])
#loc352 = loc(fused[#loc23, #loc24])
#loc353 = loc(fused[#loc25, #loc26])
#loc354 = loc(fused[#loc27, #loc24])
#loc355 = loc(fused[#loc32, #loc33])
#loc356 = loc(fused[#loc31, #loc19])
#loc357 = loc(fused[#loc34, #loc35])
#loc358 = loc(fused[#loc36, #loc37])
#loc359 = loc(fused[#loc38, #loc35])
#loc360 = loc(fused[#loc42, #loc43])
#loc361 = loc(fused[#loc44, #loc45])
#loc362 = loc(fused[#loc46, #loc43])
#loc363 = loc(fused[#loc48, #loc47])
#loc364 = loc(fused[#loc49, #loc50])
#loc365 = loc(fused[#loc51, #loc52])
#loc366 = loc(fused[#loc53, #loc50])
#loc367 = loc(fused[#loc54, #loc55])
#loc368 = loc(fused[#loc56, #loc57])
#loc369 = loc(fused[#loc58, #loc57])
#loc370 = loc(fused[#loc61, #loc60])
#loc371 = loc(fused[#loc64, #loc63])
#loc372 = loc(fused[#loc71, #loc72])
#loc373 = loc(fused[#loc75, #loc76])
#loc374 = loc(fused[#loc77, #loc78])
#loc375 = loc(fused[#loc79, #loc80])
#loc376 = loc(fused[#loc81, #loc82])
#loc377 = loc(fused[#loc84, #loc85])
#loc378 = loc(fused[#loc83, #loc80])
#loc379 = loc(fused[#loc86, #loc87])
#loc380 = loc(fused[#loc88, #loc89])
#loc381 = loc(fused[#loc90, #loc87])
#loc382 = loc(fused[#loc95, #loc96])
#loc383 = loc(fused[#loc94, #loc82])
#loc384 = loc(fused[#loc97, #loc98])
#loc385 = loc(fused[#loc99, #loc100])
#loc386 = loc(fused[#loc101, #loc98])
#loc387 = loc(fused[#loc105, #loc106])
#loc388 = loc(fused[#loc107, #loc108])
#loc389 = loc(fused[#loc109, #loc106])
#loc390 = loc(fused[#loc111, #loc110])
#loc391 = loc(fused[#loc112, #loc113])
#loc392 = loc(fused[#loc114, #loc115])
#loc393 = loc(fused[#loc116, #loc117, #loc118, #loc113])
#loc394 = loc(fused[#loc120, #loc121])
#loc395 = loc(fused[#loc122, #loc123])
#loc396 = loc(fused[#loc124, #loc123])
#loc397 = loc(fused[#loc127, #loc126])
#loc398 = loc(fused[#loc134, #loc135])
#loc399 = loc(fused[#loc136, #loc137])
#loc400 = loc(fused[#loc138, #loc139])
#loc401 = loc(fused[#loc140, #loc141])
#loc402 = loc(fused[#loc143, #loc144])
#loc403 = loc(fused[#loc142, #loc139])
#loc404 = loc(fused[#loc145, #loc146])
#loc405 = loc(fused[#loc147, #loc148])
#loc406 = loc(fused[#loc149, #loc146])
#loc407 = loc(fused[#loc154, #loc155])
#loc408 = loc(fused[#loc153, #loc141])
#loc409 = loc(fused[#loc156, #loc157])
#loc410 = loc(fused[#loc158, #loc159])
#loc411 = loc(fused[#loc160, #loc157])
#loc412 = loc(fused[#loc164, #loc165])
#loc413 = loc(fused[#loc166, #loc167])
#loc414 = loc(fused[#loc168, #loc165])
#loc415 = loc(fused[#loc170, #loc169])
#loc416 = loc(fused[#loc171, #loc172])
#loc417 = loc(fused[#loc173, #loc174])
#loc418 = loc(fused[#loc175, #loc172])
#loc419 = loc(fused[#loc176, #loc177])
#loc420 = loc(fused[#loc178, #loc179])
#loc421 = loc(fused[#loc180, #loc179])
#loc422 = loc(fused[#loc183, #loc182])
#loc423 = loc(fused[#loc189, #loc190])
#loc424 = loc(fused[#loc191, #loc192])
#loc425 = loc(fused[#loc193, #loc194])
#loc426 = loc(fused[#loc195, #loc196])
#loc427 = loc(fused[#loc198, #loc199])
#loc428 = loc(fused[#loc197, #loc194])
#loc429 = loc(fused[#loc200, #loc201])
#loc430 = loc(fused[#loc202, #loc203])
#loc431 = loc(fused[#loc204, #loc201])
#loc432 = loc(fused[#loc209, #loc210])
#loc433 = loc(fused[#loc208, #loc196])
#loc434 = loc(fused[#loc211, #loc212])
#loc435 = loc(fused[#loc213, #loc214])
#loc436 = loc(fused[#loc215, #loc212])
#loc437 = loc(fused[#loc219, #loc220])
#loc438 = loc(fused[#loc221, #loc222])
#loc439 = loc(fused[#loc223, #loc224, #loc225, #loc220])
#loc440 = loc(fused[#loc229, #loc228])
#loc441 = loc(fused[#loc230, #loc231])
#loc442 = loc(fused[#loc232, #loc233])
#loc443 = loc(fused[#loc234, #loc231])
#loc444 = loc(fused[#loc235, #loc236])
#loc445 = loc(fused[#loc237, #loc238])
#loc446 = loc(fused[#loc239, #loc238])
#loc447 = loc(fused[#loc242, #loc241])
#loc448 = loc(fused[#loc244, #loc243])
#loc449 = loc(fused[#loc250, #loc251])
#loc450 = loc(fused[#loc252, #loc253])
#loc451 = loc(fused[#loc254, #loc255])
#loc452 = loc(fused[#loc256, #loc257])
#loc453 = loc(fused[#loc259, #loc260])
#loc454 = loc(fused[#loc258, #loc255])
#loc455 = loc(fused[#loc261, #loc262])
#loc456 = loc(fused[#loc263, #loc264])
#loc457 = loc(fused[#loc265, #loc262])
#loc458 = loc(fused[#loc270, #loc271])
#loc459 = loc(fused[#loc269, #loc257])
#loc460 = loc(fused[#loc272, #loc273])
#loc461 = loc(fused[#loc274, #loc275])
#loc462 = loc(fused[#loc276, #loc273])
#loc463 = loc(fused[#loc280, #loc281])
#loc464 = loc(fused[#loc282, #loc283])
#loc465 = loc(fused[#loc284, #loc281])
#loc466 = loc(fused[#loc286, #loc285])
#loc467 = loc(fused[#loc287, #loc288])
#loc468 = loc(fused[#loc289, #loc290])
#loc469 = loc(fused[#loc291, #loc288])
#loc470 = loc(fused[#loc292, #loc293])
#loc471 = loc(fused[#loc294, #loc295])
#loc472 = loc(fused[#loc296, #loc295])
#loc473 = loc(fused[#loc299, #loc298])
#loc474 = loc(fused[#loc301, #loc300])
#loc475 = loc(fused[#loc307, #loc308])
#loc476 = loc(fused[#loc313, #loc314])
#loc477 = loc(fused[#loc315, #loc316])
#loc478 = loc(fused[#loc317, #loc318])
#loc479 = loc(fused[#loc323, #loc324])
#loc482 = loc(fused[#loc340, #loc339])
