!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc220)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc221)
  cir.func private  @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc222)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc223)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc225)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc226)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc228)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc17)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc17)
      cir.if %4 {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc20)
        %6 = cir.const #cir.int<50> : !s32i loc(#loc21)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc21)
        %8 = cir.const #cir.int<8> : !u64i loc(#loc230)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc231)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc20)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc232)
        cir.store %11, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc233)
        cir.scope {
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc28)
          %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc29)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc29)
          %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!ty__twoIntsStruct>, !s32i loc(#loc235)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc30)
          cir.if %16 {
            %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc32)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc33)
            %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc34)
            cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
          } loc(#loc236)
        } loc(#loc234)
      } loc(#loc229)
    } loc(#loc227)
    cir.scope {
      %2 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc238)
      cir.scope {
        %17 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc240)
        cir.scope {
          %18 = cir.const #cir.int<0> : !s32i loc(#loc45)
          %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc45)
          cir.store %19, %17 : !u64i, !cir.ptr<!u64i> loc(#loc242)
          cir.for : cond {
            %20 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc47)
            %21 = cir.const #cir.int<100> : !s32i loc(#loc48)
            %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc48)
            %23 = cir.cmp(lt, %20, %22) : !u64i, !s32i loc(#loc243)
            %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc49)
            cir.condition(%24) loc(#loc49)
          } body {
            cir.scope {
              %20 = cir.const #cir.int<0> : !s32i loc(#loc51)
              %21 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc52)
              %22 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc53)
              %23 = cir.ptr_stride(%22 : !cir.ptr<!ty__twoIntsStruct>, %21 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc53)
              %24 = cir.get_member %23[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc54)
              cir.store %20, %24 : !s32i, !cir.ptr<!s32i> loc(#loc245)
              %25 = cir.const #cir.int<0> : !s32i loc(#loc55)
              %26 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc56)
              %27 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc57)
              %28 = cir.ptr_stride(%27 : !cir.ptr<!ty__twoIntsStruct>, %26 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc57)
              %29 = cir.get_member %28[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc58)
              cir.store %25, %29 : !s32i, !cir.ptr<!s32i> loc(#loc246)
            } loc(#loc244)
            cir.yield loc(#loc44)
          } step {
            %20 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc59)
            %21 = cir.unary(inc, %20) : !u64i, !u64i loc(#loc60)
            cir.store %21, %17 : !u64i, !cir.ptr<!u64i> loc(#loc247)
            cir.yield loc(#loc241)
          } loc(#loc241)
        } loc(#loc241)
      } loc(#loc239)
      %3 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc61)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc61)
      %5 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc62)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc62)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc63)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc63)
      %9 = cir.const #cir.int<8> : !u64i loc(#loc248)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc249)
      cir.libc.memcpy %10 bytes from %6 to %4 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc250)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc68)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc69)
      %13 = cir.ptr_stride(%11 : !cir.ptr<!ty__twoIntsStruct>, %12 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc70)
      cir.call @printStructLine(%13) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc71)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc72)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc73)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc73)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc72)
    } loc(#loc237)
    cir.return loc(#loc10)
  } loc(#loc224)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc252)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc76)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc253)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc78)
    cir.return loc(#loc75)
  } loc(#loc251)
  cir.func no_proto internal private  @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc81)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc82)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc255)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc255)
    cir.return %2 : !s32i loc(#loc255)
  } loc(#loc254)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc256)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc86)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc258)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc91)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc259)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc261)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc95)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc95)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc86)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc86)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc100)
      } else {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc101)
        %6 = cir.const #cir.int<100> : !s32i loc(#loc102)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc102)
        %8 = cir.const #cir.int<8> : !u64i loc(#loc263)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc264)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc101)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc265)
        cir.store %11, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc266)
        cir.scope {
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc109)
          %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc110)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc110)
          %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!ty__twoIntsStruct>, !s32i loc(#loc268)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc111)
          cir.if %16 {
            %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc113)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc114)
            %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc115)
            cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc113)
          } loc(#loc269)
        } loc(#loc267)
      } loc(#loc262)
    } loc(#loc260)
    cir.scope {
      %2 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc271)
      cir.scope {
        %17 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc273)
        cir.scope {
          %18 = cir.const #cir.int<0> : !s32i loc(#loc126)
          %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc126)
          cir.store %19, %17 : !u64i, !cir.ptr<!u64i> loc(#loc275)
          cir.for : cond {
            %20 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc128)
            %21 = cir.const #cir.int<100> : !s32i loc(#loc129)
            %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc129)
            %23 = cir.cmp(lt, %20, %22) : !u64i, !s32i loc(#loc276)
            %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc130)
            cir.condition(%24) loc(#loc130)
          } body {
            cir.scope {
              %20 = cir.const #cir.int<0> : !s32i loc(#loc132)
              %21 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc133)
              %22 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc134)
              %23 = cir.ptr_stride(%22 : !cir.ptr<!ty__twoIntsStruct>, %21 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc134)
              %24 = cir.get_member %23[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc54)
              cir.store %20, %24 : !s32i, !cir.ptr<!s32i> loc(#loc278)
              %25 = cir.const #cir.int<0> : !s32i loc(#loc135)
              %26 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc136)
              %27 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc137)
              %28 = cir.ptr_stride(%27 : !cir.ptr<!ty__twoIntsStruct>, %26 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc137)
              %29 = cir.get_member %28[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc58)
              cir.store %25, %29 : !s32i, !cir.ptr<!s32i> loc(#loc279)
            } loc(#loc277)
            cir.yield loc(#loc125)
          } step {
            %20 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc138)
            %21 = cir.unary(inc, %20) : !u64i, !u64i loc(#loc139)
            cir.store %21, %17 : !u64i, !cir.ptr<!u64i> loc(#loc280)
            cir.yield loc(#loc274)
          } loc(#loc274)
        } loc(#loc274)
      } loc(#loc272)
      %3 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc140)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc140)
      %5 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc141)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc141)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc142)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc142)
      %9 = cir.const #cir.int<8> : !u64i loc(#loc281)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc282)
      cir.libc.memcpy %10 bytes from %6 to %4 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc283)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc147)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc148)
      %13 = cir.ptr_stride(%11 : !cir.ptr<!ty__twoIntsStruct>, %12 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc149)
      cir.call @printStructLine(%13) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc150)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc151)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc152)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc152)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc151)
    } loc(#loc270)
    cir.return loc(#loc88)
  } loc(#loc257)
  cir.func no_proto internal private  @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc154)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc155)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc285)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc285)
    cir.return %2 : !s32i loc(#loc285)
  } loc(#loc284)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc287)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc161)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc288)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc290)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc165)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc165)
      cir.if %4 {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc168)
        %6 = cir.const #cir.int<100> : !s32i loc(#loc169)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc169)
        %8 = cir.const #cir.int<8> : !u64i loc(#loc292)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc293)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc168)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc294)
        cir.store %11, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc295)
        cir.scope {
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc176)
          %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc177)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc177)
          %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!ty__twoIntsStruct>, !s32i loc(#loc297)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc178)
          cir.if %16 {
            %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc180)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc181)
            %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc182)
            cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc180)
          } loc(#loc298)
        } loc(#loc296)
      } loc(#loc291)
    } loc(#loc289)
    cir.scope {
      %2 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc300)
      cir.scope {
        %17 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc302)
        cir.scope {
          %18 = cir.const #cir.int<0> : !s32i loc(#loc193)
          %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc193)
          cir.store %19, %17 : !u64i, !cir.ptr<!u64i> loc(#loc304)
          cir.for : cond {
            %20 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc195)
            %21 = cir.const #cir.int<100> : !s32i loc(#loc196)
            %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc196)
            %23 = cir.cmp(lt, %20, %22) : !u64i, !s32i loc(#loc305)
            %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc197)
            cir.condition(%24) loc(#loc197)
          } body {
            cir.scope {
              %20 = cir.const #cir.int<0> : !s32i loc(#loc199)
              %21 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc200)
              %22 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc201)
              %23 = cir.ptr_stride(%22 : !cir.ptr<!ty__twoIntsStruct>, %21 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc201)
              %24 = cir.get_member %23[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc54)
              cir.store %20, %24 : !s32i, !cir.ptr<!s32i> loc(#loc307)
              %25 = cir.const #cir.int<0> : !s32i loc(#loc202)
              %26 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc203)
              %27 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc204)
              %28 = cir.ptr_stride(%27 : !cir.ptr<!ty__twoIntsStruct>, %26 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc204)
              %29 = cir.get_member %28[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc58)
              cir.store %25, %29 : !s32i, !cir.ptr<!s32i> loc(#loc308)
            } loc(#loc306)
            cir.yield loc(#loc192)
          } step {
            %20 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc205)
            %21 = cir.unary(inc, %20) : !u64i, !u64i loc(#loc206)
            cir.store %21, %17 : !u64i, !cir.ptr<!u64i> loc(#loc309)
            cir.yield loc(#loc303)
          } loc(#loc303)
        } loc(#loc303)
      } loc(#loc301)
      %3 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc207)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc207)
      %5 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc208)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc208)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc209)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc209)
      %9 = cir.const #cir.int<8> : !u64i loc(#loc310)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc311)
      cir.libc.memcpy %10 bytes from %6 to %4 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc312)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc214)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc215)
      %13 = cir.ptr_stride(%11 : !cir.ptr<!ty__twoIntsStruct>, %12 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc216)
      cir.call @printStructLine(%13) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc217)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc218)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc219)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc219)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc218)
    } loc(#loc299)
    cir.return loc(#loc158)
  } loc(#loc286)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":35:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":61:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":37:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":37:21)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":38:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":38:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":39:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":44:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":39:8)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":39:26)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":40:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":42:33)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":42:40)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":42:43)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":42:63)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":42:64)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":42:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":43:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":43:37)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":43:13)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":43:21)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":43:18)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":43:27)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":43:28)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":43:34)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":43:33)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":45:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":60:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":46:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":46:33)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":47:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":55:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":48:13)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":48:20)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":50:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":54:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":50:22)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":50:18)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":50:25)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":50:29)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":50:27)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":51:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":52:36)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":52:24)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":52:17)
#loc54 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":53:36)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":53:24)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":53:17)
#loc58 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":50:35)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":50:34)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":57:16)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":57:22)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":57:30)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":57:34)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":57:54)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":57:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":57:55)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":58:26)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":58:31)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":58:32)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":58:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":59:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":59:14)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":130:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":134:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":132:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":132:14)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":133:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":133:14)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":23:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":26:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":25:12)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":25:5)
#loc84 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc85 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":75:19)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":68:1)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":99:1)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":70:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":70:21)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":71:12)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":71:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":72:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":82:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":72:8)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":72:27)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":73:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":76:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":78:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":75:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":80:33)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":80:40)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":80:44)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":80:64)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":80:65)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":80:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":81:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":81:37)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":81:13)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":81:21)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":81:18)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":81:27)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":81:28)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":81:34)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":81:33)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":83:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":98:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":84:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":84:33)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":85:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":93:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":86:13)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":86:20)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":88:13)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":92:13)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":88:22)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":88:18)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":88:25)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":88:29)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":88:27)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":89:13)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":90:36)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":90:24)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":90:17)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":91:36)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":91:24)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":91:17)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":88:35)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":88:34)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":95:16)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":95:22)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":95:30)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":95:34)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":95:54)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":95:9)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":95:55)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":96:26)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":96:31)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":96:32)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":96:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":97:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":97:14)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":28:1)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":31:1)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":30:12)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":30:5)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":102:1)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":128:1)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":104:5)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":104:21)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":105:12)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":105:5)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":106:5)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":111:5)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":106:8)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":106:26)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":107:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":109:33)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":109:40)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":109:44)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":109:64)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":109:65)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":109:9)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":110:9)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":110:37)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":110:13)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":110:21)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":110:18)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":110:27)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":110:28)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":110:34)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":110:33)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":112:5)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":127:5)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":113:9)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":113:33)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":114:9)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":122:9)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":115:13)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":115:20)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":117:13)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":121:13)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":117:22)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":117:18)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":117:25)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":117:29)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":117:27)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":118:13)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":119:36)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":119:24)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":119:17)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":120:36)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":120:24)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":120:17)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":117:35)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":117:34)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":124:16)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":124:22)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":124:30)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":124:34)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":124:54)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":124:9)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":124:55)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":125:26)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":125:31)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":125:32)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":125:9)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":126:9)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c":126:14)
#loc220 = loc(fused[#loc1, #loc2])
#loc221 = loc(fused[#loc3, #loc4])
#loc222 = loc(fused[#loc5, #loc6])
#loc223 = loc(fused[#loc7, #loc8])
#loc224 = loc(fused[#loc9, #loc10])
#loc225 = loc(fused[#loc11, #loc12])
#loc226 = loc(fused[#loc14, #loc13])
#loc227 = loc(fused[#loc15, #loc16])
#loc228 = loc(fused[#loc17, #loc18])
#loc229 = loc(fused[#loc19, #loc16])
#loc230 = loc(fused[#loc22, #loc23])
#loc231 = loc(fused[#loc21, #loc23])
#loc232 = loc(fused[#loc20, #loc24])
#loc233 = loc(fused[#loc25, #loc24])
#loc234 = loc(fused[#loc26, #loc27])
#loc235 = loc(fused[#loc28, #loc29])
#loc236 = loc(fused[#loc31, #loc27])
#loc237 = loc(fused[#loc35, #loc36])
#loc238 = loc(fused[#loc37, #loc38])
#loc239 = loc(fused[#loc39, #loc40])
#loc240 = loc(fused[#loc41, #loc42])
#loc241 = loc(fused[#loc43, #loc44])
#loc242 = loc(fused[#loc46, #loc45])
#loc243 = loc(fused[#loc47, #loc48])
#loc244 = loc(fused[#loc50, #loc44])
#loc245 = loc(fused[#loc53, #loc51])
#loc246 = loc(fused[#loc57, #loc55])
#loc247 = loc(fused[#loc60, #loc59])
#loc248 = loc(fused[#loc64, #loc65])
#loc249 = loc(fused[#loc63, #loc65])
#loc250 = loc(fused[#loc66, #loc67])
#loc251 = loc(fused[#loc74, #loc75])
#loc252 = loc(fused[#loc76, #loc77])
#loc253 = loc(fused[#loc78, #loc79])
#loc254 = loc(fused[#loc80, #loc81])
#loc255 = loc(fused[#loc83, #loc82])
#loc256 = loc(fused[#loc84, #loc85])
#loc257 = loc(fused[#loc87, #loc88])
#loc258 = loc(fused[#loc89, #loc90])
#loc259 = loc(fused[#loc92, #loc91])
#loc260 = loc(fused[#loc93, #loc94])
#loc261 = loc(fused[#loc95, #loc96])
#loc262 = loc(fused[#loc97, #loc98, #loc99, #loc94])
#loc263 = loc(fused[#loc103, #loc104])
#loc264 = loc(fused[#loc102, #loc104])
#loc265 = loc(fused[#loc101, #loc105])
#loc266 = loc(fused[#loc106, #loc105])
#loc267 = loc(fused[#loc107, #loc108])
#loc268 = loc(fused[#loc109, #loc110])
#loc269 = loc(fused[#loc112, #loc108])
#loc270 = loc(fused[#loc116, #loc117])
#loc271 = loc(fused[#loc118, #loc119])
#loc272 = loc(fused[#loc120, #loc121])
#loc273 = loc(fused[#loc122, #loc123])
#loc274 = loc(fused[#loc124, #loc125])
#loc275 = loc(fused[#loc127, #loc126])
#loc276 = loc(fused[#loc128, #loc129])
#loc277 = loc(fused[#loc131, #loc125])
#loc278 = loc(fused[#loc134, #loc132])
#loc279 = loc(fused[#loc137, #loc135])
#loc280 = loc(fused[#loc139, #loc138])
#loc281 = loc(fused[#loc143, #loc144])
#loc282 = loc(fused[#loc142, #loc144])
#loc283 = loc(fused[#loc145, #loc146])
#loc284 = loc(fused[#loc153, #loc154])
#loc285 = loc(fused[#loc156, #loc155])
#loc286 = loc(fused[#loc157, #loc158])
#loc287 = loc(fused[#loc159, #loc160])
#loc288 = loc(fused[#loc162, #loc161])
#loc289 = loc(fused[#loc163, #loc164])
#loc290 = loc(fused[#loc165, #loc166])
#loc291 = loc(fused[#loc167, #loc164])
#loc292 = loc(fused[#loc170, #loc171])
#loc293 = loc(fused[#loc169, #loc171])
#loc294 = loc(fused[#loc168, #loc172])
#loc295 = loc(fused[#loc173, #loc172])
#loc296 = loc(fused[#loc174, #loc175])
#loc297 = loc(fused[#loc176, #loc177])
#loc298 = loc(fused[#loc179, #loc175])
#loc299 = loc(fused[#loc183, #loc184])
#loc300 = loc(fused[#loc185, #loc186])
#loc301 = loc(fused[#loc187, #loc188])
#loc302 = loc(fused[#loc189, #loc190])
#loc303 = loc(fused[#loc191, #loc192])
#loc304 = loc(fused[#loc194, #loc193])
#loc305 = loc(fused[#loc195, #loc196])
#loc306 = loc(fused[#loc198, #loc192])
#loc307 = loc(fused[#loc201, #loc199])
#loc308 = loc(fused[#loc204, #loc202])
#loc309 = loc(fused[#loc206, #loc205])
#loc310 = loc(fused[#loc210, #loc211])
#loc311 = loc(fused[#loc209, #loc211])
#loc312 = loc(fused[#loc212, #loc213])
