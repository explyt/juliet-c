!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc179 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":405:10)
#loc180 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":405:14)
#loc181 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":405:20)
#loc182 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":405:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc630 = loc(fused[#loc179, #loc180])
#loc631 = loc(fused[#loc181, #loc182])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_listen_socket_square_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc558)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc559)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc560)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc561)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc562)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc563)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc564)
  cir.func private @close(!s32i) -> !s32i loc(#loc565)
  cir.func private @printIntLine(!s32i) loc(#loc566)
  cir.func no_proto @CWE190_Integer_Overflow__int_listen_socket_square_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc568)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc23)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc569)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc571)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc27)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc27)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc574)
          %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc575)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc576)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc577)
          %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc578)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc37)
          %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc37)
          cir.store %11, %7 : !s32i, !cir.ptr<!s32i> loc(#loc576)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc39)
          %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc39)
          cir.store %13, %8 : !s32i, !cir.ptr<!s32i> loc(#loc577)
          cir.scope {
            cir.do {
              %14 = cir.const #cir.int<2> : !s32i loc(#loc44)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc45)
              %16 = cir.const #cir.int<6> : !s32i loc(#loc46)
              %17 = cir.call @socket(%14, %15, %16) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc47)
              cir.store %17, %7 : !s32i, !cir.ptr<!s32i> loc(#loc580)
              cir.scope {
                %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc52)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc53)
                %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc53)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc582)
                cir.if %62 {
                  cir.break loc(#loc55)
                } loc(#loc583)
              } loc(#loc581)
              %18 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc584)
              %19 = cir.const #cir.int<0> : !s32i loc(#loc58)
              %20 = cir.const #cir.int<16> : !u64i loc(#loc585)
              cir.libc.memset %20 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc586)
              %21 = cir.const #cir.int<2> : !s32i loc(#loc63)
              %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc63)
              %23 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc64)
              cir.store %22, %23 : !u16i, !cir.ptr<!u16i> loc(#loc587)
              %24 = cir.const #cir.int<0> : !s32i loc(#loc66)
              %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc66)
              %26 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc67)
              %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc68)
              cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc588)
              %28 = cir.const #cir.int<27015> : !s32i loc(#loc70)
              %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc70)
              %30 = cir.call @htons(%29) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc71)
              %31 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
              cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc589)
              cir.scope {
                %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc77)
                %60 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc591)
                %61 = cir.const #cir.int<16> : !u64i loc(#loc592)
                %62 = cir.cast(integral, %61 : !u64i), !u32i loc(#loc592)
                %63 = cir.call @bind(%59, %60, %62) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc82)
                %64 = cir.const #cir.int<1> : !s32i loc(#loc83)
                %65 = cir.unary(minus, %64) : !s32i, !s32i loc(#loc83)
                %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc593)
                cir.if %66 {
                  cir.break loc(#loc85)
                } loc(#loc594)
              } loc(#loc590)
              cir.scope {
                %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc88)
                %60 = cir.const #cir.int<5> : !s32i loc(#loc89)
                %61 = cir.call @listen(%59, %60) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc90)
                %62 = cir.const #cir.int<1> : !s32i loc(#loc91)
                %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc91)
                %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc596)
                cir.if %64 {
                  cir.break loc(#loc93)
                } loc(#loc597)
              } loc(#loc595)
              %32 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc94)
              %33 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc95)
              %34 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc96)
              %35 = cir.call @accept(%32, %33, %34) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc97)
              cir.store %35, %8 : !s32i, !cir.ptr<!s32i> loc(#loc598)
              cir.scope {
                %59 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc102)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc103)
                %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc103)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc600)
                cir.if %62 {
                  cir.break loc(#loc105)
                } loc(#loc601)
              } loc(#loc599)
              %36 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc106)
              %37 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc107)
              %38 = cir.cast(bitcast, %37 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc107)
              %39 = cir.const #cir.int<3> : !s32i loc(#loc108)
              %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc108)
              %41 = cir.const #cir.int<4> : !u64i loc(#loc108)
              %42 = cir.binop(mul, %40, %41) : !u64i loc(#loc108)
              %43 = cir.const #cir.int<2> : !s32i loc(#loc108)
              %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc108)
              %45 = cir.binop(add, %42, %44) : !u64i loc(#loc108)
              %46 = cir.const #cir.int<1> : !s32i loc(#loc109)
              %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc109)
              %48 = cir.binop(sub, %45, %47) : !u64i loc(#loc602)
              %49 = cir.const #cir.int<0> : !s32i loc(#loc110)
              %50 = cir.call @recv(%36, %38, %48, %49) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc111)
              %51 = cir.cast(integral, %50 : !s64i), !s32i loc(#loc111)
              cir.store %51, %5 : !s32i, !cir.ptr<!s32i> loc(#loc603)
              cir.scope {
                %59 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc117)
                %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc117)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc605)
                %63 = cir.ternary(%62, true {
                  %64 = cir.const #true loc(#loc118)
                  cir.yield %64 : !cir.bool loc(#loc118)
                }, false {
                  %64 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc119)
                  %65 = cir.const #cir.int<0> : !s32i loc(#loc120)
                  %66 = cir.cmp(eq, %64, %65) : !s32i, !cir.bool loc(#loc606)
                  %67 = cir.ternary(%66, true {
                    %68 = cir.const #true loc(#loc118)
                    cir.yield %68 : !cir.bool loc(#loc118)
                  }, false {
                    %68 = cir.const #false loc(#loc118)
                    cir.yield %68 : !cir.bool loc(#loc118)
                  }) : (!cir.bool) -> !cir.bool loc(#loc118)
                  cir.yield %67 : !cir.bool loc(#loc118)
                }) : (!cir.bool) -> !cir.bool loc(#loc118)
                cir.if %63 {
                  cir.break loc(#loc122)
                } loc(#loc607)
              } loc(#loc604)
              %52 = cir.const #cir.int<0> : !s32i loc(#loc123)
              %53 = cir.cast(integral, %52 : !s32i), !s8i loc(#loc123)
              %54 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc124)
              %55 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc125)
              %56 = cir.ptr_stride(%55 : !cir.ptr<!s8i>, %54 : !s32i), !cir.ptr<!s8i> loc(#loc125)
              cir.store %53, %56 : !s8i, !cir.ptr<!s8i> loc(#loc608)
              %57 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc126)
              %58 = cir.call @atoi(%57) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc127)
              cir.store %58, %0 : !s32i, !cir.ptr<!s32i> loc(#loc609)
              cir.yield loc(#loc43)
            } while {
              %14 = cir.const #cir.int<0> : !s32i loc(#loc130)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc130)
              cir.condition(%15) loc(#loc130)
            } loc(#loc579)
          } loc(#loc579)
          cir.scope {
            %14 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc133)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc134)
            %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc134)
            %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc611)
            cir.if %17 {
              %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc136)
              %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc137)
            } loc(#loc612)
          } loc(#loc610)
          cir.scope {
            %14 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc140)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc141)
            %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc141)
            %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc614)
            cir.if %17 {
              %18 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc143)
              %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc144)
            } loc(#loc615)
          } loc(#loc613)
        } loc(#loc573)
      } loc(#loc572)
    } loc(#loc570)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc617)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc147)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc147)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc620)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc154)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc153)
          %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc154)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc620)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc155)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc156)
        } loc(#loc619)
      } loc(#loc618)
    } loc(#loc616)
    cir.return loc(#loc20)
  } loc(#loc567)
  cir.func no_proto @CWE190_Integer_Overflow__int_listen_socket_square_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc622)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc159)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc623)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc161)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc624)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc163)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc625)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc165)
    cir.return loc(#loc158)
  } loc(#loc621)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc626)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc627)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc628)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc173)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc174)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc175)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc176)
  cir.func @main(%arg0: !s32i loc(fused[#loc179, #loc180]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc181, #loc182])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc630)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc631)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc178)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc183)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc184)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc185)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc185)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc186)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc173)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc173)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc187)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_listen_socket_square_08_good : !cir.ptr<!cir.func<!void ()>> loc(#loc632)
    cir.call @CWE190_Integer_Overflow__int_listen_socket_square_08_good() : () -> () loc(#loc188)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc174)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc174)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc190)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc175)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc175)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc191)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_listen_socket_square_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc633)
    cir.call @CWE190_Integer_Overflow__int_listen_socket_square_08_bad() : () -> () loc(#loc192)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc176)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc176)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc194)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc195)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc634)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc634)
    cir.return %17 : !s32i loc(#loc634)
  } loc(#loc629)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc198)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc199)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc636)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc636)
    cir.return %2 : !s32i loc(#loc636)
  } loc(#loc635)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc201)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc202)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc203)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc638)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc208)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc639)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc641)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc212)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc212)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc644)
          %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc645)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc646)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc647)
          %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc648)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc222)
          %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc222)
          cir.store %11, %7 : !s32i, !cir.ptr<!s32i> loc(#loc646)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc224)
          %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc224)
          cir.store %13, %8 : !s32i, !cir.ptr<!s32i> loc(#loc647)
          cir.scope {
            cir.do {
              %14 = cir.const #cir.int<2> : !s32i loc(#loc229)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc230)
              %16 = cir.const #cir.int<6> : !s32i loc(#loc231)
              %17 = cir.call @socket(%14, %15, %16) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc232)
              cir.store %17, %7 : !s32i, !cir.ptr<!s32i> loc(#loc650)
              cir.scope {
                %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc237)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc238)
                %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc238)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc652)
                cir.if %62 {
                  cir.break loc(#loc240)
                } loc(#loc653)
              } loc(#loc651)
              %18 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc654)
              %19 = cir.const #cir.int<0> : !s32i loc(#loc243)
              %20 = cir.const #cir.int<16> : !u64i loc(#loc655)
              cir.libc.memset %20 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc656)
              %21 = cir.const #cir.int<2> : !s32i loc(#loc248)
              %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc248)
              %23 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc64)
              cir.store %22, %23 : !u16i, !cir.ptr<!u16i> loc(#loc657)
              %24 = cir.const #cir.int<0> : !s32i loc(#loc250)
              %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc250)
              %26 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc67)
              %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc68)
              cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc658)
              %28 = cir.const #cir.int<27015> : !s32i loc(#loc252)
              %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc252)
              %30 = cir.call @htons(%29) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc253)
              %31 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
              cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc659)
              cir.scope {
                %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc258)
                %60 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc661)
                %61 = cir.const #cir.int<16> : !u64i loc(#loc662)
                %62 = cir.cast(integral, %61 : !u64i), !u32i loc(#loc662)
                %63 = cir.call @bind(%59, %60, %62) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc263)
                %64 = cir.const #cir.int<1> : !s32i loc(#loc264)
                %65 = cir.unary(minus, %64) : !s32i, !s32i loc(#loc264)
                %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc663)
                cir.if %66 {
                  cir.break loc(#loc266)
                } loc(#loc664)
              } loc(#loc660)
              cir.scope {
                %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc269)
                %60 = cir.const #cir.int<5> : !s32i loc(#loc270)
                %61 = cir.call @listen(%59, %60) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc271)
                %62 = cir.const #cir.int<1> : !s32i loc(#loc272)
                %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc272)
                %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc666)
                cir.if %64 {
                  cir.break loc(#loc274)
                } loc(#loc667)
              } loc(#loc665)
              %32 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc275)
              %33 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc276)
              %34 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc277)
              %35 = cir.call @accept(%32, %33, %34) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc278)
              cir.store %35, %8 : !s32i, !cir.ptr<!s32i> loc(#loc668)
              cir.scope {
                %59 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc283)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc284)
                %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc284)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc670)
                cir.if %62 {
                  cir.break loc(#loc286)
                } loc(#loc671)
              } loc(#loc669)
              %36 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc287)
              %37 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc288)
              %38 = cir.cast(bitcast, %37 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc288)
              %39 = cir.const #cir.int<3> : !s32i loc(#loc289)
              %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc289)
              %41 = cir.const #cir.int<4> : !u64i loc(#loc289)
              %42 = cir.binop(mul, %40, %41) : !u64i loc(#loc289)
              %43 = cir.const #cir.int<2> : !s32i loc(#loc289)
              %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc289)
              %45 = cir.binop(add, %42, %44) : !u64i loc(#loc289)
              %46 = cir.const #cir.int<1> : !s32i loc(#loc290)
              %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc290)
              %48 = cir.binop(sub, %45, %47) : !u64i loc(#loc672)
              %49 = cir.const #cir.int<0> : !s32i loc(#loc291)
              %50 = cir.call @recv(%36, %38, %48, %49) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc292)
              %51 = cir.cast(integral, %50 : !s64i), !s32i loc(#loc292)
              cir.store %51, %5 : !s32i, !cir.ptr<!s32i> loc(#loc673)
              cir.scope {
                %59 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc297)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc298)
                %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc298)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc675)
                %63 = cir.ternary(%62, true {
                  %64 = cir.const #true loc(#loc299)
                  cir.yield %64 : !cir.bool loc(#loc299)
                }, false {
                  %64 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc300)
                  %65 = cir.const #cir.int<0> : !s32i loc(#loc301)
                  %66 = cir.cmp(eq, %64, %65) : !s32i, !cir.bool loc(#loc676)
                  %67 = cir.ternary(%66, true {
                    %68 = cir.const #true loc(#loc299)
                    cir.yield %68 : !cir.bool loc(#loc299)
                  }, false {
                    %68 = cir.const #false loc(#loc299)
                    cir.yield %68 : !cir.bool loc(#loc299)
                  }) : (!cir.bool) -> !cir.bool loc(#loc299)
                  cir.yield %67 : !cir.bool loc(#loc299)
                }) : (!cir.bool) -> !cir.bool loc(#loc299)
                cir.if %63 {
                  cir.break loc(#loc303)
                } loc(#loc677)
              } loc(#loc674)
              %52 = cir.const #cir.int<0> : !s32i loc(#loc304)
              %53 = cir.cast(integral, %52 : !s32i), !s8i loc(#loc304)
              %54 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc305)
              %55 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc306)
              %56 = cir.ptr_stride(%55 : !cir.ptr<!s8i>, %54 : !s32i), !cir.ptr<!s8i> loc(#loc306)
              cir.store %53, %56 : !s8i, !cir.ptr<!s8i> loc(#loc678)
              %57 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc307)
              %58 = cir.call @atoi(%57) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc308)
              cir.store %58, %0 : !s32i, !cir.ptr<!s32i> loc(#loc679)
              cir.yield loc(#loc228)
            } while {
              %14 = cir.const #cir.int<0> : !s32i loc(#loc311)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc311)
              cir.condition(%15) loc(#loc311)
            } loc(#loc649)
          } loc(#loc649)
          cir.scope {
            %14 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc314)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc315)
            %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc315)
            %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc681)
            cir.if %17 {
              %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc317)
              %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc318)
            } loc(#loc682)
          } loc(#loc680)
          cir.scope {
            %14 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc321)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc322)
            %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc322)
            %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc684)
            cir.if %17 {
              %18 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc324)
              %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc325)
            } loc(#loc685)
          } loc(#loc683)
        } loc(#loc643)
      } loc(#loc642)
    } loc(#loc640)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc687)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc328)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc328)
      cir.if %4 {
        %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc201)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc201)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc333)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc336)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc337)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc337)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc337)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc337)
          %10 = cir.cmp(gt, %5, %9) : !s32i, !cir.bool loc(#loc690)
          %11 = cir.ternary(%10, true {
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc339)
            %13 = cir.abs %12 poison : !s32i loc(#loc340)
            %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc340)
            %15 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc341)
            %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc342)
            %17 = cir.cast(int_to_float, %16 : !s32i), !cir.double loc(#loc342)
            %18 = cir.call @sqrt(%17) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc341)
            %19 = cir.cast(float_to_int, %18 : !cir.double), !s64i loc(#loc341)
            %20 = cir.cmp(lt, %14, %19) : !s64i, !cir.bool loc(#loc691)
            %21 = cir.ternary(%20, true {
              %22 = cir.const #true loc(#loc338)
              cir.yield %22 : !cir.bool loc(#loc338)
            }, false {
              %22 = cir.const #false loc(#loc338)
              cir.yield %22 : !cir.bool loc(#loc338)
            }) : (!cir.bool) -> !cir.bool loc(#loc338)
            cir.yield %21 : !cir.bool loc(#loc338)
          }, false {
            %12 = cir.const #false loc(#loc338)
            cir.yield %12 : !cir.bool loc(#loc338)
          }) : (!cir.bool) -> !cir.bool loc(#loc338)
          cir.if %11 {
            %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc693)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc349)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc348)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc349)
            cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc693)
            %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc350)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc351)
          } else {
            %12 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc203)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc203)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc352)
          } loc(#loc692)
        } loc(#loc689)
      } loc(#loc688)
    } loc(#loc686)
    cir.return loc(#loc205)
  } loc(#loc637)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc354)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc355)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc695)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc695)
    cir.return %2 : !s32i loc(#loc695)
  } loc(#loc694)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc697)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc361)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc698)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc700)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc365)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc365)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc703)
          %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc704)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc705)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc706)
          %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc707)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc375)
          %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc375)
          cir.store %11, %7 : !s32i, !cir.ptr<!s32i> loc(#loc705)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc377)
          %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc377)
          cir.store %13, %8 : !s32i, !cir.ptr<!s32i> loc(#loc706)
          cir.scope {
            cir.do {
              %14 = cir.const #cir.int<2> : !s32i loc(#loc382)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc383)
              %16 = cir.const #cir.int<6> : !s32i loc(#loc384)
              %17 = cir.call @socket(%14, %15, %16) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc385)
              cir.store %17, %7 : !s32i, !cir.ptr<!s32i> loc(#loc709)
              cir.scope {
                %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc390)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc391)
                %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc391)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc711)
                cir.if %62 {
                  cir.break loc(#loc393)
                } loc(#loc712)
              } loc(#loc710)
              %18 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc713)
              %19 = cir.const #cir.int<0> : !s32i loc(#loc396)
              %20 = cir.const #cir.int<16> : !u64i loc(#loc714)
              cir.libc.memset %20 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc715)
              %21 = cir.const #cir.int<2> : !s32i loc(#loc401)
              %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc401)
              %23 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc64)
              cir.store %22, %23 : !u16i, !cir.ptr<!u16i> loc(#loc716)
              %24 = cir.const #cir.int<0> : !s32i loc(#loc403)
              %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc403)
              %26 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc67)
              %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc68)
              cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc717)
              %28 = cir.const #cir.int<27015> : !s32i loc(#loc405)
              %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc405)
              %30 = cir.call @htons(%29) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc406)
              %31 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
              cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc718)
              cir.scope {
                %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc411)
                %60 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc720)
                %61 = cir.const #cir.int<16> : !u64i loc(#loc721)
                %62 = cir.cast(integral, %61 : !u64i), !u32i loc(#loc721)
                %63 = cir.call @bind(%59, %60, %62) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc416)
                %64 = cir.const #cir.int<1> : !s32i loc(#loc417)
                %65 = cir.unary(minus, %64) : !s32i, !s32i loc(#loc417)
                %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc722)
                cir.if %66 {
                  cir.break loc(#loc419)
                } loc(#loc723)
              } loc(#loc719)
              cir.scope {
                %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc422)
                %60 = cir.const #cir.int<5> : !s32i loc(#loc423)
                %61 = cir.call @listen(%59, %60) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc424)
                %62 = cir.const #cir.int<1> : !s32i loc(#loc425)
                %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc425)
                %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc725)
                cir.if %64 {
                  cir.break loc(#loc427)
                } loc(#loc726)
              } loc(#loc724)
              %32 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc428)
              %33 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc429)
              %34 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc430)
              %35 = cir.call @accept(%32, %33, %34) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc431)
              cir.store %35, %8 : !s32i, !cir.ptr<!s32i> loc(#loc727)
              cir.scope {
                %59 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc436)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc437)
                %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc437)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc729)
                cir.if %62 {
                  cir.break loc(#loc439)
                } loc(#loc730)
              } loc(#loc728)
              %36 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc440)
              %37 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc441)
              %38 = cir.cast(bitcast, %37 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc441)
              %39 = cir.const #cir.int<3> : !s32i loc(#loc442)
              %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc442)
              %41 = cir.const #cir.int<4> : !u64i loc(#loc442)
              %42 = cir.binop(mul, %40, %41) : !u64i loc(#loc442)
              %43 = cir.const #cir.int<2> : !s32i loc(#loc442)
              %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc442)
              %45 = cir.binop(add, %42, %44) : !u64i loc(#loc442)
              %46 = cir.const #cir.int<1> : !s32i loc(#loc443)
              %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc443)
              %48 = cir.binop(sub, %45, %47) : !u64i loc(#loc731)
              %49 = cir.const #cir.int<0> : !s32i loc(#loc444)
              %50 = cir.call @recv(%36, %38, %48, %49) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc445)
              %51 = cir.cast(integral, %50 : !s64i), !s32i loc(#loc445)
              cir.store %51, %5 : !s32i, !cir.ptr<!s32i> loc(#loc732)
              cir.scope {
                %59 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc450)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc451)
                %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc451)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc734)
                %63 = cir.ternary(%62, true {
                  %64 = cir.const #true loc(#loc452)
                  cir.yield %64 : !cir.bool loc(#loc452)
                }, false {
                  %64 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc453)
                  %65 = cir.const #cir.int<0> : !s32i loc(#loc454)
                  %66 = cir.cmp(eq, %64, %65) : !s32i, !cir.bool loc(#loc735)
                  %67 = cir.ternary(%66, true {
                    %68 = cir.const #true loc(#loc452)
                    cir.yield %68 : !cir.bool loc(#loc452)
                  }, false {
                    %68 = cir.const #false loc(#loc452)
                    cir.yield %68 : !cir.bool loc(#loc452)
                  }) : (!cir.bool) -> !cir.bool loc(#loc452)
                  cir.yield %67 : !cir.bool loc(#loc452)
                }) : (!cir.bool) -> !cir.bool loc(#loc452)
                cir.if %63 {
                  cir.break loc(#loc456)
                } loc(#loc736)
              } loc(#loc733)
              %52 = cir.const #cir.int<0> : !s32i loc(#loc457)
              %53 = cir.cast(integral, %52 : !s32i), !s8i loc(#loc457)
              %54 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc458)
              %55 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc459)
              %56 = cir.ptr_stride(%55 : !cir.ptr<!s8i>, %54 : !s32i), !cir.ptr<!s8i> loc(#loc459)
              cir.store %53, %56 : !s8i, !cir.ptr<!s8i> loc(#loc737)
              %57 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc460)
              %58 = cir.call @atoi(%57) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc461)
              cir.store %58, %0 : !s32i, !cir.ptr<!s32i> loc(#loc738)
              cir.yield loc(#loc381)
            } while {
              %14 = cir.const #cir.int<0> : !s32i loc(#loc464)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc464)
              cir.condition(%15) loc(#loc464)
            } loc(#loc708)
          } loc(#loc708)
          cir.scope {
            %14 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc467)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc468)
            %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc468)
            %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc740)
            cir.if %17 {
              %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc470)
              %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc471)
            } loc(#loc741)
          } loc(#loc739)
          cir.scope {
            %14 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc474)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc475)
            %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc475)
            %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc743)
            cir.if %17 {
              %18 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc477)
              %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc478)
            } loc(#loc744)
          } loc(#loc742)
        } loc(#loc702)
      } loc(#loc701)
    } loc(#loc699)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc746)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc481)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc481)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc486)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc487)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc487)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc487)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc487)
          %10 = cir.cmp(gt, %5, %9) : !s32i, !cir.bool loc(#loc749)
          %11 = cir.ternary(%10, true {
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc489)
            %13 = cir.abs %12 poison : !s32i loc(#loc490)
            %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc490)
            %15 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc491)
            %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc492)
            %17 = cir.cast(int_to_float, %16 : !s32i), !cir.double loc(#loc492)
            %18 = cir.call @sqrt(%17) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc491)
            %19 = cir.cast(float_to_int, %18 : !cir.double), !s64i loc(#loc491)
            %20 = cir.cmp(lt, %14, %19) : !s64i, !cir.bool loc(#loc750)
            %21 = cir.ternary(%20, true {
              %22 = cir.const #true loc(#loc488)
              cir.yield %22 : !cir.bool loc(#loc488)
            }, false {
              %22 = cir.const #false loc(#loc488)
              cir.yield %22 : !cir.bool loc(#loc488)
            }) : (!cir.bool) -> !cir.bool loc(#loc488)
            cir.yield %21 : !cir.bool loc(#loc488)
          }, false {
            %12 = cir.const #false loc(#loc488)
            cir.yield %12 : !cir.bool loc(#loc488)
          }) : (!cir.bool) -> !cir.bool loc(#loc488)
          cir.if %11 {
            %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc752)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc499)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc498)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc499)
            cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc752)
            %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc500)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc501)
          } else {
            %12 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc502)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc502)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc503)
          } loc(#loc751)
        } loc(#loc748)
      } loc(#loc747)
    } loc(#loc745)
    cir.return loc(#loc358)
  } loc(#loc696)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc754)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc508)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc755)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc757)
      %3 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc512)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc512)
      cir.if %4 {
        %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc517)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc517)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc518)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc519)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc759)
      } loc(#loc758)
    } loc(#loc756)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc761)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc523)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc523)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc764)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc530)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc529)
          %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc530)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc764)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc531)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc532)
        } loc(#loc763)
      } loc(#loc762)
    } loc(#loc760)
    cir.return loc(#loc505)
  } loc(#loc753)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc766)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc537)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc767)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc769)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc541)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc541)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc544)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc771)
      } loc(#loc770)
    } loc(#loc768)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc773)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc548)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc548)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc776)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc555)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc554)
          %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc555)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc776)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc556)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc557)
        } loc(#loc775)
      } loc(#loc774)
    } loc(#loc772)
    cir.return loc(#loc534)
  } loc(#loc765)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_listen_socket_square_08.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":145:1)
#loc12 = loc("/usr/include/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc19 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":59:1)
#loc20 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":144:1)
#loc21 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":61:5)
#loc22 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":61:9)
#loc23 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":63:12)
#loc24 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":63:5)
#loc25 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":64:5)
#loc26 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":135:5)
#loc27 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":64:8)
#loc28 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":64:26)
#loc29 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":65:5)
#loc30 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":66:9)
#loc31 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":134:9)
#loc32 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":71:13)
#loc33 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":71:17)
#loc34 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":72:13)
#loc35 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":72:32)
#loc36 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":73:13)
#loc37 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":73:35)
#loc38 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":74:13)
#loc39 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":74:35)
#loc40 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":75:13)
#loc41 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":75:45)
#loc42 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":76:13)
#loc43 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":119:21)
#loc44 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":86:39)
#loc45 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":86:48)
#loc46 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":86:61)
#loc47 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":86:32)
#loc48 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":86:17)
#loc49 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":86:72)
#loc50 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":87:17)
#loc51 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":90:17)
#loc52 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":87:21)
#loc53 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":87:37)
#loc54 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":88:17)
#loc55 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":89:21)
#loc56 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":91:24)
#loc57 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":91:25)
#loc58 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":91:34)
#loc59 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":91:37)
#loc60 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":91:51)
#loc61 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":91:17)
#loc62 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":91:52)
#loc63 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":92:38)
#loc64 = loc("/usr/include/netinet/in.h":249:5)
#loc65 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":92:17)
#loc66 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":93:43)
#loc67 = loc("/usr/include/netinet/in.h":251:20)
#loc68 = loc("/usr/include/netinet/in.h":33:15)
#loc69 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":93:17)
#loc70 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":94:42)
#loc71 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":94:36)
#loc72 = loc("/usr/include/netinet/in.h":250:15)
#loc73 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":94:17)
#loc74 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":94:50)
#loc75 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":95:17)
#loc76 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":98:17)
#loc77 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":95:26)
#loc78 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":95:58)
#loc79 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":95:59)
#loc80 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":95:68)
#loc81 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":95:82)
#loc82 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":95:21)
#loc83 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":95:88)
#loc84 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":96:17)
#loc85 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":97:21)
#loc86 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":99:17)
#loc87 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":102:17)
#loc88 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":99:28)
#loc89 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":99:42)
#loc90 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":99:21)
#loc91 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":99:61)
#loc92 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":100:17)
#loc93 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":101:21)
#loc94 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":103:39)
#loc95 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":103:53)
#loc96 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":103:59)
#loc97 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":103:32)
#loc98 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":103:17)
#loc99 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":103:63)
#loc100 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":104:17)
#loc101 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":107:17)
#loc102 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":104:21)
#loc103 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":104:37)
#loc104 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":105:17)
#loc105 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":106:21)
#loc106 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":109:35)
#loc107 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":109:49)
#loc108 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":109:62)
#loc109 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":109:80)
#loc110 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":109:83)
#loc111 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":109:30)
#loc112 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":109:17)
#loc113 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":109:84)
#loc114 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":110:17)
#loc115 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":113:17)
#loc116 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":110:21)
#loc117 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":110:35)
#loc118 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":110:48)
#loc119 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":110:51)
#loc120 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":110:65)
#loc121 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":111:17)
#loc122 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":112:21)
#loc123 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":115:43)
#loc124 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":115:29)
#loc125 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":115:17)
#loc126 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":117:29)
#loc127 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":117:24)
#loc128 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":117:17)
#loc129 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":117:40)
#loc130 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":119:20)
#loc131 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":120:13)
#loc132 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":123:13)
#loc133 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":120:17)
#loc134 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":120:33)
#loc135 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":121:13)
#loc136 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":122:30)
#loc137 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":122:17)
#loc138 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":124:13)
#loc139 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":127:13)
#loc140 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":124:17)
#loc141 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":124:33)
#loc142 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":125:13)
#loc143 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":126:30)
#loc144 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":126:17)
#loc145 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":136:5)
#loc146 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":143:5)
#loc147 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":136:8)
#loc148 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":136:26)
#loc149 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":137:5)
#loc150 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":138:9)
#loc151 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":142:9)
#loc152 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":140:13)
#loc153 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":140:33)
#loc154 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":140:26)
#loc155 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":141:26)
#loc156 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":141:13)
#loc157 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":388:1)
#loc158 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":394:1)
#loc159 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":390:5)
#loc160 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":390:14)
#loc161 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":391:5)
#loc162 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":391:14)
#loc163 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":392:5)
#loc164 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":392:14)
#loc165 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":393:5)
#loc166 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":393:14)
#loc167 = loc("/usr/include/stdlib.h":575:1)
#loc168 = loc("/usr/include/stdlib.h":575:41)
#loc169 = loc("/usr/include/time.h":76:1)
#loc170 = loc("/usr/include/time.h":76:38)
#loc171 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc172 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc173 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":410:15)
#loc174 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":412:15)
#loc175 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":415:15)
#loc176 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":417:15)
#loc177 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":405:1)
#loc178 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":420:1)
#loc183 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":406:1)
#loc184 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":408:27)
#loc185 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":408:22)
#loc186 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":408:5)
#loc187 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":410:5)
#loc188 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":411:5)
#loc189 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":411:63)
#loc190 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":412:5)
#loc191 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":415:5)
#loc192 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":416:5)
#loc193 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":416:62)
#loc194 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":417:5)
#loc195 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":419:12)
#loc196 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":419:5)
#loc197 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":47:1)
#loc198 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":50:1)
#loc199 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":49:12)
#loc200 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":49:5)
#loc201 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":231:19)
#loc202 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc203 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":243:23)
#loc204 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":151:1)
#loc205 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":246:1)
#loc206 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":153:5)
#loc207 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":153:9)
#loc208 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":155:12)
#loc209 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":155:5)
#loc210 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":156:5)
#loc211 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":227:5)
#loc212 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":156:8)
#loc213 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":156:26)
#loc214 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":157:5)
#loc215 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":158:9)
#loc216 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":226:9)
#loc217 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":163:13)
#loc218 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":163:17)
#loc219 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":164:13)
#loc220 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":164:32)
#loc221 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":165:13)
#loc222 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":165:35)
#loc223 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":166:13)
#loc224 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":166:35)
#loc225 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":167:13)
#loc226 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":167:45)
#loc227 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":168:13)
#loc228 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":211:21)
#loc229 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":178:39)
#loc230 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":178:48)
#loc231 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":178:61)
#loc232 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":178:32)
#loc233 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":178:17)
#loc234 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":178:72)
#loc235 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":179:17)
#loc236 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":182:17)
#loc237 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":179:21)
#loc238 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":179:37)
#loc239 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":180:17)
#loc240 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":181:21)
#loc241 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":183:24)
#loc242 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":183:25)
#loc243 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":183:34)
#loc244 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":183:37)
#loc245 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":183:51)
#loc246 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":183:17)
#loc247 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":183:52)
#loc248 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":184:38)
#loc249 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":184:17)
#loc250 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":185:43)
#loc251 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":185:17)
#loc252 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":186:42)
#loc253 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":186:36)
#loc254 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":186:17)
#loc255 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":186:50)
#loc256 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":187:17)
#loc257 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":190:17)
#loc258 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":187:26)
#loc259 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":187:58)
#loc260 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":187:59)
#loc261 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":187:68)
#loc262 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":187:82)
#loc263 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":187:21)
#loc264 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":187:88)
#loc265 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":188:17)
#loc266 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":189:21)
#loc267 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":191:17)
#loc268 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":194:17)
#loc269 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":191:28)
#loc270 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":191:42)
#loc271 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":191:21)
#loc272 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":191:61)
#loc273 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":192:17)
#loc274 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":193:21)
#loc275 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":195:39)
#loc276 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":195:53)
#loc277 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":195:59)
#loc278 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":195:32)
#loc279 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":195:17)
#loc280 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":195:63)
#loc281 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":196:17)
#loc282 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":199:17)
#loc283 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":196:21)
#loc284 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":196:37)
#loc285 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":197:17)
#loc286 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":198:21)
#loc287 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":201:35)
#loc288 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":201:49)
#loc289 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":201:62)
#loc290 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":201:80)
#loc291 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":201:83)
#loc292 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":201:30)
#loc293 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":201:17)
#loc294 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":201:84)
#loc295 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":202:17)
#loc296 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":205:17)
#loc297 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":202:21)
#loc298 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":202:35)
#loc299 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":202:48)
#loc300 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":202:51)
#loc301 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":202:65)
#loc302 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":203:17)
#loc303 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":204:21)
#loc304 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":207:43)
#loc305 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":207:29)
#loc306 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":207:17)
#loc307 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":209:29)
#loc308 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":209:24)
#loc309 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":209:17)
#loc310 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":209:40)
#loc311 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":211:20)
#loc312 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":212:13)
#loc313 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":215:13)
#loc314 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":212:17)
#loc315 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":212:33)
#loc316 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":213:13)
#loc317 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":214:30)
#loc318 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":214:17)
#loc319 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":216:13)
#loc320 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":219:13)
#loc321 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":216:17)
#loc322 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":216:33)
#loc323 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":217:13)
#loc324 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":218:30)
#loc325 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":218:17)
#loc326 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":228:5)
#loc327 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":245:5)
#loc328 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":228:8)
#loc329 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":228:27)
#loc330 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":229:5)
#loc331 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":232:5)
#loc332 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":234:5)
#loc333 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":231:9)
#loc334 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":236:9)
#loc335 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":244:9)
#loc336 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":236:13)
#loc337 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":236:20)
#loc338 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":236:28)
#loc339 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":236:35)
#loc340 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":236:31)
#loc341 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":236:49)
#loc342 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":236:62)
#loc343 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":236:69)
#loc344 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":237:9)
#loc345 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":240:9)
#loc346 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":242:9)
#loc347 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":238:13)
#loc348 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":238:33)
#loc349 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":238:26)
#loc350 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":239:26)
#loc351 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":239:13)
#loc352 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":243:13)
#loc353 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":52:1)
#loc354 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":55:1)
#loc355 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":54:12)
#loc356 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":54:5)
#loc357 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":249:1)
#loc358 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":339:1)
#loc359 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":251:5)
#loc360 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":251:9)
#loc361 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":253:12)
#loc362 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":253:5)
#loc363 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":254:5)
#loc364 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":325:5)
#loc365 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":254:8)
#loc366 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":254:26)
#loc367 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":255:5)
#loc368 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":256:9)
#loc369 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":324:9)
#loc370 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":261:13)
#loc371 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":261:17)
#loc372 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":262:13)
#loc373 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":262:32)
#loc374 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":263:13)
#loc375 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":263:35)
#loc376 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":264:13)
#loc377 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":264:35)
#loc378 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":265:13)
#loc379 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":265:45)
#loc380 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":266:13)
#loc381 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":309:21)
#loc382 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":276:39)
#loc383 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":276:48)
#loc384 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":276:61)
#loc385 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":276:32)
#loc386 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":276:17)
#loc387 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":276:72)
#loc388 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":277:17)
#loc389 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":280:17)
#loc390 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":277:21)
#loc391 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":277:37)
#loc392 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":278:17)
#loc393 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":279:21)
#loc394 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":281:24)
#loc395 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":281:25)
#loc396 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":281:34)
#loc397 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":281:37)
#loc398 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":281:51)
#loc399 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":281:17)
#loc400 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":281:52)
#loc401 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":282:38)
#loc402 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":282:17)
#loc403 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":283:43)
#loc404 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":283:17)
#loc405 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":284:42)
#loc406 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":284:36)
#loc407 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":284:17)
#loc408 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":284:50)
#loc409 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":285:17)
#loc410 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":288:17)
#loc411 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":285:26)
#loc412 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":285:58)
#loc413 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":285:59)
#loc414 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":285:68)
#loc415 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":285:82)
#loc416 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":285:21)
#loc417 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":285:88)
#loc418 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":286:17)
#loc419 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":287:21)
#loc420 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":289:17)
#loc421 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":292:17)
#loc422 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":289:28)
#loc423 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":289:42)
#loc424 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":289:21)
#loc425 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":289:61)
#loc426 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":290:17)
#loc427 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":291:21)
#loc428 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":293:39)
#loc429 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":293:53)
#loc430 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":293:59)
#loc431 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":293:32)
#loc432 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":293:17)
#loc433 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":293:63)
#loc434 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":294:17)
#loc435 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":297:17)
#loc436 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":294:21)
#loc437 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":294:37)
#loc438 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":295:17)
#loc439 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":296:21)
#loc440 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":299:35)
#loc441 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":299:49)
#loc442 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":299:62)
#loc443 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":299:80)
#loc444 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":299:83)
#loc445 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":299:30)
#loc446 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":299:17)
#loc447 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":299:84)
#loc448 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":300:17)
#loc449 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":303:17)
#loc450 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":300:21)
#loc451 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":300:35)
#loc452 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":300:48)
#loc453 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":300:51)
#loc454 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":300:65)
#loc455 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":301:17)
#loc456 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":302:21)
#loc457 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":305:43)
#loc458 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":305:29)
#loc459 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":305:17)
#loc460 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":307:29)
#loc461 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":307:24)
#loc462 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":307:17)
#loc463 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":307:40)
#loc464 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":309:20)
#loc465 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":310:13)
#loc466 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":313:13)
#loc467 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":310:17)
#loc468 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":310:33)
#loc469 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":311:13)
#loc470 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":312:30)
#loc471 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":312:17)
#loc472 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":314:13)
#loc473 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":317:13)
#loc474 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":314:17)
#loc475 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":314:33)
#loc476 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":315:13)
#loc477 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":316:30)
#loc478 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":316:17)
#loc479 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":326:5)
#loc480 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":338:5)
#loc481 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":326:8)
#loc482 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":326:26)
#loc483 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":327:5)
#loc484 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":329:9)
#loc485 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":337:9)
#loc486 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":329:13)
#loc487 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":329:20)
#loc488 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":329:28)
#loc489 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":329:35)
#loc490 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":329:31)
#loc491 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":329:49)
#loc492 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":329:62)
#loc493 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":329:69)
#loc494 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":330:9)
#loc495 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":333:9)
#loc496 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":335:9)
#loc497 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":331:13)
#loc498 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":331:33)
#loc499 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":331:26)
#loc500 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":332:26)
#loc501 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":332:13)
#loc502 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":336:23)
#loc503 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":336:13)
#loc504 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":342:1)
#loc505 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":365:1)
#loc506 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":344:5)
#loc507 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":344:9)
#loc508 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":346:12)
#loc509 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":346:5)
#loc510 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":347:5)
#loc511 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":356:5)
#loc512 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":347:8)
#loc513 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":347:27)
#loc514 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":348:5)
#loc515 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":351:5)
#loc516 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":353:5)
#loc517 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":350:19)
#loc518 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":350:9)
#loc519 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":355:16)
#loc520 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":355:9)
#loc521 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":357:5)
#loc522 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":364:5)
#loc523 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":357:8)
#loc524 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":357:26)
#loc525 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":358:5)
#loc526 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":359:9)
#loc527 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":363:9)
#loc528 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":361:13)
#loc529 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":361:33)
#loc530 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":361:26)
#loc531 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":362:26)
#loc532 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":362:13)
#loc533 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":368:1)
#loc534 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":386:1)
#loc535 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":370:5)
#loc536 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":370:9)
#loc537 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":372:12)
#loc538 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":372:5)
#loc539 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":373:5)
#loc540 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":377:5)
#loc541 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":373:8)
#loc542 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":373:26)
#loc543 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":374:5)
#loc544 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":376:16)
#loc545 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":376:9)
#loc546 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":378:5)
#loc547 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":385:5)
#loc548 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":378:8)
#loc549 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":378:26)
#loc550 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":379:5)
#loc551 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":380:9)
#loc552 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":384:9)
#loc553 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":382:13)
#loc554 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":382:33)
#loc555 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":382:26)
#loc556 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":383:26)
#loc557 = loc("CWE190_Integer_Overflow__int_listen_socket_square_08.c":383:13)
#loc558 = loc(fused[#loc1, #loc2])
#loc559 = loc(fused[#loc3, #loc4])
#loc560 = loc(fused[#loc5, #loc6])
#loc561 = loc(fused[#loc7, #loc8])
#loc562 = loc(fused[#loc9, #loc10])
#loc563 = loc(fused[#loc11, #loc12])
#loc564 = loc(fused[#loc13, #loc14])
#loc565 = loc(fused[#loc15, #loc16])
#loc566 = loc(fused[#loc17, #loc18])
#loc567 = loc(fused[#loc19, #loc20])
#loc568 = loc(fused[#loc21, #loc22])
#loc569 = loc(fused[#loc24, #loc23])
#loc570 = loc(fused[#loc25, #loc26])
#loc571 = loc(fused[#loc27, #loc28])
#loc572 = loc(fused[#loc29, #loc26])
#loc573 = loc(fused[#loc30, #loc31])
#loc574 = loc(fused[#loc32, #loc33])
#loc575 = loc(fused[#loc34, #loc35])
#loc576 = loc(fused[#loc36, #loc37])
#loc577 = loc(fused[#loc38, #loc39])
#loc578 = loc(fused[#loc40, #loc41])
#loc579 = loc(fused[#loc42, #loc43])
#loc580 = loc(fused[#loc48, #loc49])
#loc581 = loc(fused[#loc50, #loc51])
#loc582 = loc(fused[#loc52, #loc53])
#loc583 = loc(fused[#loc54, #loc51])
#loc584 = loc(fused[#loc56, #loc57])
#loc585 = loc(fused[#loc59, #loc60])
#loc586 = loc(fused[#loc61, #loc62])
#loc587 = loc(fused[#loc65, #loc63])
#loc588 = loc(fused[#loc69, #loc66])
#loc589 = loc(fused[#loc73, #loc74])
#loc590 = loc(fused[#loc75, #loc76])
#loc591 = loc(fused[#loc78, #loc79])
#loc592 = loc(fused[#loc80, #loc81])
#loc593 = loc(fused[#loc82, #loc83])
#loc594 = loc(fused[#loc84, #loc76])
#loc595 = loc(fused[#loc86, #loc87])
#loc596 = loc(fused[#loc90, #loc91])
#loc597 = loc(fused[#loc92, #loc87])
#loc598 = loc(fused[#loc98, #loc99])
#loc599 = loc(fused[#loc100, #loc101])
#loc600 = loc(fused[#loc102, #loc103])
#loc601 = loc(fused[#loc104, #loc101])
#loc602 = loc(fused[#loc108, #loc109])
#loc603 = loc(fused[#loc112, #loc113])
#loc604 = loc(fused[#loc114, #loc115])
#loc605 = loc(fused[#loc116, #loc117])
#loc606 = loc(fused[#loc119, #loc120])
#loc607 = loc(fused[#loc121, #loc115])
#loc608 = loc(fused[#loc125, #loc123])
#loc609 = loc(fused[#loc128, #loc129])
#loc610 = loc(fused[#loc131, #loc132])
#loc611 = loc(fused[#loc133, #loc134])
#loc612 = loc(fused[#loc135, #loc132])
#loc613 = loc(fused[#loc138, #loc139])
#loc614 = loc(fused[#loc140, #loc141])
#loc615 = loc(fused[#loc142, #loc139])
#loc616 = loc(fused[#loc145, #loc146])
#loc617 = loc(fused[#loc147, #loc148])
#loc618 = loc(fused[#loc149, #loc146])
#loc619 = loc(fused[#loc150, #loc151])
#loc620 = loc(fused[#loc152, #loc153])
#loc621 = loc(fused[#loc157, #loc158])
#loc622 = loc(fused[#loc159, #loc160])
#loc623 = loc(fused[#loc161, #loc162])
#loc624 = loc(fused[#loc163, #loc164])
#loc625 = loc(fused[#loc165, #loc166])
#loc626 = loc(fused[#loc167, #loc168])
#loc627 = loc(fused[#loc169, #loc170])
#loc628 = loc(fused[#loc171, #loc172])
#loc629 = loc(fused[#loc177, #loc178])
#loc632 = loc(fused[#loc188, #loc189])
#loc633 = loc(fused[#loc192, #loc193])
#loc634 = loc(fused[#loc196, #loc195])
#loc635 = loc(fused[#loc197, #loc198])
#loc636 = loc(fused[#loc200, #loc199])
#loc637 = loc(fused[#loc204, #loc205])
#loc638 = loc(fused[#loc206, #loc207])
#loc639 = loc(fused[#loc209, #loc208])
#loc640 = loc(fused[#loc210, #loc211])
#loc641 = loc(fused[#loc212, #loc213])
#loc642 = loc(fused[#loc214, #loc211])
#loc643 = loc(fused[#loc215, #loc216])
#loc644 = loc(fused[#loc217, #loc218])
#loc645 = loc(fused[#loc219, #loc220])
#loc646 = loc(fused[#loc221, #loc222])
#loc647 = loc(fused[#loc223, #loc224])
#loc648 = loc(fused[#loc225, #loc226])
#loc649 = loc(fused[#loc227, #loc228])
#loc650 = loc(fused[#loc233, #loc234])
#loc651 = loc(fused[#loc235, #loc236])
#loc652 = loc(fused[#loc237, #loc238])
#loc653 = loc(fused[#loc239, #loc236])
#loc654 = loc(fused[#loc241, #loc242])
#loc655 = loc(fused[#loc244, #loc245])
#loc656 = loc(fused[#loc246, #loc247])
#loc657 = loc(fused[#loc249, #loc248])
#loc658 = loc(fused[#loc251, #loc250])
#loc659 = loc(fused[#loc254, #loc255])
#loc660 = loc(fused[#loc256, #loc257])
#loc661 = loc(fused[#loc259, #loc260])
#loc662 = loc(fused[#loc261, #loc262])
#loc663 = loc(fused[#loc263, #loc264])
#loc664 = loc(fused[#loc265, #loc257])
#loc665 = loc(fused[#loc267, #loc268])
#loc666 = loc(fused[#loc271, #loc272])
#loc667 = loc(fused[#loc273, #loc268])
#loc668 = loc(fused[#loc279, #loc280])
#loc669 = loc(fused[#loc281, #loc282])
#loc670 = loc(fused[#loc283, #loc284])
#loc671 = loc(fused[#loc285, #loc282])
#loc672 = loc(fused[#loc289, #loc290])
#loc673 = loc(fused[#loc293, #loc294])
#loc674 = loc(fused[#loc295, #loc296])
#loc675 = loc(fused[#loc297, #loc298])
#loc676 = loc(fused[#loc300, #loc301])
#loc677 = loc(fused[#loc302, #loc296])
#loc678 = loc(fused[#loc306, #loc304])
#loc679 = loc(fused[#loc309, #loc310])
#loc680 = loc(fused[#loc312, #loc313])
#loc681 = loc(fused[#loc314, #loc315])
#loc682 = loc(fused[#loc316, #loc313])
#loc683 = loc(fused[#loc319, #loc320])
#loc684 = loc(fused[#loc321, #loc322])
#loc685 = loc(fused[#loc323, #loc320])
#loc686 = loc(fused[#loc326, #loc327])
#loc687 = loc(fused[#loc328, #loc329])
#loc688 = loc(fused[#loc330, #loc331, #loc332, #loc327])
#loc689 = loc(fused[#loc334, #loc335])
#loc690 = loc(fused[#loc336, #loc337])
#loc691 = loc(fused[#loc340, #loc343])
#loc692 = loc(fused[#loc344, #loc345, #loc346, #loc335])
#loc693 = loc(fused[#loc347, #loc348])
#loc694 = loc(fused[#loc353, #loc354])
#loc695 = loc(fused[#loc356, #loc355])
#loc696 = loc(fused[#loc357, #loc358])
#loc697 = loc(fused[#loc359, #loc360])
#loc698 = loc(fused[#loc362, #loc361])
#loc699 = loc(fused[#loc363, #loc364])
#loc700 = loc(fused[#loc365, #loc366])
#loc701 = loc(fused[#loc367, #loc364])
#loc702 = loc(fused[#loc368, #loc369])
#loc703 = loc(fused[#loc370, #loc371])
#loc704 = loc(fused[#loc372, #loc373])
#loc705 = loc(fused[#loc374, #loc375])
#loc706 = loc(fused[#loc376, #loc377])
#loc707 = loc(fused[#loc378, #loc379])
#loc708 = loc(fused[#loc380, #loc381])
#loc709 = loc(fused[#loc386, #loc387])
#loc710 = loc(fused[#loc388, #loc389])
#loc711 = loc(fused[#loc390, #loc391])
#loc712 = loc(fused[#loc392, #loc389])
#loc713 = loc(fused[#loc394, #loc395])
#loc714 = loc(fused[#loc397, #loc398])
#loc715 = loc(fused[#loc399, #loc400])
#loc716 = loc(fused[#loc402, #loc401])
#loc717 = loc(fused[#loc404, #loc403])
#loc718 = loc(fused[#loc407, #loc408])
#loc719 = loc(fused[#loc409, #loc410])
#loc720 = loc(fused[#loc412, #loc413])
#loc721 = loc(fused[#loc414, #loc415])
#loc722 = loc(fused[#loc416, #loc417])
#loc723 = loc(fused[#loc418, #loc410])
#loc724 = loc(fused[#loc420, #loc421])
#loc725 = loc(fused[#loc424, #loc425])
#loc726 = loc(fused[#loc426, #loc421])
#loc727 = loc(fused[#loc432, #loc433])
#loc728 = loc(fused[#loc434, #loc435])
#loc729 = loc(fused[#loc436, #loc437])
#loc730 = loc(fused[#loc438, #loc435])
#loc731 = loc(fused[#loc442, #loc443])
#loc732 = loc(fused[#loc446, #loc447])
#loc733 = loc(fused[#loc448, #loc449])
#loc734 = loc(fused[#loc450, #loc451])
#loc735 = loc(fused[#loc453, #loc454])
#loc736 = loc(fused[#loc455, #loc449])
#loc737 = loc(fused[#loc459, #loc457])
#loc738 = loc(fused[#loc462, #loc463])
#loc739 = loc(fused[#loc465, #loc466])
#loc740 = loc(fused[#loc467, #loc468])
#loc741 = loc(fused[#loc469, #loc466])
#loc742 = loc(fused[#loc472, #loc473])
#loc743 = loc(fused[#loc474, #loc475])
#loc744 = loc(fused[#loc476, #loc473])
#loc745 = loc(fused[#loc479, #loc480])
#loc746 = loc(fused[#loc481, #loc482])
#loc747 = loc(fused[#loc483, #loc480])
#loc748 = loc(fused[#loc484, #loc485])
#loc749 = loc(fused[#loc486, #loc487])
#loc750 = loc(fused[#loc490, #loc493])
#loc751 = loc(fused[#loc494, #loc495, #loc496, #loc485])
#loc752 = loc(fused[#loc497, #loc498])
#loc753 = loc(fused[#loc504, #loc505])
#loc754 = loc(fused[#loc506, #loc507])
#loc755 = loc(fused[#loc509, #loc508])
#loc756 = loc(fused[#loc510, #loc511])
#loc757 = loc(fused[#loc512, #loc513])
#loc758 = loc(fused[#loc514, #loc515, #loc516, #loc511])
#loc759 = loc(fused[#loc520, #loc519])
#loc760 = loc(fused[#loc521, #loc522])
#loc761 = loc(fused[#loc523, #loc524])
#loc762 = loc(fused[#loc525, #loc522])
#loc763 = loc(fused[#loc526, #loc527])
#loc764 = loc(fused[#loc528, #loc529])
#loc765 = loc(fused[#loc533, #loc534])
#loc766 = loc(fused[#loc535, #loc536])
#loc767 = loc(fused[#loc538, #loc537])
#loc768 = loc(fused[#loc539, #loc540])
#loc769 = loc(fused[#loc541, #loc542])
#loc770 = loc(fused[#loc543, #loc540])
#loc771 = loc(fused[#loc545, #loc544])
#loc772 = loc(fused[#loc546, #loc547])
#loc773 = loc(fused[#loc548, #loc549])
#loc774 = loc(fused[#loc550, #loc547])
#loc775 = loc(fused[#loc551, #loc552])
#loc776 = loc(fused[#loc553, #loc554])
