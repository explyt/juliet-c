!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc81 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":157:10)
#loc82 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":157:14)
#loc83 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":157:20)
#loc84 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":157:32)
#true = #cir.bool<true> : !cir.bool
#loc236 = loc(fused[#loc81, #loc82])
#loc237 = loc(fused[#loc83, #loc84])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc205)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc206)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc207)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc208)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"hello\00" : !cir.array<!s8i x 6>> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc209)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc210)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Input is less than the length of the source string\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc14)
  cir.func no_proto @CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["data"] {alignment = 8 : i64} loc(#loc212)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc19)
    %2 = cir.cast(integral, %1 : !s32i), !u64i loc(#loc19)
    cir.store %2, %0 : !u64i, !cir.ptr<!u64i> loc(#loc213)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc23)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc23)
        cir.condition(%4) loc(#loc23)
      } do {
        %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
        %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc24)
        cir.store %4, %0 : !u64i, !cir.ptr<!u64i> loc(#loc215)
        cir.break loc(#loc27)
      } loc(#loc214)
    } loc(#loc214)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc30)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc30)
        cir.condition(%4) loc(#loc30)
      } do {
        cir.scope {
          %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["myString"] {alignment = 8 : i64} loc(#loc218)
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc37)
            %5 = cir.const #cir.int<5> : !u64i loc(#loc220)
            %6 = cir.cmp(gt, %4, %5) : !u64i, !cir.bool loc(#loc221)
            cir.if %6 {
              %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc43)
              %8 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc44)
              %9 = cir.const #cir.int<1> : !u64i loc(#loc223)
              %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc224)
              %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc43)
              %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc225)
              cir.store %12, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc226)
              cir.scope {
                %22 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
                %23 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc52)
                %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc52)
                %25 = cir.cmp(eq, %22, %24) : !cir.ptr<!s8i>, !cir.bool loc(#loc228)
                cir.if %25 {
                  %26 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc54)
                  %27 = cir.const #cir.int<1> : !s32i loc(#loc55)
                  %28 = cir.unary(minus, %27) : !s32i, !s32i loc(#loc56)
                  cir.call @exit(%28) : (!s32i) -> () extra(#fn_attr) loc(#loc54)
                } loc(#loc229)
              } loc(#loc227)
              %13 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc57)
              %14 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc58)
              %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc9)
              %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc9)
              %17 = cir.call @strcpy(%14, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc57)
              %18 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
              cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc60)
              %19 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc61)
              %20 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
              %21 = cir.cast(bitcast, %20 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc62)
              cir.call @free(%21) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc61)
            } else {
              %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc14)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc14)
              cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc63)
            } loc(#loc222)
          } loc(#loc219)
        } loc(#loc217)
        cir.break loc(#loc64)
      } loc(#loc216)
    } loc(#loc216)
    cir.return loc(#loc16)
  } loc(#loc211)
  cir.func no_proto @CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc231)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc67)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc232)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc69)
    cir.return loc(#loc66)
  } loc(#loc230)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc233)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc234)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc76)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc78)
  cir.func @main(%arg0: !s32i loc(fused[#loc81, #loc82]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc83, #loc84])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc236)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc237)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc80)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc85)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc86)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc87)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc87)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc88)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc75)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    %8 = cir.get_global @CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc238)
    cir.call @CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16_good() : () -> () loc(#loc90)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc76)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc77)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    %13 = cir.get_global @CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc239)
    cir.call @CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16_bad() : () -> () loc(#loc94)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc78)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc97)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc240)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc240)
    cir.return %17 : !s32i loc(#loc240)
  } loc(#loc235)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Input is less than the length of the source string or too large\00" : !cir.array<!s8i x 64>> : !cir.array<!s8i x 64> {alignment = 1 : i64} loc(#loc99)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["data"] {alignment = 8 : i64} loc(#loc242)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc104)
    %2 = cir.cast(integral, %1 : !s32i), !u64i loc(#loc104)
    cir.store %2, %0 : !u64i, !cir.ptr<!u64i> loc(#loc243)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc108)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc108)
        cir.condition(%4) loc(#loc108)
      } do {
        %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
        %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc109)
        cir.store %4, %0 : !u64i, !cir.ptr<!u64i> loc(#loc245)
        cir.break loc(#loc112)
      } loc(#loc244)
    } loc(#loc244)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc115)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc115)
        cir.condition(%4) loc(#loc115)
      } do {
        cir.scope {
          %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["myString"] {alignment = 8 : i64} loc(#loc248)
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc122)
            %5 = cir.const #cir.int<5> : !u64i loc(#loc250)
            %6 = cir.cmp(gt, %4, %5) : !u64i, !cir.bool loc(#loc251)
            %7 = cir.ternary(%6, true {
              %8 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc126)
              %9 = cir.const #cir.int<100> : !s32i loc(#loc127)
              %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc127)
              %11 = cir.cmp(lt, %8, %10) : !u64i, !cir.bool loc(#loc252)
              %12 = cir.ternary(%11, true {
                %13 = cir.const #true loc(#loc125)
                cir.yield %13 : !cir.bool loc(#loc125)
              }, false {
                %13 = cir.const #false loc(#loc125)
                cir.yield %13 : !cir.bool loc(#loc125)
              }) : (!cir.bool) -> !cir.bool loc(#loc125)
              cir.yield %12 : !cir.bool loc(#loc125)
            }, false {
              %8 = cir.const #false loc(#loc125)
              cir.yield %8 : !cir.bool loc(#loc125)
            }) : (!cir.bool) -> !cir.bool loc(#loc125)
            cir.if %7 {
              %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc131)
              %9 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc132)
              %10 = cir.const #cir.int<1> : !u64i loc(#loc254)
              %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc255)
              %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc131)
              %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc256)
              cir.store %13, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc257)
              cir.scope {
                %23 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc139)
                %24 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc140)
                %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc140)
                %26 = cir.cmp(eq, %23, %25) : !cir.ptr<!s8i>, !cir.bool loc(#loc259)
                cir.if %26 {
                  %27 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc142)
                  %28 = cir.const #cir.int<1> : !s32i loc(#loc143)
                  %29 = cir.unary(minus, %28) : !s32i, !s32i loc(#loc144)
                  cir.call @exit(%29) : (!s32i) -> () extra(#fn_attr) loc(#loc142)
                } loc(#loc260)
              } loc(#loc258)
              %14 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc145)
              %15 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc146)
              %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc147)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc147)
              %18 = cir.call @strcpy(%15, %17) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc145)
              %19 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc148)
              cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc149)
              %20 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc150)
              %21 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc151)
              %22 = cir.cast(bitcast, %21 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc151)
              cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc150)
            } else {
              %8 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 64>> loc(#loc99)
              %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 64>>), !cir.ptr<!s8i> loc(#loc99)
              cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc152)
            } loc(#loc253)
          } loc(#loc249)
        } loc(#loc247)
        cir.break loc(#loc153)
      } loc(#loc246)
    } loc(#loc246)
    cir.return loc(#loc101)
  } loc(#loc241)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["data"] {alignment = 8 : i64} loc(#loc262)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc158)
    %2 = cir.cast(integral, %1 : !s32i), !u64i loc(#loc158)
    cir.store %2, %0 : !u64i, !cir.ptr<!u64i> loc(#loc263)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc162)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc162)
        cir.condition(%4) loc(#loc162)
      } do {
        %3 = cir.const #cir.int<20> : !s32i loc(#loc163)
        %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc163)
        cir.store %4, %0 : !u64i, !cir.ptr<!u64i> loc(#loc265)
        cir.break loc(#loc165)
      } loc(#loc264)
    } loc(#loc264)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc168)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc168)
        cir.condition(%4) loc(#loc168)
      } do {
        cir.scope {
          %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["myString"] {alignment = 8 : i64} loc(#loc268)
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc175)
            %5 = cir.const #cir.int<5> : !u64i loc(#loc270)
            %6 = cir.cmp(gt, %4, %5) : !u64i, !cir.bool loc(#loc271)
            cir.if %6 {
              %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc181)
              %8 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc182)
              %9 = cir.const #cir.int<1> : !u64i loc(#loc273)
              %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc274)
              %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc181)
              %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc275)
              cir.store %12, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc276)
              cir.scope {
                %22 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc189)
                %23 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc190)
                %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc190)
                %25 = cir.cmp(eq, %22, %24) : !cir.ptr<!s8i>, !cir.bool loc(#loc278)
                cir.if %25 {
                  %26 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc192)
                  %27 = cir.const #cir.int<1> : !s32i loc(#loc193)
                  %28 = cir.unary(minus, %27) : !s32i, !s32i loc(#loc194)
                  cir.call @exit(%28) : (!s32i) -> () extra(#fn_attr) loc(#loc192)
                } loc(#loc279)
              } loc(#loc277)
              %13 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc195)
              %14 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc196)
              %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc197)
              %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc197)
              %17 = cir.call @strcpy(%14, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc195)
              %18 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc198)
              cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc199)
              %19 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc200)
              %20 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc201)
              %21 = cir.cast(bitcast, %20 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc201)
              cir.call @free(%21) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc200)
            } else {
              %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc202)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc202)
              cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc203)
            } loc(#loc272)
          } loc(#loc269)
        } loc(#loc267)
        cir.break loc(#loc204)
      } loc(#loc266)
    } loc(#loc266)
    cir.return loc(#loc155)
  } loc(#loc261)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("/usr/include/string.h":141:1)
#loc8 = loc("/usr/include/string.h":142:14)
#loc9 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":51:34)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc12 = loc("/usr/include/stdlib.h":687:1)
#loc13 = loc("/usr/include/stdlib.h":687:32)
#loc14 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":57:27)
#loc15 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":28:1)
#loc16 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":62:1)
#loc17 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":30:5)
#loc18 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":30:12)
#loc19 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":32:12)
#loc20 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":32:5)
#loc21 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":33:5)
#loc22 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":38:5)
#loc23 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":33:11)
#loc24 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":36:16)
#loc25 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":36:9)
#loc26 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":36:21)
#loc27 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":37:9)
#loc28 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":39:5)
#loc29 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":61:5)
#loc30 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":39:11)
#loc31 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":41:9)
#loc32 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":59:9)
#loc33 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":42:13)
#loc34 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":42:20)
#loc35 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":46:13)
#loc36 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":58:13)
#loc37 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":46:17)
#loc38 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":46:24)
#loc39 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":46:43)
#loc40 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":47:13)
#loc41 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":54:13)
#loc42 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":56:13)
#loc43 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":48:36)
#loc44 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":48:43)
#loc45 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":48:48)
#loc46 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":48:59)
#loc47 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":48:60)
#loc48 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":48:17)
#loc49 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":49:17)
#loc50 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":49:49)
#loc51 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":49:21)
#loc52 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":49:33)
#loc53 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":49:39)
#loc54 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":49:40)
#loc55 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":49:46)
#loc56 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":49:45)
#loc57 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":51:17)
#loc58 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":51:24)
#loc59 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":52:27)
#loc60 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":52:17)
#loc61 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":53:17)
#loc62 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":53:22)
#loc63 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":57:17)
#loc64 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":60:9)
#loc65 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":142:1)
#loc66 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":146:1)
#loc67 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":144:5)
#loc68 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":144:13)
#loc69 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":145:5)
#loc70 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":145:13)
#loc71 = loc("/usr/include/stdlib.h":575:1)
#loc72 = loc("/usr/include/stdlib.h":575:41)
#loc73 = loc("/usr/include/time.h":76:1)
#loc74 = loc("/usr/include/time.h":76:38)
#loc75 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":162:15)
#loc76 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":164:15)
#loc77 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":167:15)
#loc78 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":169:15)
#loc79 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":157:1)
#loc80 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":172:1)
#loc85 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":158:1)
#loc86 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":160:27)
#loc87 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":160:22)
#loc88 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":160:5)
#loc89 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":162:5)
#loc90 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":163:5)
#loc91 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":163:61)
#loc92 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":164:5)
#loc93 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":167:5)
#loc94 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":168:5)
#loc95 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":168:60)
#loc96 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":169:5)
#loc97 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":171:12)
#loc98 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":171:5)
#loc99 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":98:27)
#loc100 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":69:1)
#loc101 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":103:1)
#loc102 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":71:5)
#loc103 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":71:12)
#loc104 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":73:12)
#loc105 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":73:5)
#loc106 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":74:5)
#loc107 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":79:5)
#loc108 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":74:11)
#loc109 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":77:16)
#loc110 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":77:9)
#loc111 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":77:21)
#loc112 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":78:9)
#loc113 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":80:5)
#loc114 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":102:5)
#loc115 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":80:11)
#loc116 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":82:9)
#loc117 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":100:9)
#loc118 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":83:13)
#loc119 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":83:20)
#loc120 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":87:13)
#loc121 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":99:13)
#loc122 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":87:17)
#loc123 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":87:24)
#loc124 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":87:43)
#loc125 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":87:45)
#loc126 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":87:48)
#loc127 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":87:55)
#loc128 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":88:13)
#loc129 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":95:13)
#loc130 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":97:13)
#loc131 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":89:36)
#loc132 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":89:43)
#loc133 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":89:48)
#loc134 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":89:59)
#loc135 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":89:60)
#loc136 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":89:17)
#loc137 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":90:17)
#loc138 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":90:49)
#loc139 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":90:21)
#loc140 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":90:33)
#loc141 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":90:39)
#loc142 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":90:40)
#loc143 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":90:46)
#loc144 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":90:45)
#loc145 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":92:17)
#loc146 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":92:24)
#loc147 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":92:34)
#loc148 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":93:27)
#loc149 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":93:17)
#loc150 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":94:17)
#loc151 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":94:22)
#loc152 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":98:17)
#loc153 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":101:9)
#loc154 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":106:1)
#loc155 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":140:1)
#loc156 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":108:5)
#loc157 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":108:12)
#loc158 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":110:12)
#loc159 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":110:5)
#loc160 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":111:5)
#loc161 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":116:5)
#loc162 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":111:11)
#loc163 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":114:16)
#loc164 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":114:9)
#loc165 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":115:9)
#loc166 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":117:5)
#loc167 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":139:5)
#loc168 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":117:11)
#loc169 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":119:9)
#loc170 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":137:9)
#loc171 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":120:13)
#loc172 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":120:20)
#loc173 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":124:13)
#loc174 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":136:13)
#loc175 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":124:17)
#loc176 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":124:24)
#loc177 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":124:43)
#loc178 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":125:13)
#loc179 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":132:13)
#loc180 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":134:13)
#loc181 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":126:36)
#loc182 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":126:43)
#loc183 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":126:48)
#loc184 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":126:59)
#loc185 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":126:60)
#loc186 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":126:17)
#loc187 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":127:17)
#loc188 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":127:49)
#loc189 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":127:21)
#loc190 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":127:33)
#loc191 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":127:39)
#loc192 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":127:40)
#loc193 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":127:46)
#loc194 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":127:45)
#loc195 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":129:17)
#loc196 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":129:24)
#loc197 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":129:34)
#loc198 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":130:27)
#loc199 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":130:17)
#loc200 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":131:17)
#loc201 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":131:22)
#loc202 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":135:27)
#loc203 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":135:17)
#loc204 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":138:9)
#loc205 = loc(fused[#loc1, #loc2])
#loc206 = loc(fused[#loc3, #loc4])
#loc207 = loc(fused[#loc5, #loc6])
#loc208 = loc(fused[#loc7, #loc8])
#loc209 = loc(fused[#loc10, #loc11])
#loc210 = loc(fused[#loc12, #loc13])
#loc211 = loc(fused[#loc15, #loc16])
#loc212 = loc(fused[#loc17, #loc18])
#loc213 = loc(fused[#loc20, #loc19])
#loc214 = loc(fused[#loc21, #loc22])
#loc215 = loc(fused[#loc25, #loc26])
#loc216 = loc(fused[#loc28, #loc29])
#loc217 = loc(fused[#loc31, #loc32])
#loc218 = loc(fused[#loc33, #loc34])
#loc219 = loc(fused[#loc35, #loc36])
#loc220 = loc(fused[#loc38, #loc39])
#loc221 = loc(fused[#loc37, #loc39])
#loc222 = loc(fused[#loc40, #loc41, #loc42, #loc36])
#loc223 = loc(fused[#loc45, #loc46])
#loc224 = loc(fused[#loc44, #loc46])
#loc225 = loc(fused[#loc43, #loc47])
#loc226 = loc(fused[#loc48, #loc47])
#loc227 = loc(fused[#loc49, #loc50])
#loc228 = loc(fused[#loc51, #loc52])
#loc229 = loc(fused[#loc53, #loc50])
#loc230 = loc(fused[#loc65, #loc66])
#loc231 = loc(fused[#loc67, #loc68])
#loc232 = loc(fused[#loc69, #loc70])
#loc233 = loc(fused[#loc71, #loc72])
#loc234 = loc(fused[#loc73, #loc74])
#loc235 = loc(fused[#loc79, #loc80])
#loc238 = loc(fused[#loc90, #loc91])
#loc239 = loc(fused[#loc94, #loc95])
#loc240 = loc(fused[#loc98, #loc97])
#loc241 = loc(fused[#loc100, #loc101])
#loc242 = loc(fused[#loc102, #loc103])
#loc243 = loc(fused[#loc105, #loc104])
#loc244 = loc(fused[#loc106, #loc107])
#loc245 = loc(fused[#loc110, #loc111])
#loc246 = loc(fused[#loc113, #loc114])
#loc247 = loc(fused[#loc116, #loc117])
#loc248 = loc(fused[#loc118, #loc119])
#loc249 = loc(fused[#loc120, #loc121])
#loc250 = loc(fused[#loc123, #loc124])
#loc251 = loc(fused[#loc122, #loc124])
#loc252 = loc(fused[#loc126, #loc127])
#loc253 = loc(fused[#loc128, #loc129, #loc130, #loc121])
#loc254 = loc(fused[#loc133, #loc134])
#loc255 = loc(fused[#loc132, #loc134])
#loc256 = loc(fused[#loc131, #loc135])
#loc257 = loc(fused[#loc136, #loc135])
#loc258 = loc(fused[#loc137, #loc138])
#loc259 = loc(fused[#loc139, #loc140])
#loc260 = loc(fused[#loc141, #loc138])
#loc261 = loc(fused[#loc154, #loc155])
#loc262 = loc(fused[#loc156, #loc157])
#loc263 = loc(fused[#loc159, #loc158])
#loc264 = loc(fused[#loc160, #loc161])
#loc265 = loc(fused[#loc164, #loc163])
#loc266 = loc(fused[#loc166, #loc167])
#loc267 = loc(fused[#loc169, #loc170])
#loc268 = loc(fused[#loc171, #loc172])
#loc269 = loc(fused[#loc173, #loc174])
#loc270 = loc(fused[#loc176, #loc177])
#loc271 = loc(fused[#loc175, #loc177])
#loc272 = loc(fused[#loc178, #loc179, #loc180, #loc174])
#loc273 = loc(fused[#loc183, #loc184])
#loc274 = loc(fused[#loc182, #loc184])
#loc275 = loc(fused[#loc181, #loc185])
#loc276 = loc(fused[#loc186, #loc185])
#loc277 = loc(fused[#loc187, #loc188])
#loc278 = loc(fused[#loc189, #loc190])
#loc279 = loc(fused[#loc191, #loc188])
