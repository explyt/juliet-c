!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__int64_t_fscanf_add_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc182)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc183)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%ld\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc184)
  cir.func private  @printLongLongLine(!s64i) loc(#loc185)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_fscanf_add_08_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc187)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc13)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc188)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc190)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc17)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc17)
      cir.if %4 {
        %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc20)
        %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc183)
        %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc21)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc184)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc184)
        %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc20)
      } loc(#loc191)
    } loc(#loc189)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc193)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc24)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc24)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc196)
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc31)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc30)
          %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc30)
          %9 = cir.binop(add, %6, %8) nsw : !s64i loc(#loc31)
          cir.store %9, %5 : !s64i, !cir.ptr<!s64i> loc(#loc196)
          %10 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc32)
          cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc33)
        } loc(#loc195)
      } loc(#loc194)
    } loc(#loc192)
    cir.return loc(#loc10)
  } loc(#loc186)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_fscanf_add_08_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc198)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc199)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc200)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc201)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    cir.return loc(#loc35)
  } loc(#loc197)
  cir.func no_proto internal private  @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc45)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc46)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc203)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc203)
    cir.return %2 : !s32i loc(#loc203)
  } loc(#loc202)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc204)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc50)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc51)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc206)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc56)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc207)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc209)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc60)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc60)
      cir.if %4 {
        %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc63)
        %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc183)
        %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc64)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc211)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc211)
        %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc63)
      } loc(#loc210)
    } loc(#loc208)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc213)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc69)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc69)
      cir.if %4 {
        %5 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc50)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc50)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc74)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc77)
          %6 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc78)
          %7 = cir.cmp(lt, %5, %6) : !s64i, !s32i loc(#loc216)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc79)
          cir.if %8 {
            %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc218)
            %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc85)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc84)
            %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc84)
            %13 = cir.binop(add, %10, %12) nsw : !s64i loc(#loc85)
            cir.store %13, %9 : !s64i, !cir.ptr<!s64i> loc(#loc218)
            %14 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc86)
            cir.call @printLongLongLine(%14) : (!s64i) -> () loc(#loc87)
          } else {
            %9 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc51)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc51)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc88)
          } loc(#loc217)
        } loc(#loc215)
      } loc(#loc214)
    } loc(#loc212)
    cir.return loc(#loc53)
  } loc(#loc205)
  cir.func no_proto internal private  @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc90)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc91)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc220)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc220)
    cir.return %2 : !s32i loc(#loc220)
  } loc(#loc219)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc222)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc97)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc223)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc225)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc101)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc101)
      cir.if %4 {
        %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc104)
        %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc183)
        %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc105)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc227)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc227)
        %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc104)
      } loc(#loc226)
    } loc(#loc224)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc229)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc110)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc110)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc115)
          %6 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc116)
          %7 = cir.cmp(lt, %5, %6) : !s64i, !s32i loc(#loc232)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc117)
          cir.if %8 {
            %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc234)
            %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc123)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc122)
            %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc122)
            %13 = cir.binop(add, %10, %12) nsw : !s64i loc(#loc123)
            cir.store %13, %9 : !s64i, !cir.ptr<!s64i> loc(#loc234)
            %14 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc124)
            cir.call @printLongLongLine(%14) : (!s64i) -> () loc(#loc125)
          } else {
            %9 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc126)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc126)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc127)
          } loc(#loc233)
        } loc(#loc231)
      } loc(#loc230)
    } loc(#loc228)
    cir.return loc(#loc94)
  } loc(#loc221)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc236)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc132)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc237)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc239)
      %3 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc136)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc136)
      cir.if %4 {
        %5 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc141)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc141)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc142)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc143)
        %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc143)
        cir.store %6, %0 : !s64i, !cir.ptr<!s64i> loc(#loc241)
      } loc(#loc240)
    } loc(#loc238)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc243)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc147)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc147)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc246)
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc154)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc153)
          %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc153)
          %9 = cir.binop(add, %6, %8) nsw : !s64i loc(#loc154)
          cir.store %9, %5 : !s64i, !cir.ptr<!s64i> loc(#loc246)
          %10 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc155)
          cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc156)
        } loc(#loc245)
      } loc(#loc244)
    } loc(#loc242)
    cir.return loc(#loc129)
  } loc(#loc235)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc248)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc161)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc249)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc251)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc165)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc165)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc168)
        %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc168)
        cir.store %6, %0 : !s64i, !cir.ptr<!s64i> loc(#loc253)
      } loc(#loc252)
    } loc(#loc250)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc255)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc172)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc172)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc258)
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc179)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc178)
          %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc178)
          %9 = cir.binop(add, %6, %8) nsw : !s64i loc(#loc179)
          cir.store %9, %5 : !s64i, !cir.ptr<!s64i> loc(#loc258)
          %10 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc180)
          cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc181)
        } loc(#loc257)
      } loc(#loc256)
    } loc(#loc254)
    cir.return loc(#loc158)
  } loc(#loc247)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":43:24)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":43:28)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":36:1)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":53:1)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":38:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":38:13)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":39:12)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":39:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":40:5)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":44:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":40:8)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":40:26)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":41:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":43:9)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":43:17)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":45:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":52:5)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":45:8)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":45:26)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":46:5)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":47:9)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":51:9)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":49:13)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":49:37)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":49:30)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":50:31)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":50:13)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":159:1)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":165:1)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":161:5)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":161:14)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":162:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":162:14)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":163:5)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":163:14)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":164:5)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":164:14)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":24:1)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":27:1)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":26:12)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":26:5)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":72:19)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":84:23)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":60:1)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":87:1)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":62:5)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":62:13)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":63:12)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":63:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":64:5)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":68:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":64:8)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":64:26)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":65:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":67:9)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":67:17)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":67:24)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":67:28)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":69:5)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":86:5)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":69:8)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":69:27)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":70:5)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":73:5)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":75:5)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":72:9)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":77:9)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":85:9)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":77:13)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":77:20)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":77:18)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":78:9)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":81:9)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":83:9)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":79:13)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":79:37)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":79:30)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":80:31)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":80:13)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":84:13)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":29:1)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":32:1)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":31:12)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":31:5)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":90:1)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":112:1)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":92:5)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":92:13)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":93:12)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":93:5)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":94:5)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":98:5)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":94:8)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":94:26)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":95:5)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":97:9)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":97:17)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":97:24)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":97:28)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":99:5)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":111:5)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":99:8)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":99:26)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":100:5)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":102:9)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":110:9)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":102:13)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":102:20)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":102:18)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":103:9)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":106:9)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":108:9)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":104:13)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":104:37)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":104:30)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":105:31)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":105:13)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":109:23)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":109:13)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":115:1)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":137:1)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":117:5)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":117:13)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":118:12)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":118:5)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":119:5)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":128:5)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":119:8)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":119:27)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":120:5)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":123:5)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":125:5)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":122:19)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":122:9)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":127:16)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":127:9)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":129:5)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":136:5)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":129:8)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":129:26)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":130:5)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":131:9)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":135:9)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":133:13)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":133:37)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":133:30)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":134:31)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":134:13)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":140:1)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":157:1)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":142:5)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":142:13)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":143:12)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":143:5)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":144:5)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":148:5)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":144:8)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":144:26)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":145:5)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":147:16)
#loc169 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":147:9)
#loc170 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":149:5)
#loc171 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":156:5)
#loc172 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":149:8)
#loc173 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":149:26)
#loc174 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":150:5)
#loc175 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":151:9)
#loc176 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":155:9)
#loc177 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":153:13)
#loc178 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":153:37)
#loc179 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":153:30)
#loc180 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":154:31)
#loc181 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_08.c":154:13)
#loc182 = loc(fused[#loc1, #loc2])
#loc183 = loc(fused[#loc3, #loc4])
#loc184 = loc(fused[#loc5, #loc6])
#loc185 = loc(fused[#loc7, #loc8])
#loc186 = loc(fused[#loc9, #loc10])
#loc187 = loc(fused[#loc11, #loc12])
#loc188 = loc(fused[#loc14, #loc13])
#loc189 = loc(fused[#loc15, #loc16])
#loc190 = loc(fused[#loc17, #loc18])
#loc191 = loc(fused[#loc19, #loc16])
#loc192 = loc(fused[#loc22, #loc23])
#loc193 = loc(fused[#loc24, #loc25])
#loc194 = loc(fused[#loc26, #loc23])
#loc195 = loc(fused[#loc27, #loc28])
#loc196 = loc(fused[#loc29, #loc30])
#loc197 = loc(fused[#loc34, #loc35])
#loc198 = loc(fused[#loc36, #loc37])
#loc199 = loc(fused[#loc38, #loc39])
#loc200 = loc(fused[#loc40, #loc41])
#loc201 = loc(fused[#loc42, #loc43])
#loc202 = loc(fused[#loc44, #loc45])
#loc203 = loc(fused[#loc47, #loc46])
#loc204 = loc(fused[#loc48, #loc49])
#loc205 = loc(fused[#loc52, #loc53])
#loc206 = loc(fused[#loc54, #loc55])
#loc207 = loc(fused[#loc57, #loc56])
#loc208 = loc(fused[#loc58, #loc59])
#loc209 = loc(fused[#loc60, #loc61])
#loc210 = loc(fused[#loc62, #loc59])
#loc211 = loc(fused[#loc65, #loc66])
#loc212 = loc(fused[#loc67, #loc68])
#loc213 = loc(fused[#loc69, #loc70])
#loc214 = loc(fused[#loc71, #loc72, #loc73, #loc68])
#loc215 = loc(fused[#loc75, #loc76])
#loc216 = loc(fused[#loc77, #loc78])
#loc217 = loc(fused[#loc80, #loc81, #loc82, #loc76])
#loc218 = loc(fused[#loc83, #loc84])
#loc219 = loc(fused[#loc89, #loc90])
#loc220 = loc(fused[#loc92, #loc91])
#loc221 = loc(fused[#loc93, #loc94])
#loc222 = loc(fused[#loc95, #loc96])
#loc223 = loc(fused[#loc98, #loc97])
#loc224 = loc(fused[#loc99, #loc100])
#loc225 = loc(fused[#loc101, #loc102])
#loc226 = loc(fused[#loc103, #loc100])
#loc227 = loc(fused[#loc106, #loc107])
#loc228 = loc(fused[#loc108, #loc109])
#loc229 = loc(fused[#loc110, #loc111])
#loc230 = loc(fused[#loc112, #loc109])
#loc231 = loc(fused[#loc113, #loc114])
#loc232 = loc(fused[#loc115, #loc116])
#loc233 = loc(fused[#loc118, #loc119, #loc120, #loc114])
#loc234 = loc(fused[#loc121, #loc122])
#loc235 = loc(fused[#loc128, #loc129])
#loc236 = loc(fused[#loc130, #loc131])
#loc237 = loc(fused[#loc133, #loc132])
#loc238 = loc(fused[#loc134, #loc135])
#loc239 = loc(fused[#loc136, #loc137])
#loc240 = loc(fused[#loc138, #loc139, #loc140, #loc135])
#loc241 = loc(fused[#loc144, #loc143])
#loc242 = loc(fused[#loc145, #loc146])
#loc243 = loc(fused[#loc147, #loc148])
#loc244 = loc(fused[#loc149, #loc146])
#loc245 = loc(fused[#loc150, #loc151])
#loc246 = loc(fused[#loc152, #loc153])
#loc247 = loc(fused[#loc157, #loc158])
#loc248 = loc(fused[#loc159, #loc160])
#loc249 = loc(fused[#loc162, #loc161])
#loc250 = loc(fused[#loc163, #loc164])
#loc251 = loc(fused[#loc165, #loc166])
#loc252 = loc(fused[#loc167, #loc164])
#loc253 = loc(fused[#loc169, #loc168])
#loc254 = loc(fused[#loc170, #loc171])
#loc255 = loc(fused[#loc172, #loc173])
#loc256 = loc(fused[#loc174, #loc171])
#loc257 = loc(fused[#loc175, #loc176])
#loc258 = loc(fused[#loc177, #loc178])
