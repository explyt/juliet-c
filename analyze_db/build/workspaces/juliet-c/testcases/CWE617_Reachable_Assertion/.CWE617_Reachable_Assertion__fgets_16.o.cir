!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fgets_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc64)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc65)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc66)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc67)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc68)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc12)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"CWE617_Reachable_Assertion__fgets_16.c\00" : !cir.array<!s8i x 39>> : !cir.array<!s8i x 39> {alignment = 1 : i64} loc(#loc12)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void CWE617_Reachable_Assertion__fgets_16_bad()\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc12)
  cir.func no_proto @CWE617_Reachable_Assertion__fgets_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc70)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc71)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc20)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc72)
    cir.br ^bb1 loc(#loc73)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc73)
  ^bb2:  // 2 preds: ^bb1, ^bb12
    %4 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc24)
    cir.brcond %5 ^bb3, ^bb13 loc(#loc24)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc74)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc75)
  ^bb5:  // pred: ^bb4
    %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc70)
    cir.store %6, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc70)
    cir.br ^bb6 loc(#loc76)
  ^bb6:  // pred: ^bb5
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc30)
    %8 = cir.const #cir.int<3> : !s32i loc(#loc31)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc31)
    %10 = cir.const #cir.int<4> : !u64i loc(#loc31)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc31)
    %12 = cir.const #cir.int<2> : !s32i loc(#loc31)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc31)
    %14 = cir.binop(add, %11, %13) : !u64i loc(#loc31)
    %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc31)
    %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc65)
    %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc32)
    %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc33)
    %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc34)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc34)
    %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc77)
    cir.brcond %21 ^bb7, ^bb8 loc(#loc78)
  ^bb7:  // pred: ^bb6
    %22 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc38)
    %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc39)
    cir.store %23, %1 : !s32i, !cir.ptr<!s32i> loc(#loc79)
    cir.br ^bb9 loc(#loc36)
  ^bb8:  // pred: ^bb6
    %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc42)
    cir.br ^bb9 loc(#loc29)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc29)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc27)
  ^bb11:  // pred: ^bb10
    cir.br ^bb13 loc(#loc43)
  ^bb12:  // no predecessors
    cir.br ^bb2 loc(#loc23)
  ^bb13:  // 2 preds: ^bb2, ^bb11
    cir.br ^bb14 loc(#loc23)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc12)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc12)
  ^bb16:  // pred: ^bb15
    %26 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc12)
    %27 = cir.const #cir.int<5> : !s32i loc(#loc12)
    %28 = cir.cmp(gt, %26, %27) : !s32i, !cir.bool loc(#loc12)
    cir.brcond %28 ^bb17, ^bb18 loc(#loc12)
  ^bb17:  // pred: ^bb16
    cir.br ^bb19 loc(#loc12)
  ^bb18:  // pred: ^bb16
    %29 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc12)
    %30 = cir.cast(array_to_ptrdecay, %29 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc12)
    %31 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc12)
    %32 = cir.cast(array_to_ptrdecay, %31 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc12)
    %33 = cir.const #cir.int<50> : !s32i loc(#loc12)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc12)
    %35 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc12)
    %36 = cir.cast(array_to_ptrdecay, %35 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc12)
    cir.call @__assert_fail(%30, %32, %34, %36) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc12)
    cir.br ^bb19 loc(#loc12)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc12)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc12)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc14)
  } loc(#loc69)
  cir.func no_proto @CWE617_Reachable_Assertion__fgets_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc81)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc46)
    cir.return loc(#loc45)
  } loc(#loc80)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc48)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc83)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc54)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    cir.br ^bb1 loc(#loc85)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc85)
  ^bb2:  // 2 preds: ^bb1, ^bb5
    %3 = cir.const #cir.int<1> : !s32i loc(#loc58)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc58)
    cir.brcond %4 ^bb3, ^bb6 loc(#loc58)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc86)
  ^bb4:  // pred: ^bb3
    %5 = cir.const #cir.int<5> : !s32i loc(#loc60)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc61)
    %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc60)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc87)
    cir.br ^bb6 loc(#loc63)
  ^bb5:  // no predecessors
    cir.br ^bb2 loc(#loc57)
  ^bb6:  // 2 preds: ^bb2, ^bb4
    cir.br ^bb7 loc(#loc57)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc48)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc48)
  ^bb9:  // pred: ^bb8
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc48)
    %9 = cir.const #cir.int<5> : !s32i loc(#loc48)
    %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc48)
    cir.brcond %10 ^bb10, ^bb11 loc(#loc48)
  ^bb10:  // pred: ^bb9
    cir.br ^bb12 loc(#loc48)
  ^bb11:  // pred: ^bb9
    %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc48)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc48)
    %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc48)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc48)
    %15 = cir.const #cir.int<70> : !s32i loc(#loc48)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc48)
    %17 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc48)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @__assert_fail(%12, %14, %16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc48)
    cir.br ^bb12 loc(#loc48)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc48)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc48)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc50)
  } loc(#loc82)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fgets_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE617_Reachable_Assertion__fgets_16.c":44:27)
#loc10 = loc("/usr/include/assert.h":69:1)
#loc11 = loc("/usr/include/assert.h":71:43)
#loc12 = loc("CWE617_Reachable_Assertion__fgets_16.c":50:5)
#loc13 = loc("CWE617_Reachable_Assertion__fgets_16.c":27:1)
#loc14 = loc("CWE617_Reachable_Assertion__fgets_16.c":51:1)
#loc15 = loc("CWE617_Reachable_Assertion__fgets_16.c":35:13)
#loc16 = loc("CWE617_Reachable_Assertion__fgets_16.c":35:49)
#loc17 = loc("CWE617_Reachable_Assertion__fgets_16.c":29:5)
#loc18 = loc("CWE617_Reachable_Assertion__fgets_16.c":29:9)
#loc19 = loc("CWE617_Reachable_Assertion__fgets_16.c":31:13)
#loc20 = loc("CWE617_Reachable_Assertion__fgets_16.c":31:12)
#loc21 = loc("CWE617_Reachable_Assertion__fgets_16.c":31:5)
#loc22 = loc("CWE617_Reachable_Assertion__fgets_16.c":32:5)
#loc23 = loc("CWE617_Reachable_Assertion__fgets_16.c":48:5)
#loc24 = loc("CWE617_Reachable_Assertion__fgets_16.c":32:11)
#loc25 = loc("CWE617_Reachable_Assertion__fgets_16.c":33:5)
#loc26 = loc("CWE617_Reachable_Assertion__fgets_16.c":34:9)
#loc27 = loc("CWE617_Reachable_Assertion__fgets_16.c":46:9)
#loc28 = loc("CWE617_Reachable_Assertion__fgets_16.c":37:13)
#loc29 = loc("CWE617_Reachable_Assertion__fgets_16.c":45:13)
#loc30 = loc("CWE617_Reachable_Assertion__fgets_16.c":37:23)
#loc31 = loc("CWE617_Reachable_Assertion__fgets_16.c":37:36)
#loc32 = loc("CWE617_Reachable_Assertion__fgets_16.c":37:53)
#loc33 = loc("CWE617_Reachable_Assertion__fgets_16.c":37:17)
#loc34 = loc("CWE617_Reachable_Assertion__fgets_16.c":37:63)
#loc35 = loc("CWE617_Reachable_Assertion__fgets_16.c":38:13)
#loc36 = loc("CWE617_Reachable_Assertion__fgets_16.c":41:13)
#loc37 = loc("CWE617_Reachable_Assertion__fgets_16.c":43:13)
#loc38 = loc("CWE617_Reachable_Assertion__fgets_16.c":40:29)
#loc39 = loc("CWE617_Reachable_Assertion__fgets_16.c":40:24)
#loc40 = loc("CWE617_Reachable_Assertion__fgets_16.c":40:17)
#loc41 = loc("CWE617_Reachable_Assertion__fgets_16.c":40:40)
#loc42 = loc("CWE617_Reachable_Assertion__fgets_16.c":44:17)
#loc43 = loc("CWE617_Reachable_Assertion__fgets_16.c":47:9)
#loc44 = loc("CWE617_Reachable_Assertion__fgets_16.c":73:1)
#loc45 = loc("CWE617_Reachable_Assertion__fgets_16.c":76:1)
#loc46 = loc("CWE617_Reachable_Assertion__fgets_16.c":75:5)
#loc47 = loc("CWE617_Reachable_Assertion__fgets_16.c":75:13)
#loc48 = loc("CWE617_Reachable_Assertion__fgets_16.c":70:5)
#loc49 = loc("CWE617_Reachable_Assertion__fgets_16.c":58:1)
#loc50 = loc("CWE617_Reachable_Assertion__fgets_16.c":71:1)
#loc51 = loc("CWE617_Reachable_Assertion__fgets_16.c":60:5)
#loc52 = loc("CWE617_Reachable_Assertion__fgets_16.c":60:9)
#loc53 = loc("CWE617_Reachable_Assertion__fgets_16.c":62:13)
#loc54 = loc("CWE617_Reachable_Assertion__fgets_16.c":62:12)
#loc55 = loc("CWE617_Reachable_Assertion__fgets_16.c":62:5)
#loc56 = loc("CWE617_Reachable_Assertion__fgets_16.c":63:5)
#loc57 = loc("CWE617_Reachable_Assertion__fgets_16.c":68:5)
#loc58 = loc("CWE617_Reachable_Assertion__fgets_16.c":63:11)
#loc59 = loc("CWE617_Reachable_Assertion__fgets_16.c":64:5)
#loc60 = loc("CWE617_Reachable_Assertion__fgets_16.c":66:16)
#loc61 = loc("CWE617_Reachable_Assertion__fgets_16.c":66:29)
#loc62 = loc("CWE617_Reachable_Assertion__fgets_16.c":66:9)
#loc63 = loc("CWE617_Reachable_Assertion__fgets_16.c":67:9)
#loc64 = loc(fused[#loc1, #loc2])
#loc65 = loc(fused[#loc3, #loc4])
#loc66 = loc(fused[#loc5, #loc6])
#loc67 = loc(fused[#loc7, #loc8])
#loc68 = loc(fused[#loc10, #loc11])
#loc69 = loc(fused[#loc13, #loc14])
#loc70 = loc(fused[#loc15, #loc16])
#loc71 = loc(fused[#loc17, #loc18])
#loc72 = loc(fused[#loc21, #loc19])
#loc73 = loc(fused[#loc22, #loc23])
#loc74 = loc(fused[#loc25, #loc23])
#loc75 = loc(fused[#loc26, #loc27])
#loc76 = loc(fused[#loc28, #loc29])
#loc77 = loc(fused[#loc33, #loc34])
#loc78 = loc(fused[#loc35, #loc36, #loc37, #loc29])
#loc79 = loc(fused[#loc40, #loc41])
#loc80 = loc(fused[#loc44, #loc45])
#loc81 = loc(fused[#loc46, #loc47])
#loc82 = loc(fused[#loc49, #loc50])
#loc83 = loc(fused[#loc51, #loc52])
#loc84 = loc(fused[#loc55, #loc53])
#loc85 = loc(fused[#loc56, #loc57])
#loc86 = loc(fused[#loc59, #loc57])
#loc87 = loc(fused[#loc62, #loc61])
