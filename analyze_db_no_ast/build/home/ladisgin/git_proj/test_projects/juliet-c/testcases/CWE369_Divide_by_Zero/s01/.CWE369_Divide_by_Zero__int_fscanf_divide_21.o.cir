!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc12 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":25:21)
#loc13 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":25:25)
#loc51 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":55:26)
#loc52 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":55:30)
#loc91 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":88:26)
#loc92 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":88:30)
#loc129 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":116:25)
#loc130 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":116:29)
#loc157 = loc(fused[#loc12, #loc13])
#loc172 = loc(fused[#loc51, #loc52])
#loc185 = loc(fused[#loc91, #loc92])
#loc198 = loc(fused[#loc129, #loc130])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fscanf_divide_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc152)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc153)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.global "private"  internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc154)
  cir.func private  @printIntLine(!s32i) loc(#loc155)
  cir.func internal private  @badSink(%arg0: !s32i loc(fused[#loc12, #loc13])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc157)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc14)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc154)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc17)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc17)
      cir.if %3 {
        %4 = cir.const #cir.int<100> : !s32i loc(#loc19)
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc20)
        %6 = cir.binop(div, %4, %5) : !s32i loc(#loc160)
        cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc21)
      } loc(#loc159)
    } loc(#loc158)
    cir.return loc(#loc11)
  } loc(#loc156)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_fscanf_divide_21_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc162)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc27)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc163)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc29)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc153)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc30)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc29)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %10 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc154)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
    cir.call @badSink(%11) : (!s32i) -> () loc(#loc34)
    cir.return loc(#loc23)
  } loc(#loc161)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_fscanf_divide_21_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc166)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc167)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc168)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    cir.return loc(#loc36)
  } loc(#loc165)
  cir.global "private"  internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc169)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc170)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc47)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc48)
  cir.func internal private  @goodB2G1Sink(%arg0: !s32i loc(fused[#loc51, #loc52])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc172)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc53)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc169)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc56)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc56)
      cir.if %3 {
        %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc47)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc47)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc60)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc63)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc64)
          %6 = cir.cmp(ne, %4, %5) : !s32i, !s32i loc(#loc176)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc65)
          cir.if %7 {
            %8 = cir.const #cir.int<100> : !s32i loc(#loc69)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
            %10 = cir.binop(div, %8, %9) : !s32i loc(#loc178)
            cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc71)
          } else {
            %8 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc48)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc48)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc72)
          } loc(#loc177)
        } loc(#loc175)
      } loc(#loc174)
    } loc(#loc173)
    cir.return loc(#loc50)
  } loc(#loc171)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc180)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc77)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc78)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc181)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc80)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc153)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc81)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc82)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc82)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc80)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc83)
    %10 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc169)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc182)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    cir.call @goodB2G1Sink(%11) : (!s32i) -> () loc(#loc86)
    cir.return loc(#loc74)
  } loc(#loc179)
  cir.global "private"  internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc183)
  cir.func internal private  @goodB2G2Sink(%arg0: !s32i loc(fused[#loc91, #loc92])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc185)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc93)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc183)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc96)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc96)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc101)
          %6 = cir.cmp(ne, %4, %5) : !s32i, !s32i loc(#loc189)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc102)
          cir.if %7 {
            %8 = cir.const #cir.int<100> : !s32i loc(#loc106)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc107)
            %10 = cir.binop(div, %8, %9) : !s32i loc(#loc191)
            cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc108)
          } else {
            %8 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc109)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc109)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc110)
          } loc(#loc190)
        } loc(#loc188)
      } loc(#loc187)
    } loc(#loc186)
    cir.return loc(#loc90)
  } loc(#loc184)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc193)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc115)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc116)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc118)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc153)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc119)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc120)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc120)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc118)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc121)
    %10 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc183)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc195)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc123)
    cir.call @goodB2G2Sink(%11) : (!s32i) -> () loc(#loc124)
    cir.return loc(#loc112)
  } loc(#loc192)
  cir.global "private"  internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc196)
  cir.func internal private  @goodG2BSink(%arg0: !s32i loc(fused[#loc129, #loc130])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc198)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc196)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc134)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc134)
      cir.if %3 {
        %4 = cir.const #cir.int<100> : !s32i loc(#loc136)
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc137)
        %6 = cir.binop(div, %4, %5) : !s32i loc(#loc201)
        cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc138)
      } loc(#loc200)
    } loc(#loc199)
    cir.return loc(#loc128)
  } loc(#loc197)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc203)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc143)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc144)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc146)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc205)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc148)
    %5 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc196)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc206)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc150)
    cir.call @goodG2BSink(%6) : (!s32i) -> () loc(#loc151)
    cir.return loc(#loc140)
  } loc(#loc202)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fscanf_divide_21.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":40:19)
#loc6 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":23:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":23:24)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":25:1)
#loc11 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":32:1)
#loc14 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":26:1)
#loc15 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":27:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":31:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":27:8)
#loc18 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":28:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":30:22)
#loc20 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":30:28)
#loc21 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":30:9)
#loc22 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":34:1)
#loc23 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":43:1)
#loc24 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":36:5)
#loc25 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":36:9)
#loc26 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":38:13)
#loc27 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":38:12)
#loc28 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":38:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":40:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":40:12)
#loc31 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":41:17)
#loc32 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":41:5)
#loc33 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":42:13)
#loc34 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":42:5)
#loc35 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":136:1)
#loc36 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":141:1)
#loc37 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":138:5)
#loc38 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":138:14)
#loc39 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":139:5)
#loc40 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":139:14)
#loc41 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":140:5)
#loc42 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":140:13)
#loc43 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":50:1)
#loc44 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":50:29)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc47 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":60:19)
#loc48 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":71:23)
#loc49 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":55:1)
#loc50 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":74:1)
#loc53 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":56:1)
#loc54 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":57:5)
#loc55 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":73:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":57:8)
#loc57 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":58:5)
#loc58 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":61:5)
#loc59 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":63:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":60:9)
#loc61 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":65:9)
#loc62 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":72:9)
#loc63 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":65:13)
#loc64 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":65:21)
#loc65 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":65:18)
#loc66 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":66:9)
#loc67 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":68:9)
#loc68 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":70:9)
#loc69 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":67:26)
#loc70 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":67:32)
#loc71 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":67:13)
#loc72 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":71:13)
#loc73 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":76:1)
#loc74 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":85:1)
#loc75 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":78:5)
#loc76 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":78:9)
#loc77 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":80:13)
#loc78 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":80:12)
#loc79 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":80:5)
#loc80 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":82:5)
#loc81 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":82:12)
#loc82 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":82:19)
#loc83 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":83:22)
#loc84 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":83:5)
#loc85 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":84:18)
#loc86 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":84:5)
#loc87 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":51:1)
#loc88 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":51:29)
#loc89 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":88:1)
#loc90 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":102:1)
#loc93 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":89:1)
#loc94 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":90:5)
#loc95 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":101:5)
#loc96 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":90:8)
#loc97 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":91:5)
#loc98 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":93:9)
#loc99 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":100:9)
#loc100 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":93:13)
#loc101 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":93:21)
#loc102 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":93:18)
#loc103 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":94:9)
#loc104 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":96:9)
#loc105 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":98:9)
#loc106 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":95:26)
#loc107 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":95:32)
#loc108 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":95:13)
#loc109 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":99:23)
#loc110 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":99:13)
#loc111 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":104:1)
#loc112 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":113:1)
#loc113 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":106:5)
#loc114 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":106:9)
#loc115 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":108:13)
#loc116 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":108:12)
#loc117 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":108:5)
#loc118 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":110:5)
#loc119 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":110:12)
#loc120 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":110:19)
#loc121 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":111:22)
#loc122 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":111:5)
#loc123 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":112:18)
#loc124 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":112:5)
#loc125 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":52:1)
#loc126 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":52:28)
#loc127 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":116:1)
#loc128 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":123:1)
#loc131 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":117:1)
#loc132 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":118:5)
#loc133 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":122:5)
#loc134 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":118:8)
#loc135 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":119:5)
#loc136 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":121:22)
#loc137 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":121:28)
#loc138 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":121:9)
#loc139 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":125:1)
#loc140 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":134:1)
#loc141 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":127:5)
#loc142 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":127:9)
#loc143 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":129:13)
#loc144 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":129:12)
#loc145 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":129:5)
#loc146 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":131:12)
#loc147 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":131:5)
#loc148 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":132:21)
#loc149 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":132:5)
#loc150 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":133:17)
#loc151 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_21.c":133:5)
#loc152 = loc(fused[#loc1, #loc2])
#loc153 = loc(fused[#loc3, #loc4])
#loc154 = loc(fused[#loc6, #loc7])
#loc155 = loc(fused[#loc8, #loc9])
#loc156 = loc(fused[#loc10, #loc11])
#loc158 = loc(fused[#loc15, #loc16])
#loc159 = loc(fused[#loc18, #loc16])
#loc160 = loc(fused[#loc19, #loc20])
#loc161 = loc(fused[#loc22, #loc23])
#loc162 = loc(fused[#loc24, #loc25])
#loc163 = loc(fused[#loc28, #loc26])
#loc164 = loc(fused[#loc32, #loc31])
#loc165 = loc(fused[#loc35, #loc36])
#loc166 = loc(fused[#loc37, #loc38])
#loc167 = loc(fused[#loc39, #loc40])
#loc168 = loc(fused[#loc41, #loc42])
#loc169 = loc(fused[#loc43, #loc44])
#loc170 = loc(fused[#loc45, #loc46])
#loc171 = loc(fused[#loc49, #loc50])
#loc173 = loc(fused[#loc54, #loc55])
#loc174 = loc(fused[#loc57, #loc58, #loc59, #loc55])
#loc175 = loc(fused[#loc61, #loc62])
#loc176 = loc(fused[#loc63, #loc64])
#loc177 = loc(fused[#loc66, #loc67, #loc68, #loc62])
#loc178 = loc(fused[#loc69, #loc70])
#loc179 = loc(fused[#loc73, #loc74])
#loc180 = loc(fused[#loc75, #loc76])
#loc181 = loc(fused[#loc79, #loc77])
#loc182 = loc(fused[#loc84, #loc83])
#loc183 = loc(fused[#loc87, #loc88])
#loc184 = loc(fused[#loc89, #loc90])
#loc186 = loc(fused[#loc94, #loc95])
#loc187 = loc(fused[#loc97, #loc95])
#loc188 = loc(fused[#loc98, #loc99])
#loc189 = loc(fused[#loc100, #loc101])
#loc190 = loc(fused[#loc103, #loc104, #loc105, #loc99])
#loc191 = loc(fused[#loc106, #loc107])
#loc192 = loc(fused[#loc111, #loc112])
#loc193 = loc(fused[#loc113, #loc114])
#loc194 = loc(fused[#loc117, #loc115])
#loc195 = loc(fused[#loc122, #loc121])
#loc196 = loc(fused[#loc125, #loc126])
#loc197 = loc(fused[#loc127, #loc128])
#loc199 = loc(fused[#loc132, #loc133])
#loc200 = loc(fused[#loc135, #loc133])
#loc201 = loc(fused[#loc136, #loc137])
#loc202 = loc(fused[#loc139, #loc140])
#loc203 = loc(fused[#loc141, #loc142])
#loc204 = loc(fused[#loc145, #loc143])
#loc205 = loc(fused[#loc147, #loc146])
#loc206 = loc(fused[#loc149, #loc148])
