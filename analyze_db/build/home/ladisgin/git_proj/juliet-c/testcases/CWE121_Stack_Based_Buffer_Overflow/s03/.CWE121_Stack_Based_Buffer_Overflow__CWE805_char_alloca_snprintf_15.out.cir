!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":133:10)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":133:14)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":133:20)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":133:32)
#loc190 = loc(fused[#loc65, #loc66])
#loc191 = loc(fused[#loc67, #loc68])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s03/CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc171)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc3)
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc172)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"%s\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc174)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc175)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc12)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc12)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc12)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc12)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc176)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc12)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc175)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc14)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc14)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc14)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc14)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc14)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc14)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc14)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc176)
    cir.scope {
      %17 = cir.const #cir.int<6> : !s32i loc(#loc17)
      cir.switch (%17 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc19)
          cir.store %18, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc178)
          %19 = cir.const #cir.int<0> : !s32i loc(#loc21)
          %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc21)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc22)
          %22 = cir.const #cir.int<0> : !s32i loc(#loc23)
          %23 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc24)
          cir.store %20, %23 : !s8i, !cir.ptr<!s8i> loc(#loc179)
          cir.break loc(#loc25)
        } loc(#loc18)
        cir.case(default, []) {
          %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc3)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc3)
          cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc27)
          cir.break loc(#loc28)
        } loc(#loc26)
        cir.yield loc(#loc15)
      } loc(#loc15)
    } loc(#loc177)
    cir.scope {
      %17 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc181)
      %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc33)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc33)
      %20 = cir.const #cir.int<67> : !s32i loc(#loc34)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc35)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc36)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc35)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc35)
      cir.libc.memset %24 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc182)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc39)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc39)
      %27 = cir.const #cir.int<100> : !s32i loc(#loc40)
      %28 = cir.const #cir.int<1> : !s32i loc(#loc41)
      %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc40)
      %30 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc42)
      %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc42)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc183)
      %32 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc43)
      %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc44)
      %34 = cir.const #cir.int<100> : !s32i loc(#loc45)
      %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc45)
      %36 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc6)
      %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc6)
      %38 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc46)
      %39 = cir.call @snprintf(%33, %35, %37, %38) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc43)
      %40 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
      cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    } loc(#loc180)
    cir.return loc(#loc8)
  } loc(#loc173)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc185)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc186)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc53)
    cir.return loc(#loc50)
  } loc(#loc184)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc187)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc188)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc62)
  cir.func @main(%arg0: !s32i loc(fused[#loc65, #loc66]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc67, #loc68])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc190)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc191)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc64)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc69)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc69)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc70)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc71)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc71)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc72)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc59)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc192)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15_good() : () -> () loc(#loc74)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc60)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc61)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc193)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15_bad() : () -> () loc(#loc78)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc62)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc81)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc194)
    cir.return %17 : !s32i loc(#loc194)
  } loc(#loc189)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc196)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc197)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc88)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc88)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc88)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc88)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc88)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc198)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc88)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc88)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc197)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc90)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc90)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc90)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc90)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc90)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc90)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc90)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc198)
    cir.scope {
      %17 = cir.const #cir.int<5> : !s32i loc(#loc93)
      cir.switch (%17 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc95)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc95)
          cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc96)
          cir.break loc(#loc97)
        } loc(#loc94)
        cir.case(default, []) {
          %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc99)
          cir.store %18, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc200)
          %19 = cir.const #cir.int<0> : !s32i loc(#loc101)
          %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc101)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc102)
          %22 = cir.const #cir.int<0> : !s32i loc(#loc103)
          %23 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc104)
          cir.store %20, %23 : !s8i, !cir.ptr<!s8i> loc(#loc201)
          cir.break loc(#loc105)
        } loc(#loc98)
        cir.yield loc(#loc91)
      } loc(#loc91)
    } loc(#loc199)
    cir.scope {
      %17 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc203)
      %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc110)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc110)
      %20 = cir.const #cir.int<67> : !s32i loc(#loc111)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc112)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc113)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc112)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc112)
      cir.libc.memset %24 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc204)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc116)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc116)
      %27 = cir.const #cir.int<100> : !s32i loc(#loc117)
      %28 = cir.const #cir.int<1> : !s32i loc(#loc118)
      %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc117)
      %30 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc119)
      %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc119)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc205)
      %32 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc120)
      %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc121)
      %34 = cir.const #cir.int<100> : !s32i loc(#loc122)
      %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc122)
      %36 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc123)
      %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc123)
      %38 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc124)
      %39 = cir.call @snprintf(%33, %35, %37, %38) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc120)
      %40 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc125)
      cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc126)
    } loc(#loc202)
    cir.return loc(#loc84)
  } loc(#loc195)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc207)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc208)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc132)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc132)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc132)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc132)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc132)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc209)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc132)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc132)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc208)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc134)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc134)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc134)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc134)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc134)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc134)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc134)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc209)
    cir.scope {
      %17 = cir.const #cir.int<6> : !s32i loc(#loc137)
      cir.switch (%17 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc139)
          cir.store %18, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc211)
          %19 = cir.const #cir.int<0> : !s32i loc(#loc141)
          %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc141)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc142)
          %22 = cir.const #cir.int<0> : !s32i loc(#loc143)
          %23 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc144)
          cir.store %20, %23 : !s8i, !cir.ptr<!s8i> loc(#loc212)
          cir.break loc(#loc145)
        } loc(#loc138)
        cir.case(default, []) {
          %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc147)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc147)
          cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc148)
          cir.break loc(#loc149)
        } loc(#loc146)
        cir.yield loc(#loc135)
      } loc(#loc135)
    } loc(#loc210)
    cir.scope {
      %17 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc214)
      %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc154)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc154)
      %20 = cir.const #cir.int<67> : !s32i loc(#loc155)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc156)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc157)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc156)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc156)
      cir.libc.memset %24 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc215)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc160)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc160)
      %27 = cir.const #cir.int<100> : !s32i loc(#loc161)
      %28 = cir.const #cir.int<1> : !s32i loc(#loc162)
      %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc161)
      %30 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc163)
      %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc163)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc216)
      %32 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc164)
      %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc165)
      %34 = cir.const #cir.int<100> : !s32i loc(#loc166)
      %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc166)
      %36 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc167)
      %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc167)
      %38 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc168)
      %39 = cir.call @snprintf(%33, %35, %37, %38) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc164)
      %40 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc169)
      cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc170)
    } loc(#loc213)
    cir.return loc(#loc128)
  } loc(#loc206)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s03/CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":44:19)
#loc4 = loc("/usr/include/stdio.h":385:1)
#loc5 = loc("/usr/include/stdio.h":387:62)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":52:29)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":29:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":55:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":31:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":31:12)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":32:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":32:36)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":33:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":33:37)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":34:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":46:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":34:12)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":36:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":39:16)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":39:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":40:19)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":40:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":40:14)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":40:15)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":41:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":42:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":44:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":45:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":47:5)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":54:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":48:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":48:24)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":49:16)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":49:24)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":49:29)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":49:33)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":49:9)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":49:34)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":50:25)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":50:16)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":50:20)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":50:9)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":52:9)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":52:18)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":52:24)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":52:35)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":53:19)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":53:9)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":117:1)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":121:1)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":119:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":119:14)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":120:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":120:14)
#loc55 = loc("/usr/include/stdlib.h":575:1)
#loc56 = loc("/usr/include/stdlib.h":575:41)
#loc57 = loc("/usr/include/time.h":76:1)
#loc58 = loc("/usr/include/time.h":76:38)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":138:15)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":140:15)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":143:15)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":145:15)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":133:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":148:1)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":134:1)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":136:27)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":136:22)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":136:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":138:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":139:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":139:77)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":140:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":143:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":144:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":144:76)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":145:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":147:12)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":147:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":62:1)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":87:1)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":64:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":64:12)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":65:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":65:36)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":66:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":66:37)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":67:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":78:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":67:12)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":69:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":71:19)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":71:9)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":72:9)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":73:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":75:16)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":75:9)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":76:19)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":76:9)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":76:14)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":76:15)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":77:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":79:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":86:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":80:9)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":80:24)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":81:16)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":81:24)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":81:29)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":81:33)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":81:9)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":81:34)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":82:25)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":82:16)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":82:20)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":82:9)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":84:9)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":84:18)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":84:24)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":84:29)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":84:35)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":85:19)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":85:9)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":90:1)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":115:1)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":92:5)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":92:12)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":93:5)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":93:36)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":94:5)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":94:37)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":95:5)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":106:5)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":95:12)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":97:5)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":99:16)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":99:9)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":100:19)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":100:9)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":100:14)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":100:15)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":101:9)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":102:5)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":104:19)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":104:9)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":105:9)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":107:5)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":114:5)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":108:9)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":108:24)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":109:16)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":109:24)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":109:29)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":109:33)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":109:9)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":109:34)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":110:25)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":110:16)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":110:20)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":110:9)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":112:9)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":112:18)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":112:24)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":112:29)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":112:35)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":113:19)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c":113:9)
#loc171 = loc(fused[#loc1, #loc2])
#loc172 = loc(fused[#loc4, #loc5])
#loc173 = loc(fused[#loc7, #loc8])
#loc174 = loc(fused[#loc9, #loc10])
#loc175 = loc(fused[#loc11, #loc12])
#loc176 = loc(fused[#loc13, #loc14])
#loc177 = loc(fused[#loc15, #loc16])
#loc178 = loc(fused[#loc20, #loc19])
#loc179 = loc(fused[#loc22, #loc21])
#loc180 = loc(fused[#loc29, #loc30])
#loc181 = loc(fused[#loc31, #loc32])
#loc182 = loc(fused[#loc37, #loc38])
#loc183 = loc(fused[#loc42, #loc39])
#loc184 = loc(fused[#loc49, #loc50])
#loc185 = loc(fused[#loc51, #loc52])
#loc186 = loc(fused[#loc53, #loc54])
#loc187 = loc(fused[#loc55, #loc56])
#loc188 = loc(fused[#loc57, #loc58])
#loc189 = loc(fused[#loc63, #loc64])
#loc192 = loc(fused[#loc74, #loc75])
#loc193 = loc(fused[#loc78, #loc79])
#loc194 = loc(fused[#loc82, #loc81])
#loc195 = loc(fused[#loc83, #loc84])
#loc196 = loc(fused[#loc85, #loc86])
#loc197 = loc(fused[#loc87, #loc88])
#loc198 = loc(fused[#loc89, #loc90])
#loc199 = loc(fused[#loc91, #loc92])
#loc200 = loc(fused[#loc100, #loc99])
#loc201 = loc(fused[#loc102, #loc101])
#loc202 = loc(fused[#loc106, #loc107])
#loc203 = loc(fused[#loc108, #loc109])
#loc204 = loc(fused[#loc114, #loc115])
#loc205 = loc(fused[#loc119, #loc116])
#loc206 = loc(fused[#loc127, #loc128])
#loc207 = loc(fused[#loc129, #loc130])
#loc208 = loc(fused[#loc131, #loc132])
#loc209 = loc(fused[#loc133, #loc134])
#loc210 = loc(fused[#loc135, #loc136])
#loc211 = loc(fused[#loc140, #loc139])
#loc212 = loc(fused[#loc142, #loc141])
#loc213 = loc(fused[#loc150, #loc151])
#loc214 = loc(fused[#loc152, #loc153])
#loc215 = loc(fused[#loc158, #loc159])
#loc216 = loc(fused[#loc163, #loc160])
