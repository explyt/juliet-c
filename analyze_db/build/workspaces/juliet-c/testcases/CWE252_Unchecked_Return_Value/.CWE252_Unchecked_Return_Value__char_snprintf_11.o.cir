!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_snprintf_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc94)
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc95)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\0A\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"string\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE252_Unchecked_Return_Value__char_snprintf_11_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc98)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc98)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc11)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc11)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc101)
          %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc102)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc101)
          cir.store %6, %4 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc101)
          %7 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc19)
          cir.store %7, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc102)
          %8 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc20)
          %9 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc21)
          %10 = cir.const #cir.int<100> : !s32i loc(#loc22)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc22)
          %12 = cir.const #cir.int<6> : !u64i loc(#loc103)
          %13 = cir.binop(sub, %11, %12) : !u64i loc(#loc104)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc25)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc25)
          %16 = cir.binop(sub, %13, %15) : !u64i loc(#loc105)
          %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc5)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc5)
          %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc6)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc6)
          %21 = cir.call @snprintf(%9, %16, %18, %20) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc20)
        } loc(#loc100)
      } loc(#loc99)
    } loc(#loc97)
    cir.return loc(#loc8)
  } loc(#loc96)
  cir.func no_proto @CWE252_Unchecked_Return_Value__char_snprintf_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc107)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc108)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    cir.return loc(#loc27)
  } loc(#loc106)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc109)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc110)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc36)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"snprintf failed!\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc37)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc113)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc113)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc42)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc42)
      cir.if %3 {
        %4 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc36)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc36)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc47)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc116)
          %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc117)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc116)
          cir.store %6, %4 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc116)
          %7 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc53)
          cir.store %7, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc117)
          cir.scope {
            %8 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc56)
            %9 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
            %10 = cir.const #cir.int<100> : !s32i loc(#loc58)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc58)
            %12 = cir.const #cir.int<6> : !u64i loc(#loc119)
            %13 = cir.binop(sub, %11, %12) : !u64i loc(#loc120)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc61)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc61)
            %16 = cir.binop(sub, %13, %15) : !u64i loc(#loc121)
            %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc62)
            %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc62)
            %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc63)
            %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc63)
            %21 = cir.call @snprintf(%9, %16, %18, %20) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc56)
            %22 = cir.const #cir.int<0> : !s32i loc(#loc64)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc122)
            cir.if %23 {
              %24 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc37)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc37)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc66)
            } loc(#loc123)
          } loc(#loc118)
        } loc(#loc115)
      } loc(#loc114)
    } loc(#loc112)
    cir.return loc(#loc39)
  } loc(#loc111)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc126)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc126)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc71)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc71)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc129)
          %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc130)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc129)
          cir.store %6, %4 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc129)
          %7 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc79)
          cir.store %7, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc130)
          cir.scope {
            %8 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc82)
            %9 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc83)
            %10 = cir.const #cir.int<100> : !s32i loc(#loc84)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc84)
            %12 = cir.const #cir.int<6> : !u64i loc(#loc132)
            %13 = cir.binop(sub, %11, %12) : !u64i loc(#loc133)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc87)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc87)
            %16 = cir.binop(sub, %13, %15) : !u64i loc(#loc134)
            %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc88)
            %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc88)
            %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc89)
            %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc89)
            %21 = cir.call @snprintf(%9, %16, %18, %20) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc82)
            %22 = cir.const #cir.int<0> : !s32i loc(#loc90)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc135)
            cir.if %23 {
              %24 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc92)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc92)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc93)
            } loc(#loc136)
          } loc(#loc131)
        } loc(#loc128)
      } loc(#loc127)
    } loc(#loc125)
    cir.return loc(#loc68)
  } loc(#loc124)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_snprintf_11.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdio.h":385:1)
#loc4 = loc("/usr/include/stdio.h":387:62)
#loc5 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":42:46)
#loc6 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":42:54)
#loc7 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":32:1)
#loc8 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":45:1)
#loc9 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":34:5)
#loc10 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":44:5)
#loc11 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":34:8)
#loc12 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":34:26)
#loc13 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":35:5)
#loc14 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":36:9)
#loc15 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":43:9)
#loc16 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":39:13)
#loc17 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":39:36)
#loc18 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":40:13)
#loc19 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":40:27)
#loc20 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":42:13)
#loc21 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":42:22)
#loc22 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":42:27)
#loc23 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":42:31)
#loc24 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":42:41)
#loc25 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":42:43)
#loc26 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":94:1)
#loc27 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":98:1)
#loc28 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":96:5)
#loc29 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":96:11)
#loc30 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":97:5)
#loc31 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":97:11)
#loc32 = loc("../../testcasesupport/std_testcase_io.h":50:1)
#loc33 = loc("../../testcasesupport/std_testcase_io.h":50:24)
#loc34 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc35 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc36 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":57:19)
#loc37 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":69:27)
#loc38 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":52:1)
#loc39 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":73:1)
#loc40 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":54:5)
#loc41 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":72:5)
#loc42 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":54:8)
#loc43 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":54:27)
#loc44 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":55:5)
#loc45 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":58:5)
#loc46 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":60:5)
#loc47 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":57:9)
#loc48 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":61:9)
#loc49 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":71:9)
#loc50 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":64:13)
#loc51 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":64:36)
#loc52 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":65:13)
#loc53 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":65:27)
#loc54 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":67:13)
#loc55 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":70:13)
#loc56 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":67:17)
#loc57 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":67:26)
#loc58 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":67:31)
#loc59 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":67:35)
#loc60 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":67:45)
#loc61 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":67:47)
#loc62 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":67:50)
#loc63 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":67:58)
#loc64 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":67:65)
#loc65 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":68:13)
#loc66 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":69:17)
#loc67 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":76:1)
#loc68 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":92:1)
#loc69 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":78:5)
#loc70 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":91:5)
#loc71 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":78:8)
#loc72 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":78:26)
#loc73 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":79:5)
#loc74 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":80:9)
#loc75 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":90:9)
#loc76 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":83:13)
#loc77 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":83:36)
#loc78 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":84:13)
#loc79 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":84:27)
#loc80 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":86:13)
#loc81 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":89:13)
#loc82 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":86:17)
#loc83 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":86:26)
#loc84 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":86:31)
#loc85 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":86:35)
#loc86 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":86:45)
#loc87 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":86:47)
#loc88 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":86:50)
#loc89 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":86:58)
#loc90 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":86:65)
#loc91 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":87:13)
#loc92 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":88:27)
#loc93 = loc("CWE252_Unchecked_Return_Value__char_snprintf_11.c":88:17)
#loc94 = loc(fused[#loc1, #loc2])
#loc95 = loc(fused[#loc3, #loc4])
#loc96 = loc(fused[#loc7, #loc8])
#loc97 = loc(fused[#loc9, #loc10])
#loc98 = loc(fused[#loc11, #loc12])
#loc99 = loc(fused[#loc13, #loc10])
#loc100 = loc(fused[#loc14, #loc15])
#loc101 = loc(fused[#loc16, #loc17])
#loc102 = loc(fused[#loc18, #loc19])
#loc103 = loc(fused[#loc23, #loc24])
#loc104 = loc(fused[#loc22, #loc24])
#loc105 = loc(fused[#loc22, #loc25])
#loc106 = loc(fused[#loc26, #loc27])
#loc107 = loc(fused[#loc28, #loc29])
#loc108 = loc(fused[#loc30, #loc31])
#loc109 = loc(fused[#loc32, #loc33])
#loc110 = loc(fused[#loc34, #loc35])
#loc111 = loc(fused[#loc38, #loc39])
#loc112 = loc(fused[#loc40, #loc41])
#loc113 = loc(fused[#loc42, #loc43])
#loc114 = loc(fused[#loc44, #loc45, #loc46, #loc41])
#loc115 = loc(fused[#loc48, #loc49])
#loc116 = loc(fused[#loc50, #loc51])
#loc117 = loc(fused[#loc52, #loc53])
#loc118 = loc(fused[#loc54, #loc55])
#loc119 = loc(fused[#loc59, #loc60])
#loc120 = loc(fused[#loc58, #loc60])
#loc121 = loc(fused[#loc58, #loc61])
#loc122 = loc(fused[#loc56, #loc64])
#loc123 = loc(fused[#loc65, #loc55])
#loc124 = loc(fused[#loc67, #loc68])
#loc125 = loc(fused[#loc69, #loc70])
#loc126 = loc(fused[#loc71, #loc72])
#loc127 = loc(fused[#loc73, #loc70])
#loc128 = loc(fused[#loc74, #loc75])
#loc129 = loc(fused[#loc76, #loc77])
#loc130 = loc(fused[#loc78, #loc79])
#loc131 = loc(fused[#loc80, #loc81])
#loc132 = loc(fused[#loc85, #loc86])
#loc133 = loc(fused[#loc84, #loc86])
#loc134 = loc(fused[#loc84, #loc87])
#loc135 = loc(fused[#loc82, #loc90])
#loc136 = loc(fused[#loc91, #loc81])
