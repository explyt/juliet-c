!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc171)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc172)
  cir.func private @strncat(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc173)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc174)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc175)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc177)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc178)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc19)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc19)
      cir.if %3 {
        %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc21)
        %5 = cir.const #cir.int<50> : !s32i loc(#loc22)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc22)
        %7 = cir.const #cir.int<1> : !u64i loc(#loc181)
        %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc182)
        %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc183)
        cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc184)
        cir.scope {
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc29)
          %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc30)
          %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc186)
          cir.if %19 {
            %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc32)
            %21 = cir.const #cir.int<1> : !s32i loc(#loc33)
            %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc34)
            cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
          } loc(#loc187)
        } loc(#loc185)
        %11 = cir.const #cir.int<0> : !s32i loc(#loc35)
        %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc35)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc37)
        %15 = cir.ptr_stride(%13 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc38)
        cir.store %12, %15 : !s8i, !cir.ptr<!s8i> loc(#loc188)
      } loc(#loc180)
    } loc(#loc179)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc190)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc43)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc43)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc44)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc45)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc46)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc45)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc45)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc191)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc49)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc49)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc50)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc51)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc50)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc52)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc52)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc192)
      %17 = cir.get_global @strncat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc53)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc54)
      %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc55)
      %20 = cir.const #cir.int<100> : !s32i loc(#loc56)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc56)
      %22 = cir.call @strncat(%18, %19, %21) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc53)
      %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
      cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc58)
      %24 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc59)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
      %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc60)
      cir.call @free(%26) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc59)
    } loc(#loc189)
    cir.return loc(#loc12)
  } loc(#loc176)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc194)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc63)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc195)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc65)
    cir.return loc(#loc62)
  } loc(#loc193)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc67)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc197)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc72)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc198)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc76)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc76)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc67)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc67)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc80)
      } else {
        %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc81)
        %5 = cir.const #cir.int<100> : !s32i loc(#loc82)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc82)
        %7 = cir.const #cir.int<1> : !u64i loc(#loc201)
        %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc202)
        %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc81)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc203)
        cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc204)
        cir.scope {
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc89)
          %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc90)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc90)
          %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc206)
          cir.if %19 {
            %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc92)
            %21 = cir.const #cir.int<1> : !s32i loc(#loc93)
            %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc94)
            cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc92)
          } loc(#loc207)
        } loc(#loc205)
        %11 = cir.const #cir.int<0> : !s32i loc(#loc95)
        %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc95)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc96)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc97)
        %15 = cir.ptr_stride(%13 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc98)
        cir.store %12, %15 : !s8i, !cir.ptr<!s8i> loc(#loc208)
      } loc(#loc200)
    } loc(#loc199)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc210)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc103)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc103)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc104)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc105)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc106)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc105)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc105)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc211)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc109)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc109)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc110)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc111)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc110)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc112)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc112)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc212)
      %17 = cir.get_global @strncat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc113)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc114)
      %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc115)
      %20 = cir.const #cir.int<100> : !s32i loc(#loc116)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc116)
      %22 = cir.call @strncat(%18, %19, %21) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc113)
      %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc117)
      cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc118)
      %24 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc119)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc120)
      %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc120)
      cir.call @free(%26) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc119)
    } loc(#loc209)
    cir.return loc(#loc69)
  } loc(#loc196)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc214)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc125)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc215)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc129)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc129)
      cir.if %3 {
        %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc131)
        %5 = cir.const #cir.int<100> : !s32i loc(#loc132)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc132)
        %7 = cir.const #cir.int<1> : !u64i loc(#loc218)
        %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc219)
        %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc131)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc220)
        cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc221)
        cir.scope {
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc139)
          %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc140)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc140)
          %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc223)
          cir.if %19 {
            %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc142)
            %21 = cir.const #cir.int<1> : !s32i loc(#loc143)
            %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc144)
            cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc142)
          } loc(#loc224)
        } loc(#loc222)
        %11 = cir.const #cir.int<0> : !s32i loc(#loc145)
        %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc145)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc146)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc147)
        %15 = cir.ptr_stride(%13 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc148)
        cir.store %12, %15 : !s8i, !cir.ptr<!s8i> loc(#loc225)
      } loc(#loc217)
    } loc(#loc216)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc227)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc153)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc153)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc154)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc155)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc156)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc155)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc155)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc228)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc159)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc159)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc160)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc161)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc160)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc162)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc162)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc229)
      %17 = cir.get_global @strncat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc163)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc164)
      %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc165)
      %20 = cir.const #cir.int<100> : !s32i loc(#loc166)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc166)
      %22 = cir.call @strncat(%18, %19, %21) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc163)
      %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc167)
      cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc168)
      %24 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc169)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc170)
      %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc170)
      cir.call @free(%26) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc169)
    } loc(#loc226)
    cir.return loc(#loc122)
  } loc(#loc213)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":152:1)
#loc6 = loc("/usr/include/string.h":153:29)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":23:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":43:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":25:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":25:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":26:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":26:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":27:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":33:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":27:8)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":28:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":30:24)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":30:31)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":30:34)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":30:45)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":30:46)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":30:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":31:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":31:37)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":31:13)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":31:21)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":31:27)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":31:28)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":31:34)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":31:33)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":32:19)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":32:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":32:14)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":32:15)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":34:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":42:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":35:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":35:24)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":36:16)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":36:24)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":36:29)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":36:33)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":36:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":36:34)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":37:25)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":37:16)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":37:20)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":37:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":39:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":39:17)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":39:23)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":39:31)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":40:19)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":40:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":41:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":41:14)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":100:1)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":104:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":102:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":102:14)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":103:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":103:14)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":57:19)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":50:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":75:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":52:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":52:12)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":53:12)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":53:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":54:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":65:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":54:8)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":55:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":58:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":60:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":57:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":62:24)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":62:31)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":62:35)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":62:46)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":62:47)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":62:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":63:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":63:37)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":63:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":63:21)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":63:27)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":63:28)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":63:34)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":63:33)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":64:19)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":64:9)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":64:14)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":64:15)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":66:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":74:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":67:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":67:24)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":68:16)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":68:24)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":68:29)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":68:33)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":68:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":68:34)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":69:25)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":69:16)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":69:20)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":69:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":71:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":71:17)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":71:23)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":71:31)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":72:19)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":72:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":73:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":73:14)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":78:1)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":98:1)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":80:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":80:12)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":81:12)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":81:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":82:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":88:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":82:8)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":83:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":85:24)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":85:31)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":85:35)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":85:46)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":85:47)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":85:9)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":86:9)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":86:37)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":86:13)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":86:21)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":86:27)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":86:28)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":86:34)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":86:33)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":87:19)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":87:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":87:14)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":87:15)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":89:5)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":97:5)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":90:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":90:24)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":91:16)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":91:24)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":91:29)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":91:33)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":91:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":91:34)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":92:25)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":92:16)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":92:20)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":92:9)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":94:9)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":94:17)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":94:23)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":94:31)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":95:19)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":95:9)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":96:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c":96:14)
#loc171 = loc(fused[#loc1, #loc2])
#loc172 = loc(fused[#loc3, #loc4])
#loc173 = loc(fused[#loc5, #loc6])
#loc174 = loc(fused[#loc7, #loc8])
#loc175 = loc(fused[#loc9, #loc10])
#loc176 = loc(fused[#loc11, #loc12])
#loc177 = loc(fused[#loc13, #loc14])
#loc178 = loc(fused[#loc16, #loc15])
#loc179 = loc(fused[#loc17, #loc18])
#loc180 = loc(fused[#loc20, #loc18])
#loc181 = loc(fused[#loc23, #loc24])
#loc182 = loc(fused[#loc22, #loc24])
#loc183 = loc(fused[#loc21, #loc25])
#loc184 = loc(fused[#loc26, #loc25])
#loc185 = loc(fused[#loc27, #loc28])
#loc186 = loc(fused[#loc29, #loc30])
#loc187 = loc(fused[#loc31, #loc28])
#loc188 = loc(fused[#loc36, #loc35])
#loc189 = loc(fused[#loc39, #loc40])
#loc190 = loc(fused[#loc41, #loc42])
#loc191 = loc(fused[#loc47, #loc48])
#loc192 = loc(fused[#loc52, #loc49])
#loc193 = loc(fused[#loc61, #loc62])
#loc194 = loc(fused[#loc63, #loc64])
#loc195 = loc(fused[#loc65, #loc66])
#loc196 = loc(fused[#loc68, #loc69])
#loc197 = loc(fused[#loc70, #loc71])
#loc198 = loc(fused[#loc73, #loc72])
#loc199 = loc(fused[#loc74, #loc75])
#loc200 = loc(fused[#loc77, #loc78, #loc79, #loc75])
#loc201 = loc(fused[#loc83, #loc84])
#loc202 = loc(fused[#loc82, #loc84])
#loc203 = loc(fused[#loc81, #loc85])
#loc204 = loc(fused[#loc86, #loc85])
#loc205 = loc(fused[#loc87, #loc88])
#loc206 = loc(fused[#loc89, #loc90])
#loc207 = loc(fused[#loc91, #loc88])
#loc208 = loc(fused[#loc96, #loc95])
#loc209 = loc(fused[#loc99, #loc100])
#loc210 = loc(fused[#loc101, #loc102])
#loc211 = loc(fused[#loc107, #loc108])
#loc212 = loc(fused[#loc112, #loc109])
#loc213 = loc(fused[#loc121, #loc122])
#loc214 = loc(fused[#loc123, #loc124])
#loc215 = loc(fused[#loc126, #loc125])
#loc216 = loc(fused[#loc127, #loc128])
#loc217 = loc(fused[#loc130, #loc128])
#loc218 = loc(fused[#loc133, #loc134])
#loc219 = loc(fused[#loc132, #loc134])
#loc220 = loc(fused[#loc131, #loc135])
#loc221 = loc(fused[#loc136, #loc135])
#loc222 = loc(fused[#loc137, #loc138])
#loc223 = loc(fused[#loc139, #loc140])
#loc224 = loc(fused[#loc141, #loc138])
#loc225 = loc(fused[#loc146, #loc145])
#loc226 = loc(fused[#loc149, #loc150])
#loc227 = loc(fused[#loc151, #loc152])
#loc228 = loc(fused[#loc157, #loc158])
#loc229 = loc(fused[#loc162, #loc159])
