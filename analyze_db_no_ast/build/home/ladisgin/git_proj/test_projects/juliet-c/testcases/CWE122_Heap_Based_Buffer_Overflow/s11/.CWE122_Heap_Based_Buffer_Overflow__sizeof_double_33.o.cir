!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc78)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc79)
  cir.func private  @printDoubleLine(!cir.double) loc(#loc80)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc81)
  cir.func  @_ZN51CWE122_Heap_Based_Buffer_Overflow__sizeof_double_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc83)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc84)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>> loc(#loc14)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc15)
    cir.store %2, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc85)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc17)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc86)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc17)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc87)
    cir.store %6, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc88)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc24)
      %10 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc25)
      %11 = cir.cmp(eq, %9, %10) : !cir.ptr<!cir.double>, !cir.bool loc(#loc90)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc27)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc28)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc29)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc27)
      } loc(#loc91)
    } loc(#loc89)
    %7 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc30)
    %8 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc31)
    cir.store %7, %8 : !cir.double, !cir.ptr<!cir.double> loc(#loc92)
    cir.scope {
      %9 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data", init] {alignment = 8 : i64} loc(#loc94)
      %10 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc36)
      %11 = cir.load %10 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc36)
      cir.store %11, %9 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc94)
      %12 = cir.load deref %9 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc37)
      %13 = cir.load %12 : !cir.ptr<!cir.double>, !cir.double loc(#loc38)
      cir.call @printDoubleLine(%13) : (!cir.double) -> () loc(#loc39)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc40)
      %15 = cir.load %9 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc41)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!cir.double>), !cir.ptr<!void> loc(#loc41)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc40)
    } loc(#loc93)
    cir.return loc(#loc10)
  } loc(#loc82)
  cir.func internal private  @_ZN51CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc96)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc97)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>> loc(#loc47)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc48)
    cir.store %2, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc98)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc50)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc99)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc50)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc100)
    cir.store %6, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc101)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc57)
      %10 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc58)
      %11 = cir.cmp(eq, %9, %10) : !cir.ptr<!cir.double>, !cir.bool loc(#loc103)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc60)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc61)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc62)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc60)
      } loc(#loc104)
    } loc(#loc102)
    %7 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc63)
    %8 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc64)
    cir.store %7, %8 : !cir.double, !cir.ptr<!cir.double> loc(#loc105)
    cir.scope {
      %9 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data", init] {alignment = 8 : i64} loc(#loc107)
      %10 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc69)
      %11 = cir.load %10 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc69)
      cir.store %11, %9 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc107)
      %12 = cir.load deref %9 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc70)
      %13 = cir.load %12 : !cir.ptr<!cir.double>, !cir.double loc(#loc71)
      cir.call @printDoubleLine(%13) : (!cir.double) -> () loc(#loc72)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc73)
      %15 = cir.load %9 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc74)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!cir.double>), !cir.ptr<!void> loc(#loc74)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc73)
    } loc(#loc106)
    cir.return loc(#loc43)
  } loc(#loc95)
  cir.func  @_ZN51CWE122_Heap_Based_Buffer_Overflow__sizeof_double_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33L7goodG2BEv() : () -> () loc(#loc77)
    cir.return loc(#loc76)
  } loc(#loc108)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":38:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":38:41)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":24:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":41:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":26:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":26:14)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":27:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":27:25)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":29:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":29:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":32:22)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":32:29)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":32:40)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":32:41)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":32:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":33:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":33:33)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":33:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":33:17)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":33:23)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":33:24)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":33:30)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":33:29)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":34:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":34:6)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":34:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":35:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":40:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":36:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":36:25)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":38:26)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":38:25)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":38:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":39:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":39:14)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":48:1)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":64:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":50:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":50:14)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":51:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":51:25)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":53:12)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":53:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":55:22)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":55:29)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":55:41)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":55:42)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":55:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":56:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":56:33)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":56:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":56:17)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":56:23)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":56:24)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":56:30)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":56:29)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":57:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":57:6)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":57:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":58:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":63:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":59:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":59:25)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":61:26)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":61:25)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":61:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":62:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":62:14)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":66:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":69:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_33.cpp":68:5)
#loc78 = loc(fused[#loc1, #loc2])
#loc79 = loc(fused[#loc3, #loc4])
#loc80 = loc(fused[#loc5, #loc6])
#loc81 = loc(fused[#loc7, #loc8])
#loc82 = loc(fused[#loc9, #loc10])
#loc83 = loc(fused[#loc11, #loc12])
#loc84 = loc(fused[#loc13, #loc14])
#loc85 = loc(fused[#loc16, #loc15])
#loc86 = loc(fused[#loc18, #loc19])
#loc87 = loc(fused[#loc17, #loc20])
#loc88 = loc(fused[#loc21, #loc20])
#loc89 = loc(fused[#loc22, #loc23])
#loc90 = loc(fused[#loc24, #loc25])
#loc91 = loc(fused[#loc26, #loc23])
#loc92 = loc(fused[#loc32, #loc30])
#loc93 = loc(fused[#loc33, #loc34])
#loc94 = loc(fused[#loc35, #loc36])
#loc95 = loc(fused[#loc42, #loc43])
#loc96 = loc(fused[#loc44, #loc45])
#loc97 = loc(fused[#loc46, #loc47])
#loc98 = loc(fused[#loc49, #loc48])
#loc99 = loc(fused[#loc51, #loc52])
#loc100 = loc(fused[#loc50, #loc53])
#loc101 = loc(fused[#loc54, #loc53])
#loc102 = loc(fused[#loc55, #loc56])
#loc103 = loc(fused[#loc57, #loc58])
#loc104 = loc(fused[#loc59, #loc56])
#loc105 = loc(fused[#loc65, #loc63])
#loc106 = loc(fused[#loc66, #loc67])
#loc107 = loc(fused[#loc68, #loc69])
#loc108 = loc(fused[#loc75, #loc76])
