!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":118:10)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":118:14)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":118:20)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":118:32)
#loc180 = loc(fused[#loc59, #loc60])
#loc181 = loc(fused[#loc61, #loc62])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc157)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc159)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc160)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc161)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc11)
    cir.store %3, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc162)
    cir.br ^bb1 loc(#loc163)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc164)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<10> : !s32i loc(#loc17)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc17)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc17)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc17)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc17)
    cir.store %10, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc165)
    cir.br ^bb3 loc(#loc14)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc14)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc166)
  ^bb5:  // pred: ^bb4
    %11 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc159)
    cir.store %11, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc159)
    cir.br ^bb6 loc(#loc167)
  ^bb6:  // pred: ^bb5
    %12 = cir.const #cir.int<0> : !s32i loc(#loc23)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc23)
    cir.store %13, %1 : !u64i, !cir.ptr<!u64i> loc(#loc168)
    cir.br ^bb7 loc(#loc167)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %14 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc25)
    %15 = cir.const #cir.int<10> : !s32i loc(#loc26)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc26)
    %17 = cir.cmp(lt, %14, %16) : !u64i, !cir.bool loc(#loc169)
    cir.brcond %17 ^bb8, ^bb12 loc(#loc27)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc170)
  ^bb9:  // pred: ^bb8
    %18 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc29)
    %19 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc30)
    %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !u64i), !cir.ptr<!s32i> loc(#loc30)
    %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc30)
    %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc31)
    %23 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc32)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc33)
    cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc171)
    cir.br ^bb10 loc(#loc22)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc22)
  ^bb11:  // pred: ^bb10
    %25 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc35)
    %26 = cir.unary(inc, %25) : !u64i, !u64i loc(#loc36)
    cir.store %26, %1 : !u64i, !cir.ptr<!u64i> loc(#loc172)
    cir.br ^bb7 loc(#loc167)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc22)
  ^bb13:  // pred: ^bb12
    %27 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc37)
    %28 = cir.const #cir.int<0> : !s32i loc(#loc38)
    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc39)
    %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc37)
    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc40)
    cir.br ^bb14 loc(#loc20)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc4)
  } loc(#loc158)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc174)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    cir.return loc(#loc42)
  } loc(#loc173)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc176)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc177)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc178)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc56)
  cir.func @main(%arg0: !s32i loc(fused[#loc59, #loc60]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc61, #loc62])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc180)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc181)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc58)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc63)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc63)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc64)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc65)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc65)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc66)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc53)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04_good : !cir.ptr<!cir.func<!void ()>> loc(#loc182)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04_good() : () -> () loc(#loc68)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc54)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc55)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc183)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04_bad() : () -> () loc(#loc72)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc56)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc75)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc184)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc184)
    cir.return %17 : !s32i loc(#loc184)
  } loc(#loc179)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc77)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc186)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc187)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc188)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc86)
    cir.store %3, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc189)
    cir.br ^bb1 loc(#loc190)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<0> : !s32i loc(#loc90)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc90)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc191)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc77)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    cir.br ^bb4 loc(#loc92)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<10> : !s32i loc(#loc95)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc95)
    %10 = cir.const #cir.int<4> : !u64i loc(#loc95)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc95)
    %12 = cir.alloca !u8i, !cir.ptr<!u8i>, %11 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc95)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc95)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc95)
    cir.store %14, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc192)
    cir.br ^bb4 loc(#loc89)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc89)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc193)
  ^bb6:  // pred: ^bb5
    %15 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc186)
    cir.store %15, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc186)
    cir.br ^bb7 loc(#loc194)
  ^bb7:  // pred: ^bb6
    %16 = cir.const #cir.int<0> : !s32i loc(#loc101)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc101)
    cir.store %17, %1 : !u64i, !cir.ptr<!u64i> loc(#loc195)
    cir.br ^bb8 loc(#loc194)
  ^bb8:  // 2 preds: ^bb7, ^bb12
    %18 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc103)
    %19 = cir.const #cir.int<10> : !s32i loc(#loc104)
    %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc104)
    %21 = cir.cmp(lt, %18, %20) : !u64i, !cir.bool loc(#loc196)
    cir.brcond %21 ^bb9, ^bb13 loc(#loc105)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc197)
  ^bb10:  // pred: ^bb9
    %22 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc107)
    %23 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc108)
    %24 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %22 : !u64i), !cir.ptr<!s32i> loc(#loc108)
    %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc108)
    %26 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc109)
    %27 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc110)
    %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !u64i), !cir.ptr<!s32i> loc(#loc111)
    cir.store %25, %28 : !s32i, !cir.ptr<!s32i> loc(#loc198)
    cir.br ^bb11 loc(#loc100)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc100)
  ^bb12:  // pred: ^bb11
    %29 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc113)
    %30 = cir.unary(inc, %29) : !u64i, !u64i loc(#loc114)
    cir.store %30, %1 : !u64i, !cir.ptr<!u64i> loc(#loc199)
    cir.br ^bb8 loc(#loc194)
  ^bb13:  // pred: ^bb8
    cir.br ^bb14 loc(#loc100)
  ^bb14:  // pred: ^bb13
    %31 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc115)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc116)
    %33 = cir.ptr_stride(%31 : !cir.ptr<!s32i>, %32 : !s32i), !cir.ptr<!s32i> loc(#loc117)
    %34 = cir.load %33 : !cir.ptr<!s32i>, !s32i loc(#loc115)
    cir.call @printIntLine(%34) : (!s32i) -> () loc(#loc118)
    cir.br ^bb15 loc(#loc98)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc79)
  } loc(#loc185)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc201)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc202)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc203)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc127)
    cir.store %3, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc204)
    cir.br ^bb1 loc(#loc205)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<1> : !s32i loc(#loc131)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc131)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc206)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<10> : !s32i loc(#loc133)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc133)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc133)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc133)
    %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc133)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc133)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc133)
    cir.store %12, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc207)
    cir.br ^bb3 loc(#loc130)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc130)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc208)
  ^bb5:  // pred: ^bb4
    %13 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc201)
    cir.store %13, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc201)
    cir.br ^bb6 loc(#loc209)
  ^bb6:  // pred: ^bb5
    %14 = cir.const #cir.int<0> : !s32i loc(#loc139)
    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc139)
    cir.store %15, %1 : !u64i, !cir.ptr<!u64i> loc(#loc210)
    cir.br ^bb7 loc(#loc209)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %16 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc141)
    %17 = cir.const #cir.int<10> : !s32i loc(#loc142)
    %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc142)
    %19 = cir.cmp(lt, %16, %18) : !u64i, !cir.bool loc(#loc211)
    cir.brcond %19 ^bb8, ^bb12 loc(#loc143)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc212)
  ^bb9:  // pred: ^bb8
    %20 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc145)
    %21 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc146)
    %22 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %20 : !u64i), !cir.ptr<!s32i> loc(#loc146)
    %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc146)
    %24 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc147)
    %25 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc148)
    %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !u64i), !cir.ptr<!s32i> loc(#loc149)
    cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc213)
    cir.br ^bb10 loc(#loc138)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc138)
  ^bb11:  // pred: ^bb10
    %27 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc151)
    %28 = cir.unary(inc, %27) : !u64i, !u64i loc(#loc152)
    cir.store %28, %1 : !u64i, !cir.ptr<!u64i> loc(#loc214)
    cir.br ^bb7 loc(#loc209)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc138)
  ^bb13:  // pred: ^bb12
    %29 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc153)
    %30 = cir.const #cir.int<0> : !s32i loc(#loc154)
    %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc155)
    %32 = cir.load %31 : !cir.ptr<!s32i>, !s32i loc(#loc153)
    cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc156)
    cir.br ^bb14 loc(#loc136)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc120)
  } loc(#loc200)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":28:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":47:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":38:9)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":38:28)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":39:9)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":39:16)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":30:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":30:11)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":31:12)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":31:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":32:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":36:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":32:8)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":33:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":35:23)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":35:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":37:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":46:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":41:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":44:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":41:18)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":41:14)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":41:21)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":41:25)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":41:23)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":42:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":43:30)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":43:23)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":43:13)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":43:18)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":43:19)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":43:31)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":41:30)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":41:29)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":45:22)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":45:27)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":45:28)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":45:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":102:1)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":106:1)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":104:5)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":104:14)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":105:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":105:14)
#loc47 = loc("/usr/include/stdlib.h":575:1)
#loc48 = loc("/usr/include/stdlib.h":575:41)
#loc49 = loc("/usr/include/time.h":76:1)
#loc50 = loc("/usr/include/time.h":76:38)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":123:15)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":125:15)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":128:15)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":130:15)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":118:1)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":133:1)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":119:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":121:27)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":121:22)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":121:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":123:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":124:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":124:61)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":125:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":128:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":129:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":129:60)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":130:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":132:12)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":132:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":61:19)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":54:1)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":78:1)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":69:9)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":69:28)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":70:9)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":70:16)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":56:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":56:11)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":57:12)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":57:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":58:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":67:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":58:8)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":59:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":62:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":64:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":61:9)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":66:23)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":66:9)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":68:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":77:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":72:9)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":75:9)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":72:18)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":72:14)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":72:21)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":72:25)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":72:23)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":73:9)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":74:30)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":74:23)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":74:13)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":74:18)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":74:19)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":74:31)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":72:30)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":72:29)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":76:22)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":76:27)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":76:28)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":76:9)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":81:1)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":100:1)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":91:9)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":91:28)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":92:9)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":92:16)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":83:5)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":83:11)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":84:12)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":84:5)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":85:5)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":89:5)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":85:8)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":86:5)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":88:23)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":88:9)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":90:5)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":99:5)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":94:9)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":97:9)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":94:18)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":94:14)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":94:21)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":94:25)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":94:23)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":95:9)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":96:30)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":96:23)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":96:13)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":96:18)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":96:19)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":96:31)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":94:30)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":94:29)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":98:22)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":98:27)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":98:28)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":98:9)
#loc157 = loc(fused[#loc1, #loc2])
#loc158 = loc(fused[#loc3, #loc4])
#loc159 = loc(fused[#loc5, #loc6])
#loc160 = loc(fused[#loc7, #loc8])
#loc161 = loc(fused[#loc9, #loc10])
#loc162 = loc(fused[#loc12, #loc11])
#loc163 = loc(fused[#loc13, #loc14])
#loc164 = loc(fused[#loc16, #loc14])
#loc165 = loc(fused[#loc18, #loc17])
#loc166 = loc(fused[#loc19, #loc20])
#loc167 = loc(fused[#loc21, #loc22])
#loc168 = loc(fused[#loc24, #loc23])
#loc169 = loc(fused[#loc25, #loc26])
#loc170 = loc(fused[#loc28, #loc22])
#loc171 = loc(fused[#loc31, #loc34])
#loc172 = loc(fused[#loc36, #loc35])
#loc173 = loc(fused[#loc41, #loc42])
#loc174 = loc(fused[#loc43, #loc44])
#loc175 = loc(fused[#loc45, #loc46])
#loc176 = loc(fused[#loc47, #loc48])
#loc177 = loc(fused[#loc49, #loc50])
#loc178 = loc(fused[#loc51, #loc52])
#loc179 = loc(fused[#loc57, #loc58])
#loc182 = loc(fused[#loc68, #loc69])
#loc183 = loc(fused[#loc72, #loc73])
#loc184 = loc(fused[#loc76, #loc75])
#loc185 = loc(fused[#loc78, #loc79])
#loc186 = loc(fused[#loc80, #loc81])
#loc187 = loc(fused[#loc82, #loc83])
#loc188 = loc(fused[#loc84, #loc85])
#loc189 = loc(fused[#loc87, #loc86])
#loc190 = loc(fused[#loc88, #loc89])
#loc191 = loc(fused[#loc91, #loc92, #loc93, #loc89])
#loc192 = loc(fused[#loc96, #loc95])
#loc193 = loc(fused[#loc97, #loc98])
#loc194 = loc(fused[#loc99, #loc100])
#loc195 = loc(fused[#loc102, #loc101])
#loc196 = loc(fused[#loc103, #loc104])
#loc197 = loc(fused[#loc106, #loc100])
#loc198 = loc(fused[#loc109, #loc112])
#loc199 = loc(fused[#loc114, #loc113])
#loc200 = loc(fused[#loc119, #loc120])
#loc201 = loc(fused[#loc121, #loc122])
#loc202 = loc(fused[#loc123, #loc124])
#loc203 = loc(fused[#loc125, #loc126])
#loc204 = loc(fused[#loc128, #loc127])
#loc205 = loc(fused[#loc129, #loc130])
#loc206 = loc(fused[#loc132, #loc130])
#loc207 = loc(fused[#loc134, #loc133])
#loc208 = loc(fused[#loc135, #loc136])
#loc209 = loc(fused[#loc137, #loc138])
#loc210 = loc(fused[#loc140, #loc139])
#loc211 = loc(fused[#loc141, #loc142])
#loc212 = loc(fused[#loc144, #loc138])
#loc213 = loc(fused[#loc147, #loc150])
#loc214 = loc(fused[#loc152, #loc151])
