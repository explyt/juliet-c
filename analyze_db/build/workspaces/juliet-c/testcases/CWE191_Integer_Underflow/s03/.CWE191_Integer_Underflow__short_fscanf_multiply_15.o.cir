!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_fscanf_multiply_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc226)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc227)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%hd\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc228)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc8)
  cir.func private @printIntLine(!s32i) loc(#loc229)
  cir.func no_proto @CWE191_Integer_Underflow__short_fscanf_multiply_15_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc231)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc15)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc15)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc232)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc19)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc21)
          %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc227)
          %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc22)
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc5)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc5)
          %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc21)
          cir.break loc(#loc23)
        } loc(#loc20)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc8)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc8)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc25)
          cir.break loc(#loc26)
        } loc(#loc24)
        cir.yield loc(#loc17)
      } loc(#loc17)
    } loc(#loc233)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc29)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc33)
            %5 = cir.cast(integral, %4 : !s16i), !s32i loc(#loc33)
            %6 = cir.const #cir.int<0> : !s32i loc(#loc34)
            %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc236)
            cir.if %7 {
              %8 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc238)
              %9 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc38)
              %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc38)
              %11 = cir.const #cir.int<2> : !s32i loc(#loc37)
              %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc38)
              %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc38)
              cir.store %13, %8 : !s16i, !cir.ptr<!s16i> loc(#loc238)
              %14 = cir.load %8 : !cir.ptr<!s16i>, !s16i loc(#loc39)
              %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc39)
              cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc40)
            } loc(#loc237)
          } loc(#loc235)
          cir.break loc(#loc41)
        } loc(#loc30)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc43)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc43)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc44)
          cir.break loc(#loc45)
        } loc(#loc42)
        cir.yield loc(#loc27)
      } loc(#loc27)
    } loc(#loc234)
    cir.return loc(#loc12)
  } loc(#loc230)
  cir.func no_proto @CWE191_Integer_Underflow__short_fscanf_multiply_15_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc240)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc48)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc241)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc50)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc242)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc52)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc243)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc54)
    cir.return loc(#loc47)
  } loc(#loc239)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc56)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc245)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc61)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc61)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc246)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc65)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc67)
          %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc227)
          %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc68)
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc69)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc69)
          %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc67)
          cir.break loc(#loc70)
        } loc(#loc66)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc72)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc72)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc73)
          cir.break loc(#loc74)
        } loc(#loc71)
        cir.yield loc(#loc63)
      } loc(#loc63)
    } loc(#loc247)
    cir.scope {
      %3 = cir.const #cir.int<8> : !s32i loc(#loc77)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc79)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc79)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc80)
          cir.break loc(#loc81)
        } loc(#loc78)
        cir.case(default, []) {
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc85)
            %5 = cir.cast(integral, %4 : !s16i), !s32i loc(#loc85)
            %6 = cir.const #cir.int<0> : !s32i loc(#loc86)
            %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc250)
            cir.if %7 {
              cir.scope {
                %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc90)
                %9 = cir.cast(integral, %8 : !s16i), !s32i loc(#loc90)
                %10 = cir.const #cir.int<32767> : !s32i loc(#loc91)
                %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc91)
                %12 = cir.const #cir.int<1> : !s32i loc(#loc91)
                %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc91)
                %14 = cir.const #cir.int<2> : !s32i loc(#loc92)
                %15 = cir.binop(div, %13, %14) : !s32i loc(#loc253)
                %16 = cir.cmp(gt, %9, %15) : !s32i, !cir.bool loc(#loc254)
                cir.if %16 {
                  %17 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc256)
                  %18 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc99)
                  %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc99)
                  %20 = cir.const #cir.int<2> : !s32i loc(#loc98)
                  %21 = cir.binop(mul, %19, %20) nsw : !s32i loc(#loc99)
                  %22 = cir.cast(integral, %21 : !s32i), !s16i loc(#loc99)
                  cir.store %22, %17 : !s16i, !cir.ptr<!s16i> loc(#loc256)
                  %23 = cir.load %17 : !cir.ptr<!s16i>, !s16i loc(#loc100)
                  %24 = cir.cast(integral, %23 : !s16i), !s32i loc(#loc100)
                  cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc101)
                } else {
                  %17 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc56)
                  %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc56)
                  cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc102)
                } loc(#loc255)
              } loc(#loc252)
            } loc(#loc251)
          } loc(#loc249)
          cir.break loc(#loc103)
        } loc(#loc82)
        cir.yield loc(#loc75)
      } loc(#loc75)
    } loc(#loc248)
    cir.return loc(#loc58)
  } loc(#loc244)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc258)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc108)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc108)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc259)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc112)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc114)
          %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc227)
          %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc115)
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc116)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc116)
          %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc114)
          cir.break loc(#loc117)
        } loc(#loc113)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc119)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc119)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc120)
          cir.break loc(#loc121)
        } loc(#loc118)
        cir.yield loc(#loc110)
      } loc(#loc110)
    } loc(#loc260)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc124)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc128)
            %5 = cir.cast(integral, %4 : !s16i), !s32i loc(#loc128)
            %6 = cir.const #cir.int<0> : !s32i loc(#loc129)
            %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc263)
            cir.if %7 {
              cir.scope {
                %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc133)
                %9 = cir.cast(integral, %8 : !s16i), !s32i loc(#loc133)
                %10 = cir.const #cir.int<32767> : !s32i loc(#loc134)
                %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc134)
                %12 = cir.const #cir.int<1> : !s32i loc(#loc134)
                %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc134)
                %14 = cir.const #cir.int<2> : !s32i loc(#loc135)
                %15 = cir.binop(div, %13, %14) : !s32i loc(#loc266)
                %16 = cir.cmp(gt, %9, %15) : !s32i, !cir.bool loc(#loc267)
                cir.if %16 {
                  %17 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc269)
                  %18 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc142)
                  %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc142)
                  %20 = cir.const #cir.int<2> : !s32i loc(#loc141)
                  %21 = cir.binop(mul, %19, %20) nsw : !s32i loc(#loc142)
                  %22 = cir.cast(integral, %21 : !s32i), !s16i loc(#loc142)
                  cir.store %22, %17 : !s16i, !cir.ptr<!s16i> loc(#loc269)
                  %23 = cir.load %17 : !cir.ptr<!s16i>, !s16i loc(#loc143)
                  %24 = cir.cast(integral, %23 : !s16i), !s32i loc(#loc143)
                  cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc144)
                } else {
                  %17 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc145)
                  %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc145)
                  cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc146)
                } loc(#loc268)
              } loc(#loc265)
            } loc(#loc264)
          } loc(#loc262)
          cir.break loc(#loc147)
        } loc(#loc125)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc149)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc149)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc150)
          cir.break loc(#loc151)
        } loc(#loc148)
        cir.yield loc(#loc122)
      } loc(#loc122)
    } loc(#loc261)
    cir.return loc(#loc105)
  } loc(#loc257)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc271)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc156)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc156)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc272)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc160)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc162)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc162)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc163)
          cir.break loc(#loc164)
        } loc(#loc161)
        cir.case(default, []) {
          %4 = cir.const #cir.int<2> : !s32i loc(#loc166)
          %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc167)
          %6 = cir.cast(integral, %5 : !s32i), !s16i loc(#loc167)
          cir.store %6, %0 : !s16i, !cir.ptr<!s16i> loc(#loc274)
          cir.break loc(#loc169)
        } loc(#loc165)
        cir.yield loc(#loc158)
      } loc(#loc158)
    } loc(#loc273)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc172)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc176)
            %5 = cir.cast(integral, %4 : !s16i), !s32i loc(#loc176)
            %6 = cir.const #cir.int<0> : !s32i loc(#loc177)
            %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc277)
            cir.if %7 {
              %8 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc279)
              %9 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc181)
              %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc181)
              %11 = cir.const #cir.int<2> : !s32i loc(#loc180)
              %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc181)
              %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc181)
              cir.store %13, %8 : !s16i, !cir.ptr<!s16i> loc(#loc279)
              %14 = cir.load %8 : !cir.ptr<!s16i>, !s16i loc(#loc182)
              %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc182)
              cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc183)
            } loc(#loc278)
          } loc(#loc276)
          cir.break loc(#loc184)
        } loc(#loc173)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc186)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc186)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc187)
          cir.break loc(#loc188)
        } loc(#loc185)
        cir.yield loc(#loc170)
      } loc(#loc170)
    } loc(#loc275)
    cir.return loc(#loc153)
  } loc(#loc270)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc281)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc193)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc193)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc282)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc197)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<2> : !s32i loc(#loc199)
          %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc200)
          %6 = cir.cast(integral, %5 : !s32i), !s16i loc(#loc200)
          cir.store %6, %0 : !s16i, !cir.ptr<!s16i> loc(#loc284)
          cir.break loc(#loc202)
        } loc(#loc198)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc204)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc204)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc205)
          cir.break loc(#loc206)
        } loc(#loc203)
        cir.yield loc(#loc195)
      } loc(#loc195)
    } loc(#loc283)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc209)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc213)
            %5 = cir.cast(integral, %4 : !s16i), !s32i loc(#loc213)
            %6 = cir.const #cir.int<0> : !s32i loc(#loc214)
            %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc287)
            cir.if %7 {
              %8 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc289)
              %9 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc218)
              %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc218)
              %11 = cir.const #cir.int<2> : !s32i loc(#loc217)
              %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc218)
              %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc218)
              cir.store %13, %8 : !s16i, !cir.ptr<!s16i> loc(#loc289)
              %14 = cir.load %8 : !cir.ptr<!s16i>, !s16i loc(#loc219)
              %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc219)
              cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc220)
            } loc(#loc288)
          } loc(#loc286)
          cir.break loc(#loc221)
        } loc(#loc210)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc223)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc223)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc224)
          cir.break loc(#loc225)
        } loc(#loc222)
        cir.yield loc(#loc207)
      } loc(#loc207)
    } loc(#loc285)
    cir.return loc(#loc190)
  } loc(#loc280)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_fscanf_multiply_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":30:24)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":34:19)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc11 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":22:1)
#loc12 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":52:1)
#loc13 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":24:5)
#loc14 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":24:11)
#loc15 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":25:12)
#loc16 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":25:5)
#loc17 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":26:5)
#loc18 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":36:5)
#loc19 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":26:12)
#loc20 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":28:5)
#loc21 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":30:9)
#loc22 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":30:17)
#loc23 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":31:9)
#loc24 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":32:5)
#loc25 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":34:9)
#loc26 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":35:9)
#loc27 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":37:5)
#loc28 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":51:5)
#loc29 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":37:12)
#loc30 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":39:5)
#loc31 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":40:9)
#loc32 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":45:9)
#loc33 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":40:12)
#loc34 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":40:19)
#loc35 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":41:9)
#loc36 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":43:13)
#loc37 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":43:35)
#loc38 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":43:28)
#loc39 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":44:26)
#loc40 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":44:13)
#loc41 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":46:9)
#loc42 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":47:5)
#loc43 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":49:19)
#loc44 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":49:9)
#loc45 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":50:9)
#loc46 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":204:1)
#loc47 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":210:1)
#loc48 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":206:5)
#loc49 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":206:14)
#loc50 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":207:5)
#loc51 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":207:14)
#loc52 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":208:5)
#loc53 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":208:14)
#loc54 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":209:5)
#loc55 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":209:14)
#loc56 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":91:27)
#loc57 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":59:1)
#loc58 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":96:1)
#loc59 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":61:5)
#loc60 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":61:11)
#loc61 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":62:12)
#loc62 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":62:5)
#loc63 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":63:5)
#loc64 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":73:5)
#loc65 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":63:12)
#loc66 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":65:5)
#loc67 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":67:9)
#loc68 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":67:17)
#loc69 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":67:24)
#loc70 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":68:9)
#loc71 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":69:5)
#loc72 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":71:19)
#loc73 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":71:9)
#loc74 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":72:9)
#loc75 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":74:5)
#loc76 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":95:5)
#loc77 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":74:12)
#loc78 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":76:5)
#loc79 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":78:19)
#loc80 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":78:9)
#loc81 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":79:9)
#loc82 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":80:5)
#loc83 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":81:9)
#loc84 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":93:9)
#loc85 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":81:12)
#loc86 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":81:19)
#loc87 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":82:9)
#loc88 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":84:13)
#loc89 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":92:13)
#loc90 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":84:17)
#loc91 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":84:25)
#loc92 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":84:34)
#loc93 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":84:35)
#loc94 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":85:13)
#loc95 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":88:13)
#loc96 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":90:13)
#loc97 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":86:17)
#loc98 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":86:39)
#loc99 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":86:32)
#loc100 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":87:30)
#loc101 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":87:17)
#loc102 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":91:17)
#loc103 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":94:9)
#loc104 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":99:1)
#loc105 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":136:1)
#loc106 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":101:5)
#loc107 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":101:11)
#loc108 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":102:12)
#loc109 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":102:5)
#loc110 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":103:5)
#loc111 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":113:5)
#loc112 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":103:12)
#loc113 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":105:5)
#loc114 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":107:9)
#loc115 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":107:17)
#loc116 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":107:24)
#loc117 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":108:9)
#loc118 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":109:5)
#loc119 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":111:19)
#loc120 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":111:9)
#loc121 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":112:9)
#loc122 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":114:5)
#loc123 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":135:5)
#loc124 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":114:12)
#loc125 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":116:5)
#loc126 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":117:9)
#loc127 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":129:9)
#loc128 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":117:12)
#loc129 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":117:19)
#loc130 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":118:9)
#loc131 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":120:13)
#loc132 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":128:13)
#loc133 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":120:17)
#loc134 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":120:25)
#loc135 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":120:34)
#loc136 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":120:35)
#loc137 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":121:13)
#loc138 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":124:13)
#loc139 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":126:13)
#loc140 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":122:17)
#loc141 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":122:39)
#loc142 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":122:32)
#loc143 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":123:30)
#loc144 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":123:17)
#loc145 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":127:27)
#loc146 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":127:17)
#loc147 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":130:9)
#loc148 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":131:5)
#loc149 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":133:19)
#loc150 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":133:9)
#loc151 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":134:9)
#loc152 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":139:1)
#loc153 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":169:1)
#loc154 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":141:5)
#loc155 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":141:11)
#loc156 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":142:12)
#loc157 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":142:5)
#loc158 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":143:5)
#loc159 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":153:5)
#loc160 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":143:12)
#loc161 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":145:5)
#loc162 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":147:19)
#loc163 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":147:9)
#loc164 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":148:9)
#loc165 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":149:5)
#loc166 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":151:17)
#loc167 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":151:16)
#loc168 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":151:9)
#loc169 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":152:9)
#loc170 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":154:5)
#loc171 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":168:5)
#loc172 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":154:12)
#loc173 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":156:5)
#loc174 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":157:9)
#loc175 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":162:9)
#loc176 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":157:12)
#loc177 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":157:19)
#loc178 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":158:9)
#loc179 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":160:13)
#loc180 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":160:35)
#loc181 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":160:28)
#loc182 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":161:26)
#loc183 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":161:13)
#loc184 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":163:9)
#loc185 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":164:5)
#loc186 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":166:19)
#loc187 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":166:9)
#loc188 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":167:9)
#loc189 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":172:1)
#loc190 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":202:1)
#loc191 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":174:5)
#loc192 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":174:11)
#loc193 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":175:12)
#loc194 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":175:5)
#loc195 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":176:5)
#loc196 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":186:5)
#loc197 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":176:12)
#loc198 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":178:5)
#loc199 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":180:17)
#loc200 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":180:16)
#loc201 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":180:9)
#loc202 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":181:9)
#loc203 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":182:5)
#loc204 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":184:19)
#loc205 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":184:9)
#loc206 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":185:9)
#loc207 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":187:5)
#loc208 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":201:5)
#loc209 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":187:12)
#loc210 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":189:5)
#loc211 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":190:9)
#loc212 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":195:9)
#loc213 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":190:12)
#loc214 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":190:19)
#loc215 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":191:9)
#loc216 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":193:13)
#loc217 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":193:35)
#loc218 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":193:28)
#loc219 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":194:26)
#loc220 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":194:13)
#loc221 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":196:9)
#loc222 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":197:5)
#loc223 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":199:19)
#loc224 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":199:9)
#loc225 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_15.c":200:9)
#loc226 = loc(fused[#loc1, #loc2])
#loc227 = loc(fused[#loc3, #loc4])
#loc228 = loc(fused[#loc6, #loc7])
#loc229 = loc(fused[#loc9, #loc10])
#loc230 = loc(fused[#loc11, #loc12])
#loc231 = loc(fused[#loc13, #loc14])
#loc232 = loc(fused[#loc16, #loc15])
#loc233 = loc(fused[#loc17, #loc18])
#loc234 = loc(fused[#loc27, #loc28])
#loc235 = loc(fused[#loc31, #loc32])
#loc236 = loc(fused[#loc33, #loc34])
#loc237 = loc(fused[#loc35, #loc32])
#loc238 = loc(fused[#loc36, #loc37])
#loc239 = loc(fused[#loc46, #loc47])
#loc240 = loc(fused[#loc48, #loc49])
#loc241 = loc(fused[#loc50, #loc51])
#loc242 = loc(fused[#loc52, #loc53])
#loc243 = loc(fused[#loc54, #loc55])
#loc244 = loc(fused[#loc57, #loc58])
#loc245 = loc(fused[#loc59, #loc60])
#loc246 = loc(fused[#loc62, #loc61])
#loc247 = loc(fused[#loc63, #loc64])
#loc248 = loc(fused[#loc75, #loc76])
#loc249 = loc(fused[#loc83, #loc84])
#loc250 = loc(fused[#loc85, #loc86])
#loc251 = loc(fused[#loc87, #loc84])
#loc252 = loc(fused[#loc88, #loc89])
#loc253 = loc(fused[#loc91, #loc92])
#loc254 = loc(fused[#loc90, #loc93])
#loc255 = loc(fused[#loc94, #loc95, #loc96, #loc89])
#loc256 = loc(fused[#loc97, #loc98])
#loc257 = loc(fused[#loc104, #loc105])
#loc258 = loc(fused[#loc106, #loc107])
#loc259 = loc(fused[#loc109, #loc108])
#loc260 = loc(fused[#loc110, #loc111])
#loc261 = loc(fused[#loc122, #loc123])
#loc262 = loc(fused[#loc126, #loc127])
#loc263 = loc(fused[#loc128, #loc129])
#loc264 = loc(fused[#loc130, #loc127])
#loc265 = loc(fused[#loc131, #loc132])
#loc266 = loc(fused[#loc134, #loc135])
#loc267 = loc(fused[#loc133, #loc136])
#loc268 = loc(fused[#loc137, #loc138, #loc139, #loc132])
#loc269 = loc(fused[#loc140, #loc141])
#loc270 = loc(fused[#loc152, #loc153])
#loc271 = loc(fused[#loc154, #loc155])
#loc272 = loc(fused[#loc157, #loc156])
#loc273 = loc(fused[#loc158, #loc159])
#loc274 = loc(fused[#loc168, #loc166])
#loc275 = loc(fused[#loc170, #loc171])
#loc276 = loc(fused[#loc174, #loc175])
#loc277 = loc(fused[#loc176, #loc177])
#loc278 = loc(fused[#loc178, #loc175])
#loc279 = loc(fused[#loc179, #loc180])
#loc280 = loc(fused[#loc189, #loc190])
#loc281 = loc(fused[#loc191, #loc192])
#loc282 = loc(fused[#loc194, #loc193])
#loc283 = loc(fused[#loc195, #loc196])
#loc284 = loc(fused[#loc201, #loc199])
#loc285 = loc(fused[#loc207, #loc208])
#loc286 = loc(fused[#loc211, #loc212])
#loc287 = loc(fused[#loc213, #loc214])
#loc288 = loc(fused[#loc215, #loc212])
#loc289 = loc(fused[#loc216, #loc217])
