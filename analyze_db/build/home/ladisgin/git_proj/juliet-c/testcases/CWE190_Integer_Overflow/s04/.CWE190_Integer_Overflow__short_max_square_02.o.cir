!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc159)
  cir.func no_proto @CWE190_Integer_Overflow__short_max_square_02_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc161)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc162)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc9)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc9)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc163)
    cir.br ^bb1 loc(#loc164)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc165)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<32767> : !s32i loc(#loc15)
    %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc15)
    cir.store %7, %1 : !s16i, !cir.ptr<!s16i> loc(#loc166)
    cir.br ^bb3 loc(#loc12)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc12)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc167)
  ^bb5:  // pred: ^bb4
    %8 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %9 ^bb6, ^bb9 loc(#loc168)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc169)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc23)
    %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc23)
    %12 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc6)
    %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc6)
    %14 = cir.binop(mul, %11, %13) nsw : !s32i loc(#loc23)
    %15 = cir.cast(integral, %14 : !s32i), !s16i loc(#loc23)
    cir.store %15, %0 : !s16i, !cir.ptr<!s16i> loc(#loc161)
    %16 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc24)
    %17 = cir.cast(integral, %16 : !s16i), !s32i loc(#loc24)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc25)
    cir.br ^bb8 loc(#loc22)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc18)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc18)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc4)
  } loc(#loc160)
  cir.func no_proto @CWE190_Integer_Overflow__short_max_square_02_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc171)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc172)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc173)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc174)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc27)
  } loc(#loc170)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc175)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc38)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc40)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc177)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc178)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc47)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc47)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc179)
    cir.br ^bb1 loc(#loc180)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<1> : !s32i loc(#loc51)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc51)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc181)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<32767> : !s32i loc(#loc53)
    %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc53)
    cir.store %7, %1 : !s16i, !cir.ptr<!s16i> loc(#loc182)
    cir.br ^bb3 loc(#loc50)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc50)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc183)
  ^bb5:  // pred: ^bb4
    %8 = cir.const #cir.int<0> : !s32i loc(#loc57)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc57)
    cir.brcond %9 ^bb6, ^bb7 loc(#loc184)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc38)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    cir.br ^bb13 loc(#loc59)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc185)
  ^bb8:  // pred: ^bb7
    %12 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc64)
    %13 = cir.cast(integral, %12 : !s16i), !s64i loc(#loc64)
    %14 = cir.cast(integral, %13 : !s64i), !s32i loc(#loc64)
    %15 = cir.abs %14 poison : !s32i loc(#loc65)
    %16 = cir.cast(integral, %15 : !s32i), !s64i loc(#loc65)
    %17 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc66)
    %18 = cir.const #cir.int<32767> : !s32i loc(#loc67)
    %19 = cir.cast(int_to_float, %18 : !s32i), !cir.double loc(#loc67)
    %20 = cir.call @sqrt(%19) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc66)
    %21 = cir.cast(float_to_int, %20 : !cir.double), !s64i loc(#loc66)
    %22 = cir.cmp(le, %16, %21) : !s64i, !cir.bool loc(#loc186)
    cir.brcond %22 ^bb9, ^bb10 loc(#loc187)
  ^bb9:  // pred: ^bb8
    %23 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc72)
    %24 = cir.cast(integral, %23 : !s16i), !s32i loc(#loc72)
    %25 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc44)
    %26 = cir.cast(integral, %25 : !s16i), !s32i loc(#loc44)
    %27 = cir.binop(mul, %24, %26) nsw : !s32i loc(#loc72)
    %28 = cir.cast(integral, %27 : !s32i), !s16i loc(#loc72)
    cir.store %28, %0 : !s16i, !cir.ptr<!s16i> loc(#loc177)
    %29 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc73)
    %30 = cir.cast(integral, %29 : !s16i), !s32i loc(#loc73)
    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc74)
    cir.br ^bb11 loc(#loc70)
  ^bb10:  // pred: ^bb8
    %31 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc40)
    %32 = cir.cast(array_to_ptrdecay, %31 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    cir.br ^bb11 loc(#loc63)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc63)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc56)
  ^bb13:  // 2 preds: ^bb6, ^bb12
    cir.br ^bb14 loc(#loc56)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc42)
  } loc(#loc176)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc189)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc190)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc82)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc82)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc191)
    cir.br ^bb1 loc(#loc192)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc86)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc193)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<32767> : !s32i loc(#loc88)
    %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc88)
    cir.store %7, %1 : !s16i, !cir.ptr<!s16i> loc(#loc194)
    cir.br ^bb3 loc(#loc85)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc85)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc195)
  ^bb5:  // pred: ^bb4
    %8 = cir.const #cir.int<1> : !s32i loc(#loc92)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc92)
    cir.brcond %9 ^bb6, ^bb12 loc(#loc196)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc197)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc96)
    %11 = cir.cast(integral, %10 : !s16i), !s64i loc(#loc96)
    %12 = cir.cast(integral, %11 : !s64i), !s32i loc(#loc96)
    %13 = cir.abs %12 poison : !s32i loc(#loc97)
    %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc97)
    %15 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc98)
    %16 = cir.const #cir.int<32767> : !s32i loc(#loc99)
    %17 = cir.cast(int_to_float, %16 : !s32i), !cir.double loc(#loc99)
    %18 = cir.call @sqrt(%17) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc98)
    %19 = cir.cast(float_to_int, %18 : !cir.double), !s64i loc(#loc98)
    %20 = cir.cmp(le, %14, %19) : !s64i, !cir.bool loc(#loc198)
    cir.brcond %20 ^bb8, ^bb9 loc(#loc199)
  ^bb8:  // pred: ^bb7
    %21 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc104)
    %22 = cir.cast(integral, %21 : !s16i), !s32i loc(#loc104)
    %23 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc79)
    %24 = cir.cast(integral, %23 : !s16i), !s32i loc(#loc79)
    %25 = cir.binop(mul, %22, %24) nsw : !s32i loc(#loc104)
    %26 = cir.cast(integral, %25 : !s32i), !s16i loc(#loc104)
    cir.store %26, %0 : !s16i, !cir.ptr<!s16i> loc(#loc189)
    %27 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc105)
    %28 = cir.cast(integral, %27 : !s16i), !s32i loc(#loc105)
    cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc106)
    cir.br ^bb10 loc(#loc102)
  ^bb9:  // pred: ^bb7
    %29 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc107)
    %30 = cir.cast(array_to_ptrdecay, %29 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc107)
    cir.call @printLine(%30) : (!cir.ptr<!s8i>) -> () loc(#loc108)
    cir.br ^bb10 loc(#loc95)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc95)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc91)
  ^bb12:  // 2 preds: ^bb5, ^bb11
    cir.br ^bb13 loc(#loc91)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc77)
  } loc(#loc188)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc201)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc202)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc115)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc115)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc203)
    cir.br ^bb1 loc(#loc204)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<0> : !s32i loc(#loc119)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc119)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc205)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc123)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc123)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc124)
    cir.br ^bb4 loc(#loc121)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc125)
    %9 = cir.cast(integral, %8 : !s32i), !s16i loc(#loc125)
    cir.store %9, %1 : !s16i, !cir.ptr<!s16i> loc(#loc206)
    cir.br ^bb4 loc(#loc118)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc118)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc207)
  ^bb6:  // pred: ^bb5
    %10 = cir.const #cir.int<1> : !s32i loc(#loc129)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc129)
    cir.brcond %11 ^bb7, ^bb10 loc(#loc208)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc209)
  ^bb8:  // pred: ^bb7
    %12 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc133)
    %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc133)
    %14 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc112)
    %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc112)
    %16 = cir.binop(mul, %13, %15) nsw : !s32i loc(#loc133)
    %17 = cir.cast(integral, %16 : !s32i), !s16i loc(#loc133)
    cir.store %17, %0 : !s16i, !cir.ptr<!s16i> loc(#loc201)
    %18 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc134)
    %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc134)
    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc135)
    cir.br ^bb9 loc(#loc132)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc128)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc128)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc110)
  } loc(#loc200)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc211)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc212)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc142)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc142)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc213)
    cir.br ^bb1 loc(#loc214)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<1> : !s32i loc(#loc146)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc146)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc215)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<2> : !s32i loc(#loc148)
    %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc148)
    cir.store %7, %1 : !s16i, !cir.ptr<!s16i> loc(#loc216)
    cir.br ^bb3 loc(#loc145)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc145)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc217)
  ^bb5:  // pred: ^bb4
    %8 = cir.const #cir.int<1> : !s32i loc(#loc152)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc152)
    cir.brcond %9 ^bb6, ^bb9 loc(#loc218)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc219)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc156)
    %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc156)
    %12 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc139)
    %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc139)
    %14 = cir.binop(mul, %11, %13) nsw : !s32i loc(#loc156)
    %15 = cir.cast(integral, %14 : !s32i), !s16i loc(#loc156)
    cir.store %15, %0 : !s16i, !cir.ptr<!s16i> loc(#loc211)
    %16 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc157)
    %17 = cir.cast(integral, %16 : !s16i), !s32i loc(#loc157)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc158)
    cir.br ^bb8 loc(#loc155)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc151)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc151)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc137)
  } loc(#loc210)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_02.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__short_max_square_02.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__short_max_square_02.c":41:1)
#loc5 = loc("CWE190_Integer_Overflow__short_max_square_02.c":37:13)
#loc6 = loc("CWE190_Integer_Overflow__short_max_square_02.c":37:35)
#loc7 = loc("CWE190_Integer_Overflow__short_max_square_02.c":26:5)
#loc8 = loc("CWE190_Integer_Overflow__short_max_square_02.c":26:11)
#loc9 = loc("CWE190_Integer_Overflow__short_max_square_02.c":27:12)
#loc10 = loc("CWE190_Integer_Overflow__short_max_square_02.c":27:5)
#loc11 = loc("CWE190_Integer_Overflow__short_max_square_02.c":28:5)
#loc12 = loc("CWE190_Integer_Overflow__short_max_square_02.c":32:5)
#loc13 = loc("CWE190_Integer_Overflow__short_max_square_02.c":28:8)
#loc14 = loc("CWE190_Integer_Overflow__short_max_square_02.c":29:5)
#loc15 = loc("CWE190_Integer_Overflow__short_max_square_02.c":31:16)
#loc16 = loc("CWE190_Integer_Overflow__short_max_square_02.c":31:9)
#loc17 = loc("CWE190_Integer_Overflow__short_max_square_02.c":33:5)
#loc18 = loc("CWE190_Integer_Overflow__short_max_square_02.c":40:5)
#loc19 = loc("CWE190_Integer_Overflow__short_max_square_02.c":33:8)
#loc20 = loc("CWE190_Integer_Overflow__short_max_square_02.c":34:5)
#loc21 = loc("CWE190_Integer_Overflow__short_max_square_02.c":35:9)
#loc22 = loc("CWE190_Integer_Overflow__short_max_square_02.c":39:9)
#loc23 = loc("CWE190_Integer_Overflow__short_max_square_02.c":37:28)
#loc24 = loc("CWE190_Integer_Overflow__short_max_square_02.c":38:26)
#loc25 = loc("CWE190_Integer_Overflow__short_max_square_02.c":38:13)
#loc26 = loc("CWE190_Integer_Overflow__short_max_square_02.c":147:1)
#loc27 = loc("CWE190_Integer_Overflow__short_max_square_02.c":153:1)
#loc28 = loc("CWE190_Integer_Overflow__short_max_square_02.c":149:5)
#loc29 = loc("CWE190_Integer_Overflow__short_max_square_02.c":149:14)
#loc30 = loc("CWE190_Integer_Overflow__short_max_square_02.c":150:5)
#loc31 = loc("CWE190_Integer_Overflow__short_max_square_02.c":150:14)
#loc32 = loc("CWE190_Integer_Overflow__short_max_square_02.c":151:5)
#loc33 = loc("CWE190_Integer_Overflow__short_max_square_02.c":151:14)
#loc34 = loc("CWE190_Integer_Overflow__short_max_square_02.c":152:5)
#loc35 = loc("CWE190_Integer_Overflow__short_max_square_02.c":152:14)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc38 = loc("CWE190_Integer_Overflow__short_max_square_02.c":60:19)
#loc39 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc40 = loc("CWE190_Integer_Overflow__short_max_square_02.c":72:23)
#loc41 = loc("CWE190_Integer_Overflow__short_max_square_02.c":48:1)
#loc42 = loc("CWE190_Integer_Overflow__short_max_square_02.c":75:1)
#loc43 = loc("CWE190_Integer_Overflow__short_max_square_02.c":67:13)
#loc44 = loc("CWE190_Integer_Overflow__short_max_square_02.c":67:35)
#loc45 = loc("CWE190_Integer_Overflow__short_max_square_02.c":50:5)
#loc46 = loc("CWE190_Integer_Overflow__short_max_square_02.c":50:11)
#loc47 = loc("CWE190_Integer_Overflow__short_max_square_02.c":51:12)
#loc48 = loc("CWE190_Integer_Overflow__short_max_square_02.c":51:5)
#loc49 = loc("CWE190_Integer_Overflow__short_max_square_02.c":52:5)
#loc50 = loc("CWE190_Integer_Overflow__short_max_square_02.c":56:5)
#loc51 = loc("CWE190_Integer_Overflow__short_max_square_02.c":52:8)
#loc52 = loc("CWE190_Integer_Overflow__short_max_square_02.c":53:5)
#loc53 = loc("CWE190_Integer_Overflow__short_max_square_02.c":55:16)
#loc54 = loc("CWE190_Integer_Overflow__short_max_square_02.c":55:9)
#loc55 = loc("CWE190_Integer_Overflow__short_max_square_02.c":57:5)
#loc56 = loc("CWE190_Integer_Overflow__short_max_square_02.c":74:5)
#loc57 = loc("CWE190_Integer_Overflow__short_max_square_02.c":57:8)
#loc58 = loc("CWE190_Integer_Overflow__short_max_square_02.c":58:5)
#loc59 = loc("CWE190_Integer_Overflow__short_max_square_02.c":61:5)
#loc60 = loc("CWE190_Integer_Overflow__short_max_square_02.c":63:5)
#loc61 = loc("CWE190_Integer_Overflow__short_max_square_02.c":60:9)
#loc62 = loc("CWE190_Integer_Overflow__short_max_square_02.c":65:9)
#loc63 = loc("CWE190_Integer_Overflow__short_max_square_02.c":73:9)
#loc64 = loc("CWE190_Integer_Overflow__short_max_square_02.c":65:23)
#loc65 = loc("CWE190_Integer_Overflow__short_max_square_02.c":65:13)
#loc66 = loc("CWE190_Integer_Overflow__short_max_square_02.c":65:38)
#loc67 = loc("CWE190_Integer_Overflow__short_max_square_02.c":65:51)
#loc68 = loc("CWE190_Integer_Overflow__short_max_square_02.c":65:59)
#loc69 = loc("CWE190_Integer_Overflow__short_max_square_02.c":66:9)
#loc70 = loc("CWE190_Integer_Overflow__short_max_square_02.c":69:9)
#loc71 = loc("CWE190_Integer_Overflow__short_max_square_02.c":71:9)
#loc72 = loc("CWE190_Integer_Overflow__short_max_square_02.c":67:28)
#loc73 = loc("CWE190_Integer_Overflow__short_max_square_02.c":68:26)
#loc74 = loc("CWE190_Integer_Overflow__short_max_square_02.c":68:13)
#loc75 = loc("CWE190_Integer_Overflow__short_max_square_02.c":72:13)
#loc76 = loc("CWE190_Integer_Overflow__short_max_square_02.c":78:1)
#loc77 = loc("CWE190_Integer_Overflow__short_max_square_02.c":100:1)
#loc78 = loc("CWE190_Integer_Overflow__short_max_square_02.c":92:13)
#loc79 = loc("CWE190_Integer_Overflow__short_max_square_02.c":92:35)
#loc80 = loc("CWE190_Integer_Overflow__short_max_square_02.c":80:5)
#loc81 = loc("CWE190_Integer_Overflow__short_max_square_02.c":80:11)
#loc82 = loc("CWE190_Integer_Overflow__short_max_square_02.c":81:12)
#loc83 = loc("CWE190_Integer_Overflow__short_max_square_02.c":81:5)
#loc84 = loc("CWE190_Integer_Overflow__short_max_square_02.c":82:5)
#loc85 = loc("CWE190_Integer_Overflow__short_max_square_02.c":86:5)
#loc86 = loc("CWE190_Integer_Overflow__short_max_square_02.c":82:8)
#loc87 = loc("CWE190_Integer_Overflow__short_max_square_02.c":83:5)
#loc88 = loc("CWE190_Integer_Overflow__short_max_square_02.c":85:16)
#loc89 = loc("CWE190_Integer_Overflow__short_max_square_02.c":85:9)
#loc90 = loc("CWE190_Integer_Overflow__short_max_square_02.c":87:5)
#loc91 = loc("CWE190_Integer_Overflow__short_max_square_02.c":99:5)
#loc92 = loc("CWE190_Integer_Overflow__short_max_square_02.c":87:8)
#loc93 = loc("CWE190_Integer_Overflow__short_max_square_02.c":88:5)
#loc94 = loc("CWE190_Integer_Overflow__short_max_square_02.c":90:9)
#loc95 = loc("CWE190_Integer_Overflow__short_max_square_02.c":98:9)
#loc96 = loc("CWE190_Integer_Overflow__short_max_square_02.c":90:23)
#loc97 = loc("CWE190_Integer_Overflow__short_max_square_02.c":90:13)
#loc98 = loc("CWE190_Integer_Overflow__short_max_square_02.c":90:38)
#loc99 = loc("CWE190_Integer_Overflow__short_max_square_02.c":90:51)
#loc100 = loc("CWE190_Integer_Overflow__short_max_square_02.c":90:59)
#loc101 = loc("CWE190_Integer_Overflow__short_max_square_02.c":91:9)
#loc102 = loc("CWE190_Integer_Overflow__short_max_square_02.c":94:9)
#loc103 = loc("CWE190_Integer_Overflow__short_max_square_02.c":96:9)
#loc104 = loc("CWE190_Integer_Overflow__short_max_square_02.c":92:28)
#loc105 = loc("CWE190_Integer_Overflow__short_max_square_02.c":93:26)
#loc106 = loc("CWE190_Integer_Overflow__short_max_square_02.c":93:13)
#loc107 = loc("CWE190_Integer_Overflow__short_max_square_02.c":97:23)
#loc108 = loc("CWE190_Integer_Overflow__short_max_square_02.c":97:13)
#loc109 = loc("CWE190_Integer_Overflow__short_max_square_02.c":103:1)
#loc110 = loc("CWE190_Integer_Overflow__short_max_square_02.c":125:1)
#loc111 = loc("CWE190_Integer_Overflow__short_max_square_02.c":121:13)
#loc112 = loc("CWE190_Integer_Overflow__short_max_square_02.c":121:35)
#loc113 = loc("CWE190_Integer_Overflow__short_max_square_02.c":105:5)
#loc114 = loc("CWE190_Integer_Overflow__short_max_square_02.c":105:11)
#loc115 = loc("CWE190_Integer_Overflow__short_max_square_02.c":106:12)
#loc116 = loc("CWE190_Integer_Overflow__short_max_square_02.c":106:5)
#loc117 = loc("CWE190_Integer_Overflow__short_max_square_02.c":107:5)
#loc118 = loc("CWE190_Integer_Overflow__short_max_square_02.c":116:5)
#loc119 = loc("CWE190_Integer_Overflow__short_max_square_02.c":107:8)
#loc120 = loc("CWE190_Integer_Overflow__short_max_square_02.c":108:5)
#loc121 = loc("CWE190_Integer_Overflow__short_max_square_02.c":111:5)
#loc122 = loc("CWE190_Integer_Overflow__short_max_square_02.c":113:5)
#loc123 = loc("CWE190_Integer_Overflow__short_max_square_02.c":110:19)
#loc124 = loc("CWE190_Integer_Overflow__short_max_square_02.c":110:9)
#loc125 = loc("CWE190_Integer_Overflow__short_max_square_02.c":115:16)
#loc126 = loc("CWE190_Integer_Overflow__short_max_square_02.c":115:9)
#loc127 = loc("CWE190_Integer_Overflow__short_max_square_02.c":117:5)
#loc128 = loc("CWE190_Integer_Overflow__short_max_square_02.c":124:5)
#loc129 = loc("CWE190_Integer_Overflow__short_max_square_02.c":117:8)
#loc130 = loc("CWE190_Integer_Overflow__short_max_square_02.c":118:5)
#loc131 = loc("CWE190_Integer_Overflow__short_max_square_02.c":119:9)
#loc132 = loc("CWE190_Integer_Overflow__short_max_square_02.c":123:9)
#loc133 = loc("CWE190_Integer_Overflow__short_max_square_02.c":121:28)
#loc134 = loc("CWE190_Integer_Overflow__short_max_square_02.c":122:26)
#loc135 = loc("CWE190_Integer_Overflow__short_max_square_02.c":122:13)
#loc136 = loc("CWE190_Integer_Overflow__short_max_square_02.c":128:1)
#loc137 = loc("CWE190_Integer_Overflow__short_max_square_02.c":145:1)
#loc138 = loc("CWE190_Integer_Overflow__short_max_square_02.c":141:13)
#loc139 = loc("CWE190_Integer_Overflow__short_max_square_02.c":141:35)
#loc140 = loc("CWE190_Integer_Overflow__short_max_square_02.c":130:5)
#loc141 = loc("CWE190_Integer_Overflow__short_max_square_02.c":130:11)
#loc142 = loc("CWE190_Integer_Overflow__short_max_square_02.c":131:12)
#loc143 = loc("CWE190_Integer_Overflow__short_max_square_02.c":131:5)
#loc144 = loc("CWE190_Integer_Overflow__short_max_square_02.c":132:5)
#loc145 = loc("CWE190_Integer_Overflow__short_max_square_02.c":136:5)
#loc146 = loc("CWE190_Integer_Overflow__short_max_square_02.c":132:8)
#loc147 = loc("CWE190_Integer_Overflow__short_max_square_02.c":133:5)
#loc148 = loc("CWE190_Integer_Overflow__short_max_square_02.c":135:16)
#loc149 = loc("CWE190_Integer_Overflow__short_max_square_02.c":135:9)
#loc150 = loc("CWE190_Integer_Overflow__short_max_square_02.c":137:5)
#loc151 = loc("CWE190_Integer_Overflow__short_max_square_02.c":144:5)
#loc152 = loc("CWE190_Integer_Overflow__short_max_square_02.c":137:8)
#loc153 = loc("CWE190_Integer_Overflow__short_max_square_02.c":138:5)
#loc154 = loc("CWE190_Integer_Overflow__short_max_square_02.c":139:9)
#loc155 = loc("CWE190_Integer_Overflow__short_max_square_02.c":143:9)
#loc156 = loc("CWE190_Integer_Overflow__short_max_square_02.c":141:28)
#loc157 = loc("CWE190_Integer_Overflow__short_max_square_02.c":142:26)
#loc158 = loc("CWE190_Integer_Overflow__short_max_square_02.c":142:13)
#loc159 = loc(fused[#loc1, #loc2])
#loc160 = loc(fused[#loc3, #loc4])
#loc161 = loc(fused[#loc5, #loc6])
#loc162 = loc(fused[#loc7, #loc8])
#loc163 = loc(fused[#loc10, #loc9])
#loc164 = loc(fused[#loc11, #loc12])
#loc165 = loc(fused[#loc14, #loc12])
#loc166 = loc(fused[#loc16, #loc15])
#loc167 = loc(fused[#loc17, #loc18])
#loc168 = loc(fused[#loc20, #loc18])
#loc169 = loc(fused[#loc21, #loc22])
#loc170 = loc(fused[#loc26, #loc27])
#loc171 = loc(fused[#loc28, #loc29])
#loc172 = loc(fused[#loc30, #loc31])
#loc173 = loc(fused[#loc32, #loc33])
#loc174 = loc(fused[#loc34, #loc35])
#loc175 = loc(fused[#loc36, #loc37])
#loc176 = loc(fused[#loc41, #loc42])
#loc177 = loc(fused[#loc43, #loc44])
#loc178 = loc(fused[#loc45, #loc46])
#loc179 = loc(fused[#loc48, #loc47])
#loc180 = loc(fused[#loc49, #loc50])
#loc181 = loc(fused[#loc52, #loc50])
#loc182 = loc(fused[#loc54, #loc53])
#loc183 = loc(fused[#loc55, #loc56])
#loc184 = loc(fused[#loc58, #loc59, #loc60, #loc56])
#loc185 = loc(fused[#loc62, #loc63])
#loc186 = loc(fused[#loc65, #loc68])
#loc187 = loc(fused[#loc69, #loc70, #loc71, #loc63])
#loc188 = loc(fused[#loc76, #loc77])
#loc189 = loc(fused[#loc78, #loc79])
#loc190 = loc(fused[#loc80, #loc81])
#loc191 = loc(fused[#loc83, #loc82])
#loc192 = loc(fused[#loc84, #loc85])
#loc193 = loc(fused[#loc87, #loc85])
#loc194 = loc(fused[#loc89, #loc88])
#loc195 = loc(fused[#loc90, #loc91])
#loc196 = loc(fused[#loc93, #loc91])
#loc197 = loc(fused[#loc94, #loc95])
#loc198 = loc(fused[#loc97, #loc100])
#loc199 = loc(fused[#loc101, #loc102, #loc103, #loc95])
#loc200 = loc(fused[#loc109, #loc110])
#loc201 = loc(fused[#loc111, #loc112])
#loc202 = loc(fused[#loc113, #loc114])
#loc203 = loc(fused[#loc116, #loc115])
#loc204 = loc(fused[#loc117, #loc118])
#loc205 = loc(fused[#loc120, #loc121, #loc122, #loc118])
#loc206 = loc(fused[#loc126, #loc125])
#loc207 = loc(fused[#loc127, #loc128])
#loc208 = loc(fused[#loc130, #loc128])
#loc209 = loc(fused[#loc131, #loc132])
#loc210 = loc(fused[#loc136, #loc137])
#loc211 = loc(fused[#loc138, #loc139])
#loc212 = loc(fused[#loc140, #loc141])
#loc213 = loc(fused[#loc143, #loc142])
#loc214 = loc(fused[#loc144, #loc145])
#loc215 = loc(fused[#loc147, #loc145])
#loc216 = loc(fused[#loc149, #loc148])
#loc217 = loc(fused[#loc150, #loc151])
#loc218 = loc(fused[#loc153, #loc151])
#loc219 = loc(fused[#loc154, #loc155])
