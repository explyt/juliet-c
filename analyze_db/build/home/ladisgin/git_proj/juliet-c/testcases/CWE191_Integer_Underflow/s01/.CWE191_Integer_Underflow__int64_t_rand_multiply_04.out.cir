!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc17 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":35:25)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":177:10)
#loc54 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":177:14)
#loc55 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":177:20)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":177:32)
#loc85 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":60:25)
#loc124 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":93:25)
#loc230 = loc(fused[#loc53, #loc54])
#loc231 = loc(fused[#loc55, #loc56])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_rand_multiply_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc207)
  cir.func private @printLongLongLine(!s64i) loc(#loc208)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_multiply_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc210)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc211)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc11)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc212)
    cir.br ^bb1 loc(#loc213)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc214)
  ^bb2:  // pred: ^bb1
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc17)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %8 ^bb3, ^bb4 loc(#loc17)
  ^bb3:  // pred: ^bb2
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc17)
    %11 = cir.const #cir.int<60> : !s32i loc(#loc17)
    %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc17)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc17)
    %15 = cir.const #cir.int<45> : !s32i loc(#loc17)
    %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc17)
    %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc17)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc17)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc17)
    %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc17)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc17)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc17)
    %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc17)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc17)
    %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc17)
    cir.br ^bb5(%30 : !u64i) loc(#loc17)
  ^bb4:  // pred: ^bb2
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc17)
    %33 = cir.const #cir.int<60> : !s32i loc(#loc17)
    %34 = cir.shift(left, %32 : !u64i, %33 : !s32i) -> !u64i loc(#loc17)
    %35 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc17)
    %37 = cir.const #cir.int<45> : !s32i loc(#loc17)
    %38 = cir.shift(left, %36 : !u64i, %37 : !s32i) -> !u64i loc(#loc17)
    %39 = cir.binop(xor, %34, %38) : !u64i loc(#loc17)
    %40 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc17)
    %42 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %43 = cir.shift(left, %41 : !u64i, %42 : !s32i) -> !u64i loc(#loc17)
    %44 = cir.binop(xor, %39, %43) : !u64i loc(#loc17)
    %45 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc17)
    %47 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %48 = cir.shift(left, %46 : !u64i, %47 : !s32i) -> !u64i loc(#loc17)
    %49 = cir.binop(xor, %44, %48) : !u64i loc(#loc17)
    %50 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %51 = cir.cast(integral, %50 : !s32i), !u64i loc(#loc17)
    %52 = cir.binop(xor, %49, %51) : !u64i loc(#loc17)
    %53 = cir.unary(minus, %52) : !u64i, !u64i loc(#loc17)
    %54 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %55 = cir.cast(integral, %54 : !s32i), !u64i loc(#loc17)
    %56 = cir.binop(sub, %53, %55) : !u64i loc(#loc17)
    cir.br ^bb5(%56 : !u64i) loc(#loc17)
  ^bb5(%57: !u64i loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":35:25)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc17)
  ^bb6:  // pred: ^bb5
    %58 = cir.cast(integral, %57 : !u64i), !s64i loc(#loc17)
    cir.store %58, %1 : !s64i, !cir.ptr<!s64i> loc(#loc215)
    cir.br ^bb7 loc(#loc14)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc14)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc216)
  ^bb9:  // pred: ^bb8
    %59 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %60 = cir.cast(int_to_bool, %59 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %60 ^bb10, ^bb15 loc(#loc217)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc218)
  ^bb11:  // pred: ^bb10
    %61 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc25)
    %62 = cir.const #cir.int<0> : !s32i loc(#loc26)
    %63 = cir.cast(integral, %62 : !s32i), !s64i loc(#loc26)
    %64 = cir.cmp(lt, %61, %63) : !s64i, !cir.bool loc(#loc219)
    cir.brcond %64 ^bb12, ^bb13 loc(#loc220)
  ^bb12:  // pred: ^bb11
    %65 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc28)
    %66 = cir.const #cir.int<2> : !s32i loc(#loc8)
    %67 = cir.cast(integral, %66 : !s32i), !s64i loc(#loc8)
    %68 = cir.binop(mul, %65, %67) nsw : !s64i loc(#loc28)
    cir.store %68, %0 : !s64i, !cir.ptr<!s64i> loc(#loc210)
    %69 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc29)
    cir.call @printLongLongLine(%69) : (!s64i) -> () loc(#loc30)
    cir.br ^bb13 loc(#loc24)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc24)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc20)
  ^bb15:  // 2 preds: ^bb9, ^bb14
    cir.br ^bb16 loc(#loc20)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc6)
  } loc(#loc209)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_multiply_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc222)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc223)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc224)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc225)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc32)
  } loc(#loc221)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc226)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc227)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc228)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc50)
  cir.func @main(%arg0: !s32i loc(fused[#loc53, #loc54]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc55, #loc56])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc230)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc231)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc52)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc57)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc57)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc58)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc59)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc59)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc60)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc47)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %8 = cir.get_global @CWE191_Integer_Underflow__int64_t_rand_multiply_04_good : !cir.ptr<!cir.func<!void ()>> loc(#loc232)
    cir.call @CWE191_Integer_Underflow__int64_t_rand_multiply_04_good() : () -> () loc(#loc62)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc48)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc49)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %13 = cir.get_global @CWE191_Integer_Underflow__int64_t_rand_multiply_04_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc233)
    cir.call @CWE191_Integer_Underflow__int64_t_rand_multiply_04_bad() : () -> () loc(#loc66)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc50)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc69)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc234)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc234)
    cir.return %17 : !s32i loc(#loc234)
  } loc(#loc229)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc72)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc236)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc237)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc79)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc238)
    cir.br ^bb1 loc(#loc239)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc83)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc240)
  ^bb2:  // pred: ^bb1
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc85)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc85)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc85)
    cir.brcond %8 ^bb3, ^bb4 loc(#loc85)
  ^bb3:  // pred: ^bb2
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc85)
    %11 = cir.const #cir.int<60> : !s32i loc(#loc85)
    %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc85)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc85)
    %15 = cir.const #cir.int<45> : !s32i loc(#loc85)
    %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc85)
    %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc85)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
    %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc85)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc85)
    %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc85)
    %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc85)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc85)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc85)
    %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc85)
    %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc85)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc85)
    %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc85)
    cir.br ^bb5(%30 : !u64i) loc(#loc85)
  ^bb4:  // pred: ^bb2
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
    %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc85)
    %33 = cir.const #cir.int<60> : !s32i loc(#loc85)
    %34 = cir.shift(left, %32 : !u64i, %33 : !s32i) -> !u64i loc(#loc85)
    %35 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
    %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc85)
    %37 = cir.const #cir.int<45> : !s32i loc(#loc85)
    %38 = cir.shift(left, %36 : !u64i, %37 : !s32i) -> !u64i loc(#loc85)
    %39 = cir.binop(xor, %34, %38) : !u64i loc(#loc85)
    %40 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
    %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc85)
    %42 = cir.const #cir.int<30> : !s32i loc(#loc85)
    %43 = cir.shift(left, %41 : !u64i, %42 : !s32i) -> !u64i loc(#loc85)
    %44 = cir.binop(xor, %39, %43) : !u64i loc(#loc85)
    %45 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
    %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc85)
    %47 = cir.const #cir.int<15> : !s32i loc(#loc85)
    %48 = cir.shift(left, %46 : !u64i, %47 : !s32i) -> !u64i loc(#loc85)
    %49 = cir.binop(xor, %44, %48) : !u64i loc(#loc85)
    %50 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
    %51 = cir.cast(integral, %50 : !s32i), !u64i loc(#loc85)
    %52 = cir.binop(xor, %49, %51) : !u64i loc(#loc85)
    %53 = cir.unary(minus, %52) : !u64i, !u64i loc(#loc85)
    %54 = cir.const #cir.int<1> : !s32i loc(#loc85)
    %55 = cir.cast(integral, %54 : !s32i), !u64i loc(#loc85)
    %56 = cir.binop(sub, %53, %55) : !u64i loc(#loc85)
    cir.br ^bb5(%56 : !u64i) loc(#loc85)
  ^bb5(%57: !u64i loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":60:25)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc85)
  ^bb6:  // pred: ^bb5
    %58 = cir.cast(integral, %57 : !u64i), !s64i loc(#loc85)
    cir.store %58, %1 : !s64i, !cir.ptr<!s64i> loc(#loc241)
    cir.br ^bb7 loc(#loc82)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc82)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc242)
  ^bb9:  // pred: ^bb8
    %59 = cir.const #cir.int<0> : !s32i loc(#loc89)
    %60 = cir.cast(int_to_bool, %59 : !s32i), !cir.bool loc(#loc89)
    cir.brcond %60 ^bb10, ^bb11 loc(#loc243)
  ^bb10:  // pred: ^bb9
    %61 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc71)
    %62 = cir.cast(array_to_ptrdecay, %61 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%62) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    cir.br ^bb21 loc(#loc91)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc244)
  ^bb12:  // pred: ^bb11
    %63 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc96)
    %64 = cir.const #cir.int<0> : !s32i loc(#loc97)
    %65 = cir.cast(integral, %64 : !s32i), !s64i loc(#loc97)
    %66 = cir.cmp(lt, %63, %65) : !s64i, !cir.bool loc(#loc245)
    cir.brcond %66 ^bb13, ^bb19 loc(#loc246)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc247)
  ^bb14:  // pred: ^bb13
    %67 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc101)
    %68 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc102)
    %69 = cir.unary(minus, %68) : !s64i, !s64i loc(#loc102)
    %70 = cir.const #cir.int<1> : !s64i loc(#loc102)
    %71 = cir.binop(sub, %69, %70) nsw : !s64i loc(#loc102)
    %72 = cir.const #cir.int<2> : !s32i loc(#loc103)
    %73 = cir.cast(integral, %72 : !s32i), !s64i loc(#loc103)
    %74 = cir.binop(div, %71, %73) : !s64i loc(#loc248)
    %75 = cir.cmp(gt, %67, %74) : !s64i, !cir.bool loc(#loc249)
    cir.brcond %75 ^bb15, ^bb16 loc(#loc250)
  ^bb15:  // pred: ^bb14
    %76 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc108)
    %77 = cir.const #cir.int<2> : !s32i loc(#loc76)
    %78 = cir.cast(integral, %77 : !s32i), !s64i loc(#loc76)
    %79 = cir.binop(mul, %76, %78) nsw : !s64i loc(#loc108)
    cir.store %79, %0 : !s64i, !cir.ptr<!s64i> loc(#loc236)
    %80 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc109)
    cir.call @printLongLongLine(%80) : (!s64i) -> () loc(#loc110)
    cir.br ^bb17 loc(#loc106)
  ^bb16:  // pred: ^bb14
    %81 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc72)
    %82 = cir.cast(array_to_ptrdecay, %81 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%82) : (!cir.ptr<!s8i>) -> () loc(#loc111)
    cir.br ^bb17 loc(#loc100)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc100)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc95)
  ^bb19:  // 2 preds: ^bb12, ^bb18
    cir.br ^bb20 loc(#loc95)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc88)
  ^bb21:  // 2 preds: ^bb10, ^bb20
    cir.br ^bb22 loc(#loc88)
  ^bb22:  // pred: ^bb21
    cir.return loc(#loc74)
  } loc(#loc235)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc252)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc253)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc118)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc254)
    cir.br ^bb1 loc(#loc255)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc122)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc122)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc256)
  ^bb2:  // pred: ^bb1
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc124)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc124)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc124)
    cir.brcond %8 ^bb3, ^bb4 loc(#loc124)
  ^bb3:  // pred: ^bb2
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc124)
    %11 = cir.const #cir.int<60> : !s32i loc(#loc124)
    %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc124)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc124)
    %15 = cir.const #cir.int<45> : !s32i loc(#loc124)
    %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc124)
    %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc124)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
    %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc124)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc124)
    %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc124)
    %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc124)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc124)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc124)
    %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc124)
    %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc124)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc124)
    %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc124)
    cir.br ^bb5(%30 : !u64i) loc(#loc124)
  ^bb4:  // pred: ^bb2
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
    %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc124)
    %33 = cir.const #cir.int<60> : !s32i loc(#loc124)
    %34 = cir.shift(left, %32 : !u64i, %33 : !s32i) -> !u64i loc(#loc124)
    %35 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
    %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc124)
    %37 = cir.const #cir.int<45> : !s32i loc(#loc124)
    %38 = cir.shift(left, %36 : !u64i, %37 : !s32i) -> !u64i loc(#loc124)
    %39 = cir.binop(xor, %34, %38) : !u64i loc(#loc124)
    %40 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
    %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc124)
    %42 = cir.const #cir.int<30> : !s32i loc(#loc124)
    %43 = cir.shift(left, %41 : !u64i, %42 : !s32i) -> !u64i loc(#loc124)
    %44 = cir.binop(xor, %39, %43) : !u64i loc(#loc124)
    %45 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
    %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc124)
    %47 = cir.const #cir.int<15> : !s32i loc(#loc124)
    %48 = cir.shift(left, %46 : !u64i, %47 : !s32i) -> !u64i loc(#loc124)
    %49 = cir.binop(xor, %44, %48) : !u64i loc(#loc124)
    %50 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
    %51 = cir.cast(integral, %50 : !s32i), !u64i loc(#loc124)
    %52 = cir.binop(xor, %49, %51) : !u64i loc(#loc124)
    %53 = cir.unary(minus, %52) : !u64i, !u64i loc(#loc124)
    %54 = cir.const #cir.int<1> : !s32i loc(#loc124)
    %55 = cir.cast(integral, %54 : !s32i), !u64i loc(#loc124)
    %56 = cir.binop(sub, %53, %55) : !u64i loc(#loc124)
    cir.br ^bb5(%56 : !u64i) loc(#loc124)
  ^bb5(%57: !u64i loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":93:25)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc124)
  ^bb6:  // pred: ^bb5
    %58 = cir.cast(integral, %57 : !u64i), !s64i loc(#loc124)
    cir.store %58, %1 : !s64i, !cir.ptr<!s64i> loc(#loc257)
    cir.br ^bb7 loc(#loc121)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc121)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc258)
  ^bb9:  // pred: ^bb8
    %59 = cir.const #cir.int<1> : !s32i loc(#loc128)
    %60 = cir.cast(int_to_bool, %59 : !s32i), !cir.bool loc(#loc128)
    cir.brcond %60 ^bb10, ^bb20 loc(#loc259)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc260)
  ^bb11:  // pred: ^bb10
    %61 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc132)
    %62 = cir.const #cir.int<0> : !s32i loc(#loc133)
    %63 = cir.cast(integral, %62 : !s32i), !s64i loc(#loc133)
    %64 = cir.cmp(lt, %61, %63) : !s64i, !cir.bool loc(#loc261)
    cir.brcond %64 ^bb12, ^bb18 loc(#loc262)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc263)
  ^bb13:  // pred: ^bb12
    %65 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc137)
    %66 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc138)
    %67 = cir.unary(minus, %66) : !s64i, !s64i loc(#loc138)
    %68 = cir.const #cir.int<1> : !s64i loc(#loc138)
    %69 = cir.binop(sub, %67, %68) nsw : !s64i loc(#loc138)
    %70 = cir.const #cir.int<2> : !s32i loc(#loc139)
    %71 = cir.cast(integral, %70 : !s32i), !s64i loc(#loc139)
    %72 = cir.binop(div, %69, %71) : !s64i loc(#loc264)
    %73 = cir.cmp(gt, %65, %72) : !s64i, !cir.bool loc(#loc265)
    cir.brcond %73 ^bb14, ^bb15 loc(#loc266)
  ^bb14:  // pred: ^bb13
    %74 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc144)
    %75 = cir.const #cir.int<2> : !s32i loc(#loc115)
    %76 = cir.cast(integral, %75 : !s32i), !s64i loc(#loc115)
    %77 = cir.binop(mul, %74, %76) nsw : !s64i loc(#loc144)
    cir.store %77, %0 : !s64i, !cir.ptr<!s64i> loc(#loc252)
    %78 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc145)
    cir.call @printLongLongLine(%78) : (!s64i) -> () loc(#loc146)
    cir.br ^bb16 loc(#loc142)
  ^bb15:  // pred: ^bb13
    %79 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc147)
    %80 = cir.cast(array_to_ptrdecay, %79 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc147)
    cir.call @printLine(%80) : (!cir.ptr<!s8i>) -> () loc(#loc148)
    cir.br ^bb16 loc(#loc136)
  ^bb16:  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc136)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc131)
  ^bb18:  // 2 preds: ^bb11, ^bb17
    cir.br ^bb19 loc(#loc131)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc127)
  ^bb20:  // 2 preds: ^bb9, ^bb19
    cir.br ^bb21 loc(#loc127)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc113)
  } loc(#loc251)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc268)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc269)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc155)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc270)
    cir.br ^bb1 loc(#loc271)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<0> : !s32i loc(#loc159)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc159)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc272)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc163)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc163)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc164)
    cir.br ^bb4 loc(#loc161)
  ^bb3:  // pred: ^bb1
    %7 = cir.const #cir.int<2> : !s32i loc(#loc165)
    %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc166)
    %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc166)
    cir.store %9, %1 : !s64i, !cir.ptr<!s64i> loc(#loc273)
    cir.br ^bb4 loc(#loc158)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc158)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc274)
  ^bb6:  // pred: ^bb5
    %10 = cir.const #cir.int<1> : !s32i loc(#loc170)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc170)
    cir.brcond %11 ^bb7, ^bb12 loc(#loc275)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc276)
  ^bb8:  // pred: ^bb7
    %12 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc174)
    %13 = cir.const #cir.int<0> : !s32i loc(#loc175)
    %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc175)
    %15 = cir.cmp(lt, %12, %14) : !s64i, !cir.bool loc(#loc277)
    cir.brcond %15 ^bb9, ^bb10 loc(#loc278)
  ^bb9:  // pred: ^bb8
    %16 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc177)
    %17 = cir.const #cir.int<2> : !s32i loc(#loc152)
    %18 = cir.cast(integral, %17 : !s32i), !s64i loc(#loc152)
    %19 = cir.binop(mul, %16, %18) nsw : !s64i loc(#loc177)
    cir.store %19, %0 : !s64i, !cir.ptr<!s64i> loc(#loc268)
    %20 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc178)
    cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc179)
    cir.br ^bb10 loc(#loc173)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc173)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc169)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc169)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc150)
  } loc(#loc267)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc280)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc281)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc186)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc282)
    cir.br ^bb1 loc(#loc283)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc190)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc190)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc284)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<2> : !s32i loc(#loc192)
    %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc193)
    %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc193)
    cir.store %7, %1 : !s64i, !cir.ptr<!s64i> loc(#loc285)
    cir.br ^bb3 loc(#loc189)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc189)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc286)
  ^bb5:  // pred: ^bb4
    %8 = cir.const #cir.int<1> : !s32i loc(#loc197)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc197)
    cir.brcond %9 ^bb6, ^bb11 loc(#loc287)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc288)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc201)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc202)
    %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc202)
    %13 = cir.cmp(lt, %10, %12) : !s64i, !cir.bool loc(#loc289)
    cir.brcond %13 ^bb8, ^bb9 loc(#loc290)
  ^bb8:  // pred: ^bb7
    %14 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc204)
    %15 = cir.const #cir.int<2> : !s32i loc(#loc183)
    %16 = cir.cast(integral, %15 : !s32i), !s64i loc(#loc183)
    %17 = cir.binop(mul, %14, %16) nsw : !s64i loc(#loc204)
    cir.store %17, %0 : !s64i, !cir.ptr<!s64i> loc(#loc280)
    %18 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc205)
    cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc206)
    cir.br ^bb9 loc(#loc200)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc200)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc196)
  ^bb11:  // 2 preds: ^bb5, ^bb10
    cir.br ^bb12 loc(#loc196)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc181)
  } loc(#loc279)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":28:1)
#loc6 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":46:1)
#loc7 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":42:13)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":42:37)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":30:5)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":30:13)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":31:12)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":31:5)
#loc13 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":32:5)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":36:5)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":32:8)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":33:5)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":35:9)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":37:5)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":45:5)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":37:8)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":38:5)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":39:9)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":44:9)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":39:12)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":39:19)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":40:9)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":42:30)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":43:31)
#loc30 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":43:13)
#loc31 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":160:1)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":166:1)
#loc33 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":162:5)
#loc34 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":162:14)
#loc35 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":163:5)
#loc36 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":163:14)
#loc37 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":164:5)
#loc38 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":164:14)
#loc39 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":165:5)
#loc40 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":165:14)
#loc41 = loc("/usr/include/stdlib.h":575:1)
#loc42 = loc("/usr/include/stdlib.h":575:41)
#loc43 = loc("/usr/include/time.h":76:1)
#loc44 = loc("/usr/include/time.h":76:38)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc47 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":182:15)
#loc48 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":184:15)
#loc49 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":187:15)
#loc50 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":189:15)
#loc51 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":177:1)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":192:1)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":178:1)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":180:27)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":180:22)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":180:5)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":182:5)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":183:5)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":183:61)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":184:5)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":187:5)
#loc66 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":188:5)
#loc67 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":188:60)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":189:5)
#loc69 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":191:12)
#loc70 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":191:5)
#loc71 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":65:19)
#loc72 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":79:27)
#loc73 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":53:1)
#loc74 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":83:1)
#loc75 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":74:17)
#loc76 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":74:41)
#loc77 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":55:5)
#loc78 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":55:13)
#loc79 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":56:12)
#loc80 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":56:5)
#loc81 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":57:5)
#loc82 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":61:5)
#loc83 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":57:8)
#loc84 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":58:5)
#loc86 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":60:9)
#loc87 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":62:5)
#loc88 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":82:5)
#loc89 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":62:8)
#loc90 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":63:5)
#loc91 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":66:5)
#loc92 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":68:5)
#loc93 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":65:9)
#loc94 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":69:9)
#loc95 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":81:9)
#loc96 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":69:12)
#loc97 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":69:19)
#loc98 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":70:9)
#loc99 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":72:13)
#loc100 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":80:13)
#loc101 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":72:17)
#loc102 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":72:25)
#loc103 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":72:35)
#loc104 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":72:36)
#loc105 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":73:13)
#loc106 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":76:13)
#loc107 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":78:13)
#loc108 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":74:34)
#loc109 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":75:35)
#loc110 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":75:17)
#loc111 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":79:17)
#loc112 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":86:1)
#loc113 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":111:1)
#loc114 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":102:17)
#loc115 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":102:41)
#loc116 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":88:5)
#loc117 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":88:13)
#loc118 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":89:12)
#loc119 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":89:5)
#loc120 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":90:5)
#loc121 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":94:5)
#loc122 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":90:8)
#loc123 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":91:5)
#loc125 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":93:9)
#loc126 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":95:5)
#loc127 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":110:5)
#loc128 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":95:8)
#loc129 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":96:5)
#loc130 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":97:9)
#loc131 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":109:9)
#loc132 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":97:12)
#loc133 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":97:19)
#loc134 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":98:9)
#loc135 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":100:13)
#loc136 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":108:13)
#loc137 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":100:17)
#loc138 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":100:25)
#loc139 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":100:35)
#loc140 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":100:36)
#loc141 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":101:13)
#loc142 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":104:13)
#loc143 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":106:13)
#loc144 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":102:34)
#loc145 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":103:35)
#loc146 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":103:17)
#loc147 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":107:27)
#loc148 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":107:17)
#loc149 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":114:1)
#loc150 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":137:1)
#loc151 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":133:13)
#loc152 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":133:37)
#loc153 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":116:5)
#loc154 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":116:13)
#loc155 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":117:12)
#loc156 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":117:5)
#loc157 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":118:5)
#loc158 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":127:5)
#loc159 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":118:8)
#loc160 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":119:5)
#loc161 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":122:5)
#loc162 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":124:5)
#loc163 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":121:19)
#loc164 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":121:9)
#loc165 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":126:17)
#loc166 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":126:16)
#loc167 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":126:9)
#loc168 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":128:5)
#loc169 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":136:5)
#loc170 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":128:8)
#loc171 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":129:5)
#loc172 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":130:9)
#loc173 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":135:9)
#loc174 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":130:12)
#loc175 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":130:19)
#loc176 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":131:9)
#loc177 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":133:30)
#loc178 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":134:31)
#loc179 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":134:13)
#loc180 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":140:1)
#loc181 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":158:1)
#loc182 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":154:13)
#loc183 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":154:37)
#loc184 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":142:5)
#loc185 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":142:13)
#loc186 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":143:12)
#loc187 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":143:5)
#loc188 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":144:5)
#loc189 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":148:5)
#loc190 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":144:8)
#loc191 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":145:5)
#loc192 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":147:17)
#loc193 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":147:16)
#loc194 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":147:9)
#loc195 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":149:5)
#loc196 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":157:5)
#loc197 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":149:8)
#loc198 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":150:5)
#loc199 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":151:9)
#loc200 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":156:9)
#loc201 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":151:12)
#loc202 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":151:19)
#loc203 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":152:9)
#loc204 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":154:30)
#loc205 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":155:31)
#loc206 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_04.c":155:13)
#loc207 = loc(fused[#loc1, #loc2])
#loc208 = loc(fused[#loc3, #loc4])
#loc209 = loc(fused[#loc5, #loc6])
#loc210 = loc(fused[#loc7, #loc8])
#loc211 = loc(fused[#loc9, #loc10])
#loc212 = loc(fused[#loc12, #loc11])
#loc213 = loc(fused[#loc13, #loc14])
#loc214 = loc(fused[#loc16, #loc14])
#loc215 = loc(fused[#loc18, #loc17])
#loc216 = loc(fused[#loc19, #loc20])
#loc217 = loc(fused[#loc22, #loc20])
#loc218 = loc(fused[#loc23, #loc24])
#loc219 = loc(fused[#loc25, #loc26])
#loc220 = loc(fused[#loc27, #loc24])
#loc221 = loc(fused[#loc31, #loc32])
#loc222 = loc(fused[#loc33, #loc34])
#loc223 = loc(fused[#loc35, #loc36])
#loc224 = loc(fused[#loc37, #loc38])
#loc225 = loc(fused[#loc39, #loc40])
#loc226 = loc(fused[#loc41, #loc42])
#loc227 = loc(fused[#loc43, #loc44])
#loc228 = loc(fused[#loc45, #loc46])
#loc229 = loc(fused[#loc51, #loc52])
#loc232 = loc(fused[#loc62, #loc63])
#loc233 = loc(fused[#loc66, #loc67])
#loc234 = loc(fused[#loc70, #loc69])
#loc235 = loc(fused[#loc73, #loc74])
#loc236 = loc(fused[#loc75, #loc76])
#loc237 = loc(fused[#loc77, #loc78])
#loc238 = loc(fused[#loc80, #loc79])
#loc239 = loc(fused[#loc81, #loc82])
#loc240 = loc(fused[#loc84, #loc82])
#loc241 = loc(fused[#loc86, #loc85])
#loc242 = loc(fused[#loc87, #loc88])
#loc243 = loc(fused[#loc90, #loc91, #loc92, #loc88])
#loc244 = loc(fused[#loc94, #loc95])
#loc245 = loc(fused[#loc96, #loc97])
#loc246 = loc(fused[#loc98, #loc95])
#loc247 = loc(fused[#loc99, #loc100])
#loc248 = loc(fused[#loc102, #loc103])
#loc249 = loc(fused[#loc101, #loc104])
#loc250 = loc(fused[#loc105, #loc106, #loc107, #loc100])
#loc251 = loc(fused[#loc112, #loc113])
#loc252 = loc(fused[#loc114, #loc115])
#loc253 = loc(fused[#loc116, #loc117])
#loc254 = loc(fused[#loc119, #loc118])
#loc255 = loc(fused[#loc120, #loc121])
#loc256 = loc(fused[#loc123, #loc121])
#loc257 = loc(fused[#loc125, #loc124])
#loc258 = loc(fused[#loc126, #loc127])
#loc259 = loc(fused[#loc129, #loc127])
#loc260 = loc(fused[#loc130, #loc131])
#loc261 = loc(fused[#loc132, #loc133])
#loc262 = loc(fused[#loc134, #loc131])
#loc263 = loc(fused[#loc135, #loc136])
#loc264 = loc(fused[#loc138, #loc139])
#loc265 = loc(fused[#loc137, #loc140])
#loc266 = loc(fused[#loc141, #loc142, #loc143, #loc136])
#loc267 = loc(fused[#loc149, #loc150])
#loc268 = loc(fused[#loc151, #loc152])
#loc269 = loc(fused[#loc153, #loc154])
#loc270 = loc(fused[#loc156, #loc155])
#loc271 = loc(fused[#loc157, #loc158])
#loc272 = loc(fused[#loc160, #loc161, #loc162, #loc158])
#loc273 = loc(fused[#loc167, #loc165])
#loc274 = loc(fused[#loc168, #loc169])
#loc275 = loc(fused[#loc171, #loc169])
#loc276 = loc(fused[#loc172, #loc173])
#loc277 = loc(fused[#loc174, #loc175])
#loc278 = loc(fused[#loc176, #loc173])
#loc279 = loc(fused[#loc180, #loc181])
#loc280 = loc(fused[#loc182, #loc183])
#loc281 = loc(fused[#loc184, #loc185])
#loc282 = loc(fused[#loc187, #loc186])
#loc283 = loc(fused[#loc188, #loc189])
#loc284 = loc(fused[#loc191, #loc189])
#loc285 = loc(fused[#loc194, #loc192])
#loc286 = loc(fused[#loc195, #loc196])
#loc287 = loc(fused[#loc198, #loc196])
#loc288 = loc(fused[#loc199, #loc200])
#loc289 = loc(fused[#loc201, #loc202])
#loc290 = loc(fused[#loc203, #loc200])
