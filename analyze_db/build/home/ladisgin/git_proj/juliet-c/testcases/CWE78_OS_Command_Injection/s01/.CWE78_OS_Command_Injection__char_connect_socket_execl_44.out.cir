!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc11 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":65:21)
#loc12 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":65:28)
#loc184 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":187:10)
#loc185 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":187:14)
#loc186 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":187:20)
#loc187 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":187:32)
#loc204 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":155:25)
#loc205 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":155:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc232 = loc(fused[#loc11, #loc12])
#loc298 = loc(fused[#loc184, #loc185])
#loc299 = loc(fused[#loc186, #loc187])
#loc304 = loc(fused[#loc204, #loc205])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execl_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private @__const.goodG2B.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc228)
  cir.global "private" constant cir_private @__const.CWE78_OS_Command_Injection__char_connect_socket_execl_44_bad.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc229)
  cir.func private @execl(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc230)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"/bin/sh\00" : !cir.array<!s8i x 8>> : !cir.array<!s8i x 8> {alignment = 1 : i64} loc(#loc7)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"-c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc8)
  cir.func internal private @badSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc11, #loc12])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc232)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc13)
    %1 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc7)
    %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc7)
    %3 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc14)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc14)
    %5 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc8)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc8)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc15)
    %8 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc16)
    %9 = cir.call @execl(%2, %4, %6, %7, %8) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc17)
    cir.return loc(#loc10)
  } loc(#loc231)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc233)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc234)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc235)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc24)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc236)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc237)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc238)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc239)
  cir.func private @close(!s32i) -> !s32i loc(#loc240)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_execl_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc242)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc243)
    %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc229)
    %3 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc40)
    cir.store %3, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>> loc(#loc243)
    %4 = cir.get_global @__const.CWE78_OS_Command_Injection__char_connect_socket_execl_44_bad.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc229)
    cir.copy %4 to %2 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc229)
    %5 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc41)
    cir.store %5, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc244)
    cir.scope {
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc246)
      %9 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc247)
      %10 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc248)
      %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc249)
      %12 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc250)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc52)
      %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc52)
      cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc249)
      %15 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc55)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc56)
      %17 = cir.call @strlen(%16) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc55)
      cir.store %17, %12 : !u64i, !cir.ptr<!u64i> loc(#loc250)
      cir.scope {
        cir.do {
          %18 = cir.const #cir.int<2> : !s32i loc(#loc59)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc60)
          %20 = cir.const #cir.int<6> : !s32i loc(#loc61)
          %21 = cir.call @socket(%18, %19, %20) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc62)
          cir.store %21, %11 : !s32i, !cir.ptr<!s32i> loc(#loc252)
          cir.scope {
            %72 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc67)
            %73 = cir.const #cir.int<1> : !s32i loc(#loc68)
            %74 = cir.unary(minus, %73) : !s32i, !s32i loc(#loc68)
            %75 = cir.cmp(eq, %72, %74) : !s32i, !cir.bool loc(#loc254)
            cir.if %75 {
              cir.break loc(#loc70)
            } loc(#loc255)
          } loc(#loc253)
          %22 = cir.cast(bitcast, %9 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc256)
          %23 = cir.const #cir.int<0> : !s32i loc(#loc73)
          %24 = cir.const #cir.int<16> : !u64i loc(#loc257)
          cir.libc.memset %24 bytes from %22 set to %23 : !cir.ptr<!void>, !s32i, !u64i loc(#loc258)
          %25 = cir.const #cir.int<2> : !s32i loc(#loc78)
          %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc78)
          %27 = cir.get_member %9[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
          cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc259)
          %28 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc24)
          %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc24)
          %30 = cir.call @inet_addr(%29) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc81)
          %31 = cir.get_member %9[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc82)
          %32 = cir.get_member %31[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc83)
          cir.store %30, %32 : !u32i, !cir.ptr<!u32i> loc(#loc260)
          %33 = cir.const #cir.int<27015> : !s32i loc(#loc86)
          %34 = cir.cast(integral, %33 : !s32i), !u16i loc(#loc86)
          %35 = cir.call @htons(%34) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc87)
          %36 = cir.get_member %9[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc88)
          cir.store %35, %36 : !u16i, !cir.ptr<!u16i> loc(#loc261)
          cir.scope {
            %72 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc93)
            %73 = cir.cast(bitcast, %9 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc263)
            %74 = cir.const #cir.int<16> : !u64i loc(#loc264)
            %75 = cir.cast(integral, %74 : !u64i), !u32i loc(#loc264)
            %76 = cir.call @connect(%72, %73, %75) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc98)
            %77 = cir.const #cir.int<1> : !s32i loc(#loc99)
            %78 = cir.unary(minus, %77) : !s32i, !s32i loc(#loc99)
            %79 = cir.cmp(eq, %76, %78) : !s32i, !cir.bool loc(#loc265)
            cir.if %79 {
              cir.break loc(#loc101)
            } loc(#loc266)
          } loc(#loc262)
          %37 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc102)
          %38 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc103)
          %39 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc104)
          %40 = cir.ptr_stride(%38 : !cir.ptr<!s8i>, %39 : !u64i), !cir.ptr<!s8i> loc(#loc105)
          %41 = cir.cast(bitcast, %40 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc267)
          %42 = cir.const #cir.int<1> : !u64i loc(#loc268)
          %43 = cir.const #cir.int<100> : !s32i loc(#loc110)
          %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc110)
          %45 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc111)
          %46 = cir.binop(sub, %44, %45) : !u64i loc(#loc269)
          %47 = cir.const #cir.int<1> : !s32i loc(#loc112)
          %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc112)
          %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc270)
          %50 = cir.binop(mul, %42, %49) : !u64i loc(#loc271)
          %51 = cir.const #cir.int<0> : !s32i loc(#loc114)
          %52 = cir.call @recv(%37, %41, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc115)
          %53 = cir.cast(integral, %52 : !s64i), !s32i loc(#loc115)
          cir.store %53, %8 : !s32i, !cir.ptr<!s32i> loc(#loc272)
          cir.scope {
            %72 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc120)
            %73 = cir.const #cir.int<1> : !s32i loc(#loc121)
            %74 = cir.unary(minus, %73) : !s32i, !s32i loc(#loc121)
            %75 = cir.cmp(eq, %72, %74) : !s32i, !cir.bool loc(#loc274)
            %76 = cir.ternary(%75, true {
              %77 = cir.const #true loc(#loc122)
              cir.yield %77 : !cir.bool loc(#loc122)
            }, false {
              %77 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc123)
              %78 = cir.const #cir.int<0> : !s32i loc(#loc124)
              %79 = cir.cmp(eq, %77, %78) : !s32i, !cir.bool loc(#loc275)
              %80 = cir.ternary(%79, true {
                %81 = cir.const #true loc(#loc122)
                cir.yield %81 : !cir.bool loc(#loc122)
              }, false {
                %81 = cir.const #false loc(#loc122)
                cir.yield %81 : !cir.bool loc(#loc122)
              }) : (!cir.bool) -> !cir.bool loc(#loc122)
              cir.yield %80 : !cir.bool loc(#loc122)
            }) : (!cir.bool) -> !cir.bool loc(#loc122)
            cir.if %76 {
              cir.break loc(#loc126)
            } loc(#loc276)
          } loc(#loc273)
          %54 = cir.const #cir.int<0> : !s32i loc(#loc127)
          %55 = cir.cast(integral, %54 : !s32i), !s8i loc(#loc127)
          %56 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc128)
          %57 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc129)
          %58 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc130)
          %59 = cir.cast(integral, %58 : !s32i), !u64i loc(#loc130)
          %60 = cir.const #cir.int<1> : !u64i loc(#loc277)
          %61 = cir.binop(div, %59, %60) : !u64i loc(#loc278)
          %62 = cir.binop(add, %57, %61) : !u64i loc(#loc279)
          %63 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %62 : !u64i), !cir.ptr<!s8i> loc(#loc133)
          cir.store %55, %63 : !s8i, !cir.ptr<!s8i> loc(#loc280)
          %64 = cir.get_global @strchr : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !s32i)>> loc(#loc134)
          %65 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc135)
          %66 = cir.const #cir.int<13> : !s32i loc(#loc136)
          %67 = cir.call @strchr(%65, %66) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc134)
          cir.store %67, %10 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc281)
          cir.scope {
            %72 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc141)
            %73 = cir.cast(ptr_to_bool, %72 : !cir.ptr<!s8i>), !cir.bool loc(#loc141)
            cir.if %73 {
              %74 = cir.const #cir.int<0> : !s32i loc(#loc143)
              %75 = cir.cast(integral, %74 : !s32i), !s8i loc(#loc143)
              %76 = cir.load deref %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc144)
              cir.store %75, %76 : !s8i, !cir.ptr<!s8i> loc(#loc284)
            } loc(#loc283)
          } loc(#loc282)
          %68 = cir.get_global @strchr : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !s32i)>> loc(#loc146)
          %69 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc147)
          %70 = cir.const #cir.int<10> : !s32i loc(#loc148)
          %71 = cir.call @strchr(%69, %70) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc146)
          cir.store %71, %10 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc285)
          cir.scope {
            %72 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
            %73 = cir.cast(ptr_to_bool, %72 : !cir.ptr<!s8i>), !cir.bool loc(#loc153)
            cir.if %73 {
              %74 = cir.const #cir.int<0> : !s32i loc(#loc155)
              %75 = cir.cast(integral, %74 : !s32i), !s8i loc(#loc155)
              %76 = cir.load deref %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc156)
              cir.store %75, %76 : !s8i, !cir.ptr<!s8i> loc(#loc288)
            } loc(#loc287)
          } loc(#loc286)
          cir.yield loc(#loc58)
        } while {
          %18 = cir.const #cir.int<0> : !s32i loc(#loc158)
          %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc158)
          cir.condition(%19) loc(#loc158)
        } loc(#loc251)
      } loc(#loc251)
      cir.scope {
        %18 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc161)
        %19 = cir.const #cir.int<1> : !s32i loc(#loc162)
        %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc162)
        %21 = cir.cmp(ne, %18, %20) : !s32i, !cir.bool loc(#loc290)
        cir.if %21 {
          %22 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc164)
          %23 = cir.call @close(%22) : (!s32i) -> !s32i loc(#loc165)
        } loc(#loc291)
      } loc(#loc289)
    } loc(#loc245)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc166)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc167)
    cir.call %6(%7) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc166)
    cir.return loc(#loc36)
  } loc(#loc241)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_execl_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc293)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc170)
    cir.return loc(#loc169)
  } loc(#loc292)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc294)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc295)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc296)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc178)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc179)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc180)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc181)
  cir.func @main(%arg0: !s32i loc(fused[#loc184, #loc185]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc186, #loc187])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc298)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc299)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc183)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc188)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc189)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc190)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc190)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc191)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc178)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc178)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc192)
    %8 = cir.get_global @CWE78_OS_Command_Injection__char_connect_socket_execl_44_good : !cir.ptr<!cir.func<!void ()>> loc(#loc300)
    cir.call @CWE78_OS_Command_Injection__char_connect_socket_execl_44_good() : () -> () loc(#loc193)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc179)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc179)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc195)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc180)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc180)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc196)
    %13 = cir.get_global @CWE78_OS_Command_Injection__char_connect_socket_execl_44_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc301)
    cir.call @CWE78_OS_Command_Injection__char_connect_socket_execl_44_bad() : () -> () loc(#loc197)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc181)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc181)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc199)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc200)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc302)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc302)
    cir.return %17 : !s32i loc(#loc302)
  } loc(#loc297)
  cir.func internal private @goodG2BSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc204, #loc205])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc304)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc206)
    %1 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc207)
    %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc207)
    %3 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc208)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc208)
    %5 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc209)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc209)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc210)
    %8 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc211)
    %9 = cir.call @execl(%2, %4, %6, %7, %8) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc212)
    cir.return loc(#loc203)
  } loc(#loc303)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc305)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc215)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc307)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc308)
    %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc228)
    %3 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc221)
    cir.store %3, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>> loc(#loc308)
    %4 = cir.get_global @__const.goodG2B.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc228)
    cir.copy %4 to %2 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc228)
    %5 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc222)
    cir.store %5, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc309)
    %6 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc224)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc225)
    %8 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc215)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc215)
    %10 = cir.call @strcat(%7, %9) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc224)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc226)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc227)
    cir.call %11(%12) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc226)
    cir.return loc(#loc217)
  } loc(#loc306)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":0:0)
#loc1 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":166:5)
#loc2 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":166:28)
#loc3 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":77:5)
#loc4 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":77:28)
#loc5 = loc("/usr/include/unistd.h":594:1)
#loc6 = loc("/usr/include/unistd.h":595:14)
#loc7 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":69:11)
#loc8 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":69:47)
#loc9 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":65:1)
#loc10 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":70:1)
#loc13 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":66:1)
#loc14 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":69:29)
#loc15 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":69:61)
#loc16 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":69:75)
#loc17 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":69:5)
#loc18 = loc("/usr/include/string.h":407:1)
#loc19 = loc("/usr/include/string.h":408:33)
#loc20 = loc("/usr/include/sys/socket.h":102:1)
#loc21 = loc("/usr/include/sys/socket.h":102:62)
#loc22 = loc("/usr/include/arpa/inet.h":34:1)
#loc23 = loc("/usr/include/arpa/inet.h":34:47)
#loc24 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":106:49)
#loc25 = loc("/usr/include/netinet/in.h":404:1)
#loc26 = loc("/usr/include/netinet/in.h":405:40)
#loc27 = loc("/usr/include/sys/socket.h":126:1)
#loc28 = loc("/usr/include/sys/socket.h":126:75)
#loc29 = loc("/usr/include/sys/socket.h":145:1)
#loc30 = loc("/usr/include/sys/socket.h":145:68)
#loc31 = loc("/usr/include/string.h":246:1)
#loc32 = loc("/usr/include/string.h":247:33)
#loc33 = loc("/usr/include/unistd.h":358:1)
#loc34 = loc("/usr/include/unistd.h":358:27)
#loc35 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":72:1)
#loc36 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":148:1)
#loc37 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":74:5)
#loc38 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":74:12)
#loc39 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":76:5)
#loc40 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":76:32)
#loc41 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":78:12)
#loc42 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":78:5)
#loc43 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":79:5)
#loc44 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":145:5)
#loc45 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":84:9)
#loc46 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":84:13)
#loc47 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":85:9)
#loc48 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":85:28)
#loc49 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":86:9)
#loc50 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":86:15)
#loc51 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":87:9)
#loc52 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":87:32)
#loc53 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":88:9)
#loc54 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":88:37)
#loc55 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":88:26)
#loc56 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":88:33)
#loc57 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":89:9)
#loc58 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":134:17)
#loc59 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":99:36)
#loc60 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":99:45)
#loc61 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":99:58)
#loc62 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":99:29)
#loc63 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":99:13)
#loc64 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":99:69)
#loc65 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":100:13)
#loc66 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":103:13)
#loc67 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":100:17)
#loc68 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":100:34)
#loc69 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":101:13)
#loc70 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":102:17)
#loc71 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":104:20)
#loc72 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":104:21)
#loc73 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":104:30)
#loc74 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":104:33)
#loc75 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":104:47)
#loc76 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":104:13)
#loc77 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":104:48)
#loc78 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":105:34)
#loc79 = loc("/usr/include/netinet/in.h":249:5)
#loc80 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":105:13)
#loc81 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":106:39)
#loc82 = loc("/usr/include/netinet/in.h":251:20)
#loc83 = loc("/usr/include/netinet/in.h":33:15)
#loc84 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":106:13)
#loc85 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":106:59)
#loc86 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":107:38)
#loc87 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":107:32)
#loc88 = loc("/usr/include/netinet/in.h":250:15)
#loc89 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":107:13)
#loc90 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":107:46)
#loc91 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":108:13)
#loc92 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":111:13)
#loc93 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":108:25)
#loc94 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":108:58)
#loc95 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":108:59)
#loc96 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":108:68)
#loc97 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":108:82)
#loc98 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":108:17)
#loc99 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":108:88)
#loc100 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":109:13)
#loc101 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":110:17)
#loc102 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":115:31)
#loc103 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":115:55)
#loc104 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":115:62)
#loc105 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":115:60)
#loc106 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":115:46)
#loc107 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":115:69)
#loc108 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":115:72)
#loc109 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":115:83)
#loc110 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":115:88)
#loc111 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":115:94)
#loc112 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":115:104)
#loc113 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":115:105)
#loc114 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":115:108)
#loc115 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":115:26)
#loc116 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":115:13)
#loc117 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":115:109)
#loc118 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":116:13)
#loc119 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":119:13)
#loc120 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":116:17)
#loc121 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":116:31)
#loc122 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":116:44)
#loc123 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":116:47)
#loc124 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":116:61)
#loc125 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":117:13)
#loc126 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":118:17)
#loc127 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":121:57)
#loc128 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":121:13)
#loc129 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":121:18)
#loc130 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":121:28)
#loc131 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":121:41)
#loc132 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":121:52)
#loc133 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":121:53)
#loc134 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":123:23)
#loc135 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":123:30)
#loc136 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":123:36)
#loc137 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":123:13)
#loc138 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":123:40)
#loc139 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":124:13)
#loc140 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":127:13)
#loc141 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":124:17)
#loc142 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":125:13)
#loc143 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":126:28)
#loc144 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":126:18)
#loc145 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":126:17)
#loc146 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":128:23)
#loc147 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":128:30)
#loc148 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":128:36)
#loc149 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":128:13)
#loc150 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":128:40)
#loc151 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":129:13)
#loc152 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":132:13)
#loc153 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":129:17)
#loc154 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":130:13)
#loc155 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":131:28)
#loc156 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":131:18)
#loc157 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":131:17)
#loc158 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":134:16)
#loc159 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":135:9)
#loc160 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":138:9)
#loc161 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":135:13)
#loc162 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":135:30)
#loc163 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":136:9)
#loc164 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":137:26)
#loc165 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":137:13)
#loc166 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":147:5)
#loc167 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":147:13)
#loc168 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":173:1)
#loc169 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":176:1)
#loc170 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":175:5)
#loc171 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":175:13)
#loc172 = loc("/usr/include/stdlib.h":575:1)
#loc173 = loc("/usr/include/stdlib.h":575:41)
#loc174 = loc("/usr/include/time.h":76:1)
#loc175 = loc("/usr/include/time.h":76:38)
#loc176 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc177 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc178 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":192:15)
#loc179 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":194:15)
#loc180 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":197:15)
#loc181 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":199:15)
#loc182 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":187:1)
#loc183 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":202:1)
#loc188 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":188:1)
#loc189 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":190:27)
#loc190 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":190:22)
#loc191 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":190:5)
#loc192 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":192:5)
#loc193 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":193:5)
#loc194 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":193:67)
#loc195 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":194:5)
#loc196 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":197:5)
#loc197 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":198:5)
#loc198 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":198:66)
#loc199 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":199:5)
#loc200 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":201:12)
#loc201 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":201:5)
#loc202 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":155:1)
#loc203 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":160:1)
#loc206 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":156:1)
#loc207 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":159:11)
#loc208 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":159:29)
#loc209 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":159:47)
#loc210 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":159:61)
#loc211 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":159:75)
#loc212 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":159:5)
#loc213 = loc("/usr/include/string.h":149:1)
#loc214 = loc("/usr/include/string.h":150:14)
#loc215 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":169:18)
#loc216 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":162:1)
#loc217 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":171:1)
#loc218 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":164:5)
#loc219 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":164:12)
#loc220 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":165:5)
#loc221 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":165:32)
#loc222 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":167:12)
#loc223 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":167:5)
#loc224 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":169:5)
#loc225 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":169:12)
#loc226 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":170:5)
#loc227 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_44.c":170:13)
#loc228 = loc(fused[#loc1, #loc2])
#loc229 = loc(fused[#loc3, #loc4])
#loc230 = loc(fused[#loc5, #loc6])
#loc231 = loc(fused[#loc9, #loc10])
#loc233 = loc(fused[#loc18, #loc19])
#loc234 = loc(fused[#loc20, #loc21])
#loc235 = loc(fused[#loc22, #loc23])
#loc236 = loc(fused[#loc25, #loc26])
#loc237 = loc(fused[#loc27, #loc28])
#loc238 = loc(fused[#loc29, #loc30])
#loc239 = loc(fused[#loc31, #loc32])
#loc240 = loc(fused[#loc33, #loc34])
#loc241 = loc(fused[#loc35, #loc36])
#loc242 = loc(fused[#loc37, #loc38])
#loc243 = loc(fused[#loc39, #loc40])
#loc244 = loc(fused[#loc42, #loc41])
#loc245 = loc(fused[#loc43, #loc44])
#loc246 = loc(fused[#loc45, #loc46])
#loc247 = loc(fused[#loc47, #loc48])
#loc248 = loc(fused[#loc49, #loc50])
#loc249 = loc(fused[#loc51, #loc52])
#loc250 = loc(fused[#loc53, #loc54])
#loc251 = loc(fused[#loc57, #loc58])
#loc252 = loc(fused[#loc63, #loc64])
#loc253 = loc(fused[#loc65, #loc66])
#loc254 = loc(fused[#loc67, #loc68])
#loc255 = loc(fused[#loc69, #loc66])
#loc256 = loc(fused[#loc71, #loc72])
#loc257 = loc(fused[#loc74, #loc75])
#loc258 = loc(fused[#loc76, #loc77])
#loc259 = loc(fused[#loc80, #loc78])
#loc260 = loc(fused[#loc84, #loc85])
#loc261 = loc(fused[#loc89, #loc90])
#loc262 = loc(fused[#loc91, #loc92])
#loc263 = loc(fused[#loc94, #loc95])
#loc264 = loc(fused[#loc96, #loc97])
#loc265 = loc(fused[#loc98, #loc99])
#loc266 = loc(fused[#loc100, #loc92])
#loc267 = loc(fused[#loc106, #loc107])
#loc268 = loc(fused[#loc108, #loc109])
#loc269 = loc(fused[#loc110, #loc111])
#loc270 = loc(fused[#loc110, #loc112])
#loc271 = loc(fused[#loc108, #loc113])
#loc272 = loc(fused[#loc116, #loc117])
#loc273 = loc(fused[#loc118, #loc119])
#loc274 = loc(fused[#loc120, #loc121])
#loc275 = loc(fused[#loc123, #loc124])
#loc276 = loc(fused[#loc125, #loc119])
#loc277 = loc(fused[#loc131, #loc132])
#loc278 = loc(fused[#loc130, #loc132])
#loc279 = loc(fused[#loc129, #loc132])
#loc280 = loc(fused[#loc128, #loc127])
#loc281 = loc(fused[#loc137, #loc138])
#loc282 = loc(fused[#loc139, #loc140])
#loc283 = loc(fused[#loc142, #loc140])
#loc284 = loc(fused[#loc145, #loc143])
#loc285 = loc(fused[#loc149, #loc150])
#loc286 = loc(fused[#loc151, #loc152])
#loc287 = loc(fused[#loc154, #loc152])
#loc288 = loc(fused[#loc157, #loc155])
#loc289 = loc(fused[#loc159, #loc160])
#loc290 = loc(fused[#loc161, #loc162])
#loc291 = loc(fused[#loc163, #loc160])
#loc292 = loc(fused[#loc168, #loc169])
#loc293 = loc(fused[#loc170, #loc171])
#loc294 = loc(fused[#loc172, #loc173])
#loc295 = loc(fused[#loc174, #loc175])
#loc296 = loc(fused[#loc176, #loc177])
#loc297 = loc(fused[#loc182, #loc183])
#loc300 = loc(fused[#loc193, #loc194])
#loc301 = loc(fused[#loc197, #loc198])
#loc302 = loc(fused[#loc201, #loc200])
#loc303 = loc(fused[#loc202, #loc203])
#loc305 = loc(fused[#loc213, #loc214])
#loc306 = loc(fused[#loc216, #loc217])
#loc307 = loc(fused[#loc218, #loc219])
#loc308 = loc(fused[#loc220, #loc221])
#loc309 = loc(fused[#loc223, #loc222])
