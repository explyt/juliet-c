!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  external @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68_badData : !cir.ptr<!s32i> {alignment = 8 : i64} loc(#loc67)
  cir.func private  @printIntLine(!s32i) loc(#loc68)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b_badSink() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc70)
    %1 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68_badData : !cir.ptr<!cir.ptr<!s32i>> loc(#loc67)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc8)
    cir.store %2, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc70)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc72)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc73)
      %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc72)
      cir.store %5, %3 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc72)
      cir.scope {
        %10 = cir.const #cir.int<0> : !s32i loc(#loc17)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc17)
        cir.store %11, %4 : !u64i, !cir.ptr<!u64i> loc(#loc75)
        cir.for : cond {
          %12 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc19)
          %13 = cir.const #cir.int<10> : !s32i loc(#loc20)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc20)
          %15 = cir.cmp(lt, %12, %14) : !u64i, !s32i loc(#loc76)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc21)
          cir.condition(%16) loc(#loc21)
        } body {
          cir.scope {
            %12 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc23)
            %13 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc24)
            %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !u64i), !cir.ptr<!s32i> loc(#loc24)
            %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc24)
            %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc25)
            %17 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc26)
            %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !u64i), !cir.ptr<!s32i> loc(#loc27)
            cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc78)
          } loc(#loc77)
          cir.yield loc(#loc16)
        } step {
          %12 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc29)
          %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc30)
          cir.store %13, %4 : !u64i, !cir.ptr<!u64i> loc(#loc79)
          cir.yield loc(#loc74)
        } loc(#loc74)
      } loc(#loc74)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc31)
      %7 = cir.const #cir.int<0> : !s32i loc(#loc32)
      %8 = cir.ptr_stride(%6 : !cir.ptr<!s32i>, %7 : !s32i), !cir.ptr<!s32i> loc(#loc33)
      %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc31)
      cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc34)
    } loc(#loc71)
    cir.return loc(#loc6)
  } loc(#loc69)
  cir.global "private"  external @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68_goodG2BData : !cir.ptr<!s32i> {alignment = 8 : i64} loc(#loc80)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b_goodG2BSink() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc82)
    %1 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68_goodG2BData : !cir.ptr<!cir.ptr<!s32i>> loc(#loc80)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc40)
    cir.store %2, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc82)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc84)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc85)
      %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc84)
      cir.store %5, %3 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc84)
      cir.scope {
        %10 = cir.const #cir.int<0> : !s32i loc(#loc49)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc49)
        cir.store %11, %4 : !u64i, !cir.ptr<!u64i> loc(#loc87)
        cir.for : cond {
          %12 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc51)
          %13 = cir.const #cir.int<10> : !s32i loc(#loc52)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc52)
          %15 = cir.cmp(lt, %12, %14) : !u64i, !s32i loc(#loc88)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc53)
          cir.condition(%16) loc(#loc53)
        } body {
          cir.scope {
            %12 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc55)
            %13 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc56)
            %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !u64i), !cir.ptr<!s32i> loc(#loc56)
            %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc56)
            %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc57)
            %17 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc58)
            %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !u64i), !cir.ptr<!s32i> loc(#loc59)
            cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc90)
          } loc(#loc89)
          cir.yield loc(#loc48)
        } step {
          %12 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc61)
          %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc62)
          cir.store %13, %4 : !u64i, !cir.ptr<!u64i> loc(#loc91)
          cir.yield loc(#loc86)
        } loc(#loc86)
      } loc(#loc86)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc63)
      %7 = cir.const #cir.int<0> : !s32i loc(#loc64)
      %8 = cir.ptr_stride(%6 : !cir.ptr<!s32i>, %7 : !s32i), !cir.ptr<!s32i> loc(#loc65)
      %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc63)
      cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc66)
    } loc(#loc83)
    cir.return loc(#loc38)
  } loc(#loc81)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":19:1)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":19:14)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":26:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":39:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":28:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":28:18)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":29:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":38:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":30:9)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":30:28)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":31:9)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":31:16)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":33:9)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":36:9)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":33:18)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":33:14)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":33:21)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":33:25)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":33:23)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":34:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":35:30)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":35:23)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":35:13)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":35:18)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":35:19)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":35:31)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":33:30)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":33:29)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":37:22)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":37:27)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":37:28)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":37:9)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":20:1)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":20:14)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":46:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":59:1)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":48:5)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":48:18)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":49:5)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":58:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":50:9)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":50:28)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":51:9)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":51:16)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":53:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":56:9)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":53:18)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":53:14)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":53:21)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":53:25)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":53:23)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":54:9)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":55:30)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":55:23)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":55:13)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":55:18)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":55:19)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":55:31)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":53:30)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":53:29)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":57:22)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":57:27)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":57:28)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c":57:9)
#loc67 = loc(fused[#loc1, #loc2])
#loc68 = loc(fused[#loc3, #loc4])
#loc69 = loc(fused[#loc5, #loc6])
#loc70 = loc(fused[#loc7, #loc8])
#loc71 = loc(fused[#loc9, #loc10])
#loc72 = loc(fused[#loc11, #loc12])
#loc73 = loc(fused[#loc13, #loc14])
#loc74 = loc(fused[#loc15, #loc16])
#loc75 = loc(fused[#loc18, #loc17])
#loc76 = loc(fused[#loc19, #loc20])
#loc77 = loc(fused[#loc22, #loc16])
#loc78 = loc(fused[#loc25, #loc28])
#loc79 = loc(fused[#loc30, #loc29])
#loc80 = loc(fused[#loc35, #loc36])
#loc81 = loc(fused[#loc37, #loc38])
#loc82 = loc(fused[#loc39, #loc40])
#loc83 = loc(fused[#loc41, #loc42])
#loc84 = loc(fused[#loc43, #loc44])
#loc85 = loc(fused[#loc45, #loc46])
#loc86 = loc(fused[#loc47, #loc48])
#loc87 = loc(fused[#loc50, #loc49])
#loc88 = loc(fused[#loc51, #loc52])
#loc89 = loc(fused[#loc54, #loc48])
#loc90 = loc(fused[#loc57, #loc60])
#loc91 = loc(fused[#loc62, #loc61])
