!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"shouldn't see this value\00" : !cir.array<!s8i x 25>> : !cir.array<!s8i x 25> {alignment = 1 : i64} loc(#loc1)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc68)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"0\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc4)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"1\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc69)
  cir.func no_proto @CWE478_Missing_Default_Case_in_Switch__basic_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc71)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc72)
    cir.br ^bb1 loc(#loc73)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc73)
  ^bb2:  // 2 preds: ^bb1, ^bb14
    %2 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %3 ^bb3, ^bb15 loc(#loc15)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc74)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc75)
  ^bb5:  // pred: ^bb4
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc1)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc1)
    cir.store %5, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc71)
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %7 = cir.const #cir.int<3> : !s32i loc(#loc20)
    %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc76)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc77)
    cir.br ^bb6 loc(#loc78)
  ^bb6:  // pred: ^bb5
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    cir.br ^bb7 loc(#loc23)
  ^bb7:  // pred: ^bb6
    cir.switch.flat %9 : !s32i, ^bb11 [
      0: ^bb9,
      1: ^bb10
    ] loc(#loc23)
  ^bb8:  // no predecessors
    cir.br ^bb9 loc(#loc26)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc4)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc4)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc79)
    cir.br ^bb11 loc(#loc28)
  ^bb10:  // pred: ^bb7
    %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc5)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc5)
    cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc80)
    cir.br ^bb11 loc(#loc30)
  ^bb11:  // 3 preds: ^bb7, ^bb9, ^bb10
    cir.br ^bb12 loc(#loc24)
  ^bb12:  // pred: ^bb11
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc31)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc32)
    cir.br ^bb13 loc(#loc18)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc33)
  ^bb14:  // no predecessors
    cir.br ^bb2 loc(#loc14)
  ^bb15:  // 2 preds: ^bb2, ^bb13
    cir.br ^bb16 loc(#loc14)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc9)
  } loc(#loc70)
  cir.func no_proto @CWE478_Missing_Default_Case_in_Switch__basic_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc82)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    cir.return loc(#loc35)
  } loc(#loc81)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc84)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc85)
    cir.br ^bb1 loc(#loc86)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc86)
  ^bb2:  // 2 preds: ^bb1, ^bb15
    %2 = cir.const #cir.int<1> : !s32i loc(#loc46)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc46)
    cir.brcond %3 ^bb3, ^bb16 loc(#loc46)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc87)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc88)
  ^bb5:  // pred: ^bb4
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc41)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc41)
    cir.store %5, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc84)
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
    %7 = cir.const #cir.int<3> : !s32i loc(#loc51)
    %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc89)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc90)
    cir.br ^bb6 loc(#loc91)
  ^bb6:  // pred: ^bb5
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc56)
    cir.br ^bb7 loc(#loc54)
  ^bb7:  // pred: ^bb6
    cir.switch.flat %9 : !s32i, ^bb11 [
      0: ^bb9,
      1: ^bb10
    ] loc(#loc54)
  ^bb8:  // no predecessors
    cir.br ^bb9 loc(#loc57)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc58)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc58)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc92)
    cir.br ^bb12 loc(#loc60)
  ^bb10:  // pred: ^bb7
    %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc61)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc61)
    cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc93)
    cir.br ^bb12 loc(#loc63)
  ^bb11:  // pred: ^bb7
    cir.return loc(#loc64)
  ^bb12:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb13 loc(#loc55)
  ^bb13:  // pred: ^bb12
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    cir.br ^bb14 loc(#loc49)
  ^bb14:  // pred: ^bb13
    cir.br ^bb16 loc(#loc67)
  ^bb15:  // no predecessors
    cir.br ^bb2 loc(#loc45)
  ^bb16:  // 2 preds: ^bb2, ^bb14
    cir.br ^bb17 loc(#loc45)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc39)
  } loc(#loc83)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_16.c":0:0)
#loc1 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":25:38)
#loc2 = loc("/usr/include/stdlib.h":573:1)
#loc3 = loc("/usr/include/stdlib.h":573:24)
#loc4 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":31:30)
#loc5 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":34:30)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":20:1)
#loc9 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":42:1)
#loc10 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":25:13)
#loc11 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":26:13)
#loc12 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":26:17)
#loc13 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":22:5)
#loc14 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":41:5)
#loc15 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":22:11)
#loc16 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":23:5)
#loc17 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":24:9)
#loc18 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":39:9)
#loc19 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":27:18)
#loc20 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":27:27)
#loc21 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":27:13)
#loc22 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":27:28)
#loc23 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":28:13)
#loc24 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":37:13)
#loc25 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":28:21)
#loc26 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":30:13)
#loc27 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":31:17)
#loc28 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":32:17)
#loc29 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":34:17)
#loc30 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":35:17)
#loc31 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":38:23)
#loc32 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":38:13)
#loc33 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":40:9)
#loc34 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":75:1)
#loc35 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":78:1)
#loc36 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":77:5)
#loc37 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":77:11)
#loc38 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":49:1)
#loc39 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":73:1)
#loc40 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":54:13)
#loc41 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":54:38)
#loc42 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":55:13)
#loc43 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":55:17)
#loc44 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":51:5)
#loc45 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":72:5)
#loc46 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":51:11)
#loc47 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":52:5)
#loc48 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":53:9)
#loc49 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":70:9)
#loc50 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":56:18)
#loc51 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":56:27)
#loc52 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":56:13)
#loc53 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":56:28)
#loc54 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":57:13)
#loc55 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":68:13)
#loc56 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":57:21)
#loc57 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":59:13)
#loc58 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":60:30)
#loc59 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":60:17)
#loc60 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":61:17)
#loc61 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":63:30)
#loc62 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":63:17)
#loc63 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":64:17)
#loc64 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":67:17)
#loc65 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":69:23)
#loc66 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":69:13)
#loc67 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":71:9)
#loc68 = loc(fused[#loc2, #loc3])
#loc69 = loc(fused[#loc6, #loc7])
#loc70 = loc(fused[#loc8, #loc9])
#loc71 = loc(fused[#loc10, #loc1])
#loc72 = loc(fused[#loc11, #loc12])
#loc73 = loc(fused[#loc13, #loc14])
#loc74 = loc(fused[#loc16, #loc14])
#loc75 = loc(fused[#loc17, #loc18])
#loc76 = loc(fused[#loc19, #loc20])
#loc77 = loc(fused[#loc21, #loc22])
#loc78 = loc(fused[#loc23, #loc24])
#loc79 = loc(fused[#loc27, #loc4])
#loc80 = loc(fused[#loc29, #loc5])
#loc81 = loc(fused[#loc34, #loc35])
#loc82 = loc(fused[#loc36, #loc37])
#loc83 = loc(fused[#loc38, #loc39])
#loc84 = loc(fused[#loc40, #loc41])
#loc85 = loc(fused[#loc42, #loc43])
#loc86 = loc(fused[#loc44, #loc45])
#loc87 = loc(fused[#loc47, #loc45])
#loc88 = loc(fused[#loc48, #loc49])
#loc89 = loc(fused[#loc50, #loc51])
#loc90 = loc(fused[#loc52, #loc53])
#loc91 = loc(fused[#loc54, #loc55])
#loc92 = loc(fused[#loc59, #loc58])
#loc93 = loc(fused[#loc62, #loc61])
