!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__listen_socket_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc181)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc182)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc183)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc184)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc185)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc186)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc187)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc188)
  cir.func private @close(!s32i) -> !s32i loc(#loc189)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc190)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc21)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__listen_socket_12.c\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc21)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__listen_socket_12_bad()\00" : !cir.array<!s8i x 56>> : !cir.array<!s8i x 56> {alignment = 1 : i64} loc(#loc21)
  cir.func no_proto @CWE617_Reachable_Assertion__listen_socket_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc192)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc27)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc193)
    cir.scope {
      %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc195)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc195)
      %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc31)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc31)
      cir.if %7 {
        cir.scope {
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc198)
          %9 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc199)
          %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc200)
          %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc201)
          %12 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc202)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc43)
          %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc43)
          cir.store %14, %10 : !s32i, !cir.ptr<!s32i> loc(#loc200)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc45)
          %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc45)
          cir.store %16, %11 : !s32i, !cir.ptr<!s32i> loc(#loc201)
          cir.scope {
            cir.do {
              cir.scope {
                %17 = cir.const #cir.int<2> : !s32i loc(#loc52)
                %18 = cir.const #cir.int<1> : !s32i loc(#loc53)
                %19 = cir.const #cir.int<6> : !s32i loc(#loc54)
                %20 = cir.call @socket(%17, %18, %19) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc55)
                cir.store %20, %10 : !s32i, !cir.ptr<!s32i> loc(#loc205)
                cir.scope {
                  %62 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc60)
                  %63 = cir.const #cir.int<1> : !s32i loc(#loc61)
                  %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc61)
                  %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc207)
                  cir.if %65 {
                    cir.break loc(#loc63)
                  } loc(#loc208)
                } loc(#loc206)
                %21 = cir.cast(bitcast, %9 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc209)
                %22 = cir.const #cir.int<0> : !s32i loc(#loc66)
                %23 = cir.const #cir.int<16> : !u64i loc(#loc210)
                cir.libc.memset %23 bytes from %21 set to %22 : !cir.ptr<!void>, !s32i, !u64i loc(#loc211)
                %24 = cir.const #cir.int<2> : !s32i loc(#loc71)
                %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc71)
                %26 = cir.get_member %9[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
                cir.store %25, %26 : !u16i, !cir.ptr<!u16i> loc(#loc212)
                %27 = cir.const #cir.int<0> : !s32i loc(#loc74)
                %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc74)
                %29 = cir.get_member %9[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc75)
                %30 = cir.get_member %29[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc76)
                cir.store %28, %30 : !u32i, !cir.ptr<!u32i> loc(#loc213)
                %31 = cir.const #cir.int<27015> : !s32i loc(#loc78)
                %32 = cir.cast(integral, %31 : !s32i), !u16i loc(#loc78)
                %33 = cir.call @htons(%32) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc79)
                %34 = cir.get_member %9[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
                cir.store %33, %34 : !u16i, !cir.ptr<!u16i> loc(#loc214)
                cir.scope {
                  %62 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc85)
                  %63 = cir.cast(bitcast, %9 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc216)
                  %64 = cir.const #cir.int<16> : !u64i loc(#loc217)
                  %65 = cir.cast(integral, %64 : !u64i), !u32i loc(#loc217)
                  %66 = cir.call @bind(%62, %63, %65) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc90)
                  %67 = cir.const #cir.int<1> : !s32i loc(#loc91)
                  %68 = cir.unary(minus, %67) nsw : !s32i, !s32i loc(#loc91)
                  %69 = cir.cmp(eq, %66, %68) : !s32i, !cir.bool loc(#loc218)
                  cir.if %69 {
                    cir.break loc(#loc93)
                  } loc(#loc219)
                } loc(#loc215)
                cir.scope {
                  %62 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc96)
                  %63 = cir.const #cir.int<5> : !s32i loc(#loc97)
                  %64 = cir.call @listen(%62, %63) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc98)
                  %65 = cir.const #cir.int<1> : !s32i loc(#loc99)
                  %66 = cir.unary(minus, %65) nsw : !s32i, !s32i loc(#loc99)
                  %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc221)
                  cir.if %67 {
                    cir.break loc(#loc101)
                  } loc(#loc222)
                } loc(#loc220)
                %35 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc102)
                %36 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc103)
                %37 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc104)
                %38 = cir.call @accept(%35, %36, %37) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc105)
                cir.store %38, %11 : !s32i, !cir.ptr<!s32i> loc(#loc223)
                cir.scope {
                  %62 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc110)
                  %63 = cir.const #cir.int<1> : !s32i loc(#loc111)
                  %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc111)
                  %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc225)
                  cir.if %65 {
                    cir.break loc(#loc113)
                  } loc(#loc226)
                } loc(#loc224)
                %39 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc114)
                %40 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc115)
                %41 = cir.cast(bitcast, %40 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc115)
                %42 = cir.const #cir.int<3> : !s32i loc(#loc116)
                %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc116)
                %44 = cir.const #cir.int<4> : !u64i loc(#loc116)
                %45 = cir.binop(mul, %43, %44) : !u64i loc(#loc116)
                %46 = cir.const #cir.int<2> : !s32i loc(#loc116)
                %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc116)
                %48 = cir.binop(add, %45, %47) : !u64i loc(#loc116)
                %49 = cir.const #cir.int<1> : !s32i loc(#loc117)
                %50 = cir.cast(integral, %49 : !s32i), !u64i loc(#loc117)
                %51 = cir.binop(sub, %48, %50) : !u64i loc(#loc227)
                %52 = cir.const #cir.int<0> : !s32i loc(#loc118)
                %53 = cir.call @recv(%39, %41, %51, %52) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc119)
                %54 = cir.cast(integral, %53 : !s64i), !s32i loc(#loc119)
                cir.store %54, %8 : !s32i, !cir.ptr<!s32i> loc(#loc228)
                cir.scope {
                  %62 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc124)
                  %63 = cir.const #cir.int<1> : !s32i loc(#loc125)
                  %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc125)
                  %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc230)
                  %66 = cir.ternary(%65, true {
                    %67 = cir.const #true loc(#loc126)
                    cir.yield %67 : !cir.bool loc(#loc126)
                  }, false {
                    %67 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc127)
                    %68 = cir.const #cir.int<0> : !s32i loc(#loc128)
                    %69 = cir.cmp(eq, %67, %68) : !s32i, !cir.bool loc(#loc231)
                    %70 = cir.ternary(%69, true {
                      %71 = cir.const #true loc(#loc126)
                      cir.yield %71 : !cir.bool loc(#loc126)
                    }, false {
                      %71 = cir.const #false loc(#loc126)
                      cir.yield %71 : !cir.bool loc(#loc126)
                    }) : (!cir.bool) -> !cir.bool loc(#loc126)
                    cir.yield %70 : !cir.bool loc(#loc126)
                  }) : (!cir.bool) -> !cir.bool loc(#loc126)
                  cir.if %66 {
                    cir.break loc(#loc130)
                  } loc(#loc232)
                } loc(#loc229)
                %55 = cir.const #cir.int<0> : !s32i loc(#loc131)
                %56 = cir.cast(integral, %55 : !s32i), !s8i loc(#loc131)
                %57 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc132)
                %58 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc133)
                %59 = cir.ptr_stride(%58 : !cir.ptr<!s8i>, %57 : !s32i), !cir.ptr<!s8i> loc(#loc133)
                cir.store %56, %59 : !s8i, !cir.ptr<!s8i> loc(#loc233)
                %60 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc134)
                %61 = cir.call @atoi(%60) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc135)
                cir.store %61, %0 : !s32i, !cir.ptr<!s32i> loc(#loc234)
              } loc(#loc204)
              cir.yield loc(#loc49)
            } while {
              %17 = cir.const #cir.int<0> : !s32i loc(#loc138)
              %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc138)
              cir.condition(%18) loc(#loc138)
            } loc(#loc203)
          } loc(#loc203)
          cir.scope {
            %17 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc141)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc142)
            %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc142)
            %20 = cir.cmp(ne, %17, %19) : !s32i, !cir.bool loc(#loc236)
            cir.if %20 {
              %21 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc144)
              %22 = cir.call @close(%21) : (!s32i) -> !s32i loc(#loc145)
            } loc(#loc237)
          } loc(#loc235)
          cir.scope {
            %17 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc148)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc149)
            %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc149)
            %20 = cir.cmp(ne, %17, %19) : !s32i, !cir.bool loc(#loc239)
            cir.if %20 {
              %21 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc151)
              %22 = cir.call @close(%21) : (!s32i) -> !s32i loc(#loc152)
            } loc(#loc240)
          } loc(#loc238)
        } loc(#loc197)
      } else {
        %8 = cir.const #cir.int<5> : !s32i loc(#loc153)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc154)
        %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc153)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc241)
      } loc(#loc196)
    } loc(#loc194)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc21)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc21)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc21)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc21)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc21)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc21)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc21)
          %11 = cir.const #cir.int<130> : !s32i loc(#loc21)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc21)
          %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 56>> loc(#loc21)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 56>>), !cir.ptr<!s8i> loc(#loc21)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc21)
        } loc(#loc21)
      } loc(#loc21)
    } loc(#loc21)
    cir.return loc(#loc23)
  } loc(#loc191)
  cir.func no_proto @CWE617_Reachable_Assertion__listen_socket_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc243)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc158)
    cir.return loc(#loc157)
  } loc(#loc242)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc160)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc245)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc165)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc166)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc246)
    cir.scope {
      %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc248)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc248)
      %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc170)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc170)
      cir.if %7 {
        %8 = cir.const #cir.int<5> : !s32i loc(#loc175)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc176)
        %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc175)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc250)
      } else {
        %8 = cir.const #cir.int<5> : !s32i loc(#loc178)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc179)
        %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc178)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc251)
      } loc(#loc249)
    } loc(#loc247)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc160)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc160)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc160)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc160)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc160)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc160)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc160)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc160)
          %11 = cir.const #cir.int<155> : !s32i loc(#loc160)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc160)
          %13 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc160)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc160)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc160)
        } loc(#loc160)
      } loc(#loc160)
    } loc(#loc160)
    cir.return loc(#loc162)
  } loc(#loc244)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__listen_socket_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc4 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc5 = loc("/usr/include/netinet/in.h":402:1)
#loc6 = loc("/usr/include/netinet/in.h":403:40)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc13 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc14 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc15 = loc("/usr/include/stdlib.h":105:1)
#loc16 = loc("/usr/include/stdlib.h":106:33)
#loc17 = loc("/usr/include/unistd.h":358:1)
#loc18 = loc("/usr/include/unistd.h":358:27)
#loc19 = loc("/usr/include/assert.h":69:1)
#loc20 = loc("/usr/include/assert.h":71:43)
#loc21 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":130:5)
#loc22 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":47:1)
#loc23 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":131:1)
#loc24 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":49:5)
#loc25 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":49:9)
#loc26 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":51:13)
#loc27 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":51:12)
#loc28 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":51:5)
#loc29 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":52:5)
#loc30 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":128:5)
#loc31 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":52:8)
#loc32 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":52:33)
#loc33 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":53:5)
#loc34 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":123:5)
#loc35 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":125:5)
#loc36 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":54:9)
#loc37 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":122:9)
#loc38 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":59:13)
#loc39 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":59:17)
#loc40 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":60:13)
#loc41 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":60:32)
#loc42 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":61:13)
#loc43 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":61:35)
#loc44 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":62:13)
#loc45 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":62:35)
#loc46 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":63:13)
#loc47 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":63:45)
#loc48 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":64:13)
#loc49 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":107:21)
#loc50 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":65:13)
#loc51 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":106:13)
#loc52 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":74:39)
#loc53 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":74:48)
#loc54 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":74:61)
#loc55 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":74:32)
#loc56 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":74:17)
#loc57 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":74:72)
#loc58 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":75:17)
#loc59 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":78:17)
#loc60 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":75:21)
#loc61 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":75:37)
#loc62 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":76:17)
#loc63 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":77:21)
#loc64 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":79:24)
#loc65 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":79:25)
#loc66 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":79:34)
#loc67 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":79:37)
#loc68 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":79:51)
#loc69 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":79:17)
#loc70 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":79:52)
#loc71 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":80:38)
#loc72 = loc("/usr/include/netinet/in.h":249:5)
#loc73 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":80:17)
#loc74 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":81:43)
#loc75 = loc("/usr/include/netinet/in.h":251:20)
#loc76 = loc("/usr/include/netinet/in.h":33:15)
#loc77 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":81:17)
#loc78 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":82:42)
#loc79 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":82:36)
#loc80 = loc("/usr/include/netinet/in.h":250:15)
#loc81 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":82:17)
#loc82 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":82:50)
#loc83 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":83:17)
#loc84 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":86:17)
#loc85 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":83:26)
#loc86 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":83:58)
#loc87 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":83:59)
#loc88 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":83:68)
#loc89 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":83:82)
#loc90 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":83:21)
#loc91 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":83:88)
#loc92 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":84:17)
#loc93 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":85:21)
#loc94 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":87:17)
#loc95 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":90:17)
#loc96 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":87:28)
#loc97 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":87:42)
#loc98 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":87:21)
#loc99 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":87:61)
#loc100 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":88:17)
#loc101 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":89:21)
#loc102 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":91:39)
#loc103 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":91:53)
#loc104 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":91:59)
#loc105 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":91:32)
#loc106 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":91:17)
#loc107 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":91:63)
#loc108 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":92:17)
#loc109 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":95:17)
#loc110 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":92:21)
#loc111 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":92:37)
#loc112 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":93:17)
#loc113 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":94:21)
#loc114 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":97:35)
#loc115 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":97:49)
#loc116 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":97:62)
#loc117 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":97:80)
#loc118 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":97:83)
#loc119 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":97:30)
#loc120 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":97:17)
#loc121 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":97:84)
#loc122 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":98:17)
#loc123 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":101:17)
#loc124 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":98:21)
#loc125 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":98:35)
#loc126 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":98:48)
#loc127 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":98:51)
#loc128 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":98:65)
#loc129 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":99:17)
#loc130 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":100:21)
#loc131 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":103:43)
#loc132 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":103:29)
#loc133 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":103:17)
#loc134 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":105:29)
#loc135 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":105:24)
#loc136 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":105:17)
#loc137 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":105:40)
#loc138 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":107:20)
#loc139 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":108:13)
#loc140 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":111:13)
#loc141 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":108:17)
#loc142 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":108:33)
#loc143 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":109:13)
#loc144 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":110:30)
#loc145 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":110:17)
#loc146 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":112:13)
#loc147 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":115:13)
#loc148 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":112:17)
#loc149 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":112:33)
#loc150 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":113:13)
#loc151 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":114:30)
#loc152 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":114:17)
#loc153 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":127:16)
#loc154 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":127:29)
#loc155 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":127:9)
#loc156 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":158:1)
#loc157 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":161:1)
#loc158 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":160:5)
#loc159 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":160:13)
#loc160 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":155:5)
#loc161 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":139:1)
#loc162 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":156:1)
#loc163 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":141:5)
#loc164 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":141:9)
#loc165 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":143:13)
#loc166 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":143:12)
#loc167 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":143:5)
#loc168 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":144:5)
#loc169 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":153:5)
#loc170 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":144:8)
#loc171 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":144:33)
#loc172 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":145:5)
#loc173 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":148:5)
#loc174 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":150:5)
#loc175 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":147:16)
#loc176 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":147:29)
#loc177 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":147:9)
#loc178 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":152:16)
#loc179 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":152:29)
#loc180 = loc("CWE617_Reachable_Assertion__listen_socket_12.c":152:9)
#loc181 = loc(fused[#loc1, #loc2])
#loc182 = loc(fused[#loc3, #loc4])
#loc183 = loc(fused[#loc5, #loc6])
#loc184 = loc(fused[#loc7, #loc8])
#loc185 = loc(fused[#loc9, #loc10])
#loc186 = loc(fused[#loc11, #loc12])
#loc187 = loc(fused[#loc13, #loc14])
#loc188 = loc(fused[#loc15, #loc16])
#loc189 = loc(fused[#loc17, #loc18])
#loc190 = loc(fused[#loc19, #loc20])
#loc191 = loc(fused[#loc22, #loc23])
#loc192 = loc(fused[#loc24, #loc25])
#loc193 = loc(fused[#loc28, #loc26])
#loc194 = loc(fused[#loc29, #loc30])
#loc195 = loc(fused[#loc31, #loc32])
#loc196 = loc(fused[#loc33, #loc34, #loc35, #loc30])
#loc197 = loc(fused[#loc36, #loc37])
#loc198 = loc(fused[#loc38, #loc39])
#loc199 = loc(fused[#loc40, #loc41])
#loc200 = loc(fused[#loc42, #loc43])
#loc201 = loc(fused[#loc44, #loc45])
#loc202 = loc(fused[#loc46, #loc47])
#loc203 = loc(fused[#loc48, #loc49])
#loc204 = loc(fused[#loc50, #loc51])
#loc205 = loc(fused[#loc56, #loc57])
#loc206 = loc(fused[#loc58, #loc59])
#loc207 = loc(fused[#loc60, #loc61])
#loc208 = loc(fused[#loc62, #loc59])
#loc209 = loc(fused[#loc64, #loc65])
#loc210 = loc(fused[#loc67, #loc68])
#loc211 = loc(fused[#loc69, #loc70])
#loc212 = loc(fused[#loc73, #loc71])
#loc213 = loc(fused[#loc77, #loc74])
#loc214 = loc(fused[#loc81, #loc82])
#loc215 = loc(fused[#loc83, #loc84])
#loc216 = loc(fused[#loc86, #loc87])
#loc217 = loc(fused[#loc88, #loc89])
#loc218 = loc(fused[#loc90, #loc91])
#loc219 = loc(fused[#loc92, #loc84])
#loc220 = loc(fused[#loc94, #loc95])
#loc221 = loc(fused[#loc98, #loc99])
#loc222 = loc(fused[#loc100, #loc95])
#loc223 = loc(fused[#loc106, #loc107])
#loc224 = loc(fused[#loc108, #loc109])
#loc225 = loc(fused[#loc110, #loc111])
#loc226 = loc(fused[#loc112, #loc109])
#loc227 = loc(fused[#loc116, #loc117])
#loc228 = loc(fused[#loc120, #loc121])
#loc229 = loc(fused[#loc122, #loc123])
#loc230 = loc(fused[#loc124, #loc125])
#loc231 = loc(fused[#loc127, #loc128])
#loc232 = loc(fused[#loc129, #loc123])
#loc233 = loc(fused[#loc133, #loc131])
#loc234 = loc(fused[#loc136, #loc137])
#loc235 = loc(fused[#loc139, #loc140])
#loc236 = loc(fused[#loc141, #loc142])
#loc237 = loc(fused[#loc143, #loc140])
#loc238 = loc(fused[#loc146, #loc147])
#loc239 = loc(fused[#loc148, #loc149])
#loc240 = loc(fused[#loc150, #loc147])
#loc241 = loc(fused[#loc155, #loc154])
#loc242 = loc(fused[#loc156, #loc157])
#loc243 = loc(fused[#loc158, #loc159])
#loc244 = loc(fused[#loc161, #loc162])
#loc245 = loc(fused[#loc163, #loc164])
#loc246 = loc(fused[#loc167, #loc165])
#loc247 = loc(fused[#loc168, #loc169])
#loc248 = loc(fused[#loc170, #loc171])
#loc249 = loc(fused[#loc172, #loc173, #loc174, #loc169])
#loc250 = loc(fused[#loc177, #loc176])
#loc251 = loc(fused[#loc180, #loc179])
