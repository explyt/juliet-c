!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc103)
  cir.func private @printIntLine(!s32i) loc(#loc104)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc106)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc9)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc107)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc109)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc109)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc13)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc13)
      cir.if %5 {
        %6 = cir.const #cir.int<10> : !s32i loc(#loc16)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc16)
        %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc16)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc16)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc16)
        cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc111)
      } loc(#loc110)
    } loc(#loc108)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc113)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc113)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc113)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc22)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc22)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc23)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc23)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc24)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc24)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc114)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc115)
      cir.libc.memmove %11 bytes from %7 to %5 : !cir.ptr<!void>, !u64i loc(#loc116)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc29)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc30)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc31)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc29)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc32)
    } loc(#loc112)
    cir.return loc(#loc6)
  } loc(#loc105)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc118)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc119)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    cir.return loc(#loc34)
  } loc(#loc117)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc120)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc121)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc43)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc123)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc48)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc124)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc126)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc126)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc52)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc52)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc43)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc43)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc57)
      } else {
        %6 = cir.const #cir.int<10> : !s32i loc(#loc58)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc58)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc58)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc58)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc58)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc58)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc58)
        cir.store %12, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc128)
      } loc(#loc127)
    } loc(#loc125)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc130)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc130)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc130)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc64)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc64)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc65)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc65)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc66)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc66)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc131)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc132)
      cir.libc.memmove %11 bytes from %7 to %5 : !cir.ptr<!void>, !u64i loc(#loc133)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc71)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc72)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc73)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc71)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc74)
    } loc(#loc129)
    cir.return loc(#loc45)
  } loc(#loc122)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc135)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc79)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc136)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc138)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc138)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc83)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc83)
      cir.if %5 {
        %6 = cir.const #cir.int<10> : !s32i loc(#loc86)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc86)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc86)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc86)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc86)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc86)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc86)
        cir.store %12, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc140)
      } loc(#loc139)
    } loc(#loc137)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc142)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc142)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc142)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc92)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc92)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc93)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc93)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc94)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc94)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc143)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc144)
      cir.libc.memmove %11 bytes from %7 to %5 : !cir.ptr<!void>, !u64i loc(#loc145)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc99)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc100)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc101)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc99)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc102)
    } loc(#loc141)
    cir.return loc(#loc76)
  } loc(#loc134)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":21:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":36:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":23:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":23:11)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":24:12)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":24:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":25:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":29:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":25:8)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":25:26)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":26:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":28:23)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":28:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":30:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":35:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":31:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":31:28)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":33:17)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":33:23)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":33:31)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":33:34)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":33:44)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":33:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":33:45)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":34:22)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":34:27)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":34:28)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":34:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":83:1)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":87:1)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":85:5)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":85:14)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":86:5)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":86:14)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":50:19)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":43:1)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":63:1)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":45:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":45:11)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":46:12)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":46:5)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":47:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":56:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":47:8)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":47:27)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":48:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":51:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":53:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":50:9)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":55:23)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":55:9)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":57:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":62:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":58:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":58:28)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":60:17)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":60:23)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":60:31)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":60:34)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":60:44)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":60:9)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":60:45)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":61:22)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":61:27)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":61:28)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":61:9)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":66:1)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":81:1)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":68:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":68:11)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":69:12)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":69:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":70:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":74:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":70:8)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":70:26)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":71:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":73:23)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":73:9)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":75:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":80:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":76:9)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":76:28)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":78:17)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":78:23)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":78:31)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":78:34)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":78:44)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":78:9)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":78:45)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":79:22)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":79:27)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":79:28)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c":79:9)
#loc103 = loc(fused[#loc1, #loc2])
#loc104 = loc(fused[#loc3, #loc4])
#loc105 = loc(fused[#loc5, #loc6])
#loc106 = loc(fused[#loc7, #loc8])
#loc107 = loc(fused[#loc10, #loc9])
#loc108 = loc(fused[#loc11, #loc12])
#loc109 = loc(fused[#loc13, #loc14])
#loc110 = loc(fused[#loc15, #loc12])
#loc111 = loc(fused[#loc17, #loc16])
#loc112 = loc(fused[#loc18, #loc19])
#loc113 = loc(fused[#loc20, #loc21])
#loc114 = loc(fused[#loc25, #loc26])
#loc115 = loc(fused[#loc24, #loc26])
#loc116 = loc(fused[#loc27, #loc28])
#loc117 = loc(fused[#loc33, #loc34])
#loc118 = loc(fused[#loc35, #loc36])
#loc119 = loc(fused[#loc37, #loc38])
#loc120 = loc(fused[#loc39, #loc40])
#loc121 = loc(fused[#loc41, #loc42])
#loc122 = loc(fused[#loc44, #loc45])
#loc123 = loc(fused[#loc46, #loc47])
#loc124 = loc(fused[#loc49, #loc48])
#loc125 = loc(fused[#loc50, #loc51])
#loc126 = loc(fused[#loc52, #loc53])
#loc127 = loc(fused[#loc54, #loc55, #loc56, #loc51])
#loc128 = loc(fused[#loc59, #loc58])
#loc129 = loc(fused[#loc60, #loc61])
#loc130 = loc(fused[#loc62, #loc63])
#loc131 = loc(fused[#loc67, #loc68])
#loc132 = loc(fused[#loc66, #loc68])
#loc133 = loc(fused[#loc69, #loc70])
#loc134 = loc(fused[#loc75, #loc76])
#loc135 = loc(fused[#loc77, #loc78])
#loc136 = loc(fused[#loc80, #loc79])
#loc137 = loc(fused[#loc81, #loc82])
#loc138 = loc(fused[#loc83, #loc84])
#loc139 = loc(fused[#loc85, #loc82])
#loc140 = loc(fused[#loc87, #loc86])
#loc141 = loc(fused[#loc88, #loc89])
#loc142 = loc(fused[#loc90, #loc91])
#loc143 = loc(fused[#loc95, #loc96])
#loc144 = loc(fused[#loc94, #loc96])
#loc145 = loc(fused[#loc97, #loc98])
