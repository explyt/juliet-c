!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_fscanf_multiply_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc196)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc197)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc198)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%hd\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printIntLine(!s32i) loc(#loc199)
  cir.func no_proto @CWE191_Integer_Underflow__short_fscanf_multiply_07_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc201)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc14)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc14)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc202)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc196)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc18)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc19)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc204)
      cir.if %6 {
        %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc21)
        %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc198)
        %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc22)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc7)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc7)
        %12 = cir.call @__isoc99_fscanf(%9, %11, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc21)
      } loc(#loc205)
    } loc(#loc203)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc196)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc25)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc26)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc207)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc30)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc30)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc31)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc210)
          cir.if %10 {
            %11 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc212)
            %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc35)
            %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc35)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc34)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc35)
            %16 = cir.cast(integral, %15 : !s32i), !s16i loc(#loc35)
            cir.store %16, %11 : !s16i, !cir.ptr<!s16i> loc(#loc212)
            %17 = cir.load %11 : !cir.ptr<!s16i>, !s16i loc(#loc36)
            %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc36)
            cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc37)
          } loc(#loc211)
        } loc(#loc209)
      } loc(#loc208)
    } loc(#loc206)
    cir.return loc(#loc11)
  } loc(#loc200)
  cir.func no_proto @CWE191_Integer_Underflow__short_fscanf_multiply_07_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc214)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc215)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc216)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc217)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc46)
    cir.return loc(#loc39)
  } loc(#loc213)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc218)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc51)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc220)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc56)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc56)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc221)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc196)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc60)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc61)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc223)
      cir.if %6 {
        %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc63)
        %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc198)
        %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc64)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc65)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc65)
        %12 = cir.call @__isoc99_fscanf(%9, %11, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc63)
      } loc(#loc224)
    } loc(#loc222)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc196)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc68)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc69)
      %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc226)
      cir.if %6 {
        %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc50)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc50)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc73)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc76)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc76)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc77)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc229)
          cir.if %10 {
            cir.scope {
              %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc81)
              %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc81)
              %13 = cir.const #cir.int<32767> : !s32i loc(#loc82)
              %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc82)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc82)
              %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc82)
              %17 = cir.const #cir.int<2> : !s32i loc(#loc83)
              %18 = cir.binop(div, %16, %17) : !s32i loc(#loc232)
              %19 = cir.cmp(gt, %12, %18) : !s32i, !cir.bool loc(#loc233)
              cir.if %19 {
                %20 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc235)
                %21 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc90)
                %22 = cir.cast(integral, %21 : !s16i), !s32i loc(#loc90)
                %23 = cir.const #cir.int<2> : !s32i loc(#loc89)
                %24 = cir.binop(mul, %22, %23) nsw : !s32i loc(#loc90)
                %25 = cir.cast(integral, %24 : !s32i), !s16i loc(#loc90)
                cir.store %25, %20 : !s16i, !cir.ptr<!s16i> loc(#loc235)
                %26 = cir.load %20 : !cir.ptr<!s16i>, !s16i loc(#loc91)
                %27 = cir.cast(integral, %26 : !s16i), !s32i loc(#loc91)
                cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc92)
              } else {
                %20 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc51)
                %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc51)
                cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc93)
              } loc(#loc234)
            } loc(#loc231)
          } loc(#loc230)
        } loc(#loc228)
      } loc(#loc227)
    } loc(#loc225)
    cir.return loc(#loc53)
  } loc(#loc219)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc237)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc98)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc98)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc238)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc196)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc102)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc103)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc240)
      cir.if %6 {
        %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc105)
        %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc198)
        %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc106)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc107)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc107)
        %12 = cir.call @__isoc99_fscanf(%9, %11, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc105)
      } loc(#loc241)
    } loc(#loc239)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc196)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc110)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc111)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc243)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc115)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc115)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc116)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc246)
          cir.if %10 {
            cir.scope {
              %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc120)
              %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc120)
              %13 = cir.const #cir.int<32767> : !s32i loc(#loc121)
              %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc121)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc121)
              %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc121)
              %17 = cir.const #cir.int<2> : !s32i loc(#loc122)
              %18 = cir.binop(div, %16, %17) : !s32i loc(#loc249)
              %19 = cir.cmp(gt, %12, %18) : !s32i, !cir.bool loc(#loc250)
              cir.if %19 {
                %20 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc252)
                %21 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc129)
                %22 = cir.cast(integral, %21 : !s16i), !s32i loc(#loc129)
                %23 = cir.const #cir.int<2> : !s32i loc(#loc128)
                %24 = cir.binop(mul, %22, %23) nsw : !s32i loc(#loc129)
                %25 = cir.cast(integral, %24 : !s32i), !s16i loc(#loc129)
                cir.store %25, %20 : !s16i, !cir.ptr<!s16i> loc(#loc252)
                %26 = cir.load %20 : !cir.ptr<!s16i>, !s16i loc(#loc130)
                %27 = cir.cast(integral, %26 : !s16i), !s32i loc(#loc130)
                cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc131)
              } else {
                %20 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc132)
                %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc132)
                cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc133)
              } loc(#loc251)
            } loc(#loc248)
          } loc(#loc247)
        } loc(#loc245)
      } loc(#loc244)
    } loc(#loc242)
    cir.return loc(#loc95)
  } loc(#loc236)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc254)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc138)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc138)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc255)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc196)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc142)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc143)
      %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc257)
      cir.if %6 {
        %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc147)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc147)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc148)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc149)
        %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc150)
        %9 = cir.cast(integral, %8 : !s32i), !s16i loc(#loc150)
        cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc259)
      } loc(#loc258)
    } loc(#loc256)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc196)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc154)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc155)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc261)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc159)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc159)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc160)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc264)
          cir.if %10 {
            %11 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc266)
            %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc164)
            %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc164)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc163)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc164)
            %16 = cir.cast(integral, %15 : !s32i), !s16i loc(#loc164)
            cir.store %16, %11 : !s16i, !cir.ptr<!s16i> loc(#loc266)
            %17 = cir.load %11 : !cir.ptr<!s16i>, !s16i loc(#loc165)
            %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc165)
            cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc166)
          } loc(#loc265)
        } loc(#loc263)
      } loc(#loc262)
    } loc(#loc260)
    cir.return loc(#loc135)
  } loc(#loc253)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc268)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc171)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc171)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc269)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc196)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc175)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc176)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc271)
      cir.if %6 {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc178)
        %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc179)
        %9 = cir.cast(integral, %8 : !s32i), !s16i loc(#loc179)
        cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc273)
      } loc(#loc272)
    } loc(#loc270)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc196)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc183)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc184)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc275)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc188)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc188)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc189)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc278)
          cir.if %10 {
            %11 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc280)
            %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc193)
            %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc193)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc192)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc193)
            %16 = cir.cast(integral, %15 : !s32i), !s16i loc(#loc193)
            cir.store %16, %11 : !s16i, !cir.ptr<!s16i> loc(#loc280)
            %17 = cir.load %11 : !cir.ptr<!s16i>, !s16i loc(#loc194)
            %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc194)
            cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc195)
          } loc(#loc279)
        } loc(#loc277)
      } loc(#loc276)
    } loc(#loc274)
    cir.return loc(#loc168)
  } loc(#loc267)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_fscanf_multiply_07.c":0:0)
#loc1 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":23:1)
#loc2 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":23:25)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":34:24)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":27:1)
#loc11 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":45:1)
#loc12 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":29:5)
#loc13 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":29:11)
#loc14 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":30:12)
#loc15 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":30:5)
#loc16 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":31:5)
#loc17 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":35:5)
#loc18 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":31:8)
#loc19 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":31:20)
#loc20 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":32:5)
#loc21 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":34:9)
#loc22 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":34:17)
#loc23 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":36:5)
#loc24 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":44:5)
#loc25 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":36:8)
#loc26 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":36:20)
#loc27 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":37:5)
#loc28 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":38:9)
#loc29 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":43:9)
#loc30 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":38:12)
#loc31 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":38:19)
#loc32 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":39:9)
#loc33 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":41:13)
#loc34 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":41:35)
#loc35 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":41:28)
#loc36 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":42:26)
#loc37 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":42:13)
#loc38 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":159:1)
#loc39 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":165:1)
#loc40 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":161:5)
#loc41 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":161:14)
#loc42 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":162:5)
#loc43 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":162:14)
#loc44 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":163:5)
#loc45 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":163:14)
#loc46 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":164:5)
#loc47 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":164:14)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc50 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":64:19)
#loc51 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":78:27)
#loc52 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":52:1)
#loc53 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":82:1)
#loc54 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":54:5)
#loc55 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":54:11)
#loc56 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":55:12)
#loc57 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":55:5)
#loc58 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":56:5)
#loc59 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":60:5)
#loc60 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":56:8)
#loc61 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":56:20)
#loc62 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":57:5)
#loc63 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":59:9)
#loc64 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":59:17)
#loc65 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":59:24)
#loc66 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":61:5)
#loc67 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":81:5)
#loc68 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":61:8)
#loc69 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":61:20)
#loc70 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":62:5)
#loc71 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":65:5)
#loc72 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":67:5)
#loc73 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":64:9)
#loc74 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":68:9)
#loc75 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":80:9)
#loc76 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":68:12)
#loc77 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":68:19)
#loc78 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":69:9)
#loc79 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":71:13)
#loc80 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":79:13)
#loc81 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":71:17)
#loc82 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":71:25)
#loc83 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":71:34)
#loc84 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":71:35)
#loc85 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":72:13)
#loc86 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":75:13)
#loc87 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":77:13)
#loc88 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":73:17)
#loc89 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":73:39)
#loc90 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":73:32)
#loc91 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":74:30)
#loc92 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":74:17)
#loc93 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":78:17)
#loc94 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":85:1)
#loc95 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":110:1)
#loc96 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":87:5)
#loc97 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":87:11)
#loc98 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":88:12)
#loc99 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":88:5)
#loc100 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":89:5)
#loc101 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":93:5)
#loc102 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":89:8)
#loc103 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":89:20)
#loc104 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":90:5)
#loc105 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":92:9)
#loc106 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":92:17)
#loc107 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":92:24)
#loc108 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":94:5)
#loc109 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":109:5)
#loc110 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":94:8)
#loc111 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":94:20)
#loc112 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":95:5)
#loc113 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":96:9)
#loc114 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":108:9)
#loc115 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":96:12)
#loc116 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":96:19)
#loc117 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":97:9)
#loc118 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":99:13)
#loc119 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":107:13)
#loc120 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":99:17)
#loc121 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":99:25)
#loc122 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":99:34)
#loc123 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":99:35)
#loc124 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":100:13)
#loc125 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":103:13)
#loc126 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":105:13)
#loc127 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":101:17)
#loc128 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":101:39)
#loc129 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":101:32)
#loc130 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":102:30)
#loc131 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":102:17)
#loc132 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":106:27)
#loc133 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":106:17)
#loc134 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":113:1)
#loc135 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":136:1)
#loc136 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":115:5)
#loc137 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":115:11)
#loc138 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":116:12)
#loc139 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":116:5)
#loc140 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":117:5)
#loc141 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":126:5)
#loc142 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":117:8)
#loc143 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":117:20)
#loc144 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":118:5)
#loc145 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":121:5)
#loc146 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":123:5)
#loc147 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":120:19)
#loc148 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":120:9)
#loc149 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":125:17)
#loc150 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":125:16)
#loc151 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":125:9)
#loc152 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":127:5)
#loc153 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":135:5)
#loc154 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":127:8)
#loc155 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":127:20)
#loc156 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":128:5)
#loc157 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":129:9)
#loc158 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":134:9)
#loc159 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":129:12)
#loc160 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":129:19)
#loc161 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":130:9)
#loc162 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":132:13)
#loc163 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":132:35)
#loc164 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":132:28)
#loc165 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":133:26)
#loc166 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":133:13)
#loc167 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":139:1)
#loc168 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":157:1)
#loc169 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":141:5)
#loc170 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":141:11)
#loc171 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":142:12)
#loc172 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":142:5)
#loc173 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":143:5)
#loc174 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":147:5)
#loc175 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":143:8)
#loc176 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":143:20)
#loc177 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":144:5)
#loc178 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":146:17)
#loc179 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":146:16)
#loc180 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":146:9)
#loc181 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":148:5)
#loc182 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":156:5)
#loc183 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":148:8)
#loc184 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":148:20)
#loc185 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":149:5)
#loc186 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":150:9)
#loc187 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":155:9)
#loc188 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":150:12)
#loc189 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":150:19)
#loc190 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":151:9)
#loc191 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":153:13)
#loc192 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":153:35)
#loc193 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":153:28)
#loc194 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":154:26)
#loc195 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_07.c":154:13)
#loc196 = loc(fused[#loc1, #loc2])
#loc197 = loc(fused[#loc3, #loc4])
#loc198 = loc(fused[#loc5, #loc6])
#loc199 = loc(fused[#loc8, #loc9])
#loc200 = loc(fused[#loc10, #loc11])
#loc201 = loc(fused[#loc12, #loc13])
#loc202 = loc(fused[#loc15, #loc14])
#loc203 = loc(fused[#loc16, #loc17])
#loc204 = loc(fused[#loc18, #loc19])
#loc205 = loc(fused[#loc20, #loc17])
#loc206 = loc(fused[#loc23, #loc24])
#loc207 = loc(fused[#loc25, #loc26])
#loc208 = loc(fused[#loc27, #loc24])
#loc209 = loc(fused[#loc28, #loc29])
#loc210 = loc(fused[#loc30, #loc31])
#loc211 = loc(fused[#loc32, #loc29])
#loc212 = loc(fused[#loc33, #loc34])
#loc213 = loc(fused[#loc38, #loc39])
#loc214 = loc(fused[#loc40, #loc41])
#loc215 = loc(fused[#loc42, #loc43])
#loc216 = loc(fused[#loc44, #loc45])
#loc217 = loc(fused[#loc46, #loc47])
#loc218 = loc(fused[#loc48, #loc49])
#loc219 = loc(fused[#loc52, #loc53])
#loc220 = loc(fused[#loc54, #loc55])
#loc221 = loc(fused[#loc57, #loc56])
#loc222 = loc(fused[#loc58, #loc59])
#loc223 = loc(fused[#loc60, #loc61])
#loc224 = loc(fused[#loc62, #loc59])
#loc225 = loc(fused[#loc66, #loc67])
#loc226 = loc(fused[#loc68, #loc69])
#loc227 = loc(fused[#loc70, #loc71, #loc72, #loc67])
#loc228 = loc(fused[#loc74, #loc75])
#loc229 = loc(fused[#loc76, #loc77])
#loc230 = loc(fused[#loc78, #loc75])
#loc231 = loc(fused[#loc79, #loc80])
#loc232 = loc(fused[#loc82, #loc83])
#loc233 = loc(fused[#loc81, #loc84])
#loc234 = loc(fused[#loc85, #loc86, #loc87, #loc80])
#loc235 = loc(fused[#loc88, #loc89])
#loc236 = loc(fused[#loc94, #loc95])
#loc237 = loc(fused[#loc96, #loc97])
#loc238 = loc(fused[#loc99, #loc98])
#loc239 = loc(fused[#loc100, #loc101])
#loc240 = loc(fused[#loc102, #loc103])
#loc241 = loc(fused[#loc104, #loc101])
#loc242 = loc(fused[#loc108, #loc109])
#loc243 = loc(fused[#loc110, #loc111])
#loc244 = loc(fused[#loc112, #loc109])
#loc245 = loc(fused[#loc113, #loc114])
#loc246 = loc(fused[#loc115, #loc116])
#loc247 = loc(fused[#loc117, #loc114])
#loc248 = loc(fused[#loc118, #loc119])
#loc249 = loc(fused[#loc121, #loc122])
#loc250 = loc(fused[#loc120, #loc123])
#loc251 = loc(fused[#loc124, #loc125, #loc126, #loc119])
#loc252 = loc(fused[#loc127, #loc128])
#loc253 = loc(fused[#loc134, #loc135])
#loc254 = loc(fused[#loc136, #loc137])
#loc255 = loc(fused[#loc139, #loc138])
#loc256 = loc(fused[#loc140, #loc141])
#loc257 = loc(fused[#loc142, #loc143])
#loc258 = loc(fused[#loc144, #loc145, #loc146, #loc141])
#loc259 = loc(fused[#loc151, #loc149])
#loc260 = loc(fused[#loc152, #loc153])
#loc261 = loc(fused[#loc154, #loc155])
#loc262 = loc(fused[#loc156, #loc153])
#loc263 = loc(fused[#loc157, #loc158])
#loc264 = loc(fused[#loc159, #loc160])
#loc265 = loc(fused[#loc161, #loc158])
#loc266 = loc(fused[#loc162, #loc163])
#loc267 = loc(fused[#loc167, #loc168])
#loc268 = loc(fused[#loc169, #loc170])
#loc269 = loc(fused[#loc172, #loc171])
#loc270 = loc(fused[#loc173, #loc174])
#loc271 = loc(fused[#loc175, #loc176])
#loc272 = loc(fused[#loc177, #loc174])
#loc273 = loc(fused[#loc180, #loc178])
#loc274 = loc(fused[#loc181, #loc182])
#loc275 = loc(fused[#loc183, #loc184])
#loc276 = loc(fused[#loc185, #loc182])
#loc277 = loc(fused[#loc186, #loc187])
#loc278 = loc(fused[#loc188, #loc189])
#loc279 = loc(fused[#loc190, #loc187])
#loc280 = loc(fused[#loc191, #loc192])
