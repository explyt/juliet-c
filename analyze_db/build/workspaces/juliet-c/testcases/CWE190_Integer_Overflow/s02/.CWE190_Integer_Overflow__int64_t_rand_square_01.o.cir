!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc71)
  cir.func private @printLongLongLine(!s64i) loc(#loc72)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_square_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc74)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc9)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc75)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc11)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc11)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc11)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc11)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc11)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc11)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc11)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc11)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc11)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc11)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc11)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc11)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc11)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc11)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc11)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc11)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc11)
      cir.yield %29 : !u64i loc(#loc11)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc11)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc11)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc11)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc11)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc11)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc11)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc11)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc11)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc11)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc11)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc11)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc11)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc11)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc11)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc11)
      %30 = cir.unary(minus, %29) : !u64i, !u64i loc(#loc11)
      %31 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc11)
      %33 = cir.binop(sub, %30, %32) : !u64i loc(#loc11)
      cir.yield %33 : !u64i loc(#loc11)
    }) : (!cir.bool) -> !u64i loc(#loc11)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc11)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc76)
    cir.scope {
      %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc78)
      %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc17)
      %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc16)
      %11 = cir.binop(mul, %9, %10) nsw : !s64i loc(#loc17)
      cir.store %11, %8 : !s64i, !cir.ptr<!s64i> loc(#loc78)
      %12 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc18)
      cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc19)
    } loc(#loc77)
    cir.return loc(#loc6)
  } loc(#loc73)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_square_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc80)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc22)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc81)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc24)
    cir.return loc(#loc21)
  } loc(#loc79)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc83)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc30)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc84)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc32)
    %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc32)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc85)
    cir.scope {
      %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc87)
      %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc38)
      %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc37)
      %7 = cir.binop(mul, %5, %6) nsw : !s64i loc(#loc38)
      cir.store %7, %4 : !s64i, !cir.ptr<!s64i> loc(#loc87)
      %8 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc39)
      cir.call @printLongLongLine(%8) : (!s64i) -> () loc(#loc40)
    } loc(#loc86)
    cir.return loc(#loc27)
  } loc(#loc82)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr) loc(#loc88)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc43)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc89)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc46)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc91)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc51)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc92)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc53)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc53)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc53)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc53)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc53)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc53)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc53)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc53)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc53)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc53)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc53)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc53)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc53)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc53)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc53)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc53)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc53)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc53)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc53)
      cir.yield %29 : !u64i loc(#loc53)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc53)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc53)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc53)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc53)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc53)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc53)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc53)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc53)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc53)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc53)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc53)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc53)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc53)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc53)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc53)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc53)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc53)
      %30 = cir.unary(minus, %29) : !u64i, !u64i loc(#loc53)
      %31 = cir.const #cir.int<1> : !s32i loc(#loc53)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc53)
      %33 = cir.binop(sub, %30, %32) : !u64i loc(#loc53)
      cir.yield %33 : !u64i loc(#loc53)
    }) : (!cir.bool) -> !u64i loc(#loc53)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc53)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc93)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc57)
      %9 = cir.call @imaxabs(%8) : (!s64i) -> !s64i side_effect(const) extra(#fn_attr) loc(#loc58)
      %10 = cir.cast(int_to_float, %9 : !s64i), !cir.long_double<!cir.f80> loc(#loc58)
      %11 = cir.get_global @sqrtl : !cir.ptr<!cir.func<(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80>>> loc(#loc59)
      %12 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc60)
      %13 = cir.cast(int_to_float, %12 : !s64i), !cir.long_double<!cir.f80> loc(#loc60)
      %14 = cir.call @sqrtl(%13) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc59)
      %15 = cir.cmp(le, %10, %14) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc95)
      cir.if %15 {
        %16 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc97)
        %17 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc67)
        %18 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc66)
        %19 = cir.binop(mul, %17, %18) nsw : !s64i loc(#loc67)
        cir.store %19, %16 : !s64i, !cir.ptr<!s64i> loc(#loc97)
        %20 = cir.load %16 : !cir.ptr<!s64i>, !s64i loc(#loc68)
        cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc69)
      } else {
        %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc46)
        %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc46)
        cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc70)
      } loc(#loc96)
    } loc(#loc94)
    cir.return loc(#loc48)
  } loc(#loc90)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":25:1)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":36:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":27:5)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":27:13)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":28:12)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":28:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":30:21)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":30:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":31:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":35:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":33:9)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":33:33)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":33:26)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":34:27)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":34:9)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":75:1)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":79:1)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":77:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":77:13)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":78:5)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":78:13)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":43:1)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":54:1)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":45:5)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":45:13)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":46:12)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":46:5)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":48:12)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":48:5)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":49:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":53:5)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":51:9)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":51:33)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":51:26)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":52:27)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":52:9)
#loc41 = loc("/usr/include/inttypes.h":351:1)
#loc42 = loc("/usr/include/inttypes.h":351:74)
#loc43 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":71:19)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":57:1)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":73:1)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":59:5)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":59:13)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":60:12)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":60:5)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":62:21)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":62:5)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":64:5)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":72:5)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":64:27)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":64:9)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":64:36)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":64:42)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":64:51)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":65:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":68:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":70:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":66:9)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":66:33)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":66:26)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":67:27)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":67:9)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_square_01.c":71:9)
#loc71 = loc(fused[#loc1, #loc2])
#loc72 = loc(fused[#loc3, #loc4])
#loc73 = loc(fused[#loc5, #loc6])
#loc74 = loc(fused[#loc7, #loc8])
#loc75 = loc(fused[#loc10, #loc9])
#loc76 = loc(fused[#loc12, #loc11])
#loc77 = loc(fused[#loc13, #loc14])
#loc78 = loc(fused[#loc15, #loc16])
#loc79 = loc(fused[#loc20, #loc21])
#loc80 = loc(fused[#loc22, #loc23])
#loc81 = loc(fused[#loc24, #loc25])
#loc82 = loc(fused[#loc26, #loc27])
#loc83 = loc(fused[#loc28, #loc29])
#loc84 = loc(fused[#loc31, #loc30])
#loc85 = loc(fused[#loc33, #loc32])
#loc86 = loc(fused[#loc34, #loc35])
#loc87 = loc(fused[#loc36, #loc37])
#loc88 = loc(fused[#loc41, #loc42])
#loc89 = loc(fused[#loc44, #loc45])
#loc90 = loc(fused[#loc47, #loc48])
#loc91 = loc(fused[#loc49, #loc50])
#loc92 = loc(fused[#loc52, #loc51])
#loc93 = loc(fused[#loc54, #loc53])
#loc94 = loc(fused[#loc55, #loc56])
#loc95 = loc(fused[#loc58, #loc61])
#loc96 = loc(fused[#loc62, #loc63, #loc64, #loc56])
#loc97 = loc(fused[#loc65, #loc66])
