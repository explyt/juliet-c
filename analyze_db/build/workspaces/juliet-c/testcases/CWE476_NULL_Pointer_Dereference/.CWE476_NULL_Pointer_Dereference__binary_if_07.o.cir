!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty__twoIntsStruct = !cir.record<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE476_NULL_Pointer_Dereference/CWE476_NULL_Pointer_Dereference__binary_if_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc84)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc85)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"intOne == 5\00" : !cir.array<!s8i x 12>> : !cir.array<!s8i x 12> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE476_NULL_Pointer_Dereference__binary_if_07_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc84)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc11)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc88)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["twoIntsStructPointer", init] {alignment = 8 : i64} loc(#loc91)
          %5 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc16)
          cir.store %5, %4 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc91)
          cir.scope {
            %6 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc19)
            %7 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc20)
            %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc20)
            %9 = cir.cmp(ne, %6, %8) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc93)
            %10 = cir.cast(bool_to_int, %9 : !cir.bool), !s32i loc(#loc93)
            %11 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc21)
            %12 = cir.get_member %11[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc22)
            %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc23)
            %14 = cir.const #cir.int<5> : !s32i loc(#loc24)
            %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc94)
            %16 = cir.cast(bool_to_int, %15 : !cir.bool), !s32i loc(#loc94)
            %17 = cir.binop(and, %10, %16) : !s32i loc(#loc95)
            %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc27)
            cir.if %18 {
              %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 12>> loc(#loc5)
              %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 12>>), !cir.ptr<!s8i> loc(#loc5)
              cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc29)
            } loc(#loc96)
          } loc(#loc92)
        } loc(#loc90)
      } loc(#loc89)
    } loc(#loc87)
    cir.return loc(#loc7)
  } loc(#loc86)
  cir.func no_proto @CWE476_NULL_Pointer_Dereference__binary_if_07_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc98)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc99)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc97)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc36)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc84)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc41)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc42)
      %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc102)
      cir.if %3 {
        %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc36)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc36)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc46)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["twoIntsStructPointer", init] {alignment = 8 : i64} loc(#loc105)
          %5 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc50)
          cir.store %5, %4 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc105)
          cir.scope {
            %6 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc53)
            %7 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc54)
            %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc54)
            %9 = cir.cmp(ne, %6, %8) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc107)
            %10 = cir.ternary(%9, true {
              %11 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc56)
              %12 = cir.get_member %11[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc22)
              %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc57)
              %14 = cir.const #cir.int<5> : !s32i loc(#loc58)
              %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc108)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc55)
                cir.yield %17 : !cir.bool loc(#loc55)
              }, false {
                %17 = cir.const #false loc(#loc55)
                cir.yield %17 : !cir.bool loc(#loc55)
              }) : (!cir.bool) -> !cir.bool loc(#loc55)
              cir.yield %16 : !cir.bool loc(#loc55)
            }, false {
              %11 = cir.const #false loc(#loc55)
              cir.yield %11 : !cir.bool loc(#loc55)
            }) : (!cir.bool) -> !cir.bool loc(#loc55)
            cir.if %10 {
              %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 12>> loc(#loc60)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 12>>), !cir.ptr<!s8i> loc(#loc60)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc61)
            } loc(#loc109)
          } loc(#loc106)
        } loc(#loc104)
      } loc(#loc103)
    } loc(#loc101)
    cir.return loc(#loc38)
  } loc(#loc100)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc84)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc67)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc112)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["twoIntsStructPointer", init] {alignment = 8 : i64} loc(#loc115)
          %5 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc72)
          cir.store %5, %4 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc115)
          cir.scope {
            %6 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc75)
            %7 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc76)
            %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc76)
            %9 = cir.cmp(ne, %6, %8) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc117)
            %10 = cir.ternary(%9, true {
              %11 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc78)
              %12 = cir.get_member %11[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc22)
              %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc79)
              %14 = cir.const #cir.int<5> : !s32i loc(#loc80)
              %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc118)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc77)
                cir.yield %17 : !cir.bool loc(#loc77)
              }, false {
                %17 = cir.const #false loc(#loc77)
                cir.yield %17 : !cir.bool loc(#loc77)
              }) : (!cir.bool) -> !cir.bool loc(#loc77)
              cir.yield %16 : !cir.bool loc(#loc77)
            }, false {
              %11 = cir.const #false loc(#loc77)
              cir.yield %11 : !cir.bool loc(#loc77)
            }) : (!cir.bool) -> !cir.bool loc(#loc77)
            cir.if %10 {
              %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 12>> loc(#loc82)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 12>>), !cir.ptr<!s8i> loc(#loc82)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc83)
            } loc(#loc119)
          } loc(#loc116)
        } loc(#loc114)
      } loc(#loc113)
    } loc(#loc111)
    cir.return loc(#loc63)
  } loc(#loc110)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE476_NULL_Pointer_Dereference/CWE476_NULL_Pointer_Dereference__binary_if_07.c":0:0)
#loc1 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":21:1)
#loc2 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":21:25)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":35:27)
#loc6 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":25:1)
#loc7 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":39:1)
#loc8 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":27:5)
#loc9 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":38:5)
#loc10 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":27:8)
#loc11 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":27:20)
#loc12 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":28:5)
#loc13 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":29:9)
#loc14 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":37:9)
#loc15 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":30:13)
#loc16 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":30:51)
#loc17 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":33:13)
#loc18 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":36:13)
#loc19 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":33:18)
#loc20 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":33:42)
#loc21 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":33:51)
#loc22 = loc("../../testcasesupport/std_testcase.h":98:9)
#loc23 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":33:73)
#loc24 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":33:83)
#loc25 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":33:17)
#loc26 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":33:84)
#loc27 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":33:48)
#loc28 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":34:13)
#loc29 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":35:17)
#loc30 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":84:1)
#loc31 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":88:1)
#loc32 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":86:5)
#loc33 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":86:11)
#loc34 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":87:5)
#loc35 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":87:11)
#loc36 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":51:19)
#loc37 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":46:1)
#loc38 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":65:1)
#loc39 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":48:5)
#loc40 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":64:5)
#loc41 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":48:8)
#loc42 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":48:20)
#loc43 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":49:5)
#loc44 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":52:5)
#loc45 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":54:5)
#loc46 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":51:9)
#loc47 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":55:9)
#loc48 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":63:9)
#loc49 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":56:13)
#loc50 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":56:51)
#loc51 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":59:13)
#loc52 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":62:13)
#loc53 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":59:18)
#loc54 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":59:42)
#loc55 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":59:48)
#loc56 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":59:52)
#loc57 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":59:74)
#loc58 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":59:84)
#loc59 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":60:13)
#loc60 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":61:27)
#loc61 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":61:17)
#loc62 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":68:1)
#loc63 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":82:1)
#loc64 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":70:5)
#loc65 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":81:5)
#loc66 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":70:8)
#loc67 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":70:20)
#loc68 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":71:5)
#loc69 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":72:9)
#loc70 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":80:9)
#loc71 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":73:13)
#loc72 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":73:51)
#loc73 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":76:13)
#loc74 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":79:13)
#loc75 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":76:18)
#loc76 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":76:42)
#loc77 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":76:48)
#loc78 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":76:52)
#loc79 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":76:74)
#loc80 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":76:84)
#loc81 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":77:13)
#loc82 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":78:27)
#loc83 = loc("CWE476_NULL_Pointer_Dereference__binary_if_07.c":78:17)
#loc84 = loc(fused[#loc1, #loc2])
#loc85 = loc(fused[#loc3, #loc4])
#loc86 = loc(fused[#loc6, #loc7])
#loc87 = loc(fused[#loc8, #loc9])
#loc88 = loc(fused[#loc10, #loc11])
#loc89 = loc(fused[#loc12, #loc9])
#loc90 = loc(fused[#loc13, #loc14])
#loc91 = loc(fused[#loc15, #loc16])
#loc92 = loc(fused[#loc17, #loc18])
#loc93 = loc(fused[#loc19, #loc20])
#loc94 = loc(fused[#loc21, #loc24])
#loc95 = loc(fused[#loc25, #loc26])
#loc96 = loc(fused[#loc28, #loc18])
#loc97 = loc(fused[#loc30, #loc31])
#loc98 = loc(fused[#loc32, #loc33])
#loc99 = loc(fused[#loc34, #loc35])
#loc100 = loc(fused[#loc37, #loc38])
#loc101 = loc(fused[#loc39, #loc40])
#loc102 = loc(fused[#loc41, #loc42])
#loc103 = loc(fused[#loc43, #loc44, #loc45, #loc40])
#loc104 = loc(fused[#loc47, #loc48])
#loc105 = loc(fused[#loc49, #loc50])
#loc106 = loc(fused[#loc51, #loc52])
#loc107 = loc(fused[#loc53, #loc54])
#loc108 = loc(fused[#loc56, #loc58])
#loc109 = loc(fused[#loc59, #loc52])
#loc110 = loc(fused[#loc62, #loc63])
#loc111 = loc(fused[#loc64, #loc65])
#loc112 = loc(fused[#loc66, #loc67])
#loc113 = loc(fused[#loc68, #loc65])
#loc114 = loc(fused[#loc69, #loc70])
#loc115 = loc(fused[#loc71, #loc72])
#loc116 = loc(fused[#loc73, #loc74])
#loc117 = loc(fused[#loc75, #loc76])
#loc118 = loc(fused[#loc78, #loc80])
#loc119 = loc(fused[#loc81, #loc74])
