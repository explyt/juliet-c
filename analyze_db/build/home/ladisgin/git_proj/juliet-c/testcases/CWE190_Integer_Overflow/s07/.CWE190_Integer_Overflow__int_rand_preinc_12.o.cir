!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc27 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":30:16)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":77:16)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":82:16)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int_rand_preinc_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc156)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc157)
  cir.func private @printIntLine(!s32i) loc(#loc158)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc159)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_preinc_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc161)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc162)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc163)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc18)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    cir.br ^bb1 loc(#loc165)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc166)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc166)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc22)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc22)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc167)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %10 = cir.binop(and, %8, %9) : !s32i loc(#loc27)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc27)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc27)
  ^bb3:  // pred: ^bb2
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc27)
    %14 = cir.const #cir.int<30> : !s32i loc(#loc27)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc27)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc27)
    %18 = cir.const #cir.int<15> : !s32i loc(#loc27)
    %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc27)
    %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc27)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc27)
    %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc27)
    cir.br ^bb5(%23 : !u32i) loc(#loc27)
  ^bb4:  // pred: ^bb2
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc27)
    %26 = cir.const #cir.int<30> : !s32i loc(#loc27)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc27)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc27)
    %30 = cir.const #cir.int<15> : !s32i loc(#loc27)
    %31 = cir.shift(left, %29 : !u32i, %30 : !s32i) -> !u32i loc(#loc27)
    %32 = cir.binop(xor, %27, %31) : !u32i loc(#loc27)
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc27)
    %35 = cir.binop(xor, %32, %34) : !u32i loc(#loc27)
    %36 = cir.unary(minus, %35) : !u32i, !u32i loc(#loc27)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc27)
    %39 = cir.binop(sub, %36, %38) : !u32i loc(#loc27)
    cir.br ^bb5(%39 : !u32i) loc(#loc27)
  ^bb5(%40: !u32i loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":30:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc27)
  ^bb6:  // pred: ^bb5
    %41 = cir.cast(integral, %40 : !u32i), !s32i loc(#loc27)
    cir.store %41, %2 : !s32i, !cir.ptr<!s32i> loc(#loc168)
    cir.br ^bb8 loc(#loc25)
  ^bb7:  // pred: ^bb1
    %42 = cir.const #cir.int<2> : !s32i loc(#loc29)
    cir.store %42, %2 : !s32i, !cir.ptr<!s32i> loc(#loc169)
    cir.br ^bb8 loc(#loc21)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc21)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc170)
  ^bb10:  // pred: ^bb9
    %43 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc171)
    %44 = cir.cast(bitcast, %43 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc171)
    %45 = cir.call %44() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc33)
    %46 = cir.cast(int_to_bool, %45 : !s32i), !cir.bool loc(#loc33)
    cir.brcond %46 ^bb11, ^bb14 loc(#loc172)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc173)
  ^bb12:  // pred: ^bb11
    %47 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc40)
    %48 = cir.unary(inc, %47) : !s32i, !s32i loc(#loc40)
    cir.store %48, %2 : !s32i, !cir.ptr<!s32i> loc(#loc174)
    %49 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc13)
    cir.store %49, %0 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    %50 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc42)
    cir.call @printIntLine(%50) : (!s32i) -> () loc(#loc43)
    cir.br ^bb13 loc(#loc39)
  ^bb13:  // pred: ^bb12
    cir.br ^bb20 loc(#loc36)
  ^bb14:  // pred: ^bb10
    cir.br ^bb15 loc(#loc175)
  ^bb15:  // pred: ^bb14
    %51 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc46)
    %52 = cir.const #cir.int<2147483647> : !s32i loc(#loc47)
    %53 = cir.cmp(lt, %51, %52) : !s32i, !cir.bool loc(#loc176)
    cir.brcond %53 ^bb16, ^bb17 loc(#loc177)
  ^bb16:  // pred: ^bb15
    %54 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    %55 = cir.unary(inc, %54) : !s32i, !s32i loc(#loc51)
    cir.store %55, %2 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    %56 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc15)
    cir.store %56, %1 : !s32i, !cir.ptr<!s32i> loc(#loc162)
    %57 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    cir.call @printIntLine(%57) : (!s32i) -> () loc(#loc54)
    cir.br ^bb18 loc(#loc49)
  ^bb17:  // pred: ^bb15
    %58 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc9)
    %59 = cir.cast(array_to_ptrdecay, %58 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%59) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    cir.br ^bb18 loc(#loc45)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc45)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc32)
  ^bb20:  // 2 preds: ^bb13, ^bb19
    cir.br ^bb21 loc(#loc32)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc11)
  } loc(#loc160)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_preinc_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc180)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc181)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc60)
    cir.return loc(#loc57)
  } loc(#loc179)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc183)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc184)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc185)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc70)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc186)
    cir.br ^bb1 loc(#loc187)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc188)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc188)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc74)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc74)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc189)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %10 = cir.binop(and, %8, %9) : !s32i loc(#loc79)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc79)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc79)
  ^bb3:  // pred: ^bb2
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc79)
    %14 = cir.const #cir.int<30> : !s32i loc(#loc79)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc79)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc79)
    %18 = cir.const #cir.int<15> : !s32i loc(#loc79)
    %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc79)
    %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc79)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc79)
    %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc79)
    cir.br ^bb5(%23 : !u32i) loc(#loc79)
  ^bb4:  // pred: ^bb2
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc79)
    %26 = cir.const #cir.int<30> : !s32i loc(#loc79)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc79)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc79)
    %30 = cir.const #cir.int<15> : !s32i loc(#loc79)
    %31 = cir.shift(left, %29 : !u32i, %30 : !s32i) -> !u32i loc(#loc79)
    %32 = cir.binop(xor, %27, %31) : !u32i loc(#loc79)
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc79)
    %35 = cir.binop(xor, %32, %34) : !u32i loc(#loc79)
    %36 = cir.unary(minus, %35) : !u32i, !u32i loc(#loc79)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc79)
    %39 = cir.binop(sub, %36, %38) : !u32i loc(#loc79)
    cir.br ^bb5(%39 : !u32i) loc(#loc79)
  ^bb5(%40: !u32i loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":77:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc79)
  ^bb6:  // pred: ^bb5
    %41 = cir.cast(integral, %40 : !u32i), !s32i loc(#loc79)
    cir.store %41, %2 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    cir.br ^bb12 loc(#loc77)
  ^bb7:  // pred: ^bb1
    %42 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %43 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %44 = cir.binop(and, %42, %43) : !s32i loc(#loc81)
    %45 = cir.cast(int_to_bool, %44 : !s32i), !cir.bool loc(#loc81)
    cir.brcond %45 ^bb8, ^bb9 loc(#loc81)
  ^bb8:  // pred: ^bb7
    %46 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %47 = cir.cast(integral, %46 : !s32i), !u32i loc(#loc81)
    %48 = cir.const #cir.int<30> : !s32i loc(#loc81)
    %49 = cir.shift(left, %47 : !u32i, %48 : !s32i) -> !u32i loc(#loc81)
    %50 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %51 = cir.cast(integral, %50 : !s32i), !u32i loc(#loc81)
    %52 = cir.const #cir.int<15> : !s32i loc(#loc81)
    %53 = cir.shift(left, %51 : !u32i, %52 : !s32i) -> !u32i loc(#loc81)
    %54 = cir.binop(xor, %49, %53) : !u32i loc(#loc81)
    %55 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %56 = cir.cast(integral, %55 : !s32i), !u32i loc(#loc81)
    %57 = cir.binop(xor, %54, %56) : !u32i loc(#loc81)
    cir.br ^bb10(%57 : !u32i) loc(#loc81)
  ^bb9:  // pred: ^bb7
    %58 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %59 = cir.cast(integral, %58 : !s32i), !u32i loc(#loc81)
    %60 = cir.const #cir.int<30> : !s32i loc(#loc81)
    %61 = cir.shift(left, %59 : !u32i, %60 : !s32i) -> !u32i loc(#loc81)
    %62 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %63 = cir.cast(integral, %62 : !s32i), !u32i loc(#loc81)
    %64 = cir.const #cir.int<15> : !s32i loc(#loc81)
    %65 = cir.shift(left, %63 : !u32i, %64 : !s32i) -> !u32i loc(#loc81)
    %66 = cir.binop(xor, %61, %65) : !u32i loc(#loc81)
    %67 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %68 = cir.cast(integral, %67 : !s32i), !u32i loc(#loc81)
    %69 = cir.binop(xor, %66, %68) : !u32i loc(#loc81)
    %70 = cir.unary(minus, %69) : !u32i, !u32i loc(#loc81)
    %71 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %72 = cir.cast(integral, %71 : !s32i), !u32i loc(#loc81)
    %73 = cir.binop(sub, %70, %72) : !u32i loc(#loc81)
    cir.br ^bb10(%73 : !u32i) loc(#loc81)
  ^bb10(%74: !u32i loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":82:16)):  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc81)
  ^bb11:  // pred: ^bb10
    %75 = cir.cast(integral, %74 : !u32i), !s32i loc(#loc81)
    cir.store %75, %2 : !s32i, !cir.ptr<!s32i> loc(#loc191)
    cir.br ^bb12 loc(#loc73)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc73)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc192)
  ^bb14:  // pred: ^bb13
    %76 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc193)
    %77 = cir.cast(bitcast, %76 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc193)
    %78 = cir.call %77() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc85)
    %79 = cir.cast(int_to_bool, %78 : !s32i), !cir.bool loc(#loc85)
    cir.brcond %79 ^bb15, ^bb21 loc(#loc194)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc195)
  ^bb16:  // pred: ^bb15
    %80 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc92)
    %81 = cir.const #cir.int<2147483647> : !s32i loc(#loc93)
    %82 = cir.cmp(lt, %80, %81) : !s32i, !cir.bool loc(#loc196)
    cir.brcond %82 ^bb17, ^bb18 loc(#loc197)
  ^bb17:  // pred: ^bb16
    %83 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc97)
    %84 = cir.unary(inc, %83) : !s32i, !s32i loc(#loc97)
    cir.store %84, %2 : !s32i, !cir.ptr<!s32i> loc(#loc198)
    %85 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc65)
    cir.store %85, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    %86 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc99)
    cir.call @printIntLine(%86) : (!s32i) -> () loc(#loc100)
    cir.br ^bb19 loc(#loc95)
  ^bb18:  // pred: ^bb16
    %87 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc101)
    %88 = cir.cast(array_to_ptrdecay, %87 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc101)
    cir.call @printLine(%88) : (!cir.ptr<!s8i>) -> () loc(#loc102)
    cir.br ^bb19 loc(#loc91)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc91)
  ^bb20:  // pred: ^bb19
    cir.br ^bb27 loc(#loc88)
  ^bb21:  // pred: ^bb14
    cir.br ^bb22 loc(#loc199)
  ^bb22:  // pred: ^bb21
    %89 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc105)
    %90 = cir.const #cir.int<2147483647> : !s32i loc(#loc106)
    %91 = cir.cmp(lt, %89, %90) : !s32i, !cir.bool loc(#loc200)
    cir.brcond %91 ^bb23, ^bb24 loc(#loc201)
  ^bb23:  // pred: ^bb22
    %92 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc110)
    %93 = cir.unary(inc, %92) : !s32i, !s32i loc(#loc110)
    cir.store %93, %2 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    %94 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc67)
    cir.store %94, %1 : !s32i, !cir.ptr<!s32i> loc(#loc184)
    %95 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc112)
    cir.call @printIntLine(%95) : (!s32i) -> () loc(#loc113)
    cir.br ^bb25 loc(#loc108)
  ^bb24:  // pred: ^bb22
    %96 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc114)
    %97 = cir.cast(array_to_ptrdecay, %96 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc114)
    cir.call @printLine(%97) : (!cir.ptr<!s8i>) -> () loc(#loc115)
    cir.br ^bb25 loc(#loc104)
  ^bb25:  // 2 preds: ^bb23, ^bb24
    cir.br ^bb26 loc(#loc104)
  ^bb26:  // pred: ^bb25
    cir.br ^bb27 loc(#loc84)
  ^bb27:  // 2 preds: ^bb20, ^bb26
    cir.br ^bb28 loc(#loc84)
  ^bb28:  // pred: ^bb27
    cir.return loc(#loc63)
  } loc(#loc182)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc204)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc205)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc206)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc124)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    cir.br ^bb1 loc(#loc208)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc209)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc209)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc128)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc128)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc210)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc133)
    cir.store %8, %2 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    cir.br ^bb4 loc(#loc131)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<2> : !s32i loc(#loc135)
    cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    cir.br ^bb4 loc(#loc127)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc127)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc213)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc214)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc214)
    %12 = cir.call %11() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc139)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc139)
    cir.brcond %13 ^bb7, ^bb10 loc(#loc215)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc216)
  ^bb8:  // pred: ^bb7
    %14 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc146)
    %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc146)
    cir.store %15, %2 : !s32i, !cir.ptr<!s32i> loc(#loc217)
    %16 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc119)
    cir.store %16, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc148)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc149)
    cir.br ^bb9 loc(#loc145)
  ^bb9:  // pred: ^bb8
    cir.br ^bb13 loc(#loc142)
  ^bb10:  // pred: ^bb6
    cir.br ^bb11 loc(#loc218)
  ^bb11:  // pred: ^bb10
    %18 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc152)
    %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc152)
    cir.store %19, %2 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    %20 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc121)
    cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc205)
    %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc154)
    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc155)
    cir.br ^bb12 loc(#loc151)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc138)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc138)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc117)
  } loc(#loc203)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int_rand_preinc_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":57:23)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":22:1)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":60:1)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":42:13)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":42:26)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":52:13)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":52:26)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":24:5)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":24:9)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":26:12)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":26:5)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":27:5)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":36:5)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":27:8)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":27:33)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":28:5)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":31:5)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":33:5)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":30:9)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":35:16)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":35:9)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":37:5)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":59:5)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":37:8)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":37:33)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":38:5)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":45:5)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":47:5)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":39:9)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":44:9)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":41:13)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":41:15)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":43:26)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":43:13)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":49:9)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":58:9)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":49:13)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":49:20)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":50:9)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":54:9)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":56:9)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":51:13)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":51:15)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":53:26)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":53:13)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":57:13)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":152:1)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":156:1)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":154:5)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":154:13)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":155:5)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":155:13)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":69:1)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":112:1)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":90:13)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":90:26)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":104:13)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":104:26)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":71:5)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":71:9)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":73:12)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":73:5)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":74:5)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":83:5)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":74:8)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":74:33)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":75:5)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":78:5)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":80:5)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":77:9)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":82:9)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":84:5)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":111:5)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":84:8)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":84:33)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":85:5)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":97:5)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":99:5)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":87:9)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":96:9)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":87:13)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":87:20)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":88:9)
#loc95 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":92:9)
#loc96 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":94:9)
#loc97 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":89:13)
#loc98 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":89:15)
#loc99 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":91:26)
#loc100 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":91:13)
#loc101 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":95:23)
#loc102 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":95:13)
#loc103 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":101:9)
#loc104 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":110:9)
#loc105 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":101:13)
#loc106 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":101:20)
#loc107 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":102:9)
#loc108 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":106:9)
#loc109 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":108:9)
#loc110 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":103:13)
#loc111 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":103:15)
#loc112 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":105:26)
#loc113 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":105:13)
#loc114 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":109:23)
#loc115 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":109:13)
#loc116 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":117:1)
#loc117 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":150:1)
#loc118 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":137:13)
#loc119 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":137:26)
#loc120 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":146:13)
#loc121 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":146:26)
#loc122 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":119:5)
#loc123 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":119:9)
#loc124 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":121:12)
#loc125 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":121:5)
#loc126 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":122:5)
#loc127 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":131:5)
#loc128 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":122:8)
#loc129 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":122:33)
#loc130 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":123:5)
#loc131 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":126:5)
#loc132 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":128:5)
#loc133 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":125:16)
#loc134 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":125:9)
#loc135 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":130:16)
#loc136 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":130:9)
#loc137 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":132:5)
#loc138 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":149:5)
#loc139 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":132:8)
#loc140 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":132:33)
#loc141 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":133:5)
#loc142 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":140:5)
#loc143 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":142:5)
#loc144 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":134:9)
#loc145 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":139:9)
#loc146 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":136:13)
#loc147 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":136:15)
#loc148 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":138:26)
#loc149 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":138:13)
#loc150 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":143:9)
#loc151 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":148:9)
#loc152 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":145:13)
#loc153 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":145:15)
#loc154 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":147:26)
#loc155 = loc("CWE190_Integer_Overflow__int_rand_preinc_12.c":147:13)
#loc156 = loc(fused[#loc1, #loc2])
#loc157 = loc(fused[#loc3, #loc4])
#loc158 = loc(fused[#loc5, #loc6])
#loc159 = loc(fused[#loc7, #loc8])
#loc160 = loc(fused[#loc10, #loc11])
#loc161 = loc(fused[#loc12, #loc13])
#loc162 = loc(fused[#loc14, #loc15])
#loc163 = loc(fused[#loc16, #loc17])
#loc164 = loc(fused[#loc19, #loc18])
#loc165 = loc(fused[#loc20, #loc21])
#loc166 = loc(fused[#loc22, #loc23])
#loc167 = loc(fused[#loc24, #loc25, #loc26, #loc21])
#loc168 = loc(fused[#loc28, #loc27])
#loc169 = loc(fused[#loc30, #loc29])
#loc170 = loc(fused[#loc31, #loc32])
#loc171 = loc(fused[#loc33, #loc34])
#loc172 = loc(fused[#loc35, #loc36, #loc37, #loc32])
#loc173 = loc(fused[#loc38, #loc39])
#loc174 = loc(fused[#loc40, #loc41])
#loc175 = loc(fused[#loc44, #loc45])
#loc176 = loc(fused[#loc46, #loc47])
#loc177 = loc(fused[#loc48, #loc49, #loc50, #loc45])
#loc178 = loc(fused[#loc51, #loc52])
#loc179 = loc(fused[#loc56, #loc57])
#loc180 = loc(fused[#loc58, #loc59])
#loc181 = loc(fused[#loc60, #loc61])
#loc182 = loc(fused[#loc62, #loc63])
#loc183 = loc(fused[#loc64, #loc65])
#loc184 = loc(fused[#loc66, #loc67])
#loc185 = loc(fused[#loc68, #loc69])
#loc186 = loc(fused[#loc71, #loc70])
#loc187 = loc(fused[#loc72, #loc73])
#loc188 = loc(fused[#loc74, #loc75])
#loc189 = loc(fused[#loc76, #loc77, #loc78, #loc73])
#loc190 = loc(fused[#loc80, #loc79])
#loc191 = loc(fused[#loc82, #loc81])
#loc192 = loc(fused[#loc83, #loc84])
#loc193 = loc(fused[#loc85, #loc86])
#loc194 = loc(fused[#loc87, #loc88, #loc89, #loc84])
#loc195 = loc(fused[#loc90, #loc91])
#loc196 = loc(fused[#loc92, #loc93])
#loc197 = loc(fused[#loc94, #loc95, #loc96, #loc91])
#loc198 = loc(fused[#loc97, #loc98])
#loc199 = loc(fused[#loc103, #loc104])
#loc200 = loc(fused[#loc105, #loc106])
#loc201 = loc(fused[#loc107, #loc108, #loc109, #loc104])
#loc202 = loc(fused[#loc110, #loc111])
#loc203 = loc(fused[#loc116, #loc117])
#loc204 = loc(fused[#loc118, #loc119])
#loc205 = loc(fused[#loc120, #loc121])
#loc206 = loc(fused[#loc122, #loc123])
#loc207 = loc(fused[#loc125, #loc124])
#loc208 = loc(fused[#loc126, #loc127])
#loc209 = loc(fused[#loc128, #loc129])
#loc210 = loc(fused[#loc130, #loc131, #loc132, #loc127])
#loc211 = loc(fused[#loc134, #loc133])
#loc212 = loc(fused[#loc136, #loc135])
#loc213 = loc(fused[#loc137, #loc138])
#loc214 = loc(fused[#loc139, #loc140])
#loc215 = loc(fused[#loc141, #loc142, #loc143, #loc138])
#loc216 = loc(fused[#loc144, #loc145])
#loc217 = loc(fused[#loc146, #loc147])
#loc218 = loc(fused[#loc150, #loc151])
#loc219 = loc(fused[#loc152, #loc153])
