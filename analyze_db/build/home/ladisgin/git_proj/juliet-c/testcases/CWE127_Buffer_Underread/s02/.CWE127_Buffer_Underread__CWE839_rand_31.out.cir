!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc21 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":28:12)
#loc54 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":120:10)
#loc55 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":120:14)
#loc56 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":120:20)
#loc57 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":120:32)
#loc117 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":87:12)
#loc127 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":94:27)
#true = #cir.bool<true> : !cir.bool
#loc159 = loc(fused[#loc54, #loc55])
#loc160 = loc(fused[#loc56, #loc57])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_rand_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc138)
  cir.func private @printIntLine(!s32i) loc(#loc139)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc140)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is too big.\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE127_Buffer_Underread__CWE839_rand_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc142)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc143)
    %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc144)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc145)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc19)
    cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc146)
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc21)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %9 ^bb1, ^bb2 loc(#loc21)
  ^bb1:  // pred: ^bb0
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc21)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc21)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc21)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc21)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc21)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc21)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc21)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc21)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc21)
    cir.br ^bb3(%21 : !u32i) loc(#loc21)
  ^bb2:  // pred: ^bb0
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc21)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc21)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc21)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc21)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc21)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc21)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc21)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc21)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc21)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc21)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc21)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc21)
    cir.br ^bb3(%37 : !u32i) loc(#loc21)
  ^bb3(%38: !u32i loc("CWE127_Buffer_Underread__CWE839_rand_31.c":28:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc21)
  ^bb4:  // pred: ^bb3
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc21)
    cir.store %39, %3 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    cir.br ^bb5 loc(#loc148)
  ^bb5:  // pred: ^bb4
    %40 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc11)
    cir.store %40, %0 : !s32i, !cir.ptr<!s32i> loc(#loc142)
    %41 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc13)
    cir.store %41, %1 : !s32i, !cir.ptr<!s32i> loc(#loc143)
    cir.br ^bb6 loc(#loc149)
  ^bb6:  // pred: ^bb5
    %42 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc144)
    cir.store %42, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc144)
    cir.br ^bb7 loc(#loc150)
  ^bb7:  // pred: ^bb6
    %43 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc29)
    %44 = cir.const #cir.int<10> : !s32i loc(#loc30)
    %45 = cir.cmp(lt, %43, %44) : !s32i, !cir.bool loc(#loc151)
    cir.brcond %45 ^bb8, ^bb9 loc(#loc152)
  ^bb8:  // pred: ^bb7
    %46 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc34)
    %47 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc35)
    %48 = cir.ptr_stride(%47 : !cir.ptr<!s32i>, %46 : !s32i), !cir.ptr<!s32i> loc(#loc35)
    %49 = cir.load %48 : !cir.ptr<!s32i>, !s32i loc(#loc35)
    cir.call @printIntLine(%49) : (!s32i) -> () loc(#loc36)
    cir.br ^bb10 loc(#loc32)
  ^bb9:  // pred: ^bb7
    %50 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc7)
    %51 = cir.cast(array_to_ptrdecay, %50 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%51) : (!cir.ptr<!s8i>) -> () loc(#loc37)
    cir.br ^bb10 loc(#loc28)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc28)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc26)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc24)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc9)
  } loc(#loc141)
  cir.func no_proto @CWE127_Buffer_Underread__CWE839_rand_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc154)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc155)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    cir.return loc(#loc39)
  } loc(#loc153)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc156)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc157)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc51)
  cir.func @main(%arg0: !s32i loc(fused[#loc54, #loc55]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc56, #loc57])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc159)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc160)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc53)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc58)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc58)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc59)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc60)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc60)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc61)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc48)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %8 = cir.get_global @CWE127_Buffer_Underread__CWE839_rand_31_good : !cir.ptr<!cir.func<!void ()>> loc(#loc161)
    cir.call @CWE127_Buffer_Underread__CWE839_rand_31_good() : () -> () loc(#loc63)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc49)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc50)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %13 = cir.get_global @CWE127_Buffer_Underread__CWE839_rand_31_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc162)
    cir.call @CWE127_Buffer_Underread__CWE839_rand_31_bad() : () -> () loc(#loc67)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc51)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc70)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc163)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc163)
    cir.return %17 : !s32i loc(#loc163)
  } loc(#loc158)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc165)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc166)
    %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc167)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc168)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc83)
    cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc169)
    %6 = cir.const #cir.int<7> : !s32i loc(#loc85)
    cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc170)
    cir.br ^bb1 loc(#loc171)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc75)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc165)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc77)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    cir.br ^bb2 loc(#loc172)
  ^bb2:  // pred: ^bb1
    %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc167)
    cir.store %9, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc167)
    cir.br ^bb3 loc(#loc173)
  ^bb3:  // pred: ^bb2
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc93)
    %11 = cir.const #cir.int<10> : !s32i loc(#loc94)
    %12 = cir.cmp(lt, %10, %11) : !s32i, !cir.bool loc(#loc174)
    cir.brcond %12 ^bb4, ^bb5 loc(#loc175)
  ^bb4:  // pred: ^bb3
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc98)
    %14 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc99)
    %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc99)
    %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc99)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc100)
    cir.br ^bb6 loc(#loc96)
  ^bb5:  // pred: ^bb3
    %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc101)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc101)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc102)
    cir.br ^bb6 loc(#loc92)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc92)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc90)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc88)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc73)
  } loc(#loc164)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc103)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc177)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc178)
    %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc179)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc180)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc114)
    %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc115)
    cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc181)
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc117)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc117)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc117)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc117)
    cir.brcond %9 ^bb1, ^bb2 loc(#loc117)
  ^bb1:  // pred: ^bb0
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc117)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc117)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc117)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc117)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc117)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc117)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc117)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc117)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc117)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc117)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc117)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc117)
    cir.br ^bb3(%21 : !u32i) loc(#loc117)
  ^bb2:  // pred: ^bb0
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc117)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc117)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc117)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc117)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc117)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc117)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc117)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc117)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc117)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc117)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc117)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc117)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc117)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc117)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc117)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc117)
    cir.br ^bb3(%37 : !u32i) loc(#loc117)
  ^bb3(%38: !u32i loc("CWE127_Buffer_Underread__CWE839_rand_31.c":87:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc117)
  ^bb4:  // pred: ^bb3
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc117)
    cir.store %39, %3 : !s32i, !cir.ptr<!s32i> loc(#loc182)
    cir.br ^bb5 loc(#loc183)
  ^bb5:  // pred: ^bb4
    %40 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc107)
    cir.store %40, %0 : !s32i, !cir.ptr<!s32i> loc(#loc177)
    %41 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc109)
    cir.store %41, %1 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    cir.br ^bb6 loc(#loc184)
  ^bb6:  // pred: ^bb5
    %42 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc179)
    cir.store %42, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc179)
    cir.br ^bb7 loc(#loc185)
  ^bb7:  // pred: ^bb6
    %43 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc125)
    %44 = cir.const #cir.int<0> : !s32i loc(#loc126)
    %45 = cir.cmp(ge, %43, %44) : !s32i, !cir.bool loc(#loc186)
    cir.brcond %45 ^bb8, ^bb13 loc(#loc127)
  ^bb8:  // pred: ^bb7
    %46 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc128)
    %47 = cir.const #cir.int<10> : !s32i loc(#loc129)
    %48 = cir.cmp(lt, %46, %47) : !s32i, !cir.bool loc(#loc187)
    cir.brcond %48 ^bb9, ^bb10 loc(#loc127)
  ^bb9:  // pred: ^bb8
    %49 = cir.const #true loc(#loc127)
    cir.br ^bb11(%49 : !cir.bool) loc(#loc127)
  ^bb10:  // pred: ^bb8
    %50 = cir.const #false loc(#loc127)
    cir.br ^bb11(%50 : !cir.bool) loc(#loc127)
  ^bb11(%51: !cir.bool loc("CWE127_Buffer_Underread__CWE839_rand_31.c":94:27)):  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc127)
  ^bb12:  // pred: ^bb11
    cir.br ^bb14(%51 : !cir.bool) loc(#loc127)
  ^bb13:  // pred: ^bb7
    %52 = cir.const #false loc(#loc127)
    cir.br ^bb14(%52 : !cir.bool) loc(#loc127)
  ^bb14(%53: !cir.bool loc("CWE127_Buffer_Underread__CWE839_rand_31.c":94:27)):  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc127)
  ^bb15:  // pred: ^bb14
    cir.brcond %53 ^bb16, ^bb17 loc(#loc188)
  ^bb16:  // pred: ^bb15
    %54 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc134)
    %55 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc135)
    %56 = cir.ptr_stride(%55 : !cir.ptr<!s32i>, %54 : !s32i), !cir.ptr<!s32i> loc(#loc135)
    %57 = cir.load %56 : !cir.ptr<!s32i>, !s32i loc(#loc135)
    cir.call @printIntLine(%57) : (!s32i) -> () loc(#loc136)
    cir.br ^bb18 loc(#loc132)
  ^bb17:  // pred: ^bb15
    %58 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc103)
    %59 = cir.cast(array_to_ptrdecay, %58 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc103)
    cir.call @printLine(%59) : (!cir.ptr<!s8i>) -> () loc(#loc137)
    cir.br ^bb18 loc(#loc124)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc124)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc122)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc120)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc105)
  } loc(#loc176)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_rand_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":42:27)
#loc8 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":22:1)
#loc9 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":46:1)
#loc10 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":30:9)
#loc11 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":30:24)
#loc12 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":31:9)
#loc13 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":31:20)
#loc14 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":33:13)
#loc15 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":33:34)
#loc16 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":24:5)
#loc17 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":24:9)
#loc18 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":26:13)
#loc19 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":26:12)
#loc20 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":26:5)
#loc22 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":28:5)
#loc23 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":29:5)
#loc24 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":45:5)
#loc25 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":32:9)
#loc26 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":44:9)
#loc27 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":36:13)
#loc28 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":43:13)
#loc29 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":36:17)
#loc30 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":36:24)
#loc31 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":37:13)
#loc32 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":39:13)
#loc33 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":41:13)
#loc34 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":38:37)
#loc35 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":38:30)
#loc36 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":38:17)
#loc37 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":42:17)
#loc38 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":106:1)
#loc39 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":110:1)
#loc40 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":108:5)
#loc41 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":108:13)
#loc42 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":109:5)
#loc43 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":109:13)
#loc44 = loc("/usr/include/stdlib.h":575:1)
#loc45 = loc("/usr/include/stdlib.h":575:41)
#loc46 = loc("/usr/include/time.h":76:1)
#loc47 = loc("/usr/include/time.h":76:38)
#loc48 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":125:15)
#loc49 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":127:15)
#loc50 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":130:15)
#loc51 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":132:15)
#loc52 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":120:1)
#loc53 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":135:1)
#loc58 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":121:1)
#loc59 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":123:27)
#loc60 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":123:22)
#loc61 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":123:5)
#loc62 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":125:5)
#loc63 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":126:5)
#loc64 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":126:50)
#loc65 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":127:5)
#loc66 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":130:5)
#loc67 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":131:5)
#loc68 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":131:49)
#loc69 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":132:5)
#loc70 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":134:12)
#loc71 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":134:5)
#loc72 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":53:1)
#loc73 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":78:1)
#loc74 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":62:9)
#loc75 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":62:24)
#loc76 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":63:9)
#loc77 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":63:20)
#loc78 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":65:13)
#loc79 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":65:34)
#loc80 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":55:5)
#loc81 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":55:9)
#loc82 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":57:13)
#loc83 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":57:12)
#loc84 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":57:5)
#loc85 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":60:12)
#loc86 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":60:5)
#loc87 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":61:5)
#loc88 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":77:5)
#loc89 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":64:9)
#loc90 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":76:9)
#loc91 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":68:13)
#loc92 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":75:13)
#loc93 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":68:17)
#loc94 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":68:24)
#loc95 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":69:13)
#loc96 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":71:13)
#loc97 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":73:13)
#loc98 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":70:37)
#loc99 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":70:30)
#loc100 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":70:17)
#loc101 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":74:27)
#loc102 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":74:17)
#loc103 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":100:27)
#loc104 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":81:1)
#loc105 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":104:1)
#loc106 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":89:9)
#loc107 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":89:24)
#loc108 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":90:9)
#loc109 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":90:20)
#loc110 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":92:13)
#loc111 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":92:34)
#loc112 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":83:5)
#loc113 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":83:9)
#loc114 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":85:13)
#loc115 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":85:12)
#loc116 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":85:5)
#loc118 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":87:5)
#loc119 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":88:5)
#loc120 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":103:5)
#loc121 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":91:9)
#loc122 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":102:9)
#loc123 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":94:13)
#loc124 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":101:13)
#loc125 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":94:17)
#loc126 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":94:25)
#loc128 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":94:30)
#loc129 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":94:38)
#loc130 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":94:40)
#loc131 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":95:13)
#loc132 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":97:13)
#loc133 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":99:13)
#loc134 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":96:37)
#loc135 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":96:30)
#loc136 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":96:17)
#loc137 = loc("CWE127_Buffer_Underread__CWE839_rand_31.c":100:17)
#loc138 = loc(fused[#loc1, #loc2])
#loc139 = loc(fused[#loc3, #loc4])
#loc140 = loc(fused[#loc5, #loc6])
#loc141 = loc(fused[#loc8, #loc9])
#loc142 = loc(fused[#loc10, #loc11])
#loc143 = loc(fused[#loc12, #loc13])
#loc144 = loc(fused[#loc14, #loc15])
#loc145 = loc(fused[#loc16, #loc17])
#loc146 = loc(fused[#loc20, #loc18])
#loc147 = loc(fused[#loc22, #loc21])
#loc148 = loc(fused[#loc23, #loc24])
#loc149 = loc(fused[#loc25, #loc26])
#loc150 = loc(fused[#loc27, #loc28])
#loc151 = loc(fused[#loc29, #loc30])
#loc152 = loc(fused[#loc31, #loc32, #loc33, #loc28])
#loc153 = loc(fused[#loc38, #loc39])
#loc154 = loc(fused[#loc40, #loc41])
#loc155 = loc(fused[#loc42, #loc43])
#loc156 = loc(fused[#loc44, #loc45])
#loc157 = loc(fused[#loc46, #loc47])
#loc158 = loc(fused[#loc52, #loc53])
#loc161 = loc(fused[#loc63, #loc64])
#loc162 = loc(fused[#loc67, #loc68])
#loc163 = loc(fused[#loc71, #loc70])
#loc164 = loc(fused[#loc72, #loc73])
#loc165 = loc(fused[#loc74, #loc75])
#loc166 = loc(fused[#loc76, #loc77])
#loc167 = loc(fused[#loc78, #loc79])
#loc168 = loc(fused[#loc80, #loc81])
#loc169 = loc(fused[#loc84, #loc82])
#loc170 = loc(fused[#loc86, #loc85])
#loc171 = loc(fused[#loc87, #loc88])
#loc172 = loc(fused[#loc89, #loc90])
#loc173 = loc(fused[#loc91, #loc92])
#loc174 = loc(fused[#loc93, #loc94])
#loc175 = loc(fused[#loc95, #loc96, #loc97, #loc92])
#loc176 = loc(fused[#loc104, #loc105])
#loc177 = loc(fused[#loc106, #loc107])
#loc178 = loc(fused[#loc108, #loc109])
#loc179 = loc(fused[#loc110, #loc111])
#loc180 = loc(fused[#loc112, #loc113])
#loc181 = loc(fused[#loc116, #loc114])
#loc182 = loc(fused[#loc118, #loc117])
#loc183 = loc(fused[#loc119, #loc120])
#loc184 = loc(fused[#loc121, #loc122])
#loc185 = loc(fused[#loc123, #loc124])
#loc186 = loc(fused[#loc125, #loc126])
#loc187 = loc(fused[#loc128, #loc130])
#loc188 = loc(fused[#loc131, #loc132, #loc133, #loc124])
