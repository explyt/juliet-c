!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fscanf_divide_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc158)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc159)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc160)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fscanf_divide_06_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc162)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc163)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc17)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc18)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc165)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc20)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc159)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc21)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc20)
      } loc(#loc166)
    } loc(#loc164)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc24)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc25)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc168)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc27)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
        %8 = cir.binop(div, %6, %7) : !s32i loc(#loc170)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc29)
      } loc(#loc169)
    } loc(#loc167)
    cir.return loc(#loc9)
  } loc(#loc161)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fscanf_divide_06_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc172)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc173)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc174)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc175)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    cir.return loc(#loc31)
  } loc(#loc171)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc176)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc43)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc178)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc48)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc49)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc179)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc53)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc54)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc181)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc56)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc159)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc57)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc58)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc58)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc56)
      } loc(#loc182)
    } loc(#loc180)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc61)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc62)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc184)
      cir.if %5 {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc42)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc42)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc66)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc70)
          %8 = cir.cmp(ne, %6, %7) : !s32i, !cir.bool loc(#loc187)
          cir.if %8 {
            %9 = cir.const #cir.int<100> : !s32i loc(#loc74)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
            %11 = cir.binop(div, %9, %10) : !s32i loc(#loc189)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc76)
          } else {
            %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc43)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc43)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc77)
          } loc(#loc188)
        } loc(#loc186)
      } loc(#loc185)
    } loc(#loc183)
    cir.return loc(#loc45)
  } loc(#loc177)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc191)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc83)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc87)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc88)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc194)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc90)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc159)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc91)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc92)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc92)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc90)
      } loc(#loc195)
    } loc(#loc193)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc95)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc96)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc197)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc101)
          %8 = cir.cmp(ne, %6, %7) : !s32i, !cir.bool loc(#loc200)
          cir.if %8 {
            %9 = cir.const #cir.int<100> : !s32i loc(#loc105)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc106)
            %11 = cir.binop(div, %9, %10) : !s32i loc(#loc202)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc107)
          } else {
            %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc108)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc108)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc109)
          } loc(#loc201)
        } loc(#loc199)
      } loc(#loc198)
    } loc(#loc196)
    cir.return loc(#loc79)
  } loc(#loc190)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc204)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc114)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc115)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc205)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc119)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc120)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc207)
      cir.if %5 {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc124)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc124)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc125)
      } else {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc126)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc209)
      } loc(#loc208)
    } loc(#loc206)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc130)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc131)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc211)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc133)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc134)
        %8 = cir.binop(div, %6, %7) : !s32i loc(#loc213)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc135)
      } loc(#loc212)
    } loc(#loc210)
    cir.return loc(#loc111)
  } loc(#loc203)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc215)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc140)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc141)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc216)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc145)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc146)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc218)
      cir.if %5 {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc148)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc220)
      } loc(#loc219)
    } loc(#loc217)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc152)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc153)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc222)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc155)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc156)
        %8 = cir.binop(div, %6, %7) : !s32i loc(#loc224)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc157)
      } loc(#loc223)
    } loc(#loc221)
    cir.return loc(#loc137)
  } loc(#loc214)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fscanf_divide_06.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":35:23)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":27:1)
#loc9 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":42:1)
#loc10 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":29:5)
#loc11 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":29:9)
#loc12 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":31:13)
#loc13 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":31:12)
#loc14 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":31:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":32:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":36:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":32:8)
#loc18 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":32:27)
#loc19 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":33:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":35:9)
#loc21 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":35:16)
#loc22 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":37:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":41:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":37:8)
#loc25 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":37:27)
#loc26 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":38:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":40:22)
#loc28 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":40:28)
#loc29 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":40:9)
#loc30 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":144:1)
#loc31 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":150:1)
#loc32 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":146:5)
#loc33 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":146:14)
#loc34 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":147:5)
#loc35 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":147:14)
#loc36 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":148:5)
#loc37 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":148:14)
#loc38 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":149:5)
#loc39 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":149:14)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc42 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":62:19)
#loc43 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":73:23)
#loc44 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":49:1)
#loc45 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":76:1)
#loc46 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":51:5)
#loc47 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":51:9)
#loc48 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":53:13)
#loc49 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":53:12)
#loc50 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":53:5)
#loc51 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":54:5)
#loc52 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":58:5)
#loc53 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":54:8)
#loc54 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":54:27)
#loc55 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":55:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":57:9)
#loc57 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":57:16)
#loc58 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":57:23)
#loc59 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":59:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":75:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":59:8)
#loc62 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":59:27)
#loc63 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":60:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":63:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":65:5)
#loc66 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":62:9)
#loc67 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":67:9)
#loc68 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":74:9)
#loc69 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":67:13)
#loc70 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":67:21)
#loc71 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":68:9)
#loc72 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":70:9)
#loc73 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":72:9)
#loc74 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":69:26)
#loc75 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":69:32)
#loc76 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":69:13)
#loc77 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":73:13)
#loc78 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":79:1)
#loc79 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":101:1)
#loc80 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":81:5)
#loc81 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":81:9)
#loc82 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":83:13)
#loc83 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":83:12)
#loc84 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":83:5)
#loc85 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":84:5)
#loc86 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":88:5)
#loc87 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":84:8)
#loc88 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":84:27)
#loc89 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":85:5)
#loc90 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":87:9)
#loc91 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":87:16)
#loc92 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":87:23)
#loc93 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":89:5)
#loc94 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":100:5)
#loc95 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":89:8)
#loc96 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":89:27)
#loc97 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":90:5)
#loc98 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":92:9)
#loc99 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":99:9)
#loc100 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":92:13)
#loc101 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":92:21)
#loc102 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":93:9)
#loc103 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":95:9)
#loc104 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":97:9)
#loc105 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":94:26)
#loc106 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":94:32)
#loc107 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":94:13)
#loc108 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":98:23)
#loc109 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":98:13)
#loc110 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":104:1)
#loc111 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":124:1)
#loc112 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":106:5)
#loc113 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":106:9)
#loc114 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":108:13)
#loc115 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":108:12)
#loc116 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":108:5)
#loc117 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":109:5)
#loc118 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":118:5)
#loc119 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":109:8)
#loc120 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":109:27)
#loc121 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":110:5)
#loc122 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":113:5)
#loc123 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":115:5)
#loc124 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":112:19)
#loc125 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":112:9)
#loc126 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":117:16)
#loc127 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":117:9)
#loc128 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":119:5)
#loc129 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":123:5)
#loc130 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":119:8)
#loc131 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":119:27)
#loc132 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":120:5)
#loc133 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":122:22)
#loc134 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":122:28)
#loc135 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":122:9)
#loc136 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":127:1)
#loc137 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":142:1)
#loc138 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":129:5)
#loc139 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":129:9)
#loc140 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":131:13)
#loc141 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":131:12)
#loc142 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":131:5)
#loc143 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":132:5)
#loc144 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":136:5)
#loc145 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":132:8)
#loc146 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":132:27)
#loc147 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":133:5)
#loc148 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":135:16)
#loc149 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":135:9)
#loc150 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":137:5)
#loc151 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":141:5)
#loc152 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":137:8)
#loc153 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":137:27)
#loc154 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":138:5)
#loc155 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":140:22)
#loc156 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":140:28)
#loc157 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_06.c":140:9)
#loc158 = loc(fused[#loc1, #loc2])
#loc159 = loc(fused[#loc3, #loc4])
#loc160 = loc(fused[#loc6, #loc7])
#loc161 = loc(fused[#loc8, #loc9])
#loc162 = loc(fused[#loc10, #loc11])
#loc163 = loc(fused[#loc14, #loc12])
#loc164 = loc(fused[#loc15, #loc16])
#loc165 = loc(fused[#loc17, #loc18])
#loc166 = loc(fused[#loc19, #loc16])
#loc167 = loc(fused[#loc22, #loc23])
#loc168 = loc(fused[#loc24, #loc25])
#loc169 = loc(fused[#loc26, #loc23])
#loc170 = loc(fused[#loc27, #loc28])
#loc171 = loc(fused[#loc30, #loc31])
#loc172 = loc(fused[#loc32, #loc33])
#loc173 = loc(fused[#loc34, #loc35])
#loc174 = loc(fused[#loc36, #loc37])
#loc175 = loc(fused[#loc38, #loc39])
#loc176 = loc(fused[#loc40, #loc41])
#loc177 = loc(fused[#loc44, #loc45])
#loc178 = loc(fused[#loc46, #loc47])
#loc179 = loc(fused[#loc50, #loc48])
#loc180 = loc(fused[#loc51, #loc52])
#loc181 = loc(fused[#loc53, #loc54])
#loc182 = loc(fused[#loc55, #loc52])
#loc183 = loc(fused[#loc59, #loc60])
#loc184 = loc(fused[#loc61, #loc62])
#loc185 = loc(fused[#loc63, #loc64, #loc65, #loc60])
#loc186 = loc(fused[#loc67, #loc68])
#loc187 = loc(fused[#loc69, #loc70])
#loc188 = loc(fused[#loc71, #loc72, #loc73, #loc68])
#loc189 = loc(fused[#loc74, #loc75])
#loc190 = loc(fused[#loc78, #loc79])
#loc191 = loc(fused[#loc80, #loc81])
#loc192 = loc(fused[#loc84, #loc82])
#loc193 = loc(fused[#loc85, #loc86])
#loc194 = loc(fused[#loc87, #loc88])
#loc195 = loc(fused[#loc89, #loc86])
#loc196 = loc(fused[#loc93, #loc94])
#loc197 = loc(fused[#loc95, #loc96])
#loc198 = loc(fused[#loc97, #loc94])
#loc199 = loc(fused[#loc98, #loc99])
#loc200 = loc(fused[#loc100, #loc101])
#loc201 = loc(fused[#loc102, #loc103, #loc104, #loc99])
#loc202 = loc(fused[#loc105, #loc106])
#loc203 = loc(fused[#loc110, #loc111])
#loc204 = loc(fused[#loc112, #loc113])
#loc205 = loc(fused[#loc116, #loc114])
#loc206 = loc(fused[#loc117, #loc118])
#loc207 = loc(fused[#loc119, #loc120])
#loc208 = loc(fused[#loc121, #loc122, #loc123, #loc118])
#loc209 = loc(fused[#loc127, #loc126])
#loc210 = loc(fused[#loc128, #loc129])
#loc211 = loc(fused[#loc130, #loc131])
#loc212 = loc(fused[#loc132, #loc129])
#loc213 = loc(fused[#loc133, #loc134])
#loc214 = loc(fused[#loc136, #loc137])
#loc215 = loc(fused[#loc138, #loc139])
#loc216 = loc(fused[#loc142, #loc140])
#loc217 = loc(fused[#loc143, #loc144])
#loc218 = loc(fused[#loc145, #loc146])
#loc219 = loc(fused[#loc147, #loc144])
#loc220 = loc(fused[#loc149, #loc148])
#loc221 = loc(fused[#loc150, #loc151])
#loc222 = loc(fused[#loc152, #loc153])
#loc223 = loc(fused[#loc154, #loc151])
#loc224 = loc(fused[#loc155, #loc156])
