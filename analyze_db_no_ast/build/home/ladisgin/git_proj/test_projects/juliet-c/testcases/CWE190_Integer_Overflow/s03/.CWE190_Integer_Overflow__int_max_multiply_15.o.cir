!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_multiply_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc204)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc3)
  cir.func private  @printIntLine(!s32i) loc(#loc205)
  cir.func no_proto  @CWE190_Integer_Overflow__int_max_multiply_15_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc207)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc10)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc208)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc14)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc15)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc210)
        cir.break loc(#loc17)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc3)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc3)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc18)
        cir.break loc(#loc19)
      }
      ] loc(#loc12)
    } loc(#loc209)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc22)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc26)
          %5 = cir.cmp(gt, %3, %4) : !s32i, !s32i loc(#loc213)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc27)
          cir.if %6 {
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc215)
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
            %9 = cir.const #cir.int<2> : !s32i loc(#loc30)
            %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc31)
            cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc215)
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc32)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc33)
          } loc(#loc214)
        } loc(#loc212)
        cir.break loc(#loc34)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc35)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc35)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc36)
        cir.break loc(#loc37)
      }
      ] loc(#loc20)
    } loc(#loc211)
    cir.return loc(#loc7)
  } loc(#loc206)
  cir.func no_proto  @CWE190_Integer_Overflow__int_max_multiply_15_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc217)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc219)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc220)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    cir.return loc(#loc39)
  } loc(#loc216)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc48)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc222)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc53)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc223)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc57)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc58)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc225)
        cir.break loc(#loc60)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc61)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc61)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc62)
        cir.break loc(#loc63)
      }
      ] loc(#loc55)
    } loc(#loc224)
    cir.scope {
      %2 = cir.const #cir.int<8> : !s32i loc(#loc66)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc67)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc67)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc68)
        cir.break loc(#loc69)
      },
      case (default) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc73)
          %5 = cir.cmp(gt, %3, %4) : !s32i, !s32i loc(#loc228)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc74)
          cir.if %6 {
            cir.scope {
              %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc78)
              %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc79)
              %9 = cir.const #cir.int<2> : !s32i loc(#loc80)
              %10 = cir.binop(div, %8, %9) : !s32i loc(#loc231)
              %11 = cir.cmp(lt, %7, %10) : !s32i, !s32i loc(#loc232)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc82)
              cir.if %12 {
                %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc234)
                %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc88)
                %15 = cir.const #cir.int<2> : !s32i loc(#loc87)
                %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc88)
                cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc234)
                %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc89)
                cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc90)
              } else {
                %13 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc48)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc48)
                cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc91)
              } loc(#loc233)
            } loc(#loc230)
          } loc(#loc229)
        } loc(#loc227)
        cir.break loc(#loc92)
      }
      ] loc(#loc64)
    } loc(#loc226)
    cir.return loc(#loc50)
  } loc(#loc221)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc236)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc97)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc237)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc101)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc102)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc239)
        cir.break loc(#loc104)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc105)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc105)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc106)
        cir.break loc(#loc107)
      }
      ] loc(#loc99)
    } loc(#loc238)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc110)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc113)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc114)
          %5 = cir.cmp(gt, %3, %4) : !s32i, !s32i loc(#loc242)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc115)
          cir.if %6 {
            cir.scope {
              %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc119)
              %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc120)
              %9 = cir.const #cir.int<2> : !s32i loc(#loc121)
              %10 = cir.binop(div, %8, %9) : !s32i loc(#loc245)
              %11 = cir.cmp(lt, %7, %10) : !s32i, !s32i loc(#loc246)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc123)
              cir.if %12 {
                %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc248)
                %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
                %15 = cir.const #cir.int<2> : !s32i loc(#loc128)
                %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc129)
                cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc248)
                %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc130)
                cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc131)
              } else {
                %13 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc132)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc132)
                cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc133)
              } loc(#loc247)
            } loc(#loc244)
          } loc(#loc243)
        } loc(#loc241)
        cir.break loc(#loc134)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc135)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc135)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc136)
        cir.break loc(#loc137)
      }
      ] loc(#loc108)
    } loc(#loc240)
    cir.return loc(#loc94)
  } loc(#loc235)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc250)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc142)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc251)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc146)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc147)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc147)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc148)
        cir.break loc(#loc149)
      },
      case (default) {
        %3 = cir.const #cir.int<2> : !s32i loc(#loc150)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc253)
        cir.break loc(#loc152)
      }
      ] loc(#loc144)
    } loc(#loc252)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc155)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc158)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc159)
          %5 = cir.cmp(gt, %3, %4) : !s32i, !s32i loc(#loc256)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc160)
          cir.if %6 {
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc258)
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc164)
            %9 = cir.const #cir.int<2> : !s32i loc(#loc163)
            %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc164)
            cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc258)
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc165)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc166)
          } loc(#loc257)
        } loc(#loc255)
        cir.break loc(#loc167)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc168)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc168)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc169)
        cir.break loc(#loc170)
      }
      ] loc(#loc153)
    } loc(#loc254)
    cir.return loc(#loc139)
  } loc(#loc249)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc260)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc175)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc261)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc179)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.const #cir.int<2> : !s32i loc(#loc180)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc263)
        cir.break loc(#loc182)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc183)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc183)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc184)
        cir.break loc(#loc185)
      }
      ] loc(#loc177)
    } loc(#loc262)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc188)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc191)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc192)
          %5 = cir.cmp(gt, %3, %4) : !s32i, !s32i loc(#loc266)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc193)
          cir.if %6 {
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc268)
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc197)
            %9 = cir.const #cir.int<2> : !s32i loc(#loc196)
            %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc197)
            cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc268)
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc198)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc199)
          } loc(#loc267)
        } loc(#loc265)
        cir.break loc(#loc200)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc201)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc201)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc202)
        cir.break loc(#loc203)
      }
      ] loc(#loc186)
    } loc(#loc264)
    cir.return loc(#loc172)
  } loc(#loc259)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_multiply_15.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":35:19)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc6 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":22:1)
#loc7 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":53:1)
#loc8 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":24:5)
#loc9 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":24:9)
#loc10 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":26:12)
#loc11 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":26:5)
#loc12 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":27:5)
#loc13 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":37:5)
#loc14 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":27:12)
#loc15 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":31:16)
#loc16 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":31:9)
#loc17 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":32:9)
#loc18 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":35:9)
#loc19 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":36:9)
#loc20 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":38:5)
#loc21 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":52:5)
#loc22 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":38:12)
#loc23 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":41:9)
#loc24 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":46:9)
#loc25 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":41:12)
#loc26 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":41:19)
#loc27 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":41:17)
#loc28 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":42:9)
#loc29 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":44:13)
#loc30 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":44:33)
#loc31 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":44:26)
#loc32 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":45:26)
#loc33 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":45:13)
#loc34 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":47:9)
#loc35 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":50:19)
#loc36 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":50:9)
#loc37 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":51:9)
#loc38 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":209:1)
#loc39 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":215:1)
#loc40 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":211:5)
#loc41 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":211:14)
#loc42 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":212:5)
#loc43 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":212:14)
#loc44 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":213:5)
#loc45 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":213:14)
#loc46 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":214:5)
#loc47 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":214:14)
#loc48 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":93:27)
#loc49 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":60:1)
#loc50 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":98:1)
#loc51 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":62:5)
#loc52 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":62:9)
#loc53 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":64:12)
#loc54 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":64:5)
#loc55 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":65:5)
#loc56 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":75:5)
#loc57 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":65:12)
#loc58 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":69:16)
#loc59 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":69:9)
#loc60 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":70:9)
#loc61 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":73:19)
#loc62 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":73:9)
#loc63 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":74:9)
#loc64 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":76:5)
#loc65 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":97:5)
#loc66 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":76:12)
#loc67 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":80:19)
#loc68 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":80:9)
#loc69 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":81:9)
#loc70 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":83:9)
#loc71 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":95:9)
#loc72 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":83:12)
#loc73 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":83:19)
#loc74 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":83:17)
#loc75 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":84:9)
#loc76 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":86:13)
#loc77 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":94:13)
#loc78 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":86:17)
#loc79 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":86:25)
#loc80 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":86:33)
#loc81 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":86:34)
#loc82 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":86:22)
#loc83 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":87:13)
#loc84 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":90:13)
#loc85 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":92:13)
#loc86 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":88:17)
#loc87 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":88:37)
#loc88 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":88:30)
#loc89 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":89:30)
#loc90 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":89:17)
#loc91 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":93:17)
#loc92 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":96:9)
#loc93 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":101:1)
#loc94 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":139:1)
#loc95 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":103:5)
#loc96 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":103:9)
#loc97 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":105:12)
#loc98 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":105:5)
#loc99 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":106:5)
#loc100 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":116:5)
#loc101 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":106:12)
#loc102 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":110:16)
#loc103 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":110:9)
#loc104 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":111:9)
#loc105 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":114:19)
#loc106 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":114:9)
#loc107 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":115:9)
#loc108 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":117:5)
#loc109 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":138:5)
#loc110 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":117:12)
#loc111 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":120:9)
#loc112 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":132:9)
#loc113 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":120:12)
#loc114 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":120:19)
#loc115 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":120:17)
#loc116 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":121:9)
#loc117 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":123:13)
#loc118 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":131:13)
#loc119 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":123:17)
#loc120 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":123:25)
#loc121 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":123:33)
#loc122 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":123:34)
#loc123 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":123:22)
#loc124 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":124:13)
#loc125 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":127:13)
#loc126 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":129:13)
#loc127 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":125:17)
#loc128 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":125:37)
#loc129 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":125:30)
#loc130 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":126:30)
#loc131 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":126:17)
#loc132 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":130:27)
#loc133 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":130:17)
#loc134 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":133:9)
#loc135 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":136:19)
#loc136 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":136:9)
#loc137 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":137:9)
#loc138 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":142:1)
#loc139 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":173:1)
#loc140 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":144:5)
#loc141 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":144:9)
#loc142 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":146:12)
#loc143 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":146:5)
#loc144 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":147:5)
#loc145 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":157:5)
#loc146 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":147:12)
#loc147 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":151:19)
#loc148 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":151:9)
#loc149 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":152:9)
#loc150 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":155:16)
#loc151 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":155:9)
#loc152 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":156:9)
#loc153 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":158:5)
#loc154 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":172:5)
#loc155 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":158:12)
#loc156 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":161:9)
#loc157 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":166:9)
#loc158 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":161:12)
#loc159 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":161:19)
#loc160 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":161:17)
#loc161 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":162:9)
#loc162 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":164:13)
#loc163 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":164:33)
#loc164 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":164:26)
#loc165 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":165:26)
#loc166 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":165:13)
#loc167 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":167:9)
#loc168 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":170:19)
#loc169 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":170:9)
#loc170 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":171:9)
#loc171 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":176:1)
#loc172 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":207:1)
#loc173 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":178:5)
#loc174 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":178:9)
#loc175 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":180:12)
#loc176 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":180:5)
#loc177 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":181:5)
#loc178 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":191:5)
#loc179 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":181:12)
#loc180 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":185:16)
#loc181 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":185:9)
#loc182 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":186:9)
#loc183 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":189:19)
#loc184 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":189:9)
#loc185 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":190:9)
#loc186 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":192:5)
#loc187 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":206:5)
#loc188 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":192:12)
#loc189 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":195:9)
#loc190 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":200:9)
#loc191 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":195:12)
#loc192 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":195:19)
#loc193 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":195:17)
#loc194 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":196:9)
#loc195 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":198:13)
#loc196 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":198:33)
#loc197 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":198:26)
#loc198 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":199:26)
#loc199 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":199:13)
#loc200 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":201:9)
#loc201 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":204:19)
#loc202 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":204:9)
#loc203 = loc("CWE190_Integer_Overflow__int_max_multiply_15.c":205:9)
#loc204 = loc(fused[#loc1, #loc2])
#loc205 = loc(fused[#loc4, #loc5])
#loc206 = loc(fused[#loc6, #loc7])
#loc207 = loc(fused[#loc8, #loc9])
#loc208 = loc(fused[#loc11, #loc10])
#loc209 = loc(fused[#loc12, #loc13])
#loc210 = loc(fused[#loc16, #loc15])
#loc211 = loc(fused[#loc20, #loc21])
#loc212 = loc(fused[#loc23, #loc24])
#loc213 = loc(fused[#loc25, #loc26])
#loc214 = loc(fused[#loc28, #loc24])
#loc215 = loc(fused[#loc29, #loc30])
#loc216 = loc(fused[#loc38, #loc39])
#loc217 = loc(fused[#loc40, #loc41])
#loc218 = loc(fused[#loc42, #loc43])
#loc219 = loc(fused[#loc44, #loc45])
#loc220 = loc(fused[#loc46, #loc47])
#loc221 = loc(fused[#loc49, #loc50])
#loc222 = loc(fused[#loc51, #loc52])
#loc223 = loc(fused[#loc54, #loc53])
#loc224 = loc(fused[#loc55, #loc56])
#loc225 = loc(fused[#loc59, #loc58])
#loc226 = loc(fused[#loc64, #loc65])
#loc227 = loc(fused[#loc70, #loc71])
#loc228 = loc(fused[#loc72, #loc73])
#loc229 = loc(fused[#loc75, #loc71])
#loc230 = loc(fused[#loc76, #loc77])
#loc231 = loc(fused[#loc79, #loc80])
#loc232 = loc(fused[#loc78, #loc81])
#loc233 = loc(fused[#loc83, #loc84, #loc85, #loc77])
#loc234 = loc(fused[#loc86, #loc87])
#loc235 = loc(fused[#loc93, #loc94])
#loc236 = loc(fused[#loc95, #loc96])
#loc237 = loc(fused[#loc98, #loc97])
#loc238 = loc(fused[#loc99, #loc100])
#loc239 = loc(fused[#loc103, #loc102])
#loc240 = loc(fused[#loc108, #loc109])
#loc241 = loc(fused[#loc111, #loc112])
#loc242 = loc(fused[#loc113, #loc114])
#loc243 = loc(fused[#loc116, #loc112])
#loc244 = loc(fused[#loc117, #loc118])
#loc245 = loc(fused[#loc120, #loc121])
#loc246 = loc(fused[#loc119, #loc122])
#loc247 = loc(fused[#loc124, #loc125, #loc126, #loc118])
#loc248 = loc(fused[#loc127, #loc128])
#loc249 = loc(fused[#loc138, #loc139])
#loc250 = loc(fused[#loc140, #loc141])
#loc251 = loc(fused[#loc143, #loc142])
#loc252 = loc(fused[#loc144, #loc145])
#loc253 = loc(fused[#loc151, #loc150])
#loc254 = loc(fused[#loc153, #loc154])
#loc255 = loc(fused[#loc156, #loc157])
#loc256 = loc(fused[#loc158, #loc159])
#loc257 = loc(fused[#loc161, #loc157])
#loc258 = loc(fused[#loc162, #loc163])
#loc259 = loc(fused[#loc171, #loc172])
#loc260 = loc(fused[#loc173, #loc174])
#loc261 = loc(fused[#loc176, #loc175])
#loc262 = loc(fused[#loc177, #loc178])
#loc263 = loc(fused[#loc181, #loc180])
#loc264 = loc(fused[#loc186, #loc187])
#loc265 = loc(fused[#loc189, #loc190])
#loc266 = loc(fused[#loc191, #loc192])
#loc267 = loc(fused[#loc194, #loc190])
#loc268 = loc(fused[#loc195, #loc196])
