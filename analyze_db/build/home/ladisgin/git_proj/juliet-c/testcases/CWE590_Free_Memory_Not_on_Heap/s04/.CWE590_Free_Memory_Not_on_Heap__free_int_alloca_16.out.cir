!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc61 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":98:10)
#loc62 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":98:14)
#loc63 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":98:20)
#loc64 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":98:32)
#loc159 = loc(fused[#loc61, #loc62])
#loc160 = loc(fused[#loc63, #loc64])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE590_Free_Memory_Not_on_Heap/s04/CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc136)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc137)
  cir.func no_proto @CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc139)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc9)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc140)
    cir.scope {
      cir.while {
        %9 = cir.const #cir.int<1> : !s32i loc(#loc13)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc13)
        cir.condition(%10) loc(#loc13)
      } do {
        cir.scope {
          %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc143)
          %10 = cir.const #cir.int<100> : !s32i loc(#loc17)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc17)
          %12 = cir.const #cir.int<4> : !u64i loc(#loc17)
          %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc17)
          %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc17)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc17)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc17)
          cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc143)
          cir.scope {
            %18 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc145)
            cir.scope {
              %19 = cir.const #cir.int<0> : !s32i loc(#loc24)
              %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc24)
              cir.store %20, %18 : !u64i, !cir.ptr<!u64i> loc(#loc147)
              cir.for : cond {
                %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc26)
                %22 = cir.const #cir.int<100> : !s32i loc(#loc27)
                %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc27)
                %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc148)
                cir.condition(%24) loc(#loc28)
              } body {
                cir.scope {
                  %21 = cir.const #cir.int<5> : !s32i loc(#loc30)
                  %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc31)
                  %23 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc32)
                  %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc33)
                  cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc150)
                } loc(#loc149)
                cir.yield loc(#loc23)
              } step {
                %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc34)
                %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc35)
                cir.store %22, %18 : !u64i, !cir.ptr<!u64i> loc(#loc151)
                cir.yield loc(#loc146)
              } loc(#loc146)
            } loc(#loc146)
          } loc(#loc144)
          %17 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc36)
          cir.store %17, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc152)
        } loc(#loc142)
        cir.break loc(#loc38)
      } loc(#loc141)
    } loc(#loc141)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc39)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc40)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!s32i>, %3 : !s32i), !cir.ptr<!s32i> loc(#loc41)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc42)
    %6 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc43)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc44)
    cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc43)
    cir.return loc(#loc6)
  } loc(#loc138)
  cir.func no_proto @CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc154)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    cir.return loc(#loc46)
  } loc(#loc153)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc155)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc156)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc157)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc58)
  cir.func @main(%arg0: !s32i loc(fused[#loc61, #loc62]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc63, #loc64])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc159)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc160)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc60)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc65)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc65)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc66)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc67)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc67)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc68)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc55)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %8 = cir.get_global @CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc161)
    cir.call @CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16_good() : () -> () loc(#loc70)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc56)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc57)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %13 = cir.get_global @CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc162)
    cir.call @CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16_bad() : () -> () loc(#loc74)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc58)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc77)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc163)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc163)
    cir.return %17 : !s32i loc(#loc163)
  } loc(#loc158)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc164)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"malloc() failed\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc81)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc165)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc167)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc88)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc168)
    cir.scope {
      cir.while {
        %9 = cir.const #cir.int<1> : !s32i loc(#loc92)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc92)
        cir.condition(%10) loc(#loc92)
      } do {
        cir.scope {
          %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc171)
          %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc97)
          %11 = cir.const #cir.int<100> : !s32i loc(#loc98)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc98)
          %13 = cir.const #cir.int<4> : !u64i loc(#loc172)
          %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc173)
          %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc97)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc174)
          cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc171)
          cir.scope {
            %18 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc103)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc104)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc104)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc176)
            cir.if %21 {
              %22 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc81)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc81)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc106)
              %24 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc107)
              %25 = cir.const #cir.int<1> : !s32i loc(#loc108)
              cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc107)
            } loc(#loc177)
          } loc(#loc175)
          cir.scope {
            %18 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc179)
            cir.scope {
              %19 = cir.const #cir.int<0> : !s32i loc(#loc115)
              %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc115)
              cir.store %20, %18 : !u64i, !cir.ptr<!u64i> loc(#loc181)
              cir.for : cond {
                %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc117)
                %22 = cir.const #cir.int<100> : !s32i loc(#loc118)
                %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc118)
                %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc182)
                cir.condition(%24) loc(#loc119)
              } body {
                cir.scope {
                  %21 = cir.const #cir.int<5> : !s32i loc(#loc121)
                  %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc122)
                  %23 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc123)
                  %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc124)
                  cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc184)
                } loc(#loc183)
                cir.yield loc(#loc114)
              } step {
                %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc125)
                %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc126)
                cir.store %22, %18 : !u64i, !cir.ptr<!u64i> loc(#loc185)
                cir.yield loc(#loc180)
              } loc(#loc180)
            } loc(#loc180)
          } loc(#loc178)
          %17 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc127)
          cir.store %17, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc186)
        } loc(#loc170)
        cir.break loc(#loc129)
      } loc(#loc169)
    } loc(#loc169)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc130)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc131)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!s32i>, %3 : !s32i), !cir.ptr<!s32i> loc(#loc132)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc130)
    cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc133)
    %6 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc134)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc135)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc135)
    cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc134)
    cir.return loc(#loc85)
  } loc(#loc166)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE590_Free_Memory_Not_on_Heap/s04/CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":23:1)
#loc6 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":46:1)
#loc7 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":25:5)
#loc8 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":25:11)
#loc9 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":26:12)
#loc10 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":26:5)
#loc11 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":27:5)
#loc12 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":42:5)
#loc13 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":27:11)
#loc14 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":29:9)
#loc15 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":40:9)
#loc16 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":31:13)
#loc17 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":31:39)
#loc18 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":32:13)
#loc19 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":38:13)
#loc20 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":33:17)
#loc21 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":33:24)
#loc22 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":34:17)
#loc23 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":37:17)
#loc24 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":34:26)
#loc25 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":34:22)
#loc26 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":34:29)
#loc27 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":34:33)
#loc28 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":34:31)
#loc29 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":35:17)
#loc30 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":36:37)
#loc31 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":36:21)
#loc32 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":36:32)
#loc33 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":36:33)
#loc34 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":34:39)
#loc35 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":34:38)
#loc36 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":39:20)
#loc37 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":39:13)
#loc38 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":41:9)
#loc39 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":43:18)
#loc40 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":43:23)
#loc41 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":43:24)
#loc42 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":43:5)
#loc43 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":45:5)
#loc44 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":45:10)
#loc45 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":83:1)
#loc46 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":86:1)
#loc47 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":85:5)
#loc48 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":85:13)
#loc49 = loc("/usr/include/stdlib.h":575:1)
#loc50 = loc("/usr/include/stdlib.h":575:41)
#loc51 = loc("/usr/include/time.h":76:1)
#loc52 = loc("/usr/include/time.h":76:38)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc55 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":103:15)
#loc56 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":105:15)
#loc57 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":108:15)
#loc58 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":110:15)
#loc59 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":98:1)
#loc60 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":113:1)
#loc65 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":99:1)
#loc66 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":101:27)
#loc67 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":101:22)
#loc68 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":101:5)
#loc69 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":103:5)
#loc70 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":104:5)
#loc71 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":104:61)
#loc72 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":105:5)
#loc73 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":108:5)
#loc74 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":109:5)
#loc75 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":109:60)
#loc76 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":110:5)
#loc77 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":112:12)
#loc78 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":112:5)
#loc79 = loc("/usr/include/stdlib.h":672:1)
#loc80 = loc("/usr/include/stdlib.h":672:45)
#loc81 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":64:27)
#loc82 = loc("/usr/include/stdlib.h":756:1)
#loc83 = loc("/usr/include/stdlib.h":756:70)
#loc84 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":53:1)
#loc85 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":81:1)
#loc86 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":55:5)
#loc87 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":55:11)
#loc88 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":56:12)
#loc89 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":56:5)
#loc90 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":57:5)
#loc91 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":77:5)
#loc92 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":57:11)
#loc93 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":59:9)
#loc94 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":75:9)
#loc95 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":61:13)
#loc96 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":61:61)
#loc97 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":61:39)
#loc98 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":61:46)
#loc99 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":61:50)
#loc100 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":61:60)
#loc101 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":62:13)
#loc102 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":66:13)
#loc103 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":62:17)
#loc104 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":62:31)
#loc105 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":63:13)
#loc106 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":64:17)
#loc107 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":65:17)
#loc108 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":65:22)
#loc109 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":67:13)
#loc110 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":73:13)
#loc111 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":68:17)
#loc112 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":68:24)
#loc113 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":69:17)
#loc114 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":72:17)
#loc115 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":69:26)
#loc116 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":69:22)
#loc117 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":69:29)
#loc118 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":69:33)
#loc119 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":69:31)
#loc120 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":70:17)
#loc121 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":71:37)
#loc122 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":71:21)
#loc123 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":71:32)
#loc124 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":71:33)
#loc125 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":69:39)
#loc126 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":69:38)
#loc127 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":74:20)
#loc128 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":74:13)
#loc129 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":76:9)
#loc130 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":78:18)
#loc131 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":78:23)
#loc132 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":78:24)
#loc133 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":78:5)
#loc134 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":80:5)
#loc135 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":80:10)
#loc136 = loc(fused[#loc1, #loc2])
#loc137 = loc(fused[#loc3, #loc4])
#loc138 = loc(fused[#loc5, #loc6])
#loc139 = loc(fused[#loc7, #loc8])
#loc140 = loc(fused[#loc10, #loc9])
#loc141 = loc(fused[#loc11, #loc12])
#loc142 = loc(fused[#loc14, #loc15])
#loc143 = loc(fused[#loc16, #loc17])
#loc144 = loc(fused[#loc18, #loc19])
#loc145 = loc(fused[#loc20, #loc21])
#loc146 = loc(fused[#loc22, #loc23])
#loc147 = loc(fused[#loc25, #loc24])
#loc148 = loc(fused[#loc26, #loc27])
#loc149 = loc(fused[#loc29, #loc23])
#loc150 = loc(fused[#loc31, #loc30])
#loc151 = loc(fused[#loc35, #loc34])
#loc152 = loc(fused[#loc37, #loc36])
#loc153 = loc(fused[#loc45, #loc46])
#loc154 = loc(fused[#loc47, #loc48])
#loc155 = loc(fused[#loc49, #loc50])
#loc156 = loc(fused[#loc51, #loc52])
#loc157 = loc(fused[#loc53, #loc54])
#loc158 = loc(fused[#loc59, #loc60])
#loc161 = loc(fused[#loc70, #loc71])
#loc162 = loc(fused[#loc74, #loc75])
#loc163 = loc(fused[#loc78, #loc77])
#loc164 = loc(fused[#loc79, #loc80])
#loc165 = loc(fused[#loc82, #loc83])
#loc166 = loc(fused[#loc84, #loc85])
#loc167 = loc(fused[#loc86, #loc87])
#loc168 = loc(fused[#loc89, #loc88])
#loc169 = loc(fused[#loc90, #loc91])
#loc170 = loc(fused[#loc93, #loc94])
#loc171 = loc(fused[#loc95, #loc96])
#loc172 = loc(fused[#loc99, #loc100])
#loc173 = loc(fused[#loc98, #loc100])
#loc174 = loc(fused[#loc97, #loc96])
#loc175 = loc(fused[#loc101, #loc102])
#loc176 = loc(fused[#loc103, #loc104])
#loc177 = loc(fused[#loc105, #loc102])
#loc178 = loc(fused[#loc109, #loc110])
#loc179 = loc(fused[#loc111, #loc112])
#loc180 = loc(fused[#loc113, #loc114])
#loc181 = loc(fused[#loc116, #loc115])
#loc182 = loc(fused[#loc117, #loc118])
#loc183 = loc(fused[#loc120, #loc114])
#loc184 = loc(fused[#loc122, #loc121])
#loc185 = loc(fused[#loc126, #loc125])
#loc186 = loc(fused[#loc128, #loc127])
