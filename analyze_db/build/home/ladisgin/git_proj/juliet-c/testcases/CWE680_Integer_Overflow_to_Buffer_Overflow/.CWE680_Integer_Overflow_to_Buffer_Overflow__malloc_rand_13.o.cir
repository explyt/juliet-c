!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":29:16)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant external @GLOBAL_CONST_FIVE : !s32i {alignment = 4 : i64} loc(#loc187)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc188)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc189)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc190)
  cir.func private @printIntLine(!s32i) loc(#loc191)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc192)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc194)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc195)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc196)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc22)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    cir.br ^bb1 loc(#loc198)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc187)
    %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    %7 = cir.const #cir.int<5> : !s32i loc(#loc27)
    %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc199)
    cir.brcond %8 ^bb2, ^bb7 loc(#loc200)
  ^bb2:  // pred: ^bb1
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %11 = cir.binop(and, %9, %10) : !s32i loc(#loc29)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc29)
    cir.brcond %12 ^bb3, ^bb4 loc(#loc29)
  ^bb3:  // pred: ^bb2
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc29)
    %15 = cir.const #cir.int<30> : !s32i loc(#loc29)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc29)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc29)
    %19 = cir.const #cir.int<15> : !s32i loc(#loc29)
    %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc29)
    %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc29)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc29)
    %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc29)
    cir.br ^bb5(%24 : !u32i) loc(#loc29)
  ^bb4:  // pred: ^bb2
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc29)
    %27 = cir.const #cir.int<30> : !s32i loc(#loc29)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc29)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc29)
    %31 = cir.const #cir.int<15> : !s32i loc(#loc29)
    %32 = cir.shift(left, %30 : !u32i, %31 : !s32i) -> !u32i loc(#loc29)
    %33 = cir.binop(xor, %28, %32) : !u32i loc(#loc29)
    %34 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc29)
    %36 = cir.binop(xor, %33, %35) : !u32i loc(#loc29)
    %37 = cir.unary(minus, %36) : !u32i, !u32i loc(#loc29)
    %38 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %39 = cir.cast(integral, %38 : !s32i), !u32i loc(#loc29)
    %40 = cir.binop(sub, %37, %39) : !u32i loc(#loc29)
    cir.br ^bb5(%40 : !u32i) loc(#loc29)
  ^bb5(%41: !u32i loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":29:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc29)
  ^bb6:  // pred: ^bb5
    %42 = cir.cast(integral, %41 : !u32i), !s32i loc(#loc29)
    cir.store %42, %2 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    cir.br ^bb7 loc(#loc25)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc25)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc202)
  ^bb9:  // pred: ^bb8
    %43 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc33)
    %44 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc34)
    %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc34)
    %46 = cir.const #cir.int<4> : !u64i loc(#loc203)
    %47 = cir.binop(mul, %45, %46) : !u64i loc(#loc204)
    %48 = cir.call @malloc(%47) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc33)
    %49 = cir.cast(bitcast, %48 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc205)
    cir.store %49, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc206)
    cir.br ^bb10 loc(#loc207)
  ^bb10:  // pred: ^bb9
    %50 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc41)
    %51 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc42)
    %52 = cir.cast(bitcast, %51 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc42)
    %53 = cir.cmp(eq, %50, %52) : !cir.ptr<!s32i>, !cir.bool loc(#loc208)
    cir.brcond %53 ^bb11, ^bb12 loc(#loc209)
  ^bb11:  // pred: ^bb10
    %54 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc44)
    %55 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc46)
    cir.call @exit(%56) : (!s32i) -> () extra(#fn_attr) loc(#loc44)
    cir.br ^bb12 loc(#loc40)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc40)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc210)
  ^bb14:  // pred: ^bb13
    %57 = cir.const #cir.int<0> : !s32i loc(#loc49)
    %58 = cir.cast(integral, %57 : !s32i), !u64i loc(#loc49)
    cir.store %58, %0 : !u64i, !cir.ptr<!u64i> loc(#loc211)
    cir.br ^bb15 loc(#loc210)
  ^bb15:  // 2 preds: ^bb14, ^bb19
    %59 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc51)
    %60 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc52)
    %61 = cir.cast(integral, %60 : !s32i), !u64i loc(#loc52)
    %62 = cir.cmp(lt, %59, %61) : !u64i, !cir.bool loc(#loc212)
    cir.brcond %62 ^bb16, ^bb20 loc(#loc53)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc213)
  ^bb17:  // pred: ^bb16
    %63 = cir.const #cir.int<0> : !s32i loc(#loc55)
    %64 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc56)
    %65 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc57)
    %66 = cir.ptr_stride(%64 : !cir.ptr<!s32i>, %65 : !u64i), !cir.ptr<!s32i> loc(#loc58)
    cir.store %63, %66 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    cir.br ^bb18 loc(#loc48)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc48)
  ^bb19:  // pred: ^bb18
    %67 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc59)
    %68 = cir.unary(inc, %67) : !u64i, !u64i loc(#loc60)
    cir.store %68, %0 : !u64i, !cir.ptr<!u64i> loc(#loc215)
    cir.br ^bb15 loc(#loc210)
  ^bb20:  // pred: ^bb15
    cir.br ^bb21 loc(#loc48)
  ^bb21:  // pred: ^bb20
    %69 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc61)
    %70 = cir.const #cir.int<0> : !s32i loc(#loc62)
    %71 = cir.ptr_stride(%69 : !cir.ptr<!s32i>, %70 : !s32i), !cir.ptr<!s32i> loc(#loc63)
    %72 = cir.load %71 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    cir.call @printIntLine(%72) : (!s32i) -> () loc(#loc64)
    %73 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc65)
    %74 = cir.cast(bitcast, %73 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc65)
    cir.call @free(%74) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc66)
    cir.br ^bb22 loc(#loc32)
  ^bb22:  // pred: ^bb21
    cir.return loc(#loc14)
  } loc(#loc193)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc217)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc69)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc71)
    cir.return loc(#loc68)
  } loc(#loc216)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc219)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc75)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc221)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc222)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc223)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc85)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    cir.br ^bb1 loc(#loc225)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc187)
    %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    %7 = cir.const #cir.int<5> : !s32i loc(#loc90)
    %8 = cir.cmp(ne, %6, %7) : !s32i, !cir.bool loc(#loc226)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc227)
  ^bb2:  // pred: ^bb1
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc75)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    cir.br ^bb4 loc(#loc92)
  ^bb3:  // pred: ^bb1
    %11 = cir.const #cir.int<20> : !s32i loc(#loc95)
    cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc228)
    cir.br ^bb4 loc(#loc88)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc88)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc229)
  ^bb6:  // pred: ^bb5
    %12 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc99)
    %13 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc100)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc100)
    %15 = cir.const #cir.int<4> : !u64i loc(#loc230)
    %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc231)
    %17 = cir.call @malloc(%16) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc99)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc232)
    cir.store %18, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc233)
    cir.br ^bb7 loc(#loc234)
  ^bb7:  // pred: ^bb6
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc107)
    %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc108)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc108)
    %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc235)
    cir.brcond %22 ^bb8, ^bb9 loc(#loc236)
  ^bb8:  // pred: ^bb7
    %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc110)
    %24 = cir.const #cir.int<1> : !s32i loc(#loc111)
    %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc112)
    cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc110)
    cir.br ^bb9 loc(#loc106)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc106)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc237)
  ^bb11:  // pred: ^bb10
    %26 = cir.const #cir.int<0> : !s32i loc(#loc115)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc115)
    cir.store %27, %0 : !u64i, !cir.ptr<!u64i> loc(#loc238)
    cir.br ^bb12 loc(#loc237)
  ^bb12:  // 2 preds: ^bb11, ^bb16
    %28 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc117)
    %29 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc118)
    %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc118)
    %31 = cir.cmp(lt, %28, %30) : !u64i, !cir.bool loc(#loc239)
    cir.brcond %31 ^bb13, ^bb17 loc(#loc119)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc240)
  ^bb14:  // pred: ^bb13
    %32 = cir.const #cir.int<0> : !s32i loc(#loc121)
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc122)
    %34 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc123)
    %35 = cir.ptr_stride(%33 : !cir.ptr<!s32i>, %34 : !u64i), !cir.ptr<!s32i> loc(#loc124)
    cir.store %32, %35 : !s32i, !cir.ptr<!s32i> loc(#loc241)
    cir.br ^bb15 loc(#loc114)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc114)
  ^bb16:  // pred: ^bb15
    %36 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc125)
    %37 = cir.unary(inc, %36) : !u64i, !u64i loc(#loc126)
    cir.store %37, %0 : !u64i, !cir.ptr<!u64i> loc(#loc242)
    cir.br ^bb12 loc(#loc237)
  ^bb17:  // pred: ^bb12
    cir.br ^bb18 loc(#loc114)
  ^bb18:  // pred: ^bb17
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc127)
    %39 = cir.const #cir.int<0> : !s32i loc(#loc128)
    %40 = cir.ptr_stride(%38 : !cir.ptr<!s32i>, %39 : !s32i), !cir.ptr<!s32i> loc(#loc129)
    %41 = cir.load %40 : !cir.ptr<!s32i>, !s32i loc(#loc127)
    cir.call @printIntLine(%41) : (!s32i) -> () loc(#loc130)
    %42 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc131)
    %43 = cir.cast(bitcast, %42 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc131)
    cir.call @free(%43) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc132)
    cir.br ^bb19 loc(#loc98)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc77)
  } loc(#loc220)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc244)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc245)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc246)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc141)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc142)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc247)
    cir.br ^bb1 loc(#loc248)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc187)
    %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc146)
    %7 = cir.const #cir.int<5> : !s32i loc(#loc147)
    %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc249)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc250)
  ^bb2:  // pred: ^bb1
    %9 = cir.const #cir.int<20> : !s32i loc(#loc149)
    cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc251)
    cir.br ^bb3 loc(#loc145)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc145)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc252)
  ^bb5:  // pred: ^bb4
    %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc153)
    %11 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc154)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc154)
    %13 = cir.const #cir.int<4> : !u64i loc(#loc253)
    %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc254)
    %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc153)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc255)
    cir.store %16, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc256)
    cir.br ^bb6 loc(#loc257)
  ^bb6:  // pred: ^bb5
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc161)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc162)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc162)
    %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !cir.bool loc(#loc258)
    cir.brcond %20 ^bb7, ^bb8 loc(#loc259)
  ^bb7:  // pred: ^bb6
    %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc164)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc165)
    %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc166)
    cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc164)
    cir.br ^bb8 loc(#loc160)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc160)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc260)
  ^bb10:  // pred: ^bb9
    %24 = cir.const #cir.int<0> : !s32i loc(#loc169)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc169)
    cir.store %25, %0 : !u64i, !cir.ptr<!u64i> loc(#loc261)
    cir.br ^bb11 loc(#loc260)
  ^bb11:  // 2 preds: ^bb10, ^bb15
    %26 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc171)
    %27 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc172)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc172)
    %29 = cir.cmp(lt, %26, %28) : !u64i, !cir.bool loc(#loc262)
    cir.brcond %29 ^bb12, ^bb16 loc(#loc173)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc263)
  ^bb13:  // pred: ^bb12
    %30 = cir.const #cir.int<0> : !s32i loc(#loc175)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc176)
    %32 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc177)
    %33 = cir.ptr_stride(%31 : !cir.ptr<!s32i>, %32 : !u64i), !cir.ptr<!s32i> loc(#loc178)
    cir.store %30, %33 : !s32i, !cir.ptr<!s32i> loc(#loc264)
    cir.br ^bb14 loc(#loc168)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc168)
  ^bb15:  // pred: ^bb14
    %34 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc179)
    %35 = cir.unary(inc, %34) : !u64i, !u64i loc(#loc180)
    cir.store %35, %0 : !u64i, !cir.ptr<!u64i> loc(#loc265)
    cir.br ^bb11 loc(#loc260)
  ^bb16:  // pred: ^bb11
    cir.br ^bb17 loc(#loc168)
  ^bb17:  // pred: ^bb16
    %36 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc181)
    %37 = cir.const #cir.int<0> : !s32i loc(#loc182)
    %38 = cir.ptr_stride(%36 : !cir.ptr<!s32i>, %37 : !s32i), !cir.ptr<!s32i> loc(#loc183)
    %39 = cir.load %38 : !cir.ptr<!s32i>, !s32i loc(#loc181)
    cir.call @printIntLine(%39) : (!s32i) -> () loc(#loc184)
    %40 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc185)
    %41 = cir.cast(bitcast, %40 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc185)
    cir.call @free(%41) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc186)
    cir.br ^bb18 loc(#loc152)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc134)
  } loc(#loc243)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":111:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":111:18)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("/usr/include/stdlib.h":672:1)
#loc6 = loc("/usr/include/stdlib.h":672:45)
#loc7 = loc("/usr/include/stdlib.h":756:1)
#loc8 = loc("/usr/include/stdlib.h":756:70)
#loc9 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc11 = loc("/usr/include/stdlib.h":687:1)
#loc12 = loc("/usr/include/stdlib.h":687:32)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":21:1)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":45:1)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":32:9)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":32:16)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":33:9)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":33:14)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":23:5)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":23:9)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":25:13)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":25:12)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":25:5)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":26:5)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":30:5)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":26:8)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":26:27)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":27:5)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":29:9)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":31:5)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":44:5)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":36:28)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":36:35)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":36:42)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":36:52)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":36:53)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":36:9)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":37:9)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":37:43)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":37:13)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":37:27)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":37:33)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":37:34)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":37:40)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":37:39)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":38:9)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":41:9)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":38:18)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":38:14)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":38:21)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":38:33)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":38:23)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":39:9)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":40:29)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":40:13)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":40:24)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":40:25)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":38:40)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":38:39)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":42:22)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":42:33)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":42:34)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":42:9)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":43:14)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":43:9)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":110:1)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":114:1)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":112:5)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":112:14)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":113:5)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":113:14)
#loc73 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc74 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":60:19)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":52:1)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":81:1)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":68:9)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":68:16)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":69:9)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":69:14)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":54:5)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":54:9)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":56:13)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":56:12)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":56:5)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":57:5)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":66:5)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":57:8)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":57:27)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":58:5)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":61:5)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":63:5)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":60:9)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":65:16)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":65:9)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":67:5)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":80:5)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":72:28)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":72:35)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":72:42)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":72:52)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":72:53)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":72:9)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":73:9)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":73:43)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":73:13)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":73:27)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":73:33)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":73:34)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":73:40)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":73:39)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":74:9)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":77:9)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":74:18)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":74:14)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":74:21)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":74:33)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":74:23)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":75:9)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":76:29)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":76:13)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":76:24)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":76:25)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":74:40)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":74:39)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":78:22)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":78:33)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":78:34)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":78:9)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":79:14)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":79:9)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":84:1)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":108:1)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":95:9)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":95:16)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":96:9)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":96:14)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":86:5)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":86:9)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":88:13)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":88:12)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":88:5)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":89:5)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":93:5)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":89:8)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":89:27)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":90:5)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":92:16)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":92:9)
#loc151 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":94:5)
#loc152 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":107:5)
#loc153 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":99:28)
#loc154 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":99:35)
#loc155 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":99:42)
#loc156 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":99:52)
#loc157 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":99:53)
#loc158 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":99:9)
#loc159 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":100:9)
#loc160 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":100:43)
#loc161 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":100:13)
#loc162 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":100:27)
#loc163 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":100:33)
#loc164 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":100:34)
#loc165 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":100:40)
#loc166 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":100:39)
#loc167 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":101:9)
#loc168 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":104:9)
#loc169 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":101:18)
#loc170 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":101:14)
#loc171 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":101:21)
#loc172 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":101:33)
#loc173 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":101:23)
#loc174 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":102:9)
#loc175 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":103:29)
#loc176 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":103:13)
#loc177 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":103:24)
#loc178 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":103:25)
#loc179 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":101:40)
#loc180 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":101:39)
#loc181 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":105:22)
#loc182 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":105:33)
#loc183 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":105:34)
#loc184 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":105:9)
#loc185 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":106:14)
#loc186 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_13.c":106:9)
#loc187 = loc(fused[#loc1, #loc2])
#loc188 = loc(fused[#loc3, #loc4])
#loc189 = loc(fused[#loc5, #loc6])
#loc190 = loc(fused[#loc7, #loc8])
#loc191 = loc(fused[#loc9, #loc10])
#loc192 = loc(fused[#loc11, #loc12])
#loc193 = loc(fused[#loc13, #loc14])
#loc194 = loc(fused[#loc15, #loc16])
#loc195 = loc(fused[#loc17, #loc18])
#loc196 = loc(fused[#loc19, #loc20])
#loc197 = loc(fused[#loc23, #loc21])
#loc198 = loc(fused[#loc24, #loc25])
#loc199 = loc(fused[#loc26, #loc27])
#loc200 = loc(fused[#loc28, #loc25])
#loc201 = loc(fused[#loc30, #loc29])
#loc202 = loc(fused[#loc31, #loc32])
#loc203 = loc(fused[#loc35, #loc36])
#loc204 = loc(fused[#loc34, #loc36])
#loc205 = loc(fused[#loc33, #loc37])
#loc206 = loc(fused[#loc38, #loc37])
#loc207 = loc(fused[#loc39, #loc40])
#loc208 = loc(fused[#loc41, #loc42])
#loc209 = loc(fused[#loc43, #loc40])
#loc210 = loc(fused[#loc47, #loc48])
#loc211 = loc(fused[#loc50, #loc49])
#loc212 = loc(fused[#loc51, #loc52])
#loc213 = loc(fused[#loc54, #loc48])
#loc214 = loc(fused[#loc56, #loc55])
#loc215 = loc(fused[#loc60, #loc59])
#loc216 = loc(fused[#loc67, #loc68])
#loc217 = loc(fused[#loc69, #loc70])
#loc218 = loc(fused[#loc71, #loc72])
#loc219 = loc(fused[#loc73, #loc74])
#loc220 = loc(fused[#loc76, #loc77])
#loc221 = loc(fused[#loc78, #loc79])
#loc222 = loc(fused[#loc80, #loc81])
#loc223 = loc(fused[#loc82, #loc83])
#loc224 = loc(fused[#loc86, #loc84])
#loc225 = loc(fused[#loc87, #loc88])
#loc226 = loc(fused[#loc89, #loc90])
#loc227 = loc(fused[#loc91, #loc92, #loc93, #loc88])
#loc228 = loc(fused[#loc96, #loc95])
#loc229 = loc(fused[#loc97, #loc98])
#loc230 = loc(fused[#loc101, #loc102])
#loc231 = loc(fused[#loc100, #loc102])
#loc232 = loc(fused[#loc99, #loc103])
#loc233 = loc(fused[#loc104, #loc103])
#loc234 = loc(fused[#loc105, #loc106])
#loc235 = loc(fused[#loc107, #loc108])
#loc236 = loc(fused[#loc109, #loc106])
#loc237 = loc(fused[#loc113, #loc114])
#loc238 = loc(fused[#loc116, #loc115])
#loc239 = loc(fused[#loc117, #loc118])
#loc240 = loc(fused[#loc120, #loc114])
#loc241 = loc(fused[#loc122, #loc121])
#loc242 = loc(fused[#loc126, #loc125])
#loc243 = loc(fused[#loc133, #loc134])
#loc244 = loc(fused[#loc135, #loc136])
#loc245 = loc(fused[#loc137, #loc138])
#loc246 = loc(fused[#loc139, #loc140])
#loc247 = loc(fused[#loc143, #loc141])
#loc248 = loc(fused[#loc144, #loc145])
#loc249 = loc(fused[#loc146, #loc147])
#loc250 = loc(fused[#loc148, #loc145])
#loc251 = loc(fused[#loc150, #loc149])
#loc252 = loc(fused[#loc151, #loc152])
#loc253 = loc(fused[#loc155, #loc156])
#loc254 = loc(fused[#loc154, #loc156])
#loc255 = loc(fused[#loc153, #loc157])
#loc256 = loc(fused[#loc158, #loc157])
#loc257 = loc(fused[#loc159, #loc160])
#loc258 = loc(fused[#loc161, #loc162])
#loc259 = loc(fused[#loc163, #loc160])
#loc260 = loc(fused[#loc167, #loc168])
#loc261 = loc(fused[#loc170, #loc169])
#loc262 = loc(fused[#loc171, #loc172])
#loc263 = loc(fused[#loc174, #loc168])
#loc264 = loc(fused[#loc176, #loc175])
#loc265 = loc(fused[#loc180, #loc179])
