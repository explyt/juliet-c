!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc58 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":151:10)
#loc59 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":151:14)
#loc60 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":151:20)
#loc61 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":151:32)
#loc218 = loc(fused[#loc58, #loc59])
#loc219 = loc(fused[#loc60, #loc61])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE675_Duplicate_Operations_on_Resource/CWE675_Duplicate_Operations_on_Resource__open_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc194)
  cir.func private @open(!cir.ptr<!s8i>, !s32i, ...) -> !s32i loc(#loc195)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"BadSource_open.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc5)
  cir.func private @close(!s32i) -> !s32i loc(#loc196)
  cir.func no_proto @CWE675_Duplicate_Operations_on_Resource__open_11_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc198)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc199)
    cir.br ^bb1 loc(#loc200)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc201)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc201)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc17)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc202)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc5)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc5)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc20)
    %10 = cir.const #cir.int<64> : !s32i loc(#loc21)
    %11 = cir.binop(or, %9, %10) : !s32i loc(#loc203)
    %12 = cir.const #cir.int<256> : !s32i loc(#loc22)
    %13 = cir.const #cir.int<128> : !s32i loc(#loc23)
    %14 = cir.binop(or, %12, %13) : !s32i loc(#loc204)
    %15 = cir.call @open(%8, %11, %14) : (!cir.ptr<!s8i>, !s32i, !s32i) -> !s32i loc(#loc24)
    cir.store %15, %0 : !s32i, !cir.ptr<!s32i> loc(#loc205)
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc28)
    cir.br ^bb3 loc(#loc16)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc16)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc206)
  ^bb5:  // pred: ^bb4
    %18 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc207)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc207)
    %20 = cir.call %19() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc31)
    %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc31)
    cir.brcond %21 ^bb6, ^bb7 loc(#loc208)
  ^bb6:  // pred: ^bb5
    %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc34)
    %23 = cir.call @close(%22) : (!s32i) -> !s32i loc(#loc35)
    cir.br ^bb7 loc(#loc30)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc30)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc9)
  } loc(#loc197)
  cir.func no_proto @CWE675_Duplicate_Operations_on_Resource__open_11_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc210)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc211)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc212)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc213)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    cir.return loc(#loc37)
  } loc(#loc209)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc214)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc215)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc216)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc55)
  cir.func @main(%arg0: !s32i loc(fused[#loc58, #loc59]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc60, #loc61])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc218)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc219)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc57)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc62)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc62)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc63)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc64)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc64)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc65)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc52)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %8 = cir.get_global @CWE675_Duplicate_Operations_on_Resource__open_11_good : !cir.ptr<!cir.func<!void ()>> loc(#loc220)
    cir.call @CWE675_Duplicate_Operations_on_Resource__open_11_good() : () -> () loc(#loc67)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc53)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc54)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %13 = cir.get_global @CWE675_Duplicate_Operations_on_Resource__open_11_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc221)
    cir.call @CWE675_Duplicate_Operations_on_Resource__open_11_bad() : () -> () loc(#loc71)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc55)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc74)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc222)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc222)
    cir.return %17 : !s32i loc(#loc222)
  } loc(#loc217)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc223)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc78)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc225)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc84)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc226)
    cir.br ^bb1 loc(#loc227)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc228)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc228)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc88)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc88)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc229)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc91)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc91)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc92)
    %10 = cir.const #cir.int<64> : !s32i loc(#loc93)
    %11 = cir.binop(or, %9, %10) : !s32i loc(#loc230)
    %12 = cir.const #cir.int<256> : !s32i loc(#loc94)
    %13 = cir.const #cir.int<128> : !s32i loc(#loc95)
    %14 = cir.binop(or, %12, %13) : !s32i loc(#loc231)
    %15 = cir.call @open(%8, %11, %14) : (!cir.ptr<!s8i>, !s32i, !s32i) -> !s32i loc(#loc96)
    cir.store %15, %0 : !s32i, !cir.ptr<!s32i> loc(#loc232)
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc99)
    %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc100)
    cir.br ^bb3 loc(#loc87)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc87)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc233)
  ^bb5:  // pred: ^bb4
    %18 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc234)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc234)
    %20 = cir.call %19() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc103)
    %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc103)
    cir.brcond %21 ^bb6, ^bb7 loc(#loc235)
  ^bb6:  // pred: ^bb5
    %22 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc78)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc108)
    cir.br ^bb8 loc(#loc106)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc102)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc102)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc80)
  } loc(#loc224)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc237)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc113)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc114)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc238)
    cir.br ^bb1 loc(#loc239)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc240)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc240)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc118)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc118)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc241)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc121)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc121)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc122)
    %10 = cir.const #cir.int<64> : !s32i loc(#loc123)
    %11 = cir.binop(or, %9, %10) : !s32i loc(#loc242)
    %12 = cir.const #cir.int<256> : !s32i loc(#loc124)
    %13 = cir.const #cir.int<128> : !s32i loc(#loc125)
    %14 = cir.binop(or, %12, %13) : !s32i loc(#loc243)
    %15 = cir.call @open(%8, %11, %14) : (!cir.ptr<!s8i>, !s32i, !s32i) -> !s32i loc(#loc126)
    cir.store %15, %0 : !s32i, !cir.ptr<!s32i> loc(#loc244)
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
    %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc130)
    cir.br ^bb3 loc(#loc117)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc117)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc245)
  ^bb5:  // pred: ^bb4
    %18 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc246)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc246)
    %20 = cir.call %19() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc133)
    %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc133)
    cir.brcond %21 ^bb6, ^bb7 loc(#loc247)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc132)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc132)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc110)
  } loc(#loc236)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"GoodSource_open.txt\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc136)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc249)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc141)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc142)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc250)
    cir.br ^bb1 loc(#loc251)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc252)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc252)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc146)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc146)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc253)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc151)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc151)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc152)
    cir.br ^bb4 loc(#loc149)
  ^bb3:  // pred: ^bb1
    %9 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc136)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc136)
    %11 = cir.const #cir.int<2> : !s32i loc(#loc153)
    %12 = cir.const #cir.int<64> : !s32i loc(#loc154)
    %13 = cir.binop(or, %11, %12) : !s32i loc(#loc254)
    %14 = cir.const #cir.int<256> : !s32i loc(#loc155)
    %15 = cir.const #cir.int<128> : !s32i loc(#loc156)
    %16 = cir.binop(or, %14, %15) : !s32i loc(#loc255)
    %17 = cir.call @open(%10, %13, %16) : (!cir.ptr<!s8i>, !s32i, !s32i) -> !s32i loc(#loc157)
    cir.store %17, %0 : !s32i, !cir.ptr<!s32i> loc(#loc256)
    cir.br ^bb4 loc(#loc145)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc145)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc257)
  ^bb6:  // pred: ^bb5
    %18 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc258)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc258)
    %20 = cir.call %19() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc162)
    %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc162)
    cir.brcond %21 ^bb7, ^bb8 loc(#loc259)
  ^bb7:  // pred: ^bb6
    %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc165)
    %23 = cir.call @close(%22) : (!s32i) -> !s32i loc(#loc166)
    cir.br ^bb8 loc(#loc161)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc161)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc138)
  } loc(#loc248)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc261)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc171)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc172)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc262)
    cir.br ^bb1 loc(#loc263)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc264)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc264)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc176)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc176)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc265)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc179)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc179)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc180)
    %10 = cir.const #cir.int<64> : !s32i loc(#loc181)
    %11 = cir.binop(or, %9, %10) : !s32i loc(#loc266)
    %12 = cir.const #cir.int<256> : !s32i loc(#loc182)
    %13 = cir.const #cir.int<128> : !s32i loc(#loc183)
    %14 = cir.binop(or, %12, %13) : !s32i loc(#loc267)
    %15 = cir.call @open(%8, %11, %14) : (!cir.ptr<!s8i>, !s32i, !s32i) -> !s32i loc(#loc184)
    cir.store %15, %0 : !s32i, !cir.ptr<!s32i> loc(#loc268)
    cir.br ^bb3 loc(#loc175)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc175)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc269)
  ^bb5:  // pred: ^bb4
    %16 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc270)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc270)
    %18 = cir.call %17() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc189)
    %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc189)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc271)
  ^bb6:  // pred: ^bb5
    %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc192)
    %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc193)
    cir.br ^bb7 loc(#loc188)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc188)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc168)
  } loc(#loc260)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE675_Duplicate_Operations_on_Resource/CWE675_Duplicate_Operations_on_Resource__open_11.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/fcntl.h":209:1)
#loc4 = loc("/usr/include/fcntl.h":209:56)
#loc5 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":37:21)
#loc6 = loc("/usr/include/unistd.h":358:1)
#loc7 = loc("/usr/include/unistd.h":358:27)
#loc8 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":31:1)
#loc9 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":46:1)
#loc10 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":33:5)
#loc11 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":33:9)
#loc12 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":34:13)
#loc13 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":34:12)
#loc14 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":34:5)
#loc15 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":35:5)
#loc16 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":40:5)
#loc17 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":35:8)
#loc18 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":35:26)
#loc19 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":36:5)
#loc20 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":37:43)
#loc21 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":37:50)
#loc22 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":37:59)
#loc23 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":37:67)
#loc24 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":37:16)
#loc25 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":37:9)
#loc26 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":37:75)
#loc27 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":39:15)
#loc28 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":39:9)
#loc29 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":41:5)
#loc30 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":45:5)
#loc31 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":41:8)
#loc32 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":41:26)
#loc33 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":42:5)
#loc34 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":44:15)
#loc35 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":44:9)
#loc36 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":134:1)
#loc37 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":140:1)
#loc38 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":136:5)
#loc39 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":136:14)
#loc40 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":137:5)
#loc41 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":137:14)
#loc42 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":138:5)
#loc43 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":138:14)
#loc44 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":139:5)
#loc45 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":139:14)
#loc46 = loc("/usr/include/stdlib.h":575:1)
#loc47 = loc("/usr/include/stdlib.h":575:41)
#loc48 = loc("/usr/include/time.h":76:1)
#loc49 = loc("/usr/include/time.h":76:38)
#loc50 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc51 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc52 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":156:15)
#loc53 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":158:15)
#loc54 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":161:15)
#loc55 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":163:15)
#loc56 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":151:1)
#loc57 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":166:1)
#loc62 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":152:1)
#loc63 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":154:27)
#loc64 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":154:22)
#loc65 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":154:5)
#loc66 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":156:5)
#loc67 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":157:5)
#loc68 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":157:59)
#loc69 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":158:5)
#loc70 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":161:5)
#loc71 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":162:5)
#loc72 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":162:58)
#loc73 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":163:5)
#loc74 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":165:12)
#loc75 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":165:5)
#loc76 = loc("../../testcasesupport/std_testcase_io.h":50:1)
#loc77 = loc("../../testcasesupport/std_testcase_io.h":50:24)
#loc78 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":66:19)
#loc79 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":53:1)
#loc80 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":74:1)
#loc81 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":55:5)
#loc82 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":55:9)
#loc83 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":56:13)
#loc84 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":56:12)
#loc85 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":56:5)
#loc86 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":57:5)
#loc87 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":62:5)
#loc88 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":57:8)
#loc89 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":57:26)
#loc90 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":58:5)
#loc91 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":59:21)
#loc92 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":59:43)
#loc93 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":59:50)
#loc94 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":59:59)
#loc95 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":59:67)
#loc96 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":59:16)
#loc97 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":59:9)
#loc98 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":59:75)
#loc99 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":61:15)
#loc100 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":61:9)
#loc101 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":63:5)
#loc102 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":73:5)
#loc103 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":63:8)
#loc104 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":63:27)
#loc105 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":64:5)
#loc106 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":67:5)
#loc107 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":69:5)
#loc108 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":66:9)
#loc109 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":77:1)
#loc110 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":93:1)
#loc111 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":79:5)
#loc112 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":79:9)
#loc113 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":80:13)
#loc114 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":80:12)
#loc115 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":80:5)
#loc116 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":81:5)
#loc117 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":86:5)
#loc118 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":81:8)
#loc119 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":81:26)
#loc120 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":82:5)
#loc121 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":83:21)
#loc122 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":83:43)
#loc123 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":83:50)
#loc124 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":83:59)
#loc125 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":83:67)
#loc126 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":83:16)
#loc127 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":83:9)
#loc128 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":83:75)
#loc129 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":85:15)
#loc130 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":85:9)
#loc131 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":87:5)
#loc132 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":92:5)
#loc133 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":87:8)
#loc134 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":87:26)
#loc135 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":88:5)
#loc136 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":108:21)
#loc137 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":96:1)
#loc138 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":115:1)
#loc139 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":98:5)
#loc140 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":98:9)
#loc141 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":99:13)
#loc142 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":99:12)
#loc143 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":99:5)
#loc144 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":100:5)
#loc145 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":109:5)
#loc146 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":100:8)
#loc147 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":100:27)
#loc148 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":101:5)
#loc149 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":104:5)
#loc150 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":106:5)
#loc151 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":103:19)
#loc152 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":103:9)
#loc153 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":108:44)
#loc154 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":108:51)
#loc155 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":108:60)
#loc156 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":108:68)
#loc157 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":108:16)
#loc158 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":108:9)
#loc159 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":108:76)
#loc160 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":110:5)
#loc161 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":114:5)
#loc162 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":110:8)
#loc163 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":110:26)
#loc164 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":111:5)
#loc165 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":113:15)
#loc166 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":113:9)
#loc167 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":118:1)
#loc168 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":132:1)
#loc169 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":120:5)
#loc170 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":120:9)
#loc171 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":121:13)
#loc172 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":121:12)
#loc173 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":121:5)
#loc174 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":122:5)
#loc175 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":126:5)
#loc176 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":122:8)
#loc177 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":122:26)
#loc178 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":123:5)
#loc179 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":125:21)
#loc180 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":125:44)
#loc181 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":125:51)
#loc182 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":125:60)
#loc183 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":125:68)
#loc184 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":125:16)
#loc185 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":125:9)
#loc186 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":125:76)
#loc187 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":127:5)
#loc188 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":131:5)
#loc189 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":127:8)
#loc190 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":127:26)
#loc191 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":128:5)
#loc192 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":130:15)
#loc193 = loc("CWE675_Duplicate_Operations_on_Resource__open_11.c":130:9)
#loc194 = loc(fused[#loc1, #loc2])
#loc195 = loc(fused[#loc3, #loc4])
#loc196 = loc(fused[#loc6, #loc7])
#loc197 = loc(fused[#loc8, #loc9])
#loc198 = loc(fused[#loc10, #loc11])
#loc199 = loc(fused[#loc14, #loc12])
#loc200 = loc(fused[#loc15, #loc16])
#loc201 = loc(fused[#loc17, #loc18])
#loc202 = loc(fused[#loc19, #loc16])
#loc203 = loc(fused[#loc20, #loc21])
#loc204 = loc(fused[#loc22, #loc23])
#loc205 = loc(fused[#loc25, #loc26])
#loc206 = loc(fused[#loc29, #loc30])
#loc207 = loc(fused[#loc31, #loc32])
#loc208 = loc(fused[#loc33, #loc30])
#loc209 = loc(fused[#loc36, #loc37])
#loc210 = loc(fused[#loc38, #loc39])
#loc211 = loc(fused[#loc40, #loc41])
#loc212 = loc(fused[#loc42, #loc43])
#loc213 = loc(fused[#loc44, #loc45])
#loc214 = loc(fused[#loc46, #loc47])
#loc215 = loc(fused[#loc48, #loc49])
#loc216 = loc(fused[#loc50, #loc51])
#loc217 = loc(fused[#loc56, #loc57])
#loc220 = loc(fused[#loc67, #loc68])
#loc221 = loc(fused[#loc71, #loc72])
#loc222 = loc(fused[#loc75, #loc74])
#loc223 = loc(fused[#loc76, #loc77])
#loc224 = loc(fused[#loc79, #loc80])
#loc225 = loc(fused[#loc81, #loc82])
#loc226 = loc(fused[#loc85, #loc83])
#loc227 = loc(fused[#loc86, #loc87])
#loc228 = loc(fused[#loc88, #loc89])
#loc229 = loc(fused[#loc90, #loc87])
#loc230 = loc(fused[#loc92, #loc93])
#loc231 = loc(fused[#loc94, #loc95])
#loc232 = loc(fused[#loc97, #loc98])
#loc233 = loc(fused[#loc101, #loc102])
#loc234 = loc(fused[#loc103, #loc104])
#loc235 = loc(fused[#loc105, #loc106, #loc107, #loc102])
#loc236 = loc(fused[#loc109, #loc110])
#loc237 = loc(fused[#loc111, #loc112])
#loc238 = loc(fused[#loc115, #loc113])
#loc239 = loc(fused[#loc116, #loc117])
#loc240 = loc(fused[#loc118, #loc119])
#loc241 = loc(fused[#loc120, #loc117])
#loc242 = loc(fused[#loc122, #loc123])
#loc243 = loc(fused[#loc124, #loc125])
#loc244 = loc(fused[#loc127, #loc128])
#loc245 = loc(fused[#loc131, #loc132])
#loc246 = loc(fused[#loc133, #loc134])
#loc247 = loc(fused[#loc135, #loc132])
#loc248 = loc(fused[#loc137, #loc138])
#loc249 = loc(fused[#loc139, #loc140])
#loc250 = loc(fused[#loc143, #loc141])
#loc251 = loc(fused[#loc144, #loc145])
#loc252 = loc(fused[#loc146, #loc147])
#loc253 = loc(fused[#loc148, #loc149, #loc150, #loc145])
#loc254 = loc(fused[#loc153, #loc154])
#loc255 = loc(fused[#loc155, #loc156])
#loc256 = loc(fused[#loc158, #loc159])
#loc257 = loc(fused[#loc160, #loc161])
#loc258 = loc(fused[#loc162, #loc163])
#loc259 = loc(fused[#loc164, #loc161])
#loc260 = loc(fused[#loc167, #loc168])
#loc261 = loc(fused[#loc169, #loc170])
#loc262 = loc(fused[#loc173, #loc171])
#loc263 = loc(fused[#loc174, #loc175])
#loc264 = loc(fused[#loc176, #loc177])
#loc265 = loc(fused[#loc178, #loc175])
#loc266 = loc(fused[#loc180, #loc181])
#loc267 = loc(fused[#loc182, #loc183])
#loc268 = loc(fused[#loc185, #loc186])
#loc269 = loc(fused[#loc187, #loc188])
#loc270 = loc(fused[#loc189, #loc190])
#loc271 = loc(fused[#loc191, #loc188])
