!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.global external dsolocal @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_badGlobal = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc184)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc185)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc186)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc187)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_badSink(!cir.ptr<!void>) loc(#loc188)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc190)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc191)
    cir.scope {
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc193)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc21)
      %7 = cir.const #cir.int<50> : !s32i loc(#loc22)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc22)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc194)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc195)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc196)
      cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc193)
      cir.scope {
        %28 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
        %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
        %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc28)
        %31 = cir.cmp(eq, %28, %30) : !cir.ptr<!s32i>, !cir.bool loc(#loc198)
        cir.if %31 {
          %32 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc30)
          %33 = cir.const #cir.int<1> : !s32i loc(#loc31)
          %34 = cir.unary(minus, %33) nsw : !s32i, !s32i loc(#loc32)
          cir.call @exit(%34) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
        } loc(#loc199)
      } loc(#loc197)
      %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc33)
      %14 = cir.const #cir.int<65> : !s32i loc(#loc34)
      %15 = cir.const #cir.int<50> : !s32i loc(#loc35)
      %16 = cir.const #cir.int<1> : !s32i loc(#loc36)
      %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc35)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc35)
      %19 = cir.call @wmemset(%13, %14, %18) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc37)
      %20 = cir.const #cir.int<0> : !s32i loc(#loc38)
      %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc39)
      %22 = cir.const #cir.int<50> : !s32i loc(#loc40)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc41)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc40)
      %25 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc42)
      cir.store %20, %25 : !s32i, !cir.ptr<!s32i> loc(#loc200)
      %26 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc43)
      cir.store %27, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc201)
    } loc(#loc192)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %3 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_badGlobal : !cir.ptr<!s32i> loc(#loc184)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc47)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_badSink(%4) : (!cir.ptr<!void>) -> () loc(#loc48)
    cir.return loc(#loc12)
  } loc(#loc189)
  cir.global external dsolocal @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G1Global = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc203)
  cir.global external dsolocal @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G2Global = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc204)
  cir.global external dsolocal @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodG2BGlobal = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc205)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc207)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc57)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc208)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc59)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc209)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc61)
    cir.return loc(#loc56)
  } loc(#loc206)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G1Sink(!cir.ptr<!void>) loc(#loc210)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc212)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc69)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc213)
    cir.scope {
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc215)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc75)
      %7 = cir.const #cir.int<50> : !s32i loc(#loc76)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc76)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc216)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc217)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc75)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc218)
      cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc215)
      cir.scope {
        %28 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc81)
        %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc82)
        %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc82)
        %31 = cir.cmp(eq, %28, %30) : !cir.ptr<!s32i>, !cir.bool loc(#loc220)
        cir.if %31 {
          %32 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc84)
          %33 = cir.const #cir.int<1> : !s32i loc(#loc85)
          %34 = cir.unary(minus, %33) nsw : !s32i, !s32i loc(#loc86)
          cir.call @exit(%34) : (!s32i) -> () extra(#fn_attr) loc(#loc84)
        } loc(#loc221)
      } loc(#loc219)
      %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc87)
      %14 = cir.const #cir.int<65> : !s32i loc(#loc88)
      %15 = cir.const #cir.int<50> : !s32i loc(#loc89)
      %16 = cir.const #cir.int<1> : !s32i loc(#loc90)
      %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc89)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc89)
      %19 = cir.call @wmemset(%13, %14, %18) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc91)
      %20 = cir.const #cir.int<0> : !s32i loc(#loc92)
      %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc93)
      %22 = cir.const #cir.int<50> : !s32i loc(#loc94)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc95)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc94)
      %25 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc96)
      cir.store %20, %25 : !s32i, !cir.ptr<!s32i> loc(#loc222)
      %26 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc97)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc97)
      cir.store %27, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc223)
    } loc(#loc214)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc99)
    %3 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G1Global : !cir.ptr<!s32i> loc(#loc203)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc101)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G1Sink(%4) : (!cir.ptr<!void>) -> () loc(#loc102)
    cir.return loc(#loc66)
  } loc(#loc211)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G2Sink(!cir.ptr<!void>) loc(#loc225)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc227)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc109)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc228)
    cir.scope {
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc230)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc115)
      %7 = cir.const #cir.int<50> : !s32i loc(#loc116)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc116)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc231)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc232)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc115)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc233)
      cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc230)
      cir.scope {
        %28 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc121)
        %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc122)
        %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc122)
        %31 = cir.cmp(eq, %28, %30) : !cir.ptr<!s32i>, !cir.bool loc(#loc235)
        cir.if %31 {
          %32 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc124)
          %33 = cir.const #cir.int<1> : !s32i loc(#loc125)
          %34 = cir.unary(minus, %33) nsw : !s32i, !s32i loc(#loc126)
          cir.call @exit(%34) : (!s32i) -> () extra(#fn_attr) loc(#loc124)
        } loc(#loc236)
      } loc(#loc234)
      %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc127)
      %14 = cir.const #cir.int<65> : !s32i loc(#loc128)
      %15 = cir.const #cir.int<50> : !s32i loc(#loc129)
      %16 = cir.const #cir.int<1> : !s32i loc(#loc130)
      %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc129)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc129)
      %19 = cir.call @wmemset(%13, %14, %18) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc131)
      %20 = cir.const #cir.int<0> : !s32i loc(#loc132)
      %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc133)
      %22 = cir.const #cir.int<50> : !s32i loc(#loc134)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc135)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc134)
      %25 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc136)
      cir.store %20, %25 : !s32i, !cir.ptr<!s32i> loc(#loc237)
      %26 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc137)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc137)
      cir.store %27, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc238)
    } loc(#loc229)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc139)
    %3 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G2Global : !cir.ptr<!s32i> loc(#loc204)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc239)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc141)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G2Sink(%4) : (!cir.ptr<!void>) -> () loc(#loc142)
    cir.return loc(#loc106)
  } loc(#loc226)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodG2BSink(!cir.ptr<!void>) loc(#loc240)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc242)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc149)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc243)
    cir.scope {
      %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc245)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc155)
      %7 = cir.const #cir.int<50> : !s32i loc(#loc156)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc156)
      %9 = cir.const #cir.int<1> : !u64i loc(#loc246)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc247)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc155)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc248)
      cir.store %12, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc245)
      cir.scope {
        %29 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc161)
        %30 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc162)
        %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc162)
        %32 = cir.cmp(eq, %29, %31) : !cir.ptr<!s8i>, !cir.bool loc(#loc250)
        cir.if %32 {
          %33 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc164)
          %34 = cir.const #cir.int<1> : !s32i loc(#loc165)
          %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc166)
          cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc164)
        } loc(#loc251)
      } loc(#loc249)
      %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc167)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc167)
      %15 = cir.const #cir.int<65> : !s32i loc(#loc168)
      %16 = cir.const #cir.int<50> : !s32i loc(#loc169)
      %17 = cir.const #cir.int<1> : !s32i loc(#loc170)
      %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc169)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc169)
      cir.libc.memset %19 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc252)
      %20 = cir.const #cir.int<0> : !s32i loc(#loc173)
      %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc173)
      %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc174)
      %23 = cir.const #cir.int<50> : !s32i loc(#loc175)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc176)
      %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc175)
      %26 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc177)
      cir.store %21, %26 : !s8i, !cir.ptr<!s8i> loc(#loc253)
      %27 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc178)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc178)
      cir.store %28, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc254)
    } loc(#loc244)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc180)
    %3 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodG2BGlobal : !cir.ptr<!s32i> loc(#loc205)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc255)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc182)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodG2BSink(%4) : (!cir.ptr<!void>) -> () loc(#loc183)
    cir.return loc(#loc146)
  } loc(#loc241)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":25:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":25:62)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("/usr/include/wchar.h":296:1)
#loc8 = loc("/usr/include/wchar.h":296:65)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":27:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":27:70)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":29:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":43:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":31:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":31:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":32:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":32:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":33:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":40:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":34:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":34:71)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":34:46)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":34:53)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":34:56)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":34:70)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":35:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":35:46)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":35:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":35:30)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":35:36)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":35:37)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":35:43)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":35:42)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":36:17)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":36:32)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":36:38)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":36:41)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":36:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":37:31)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":37:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":37:23)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":37:26)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":37:27)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":39:24)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":39:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":41:62)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":41:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":42:58)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":42:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":50:1)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":50:67)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":51:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":51:67)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":52:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":52:66)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":111:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":116:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":113:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":113:14)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":114:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":114:14)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":115:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":115:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":55:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":55:75)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":57:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":71:1)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":59:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":59:12)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":60:12)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":60:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":61:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":68:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":62:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":62:71)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":62:46)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":62:53)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":62:56)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":62:70)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":63:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":63:46)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":63:13)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":63:30)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":63:36)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":63:37)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":63:43)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":63:42)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":64:17)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":64:32)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":64:38)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":64:41)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":64:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":65:31)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":65:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":65:23)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":65:26)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":65:27)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":67:24)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":67:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":69:67)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":69:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":70:63)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":70:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":74:1)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":74:75)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":76:1)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":90:1)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":78:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":78:12)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":79:12)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":79:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":80:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":87:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":81:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":81:71)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":81:46)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":81:53)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":81:56)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":81:70)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":82:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":82:46)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":82:13)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":82:30)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":82:36)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":82:37)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":82:43)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":82:42)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":83:17)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":83:32)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":83:38)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":83:41)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":83:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":84:31)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":84:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":84:23)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":84:26)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":84:27)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":86:24)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":86:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":88:67)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":88:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":89:63)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":89:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":93:1)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":93:74)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":95:1)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":109:1)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":97:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":97:12)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":98:12)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":98:5)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":99:5)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":106:5)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":100:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":100:63)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":100:41)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":100:48)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":100:51)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":100:62)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":101:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":101:47)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":101:13)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":101:31)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":101:37)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":101:38)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":101:44)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":101:43)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":102:16)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":102:32)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":102:37)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":102:40)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":102:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":102:41)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":103:32)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":103:9)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":103:24)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":103:27)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":103:28)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":105:24)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":105:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":107:66)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":107:5)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":108:62)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c":108:5)
#loc184 = loc(fused[#loc1, #loc2])
#loc185 = loc(fused[#loc3, #loc4])
#loc186 = loc(fused[#loc5, #loc6])
#loc187 = loc(fused[#loc7, #loc8])
#loc188 = loc(fused[#loc9, #loc10])
#loc189 = loc(fused[#loc11, #loc12])
#loc190 = loc(fused[#loc13, #loc14])
#loc191 = loc(fused[#loc16, #loc15])
#loc192 = loc(fused[#loc17, #loc18])
#loc193 = loc(fused[#loc19, #loc20])
#loc194 = loc(fused[#loc23, #loc24])
#loc195 = loc(fused[#loc22, #loc24])
#loc196 = loc(fused[#loc21, #loc20])
#loc197 = loc(fused[#loc25, #loc26])
#loc198 = loc(fused[#loc27, #loc28])
#loc199 = loc(fused[#loc29, #loc26])
#loc200 = loc(fused[#loc39, #loc38])
#loc201 = loc(fused[#loc44, #loc43])
#loc202 = loc(fused[#loc46, #loc45])
#loc203 = loc(fused[#loc49, #loc50])
#loc204 = loc(fused[#loc51, #loc52])
#loc205 = loc(fused[#loc53, #loc54])
#loc206 = loc(fused[#loc55, #loc56])
#loc207 = loc(fused[#loc57, #loc58])
#loc208 = loc(fused[#loc59, #loc60])
#loc209 = loc(fused[#loc61, #loc62])
#loc210 = loc(fused[#loc63, #loc64])
#loc211 = loc(fused[#loc65, #loc66])
#loc212 = loc(fused[#loc67, #loc68])
#loc213 = loc(fused[#loc70, #loc69])
#loc214 = loc(fused[#loc71, #loc72])
#loc215 = loc(fused[#loc73, #loc74])
#loc216 = loc(fused[#loc77, #loc78])
#loc217 = loc(fused[#loc76, #loc78])
#loc218 = loc(fused[#loc75, #loc74])
#loc219 = loc(fused[#loc79, #loc80])
#loc220 = loc(fused[#loc81, #loc82])
#loc221 = loc(fused[#loc83, #loc80])
#loc222 = loc(fused[#loc93, #loc92])
#loc223 = loc(fused[#loc98, #loc97])
#loc224 = loc(fused[#loc100, #loc99])
#loc225 = loc(fused[#loc103, #loc104])
#loc226 = loc(fused[#loc105, #loc106])
#loc227 = loc(fused[#loc107, #loc108])
#loc228 = loc(fused[#loc110, #loc109])
#loc229 = loc(fused[#loc111, #loc112])
#loc230 = loc(fused[#loc113, #loc114])
#loc231 = loc(fused[#loc117, #loc118])
#loc232 = loc(fused[#loc116, #loc118])
#loc233 = loc(fused[#loc115, #loc114])
#loc234 = loc(fused[#loc119, #loc120])
#loc235 = loc(fused[#loc121, #loc122])
#loc236 = loc(fused[#loc123, #loc120])
#loc237 = loc(fused[#loc133, #loc132])
#loc238 = loc(fused[#loc138, #loc137])
#loc239 = loc(fused[#loc140, #loc139])
#loc240 = loc(fused[#loc143, #loc144])
#loc241 = loc(fused[#loc145, #loc146])
#loc242 = loc(fused[#loc147, #loc148])
#loc243 = loc(fused[#loc150, #loc149])
#loc244 = loc(fused[#loc151, #loc152])
#loc245 = loc(fused[#loc153, #loc154])
#loc246 = loc(fused[#loc157, #loc158])
#loc247 = loc(fused[#loc156, #loc158])
#loc248 = loc(fused[#loc155, #loc154])
#loc249 = loc(fused[#loc159, #loc160])
#loc250 = loc(fused[#loc161, #loc162])
#loc251 = loc(fused[#loc163, #loc160])
#loc252 = loc(fused[#loc171, #loc172])
#loc253 = loc(fused[#loc174, #loc173])
#loc254 = loc(fused[#loc179, #loc178])
#loc255 = loc(fused[#loc181, #loc180])
