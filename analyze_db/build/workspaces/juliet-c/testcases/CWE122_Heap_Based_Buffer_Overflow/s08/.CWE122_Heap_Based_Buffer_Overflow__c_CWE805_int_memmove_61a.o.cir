!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61b_badSource(!cir.ptr<!s32i>) -> !cir.ptr<!s32i> loc(#loc67)
  cir.func private @printIntLine(!s32i) loc(#loc68)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc69)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc71)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc11)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc72)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc13)
    %3 = cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61b_badSource(%2) : (!cir.ptr<!s32i>) -> !cir.ptr<!s32i> loc(#loc14)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc73)
    cir.scope {
      %4 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc75)
      %5 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc75)
      cir.store %5, %4 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc75)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc21)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc21)
      %8 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc22)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc22)
      %10 = cir.const #cir.int<100> : !s32i loc(#loc23)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc23)
      %12 = cir.const #cir.int<4> : !u64i loc(#loc76)
      %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc77)
      cir.libc.memmove %13 bytes from %9 to %7 : !cir.ptr<!void>, !u64i loc(#loc78)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc28)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc29)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc30)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc28)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc31)
      %18 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc32)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc33)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc33)
      cir.call @free(%20) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc32)
    } loc(#loc74)
    cir.return loc(#loc8)
  } loc(#loc70)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc80)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    cir.return loc(#loc35)
  } loc(#loc79)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61b_goodG2BSource(!cir.ptr<!s32i>) -> !cir.ptr<!s32i> loc(#loc81)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc83)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc44)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc84)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc46)
    %3 = cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61b_goodG2BSource(%2) : (!cir.ptr<!s32i>) -> !cir.ptr<!s32i> loc(#loc47)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc85)
    cir.scope {
      %4 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc87)
      %5 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc87)
      cir.store %5, %4 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc87)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc54)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc54)
      %8 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc55)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc55)
      %10 = cir.const #cir.int<100> : !s32i loc(#loc56)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc56)
      %12 = cir.const #cir.int<4> : !u64i loc(#loc88)
      %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc89)
      cir.libc.memmove %13 bytes from %9 to %7 : !cir.ptr<!void>, !u64i loc(#loc90)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc61)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc62)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc63)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc61)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc64)
      %18 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc65)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc66)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc66)
      cir.call @free(%20) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc65)
    } loc(#loc86)
    cir.return loc(#loc41)
  } loc(#loc82)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":22:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":22:87)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("/usr/include/stdlib.h":687:1)
#loc6 = loc("/usr/include/stdlib.h":687:32)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":24:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":36:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":26:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":26:11)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":27:12)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":27:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":28:82)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":28:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":28:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":28:86)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":29:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":35:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":30:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":30:29)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":32:17)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":32:23)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":32:31)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":32:35)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":32:45)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":32:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":32:46)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":33:22)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":33:27)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":33:28)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":33:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":34:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":34:14)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":59:1)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":62:1)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":61:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":61:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":43:1)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":43:91)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":45:1)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":57:1)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":47:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":47:11)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":48:12)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":48:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":49:86)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":49:12)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":49:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":49:90)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":50:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":56:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":51:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":51:29)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":53:17)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":53:23)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":53:31)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":53:35)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":53:45)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":53:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":53:46)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":54:22)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":54:27)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":54:28)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":54:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":55:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c":55:14)
#loc67 = loc(fused[#loc1, #loc2])
#loc68 = loc(fused[#loc3, #loc4])
#loc69 = loc(fused[#loc5, #loc6])
#loc70 = loc(fused[#loc7, #loc8])
#loc71 = loc(fused[#loc9, #loc10])
#loc72 = loc(fused[#loc12, #loc11])
#loc73 = loc(fused[#loc15, #loc16])
#loc74 = loc(fused[#loc17, #loc18])
#loc75 = loc(fused[#loc19, #loc20])
#loc76 = loc(fused[#loc24, #loc25])
#loc77 = loc(fused[#loc23, #loc25])
#loc78 = loc(fused[#loc26, #loc27])
#loc79 = loc(fused[#loc34, #loc35])
#loc80 = loc(fused[#loc36, #loc37])
#loc81 = loc(fused[#loc38, #loc39])
#loc82 = loc(fused[#loc40, #loc41])
#loc83 = loc(fused[#loc42, #loc43])
#loc84 = loc(fused[#loc45, #loc44])
#loc85 = loc(fused[#loc48, #loc49])
#loc86 = loc(fused[#loc50, #loc51])
#loc87 = loc(fused[#loc52, #loc53])
#loc88 = loc(fused[#loc57, #loc58])
#loc89 = loc(fused[#loc56, #loc58])
#loc90 = loc(fused[#loc59, #loc60])
