!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fgets_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc224)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc225)
  cir.func private  @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc226)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc227)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @printIntLine(!s32i) loc(#loc228)
  cir.func no_proto  @CWE369_Divide_by_Zero__float_fgets_02_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc230)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc16)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc231)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc20)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc20)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc235)
          cir.scope {
            %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc28)
            %6 = cir.const #cir.int<20> : !s32i loc(#loc29)
            %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc225)
            %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc30)
            %9 = cir.call @fgets(%5, %6, %8) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc31)
            %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc32)
            %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc32)
            %12 = cir.cmp(ne, %9, %11) : !cir.ptr<!s8i>, !s32i loc(#loc237)
            %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc33)
            cir.if %13 {
              %14 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc37)
              %15 = cir.call @atof(%14) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc38)
              %16 = cir.cast(floating, %15 : !cir.double), !cir.float loc(#loc38)
              cir.store %16, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc239)
            } else {
              %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc41)
            } loc(#loc238)
          } loc(#loc236)
        } loc(#loc234)
      } loc(#loc233)
    } loc(#loc232)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc44)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc44)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc243)
          %5 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc50)
          %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc51)
          %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc51)
          %8 = cir.binop(div, %5, %7) : !cir.double loc(#loc244)
          %9 = cir.cast(float_to_int, %8 : !cir.double), !s32i loc(#loc244)
          cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc243)
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc52)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc53)
        } loc(#loc242)
      } loc(#loc241)
    } loc(#loc240)
    cir.return loc(#loc13)
  } loc(#loc229)
  cir.func no_proto  @CWE369_Divide_by_Zero__float_fgets_02_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc246)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc56)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc247)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc248)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc60)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc249)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc62)
    cir.return loc(#loc55)
  } loc(#loc245)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc64)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc65)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc251)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc70)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc252)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc74)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc74)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc256)
          cir.scope {
            %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc82)
            %6 = cir.const #cir.int<20> : !s32i loc(#loc83)
            %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc225)
            %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc84)
            %9 = cir.call @fgets(%5, %6, %8) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc85)
            %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc86)
            %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc86)
            %12 = cir.cmp(ne, %9, %11) : !cir.ptr<!s8i>, !s32i loc(#loc258)
            %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc87)
            cir.if %13 {
              %14 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc91)
              %15 = cir.call @atof(%14) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc92)
              %16 = cir.cast(floating, %15 : !cir.double), !cir.float loc(#loc92)
              cir.store %16, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc260)
            } else {
              %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc95)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc95)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc96)
            } loc(#loc259)
          } loc(#loc257)
        } loc(#loc255)
      } loc(#loc254)
    } loc(#loc253)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc99)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc99)
      cir.if %3 {
        %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc64)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc64)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc103)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc106)
          %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc106)
          %6 = cir.fabs %5 : !cir.double loc(#loc106)
          %7 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc107)
          %8 = cir.cmp(gt, %6, %7) : !cir.double, !s32i loc(#loc264)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc109)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc266)
            %11 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc115)
            %12 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc116)
            %13 = cir.cast(floating, %12 : !cir.float), !cir.double loc(#loc116)
            %14 = cir.binop(div, %11, %13) : !cir.double loc(#loc267)
            %15 = cir.cast(float_to_int, %14 : !cir.double), !s32i loc(#loc267)
            cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc266)
            %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc117)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc118)
          } else {
            %10 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc65)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc65)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc119)
          } loc(#loc265)
        } loc(#loc263)
      } loc(#loc262)
    } loc(#loc261)
    cir.return loc(#loc67)
  } loc(#loc250)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc269)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc124)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc270)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc128)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc128)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc274)
          cir.scope {
            %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc136)
            %6 = cir.const #cir.int<20> : !s32i loc(#loc137)
            %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc225)
            %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc138)
            %9 = cir.call @fgets(%5, %6, %8) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc139)
            %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc140)
            %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc140)
            %12 = cir.cmp(ne, %9, %11) : !cir.ptr<!s8i>, !s32i loc(#loc276)
            %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc141)
            cir.if %13 {
              %14 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc145)
              %15 = cir.call @atof(%14) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc146)
              %16 = cir.cast(floating, %15 : !cir.double), !cir.float loc(#loc146)
              cir.store %16, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc278)
            } else {
              %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc149)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc149)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc150)
            } loc(#loc277)
          } loc(#loc275)
        } loc(#loc273)
      } loc(#loc272)
    } loc(#loc271)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc153)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc153)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc157)
          %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc157)
          %6 = cir.fabs %5 : !cir.double loc(#loc157)
          %7 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc158)
          %8 = cir.cmp(gt, %6, %7) : !cir.double, !s32i loc(#loc282)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc160)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc284)
            %11 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc166)
            %12 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc167)
            %13 = cir.cast(floating, %12 : !cir.float), !cir.double loc(#loc167)
            %14 = cir.binop(div, %11, %13) : !cir.double loc(#loc285)
            %15 = cir.cast(float_to_int, %14 : !cir.double), !s32i loc(#loc285)
            cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc284)
            %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc168)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc169)
          } else {
            %10 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc170)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc170)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc171)
          } loc(#loc283)
        } loc(#loc281)
      } loc(#loc280)
    } loc(#loc279)
    cir.return loc(#loc121)
  } loc(#loc268)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc287)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc176)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc288)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc180)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc180)
      cir.if %3 {
        %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc184)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc184)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc185)
      } else {
        %4 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc186)
        cir.store %4, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc291)
      } loc(#loc290)
    } loc(#loc289)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc190)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc190)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc295)
          %5 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc196)
          %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc197)
          %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc197)
          %8 = cir.binop(div, %5, %7) : !cir.double loc(#loc296)
          %9 = cir.cast(float_to_int, %8 : !cir.double), !s32i loc(#loc296)
          cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc295)
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc198)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc199)
        } loc(#loc294)
      } loc(#loc293)
    } loc(#loc292)
    cir.return loc(#loc173)
  } loc(#loc286)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc298)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc204)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc299)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc208)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc208)
      cir.if %3 {
        %4 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc210)
        cir.store %4, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc302)
      } loc(#loc301)
    } loc(#loc300)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc214)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc214)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc306)
          %5 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc220)
          %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc221)
          %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc221)
          %8 = cir.binop(div, %5, %7) : !cir.double loc(#loc307)
          %9 = cir.cast(float_to_int, %8 : !cir.double), !s32i loc(#loc307)
          cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc306)
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc222)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc223)
        } loc(#loc305)
      } loc(#loc304)
    } loc(#loc303)
    cir.return loc(#loc201)
  } loc(#loc297)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fgets_02.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":102:1)
#loc6 = loc("/usr/include/stdlib.h":103:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":43:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":26:1)
#loc13 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":55:1)
#loc14 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":28:5)
#loc15 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":28:11)
#loc16 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":30:12)
#loc17 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":30:5)
#loc18 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":31:5)
#loc19 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":46:5)
#loc20 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":31:8)
#loc21 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":32:5)
#loc22 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":33:9)
#loc23 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":45:9)
#loc24 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":34:13)
#loc25 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":34:45)
#loc26 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":36:13)
#loc27 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":44:13)
#loc28 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":36:23)
#loc29 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":36:36)
#loc30 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":36:53)
#loc31 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":36:17)
#loc32 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":36:63)
#loc33 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":36:60)
#loc34 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":37:13)
#loc35 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":40:13)
#loc36 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":42:13)
#loc37 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":39:36)
#loc38 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":39:31)
#loc39 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":39:17)
#loc40 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":39:47)
#loc41 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":43:17)
#loc42 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":47:5)
#loc43 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":54:5)
#loc44 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":47:8)
#loc45 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":48:5)
#loc46 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":49:9)
#loc47 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":53:9)
#loc48 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":51:13)
#loc49 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":51:44)
#loc50 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":51:32)
#loc51 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":51:40)
#loc52 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":52:26)
#loc53 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":52:13)
#loc54 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":187:1)
#loc55 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":193:1)
#loc56 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":189:5)
#loc57 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":189:14)
#loc58 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":190:5)
#loc59 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":190:14)
#loc60 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":191:5)
#loc61 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":191:14)
#loc62 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":192:5)
#loc63 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":192:14)
#loc64 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":86:19)
#loc65 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":98:23)
#loc66 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":62:1)
#loc67 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":101:1)
#loc68 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":64:5)
#loc69 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":64:11)
#loc70 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":66:12)
#loc71 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":66:5)
#loc72 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":67:5)
#loc73 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":82:5)
#loc74 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":67:8)
#loc75 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":68:5)
#loc76 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":69:9)
#loc77 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":81:9)
#loc78 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":70:13)
#loc79 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":70:45)
#loc80 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":72:13)
#loc81 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":80:13)
#loc82 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":72:23)
#loc83 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":72:36)
#loc84 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":72:53)
#loc85 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":72:17)
#loc86 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":72:63)
#loc87 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":72:60)
#loc88 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":73:13)
#loc89 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":76:13)
#loc90 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":78:13)
#loc91 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":75:36)
#loc92 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":75:31)
#loc93 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":75:17)
#loc94 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":75:47)
#loc95 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":79:27)
#loc96 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":79:17)
#loc97 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":83:5)
#loc98 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":100:5)
#loc99 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":83:8)
#loc100 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":84:5)
#loc101 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":87:5)
#loc102 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":89:5)
#loc103 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":86:9)
#loc104 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":91:9)
#loc105 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":99:9)
#loc106 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":91:17)
#loc107 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":91:25)
#loc108 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":91:12)
#loc109 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":91:23)
#loc110 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":92:9)
#loc111 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":95:9)
#loc112 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":97:9)
#loc113 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":93:13)
#loc114 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":93:44)
#loc115 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":93:32)
#loc116 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":93:40)
#loc117 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":94:26)
#loc118 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":94:13)
#loc119 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":98:13)
#loc120 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":104:1)
#loc121 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":138:1)
#loc122 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":106:5)
#loc123 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":106:11)
#loc124 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":108:12)
#loc125 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":108:5)
#loc126 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":109:5)
#loc127 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":124:5)
#loc128 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":109:8)
#loc129 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":110:5)
#loc130 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":111:9)
#loc131 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":123:9)
#loc132 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":112:13)
#loc133 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":112:45)
#loc134 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":114:13)
#loc135 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":122:13)
#loc136 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":114:23)
#loc137 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":114:36)
#loc138 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":114:53)
#loc139 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":114:17)
#loc140 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":114:63)
#loc141 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":114:60)
#loc142 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":115:13)
#loc143 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":118:13)
#loc144 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":120:13)
#loc145 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":117:36)
#loc146 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":117:31)
#loc147 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":117:17)
#loc148 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":117:47)
#loc149 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":121:27)
#loc150 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":121:17)
#loc151 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":125:5)
#loc152 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":137:5)
#loc153 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":125:8)
#loc154 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":126:5)
#loc155 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":128:9)
#loc156 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":136:9)
#loc157 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":128:17)
#loc158 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":128:25)
#loc159 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":128:12)
#loc160 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":128:23)
#loc161 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":129:9)
#loc162 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":132:9)
#loc163 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":134:9)
#loc164 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":130:13)
#loc165 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":130:44)
#loc166 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":130:32)
#loc167 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":130:40)
#loc168 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":131:26)
#loc169 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":131:13)
#loc170 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":135:23)
#loc171 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":135:13)
#loc172 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":141:1)
#loc173 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":164:1)
#loc174 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":143:5)
#loc175 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":143:11)
#loc176 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":145:12)
#loc177 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":145:5)
#loc178 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":146:5)
#loc179 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":155:5)
#loc180 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":146:8)
#loc181 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":147:5)
#loc182 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":150:5)
#loc183 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":152:5)
#loc184 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":149:19)
#loc185 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":149:9)
#loc186 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":154:16)
#loc187 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":154:9)
#loc188 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":156:5)
#loc189 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":163:5)
#loc190 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":156:8)
#loc191 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":157:5)
#loc192 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":158:9)
#loc193 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":162:9)
#loc194 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":160:13)
#loc195 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":160:44)
#loc196 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":160:32)
#loc197 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":160:40)
#loc198 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":161:26)
#loc199 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":161:13)
#loc200 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":167:1)
#loc201 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":185:1)
#loc202 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":169:5)
#loc203 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":169:11)
#loc204 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":171:12)
#loc205 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":171:5)
#loc206 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":172:5)
#loc207 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":176:5)
#loc208 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":172:8)
#loc209 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":173:5)
#loc210 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":175:16)
#loc211 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":175:9)
#loc212 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":177:5)
#loc213 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":184:5)
#loc214 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":177:8)
#loc215 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":178:5)
#loc216 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":179:9)
#loc217 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":183:9)
#loc218 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":181:13)
#loc219 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":181:44)
#loc220 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":181:32)
#loc221 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":181:40)
#loc222 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":182:26)
#loc223 = loc("CWE369_Divide_by_Zero__float_fgets_02.c":182:13)
#loc224 = loc(fused[#loc1, #loc2])
#loc225 = loc(fused[#loc3, #loc4])
#loc226 = loc(fused[#loc5, #loc6])
#loc227 = loc(fused[#loc7, #loc8])
#loc228 = loc(fused[#loc10, #loc11])
#loc229 = loc(fused[#loc12, #loc13])
#loc230 = loc(fused[#loc14, #loc15])
#loc231 = loc(fused[#loc17, #loc16])
#loc232 = loc(fused[#loc18, #loc19])
#loc233 = loc(fused[#loc21, #loc19])
#loc234 = loc(fused[#loc22, #loc23])
#loc235 = loc(fused[#loc24, #loc25])
#loc236 = loc(fused[#loc26, #loc27])
#loc237 = loc(fused[#loc31, #loc32])
#loc238 = loc(fused[#loc34, #loc35, #loc36, #loc27])
#loc239 = loc(fused[#loc39, #loc40])
#loc240 = loc(fused[#loc42, #loc43])
#loc241 = loc(fused[#loc45, #loc43])
#loc242 = loc(fused[#loc46, #loc47])
#loc243 = loc(fused[#loc48, #loc49])
#loc244 = loc(fused[#loc50, #loc51])
#loc245 = loc(fused[#loc54, #loc55])
#loc246 = loc(fused[#loc56, #loc57])
#loc247 = loc(fused[#loc58, #loc59])
#loc248 = loc(fused[#loc60, #loc61])
#loc249 = loc(fused[#loc62, #loc63])
#loc250 = loc(fused[#loc66, #loc67])
#loc251 = loc(fused[#loc68, #loc69])
#loc252 = loc(fused[#loc71, #loc70])
#loc253 = loc(fused[#loc72, #loc73])
#loc254 = loc(fused[#loc75, #loc73])
#loc255 = loc(fused[#loc76, #loc77])
#loc256 = loc(fused[#loc78, #loc79])
#loc257 = loc(fused[#loc80, #loc81])
#loc258 = loc(fused[#loc85, #loc86])
#loc259 = loc(fused[#loc88, #loc89, #loc90, #loc81])
#loc260 = loc(fused[#loc93, #loc94])
#loc261 = loc(fused[#loc97, #loc98])
#loc262 = loc(fused[#loc100, #loc101, #loc102, #loc98])
#loc263 = loc(fused[#loc104, #loc105])
#loc264 = loc(fused[#loc108, #loc107])
#loc265 = loc(fused[#loc110, #loc111, #loc112, #loc105])
#loc266 = loc(fused[#loc113, #loc114])
#loc267 = loc(fused[#loc115, #loc116])
#loc268 = loc(fused[#loc120, #loc121])
#loc269 = loc(fused[#loc122, #loc123])
#loc270 = loc(fused[#loc125, #loc124])
#loc271 = loc(fused[#loc126, #loc127])
#loc272 = loc(fused[#loc129, #loc127])
#loc273 = loc(fused[#loc130, #loc131])
#loc274 = loc(fused[#loc132, #loc133])
#loc275 = loc(fused[#loc134, #loc135])
#loc276 = loc(fused[#loc139, #loc140])
#loc277 = loc(fused[#loc142, #loc143, #loc144, #loc135])
#loc278 = loc(fused[#loc147, #loc148])
#loc279 = loc(fused[#loc151, #loc152])
#loc280 = loc(fused[#loc154, #loc152])
#loc281 = loc(fused[#loc155, #loc156])
#loc282 = loc(fused[#loc159, #loc158])
#loc283 = loc(fused[#loc161, #loc162, #loc163, #loc156])
#loc284 = loc(fused[#loc164, #loc165])
#loc285 = loc(fused[#loc166, #loc167])
#loc286 = loc(fused[#loc172, #loc173])
#loc287 = loc(fused[#loc174, #loc175])
#loc288 = loc(fused[#loc177, #loc176])
#loc289 = loc(fused[#loc178, #loc179])
#loc290 = loc(fused[#loc181, #loc182, #loc183, #loc179])
#loc291 = loc(fused[#loc187, #loc186])
#loc292 = loc(fused[#loc188, #loc189])
#loc293 = loc(fused[#loc191, #loc189])
#loc294 = loc(fused[#loc192, #loc193])
#loc295 = loc(fused[#loc194, #loc195])
#loc296 = loc(fused[#loc196, #loc197])
#loc297 = loc(fused[#loc200, #loc201])
#loc298 = loc(fused[#loc202, #loc203])
#loc299 = loc(fused[#loc205, #loc204])
#loc300 = loc(fused[#loc206, #loc207])
#loc301 = loc(fused[#loc209, #loc207])
#loc302 = loc(fused[#loc211, #loc210])
#loc303 = loc(fused[#loc212, #loc213])
#loc304 = loc(fused[#loc215, #loc213])
#loc305 = loc(fused[#loc216, #loc217])
#loc306 = loc(fused[#loc218, #loc219])
#loc307 = loc(fused[#loc220, #loc221])
