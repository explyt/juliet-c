!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":89:28)
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_square_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc142)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc143)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc144)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc145)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc146)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_square_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc148)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc149)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc150)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc20)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc151)
    cir.br ^bb1 loc(#loc152)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc152)
  ^bb2:  // 2 preds: ^bb1, ^bb12
    %4 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc24)
    cir.brcond %5 ^bb3, ^bb13 loc(#loc24)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc153)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc154)
  ^bb5:  // pred: ^bb4
    %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc148)
    cir.store %6, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc148)
    cir.br ^bb6 loc(#loc155)
  ^bb6:  // pred: ^bb5
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc30)
    %8 = cir.const #cir.int<3> : !s32i loc(#loc31)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc31)
    %10 = cir.const #cir.int<4> : !u64i loc(#loc31)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc31)
    %12 = cir.const #cir.int<2> : !s32i loc(#loc31)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc31)
    %14 = cir.binop(add, %11, %13) : !u64i loc(#loc31)
    %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc31)
    %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc143)
    %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc32)
    %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc33)
    %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc34)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc34)
    %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc156)
    cir.brcond %21 ^bb7, ^bb8 loc(#loc157)
  ^bb7:  // pred: ^bb6
    %22 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc38)
    %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc39)
    cir.store %23, %2 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    cir.br ^bb9 loc(#loc36)
  ^bb8:  // pred: ^bb6
    %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc42)
    cir.br ^bb9 loc(#loc29)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc29)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc27)
  ^bb11:  // pred: ^bb10
    cir.br ^bb13 loc(#loc43)
  ^bb12:  // no predecessors
    cir.br ^bb2 loc(#loc23)
  ^bb13:  // 2 preds: ^bb2, ^bb11
    cir.br ^bb14 loc(#loc23)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc159)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc159)
  ^bb16:  // 2 preds: ^bb15, ^bb21
    %26 = cir.const #cir.int<1> : !s32i loc(#loc46)
    %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc46)
    cir.brcond %27 ^bb17, ^bb22 loc(#loc46)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc160)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc161)
  ^bb19:  // pred: ^bb18
    %28 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc50)
    %29 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %30 = cir.binop(mul, %28, %29) nsw : !s32i loc(#loc50)
    cir.store %30, %1 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    %31 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc52)
    cir.br ^bb20 loc(#loc49)
  ^bb20:  // pred: ^bb19
    cir.br ^bb22 loc(#loc53)
  ^bb21:  // no predecessors
    cir.br ^bb16 loc(#loc45)
  ^bb22:  // 2 preds: ^bb16, ^bb20
    cir.br ^bb23 loc(#loc45)
  ^bb23:  // pred: ^bb22
    cir.return loc(#loc13)
  } loc(#loc147)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_square_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc163)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc56)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc164)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc58)
    cir.return loc(#loc55)
  } loc(#loc162)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc61)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc166)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc167)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc168)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc70)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc169)
    cir.br ^bb1 loc(#loc170)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc170)
  ^bb2:  // 2 preds: ^bb1, ^bb12
    %4 = cir.const #cir.int<1> : !s32i loc(#loc74)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc74)
    cir.brcond %5 ^bb3, ^bb13 loc(#loc74)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc171)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc172)
  ^bb5:  // pred: ^bb4
    %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc166)
    cir.store %6, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc166)
    cir.br ^bb6 loc(#loc173)
  ^bb6:  // pred: ^bb5
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc80)
    %8 = cir.const #cir.int<3> : !s32i loc(#loc81)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc81)
    %10 = cir.const #cir.int<4> : !u64i loc(#loc81)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc81)
    %12 = cir.const #cir.int<2> : !s32i loc(#loc81)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc81)
    %14 = cir.binop(add, %11, %13) : !u64i loc(#loc81)
    %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc81)
    %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc143)
    %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc82)
    %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc83)
    %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc84)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc84)
    %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc174)
    cir.brcond %21 ^bb7, ^bb8 loc(#loc175)
  ^bb7:  // pred: ^bb6
    %22 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc88)
    %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc89)
    cir.store %23, %2 : !s32i, !cir.ptr<!s32i> loc(#loc176)
    cir.br ^bb9 loc(#loc86)
  ^bb8:  // pred: ^bb6
    %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc92)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc92)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    cir.br ^bb9 loc(#loc79)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc79)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc77)
  ^bb11:  // pred: ^bb10
    cir.br ^bb13 loc(#loc94)
  ^bb12:  // no predecessors
    cir.br ^bb2 loc(#loc73)
  ^bb13:  // 2 preds: ^bb2, ^bb11
    cir.br ^bb14 loc(#loc73)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc177)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc177)
  ^bb16:  // 2 preds: ^bb15, ^bb32
    %26 = cir.const #cir.int<1> : !s32i loc(#loc97)
    %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc97)
    cir.brcond %27 ^bb17, ^bb33 loc(#loc97)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc178)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc179)
  ^bb19:  // pred: ^bb18
    %28 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc101)
    %29 = cir.const #cir.int<2147483647> : !s32i loc(#loc102)
    %30 = cir.unary(minus, %29) nsw : !s32i, !s32i loc(#loc102)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc102)
    %32 = cir.binop(sub, %30, %31) nsw : !s32i loc(#loc102)
    %33 = cir.cmp(gt, %28, %32) : !s32i, !cir.bool loc(#loc180)
    cir.brcond %33 ^bb20, ^bb25 loc(#loc103)
  ^bb20:  // pred: ^bb19
    %34 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc104)
    %35 = cir.abs %34 poison : !s32i loc(#loc105)
    %36 = cir.cast(integral, %35 : !s32i), !s64i loc(#loc105)
    %37 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc106)
    %38 = cir.const #cir.int<2147483647> : !s32i loc(#loc107)
    %39 = cir.cast(int_to_float, %38 : !s32i), !cir.double loc(#loc107)
    %40 = cir.call @sqrt(%39) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc106)
    %41 = cir.cast(float_to_int, %40 : !cir.double), !s64i loc(#loc106)
    %42 = cir.cmp(lt, %36, %41) : !s64i, !cir.bool loc(#loc181)
    cir.brcond %42 ^bb21, ^bb22 loc(#loc103)
  ^bb21:  // pred: ^bb20
    %43 = cir.const #true loc(#loc103)
    cir.br ^bb23(%43 : !cir.bool) loc(#loc103)
  ^bb22:  // pred: ^bb20
    %44 = cir.const #false loc(#loc103)
    cir.br ^bb23(%44 : !cir.bool) loc(#loc103)
  ^bb23(%45: !cir.bool loc("CWE190_Integer_Overflow__int_fgets_square_16.c":89:28)):  // 2 preds: ^bb21, ^bb22
    cir.br ^bb24 loc(#loc103)
  ^bb24:  // pred: ^bb23
    cir.br ^bb26(%45 : !cir.bool) loc(#loc103)
  ^bb25:  // pred: ^bb19
    %46 = cir.const #false loc(#loc103)
    cir.br ^bb26(%46 : !cir.bool) loc(#loc103)
  ^bb26(%47: !cir.bool loc("CWE190_Integer_Overflow__int_fgets_square_16.c":89:28)):  // 2 preds: ^bb24, ^bb25
    cir.br ^bb27 loc(#loc103)
  ^bb27:  // pred: ^bb26
    cir.brcond %47 ^bb28, ^bb29 loc(#loc182)
  ^bb28:  // pred: ^bb27
    %48 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc112)
    %49 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc67)
    %50 = cir.binop(mul, %48, %49) nsw : !s32i loc(#loc112)
    cir.store %50, %1 : !s32i, !cir.ptr<!s32i> loc(#loc167)
    %51 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    cir.call @printIntLine(%51) : (!s32i) -> () loc(#loc114)
    cir.br ^bb30 loc(#loc110)
  ^bb29:  // pred: ^bb27
    %52 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc61)
    %53 = cir.cast(array_to_ptrdecay, %52 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%53) : (!cir.ptr<!s8i>) -> () loc(#loc115)
    cir.br ^bb30 loc(#loc100)
  ^bb30:  // 2 preds: ^bb28, ^bb29
    cir.br ^bb31 loc(#loc100)
  ^bb31:  // pred: ^bb30
    cir.br ^bb33 loc(#loc116)
  ^bb32:  // no predecessors
    cir.br ^bb16 loc(#loc96)
  ^bb33:  // 2 preds: ^bb16, ^bb31
    cir.br ^bb34 loc(#loc96)
  ^bb34:  // pred: ^bb33
    cir.return loc(#loc63)
  } loc(#loc165)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc184)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc185)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc123)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc186)
    cir.br ^bb1 loc(#loc187)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc187)
  ^bb2:  // 2 preds: ^bb1, ^bb5
    %3 = cir.const #cir.int<1> : !s32i loc(#loc127)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc127)
    cir.brcond %4 ^bb3, ^bb6 loc(#loc127)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc188)
  ^bb4:  // pred: ^bb3
    %5 = cir.const #cir.int<2> : !s32i loc(#loc129)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc189)
    cir.br ^bb6 loc(#loc131)
  ^bb5:  // no predecessors
    cir.br ^bb2 loc(#loc126)
  ^bb6:  // 2 preds: ^bb2, ^bb4
    cir.br ^bb7 loc(#loc126)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc190)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc190)
  ^bb9:  // 2 preds: ^bb8, ^bb14
    %6 = cir.const #cir.int<1> : !s32i loc(#loc134)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc134)
    cir.brcond %7 ^bb10, ^bb15 loc(#loc134)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc191)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc192)
  ^bb12:  // pred: ^bb11
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc138)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc120)
    %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc138)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc184)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc139)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc140)
    cir.br ^bb13 loc(#loc137)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc141)
  ^bb14:  // no predecessors
    cir.br ^bb9 loc(#loc133)
  ^bb15:  // 2 preds: ^bb9, ^bb13
    cir.br ^bb16 loc(#loc133)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc118)
  } loc(#loc183)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_square_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":43:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":26:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":57:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":34:13)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":34:49)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":52:13)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":52:33)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":28:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":28:9)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":30:12)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":30:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":31:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":47:5)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":31:11)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":32:5)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":33:9)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":45:9)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":36:13)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":44:13)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":36:23)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":36:36)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":36:53)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":36:17)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":36:63)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":37:13)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":40:13)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":42:13)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":39:29)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":39:24)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":39:17)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":39:40)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":43:17)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":46:9)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":48:5)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":56:5)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":48:11)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":49:5)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":50:9)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":54:9)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":52:26)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":53:26)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":53:13)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":55:9)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":125:1)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":129:1)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":127:5)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":127:13)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":128:5)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":128:13)
#loc60 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":96:23)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":64:1)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":100:1)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":72:13)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":72:49)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":91:13)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":91:33)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":66:5)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":66:9)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":68:12)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":68:5)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":69:5)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":85:5)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":69:11)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":70:5)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":71:9)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":83:9)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":74:13)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":82:13)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":74:23)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":74:36)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":74:53)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":74:17)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":74:63)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":75:13)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":78:13)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":80:13)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":77:29)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":77:24)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":77:17)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":77:40)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":81:27)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":81:17)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":84:9)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":86:5)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":99:5)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":86:11)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":87:5)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":89:9)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":97:9)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":89:13)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":89:20)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":89:35)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":89:31)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":89:49)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":89:62)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":89:69)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":90:9)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":93:9)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":95:9)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":91:26)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":92:26)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":92:13)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":96:13)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":98:9)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":103:1)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":123:1)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":118:13)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":118:33)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":105:5)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":105:9)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":107:12)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":107:5)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":108:5)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":113:5)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":108:11)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":109:5)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":111:16)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":111:9)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":112:9)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":114:5)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":122:5)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":114:11)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":115:5)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":116:9)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":120:9)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":118:26)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":119:26)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":119:13)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_square_16.c":121:9)
#loc142 = loc(fused[#loc1, #loc2])
#loc143 = loc(fused[#loc3, #loc4])
#loc144 = loc(fused[#loc5, #loc6])
#loc145 = loc(fused[#loc7, #loc8])
#loc146 = loc(fused[#loc10, #loc11])
#loc147 = loc(fused[#loc12, #loc13])
#loc148 = loc(fused[#loc14, #loc15])
#loc149 = loc(fused[#loc16, #loc17])
#loc150 = loc(fused[#loc18, #loc19])
#loc151 = loc(fused[#loc21, #loc20])
#loc152 = loc(fused[#loc22, #loc23])
#loc153 = loc(fused[#loc25, #loc23])
#loc154 = loc(fused[#loc26, #loc27])
#loc155 = loc(fused[#loc28, #loc29])
#loc156 = loc(fused[#loc33, #loc34])
#loc157 = loc(fused[#loc35, #loc36, #loc37, #loc29])
#loc158 = loc(fused[#loc40, #loc41])
#loc159 = loc(fused[#loc44, #loc45])
#loc160 = loc(fused[#loc47, #loc45])
#loc161 = loc(fused[#loc48, #loc49])
#loc162 = loc(fused[#loc54, #loc55])
#loc163 = loc(fused[#loc56, #loc57])
#loc164 = loc(fused[#loc58, #loc59])
#loc165 = loc(fused[#loc62, #loc63])
#loc166 = loc(fused[#loc64, #loc65])
#loc167 = loc(fused[#loc66, #loc67])
#loc168 = loc(fused[#loc68, #loc69])
#loc169 = loc(fused[#loc71, #loc70])
#loc170 = loc(fused[#loc72, #loc73])
#loc171 = loc(fused[#loc75, #loc73])
#loc172 = loc(fused[#loc76, #loc77])
#loc173 = loc(fused[#loc78, #loc79])
#loc174 = loc(fused[#loc83, #loc84])
#loc175 = loc(fused[#loc85, #loc86, #loc87, #loc79])
#loc176 = loc(fused[#loc90, #loc91])
#loc177 = loc(fused[#loc95, #loc96])
#loc178 = loc(fused[#loc98, #loc96])
#loc179 = loc(fused[#loc99, #loc100])
#loc180 = loc(fused[#loc101, #loc102])
#loc181 = loc(fused[#loc105, #loc108])
#loc182 = loc(fused[#loc109, #loc110, #loc111, #loc100])
#loc183 = loc(fused[#loc117, #loc118])
#loc184 = loc(fused[#loc119, #loc120])
#loc185 = loc(fused[#loc121, #loc122])
#loc186 = loc(fused[#loc124, #loc123])
#loc187 = loc(fused[#loc125, #loc126])
#loc188 = loc(fused[#loc128, #loc126])
#loc189 = loc(fused[#loc130, #loc129])
#loc190 = loc(fused[#loc132, #loc133])
#loc191 = loc(fused[#loc135, #loc133])
#loc192 = loc(fused[#loc136, #loc137])
