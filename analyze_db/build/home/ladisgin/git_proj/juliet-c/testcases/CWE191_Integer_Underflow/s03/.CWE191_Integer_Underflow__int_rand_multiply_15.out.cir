!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc63 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":226:10)
#loc64 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":226:14)
#loc65 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":226:20)
#loc66 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":226:32)
#loc270 = loc(fused[#loc63, #loc64])
#loc271 = loc(fused[#loc65, #loc66])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_multiply_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc249)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc250)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc251)
  cir.func no_proto @CWE191_Integer_Underflow__int_rand_multiply_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc253)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc12)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc254)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc16)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %4 = cir.const #cir.int<1> : !s32i loc(#loc18)
          %5 = cir.binop(and, %3, %4) : !s32i loc(#loc18)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc18)
          %7 = cir.ternary(%6, true {
            %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc18)
            %11 = cir.const #cir.int<30> : !s32i loc(#loc18)
            %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc18)
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc18)
            %15 = cir.const #cir.int<15> : !s32i loc(#loc18)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc18)
            %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc18)
            %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc18)
            %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc18)
            cir.yield %20 : !u32i loc(#loc18)
          }, false {
            %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc18)
            %11 = cir.const #cir.int<30> : !s32i loc(#loc18)
            %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc18)
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc18)
            %15 = cir.const #cir.int<15> : !s32i loc(#loc18)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc18)
            %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc18)
            %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc18)
            %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc18)
            %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc18)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc18)
            %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc18)
            %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc18)
            cir.yield %24 : !u32i loc(#loc18)
          }) : (!cir.bool) -> !u32i loc(#loc18)
          %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc18)
          cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc256)
          cir.break loc(#loc20)
        } loc(#loc17)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc5)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc5)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc22)
          cir.break loc(#loc23)
        } loc(#loc21)
        cir.yield loc(#loc14)
      } loc(#loc14)
    } loc(#loc255)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc26)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc31)
            %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc259)
            cir.if %5 {
              %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc261)
              %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc35)
              %8 = cir.const #cir.int<2> : !s32i loc(#loc34)
              %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc35)
              cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc261)
              %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc36)
              cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc37)
            } loc(#loc260)
          } loc(#loc258)
          cir.break loc(#loc38)
        } loc(#loc27)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc40)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc40)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc41)
          cir.break loc(#loc42)
        } loc(#loc39)
        cir.yield loc(#loc24)
      } loc(#loc24)
    } loc(#loc257)
    cir.return loc(#loc9)
  } loc(#loc252)
  cir.func no_proto @CWE191_Integer_Underflow__int_rand_multiply_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc263)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc264)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc265)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc49)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc266)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    cir.return loc(#loc44)
  } loc(#loc262)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc267)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc268)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc60)
  cir.func @main(%arg0: !s32i loc(fused[#loc63, #loc64]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc65, #loc66])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc270)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc271)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc62)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc67)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc67)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc68)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc69)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc69)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc70)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc57)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %8 = cir.get_global @CWE191_Integer_Underflow__int_rand_multiply_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc272)
    cir.call @CWE191_Integer_Underflow__int_rand_multiply_15_good() : () -> () loc(#loc72)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc58)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc59)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %13 = cir.get_global @CWE191_Integer_Underflow__int_rand_multiply_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc273)
    cir.call @CWE191_Integer_Underflow__int_rand_multiply_15_bad() : () -> () loc(#loc76)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc60)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc79)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc274)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc274)
    cir.return %17 : !s32i loc(#loc274)
  } loc(#loc269)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc81)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc276)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc86)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc277)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc90)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %4 = cir.const #cir.int<1> : !s32i loc(#loc92)
          %5 = cir.binop(and, %3, %4) : !s32i loc(#loc92)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc92)
          %7 = cir.ternary(%6, true {
            %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
            %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc92)
            %11 = cir.const #cir.int<30> : !s32i loc(#loc92)
            %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc92)
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc92)
            %15 = cir.const #cir.int<15> : !s32i loc(#loc92)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc92)
            %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc92)
            %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc92)
            %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc92)
            cir.yield %20 : !u32i loc(#loc92)
          }, false {
            %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
            %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc92)
            %11 = cir.const #cir.int<30> : !s32i loc(#loc92)
            %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc92)
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc92)
            %15 = cir.const #cir.int<15> : !s32i loc(#loc92)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc92)
            %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc92)
            %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc92)
            %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc92)
            %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc92)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc92)
            %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc92)
            %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc92)
            cir.yield %24 : !u32i loc(#loc92)
          }) : (!cir.bool) -> !u32i loc(#loc92)
          %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc92)
          cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc279)
          cir.break loc(#loc94)
        } loc(#loc91)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc96)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc96)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc97)
          cir.break loc(#loc98)
        } loc(#loc95)
        cir.yield loc(#loc88)
      } loc(#loc88)
    } loc(#loc278)
    cir.scope {
      %2 = cir.const #cir.int<8> : !s32i loc(#loc101)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc103)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc103)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc104)
          cir.break loc(#loc105)
        } loc(#loc102)
        cir.case(default, []) {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc109)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc110)
            %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc282)
            cir.if %5 {
              cir.scope {
                %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc114)
                %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc115)
                %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc115)
                %9 = cir.const #cir.int<1> : !s32i loc(#loc115)
                %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc115)
                %11 = cir.const #cir.int<2> : !s32i loc(#loc116)
                %12 = cir.binop(div, %10, %11) : !s32i loc(#loc285)
                %13 = cir.cmp(gt, %6, %12) : !s32i, !cir.bool loc(#loc286)
                cir.if %13 {
                  %14 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc288)
                  %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc123)
                  %16 = cir.const #cir.int<2> : !s32i loc(#loc122)
                  %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc123)
                  cir.store %17, %14 : !s32i, !cir.ptr<!s32i> loc(#loc288)
                  %18 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc124)
                  cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc125)
                } else {
                  %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc81)
                  %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc81)
                  cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc126)
                } loc(#loc287)
              } loc(#loc284)
            } loc(#loc283)
          } loc(#loc281)
          cir.break loc(#loc127)
        } loc(#loc106)
        cir.yield loc(#loc99)
      } loc(#loc99)
    } loc(#loc280)
    cir.return loc(#loc83)
  } loc(#loc275)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc290)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc132)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc291)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc136)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc138)
          %4 = cir.const #cir.int<1> : !s32i loc(#loc138)
          %5 = cir.binop(and, %3, %4) : !s32i loc(#loc138)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc138)
          %7 = cir.ternary(%6, true {
            %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc138)
            %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc138)
            %11 = cir.const #cir.int<30> : !s32i loc(#loc138)
            %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc138)
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc138)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc138)
            %15 = cir.const #cir.int<15> : !s32i loc(#loc138)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc138)
            %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc138)
            %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc138)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc138)
            %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc138)
            cir.yield %20 : !u32i loc(#loc138)
          }, false {
            %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc138)
            %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc138)
            %11 = cir.const #cir.int<30> : !s32i loc(#loc138)
            %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc138)
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc138)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc138)
            %15 = cir.const #cir.int<15> : !s32i loc(#loc138)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc138)
            %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc138)
            %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc138)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc138)
            %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc138)
            %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc138)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc138)
            %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc138)
            %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc138)
            cir.yield %24 : !u32i loc(#loc138)
          }) : (!cir.bool) -> !u32i loc(#loc138)
          %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc138)
          cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc293)
          cir.break loc(#loc140)
        } loc(#loc137)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc142)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc142)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc143)
          cir.break loc(#loc144)
        } loc(#loc141)
        cir.yield loc(#loc134)
      } loc(#loc134)
    } loc(#loc292)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc147)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc151)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc152)
            %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc296)
            cir.if %5 {
              cir.scope {
                %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc156)
                %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc157)
                %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc157)
                %9 = cir.const #cir.int<1> : !s32i loc(#loc157)
                %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc157)
                %11 = cir.const #cir.int<2> : !s32i loc(#loc158)
                %12 = cir.binop(div, %10, %11) : !s32i loc(#loc299)
                %13 = cir.cmp(gt, %6, %12) : !s32i, !cir.bool loc(#loc300)
                cir.if %13 {
                  %14 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc302)
                  %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc165)
                  %16 = cir.const #cir.int<2> : !s32i loc(#loc164)
                  %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc165)
                  cir.store %17, %14 : !s32i, !cir.ptr<!s32i> loc(#loc302)
                  %18 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc166)
                  cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc167)
                } else {
                  %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc168)
                  %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc168)
                  cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc169)
                } loc(#loc301)
              } loc(#loc298)
            } loc(#loc297)
          } loc(#loc295)
          cir.break loc(#loc170)
        } loc(#loc148)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc172)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc172)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc173)
          cir.break loc(#loc174)
        } loc(#loc171)
        cir.yield loc(#loc145)
      } loc(#loc145)
    } loc(#loc294)
    cir.return loc(#loc129)
  } loc(#loc289)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc304)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc179)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc305)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc183)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc185)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc185)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc186)
          cir.break loc(#loc187)
        } loc(#loc184)
        cir.case(default, []) {
          %3 = cir.const #cir.int<2> : !s32i loc(#loc189)
          %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc190)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc307)
          cir.break loc(#loc192)
        } loc(#loc188)
        cir.yield loc(#loc181)
      } loc(#loc181)
    } loc(#loc306)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc195)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc199)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc200)
            %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc310)
            cir.if %5 {
              %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc312)
              %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc204)
              %8 = cir.const #cir.int<2> : !s32i loc(#loc203)
              %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc204)
              cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc312)
              %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc205)
              cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc206)
            } loc(#loc311)
          } loc(#loc309)
          cir.break loc(#loc207)
        } loc(#loc196)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc209)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc209)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc210)
          cir.break loc(#loc211)
        } loc(#loc208)
        cir.yield loc(#loc193)
      } loc(#loc193)
    } loc(#loc308)
    cir.return loc(#loc176)
  } loc(#loc303)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc314)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc216)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc315)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc220)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.const #cir.int<2> : !s32i loc(#loc222)
          %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc223)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc317)
          cir.break loc(#loc225)
        } loc(#loc221)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc227)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc227)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc228)
          cir.break loc(#loc229)
        } loc(#loc226)
        cir.yield loc(#loc218)
      } loc(#loc218)
    } loc(#loc316)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc232)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc236)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc237)
            %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc320)
            cir.if %5 {
              %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc322)
              %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc241)
              %8 = cir.const #cir.int<2> : !s32i loc(#loc240)
              %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc241)
              cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc322)
              %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc242)
              cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc243)
            } loc(#loc321)
          } loc(#loc319)
          cir.break loc(#loc244)
        } loc(#loc233)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc246)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc246)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc247)
          cir.break loc(#loc248)
        } loc(#loc245)
        cir.yield loc(#loc230)
      } loc(#loc230)
    } loc(#loc318)
    cir.return loc(#loc213)
  } loc(#loc313)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_multiply_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":35:19)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":22:1)
#loc9 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":53:1)
#loc10 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":24:5)
#loc11 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":24:9)
#loc12 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":26:12)
#loc13 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":26:5)
#loc14 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":27:5)
#loc15 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":37:5)
#loc16 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":27:12)
#loc17 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":29:5)
#loc18 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":31:16)
#loc19 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":31:9)
#loc20 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":32:9)
#loc21 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":33:5)
#loc22 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":35:9)
#loc23 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":36:9)
#loc24 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":38:5)
#loc25 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":52:5)
#loc26 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":38:12)
#loc27 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":40:5)
#loc28 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":41:9)
#loc29 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":46:9)
#loc30 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":41:12)
#loc31 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":41:19)
#loc32 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":42:9)
#loc33 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":44:13)
#loc34 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":44:33)
#loc35 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":44:26)
#loc36 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":45:26)
#loc37 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":45:13)
#loc38 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":47:9)
#loc39 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":48:5)
#loc40 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":50:19)
#loc41 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":50:9)
#loc42 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":51:9)
#loc43 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":209:1)
#loc44 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":215:1)
#loc45 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":211:5)
#loc46 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":211:14)
#loc47 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":212:5)
#loc48 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":212:14)
#loc49 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":213:5)
#loc50 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":213:14)
#loc51 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":214:5)
#loc52 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":214:14)
#loc53 = loc("/usr/include/stdlib.h":575:1)
#loc54 = loc("/usr/include/stdlib.h":575:41)
#loc55 = loc("/usr/include/time.h":76:1)
#loc56 = loc("/usr/include/time.h":76:38)
#loc57 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":231:15)
#loc58 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":233:15)
#loc59 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":236:15)
#loc60 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":238:15)
#loc61 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":226:1)
#loc62 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":241:1)
#loc67 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":227:1)
#loc68 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":229:27)
#loc69 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":229:22)
#loc70 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":229:5)
#loc71 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":231:5)
#loc72 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":232:5)
#loc73 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":232:57)
#loc74 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":233:5)
#loc75 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":236:5)
#loc76 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":237:5)
#loc77 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":237:56)
#loc78 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":238:5)
#loc79 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":240:12)
#loc80 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":240:5)
#loc81 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":93:27)
#loc82 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":60:1)
#loc83 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":98:1)
#loc84 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":62:5)
#loc85 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":62:9)
#loc86 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":64:12)
#loc87 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":64:5)
#loc88 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":65:5)
#loc89 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":75:5)
#loc90 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":65:12)
#loc91 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":67:5)
#loc92 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":69:16)
#loc93 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":69:9)
#loc94 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":70:9)
#loc95 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":71:5)
#loc96 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":73:19)
#loc97 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":73:9)
#loc98 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":74:9)
#loc99 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":76:5)
#loc100 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":97:5)
#loc101 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":76:12)
#loc102 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":78:5)
#loc103 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":80:19)
#loc104 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":80:9)
#loc105 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":81:9)
#loc106 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":82:5)
#loc107 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":83:9)
#loc108 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":95:9)
#loc109 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":83:12)
#loc110 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":83:19)
#loc111 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":84:9)
#loc112 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":86:13)
#loc113 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":94:13)
#loc114 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":86:17)
#loc115 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":86:25)
#loc116 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":86:33)
#loc117 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":86:34)
#loc118 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":87:13)
#loc119 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":90:13)
#loc120 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":92:13)
#loc121 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":88:17)
#loc122 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":88:37)
#loc123 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":88:30)
#loc124 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":89:30)
#loc125 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":89:17)
#loc126 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":93:17)
#loc127 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":96:9)
#loc128 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":101:1)
#loc129 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":139:1)
#loc130 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":103:5)
#loc131 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":103:9)
#loc132 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":105:12)
#loc133 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":105:5)
#loc134 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":106:5)
#loc135 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":116:5)
#loc136 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":106:12)
#loc137 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":108:5)
#loc138 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":110:16)
#loc139 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":110:9)
#loc140 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":111:9)
#loc141 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":112:5)
#loc142 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":114:19)
#loc143 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":114:9)
#loc144 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":115:9)
#loc145 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":117:5)
#loc146 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":138:5)
#loc147 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":117:12)
#loc148 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":119:5)
#loc149 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":120:9)
#loc150 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":132:9)
#loc151 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":120:12)
#loc152 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":120:19)
#loc153 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":121:9)
#loc154 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":123:13)
#loc155 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":131:13)
#loc156 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":123:17)
#loc157 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":123:25)
#loc158 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":123:33)
#loc159 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":123:34)
#loc160 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":124:13)
#loc161 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":127:13)
#loc162 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":129:13)
#loc163 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":125:17)
#loc164 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":125:37)
#loc165 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":125:30)
#loc166 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":126:30)
#loc167 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":126:17)
#loc168 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":130:27)
#loc169 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":130:17)
#loc170 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":133:9)
#loc171 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":134:5)
#loc172 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":136:19)
#loc173 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":136:9)
#loc174 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":137:9)
#loc175 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":142:1)
#loc176 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":173:1)
#loc177 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":144:5)
#loc178 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":144:9)
#loc179 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":146:12)
#loc180 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":146:5)
#loc181 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":147:5)
#loc182 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":157:5)
#loc183 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":147:12)
#loc184 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":149:5)
#loc185 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":151:19)
#loc186 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":151:9)
#loc187 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":152:9)
#loc188 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":153:5)
#loc189 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":155:17)
#loc190 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":155:16)
#loc191 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":155:9)
#loc192 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":156:9)
#loc193 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":158:5)
#loc194 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":172:5)
#loc195 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":158:12)
#loc196 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":160:5)
#loc197 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":161:9)
#loc198 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":166:9)
#loc199 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":161:12)
#loc200 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":161:19)
#loc201 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":162:9)
#loc202 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":164:13)
#loc203 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":164:33)
#loc204 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":164:26)
#loc205 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":165:26)
#loc206 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":165:13)
#loc207 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":167:9)
#loc208 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":168:5)
#loc209 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":170:19)
#loc210 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":170:9)
#loc211 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":171:9)
#loc212 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":176:1)
#loc213 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":207:1)
#loc214 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":178:5)
#loc215 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":178:9)
#loc216 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":180:12)
#loc217 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":180:5)
#loc218 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":181:5)
#loc219 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":191:5)
#loc220 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":181:12)
#loc221 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":183:5)
#loc222 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":185:17)
#loc223 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":185:16)
#loc224 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":185:9)
#loc225 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":186:9)
#loc226 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":187:5)
#loc227 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":189:19)
#loc228 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":189:9)
#loc229 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":190:9)
#loc230 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":192:5)
#loc231 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":206:5)
#loc232 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":192:12)
#loc233 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":194:5)
#loc234 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":195:9)
#loc235 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":200:9)
#loc236 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":195:12)
#loc237 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":195:19)
#loc238 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":196:9)
#loc239 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":198:13)
#loc240 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":198:33)
#loc241 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":198:26)
#loc242 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":199:26)
#loc243 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":199:13)
#loc244 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":201:9)
#loc245 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":202:5)
#loc246 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":204:19)
#loc247 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":204:9)
#loc248 = loc("CWE191_Integer_Underflow__int_rand_multiply_15.c":205:9)
#loc249 = loc(fused[#loc1, #loc2])
#loc250 = loc(fused[#loc3, #loc4])
#loc251 = loc(fused[#loc6, #loc7])
#loc252 = loc(fused[#loc8, #loc9])
#loc253 = loc(fused[#loc10, #loc11])
#loc254 = loc(fused[#loc13, #loc12])
#loc255 = loc(fused[#loc14, #loc15])
#loc256 = loc(fused[#loc19, #loc18])
#loc257 = loc(fused[#loc24, #loc25])
#loc258 = loc(fused[#loc28, #loc29])
#loc259 = loc(fused[#loc30, #loc31])
#loc260 = loc(fused[#loc32, #loc29])
#loc261 = loc(fused[#loc33, #loc34])
#loc262 = loc(fused[#loc43, #loc44])
#loc263 = loc(fused[#loc45, #loc46])
#loc264 = loc(fused[#loc47, #loc48])
#loc265 = loc(fused[#loc49, #loc50])
#loc266 = loc(fused[#loc51, #loc52])
#loc267 = loc(fused[#loc53, #loc54])
#loc268 = loc(fused[#loc55, #loc56])
#loc269 = loc(fused[#loc61, #loc62])
#loc272 = loc(fused[#loc72, #loc73])
#loc273 = loc(fused[#loc76, #loc77])
#loc274 = loc(fused[#loc80, #loc79])
#loc275 = loc(fused[#loc82, #loc83])
#loc276 = loc(fused[#loc84, #loc85])
#loc277 = loc(fused[#loc87, #loc86])
#loc278 = loc(fused[#loc88, #loc89])
#loc279 = loc(fused[#loc93, #loc92])
#loc280 = loc(fused[#loc99, #loc100])
#loc281 = loc(fused[#loc107, #loc108])
#loc282 = loc(fused[#loc109, #loc110])
#loc283 = loc(fused[#loc111, #loc108])
#loc284 = loc(fused[#loc112, #loc113])
#loc285 = loc(fused[#loc115, #loc116])
#loc286 = loc(fused[#loc114, #loc117])
#loc287 = loc(fused[#loc118, #loc119, #loc120, #loc113])
#loc288 = loc(fused[#loc121, #loc122])
#loc289 = loc(fused[#loc128, #loc129])
#loc290 = loc(fused[#loc130, #loc131])
#loc291 = loc(fused[#loc133, #loc132])
#loc292 = loc(fused[#loc134, #loc135])
#loc293 = loc(fused[#loc139, #loc138])
#loc294 = loc(fused[#loc145, #loc146])
#loc295 = loc(fused[#loc149, #loc150])
#loc296 = loc(fused[#loc151, #loc152])
#loc297 = loc(fused[#loc153, #loc150])
#loc298 = loc(fused[#loc154, #loc155])
#loc299 = loc(fused[#loc157, #loc158])
#loc300 = loc(fused[#loc156, #loc159])
#loc301 = loc(fused[#loc160, #loc161, #loc162, #loc155])
#loc302 = loc(fused[#loc163, #loc164])
#loc303 = loc(fused[#loc175, #loc176])
#loc304 = loc(fused[#loc177, #loc178])
#loc305 = loc(fused[#loc180, #loc179])
#loc306 = loc(fused[#loc181, #loc182])
#loc307 = loc(fused[#loc191, #loc189])
#loc308 = loc(fused[#loc193, #loc194])
#loc309 = loc(fused[#loc197, #loc198])
#loc310 = loc(fused[#loc199, #loc200])
#loc311 = loc(fused[#loc201, #loc198])
#loc312 = loc(fused[#loc202, #loc203])
#loc313 = loc(fused[#loc212, #loc213])
#loc314 = loc(fused[#loc214, #loc215])
#loc315 = loc(fused[#loc217, #loc216])
#loc316 = loc(fused[#loc218, #loc219])
#loc317 = loc(fused[#loc224, #loc222])
#loc318 = loc(fused[#loc230, #loc231])
#loc319 = loc(fused[#loc234, #loc235])
#loc320 = loc(fused[#loc236, #loc237])
#loc321 = loc(fused[#loc238, #loc235])
#loc322 = loc(fused[#loc239, #loc240])
