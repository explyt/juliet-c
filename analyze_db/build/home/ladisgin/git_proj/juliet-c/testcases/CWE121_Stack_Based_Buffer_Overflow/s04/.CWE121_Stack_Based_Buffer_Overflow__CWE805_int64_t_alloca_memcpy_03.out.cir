!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":103:10)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":103:14)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":103:20)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":103:32)
#loc154 = loc(fused[#loc51, #loc52])
#loc155 = loc(fused[#loc53, #loc54])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLongLongLine(!s64i) loc(#loc133)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc135)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc136)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc8)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc8)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc8)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc8)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc8)
    %7 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc137)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc8)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc8)
    cir.store %9, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc136)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc10)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc10)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc10)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc10)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc10)
    cir.store %16, %7 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc137)
    cir.scope {
      %17 = cir.const #cir.int<5> : !s32i loc(#loc13)
      %18 = cir.const #cir.int<5> : !s32i loc(#loc14)
      %19 = cir.cmp(eq, %17, %18) : !s32i, !cir.bool loc(#loc139)
      cir.if %19 {
        %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc16)
        cir.store %20, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc141)
      } loc(#loc140)
    } loc(#loc138)
    cir.scope {
      %17 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc143)
      %18 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc143)
      cir.store %18, %17 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc143)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc22)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc22)
      %21 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc23)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc23)
      %23 = cir.const #cir.int<100> : !s32i loc(#loc24)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc24)
      %25 = cir.const #cir.int<8> : !u64i loc(#loc144)
      %26 = cir.binop(mul, %24, %25) : !u64i loc(#loc145)
      cir.libc.memcpy %26 bytes from %22 to %20 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc146)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc29)
      %28 = cir.const #cir.int<0> : !s32i loc(#loc30)
      %29 = cir.ptr_stride(%27 : !cir.ptr<!s64i>, %28 : !s32i), !cir.ptr<!s64i> loc(#loc31)
      %30 = cir.load %29 : !cir.ptr<!s64i>, !s64i loc(#loc29)
      cir.call @printLongLongLine(%30) : (!s64i) -> () loc(#loc32)
    } loc(#loc142)
    cir.return loc(#loc4)
  } loc(#loc134)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc148)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc149)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    cir.return loc(#loc34)
  } loc(#loc147)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc150)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc151)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc152)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc48)
  cir.func @main(%arg0: !s32i loc(fused[#loc51, #loc52]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc53, #loc54])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc154)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc155)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc50)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc55)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc55)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc56)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc57)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc57)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc58)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc45)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03_good : !cir.ptr<!cir.func<!void ()>> loc(#loc156)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03_good() : () -> () loc(#loc60)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc46)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc47)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc157)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03_bad() : () -> () loc(#loc64)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc48)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc67)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc158)
    cir.return %17 : !s32i loc(#loc158)
  } loc(#loc153)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc69)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc160)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc161)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc75)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc75)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc75)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc75)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc75)
    %7 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc162)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc75)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc75)
    cir.store %9, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc161)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc77)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc77)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc77)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc77)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc77)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc77)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc77)
    cir.store %16, %7 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc162)
    cir.scope {
      %17 = cir.const #cir.int<5> : !s32i loc(#loc80)
      %18 = cir.const #cir.int<5> : !s32i loc(#loc81)
      %19 = cir.cmp(ne, %17, %18) : !s32i, !cir.bool loc(#loc164)
      cir.if %19 {
        %20 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc69)
        %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc69)
        cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc85)
      } else {
        %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc86)
        cir.store %20, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc166)
      } loc(#loc165)
    } loc(#loc163)
    cir.scope {
      %17 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc168)
      %18 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc168)
      cir.store %18, %17 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc168)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc92)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc92)
      %21 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc93)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc93)
      %23 = cir.const #cir.int<100> : !s32i loc(#loc94)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc94)
      %25 = cir.const #cir.int<8> : !u64i loc(#loc169)
      %26 = cir.binop(mul, %24, %25) : !u64i loc(#loc170)
      cir.libc.memcpy %26 bytes from %22 to %20 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc171)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc99)
      %28 = cir.const #cir.int<0> : !s32i loc(#loc100)
      %29 = cir.ptr_stride(%27 : !cir.ptr<!s64i>, %28 : !s32i), !cir.ptr<!s64i> loc(#loc101)
      %30 = cir.load %29 : !cir.ptr<!s64i>, !s64i loc(#loc99)
      cir.call @printLongLongLine(%30) : (!s64i) -> () loc(#loc102)
    } loc(#loc167)
    cir.return loc(#loc71)
  } loc(#loc159)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc173)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc174)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc108)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc108)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc108)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc108)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc108)
    %7 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc175)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc108)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc108)
    cir.store %9, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc174)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc110)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc110)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc110)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc110)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc110)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc110)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc110)
    cir.store %16, %7 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc175)
    cir.scope {
      %17 = cir.const #cir.int<5> : !s32i loc(#loc113)
      %18 = cir.const #cir.int<5> : !s32i loc(#loc114)
      %19 = cir.cmp(eq, %17, %18) : !s32i, !cir.bool loc(#loc177)
      cir.if %19 {
        %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc116)
        cir.store %20, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc179)
      } loc(#loc178)
    } loc(#loc176)
    cir.scope {
      %17 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc181)
      %18 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc181)
      cir.store %18, %17 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc181)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc122)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc122)
      %21 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc123)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc123)
      %23 = cir.const #cir.int<100> : !s32i loc(#loc124)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc124)
      %25 = cir.const #cir.int<8> : !u64i loc(#loc182)
      %26 = cir.binop(mul, %24, %25) : !u64i loc(#loc183)
      cir.libc.memcpy %26 bytes from %22 to %20 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc184)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc129)
      %28 = cir.const #cir.int<0> : !s32i loc(#loc130)
      %29 = cir.ptr_stride(%27 : !cir.ptr<!s64i>, %28 : !s32i), !cir.ptr<!s64i> loc(#loc131)
      %30 = cir.load %29 : !cir.ptr<!s64i>, !s64i loc(#loc129)
      cir.call @printLongLongLine(%30) : (!s64i) -> () loc(#loc132)
    } loc(#loc180)
    cir.return loc(#loc104)
  } loc(#loc172)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":38:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":23:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":23:15)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":24:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":24:42)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":25:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":25:43)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":26:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":31:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":26:8)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":26:11)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":27:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":30:16)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":30:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":32:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":37:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":33:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":33:33)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":35:16)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":35:22)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":35:30)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":35:34)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":35:48)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":35:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":35:49)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":36:27)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":36:32)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":36:33)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":36:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":87:1)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":91:1)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":89:5)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":89:14)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":90:5)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":90:14)
#loc39 = loc("/usr/include/stdlib.h":575:1)
#loc40 = loc("/usr/include/stdlib.h":575:41)
#loc41 = loc("/usr/include/time.h":76:1)
#loc42 = loc("/usr/include/time.h":76:38)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":108:15)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":110:15)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":113:15)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":115:15)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":103:1)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":118:1)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":104:1)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":106:27)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":106:22)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":106:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":108:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":109:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":109:78)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":110:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":113:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":114:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":114:77)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":115:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":117:12)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":117:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":53:19)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":45:1)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":66:1)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":47:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":47:15)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":48:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":48:42)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":49:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":49:43)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":50:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":59:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":50:8)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":50:11)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":51:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":54:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":56:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":53:9)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":58:16)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":58:9)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":60:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":65:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":61:9)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":61:33)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":63:16)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":63:22)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":63:30)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":63:34)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":63:48)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":63:9)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":63:49)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":64:27)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":64:32)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":64:33)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":64:9)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":69:1)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":85:1)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":71:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":71:15)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":72:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":72:42)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":73:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":73:43)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":74:5)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":78:5)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":74:8)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":74:11)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":75:5)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":77:16)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":77:9)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":79:5)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":84:5)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":80:9)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":80:33)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":82:16)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":82:22)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":82:30)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":82:34)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":82:48)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":82:9)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":82:49)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":83:27)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":83:32)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":83:33)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c":83:9)
#loc133 = loc(fused[#loc1, #loc2])
#loc134 = loc(fused[#loc3, #loc4])
#loc135 = loc(fused[#loc5, #loc6])
#loc136 = loc(fused[#loc7, #loc8])
#loc137 = loc(fused[#loc9, #loc10])
#loc138 = loc(fused[#loc11, #loc12])
#loc139 = loc(fused[#loc13, #loc14])
#loc140 = loc(fused[#loc15, #loc12])
#loc141 = loc(fused[#loc17, #loc16])
#loc142 = loc(fused[#loc18, #loc19])
#loc143 = loc(fused[#loc20, #loc21])
#loc144 = loc(fused[#loc25, #loc26])
#loc145 = loc(fused[#loc24, #loc26])
#loc146 = loc(fused[#loc27, #loc28])
#loc147 = loc(fused[#loc33, #loc34])
#loc148 = loc(fused[#loc35, #loc36])
#loc149 = loc(fused[#loc37, #loc38])
#loc150 = loc(fused[#loc39, #loc40])
#loc151 = loc(fused[#loc41, #loc42])
#loc152 = loc(fused[#loc43, #loc44])
#loc153 = loc(fused[#loc49, #loc50])
#loc156 = loc(fused[#loc60, #loc61])
#loc157 = loc(fused[#loc64, #loc65])
#loc158 = loc(fused[#loc68, #loc67])
#loc159 = loc(fused[#loc70, #loc71])
#loc160 = loc(fused[#loc72, #loc73])
#loc161 = loc(fused[#loc74, #loc75])
#loc162 = loc(fused[#loc76, #loc77])
#loc163 = loc(fused[#loc78, #loc79])
#loc164 = loc(fused[#loc80, #loc81])
#loc165 = loc(fused[#loc82, #loc83, #loc84, #loc79])
#loc166 = loc(fused[#loc87, #loc86])
#loc167 = loc(fused[#loc88, #loc89])
#loc168 = loc(fused[#loc90, #loc91])
#loc169 = loc(fused[#loc95, #loc96])
#loc170 = loc(fused[#loc94, #loc96])
#loc171 = loc(fused[#loc97, #loc98])
#loc172 = loc(fused[#loc103, #loc104])
#loc173 = loc(fused[#loc105, #loc106])
#loc174 = loc(fused[#loc107, #loc108])
#loc175 = loc(fused[#loc109, #loc110])
#loc176 = loc(fused[#loc111, #loc112])
#loc177 = loc(fused[#loc113, #loc114])
#loc178 = loc(fused[#loc115, #loc112])
#loc179 = loc(fused[#loc117, #loc116])
#loc180 = loc(fused[#loc118, #loc119])
#loc181 = loc(fused[#loc120, #loc121])
#loc182 = loc(fused[#loc125, #loc126])
#loc183 = loc(fused[#loc124, #loc126])
#loc184 = loc(fused[#loc127, #loc128])
