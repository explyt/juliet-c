!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE617_Reachable_Assertion__rand_22b.c":28:51)
#loc8 = loc("CWE617_Reachable_Assertion__rand_22b.c":28:55)
#loc14 = loc("CWE617_Reachable_Assertion__rand_22b.c":33:16)
#loc25 = loc("CWE617_Reachable_Assertion__rand_22b.c":47:56)
#loc26 = loc("CWE617_Reachable_Assertion__rand_22b.c":47:60)
#loc44 = loc("CWE617_Reachable_Assertion__rand_22b.c":63:56)
#loc45 = loc("CWE617_Reachable_Assertion__rand_22b.c":63:60)
#loc59 = loc(fused[#loc7, #loc8])
#loc67 = loc(fused[#loc25, #loc26])
#loc74 = loc(fused[#loc44, #loc45])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_22b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" external @CWE617_Reachable_Assertion__rand_22_badGlobal : !s32i {alignment = 4 : i64} loc(#loc56)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc57)
  cir.func @CWE617_Reachable_Assertion__rand_22_badSource(%arg0: !s32i loc(fused[#loc7, #loc8])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc59)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc6)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc9)
    cir.br ^bb1 loc(#loc60)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @CWE617_Reachable_Assertion__rand_22_badGlobal : !cir.ptr<!s32i> loc(#loc56)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc12)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc12)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc61)
  ^bb2:  // pred: ^bb1
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc14)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc14)
    cir.brcond %8 ^bb3, ^bb4 loc(#loc14)
  ^bb3:  // pred: ^bb2
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc14)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc14)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc14)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc14)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc14)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc14)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc14)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc14)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc14)
    cir.br ^bb5(%20 : !u32i) loc(#loc14)
  ^bb4:  // pred: ^bb2
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc14)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc14)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc14)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc14)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc14)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc14)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc14)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc14)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc14)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc14)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc14)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc14)
    cir.br ^bb5(%36 : !u32i) loc(#loc14)
  ^bb5(%37: !u32i loc("CWE617_Reachable_Assertion__rand_22b.c":33:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc14)
  ^bb6:  // pred: ^bb5
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc14)
    cir.store %38, %0 : !s32i, !cir.ptr<!s32i> loc(#loc62)
    cir.br ^bb7 loc(#loc11)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc11)
  ^bb8:  // pred: ^bb7
    %39 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    cir.store %39, %1 : !s32i, !cir.ptr<!s32i> loc(#loc63)
    %40 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc63)
    cir.return %40 : !s32i loc(#loc63)
  } loc(#loc58)
  cir.global "private" external @CWE617_Reachable_Assertion__rand_22_goodG2B1Global : !s32i {alignment = 4 : i64} loc(#loc64)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc65)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc22)
  cir.func @CWE617_Reachable_Assertion__rand_22_goodG2B1Source(%arg0: !s32i loc(fused[#loc25, #loc26])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc67)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc24)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc27)
    cir.br ^bb1 loc(#loc68)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @CWE617_Reachable_Assertion__rand_22_goodG2B1Global : !cir.ptr<!s32i> loc(#loc64)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc30)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc30)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc69)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc22)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc22)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc34)
    cir.br ^bb4 loc(#loc32)
  ^bb3:  // pred: ^bb1
    %7 = cir.const #cir.int<5> : !s32i loc(#loc35)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc35)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc70)
    cir.br ^bb4 loc(#loc29)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc29)
  ^bb5:  // pred: ^bb4
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc38)
    cir.store %10, %1 : !s32i, !cir.ptr<!s32i> loc(#loc71)
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc71)
    cir.return %11 : !s32i loc(#loc71)
  } loc(#loc66)
  cir.global "private" external @CWE617_Reachable_Assertion__rand_22_goodG2B2Global : !s32i {alignment = 4 : i64} loc(#loc72)
  cir.func @CWE617_Reachable_Assertion__rand_22_goodG2B2Source(%arg0: !s32i loc(fused[#loc44, #loc45])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc74)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc43)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc46)
    cir.br ^bb1 loc(#loc75)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @CWE617_Reachable_Assertion__rand_22_goodG2B2Global : !cir.ptr<!s32i> loc(#loc72)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc49)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc49)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc76)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<5> : !s32i loc(#loc51)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc51)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc77)
    cir.br ^bb3 loc(#loc48)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc48)
  ^bb4:  // pred: ^bb3
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc54)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc78)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc78)
    cir.return %9 : !s32i loc(#loc78)
  } loc(#loc73)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_22b.c":0:0)
#loc1 = loc("CWE617_Reachable_Assertion__rand_22b.c":26:1)
#loc2 = loc("CWE617_Reachable_Assertion__rand_22b.c":26:12)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("CWE617_Reachable_Assertion__rand_22b.c":28:1)
#loc6 = loc("CWE617_Reachable_Assertion__rand_22b.c":36:1)
#loc9 = loc("CWE617_Reachable_Assertion__rand_22b.c":29:1)
#loc10 = loc("CWE617_Reachable_Assertion__rand_22b.c":30:5)
#loc11 = loc("CWE617_Reachable_Assertion__rand_22b.c":34:5)
#loc12 = loc("CWE617_Reachable_Assertion__rand_22b.c":30:8)
#loc13 = loc("CWE617_Reachable_Assertion__rand_22b.c":31:5)
#loc15 = loc("CWE617_Reachable_Assertion__rand_22b.c":33:9)
#loc16 = loc("CWE617_Reachable_Assertion__rand_22b.c":35:12)
#loc17 = loc("CWE617_Reachable_Assertion__rand_22b.c":35:5)
#loc18 = loc("CWE617_Reachable_Assertion__rand_22b.c":43:1)
#loc19 = loc("CWE617_Reachable_Assertion__rand_22b.c":43:12)
#loc20 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc21 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc22 = loc("CWE617_Reachable_Assertion__rand_22b.c":52:19)
#loc23 = loc("CWE617_Reachable_Assertion__rand_22b.c":47:1)
#loc24 = loc("CWE617_Reachable_Assertion__rand_22b.c":60:1)
#loc27 = loc("CWE617_Reachable_Assertion__rand_22b.c":48:1)
#loc28 = loc("CWE617_Reachable_Assertion__rand_22b.c":49:5)
#loc29 = loc("CWE617_Reachable_Assertion__rand_22b.c":58:5)
#loc30 = loc("CWE617_Reachable_Assertion__rand_22b.c":49:8)
#loc31 = loc("CWE617_Reachable_Assertion__rand_22b.c":50:5)
#loc32 = loc("CWE617_Reachable_Assertion__rand_22b.c":53:5)
#loc33 = loc("CWE617_Reachable_Assertion__rand_22b.c":55:5)
#loc34 = loc("CWE617_Reachable_Assertion__rand_22b.c":52:9)
#loc35 = loc("CWE617_Reachable_Assertion__rand_22b.c":57:16)
#loc36 = loc("CWE617_Reachable_Assertion__rand_22b.c":57:29)
#loc37 = loc("CWE617_Reachable_Assertion__rand_22b.c":57:9)
#loc38 = loc("CWE617_Reachable_Assertion__rand_22b.c":59:12)
#loc39 = loc("CWE617_Reachable_Assertion__rand_22b.c":59:5)
#loc40 = loc("CWE617_Reachable_Assertion__rand_22b.c":44:1)
#loc41 = loc("CWE617_Reachable_Assertion__rand_22b.c":44:12)
#loc42 = loc("CWE617_Reachable_Assertion__rand_22b.c":63:1)
#loc43 = loc("CWE617_Reachable_Assertion__rand_22b.c":71:1)
#loc46 = loc("CWE617_Reachable_Assertion__rand_22b.c":64:1)
#loc47 = loc("CWE617_Reachable_Assertion__rand_22b.c":65:5)
#loc48 = loc("CWE617_Reachable_Assertion__rand_22b.c":69:5)
#loc49 = loc("CWE617_Reachable_Assertion__rand_22b.c":65:8)
#loc50 = loc("CWE617_Reachable_Assertion__rand_22b.c":66:5)
#loc51 = loc("CWE617_Reachable_Assertion__rand_22b.c":68:16)
#loc52 = loc("CWE617_Reachable_Assertion__rand_22b.c":68:29)
#loc53 = loc("CWE617_Reachable_Assertion__rand_22b.c":68:9)
#loc54 = loc("CWE617_Reachable_Assertion__rand_22b.c":70:12)
#loc55 = loc("CWE617_Reachable_Assertion__rand_22b.c":70:5)
#loc56 = loc(fused[#loc1, #loc2])
#loc57 = loc(fused[#loc3, #loc4])
#loc58 = loc(fused[#loc5, #loc6])
#loc60 = loc(fused[#loc10, #loc11])
#loc61 = loc(fused[#loc13, #loc11])
#loc62 = loc(fused[#loc15, #loc14])
#loc63 = loc(fused[#loc17, #loc16])
#loc64 = loc(fused[#loc18, #loc19])
#loc65 = loc(fused[#loc20, #loc21])
#loc66 = loc(fused[#loc23, #loc24])
#loc68 = loc(fused[#loc28, #loc29])
#loc69 = loc(fused[#loc31, #loc32, #loc33, #loc29])
#loc70 = loc(fused[#loc37, #loc36])
#loc71 = loc(fused[#loc39, #loc38])
#loc72 = loc(fused[#loc40, #loc41])
#loc73 = loc(fused[#loc42, #loc43])
#loc75 = loc(fused[#loc47, #loc48])
#loc76 = loc(fused[#loc50, #loc48])
#loc77 = loc(fused[#loc53, #loc52])
#loc78 = loc(fused[#loc55, #loc54])
