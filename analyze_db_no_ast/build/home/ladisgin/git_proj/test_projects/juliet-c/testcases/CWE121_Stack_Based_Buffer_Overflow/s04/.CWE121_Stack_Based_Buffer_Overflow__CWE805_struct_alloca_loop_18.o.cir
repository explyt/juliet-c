!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc129)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc131)
    %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc132)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc8)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc8)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc8)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc8)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc8)
    %7 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc133)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc8)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc8)
    cir.store %9, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc132)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc10)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc10)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc10)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc10)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc10)
    cir.store %16, %7 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc133)
    cir.goto "source" loc(#loc134)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc13)
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc14)
    cir.store %17, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc135)
    cir.scope {
      %18 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc137)
      cir.scope {
        %19 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc139)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc26)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc26)
          cir.store %21, %19 : !u64i, !cir.ptr<!u64i> loc(#loc141)
          cir.for : cond {
            %22 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc28)
            %23 = cir.const #cir.int<100> : !s32i loc(#loc29)
            %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc29)
            %25 = cir.cmp(lt, %22, %24) : !u64i, !s32i loc(#loc142)
            %26 = cir.cast(int_to_bool, %25 : !s32i), !cir.bool loc(#loc30)
            cir.condition(%26) loc(#loc30)
          } body {
            cir.scope {
              %22 = cir.const #cir.int<0> : !s32i loc(#loc32)
              %23 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc33)
              %24 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc34)
              %25 = cir.ptr_stride(%24 : !cir.ptr<!ty__twoIntsStruct>, %23 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc34)
              %26 = cir.get_member %25[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc35)
              cir.store %22, %26 : !s32i, !cir.ptr<!s32i> loc(#loc144)
              %27 = cir.const #cir.int<0> : !s32i loc(#loc36)
              %28 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc37)
              %29 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc38)
              %30 = cir.ptr_stride(%29 : !cir.ptr<!ty__twoIntsStruct>, %28 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc38)
              %31 = cir.get_member %30[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc39)
              cir.store %27, %31 : !s32i, !cir.ptr<!s32i> loc(#loc145)
            } loc(#loc143)
            cir.yield loc(#loc25)
          } step {
            %22 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc40)
            %23 = cir.unary(inc, %22) : !u64i, !u64i loc(#loc41)
            cir.store %23, %19 : !u64i, !cir.ptr<!u64i> loc(#loc146)
            cir.yield loc(#loc140)
          } loc(#loc140)
        } loc(#loc140)
      } loc(#loc138)
      cir.scope {
        %19 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc148)
        cir.scope {
          %23 = cir.const #cir.int<0> : !s32i loc(#loc48)
          %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc48)
          cir.store %24, %19 : !u64i, !cir.ptr<!u64i> loc(#loc150)
          cir.for : cond {
            %25 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc50)
            %26 = cir.const #cir.int<100> : !s32i loc(#loc51)
            %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc51)
            %28 = cir.cmp(lt, %25, %27) : !u64i, !s32i loc(#loc151)
            %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc52)
            cir.condition(%29) loc(#loc52)
          } body {
            cir.scope {
              %25 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc54)
              %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc55)
              %27 = cir.ptr_stride(%25 : !cir.ptr<!ty__twoIntsStruct>, %26 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc56)
              %28 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc57)
              %29 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc58)
              %30 = cir.ptr_stride(%29 : !cir.ptr<!ty__twoIntsStruct>, %28 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc58)
              cir.copy %30 to %27 : !cir.ptr<!ty__twoIntsStruct> loc(#loc56)
            } loc(#loc152)
            cir.yield loc(#loc47)
          } step {
            %25 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc59)
            %26 = cir.unary(inc, %25) : !u64i, !u64i loc(#loc60)
            cir.store %26, %19 : !u64i, !cir.ptr<!u64i> loc(#loc153)
            cir.yield loc(#loc149)
          } loc(#loc149)
        } loc(#loc149)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc61)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc62)
        %22 = cir.ptr_stride(%20 : !cir.ptr<!ty__twoIntsStruct>, %21 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc63)
        cir.call @printStructLine(%22) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc64)
      } loc(#loc147)
    } loc(#loc136)
    cir.return loc(#loc4)
  } loc(#loc130)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc155)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc67)
    cir.return loc(#loc66)
  } loc(#loc154)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc157)
    %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc158)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc74)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc74)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc74)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc74)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc74)
    %7 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc159)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc74)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc74)
    cir.store %9, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc158)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc76)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc76)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc76)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc76)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc76)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc76)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc76)
    cir.store %16, %7 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc159)
    cir.goto "source" loc(#loc160)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc79)
    %17 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc80)
    cir.store %17, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc161)
    cir.scope {
      %18 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc163)
      cir.scope {
        %19 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc165)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc92)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc92)
          cir.store %21, %19 : !u64i, !cir.ptr<!u64i> loc(#loc167)
          cir.for : cond {
            %22 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc94)
            %23 = cir.const #cir.int<100> : !s32i loc(#loc95)
            %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc95)
            %25 = cir.cmp(lt, %22, %24) : !u64i, !s32i loc(#loc168)
            %26 = cir.cast(int_to_bool, %25 : !s32i), !cir.bool loc(#loc96)
            cir.condition(%26) loc(#loc96)
          } body {
            cir.scope {
              %22 = cir.const #cir.int<0> : !s32i loc(#loc98)
              %23 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc99)
              %24 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc100)
              %25 = cir.ptr_stride(%24 : !cir.ptr<!ty__twoIntsStruct>, %23 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc100)
              %26 = cir.get_member %25[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc35)
              cir.store %22, %26 : !s32i, !cir.ptr<!s32i> loc(#loc170)
              %27 = cir.const #cir.int<0> : !s32i loc(#loc101)
              %28 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc102)
              %29 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc103)
              %30 = cir.ptr_stride(%29 : !cir.ptr<!ty__twoIntsStruct>, %28 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc103)
              %31 = cir.get_member %30[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc39)
              cir.store %27, %31 : !s32i, !cir.ptr<!s32i> loc(#loc171)
            } loc(#loc169)
            cir.yield loc(#loc91)
          } step {
            %22 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc104)
            %23 = cir.unary(inc, %22) : !u64i, !u64i loc(#loc105)
            cir.store %23, %19 : !u64i, !cir.ptr<!u64i> loc(#loc172)
            cir.yield loc(#loc166)
          } loc(#loc166)
        } loc(#loc166)
      } loc(#loc164)
      cir.scope {
        %19 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc174)
        cir.scope {
          %23 = cir.const #cir.int<0> : !s32i loc(#loc112)
          %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc112)
          cir.store %24, %19 : !u64i, !cir.ptr<!u64i> loc(#loc176)
          cir.for : cond {
            %25 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc114)
            %26 = cir.const #cir.int<100> : !s32i loc(#loc115)
            %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc115)
            %28 = cir.cmp(lt, %25, %27) : !u64i, !s32i loc(#loc177)
            %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc116)
            cir.condition(%29) loc(#loc116)
          } body {
            cir.scope {
              %25 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc118)
              %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc119)
              %27 = cir.ptr_stride(%25 : !cir.ptr<!ty__twoIntsStruct>, %26 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc120)
              %28 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc121)
              %29 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc122)
              %30 = cir.ptr_stride(%29 : !cir.ptr<!ty__twoIntsStruct>, %28 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc122)
              cir.copy %30 to %27 : !cir.ptr<!ty__twoIntsStruct> loc(#loc120)
            } loc(#loc178)
            cir.yield loc(#loc111)
          } step {
            %25 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc123)
            %26 = cir.unary(inc, %25) : !u64i, !u64i loc(#loc124)
            cir.store %26, %19 : !u64i, !cir.ptr<!u64i> loc(#loc179)
            cir.yield loc(#loc175)
          } loc(#loc175)
        } loc(#loc175)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc125)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc126)
        %22 = cir.ptr_stride(%20 : !cir.ptr<!ty__twoIntsStruct>, %21 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc127)
        cir.call @printStructLine(%22) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc128)
      } loc(#loc173)
    } loc(#loc162)
    cir.return loc(#loc70)
  } loc(#loc156)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":52:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":23:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":23:21)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":24:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":24:54)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":25:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":25:55)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":26:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":26:10)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":27:1)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":30:12)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":30:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":31:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":51:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":32:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":32:33)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":33:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":41:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":34:13)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":34:20)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":36:13)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":40:13)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":36:22)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":36:18)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":36:25)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":36:29)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":36:27)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":37:13)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":38:36)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":38:24)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":38:17)
#loc35 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":39:36)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":39:24)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":39:17)
#loc39 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":36:35)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":36:34)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":42:9)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":50:9)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":43:13)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":43:20)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":45:13)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":48:13)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":45:22)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":45:18)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":45:25)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":45:29)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":45:27)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":46:13)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":47:17)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":47:22)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":47:23)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":47:34)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":47:27)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":45:35)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":45:34)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":49:30)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":49:35)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":49:36)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":49:13)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":91:1)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":94:1)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":93:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":93:13)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":59:1)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":89:1)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":61:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":61:21)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":62:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":62:54)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":63:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":63:55)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":64:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":64:10)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":65:1)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":67:12)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":67:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":68:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":88:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":69:9)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":69:33)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":70:9)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":78:9)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":71:13)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":71:20)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":73:13)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":77:13)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":73:22)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":73:18)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":73:25)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":73:29)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":73:27)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":74:13)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":75:36)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":75:24)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":75:17)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":76:36)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":76:24)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":76:17)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":73:35)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":73:34)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":79:9)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":87:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":80:13)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":80:20)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":82:13)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":85:13)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":82:22)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":82:18)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":82:25)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":82:29)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":82:27)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":83:13)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":84:17)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":84:22)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":84:23)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":84:34)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":84:27)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":82:35)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":82:34)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":86:30)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":86:35)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":86:36)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c":86:13)
#loc129 = loc(fused[#loc1, #loc2])
#loc130 = loc(fused[#loc3, #loc4])
#loc131 = loc(fused[#loc5, #loc6])
#loc132 = loc(fused[#loc7, #loc8])
#loc133 = loc(fused[#loc9, #loc10])
#loc134 = loc(fused[#loc11, #loc12])
#loc135 = loc(fused[#loc15, #loc14])
#loc136 = loc(fused[#loc16, #loc17])
#loc137 = loc(fused[#loc18, #loc19])
#loc138 = loc(fused[#loc20, #loc21])
#loc139 = loc(fused[#loc22, #loc23])
#loc140 = loc(fused[#loc24, #loc25])
#loc141 = loc(fused[#loc27, #loc26])
#loc142 = loc(fused[#loc28, #loc29])
#loc143 = loc(fused[#loc31, #loc25])
#loc144 = loc(fused[#loc34, #loc32])
#loc145 = loc(fused[#loc38, #loc36])
#loc146 = loc(fused[#loc41, #loc40])
#loc147 = loc(fused[#loc42, #loc43])
#loc148 = loc(fused[#loc44, #loc45])
#loc149 = loc(fused[#loc46, #loc47])
#loc150 = loc(fused[#loc49, #loc48])
#loc151 = loc(fused[#loc50, #loc51])
#loc152 = loc(fused[#loc53, #loc47])
#loc153 = loc(fused[#loc60, #loc59])
#loc154 = loc(fused[#loc65, #loc66])
#loc155 = loc(fused[#loc67, #loc68])
#loc156 = loc(fused[#loc69, #loc70])
#loc157 = loc(fused[#loc71, #loc72])
#loc158 = loc(fused[#loc73, #loc74])
#loc159 = loc(fused[#loc75, #loc76])
#loc160 = loc(fused[#loc77, #loc78])
#loc161 = loc(fused[#loc81, #loc80])
#loc162 = loc(fused[#loc82, #loc83])
#loc163 = loc(fused[#loc84, #loc85])
#loc164 = loc(fused[#loc86, #loc87])
#loc165 = loc(fused[#loc88, #loc89])
#loc166 = loc(fused[#loc90, #loc91])
#loc167 = loc(fused[#loc93, #loc92])
#loc168 = loc(fused[#loc94, #loc95])
#loc169 = loc(fused[#loc97, #loc91])
#loc170 = loc(fused[#loc100, #loc98])
#loc171 = loc(fused[#loc103, #loc101])
#loc172 = loc(fused[#loc105, #loc104])
#loc173 = loc(fused[#loc106, #loc107])
#loc174 = loc(fused[#loc108, #loc109])
#loc175 = loc(fused[#loc110, #loc111])
#loc176 = loc(fused[#loc113, #loc112])
#loc177 = loc(fused[#loc114, #loc115])
#loc178 = loc(fused[#loc117, #loc111])
#loc179 = loc(fused[#loc124, #loc123])
