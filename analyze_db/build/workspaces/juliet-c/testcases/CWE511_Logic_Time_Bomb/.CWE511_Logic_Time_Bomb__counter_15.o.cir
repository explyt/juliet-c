!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc3)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc105)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_15_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc11)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc109)
            %2 = cir.const #cir.int<0> : !s32i loc(#loc16)
            cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc109)
            cir.scope {
              cir.do {
                cir.scope {
                  cir.scope {
                    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc23)
                    %6 = cir.const #cir.int<20000> : !s32i loc(#loc24)
                    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc113)
                    cir.if %7 {
                      %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc3)
                      %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc3)
                      %10 = cir.call @unlink(%9) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc26)
                    } loc(#loc114)
                  } loc(#loc112)
                  %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc27)
                  %4 = cir.unary(inc, %3) nsw : !s32i, !s32i loc(#loc28)
                  cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc115)
                } loc(#loc111)
                cir.yield loc(#loc18)
              } while {
                %3 = cir.const #cir.int<1> : !s32i loc(#loc29)
                %4 = cir.const #cir.int<1> : !s32i loc(#loc30)
                %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc116)
                cir.condition(%5) loc(#loc31)
              } loc(#loc110)
            } loc(#loc110)
          } loc(#loc108)
          cir.break loc(#loc32)
        } loc(#loc12)
        cir.case(default, []) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc6)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc6)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc34)
          cir.break loc(#loc35)
        } loc(#loc33)
        cir.yield loc(#loc9)
      } loc(#loc9)
    } loc(#loc107)
    cir.return loc(#loc8)
  } loc(#loc106)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc118)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc119)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    cir.return loc(#loc37)
  } loc(#loc117)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc42)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc47)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc49)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc49)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc50)
          cir.break loc(#loc51)
        } loc(#loc48)
        cir.case(default, []) {
          cir.scope {
            %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc123)
            %2 = cir.const #cir.int<0> : !s32i loc(#loc56)
            cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc123)
            cir.scope {
              cir.do {
                cir.scope {
                  cir.scope {
                    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc63)
                    %6 = cir.const #cir.int<20000> : !s32i loc(#loc64)
                    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc127)
                    cir.if %7 {
                      %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc42)
                      %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc42)
                      cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc66)
                    } loc(#loc128)
                  } loc(#loc126)
                  %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc67)
                  %4 = cir.unary(inc, %3) nsw : !s32i, !s32i loc(#loc68)
                  cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc129)
                } loc(#loc125)
                cir.yield loc(#loc58)
              } while {
                %3 = cir.const #cir.int<1> : !s32i loc(#loc69)
                %4 = cir.const #cir.int<1> : !s32i loc(#loc70)
                %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc130)
                cir.condition(%5) loc(#loc71)
              } loc(#loc124)
            } loc(#loc124)
          } loc(#loc122)
          cir.break loc(#loc72)
        } loc(#loc52)
        cir.yield loc(#loc45)
      } loc(#loc45)
    } loc(#loc121)
    cir.return loc(#loc44)
  } loc(#loc120)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc77)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc134)
            %2 = cir.const #cir.int<0> : !s32i loc(#loc82)
            cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc134)
            cir.scope {
              cir.do {
                cir.scope {
                  cir.scope {
                    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc89)
                    %6 = cir.const #cir.int<20000> : !s32i loc(#loc90)
                    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc138)
                    cir.if %7 {
                      %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc92)
                      %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc92)
                      cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc93)
                    } loc(#loc139)
                  } loc(#loc137)
                  %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc94)
                  %4 = cir.unary(inc, %3) nsw : !s32i, !s32i loc(#loc95)
                  cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc140)
                } loc(#loc136)
                cir.yield loc(#loc84)
              } while {
                %3 = cir.const #cir.int<1> : !s32i loc(#loc96)
                %4 = cir.const #cir.int<1> : !s32i loc(#loc97)
                %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc141)
                cir.condition(%5) loc(#loc98)
              } loc(#loc135)
            } loc(#loc135)
          } loc(#loc133)
          cir.break loc(#loc99)
        } loc(#loc78)
        cir.case(default, []) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc101)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc101)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc102)
          cir.break loc(#loc103)
        } loc(#loc100)
        cir.yield loc(#loc75)
      } loc(#loc75)
    } loc(#loc132)
    cir.return loc(#loc74)
  } loc(#loc131)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_15.c":0:0)
#loc1 = loc("/usr/include/unistd.h":858:1)
#loc2 = loc("/usr/include/unistd.h":858:48)
#loc3 = loc("CWE511_Logic_Time_Bomb__counter_15.c":41:24)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc6 = loc("CWE511_Logic_Time_Bomb__counter_15.c":50:19)
#loc7 = loc("CWE511_Logic_Time_Bomb__counter_15.c":29:1)
#loc8 = loc("CWE511_Logic_Time_Bomb__counter_15.c":53:1)
#loc9 = loc("CWE511_Logic_Time_Bomb__counter_15.c":31:5)
#loc10 = loc("CWE511_Logic_Time_Bomb__counter_15.c":52:5)
#loc11 = loc("CWE511_Logic_Time_Bomb__counter_15.c":31:12)
#loc12 = loc("CWE511_Logic_Time_Bomb__counter_15.c":33:5)
#loc13 = loc("CWE511_Logic_Time_Bomb__counter_15.c":34:5)
#loc14 = loc("CWE511_Logic_Time_Bomb__counter_15.c":46:5)
#loc15 = loc("CWE511_Logic_Time_Bomb__counter_15.c":35:9)
#loc16 = loc("CWE511_Logic_Time_Bomb__counter_15.c":35:21)
#loc17 = loc("CWE511_Logic_Time_Bomb__counter_15.c":36:9)
#loc18 = loc("CWE511_Logic_Time_Bomb__counter_15.c":45:21)
#loc19 = loc("CWE511_Logic_Time_Bomb__counter_15.c":37:9)
#loc20 = loc("CWE511_Logic_Time_Bomb__counter_15.c":44:9)
#loc21 = loc("CWE511_Logic_Time_Bomb__counter_15.c":39:13)
#loc22 = loc("CWE511_Logic_Time_Bomb__counter_15.c":42:13)
#loc23 = loc("CWE511_Logic_Time_Bomb__counter_15.c":39:17)
#loc24 = loc("CWE511_Logic_Time_Bomb__counter_15.c":39:26)
#loc25 = loc("CWE511_Logic_Time_Bomb__counter_15.c":40:13)
#loc26 = loc("CWE511_Logic_Time_Bomb__counter_15.c":41:17)
#loc27 = loc("CWE511_Logic_Time_Bomb__counter_15.c":43:18)
#loc28 = loc("CWE511_Logic_Time_Bomb__counter_15.c":43:13)
#loc29 = loc("CWE511_Logic_Time_Bomb__counter_15.c":45:15)
#loc30 = loc("CWE511_Logic_Time_Bomb__counter_15.c":45:20)
#loc31 = loc("CWE511_Logic_Time_Bomb__counter_15.c":45:17)
#loc32 = loc("CWE511_Logic_Time_Bomb__counter_15.c":47:5)
#loc33 = loc("CWE511_Logic_Time_Bomb__counter_15.c":48:5)
#loc34 = loc("CWE511_Logic_Time_Bomb__counter_15.c":50:9)
#loc35 = loc("CWE511_Logic_Time_Bomb__counter_15.c":51:9)
#loc36 = loc("CWE511_Logic_Time_Bomb__counter_15.c":113:1)
#loc37 = loc("CWE511_Logic_Time_Bomb__counter_15.c":117:1)
#loc38 = loc("CWE511_Logic_Time_Bomb__counter_15.c":115:5)
#loc39 = loc("CWE511_Logic_Time_Bomb__counter_15.c":115:11)
#loc40 = loc("CWE511_Logic_Time_Bomb__counter_15.c":116:5)
#loc41 = loc("CWE511_Logic_Time_Bomb__counter_15.c":116:11)
#loc42 = loc("CWE511_Logic_Time_Bomb__counter_15.c":76:27)
#loc43 = loc("CWE511_Logic_Time_Bomb__counter_15.c":60:1)
#loc44 = loc("CWE511_Logic_Time_Bomb__counter_15.c":84:1)
#loc45 = loc("CWE511_Logic_Time_Bomb__counter_15.c":62:5)
#loc46 = loc("CWE511_Logic_Time_Bomb__counter_15.c":83:5)
#loc47 = loc("CWE511_Logic_Time_Bomb__counter_15.c":62:12)
#loc48 = loc("CWE511_Logic_Time_Bomb__counter_15.c":64:5)
#loc49 = loc("CWE511_Logic_Time_Bomb__counter_15.c":66:19)
#loc50 = loc("CWE511_Logic_Time_Bomb__counter_15.c":66:9)
#loc51 = loc("CWE511_Logic_Time_Bomb__counter_15.c":67:9)
#loc52 = loc("CWE511_Logic_Time_Bomb__counter_15.c":68:5)
#loc53 = loc("CWE511_Logic_Time_Bomb__counter_15.c":69:5)
#loc54 = loc("CWE511_Logic_Time_Bomb__counter_15.c":81:5)
#loc55 = loc("CWE511_Logic_Time_Bomb__counter_15.c":70:9)
#loc56 = loc("CWE511_Logic_Time_Bomb__counter_15.c":70:21)
#loc57 = loc("CWE511_Logic_Time_Bomb__counter_15.c":71:9)
#loc58 = loc("CWE511_Logic_Time_Bomb__counter_15.c":80:21)
#loc59 = loc("CWE511_Logic_Time_Bomb__counter_15.c":72:9)
#loc60 = loc("CWE511_Logic_Time_Bomb__counter_15.c":79:9)
#loc61 = loc("CWE511_Logic_Time_Bomb__counter_15.c":74:13)
#loc62 = loc("CWE511_Logic_Time_Bomb__counter_15.c":77:13)
#loc63 = loc("CWE511_Logic_Time_Bomb__counter_15.c":74:17)
#loc64 = loc("CWE511_Logic_Time_Bomb__counter_15.c":74:26)
#loc65 = loc("CWE511_Logic_Time_Bomb__counter_15.c":75:13)
#loc66 = loc("CWE511_Logic_Time_Bomb__counter_15.c":76:17)
#loc67 = loc("CWE511_Logic_Time_Bomb__counter_15.c":78:18)
#loc68 = loc("CWE511_Logic_Time_Bomb__counter_15.c":78:13)
#loc69 = loc("CWE511_Logic_Time_Bomb__counter_15.c":80:15)
#loc70 = loc("CWE511_Logic_Time_Bomb__counter_15.c":80:20)
#loc71 = loc("CWE511_Logic_Time_Bomb__counter_15.c":80:17)
#loc72 = loc("CWE511_Logic_Time_Bomb__counter_15.c":82:5)
#loc73 = loc("CWE511_Logic_Time_Bomb__counter_15.c":87:1)
#loc74 = loc("CWE511_Logic_Time_Bomb__counter_15.c":111:1)
#loc75 = loc("CWE511_Logic_Time_Bomb__counter_15.c":89:5)
#loc76 = loc("CWE511_Logic_Time_Bomb__counter_15.c":110:5)
#loc77 = loc("CWE511_Logic_Time_Bomb__counter_15.c":89:12)
#loc78 = loc("CWE511_Logic_Time_Bomb__counter_15.c":91:5)
#loc79 = loc("CWE511_Logic_Time_Bomb__counter_15.c":92:5)
#loc80 = loc("CWE511_Logic_Time_Bomb__counter_15.c":104:5)
#loc81 = loc("CWE511_Logic_Time_Bomb__counter_15.c":93:9)
#loc82 = loc("CWE511_Logic_Time_Bomb__counter_15.c":93:21)
#loc83 = loc("CWE511_Logic_Time_Bomb__counter_15.c":94:9)
#loc84 = loc("CWE511_Logic_Time_Bomb__counter_15.c":103:21)
#loc85 = loc("CWE511_Logic_Time_Bomb__counter_15.c":95:9)
#loc86 = loc("CWE511_Logic_Time_Bomb__counter_15.c":102:9)
#loc87 = loc("CWE511_Logic_Time_Bomb__counter_15.c":97:13)
#loc88 = loc("CWE511_Logic_Time_Bomb__counter_15.c":100:13)
#loc89 = loc("CWE511_Logic_Time_Bomb__counter_15.c":97:17)
#loc90 = loc("CWE511_Logic_Time_Bomb__counter_15.c":97:26)
#loc91 = loc("CWE511_Logic_Time_Bomb__counter_15.c":98:13)
#loc92 = loc("CWE511_Logic_Time_Bomb__counter_15.c":99:27)
#loc93 = loc("CWE511_Logic_Time_Bomb__counter_15.c":99:17)
#loc94 = loc("CWE511_Logic_Time_Bomb__counter_15.c":101:18)
#loc95 = loc("CWE511_Logic_Time_Bomb__counter_15.c":101:13)
#loc96 = loc("CWE511_Logic_Time_Bomb__counter_15.c":103:15)
#loc97 = loc("CWE511_Logic_Time_Bomb__counter_15.c":103:20)
#loc98 = loc("CWE511_Logic_Time_Bomb__counter_15.c":103:17)
#loc99 = loc("CWE511_Logic_Time_Bomb__counter_15.c":105:5)
#loc100 = loc("CWE511_Logic_Time_Bomb__counter_15.c":106:5)
#loc101 = loc("CWE511_Logic_Time_Bomb__counter_15.c":108:19)
#loc102 = loc("CWE511_Logic_Time_Bomb__counter_15.c":108:9)
#loc103 = loc("CWE511_Logic_Time_Bomb__counter_15.c":109:9)
#loc104 = loc(fused[#loc1, #loc2])
#loc105 = loc(fused[#loc4, #loc5])
#loc106 = loc(fused[#loc7, #loc8])
#loc107 = loc(fused[#loc9, #loc10])
#loc108 = loc(fused[#loc13, #loc14])
#loc109 = loc(fused[#loc15, #loc16])
#loc110 = loc(fused[#loc17, #loc18])
#loc111 = loc(fused[#loc19, #loc20])
#loc112 = loc(fused[#loc21, #loc22])
#loc113 = loc(fused[#loc23, #loc24])
#loc114 = loc(fused[#loc25, #loc22])
#loc115 = loc(fused[#loc28, #loc27])
#loc116 = loc(fused[#loc29, #loc30])
#loc117 = loc(fused[#loc36, #loc37])
#loc118 = loc(fused[#loc38, #loc39])
#loc119 = loc(fused[#loc40, #loc41])
#loc120 = loc(fused[#loc43, #loc44])
#loc121 = loc(fused[#loc45, #loc46])
#loc122 = loc(fused[#loc53, #loc54])
#loc123 = loc(fused[#loc55, #loc56])
#loc124 = loc(fused[#loc57, #loc58])
#loc125 = loc(fused[#loc59, #loc60])
#loc126 = loc(fused[#loc61, #loc62])
#loc127 = loc(fused[#loc63, #loc64])
#loc128 = loc(fused[#loc65, #loc62])
#loc129 = loc(fused[#loc68, #loc67])
#loc130 = loc(fused[#loc69, #loc70])
#loc131 = loc(fused[#loc73, #loc74])
#loc132 = loc(fused[#loc75, #loc76])
#loc133 = loc(fused[#loc79, #loc80])
#loc134 = loc(fused[#loc81, #loc82])
#loc135 = loc(fused[#loc83, #loc84])
#loc136 = loc(fused[#loc85, #loc86])
#loc137 = loc(fused[#loc87, #loc88])
#loc138 = loc(fused[#loc89, #loc90])
#loc139 = loc(fused[#loc91, #loc88])
#loc140 = loc(fused[#loc95, #loc94])
#loc141 = loc(fused[#loc96, #loc97])
