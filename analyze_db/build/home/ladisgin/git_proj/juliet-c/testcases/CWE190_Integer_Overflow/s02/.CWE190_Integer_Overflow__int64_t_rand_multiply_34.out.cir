!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":34:21)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":112:10)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":112:14)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":112:20)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":112:32)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":78:21)
!ty_CWE190_Integer_Overflow__int64_t_rand_multiply_34_unionType = !cir.struct<union "CWE190_Integer_Overflow__int64_t_rand_multiply_34_unionType" {!s64i, !s64i}>
#loc153 = loc(fused[#loc51, #loc52])
#loc154 = loc(fused[#loc53, #loc54])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_34.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc132)
  cir.func private @printLongLongLine(!s64i) loc(#loc133)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_multiply_34_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc135)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc136)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc137)
    %3 = cir.alloca !ty_CWE190_Integer_Overflow__int64_t_rand_multiply_34_unionType, !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_multiply_34_unionType>, ["myUnion"] {alignment = 8 : i64} loc(#loc138)
    %4 = cir.const #cir.int<0> : !s64i loc(#loc15)
    cir.store %4, %2 : !s64i, !cir.ptr<!s64i> loc(#loc139)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc17)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc17)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc17)
    %11 = cir.const #cir.int<60> : !s32i loc(#loc17)
    %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc17)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc17)
    %15 = cir.const #cir.int<45> : !s32i loc(#loc17)
    %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc17)
    %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc17)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc17)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc17)
    %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc17)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc17)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc17)
    %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc17)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc17)
    %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc17)
    cir.br ^bb3(%30 : !u64i) loc(#loc17)
  ^bb2:  // pred: ^bb0
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc17)
    %33 = cir.const #cir.int<60> : !s32i loc(#loc17)
    %34 = cir.shift(left, %32 : !u64i, %33 : !s32i) -> !u64i loc(#loc17)
    %35 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc17)
    %37 = cir.const #cir.int<45> : !s32i loc(#loc17)
    %38 = cir.shift(left, %36 : !u64i, %37 : !s32i) -> !u64i loc(#loc17)
    %39 = cir.binop(xor, %34, %38) : !u64i loc(#loc17)
    %40 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc17)
    %42 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %43 = cir.shift(left, %41 : !u64i, %42 : !s32i) -> !u64i loc(#loc17)
    %44 = cir.binop(xor, %39, %43) : !u64i loc(#loc17)
    %45 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc17)
    %47 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %48 = cir.shift(left, %46 : !u64i, %47 : !s32i) -> !u64i loc(#loc17)
    %49 = cir.binop(xor, %44, %48) : !u64i loc(#loc17)
    %50 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %51 = cir.cast(integral, %50 : !s32i), !u64i loc(#loc17)
    %52 = cir.binop(xor, %49, %51) : !u64i loc(#loc17)
    %53 = cir.unary(minus, %52) : !u64i, !u64i loc(#loc17)
    %54 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %55 = cir.cast(integral, %54 : !s32i), !u64i loc(#loc17)
    %56 = cir.binop(sub, %53, %55) : !u64i loc(#loc17)
    cir.br ^bb3(%56 : !u64i) loc(#loc17)
  ^bb3(%57: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":34:21)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // pred: ^bb3
    %58 = cir.cast(integral, %57 : !u64i), !s64i loc(#loc17)
    cir.store %58, %2 : !s64i, !cir.ptr<!s64i> loc(#loc140)
    %59 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc19)
    %60 = cir.get_member %3[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_multiply_34_unionType> -> !cir.ptr<!s64i> loc(#loc20)
    cir.store %59, %60 : !s64i, !cir.ptr<!s64i> loc(#loc141)
    cir.br ^bb5 loc(#loc142)
  ^bb5:  // pred: ^bb4
    %61 = cir.get_member %3[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_multiply_34_unionType> -> !cir.ptr<!s64i> loc(#loc24)
    %62 = cir.load %61 : !cir.ptr<!s64i>, !s64i loc(#loc8)
    cir.store %62, %0 : !s64i, !cir.ptr<!s64i> loc(#loc135)
    cir.br ^bb6 loc(#loc143)
  ^bb6:  // pred: ^bb5
    %63 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc27)
    %64 = cir.const #cir.int<0> : !s32i loc(#loc28)
    %65 = cir.cast(integral, %64 : !s32i), !s64i loc(#loc28)
    %66 = cir.cmp(gt, %63, %65) : !s64i, !cir.bool loc(#loc144)
    cir.brcond %66 ^bb7, ^bb8 loc(#loc145)
  ^bb7:  // pred: ^bb6
    %67 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc30)
    %68 = cir.const #cir.int<2> : !s32i loc(#loc10)
    %69 = cir.cast(integral, %68 : !s32i), !s64i loc(#loc10)
    %70 = cir.binop(mul, %67, %69) nsw : !s64i loc(#loc30)
    cir.store %70, %1 : !s64i, !cir.ptr<!s64i> loc(#loc136)
    %71 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc31)
    cir.call @printLongLongLine(%71) : (!s64i) -> () loc(#loc32)
    cir.br ^bb8 loc(#loc26)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc26)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc23)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc6)
  } loc(#loc134)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_multiply_34_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc147)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc148)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    cir.return loc(#loc34)
  } loc(#loc146)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc149)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc150)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc151)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc48)
  cir.func @main(%arg0: !s32i loc(fused[#loc51, #loc52]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc53, #loc54])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc153)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc154)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc50)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc55)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc55)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc56)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc57)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc57)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc58)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc45)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %8 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_multiply_34_good : !cir.ptr<!cir.func<!void ()>> loc(#loc155)
    cir.call @CWE190_Integer_Overflow__int64_t_rand_multiply_34_good() : () -> () loc(#loc60)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc46)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc47)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %13 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_multiply_34_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc156)
    cir.call @CWE190_Integer_Overflow__int64_t_rand_multiply_34_bad() : () -> () loc(#loc64)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc48)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc67)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc157)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc157)
    cir.return %17 : !s32i loc(#loc157)
  } loc(#loc152)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc159)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc160)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc161)
    %3 = cir.alloca !ty_CWE190_Integer_Overflow__int64_t_rand_multiply_34_unionType, !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_multiply_34_unionType>, ["myUnion"] {alignment = 8 : i64} loc(#loc162)
    %4 = cir.const #cir.int<0> : !s64i loc(#loc79)
    cir.store %4, %2 : !s64i, !cir.ptr<!s64i> loc(#loc163)
    %5 = cir.const #cir.int<2> : !s32i loc(#loc81)
    %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc81)
    cir.store %6, %2 : !s64i, !cir.ptr<!s64i> loc(#loc164)
    %7 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc83)
    %8 = cir.get_member %3[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_multiply_34_unionType> -> !cir.ptr<!s64i> loc(#loc20)
    cir.store %7, %8 : !s64i, !cir.ptr<!s64i> loc(#loc165)
    cir.br ^bb1 loc(#loc166)
  ^bb1:  // pred: ^bb0
    %9 = cir.get_member %3[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_multiply_34_unionType> -> !cir.ptr<!s64i> loc(#loc24)
    %10 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc72)
    cir.store %10, %0 : !s64i, !cir.ptr<!s64i> loc(#loc159)
    cir.br ^bb2 loc(#loc167)
  ^bb2:  // pred: ^bb1
    %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc89)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc90)
    %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc90)
    %14 = cir.cmp(gt, %11, %13) : !s64i, !cir.bool loc(#loc168)
    cir.brcond %14 ^bb3, ^bb4 loc(#loc169)
  ^bb3:  // pred: ^bb2
    %15 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc92)
    %16 = cir.const #cir.int<2> : !s32i loc(#loc74)
    %17 = cir.cast(integral, %16 : !s32i), !s64i loc(#loc74)
    %18 = cir.binop(mul, %15, %17) nsw : !s64i loc(#loc92)
    cir.store %18, %1 : !s64i, !cir.ptr<!s64i> loc(#loc160)
    %19 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc93)
    cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc94)
    cir.br ^bb4 loc(#loc88)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc88)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc86)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc70)
  } loc(#loc158)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc95)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc171)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc172)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc173)
    %3 = cir.alloca !ty_CWE190_Integer_Overflow__int64_t_rand_multiply_34_unionType, !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_multiply_34_unionType>, ["myUnion"] {alignment = 8 : i64} loc(#loc174)
    %4 = cir.const #cir.int<0> : !s64i loc(#loc106)
    cir.store %4, %2 : !s64i, !cir.ptr<!s64i> loc(#loc175)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc108)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc108)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc108)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc108)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc108)
    %11 = cir.const #cir.int<60> : !s32i loc(#loc108)
    %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc108)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc108)
    %15 = cir.const #cir.int<45> : !s32i loc(#loc108)
    %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc108)
    %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc108)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc108)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc108)
    %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc108)
    %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc108)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc108)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc108)
    %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc108)
    %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc108)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc108)
    %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc108)
    cir.br ^bb3(%30 : !u64i) loc(#loc108)
  ^bb2:  // pred: ^bb0
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc108)
    %33 = cir.const #cir.int<60> : !s32i loc(#loc108)
    %34 = cir.shift(left, %32 : !u64i, %33 : !s32i) -> !u64i loc(#loc108)
    %35 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc108)
    %37 = cir.const #cir.int<45> : !s32i loc(#loc108)
    %38 = cir.shift(left, %36 : !u64i, %37 : !s32i) -> !u64i loc(#loc108)
    %39 = cir.binop(xor, %34, %38) : !u64i loc(#loc108)
    %40 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc108)
    %42 = cir.const #cir.int<30> : !s32i loc(#loc108)
    %43 = cir.shift(left, %41 : !u64i, %42 : !s32i) -> !u64i loc(#loc108)
    %44 = cir.binop(xor, %39, %43) : !u64i loc(#loc108)
    %45 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc108)
    %47 = cir.const #cir.int<15> : !s32i loc(#loc108)
    %48 = cir.shift(left, %46 : !u64i, %47 : !s32i) -> !u64i loc(#loc108)
    %49 = cir.binop(xor, %44, %48) : !u64i loc(#loc108)
    %50 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %51 = cir.cast(integral, %50 : !s32i), !u64i loc(#loc108)
    %52 = cir.binop(xor, %49, %51) : !u64i loc(#loc108)
    %53 = cir.unary(minus, %52) : !u64i, !u64i loc(#loc108)
    %54 = cir.const #cir.int<1> : !s32i loc(#loc108)
    %55 = cir.cast(integral, %54 : !s32i), !u64i loc(#loc108)
    %56 = cir.binop(sub, %53, %55) : !u64i loc(#loc108)
    cir.br ^bb3(%56 : !u64i) loc(#loc108)
  ^bb3(%57: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":78:21)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc108)
  ^bb4:  // pred: ^bb3
    %58 = cir.cast(integral, %57 : !u64i), !s64i loc(#loc108)
    cir.store %58, %2 : !s64i, !cir.ptr<!s64i> loc(#loc176)
    %59 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc110)
    %60 = cir.get_member %3[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_multiply_34_unionType> -> !cir.ptr<!s64i> loc(#loc20)
    cir.store %59, %60 : !s64i, !cir.ptr<!s64i> loc(#loc177)
    cir.br ^bb5 loc(#loc178)
  ^bb5:  // pred: ^bb4
    %61 = cir.get_member %3[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_multiply_34_unionType> -> !cir.ptr<!s64i> loc(#loc24)
    %62 = cir.load %61 : !cir.ptr<!s64i>, !s64i loc(#loc99)
    cir.store %62, %0 : !s64i, !cir.ptr<!s64i> loc(#loc171)
    cir.br ^bb6 loc(#loc179)
  ^bb6:  // pred: ^bb5
    %63 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc116)
    %64 = cir.const #cir.int<0> : !s32i loc(#loc117)
    %65 = cir.cast(integral, %64 : !s32i), !s64i loc(#loc117)
    %66 = cir.cmp(gt, %63, %65) : !s64i, !cir.bool loc(#loc180)
    cir.brcond %66 ^bb7, ^bb13 loc(#loc181)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc182)
  ^bb8:  // pred: ^bb7
    %67 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc121)
    %68 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc122)
    %69 = cir.const #cir.int<2> : !s32i loc(#loc123)
    %70 = cir.cast(integral, %69 : !s32i), !s64i loc(#loc123)
    %71 = cir.binop(div, %68, %70) : !s64i loc(#loc183)
    %72 = cir.cmp(lt, %67, %71) : !s64i, !cir.bool loc(#loc184)
    cir.brcond %72 ^bb9, ^bb10 loc(#loc185)
  ^bb9:  // pred: ^bb8
    %73 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc128)
    %74 = cir.const #cir.int<2> : !s32i loc(#loc101)
    %75 = cir.cast(integral, %74 : !s32i), !s64i loc(#loc101)
    %76 = cir.binop(mul, %73, %75) nsw : !s64i loc(#loc128)
    cir.store %76, %1 : !s64i, !cir.ptr<!s64i> loc(#loc172)
    %77 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc129)
    cir.call @printLongLongLine(%77) : (!s64i) -> () loc(#loc130)
    cir.br ^bb11 loc(#loc126)
  ^bb10:  // pred: ^bb8
    %78 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc95)
    %79 = cir.cast(array_to_ptrdecay, %78 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc95)
    cir.call @printLine(%79) : (!cir.ptr<!s8i>) -> () loc(#loc131)
    cir.br ^bb11 loc(#loc120)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc120)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc115)
  ^bb13:  // 2 preds: ^bb6, ^bb12
    cir.br ^bb14 loc(#loc115)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc113)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc97)
  } loc(#loc170)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":28:1)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":45:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":37:9)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":37:32)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":41:13)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":41:37)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":30:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":30:13)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":31:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":31:65)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":32:12)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":32:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":34:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":35:26)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":22:13)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":35:5)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":36:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":44:5)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":23:13)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":38:9)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":43:9)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":38:12)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":38:19)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":39:9)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":41:30)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":42:31)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":42:13)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":98:1)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":102:1)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":100:5)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":100:13)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":101:5)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":101:13)
#loc39 = loc("/usr/include/stdlib.h":575:1)
#loc40 = loc("/usr/include/stdlib.h":575:41)
#loc41 = loc("/usr/include/time.h":76:1)
#loc42 = loc("/usr/include/time.h":76:38)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":117:15)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":119:15)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":122:15)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":124:15)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":112:1)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":127:1)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":113:1)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":115:27)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":115:22)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":115:5)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":117:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":118:5)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":118:60)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":119:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":122:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":123:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":123:59)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":124:5)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":126:12)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":126:5)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":52:1)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":69:1)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":61:9)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":61:32)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":65:13)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":65:37)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":54:5)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":54:13)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":55:5)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":55:65)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":56:12)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":56:5)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":58:12)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":58:5)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":59:26)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":59:5)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":60:5)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":68:5)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":62:9)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":67:9)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":62:12)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":62:19)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":63:9)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":65:30)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":66:31)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":66:13)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":92:27)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":72:1)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":96:1)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":81:9)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":81:32)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":87:17)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":87:41)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":74:5)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":74:13)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":75:5)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":75:65)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":76:12)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":76:5)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":78:5)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":79:26)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":79:5)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":80:5)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":95:5)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":82:9)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":94:9)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":82:12)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":82:19)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":83:9)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":85:13)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":93:13)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":85:17)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":85:25)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":85:35)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":85:36)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":86:13)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":89:13)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":91:13)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":87:34)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":88:35)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":88:17)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_34.c":92:17)
#loc132 = loc(fused[#loc1, #loc2])
#loc133 = loc(fused[#loc3, #loc4])
#loc134 = loc(fused[#loc5, #loc6])
#loc135 = loc(fused[#loc7, #loc8])
#loc136 = loc(fused[#loc9, #loc10])
#loc137 = loc(fused[#loc11, #loc12])
#loc138 = loc(fused[#loc13, #loc14])
#loc139 = loc(fused[#loc16, #loc15])
#loc140 = loc(fused[#loc18, #loc17])
#loc141 = loc(fused[#loc21, #loc19])
#loc142 = loc(fused[#loc22, #loc23])
#loc143 = loc(fused[#loc25, #loc26])
#loc144 = loc(fused[#loc27, #loc28])
#loc145 = loc(fused[#loc29, #loc26])
#loc146 = loc(fused[#loc33, #loc34])
#loc147 = loc(fused[#loc35, #loc36])
#loc148 = loc(fused[#loc37, #loc38])
#loc149 = loc(fused[#loc39, #loc40])
#loc150 = loc(fused[#loc41, #loc42])
#loc151 = loc(fused[#loc43, #loc44])
#loc152 = loc(fused[#loc49, #loc50])
#loc155 = loc(fused[#loc60, #loc61])
#loc156 = loc(fused[#loc64, #loc65])
#loc157 = loc(fused[#loc68, #loc67])
#loc158 = loc(fused[#loc69, #loc70])
#loc159 = loc(fused[#loc71, #loc72])
#loc160 = loc(fused[#loc73, #loc74])
#loc161 = loc(fused[#loc75, #loc76])
#loc162 = loc(fused[#loc77, #loc78])
#loc163 = loc(fused[#loc80, #loc79])
#loc164 = loc(fused[#loc82, #loc81])
#loc165 = loc(fused[#loc84, #loc83])
#loc166 = loc(fused[#loc85, #loc86])
#loc167 = loc(fused[#loc87, #loc88])
#loc168 = loc(fused[#loc89, #loc90])
#loc169 = loc(fused[#loc91, #loc88])
#loc170 = loc(fused[#loc96, #loc97])
#loc171 = loc(fused[#loc98, #loc99])
#loc172 = loc(fused[#loc100, #loc101])
#loc173 = loc(fused[#loc102, #loc103])
#loc174 = loc(fused[#loc104, #loc105])
#loc175 = loc(fused[#loc107, #loc106])
#loc176 = loc(fused[#loc109, #loc108])
#loc177 = loc(fused[#loc111, #loc110])
#loc178 = loc(fused[#loc112, #loc113])
#loc179 = loc(fused[#loc114, #loc115])
#loc180 = loc(fused[#loc116, #loc117])
#loc181 = loc(fused[#loc118, #loc115])
#loc182 = loc(fused[#loc119, #loc120])
#loc183 = loc(fused[#loc122, #loc123])
#loc184 = loc(fused[#loc121, #loc124])
#loc185 = loc(fused[#loc125, #loc126, #loc127, #loc120])
