!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc37 = loc("CWE398_Poor_Code_Quality__equals_04.c":94:10)
#loc38 = loc("CWE398_Poor_Code_Quality__equals_04.c":94:14)
#loc39 = loc("CWE398_Poor_Code_Quality__equals_04.c":94:20)
#loc40 = loc("CWE398_Poor_Code_Quality__equals_04.c":94:32)
#loc107 = loc(fused[#loc37, #loc38])
#loc108 = loc(fused[#loc39, #loc40])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__equals_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc93)
  cir.func no_proto @CWE398_Poor_Code_Quality__equals_04_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc7)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc7)
      cir.if %1 {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc98)
          %3 = cir.const #cir.int<1> : !s32i loc(#loc12)
          cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc98)
          %4 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc13)
          cir.call @printIntLine(%4) : (!s32i) -> () loc(#loc14)
          %5 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc15)
          cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc99)
          %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc17)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc18)
        } loc(#loc97)
      } loc(#loc96)
    } loc(#loc95)
    cir.return loc(#loc4)
  } loc(#loc94)
  cir.func no_proto @CWE398_Poor_Code_Quality__equals_04_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc101)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc21)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc102)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc23)
    cir.return loc(#loc20)
  } loc(#loc100)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc103)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc104)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc105)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc31)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc32)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc33)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc34)
  cir.func @main(%arg0: !s32i loc(fused[#loc37, #loc38]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc39, #loc40])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc107)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc108)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc36)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc41)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc41)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc42)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc43)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc43)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc44)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc31)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc31)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc45)
    %8 = cir.get_global @CWE398_Poor_Code_Quality__equals_04_good : !cir.ptr<!cir.func<!void ()>> loc(#loc109)
    cir.call @CWE398_Poor_Code_Quality__equals_04_good() : () -> () loc(#loc46)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc32)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc32)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc33)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc33)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    %13 = cir.get_global @CWE398_Poor_Code_Quality__equals_04_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc110)
    cir.call @CWE398_Poor_Code_Quality__equals_04_bad() : () -> () loc(#loc50)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc34)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc53)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc111)
    cir.return %17 : !s32i loc(#loc111)
  } loc(#loc106)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc55)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<0> : !s32i loc(#loc60)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc60)
      cir.if %1 {
        %2 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc55)
        %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc55)
        cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc64)
      } else {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc116)
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intFive", init] {alignment = 4 : i64} loc(#loc117)
          %4 = cir.const #cir.int<1> : !s32i loc(#loc68)
          cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc116)
          %5 = cir.const #cir.int<5> : !s32i loc(#loc69)
          cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc117)
          %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc70)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc71)
          %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc72)
          cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc118)
          %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc74)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc75)
        } loc(#loc115)
      } loc(#loc114)
    } loc(#loc113)
    cir.return loc(#loc57)
  } loc(#loc112)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc80)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc80)
      cir.if %1 {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc123)
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intFive", init] {alignment = 4 : i64} loc(#loc124)
          %4 = cir.const #cir.int<1> : !s32i loc(#loc85)
          cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc123)
          %5 = cir.const #cir.int<5> : !s32i loc(#loc86)
          cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc124)
          %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc87)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc88)
          %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc89)
          cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc125)
          %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc91)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc92)
        } loc(#loc122)
      } loc(#loc121)
    } loc(#loc120)
    cir.return loc(#loc77)
  } loc(#loc119)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__equals_04.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE398_Poor_Code_Quality__equals_04.c":26:1)
#loc4 = loc("CWE398_Poor_Code_Quality__equals_04.c":38:1)
#loc5 = loc("CWE398_Poor_Code_Quality__equals_04.c":28:5)
#loc6 = loc("CWE398_Poor_Code_Quality__equals_04.c":37:5)
#loc7 = loc("CWE398_Poor_Code_Quality__equals_04.c":28:8)
#loc8 = loc("CWE398_Poor_Code_Quality__equals_04.c":29:5)
#loc9 = loc("CWE398_Poor_Code_Quality__equals_04.c":30:9)
#loc10 = loc("CWE398_Poor_Code_Quality__equals_04.c":36:9)
#loc11 = loc("CWE398_Poor_Code_Quality__equals_04.c":31:13)
#loc12 = loc("CWE398_Poor_Code_Quality__equals_04.c":31:26)
#loc13 = loc("CWE398_Poor_Code_Quality__equals_04.c":32:26)
#loc14 = loc("CWE398_Poor_Code_Quality__equals_04.c":32:13)
#loc15 = loc("CWE398_Poor_Code_Quality__equals_04.c":34:22)
#loc16 = loc("CWE398_Poor_Code_Quality__equals_04.c":34:13)
#loc17 = loc("CWE398_Poor_Code_Quality__equals_04.c":35:26)
#loc18 = loc("CWE398_Poor_Code_Quality__equals_04.c":35:13)
#loc19 = loc("CWE398_Poor_Code_Quality__equals_04.c":79:1)
#loc20 = loc("CWE398_Poor_Code_Quality__equals_04.c":83:1)
#loc21 = loc("CWE398_Poor_Code_Quality__equals_04.c":81:5)
#loc22 = loc("CWE398_Poor_Code_Quality__equals_04.c":81:11)
#loc23 = loc("CWE398_Poor_Code_Quality__equals_04.c":82:5)
#loc24 = loc("CWE398_Poor_Code_Quality__equals_04.c":82:11)
#loc25 = loc("/usr/include/stdlib.h":575:1)
#loc26 = loc("/usr/include/stdlib.h":575:41)
#loc27 = loc("/usr/include/time.h":76:1)
#loc28 = loc("/usr/include/time.h":76:38)
#loc29 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc30 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc31 = loc("CWE398_Poor_Code_Quality__equals_04.c":99:15)
#loc32 = loc("CWE398_Poor_Code_Quality__equals_04.c":101:15)
#loc33 = loc("CWE398_Poor_Code_Quality__equals_04.c":104:15)
#loc34 = loc("CWE398_Poor_Code_Quality__equals_04.c":106:15)
#loc35 = loc("CWE398_Poor_Code_Quality__equals_04.c":94:1)
#loc36 = loc("CWE398_Poor_Code_Quality__equals_04.c":109:1)
#loc41 = loc("CWE398_Poor_Code_Quality__equals_04.c":95:1)
#loc42 = loc("CWE398_Poor_Code_Quality__equals_04.c":97:27)
#loc43 = loc("CWE398_Poor_Code_Quality__equals_04.c":97:22)
#loc44 = loc("CWE398_Poor_Code_Quality__equals_04.c":97:5)
#loc45 = loc("CWE398_Poor_Code_Quality__equals_04.c":99:5)
#loc46 = loc("CWE398_Poor_Code_Quality__equals_04.c":100:5)
#loc47 = loc("CWE398_Poor_Code_Quality__equals_04.c":100:46)
#loc48 = loc("CWE398_Poor_Code_Quality__equals_04.c":101:5)
#loc49 = loc("CWE398_Poor_Code_Quality__equals_04.c":104:5)
#loc50 = loc("CWE398_Poor_Code_Quality__equals_04.c":105:5)
#loc51 = loc("CWE398_Poor_Code_Quality__equals_04.c":105:45)
#loc52 = loc("CWE398_Poor_Code_Quality__equals_04.c":106:5)
#loc53 = loc("CWE398_Poor_Code_Quality__equals_04.c":108:12)
#loc54 = loc("CWE398_Poor_Code_Quality__equals_04.c":108:5)
#loc55 = loc("CWE398_Poor_Code_Quality__equals_04.c":50:19)
#loc56 = loc("CWE398_Poor_Code_Quality__equals_04.c":45:1)
#loc57 = loc("CWE398_Poor_Code_Quality__equals_04.c":62:1)
#loc58 = loc("CWE398_Poor_Code_Quality__equals_04.c":47:5)
#loc59 = loc("CWE398_Poor_Code_Quality__equals_04.c":61:5)
#loc60 = loc("CWE398_Poor_Code_Quality__equals_04.c":47:8)
#loc61 = loc("CWE398_Poor_Code_Quality__equals_04.c":48:5)
#loc62 = loc("CWE398_Poor_Code_Quality__equals_04.c":51:5)
#loc63 = loc("CWE398_Poor_Code_Quality__equals_04.c":53:5)
#loc64 = loc("CWE398_Poor_Code_Quality__equals_04.c":50:9)
#loc65 = loc("CWE398_Poor_Code_Quality__equals_04.c":54:9)
#loc66 = loc("CWE398_Poor_Code_Quality__equals_04.c":60:9)
#loc67 = loc("CWE398_Poor_Code_Quality__equals_04.c":55:13)
#loc68 = loc("CWE398_Poor_Code_Quality__equals_04.c":55:26)
#loc69 = loc("CWE398_Poor_Code_Quality__equals_04.c":55:39)
#loc70 = loc("CWE398_Poor_Code_Quality__equals_04.c":56:26)
#loc71 = loc("CWE398_Poor_Code_Quality__equals_04.c":56:13)
#loc72 = loc("CWE398_Poor_Code_Quality__equals_04.c":58:22)
#loc73 = loc("CWE398_Poor_Code_Quality__equals_04.c":58:13)
#loc74 = loc("CWE398_Poor_Code_Quality__equals_04.c":59:26)
#loc75 = loc("CWE398_Poor_Code_Quality__equals_04.c":59:13)
#loc76 = loc("CWE398_Poor_Code_Quality__equals_04.c":65:1)
#loc77 = loc("CWE398_Poor_Code_Quality__equals_04.c":77:1)
#loc78 = loc("CWE398_Poor_Code_Quality__equals_04.c":67:5)
#loc79 = loc("CWE398_Poor_Code_Quality__equals_04.c":76:5)
#loc80 = loc("CWE398_Poor_Code_Quality__equals_04.c":67:8)
#loc81 = loc("CWE398_Poor_Code_Quality__equals_04.c":68:5)
#loc82 = loc("CWE398_Poor_Code_Quality__equals_04.c":69:9)
#loc83 = loc("CWE398_Poor_Code_Quality__equals_04.c":75:9)
#loc84 = loc("CWE398_Poor_Code_Quality__equals_04.c":70:13)
#loc85 = loc("CWE398_Poor_Code_Quality__equals_04.c":70:26)
#loc86 = loc("CWE398_Poor_Code_Quality__equals_04.c":70:39)
#loc87 = loc("CWE398_Poor_Code_Quality__equals_04.c":71:26)
#loc88 = loc("CWE398_Poor_Code_Quality__equals_04.c":71:13)
#loc89 = loc("CWE398_Poor_Code_Quality__equals_04.c":73:22)
#loc90 = loc("CWE398_Poor_Code_Quality__equals_04.c":73:13)
#loc91 = loc("CWE398_Poor_Code_Quality__equals_04.c":74:26)
#loc92 = loc("CWE398_Poor_Code_Quality__equals_04.c":74:13)
#loc93 = loc(fused[#loc1, #loc2])
#loc94 = loc(fused[#loc3, #loc4])
#loc95 = loc(fused[#loc5, #loc6])
#loc96 = loc(fused[#loc8, #loc6])
#loc97 = loc(fused[#loc9, #loc10])
#loc98 = loc(fused[#loc11, #loc12])
#loc99 = loc(fused[#loc16, #loc15])
#loc100 = loc(fused[#loc19, #loc20])
#loc101 = loc(fused[#loc21, #loc22])
#loc102 = loc(fused[#loc23, #loc24])
#loc103 = loc(fused[#loc25, #loc26])
#loc104 = loc(fused[#loc27, #loc28])
#loc105 = loc(fused[#loc29, #loc30])
#loc106 = loc(fused[#loc35, #loc36])
#loc109 = loc(fused[#loc46, #loc47])
#loc110 = loc(fused[#loc50, #loc51])
#loc111 = loc(fused[#loc54, #loc53])
#loc112 = loc(fused[#loc56, #loc57])
#loc113 = loc(fused[#loc58, #loc59])
#loc114 = loc(fused[#loc61, #loc62, #loc63, #loc59])
#loc115 = loc(fused[#loc65, #loc66])
#loc116 = loc(fused[#loc67, #loc68])
#loc117 = loc(fused[#loc67, #loc69])
#loc118 = loc(fused[#loc73, #loc72])
#loc119 = loc(fused[#loc76, #loc77])
#loc120 = loc(fused[#loc78, #loc79])
#loc121 = loc(fused[#loc81, #loc79])
#loc122 = loc(fused[#loc82, #loc83])
#loc123 = loc(fused[#loc84, #loc85])
#loc124 = loc(fused[#loc84, #loc86])
#loc125 = loc(fused[#loc90, #loc89])
