!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":22:22)
#loc6 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":22:26)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":74:26)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":74:30)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":50:26)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":50:30)
#true = #cir.bool<true> : !cir.bool
#loc131 = loc(fused[#loc5, #loc6])
#loc150 = loc(fused[#loc49, #loc50])
#loc169 = loc(fused[#loc95, #loc96])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc129)
  cir.func internal private  @badSource(%arg0: !s32i loc(fused[#loc5, #loc6])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc131)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc4)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc8)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc8)
    %6 = cir.ternary(%5, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc8)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc8)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc8)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc8)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc8)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc8)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc8)
      cir.yield %21 : !u32i loc(#loc8)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc8)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc8)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc8)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc8)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc8)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc8)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc8)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc8)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc8)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc8)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc8)
      cir.yield %25 : !u32i loc(#loc8)
    }) : (!cir.bool) -> !u32i loc(#loc8)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc8)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc132)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc133)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc133)
    cir.return %9 : !s32i loc(#loc133)
  } loc(#loc130)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc134)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Hello\00" : !cir.array<!s8i x 6>> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc14)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_for_loop_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc136)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc20)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc137)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
    %4 = cir.call @badSource(%3) : (!s32i) -> !s32i loc(#loc23)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc138)
    cir.scope {
      %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc140)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc29)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc29)
      cir.store %7, %5 : !u64i, !cir.ptr<!u64i> loc(#loc140)
      cir.scope {
        %8 = cir.const #cir.int<0> : !s32i loc(#loc32)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc32)
        cir.store %9, %5 : !u64i, !cir.ptr<!u64i> loc(#loc142)
        cir.for : cond {
          %10 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc34)
          %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc35)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc35)
          %13 = cir.cmp(lt, %10, %12) : !u64i, !s32i loc(#loc143)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc36)
          cir.condition(%14) loc(#loc36)
        } body {
          cir.scope {
            %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc14)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc14)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc38)
          } loc(#loc144)
          cir.yield loc(#loc31)
        } step {
          %10 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc39)
          %11 = cir.unary(inc, %10) : !u64i, !u64i loc(#loc40)
          cir.store %11, %5 : !u64i, !cir.ptr<!u64i> loc(#loc145)
          cir.yield loc(#loc141)
        } loc(#loc141)
      } loc(#loc141)
    } loc(#loc139)
    cir.return loc(#loc16)
  } loc(#loc135)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_for_loop_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc147)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc148)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    cir.return loc(#loc42)
  } loc(#loc146)
  cir.func internal private  @goodB2GSource(%arg0: !s32i loc(fused[#loc49, #loc50])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc150)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc48)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc51)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc52)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc52)
    %6 = cir.ternary(%5, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc52)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc52)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc52)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc52)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc52)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc52)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc52)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc52)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc52)
      cir.yield %21 : !u32i loc(#loc52)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc52)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc52)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc52)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc52)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc52)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc52)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc52)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc52)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc52)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc52)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc52)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc52)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc52)
      cir.yield %25 : !u32i loc(#loc52)
    }) : (!cir.bool) -> !u32i loc(#loc52)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc52)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc151)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc54)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc152)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc152)
    cir.return %9 : !s32i loc(#loc152)
  } loc(#loc149)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc154)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc60)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc61)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc155)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc63)
    %4 = cir.call @goodB2GSource(%3) : (!s32i) -> !s32i loc(#loc64)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc156)
    cir.scope {
      %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc158)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc70)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc70)
      cir.store %7, %5 : !u64i, !cir.ptr<!u64i> loc(#loc158)
      cir.scope {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
        %9 = cir.const #cir.int<0> : !s32i loc(#loc74)
        %10 = cir.cmp(gt, %8, %9) : !s32i, !s32i loc(#loc160)
        %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc75)
        %12 = cir.ternary(%11, true {
          %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc77)
          %14 = cir.const #cir.int<20> : !s32i loc(#loc78)
          %15 = cir.cmp(le, %13, %14) : !s32i, !s32i loc(#loc161)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc79)
          %17 = cir.ternary(%16, true {
            %18 = cir.const #true loc(#loc76)
            cir.yield %18 : !cir.bool loc(#loc76)
          }, false {
            %18 = cir.const #false loc(#loc76)
            cir.yield %18 : !cir.bool loc(#loc76)
          }) : (!cir.bool) -> !cir.bool loc(#loc76)
          cir.yield %17 : !cir.bool loc(#loc76)
        }, false {
          %13 = cir.const #false loc(#loc76)
          cir.yield %13 : !cir.bool loc(#loc76)
        }) : (!cir.bool) -> !cir.bool loc(#loc76)
        cir.if %12 {
          cir.scope {
            %13 = cir.const #cir.int<0> : !s32i loc(#loc83)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc83)
            cir.store %14, %5 : !u64i, !cir.ptr<!u64i> loc(#loc164)
            cir.for : cond {
              %15 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc85)
              %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
              %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc86)
              %18 = cir.cmp(lt, %15, %17) : !u64i, !s32i loc(#loc165)
              %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc87)
              cir.condition(%19) loc(#loc87)
            } body {
              cir.scope {
                %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc89)
                %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc89)
                cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc90)
              } loc(#loc166)
              cir.yield loc(#loc82)
            } step {
              %15 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc91)
              %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc92)
              cir.store %16, %5 : !u64i, !cir.ptr<!u64i> loc(#loc167)
              cir.yield loc(#loc163)
            } loc(#loc163)
          } loc(#loc163)
        } loc(#loc162)
      } loc(#loc159)
    } loc(#loc157)
    cir.return loc(#loc57)
  } loc(#loc153)
  cir.func internal private  @goodG2BSource(%arg0: !s32i loc(fused[#loc95, #loc96])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc169)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc94)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    %2 = cir.const #cir.int<20> : !s32i loc(#loc98)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc170)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc171)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc171)
    cir.return %4 : !s32i loc(#loc171)
  } loc(#loc168)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc173)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc106)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc107)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc174)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc109)
    %4 = cir.call @goodG2BSource(%3) : (!s32i) -> !s32i loc(#loc110)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    cir.scope {
      %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc177)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc116)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc116)
      cir.store %7, %5 : !u64i, !cir.ptr<!u64i> loc(#loc177)
      cir.scope {
        %8 = cir.const #cir.int<0> : !s32i loc(#loc119)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc119)
        cir.store %9, %5 : !u64i, !cir.ptr<!u64i> loc(#loc179)
        cir.for : cond {
          %10 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc121)
          %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc122)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc122)
          %13 = cir.cmp(lt, %10, %12) : !u64i, !s32i loc(#loc180)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc123)
          cir.condition(%14) loc(#loc123)
        } body {
          cir.scope {
            %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc125)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc125)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc126)
          } loc(#loc181)
          cir.yield loc(#loc118)
        } step {
          %10 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc127)
          %11 = cir.unary(inc, %10) : !u64i, !u64i loc(#loc128)
          cir.store %11, %5 : !u64i, !cir.ptr<!u64i> loc(#loc182)
          cir.yield loc(#loc178)
        } loc(#loc178)
      } loc(#loc178)
    } loc(#loc176)
    cir.return loc(#loc103)
  } loc(#loc172)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":22:1)
#loc4 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":27:1)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":23:1)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":25:13)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":25:5)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":26:12)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":26:5)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":40:23)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":29:1)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":43:1)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":31:5)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":31:9)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":33:14)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":33:13)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":33:5)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":34:23)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":34:13)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":34:5)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":34:28)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":35:5)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":42:5)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":36:9)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":36:20)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":38:9)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":41:9)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":38:18)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":38:14)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":38:21)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":38:33)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":38:23)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":39:9)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":40:13)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":38:41)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":38:40)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":100:1)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":104:1)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":102:5)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":102:13)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":103:5)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":103:13)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":74:1)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":79:1)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":75:1)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":77:13)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":77:5)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":78:12)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":78:5)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":81:1)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":98:1)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":83:5)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":83:9)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":85:14)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":85:13)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":85:5)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":86:27)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":86:13)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":86:5)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":86:32)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":87:5)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":97:5)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":88:9)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":88:20)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":90:9)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":96:9)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":90:13)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":90:21)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":90:19)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":90:23)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":90:26)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":90:35)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":90:32)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":91:9)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":92:13)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":95:13)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":92:22)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":92:18)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":92:25)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":92:37)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":92:27)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":93:13)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":94:27)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":94:17)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":92:45)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":92:44)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":50:1)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":55:1)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":51:1)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":53:13)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":53:5)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":54:12)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":54:5)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":57:1)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":71:1)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":59:5)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":59:9)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":61:14)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":61:13)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":61:5)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":62:27)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":62:13)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":62:5)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":62:32)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":63:5)
#loc114 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":70:5)
#loc115 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":64:9)
#loc116 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":64:20)
#loc117 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":66:9)
#loc118 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":69:9)
#loc119 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":66:18)
#loc120 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":66:14)
#loc121 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":66:21)
#loc122 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":66:33)
#loc123 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":66:23)
#loc124 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":67:9)
#loc125 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":68:23)
#loc126 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":68:13)
#loc127 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":66:41)
#loc128 = loc("CWE400_Resource_Exhaustion__rand_for_loop_42.c":66:40)
#loc129 = loc(fused[#loc1, #loc2])
#loc130 = loc(fused[#loc3, #loc4])
#loc132 = loc(fused[#loc9, #loc8])
#loc133 = loc(fused[#loc11, #loc10])
#loc134 = loc(fused[#loc12, #loc13])
#loc135 = loc(fused[#loc15, #loc16])
#loc136 = loc(fused[#loc17, #loc18])
#loc137 = loc(fused[#loc21, #loc19])
#loc138 = loc(fused[#loc24, #loc25])
#loc139 = loc(fused[#loc26, #loc27])
#loc140 = loc(fused[#loc28, #loc29])
#loc141 = loc(fused[#loc30, #loc31])
#loc142 = loc(fused[#loc33, #loc32])
#loc143 = loc(fused[#loc34, #loc35])
#loc144 = loc(fused[#loc37, #loc31])
#loc145 = loc(fused[#loc40, #loc39])
#loc146 = loc(fused[#loc41, #loc42])
#loc147 = loc(fused[#loc43, #loc44])
#loc148 = loc(fused[#loc45, #loc46])
#loc149 = loc(fused[#loc47, #loc48])
#loc151 = loc(fused[#loc53, #loc52])
#loc152 = loc(fused[#loc55, #loc54])
#loc153 = loc(fused[#loc56, #loc57])
#loc154 = loc(fused[#loc58, #loc59])
#loc155 = loc(fused[#loc62, #loc60])
#loc156 = loc(fused[#loc65, #loc66])
#loc157 = loc(fused[#loc67, #loc68])
#loc158 = loc(fused[#loc69, #loc70])
#loc159 = loc(fused[#loc71, #loc72])
#loc160 = loc(fused[#loc73, #loc74])
#loc161 = loc(fused[#loc77, #loc78])
#loc162 = loc(fused[#loc80, #loc72])
#loc163 = loc(fused[#loc81, #loc82])
#loc164 = loc(fused[#loc84, #loc83])
#loc165 = loc(fused[#loc85, #loc86])
#loc166 = loc(fused[#loc88, #loc82])
#loc167 = loc(fused[#loc92, #loc91])
#loc168 = loc(fused[#loc93, #loc94])
#loc170 = loc(fused[#loc99, #loc98])
#loc171 = loc(fused[#loc101, #loc100])
#loc172 = loc(fused[#loc102, #loc103])
#loc173 = loc(fused[#loc104, #loc105])
#loc174 = loc(fused[#loc108, #loc106])
#loc175 = loc(fused[#loc111, #loc112])
#loc176 = loc(fused[#loc113, #loc114])
#loc177 = loc(fused[#loc115, #loc116])
#loc178 = loc(fused[#loc117, #loc118])
#loc179 = loc(fused[#loc120, #loc119])
#loc180 = loc(fused[#loc121, #loc122])
#loc181 = loc(fused[#loc124, #loc118])
#loc182 = loc(fused[#loc128, #loc127])
