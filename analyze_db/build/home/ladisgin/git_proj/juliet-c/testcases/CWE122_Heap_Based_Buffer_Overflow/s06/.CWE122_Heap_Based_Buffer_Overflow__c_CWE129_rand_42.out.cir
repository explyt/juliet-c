!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":22:22)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":22:26)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":25:12)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":166:10)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":166:14)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":166:20)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":166:32)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":111:26)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":111:30)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":114:12)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":134:23)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":68:26)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":68:30)
#true = #cir.bool<true> : !cir.bool
#loc296 = loc(fused[#loc5, #loc6])
#loc338 = loc(fused[#loc110, #loc111])
#loc339 = loc(fused[#loc112, #loc113])
#loc344 = loc(fused[#loc130, #loc131])
#loc377 = loc(fused[#loc215, #loc216])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc294)
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc5, #loc6])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc296)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc4)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc8)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc8)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc8)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc8)
    %8 = cir.const #cir.int<30> : !s32i loc(#loc8)
    %9 = cir.shift(left, %7 : !u32i, %8 : !s32i) -> !u32i loc(#loc8)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc8)
    %12 = cir.const #cir.int<15> : !s32i loc(#loc8)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc8)
    %14 = cir.binop(xor, %9, %13) : !u32i loc(#loc8)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc8)
    %17 = cir.binop(xor, %14, %16) : !u32i loc(#loc8)
    cir.br ^bb3(%17 : !u32i) loc(#loc8)
  ^bb2:  // pred: ^bb0
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc8)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc8)
    %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc8)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc8)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc8)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc8)
    %26 = cir.binop(xor, %21, %25) : !u32i loc(#loc8)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc8)
    %29 = cir.binop(xor, %26, %28) : !u32i loc(#loc8)
    %30 = cir.unary(minus, %29) : !u32i, !u32i loc(#loc8)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc8)
    %33 = cir.binop(sub, %30, %32) : !u32i loc(#loc8)
    cir.br ^bb3(%33 : !u32i) loc(#loc8)
  ^bb3(%34: !u32i loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":25:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc8)
  ^bb4:  // pred: ^bb3
    %35 = cir.cast(integral, %34 : !u32i), !s32i loc(#loc8)
    cir.store %35, %0 : !s32i, !cir.ptr<!s32i> loc(#loc297)
    %36 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    cir.store %36, %1 : !s32i, !cir.ptr<!s32i> loc(#loc298)
    %37 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc298)
    cir.return %37 : !s32i loc(#loc298)
  } loc(#loc295)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc299)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc300)
  cir.func private @printIntLine(!s32i) loc(#loc301)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc302)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc20)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc303)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc305)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc306)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc307)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc32)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc308)
    %5 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc34)
    %6 = cir.call @badSource(%5) : (!s32i) -> !s32i loc(#loc35)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc309)
    cir.br ^bb1 loc(#loc310)
  ^bb1:  // pred: ^bb0
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc40)
    %8 = cir.const #cir.int<10> : !s32i loc(#loc41)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc41)
    %10 = cir.const #cir.int<4> : !u64i loc(#loc311)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc312)
    %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc40)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc313)
    cir.store %13, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc306)
    cir.br ^bb2 loc(#loc314)
  ^bb2:  // pred: ^bb1
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc46)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc47)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc47)
    %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s32i>, !cir.bool loc(#loc315)
    cir.brcond %17 ^bb3, ^bb4 loc(#loc316)
  ^bb3:  // pred: ^bb2
    %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc49)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc51)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc49)
    cir.br ^bb4 loc(#loc45)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc45)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc317)
  ^bb6:  // pred: ^bb5
    %21 = cir.const #cir.int<0> : !s32i loc(#loc54)
    cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc318)
    cir.br ^bb7 loc(#loc317)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
    %23 = cir.const #cir.int<10> : !s32i loc(#loc57)
    %24 = cir.cmp(lt, %22, %23) : !s32i, !cir.bool loc(#loc319)
    cir.brcond %24 ^bb8, ^bb12 loc(#loc58)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc320)
  ^bb9:  // pred: ^bb8
    %25 = cir.const #cir.int<0> : !s32i loc(#loc60)
    %26 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc61)
    %27 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc62)
    %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc63)
    cir.store %25, %28 : !s32i, !cir.ptr<!s32i> loc(#loc321)
    cir.br ^bb10 loc(#loc53)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc53)
  ^bb11:  // pred: ^bb10
    %29 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc64)
    %30 = cir.unary(inc, %29) : !s32i, !s32i loc(#loc65)
    cir.store %30, %0 : !s32i, !cir.ptr<!s32i> loc(#loc322)
    cir.br ^bb7 loc(#loc317)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc53)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc323)
  ^bb14:  // pred: ^bb13
    %31 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc68)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc69)
    %33 = cir.cmp(ge, %31, %32) : !s32i, !cir.bool loc(#loc324)
    cir.brcond %33 ^bb15, ^bb24 loc(#loc325)
  ^bb15:  // pred: ^bb14
    %34 = cir.const #cir.int<1> : !s32i loc(#loc73)
    %35 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc74)
    %36 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc75)
    %37 = cir.ptr_stride(%35 : !cir.ptr<!s32i>, %36 : !s32i), !cir.ptr<!s32i> loc(#loc76)
    cir.store %34, %37 : !s32i, !cir.ptr<!s32i> loc(#loc326)
    cir.br ^bb16 loc(#loc327)
  ^bb16:  // pred: ^bb15
    %38 = cir.const #cir.int<0> : !s32i loc(#loc79)
    cir.store %38, %0 : !s32i, !cir.ptr<!s32i> loc(#loc328)
    cir.br ^bb17 loc(#loc327)
  ^bb17:  // 2 preds: ^bb16, ^bb21
    %39 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc81)
    %40 = cir.const #cir.int<10> : !s32i loc(#loc82)
    %41 = cir.cmp(lt, %39, %40) : !s32i, !cir.bool loc(#loc329)
    cir.brcond %41 ^bb18, ^bb22 loc(#loc83)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc330)
  ^bb19:  // pred: ^bb18
    %42 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc85)
    %43 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    %44 = cir.ptr_stride(%42 : !cir.ptr<!s32i>, %43 : !s32i), !cir.ptr<!s32i> loc(#loc87)
    %45 = cir.load %44 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    cir.call @printIntLine(%45) : (!s32i) -> () loc(#loc88)
    cir.br ^bb20 loc(#loc78)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc78)
  ^bb21:  // pred: ^bb20
    %46 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    %47 = cir.unary(inc, %46) : !s32i, !s32i loc(#loc90)
    cir.store %47, %0 : !s32i, !cir.ptr<!s32i> loc(#loc331)
    cir.br ^bb17 loc(#loc327)
  ^bb22:  // pred: ^bb17
    cir.br ^bb23 loc(#loc78)
  ^bb23:  // pred: ^bb22
    cir.br ^bb25 loc(#loc71)
  ^bb24:  // pred: ^bb14
    %48 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc20)
    %49 = cir.cast(array_to_ptrdecay, %48 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc20)
    cir.call @printLine(%49) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    cir.br ^bb25 loc(#loc67)
  ^bb25:  // 2 preds: ^bb23, ^bb24
    cir.br ^bb26 loc(#loc67)
  ^bb26:  // pred: ^bb25
    %50 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc92)
    %51 = cir.cast(bitcast, %50 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc92)
    cir.call @free(%51) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc93)
    cir.br ^bb27 loc(#loc39)
  ^bb27:  // pred: ^bb26
    cir.return loc(#loc24)
  } loc(#loc304)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc333)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc96)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc334)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc98)
    cir.return loc(#loc95)
  } loc(#loc332)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc335)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc336)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc105)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc106)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc107)
  cir.func @main(%arg0: !s32i loc(fused[#loc110, #loc111]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc112, #loc113])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc338)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc339)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc109)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc114)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc115)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc116)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc116)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc117)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc104)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc104)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc118)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42_good : !cir.ptr<!cir.func<!void ()>> loc(#loc340)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42_good() : () -> () loc(#loc119)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc105)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc105)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc121)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc106)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc106)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc122)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc341)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42_bad() : () -> () loc(#loc123)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc107)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc107)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc125)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc126)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc342)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc342)
    cir.return %17 : !s32i loc(#loc342)
  } loc(#loc337)
  cir.func internal private @goodB2GSource(%arg0: !s32i loc(fused[#loc130, #loc131])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc344)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc129)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc132)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc133)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc133)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc133)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc133)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc133)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc133)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc133)
    %8 = cir.const #cir.int<30> : !s32i loc(#loc133)
    %9 = cir.shift(left, %7 : !u32i, %8 : !s32i) -> !u32i loc(#loc133)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc133)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc133)
    %12 = cir.const #cir.int<15> : !s32i loc(#loc133)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc133)
    %14 = cir.binop(xor, %9, %13) : !u32i loc(#loc133)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc133)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc133)
    %17 = cir.binop(xor, %14, %16) : !u32i loc(#loc133)
    cir.br ^bb3(%17 : !u32i) loc(#loc133)
  ^bb2:  // pred: ^bb0
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc133)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc133)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc133)
    %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc133)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc133)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc133)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc133)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc133)
    %26 = cir.binop(xor, %21, %25) : !u32i loc(#loc133)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc133)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc133)
    %29 = cir.binop(xor, %26, %28) : !u32i loc(#loc133)
    %30 = cir.unary(minus, %29) : !u32i, !u32i loc(#loc133)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc133)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc133)
    %33 = cir.binop(sub, %30, %32) : !u32i loc(#loc133)
    cir.br ^bb3(%33 : !u32i) loc(#loc133)
  ^bb3(%34: !u32i loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":114:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc133)
  ^bb4:  // pred: ^bb3
    %35 = cir.cast(integral, %34 : !u32i), !s32i loc(#loc133)
    cir.store %35, %0 : !s32i, !cir.ptr<!s32i> loc(#loc345)
    %36 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc135)
    cir.store %36, %1 : !s32i, !cir.ptr<!s32i> loc(#loc346)
    %37 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc346)
    cir.return %37 : !s32i loc(#loc346)
  } loc(#loc343)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc137)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc348)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc349)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc350)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc146)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc147)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc351)
    %5 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    %6 = cir.call @goodB2GSource(%5) : (!s32i) -> !s32i loc(#loc150)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc352)
    cir.br ^bb1 loc(#loc353)
  ^bb1:  // pred: ^bb0
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc155)
    %8 = cir.const #cir.int<10> : !s32i loc(#loc156)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc156)
    %10 = cir.const #cir.int<4> : !u64i loc(#loc354)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc355)
    %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc155)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc356)
    cir.store %13, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc349)
    cir.br ^bb2 loc(#loc357)
  ^bb2:  // pred: ^bb1
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc161)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc162)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc162)
    %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s32i>, !cir.bool loc(#loc358)
    cir.brcond %17 ^bb3, ^bb4 loc(#loc359)
  ^bb3:  // pred: ^bb2
    %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc164)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc165)
    %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc166)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc164)
    cir.br ^bb4 loc(#loc160)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc160)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc360)
  ^bb6:  // pred: ^bb5
    %21 = cir.const #cir.int<0> : !s32i loc(#loc169)
    cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc361)
    cir.br ^bb7 loc(#loc360)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc171)
    %23 = cir.const #cir.int<10> : !s32i loc(#loc172)
    %24 = cir.cmp(lt, %22, %23) : !s32i, !cir.bool loc(#loc362)
    cir.brcond %24 ^bb8, ^bb12 loc(#loc173)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc363)
  ^bb9:  // pred: ^bb8
    %25 = cir.const #cir.int<0> : !s32i loc(#loc175)
    %26 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc176)
    %27 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc177)
    %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc178)
    cir.store %25, %28 : !s32i, !cir.ptr<!s32i> loc(#loc364)
    cir.br ^bb10 loc(#loc168)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc168)
  ^bb11:  // pred: ^bb10
    %29 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc179)
    %30 = cir.unary(inc, %29) : !s32i, !s32i loc(#loc180)
    cir.store %30, %0 : !s32i, !cir.ptr<!s32i> loc(#loc365)
    cir.br ^bb7 loc(#loc360)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc168)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc366)
  ^bb14:  // pred: ^bb13
    %31 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc183)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc184)
    %33 = cir.cmp(ge, %31, %32) : !s32i, !cir.bool loc(#loc367)
    cir.brcond %33 ^bb15, ^bb20 loc(#loc185)
  ^bb15:  // pred: ^bb14
    %34 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc186)
    %35 = cir.const #cir.int<10> : !s32i loc(#loc187)
    %36 = cir.cmp(lt, %34, %35) : !s32i, !cir.bool loc(#loc368)
    cir.brcond %36 ^bb16, ^bb17 loc(#loc185)
  ^bb16:  // pred: ^bb15
    %37 = cir.const #true loc(#loc185)
    cir.br ^bb18(%37 : !cir.bool) loc(#loc185)
  ^bb17:  // pred: ^bb15
    %38 = cir.const #false loc(#loc185)
    cir.br ^bb18(%38 : !cir.bool) loc(#loc185)
  ^bb18(%39: !cir.bool loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":134:23)):  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc185)
  ^bb19:  // pred: ^bb18
    cir.br ^bb21(%39 : !cir.bool) loc(#loc185)
  ^bb20:  // pred: ^bb14
    %40 = cir.const #false loc(#loc185)
    cir.br ^bb21(%40 : !cir.bool) loc(#loc185)
  ^bb21(%41: !cir.bool loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":134:23)):  // 2 preds: ^bb19, ^bb20
    cir.br ^bb22 loc(#loc185)
  ^bb22:  // pred: ^bb21
    cir.brcond %41 ^bb23, ^bb32 loc(#loc369)
  ^bb23:  // pred: ^bb22
    %42 = cir.const #cir.int<1> : !s32i loc(#loc192)
    %43 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc193)
    %44 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc194)
    %45 = cir.ptr_stride(%43 : !cir.ptr<!s32i>, %44 : !s32i), !cir.ptr<!s32i> loc(#loc195)
    cir.store %42, %45 : !s32i, !cir.ptr<!s32i> loc(#loc370)
    cir.br ^bb24 loc(#loc371)
  ^bb24:  // pred: ^bb23
    %46 = cir.const #cir.int<0> : !s32i loc(#loc198)
    cir.store %46, %0 : !s32i, !cir.ptr<!s32i> loc(#loc372)
    cir.br ^bb25 loc(#loc371)
  ^bb25:  // 2 preds: ^bb24, ^bb29
    %47 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc200)
    %48 = cir.const #cir.int<10> : !s32i loc(#loc201)
    %49 = cir.cmp(lt, %47, %48) : !s32i, !cir.bool loc(#loc373)
    cir.brcond %49 ^bb26, ^bb30 loc(#loc202)
  ^bb26:  // pred: ^bb25
    cir.br ^bb27 loc(#loc374)
  ^bb27:  // pred: ^bb26
    %50 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc204)
    %51 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc205)
    %52 = cir.ptr_stride(%50 : !cir.ptr<!s32i>, %51 : !s32i), !cir.ptr<!s32i> loc(#loc206)
    %53 = cir.load %52 : !cir.ptr<!s32i>, !s32i loc(#loc204)
    cir.call @printIntLine(%53) : (!s32i) -> () loc(#loc207)
    cir.br ^bb28 loc(#loc197)
  ^bb28:  // pred: ^bb27
    cir.br ^bb29 loc(#loc197)
  ^bb29:  // pred: ^bb28
    %54 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc208)
    %55 = cir.unary(inc, %54) : !s32i, !s32i loc(#loc209)
    cir.store %55, %0 : !s32i, !cir.ptr<!s32i> loc(#loc375)
    cir.br ^bb25 loc(#loc371)
  ^bb30:  // pred: ^bb25
    cir.br ^bb31 loc(#loc197)
  ^bb31:  // pred: ^bb30
    cir.br ^bb33 loc(#loc190)
  ^bb32:  // pred: ^bb22
    %56 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc137)
    %57 = cir.cast(array_to_ptrdecay, %56 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc137)
    cir.call @printLine(%57) : (!cir.ptr<!s8i>) -> () loc(#loc210)
    cir.br ^bb33 loc(#loc182)
  ^bb33:  // 2 preds: ^bb31, ^bb32
    cir.br ^bb34 loc(#loc182)
  ^bb34:  // pred: ^bb33
    %58 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc211)
    %59 = cir.cast(bitcast, %58 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc211)
    cir.call @free(%59) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc212)
    cir.br ^bb35 loc(#loc154)
  ^bb35:  // pred: ^bb34
    cir.return loc(#loc139)
  } loc(#loc347)
  cir.func internal private @goodG2BSource(%arg0: !s32i loc(fused[#loc215, #loc216])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc377)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc214)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc217)
    %2 = cir.const #cir.int<7> : !s32i loc(#loc218)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc378)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc220)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc379)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc379)
    cir.return %4 : !s32i loc(#loc379)
  } loc(#loc376)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc381)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc382)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc383)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc230)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc231)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc384)
    %5 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc233)
    %6 = cir.call @goodG2BSource(%5) : (!s32i) -> !s32i loc(#loc234)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc385)
    cir.br ^bb1 loc(#loc386)
  ^bb1:  // pred: ^bb0
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc239)
    %8 = cir.const #cir.int<10> : !s32i loc(#loc240)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc240)
    %10 = cir.const #cir.int<4> : !u64i loc(#loc387)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc388)
    %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc239)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc389)
    cir.store %13, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc382)
    cir.br ^bb2 loc(#loc390)
  ^bb2:  // pred: ^bb1
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc245)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc246)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc246)
    %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s32i>, !cir.bool loc(#loc391)
    cir.brcond %17 ^bb3, ^bb4 loc(#loc392)
  ^bb3:  // pred: ^bb2
    %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc248)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc249)
    %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc250)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc248)
    cir.br ^bb4 loc(#loc244)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc244)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc393)
  ^bb6:  // pred: ^bb5
    %21 = cir.const #cir.int<0> : !s32i loc(#loc253)
    cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc394)
    cir.br ^bb7 loc(#loc393)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc255)
    %23 = cir.const #cir.int<10> : !s32i loc(#loc256)
    %24 = cir.cmp(lt, %22, %23) : !s32i, !cir.bool loc(#loc395)
    cir.brcond %24 ^bb8, ^bb12 loc(#loc257)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc396)
  ^bb9:  // pred: ^bb8
    %25 = cir.const #cir.int<0> : !s32i loc(#loc259)
    %26 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc260)
    %27 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc261)
    %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc262)
    cir.store %25, %28 : !s32i, !cir.ptr<!s32i> loc(#loc397)
    cir.br ^bb10 loc(#loc252)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc252)
  ^bb11:  // pred: ^bb10
    %29 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc263)
    %30 = cir.unary(inc, %29) : !s32i, !s32i loc(#loc264)
    cir.store %30, %0 : !s32i, !cir.ptr<!s32i> loc(#loc398)
    cir.br ^bb7 loc(#loc393)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc252)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc399)
  ^bb14:  // pred: ^bb13
    %31 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc267)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc268)
    %33 = cir.cmp(ge, %31, %32) : !s32i, !cir.bool loc(#loc400)
    cir.brcond %33 ^bb15, ^bb24 loc(#loc401)
  ^bb15:  // pred: ^bb14
    %34 = cir.const #cir.int<1> : !s32i loc(#loc272)
    %35 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc273)
    %36 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc274)
    %37 = cir.ptr_stride(%35 : !cir.ptr<!s32i>, %36 : !s32i), !cir.ptr<!s32i> loc(#loc275)
    cir.store %34, %37 : !s32i, !cir.ptr<!s32i> loc(#loc402)
    cir.br ^bb16 loc(#loc403)
  ^bb16:  // pred: ^bb15
    %38 = cir.const #cir.int<0> : !s32i loc(#loc278)
    cir.store %38, %0 : !s32i, !cir.ptr<!s32i> loc(#loc404)
    cir.br ^bb17 loc(#loc403)
  ^bb17:  // 2 preds: ^bb16, ^bb21
    %39 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc280)
    %40 = cir.const #cir.int<10> : !s32i loc(#loc281)
    %41 = cir.cmp(lt, %39, %40) : !s32i, !cir.bool loc(#loc405)
    cir.brcond %41 ^bb18, ^bb22 loc(#loc282)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc406)
  ^bb19:  // pred: ^bb18
    %42 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc284)
    %43 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc285)
    %44 = cir.ptr_stride(%42 : !cir.ptr<!s32i>, %43 : !s32i), !cir.ptr<!s32i> loc(#loc286)
    %45 = cir.load %44 : !cir.ptr<!s32i>, !s32i loc(#loc284)
    cir.call @printIntLine(%45) : (!s32i) -> () loc(#loc287)
    cir.br ^bb20 loc(#loc277)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc277)
  ^bb21:  // pred: ^bb20
    %46 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc288)
    %47 = cir.unary(inc, %46) : !s32i, !s32i loc(#loc289)
    cir.store %47, %0 : !s32i, !cir.ptr<!s32i> loc(#loc407)
    cir.br ^bb17 loc(#loc403)
  ^bb22:  // pred: ^bb17
    cir.br ^bb23 loc(#loc277)
  ^bb23:  // pred: ^bb22
    cir.br ^bb25 loc(#loc270)
  ^bb24:  // pred: ^bb14
    %48 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc290)
    %49 = cir.cast(array_to_ptrdecay, %48 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc290)
    cir.call @printLine(%49) : (!cir.ptr<!s8i>) -> () loc(#loc291)
    cir.br ^bb25 loc(#loc266)
  ^bb25:  // 2 preds: ^bb23, ^bb24
    cir.br ^bb26 loc(#loc266)
  ^bb26:  // pred: ^bb25
    %50 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc292)
    %51 = cir.cast(bitcast, %50 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc292)
    cir.call @free(%51) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc293)
    cir.br ^bb27 loc(#loc238)
  ^bb27:  // pred: ^bb26
    cir.return loc(#loc223)
  } loc(#loc380)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":22:1)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":27:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":23:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":25:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":26:12)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":26:5)
#loc12 = loc("/usr/include/stdlib.h":672:1)
#loc13 = loc("/usr/include/stdlib.h":672:45)
#loc14 = loc("/usr/include/stdlib.h":756:1)
#loc15 = loc("/usr/include/stdlib.h":756:70)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":57:23)
#loc21 = loc("/usr/include/stdlib.h":687:1)
#loc22 = loc("/usr/include/stdlib.h":687:32)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":29:1)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":61:1)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":36:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":36:13)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":37:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":37:54)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":31:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":31:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":33:13)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":33:12)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":33:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":34:22)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":34:12)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":34:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":34:26)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":35:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":60:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":37:31)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":37:38)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":37:43)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":37:53)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":38:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":38:39)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":38:13)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":38:23)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":38:29)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":38:30)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":38:36)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":38:35)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":40:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":43:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":40:18)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":40:14)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":40:21)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":40:25)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":40:23)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":41:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":42:25)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":42:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":42:20)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":42:21)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":40:30)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":40:29)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":46:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":58:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":46:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":46:21)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":47:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":54:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":56:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":48:28)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":48:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":48:20)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":48:24)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":50:13)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":53:13)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":50:21)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":50:17)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":50:24)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":50:28)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":50:26)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":51:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":52:30)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":52:37)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":52:38)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":52:17)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":50:33)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":50:32)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":57:13)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":59:14)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":59:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":151:1)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":155:1)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":153:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":153:13)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":154:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":154:13)
#loc100 = loc("/usr/include/stdlib.h":575:1)
#loc101 = loc("/usr/include/stdlib.h":575:41)
#loc102 = loc("/usr/include/time.h":76:1)
#loc103 = loc("/usr/include/time.h":76:38)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":171:15)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":173:15)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":176:15)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":178:15)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":166:1)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":181:1)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":167:1)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":169:27)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":169:22)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":169:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":171:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":172:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":172:62)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":173:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":176:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":177:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":177:61)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":178:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":180:12)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":180:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":111:1)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":116:1)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":112:1)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":114:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":115:12)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":115:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":145:23)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":118:1)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":149:1)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":125:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":125:13)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":126:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":126:54)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":120:5)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":120:9)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":122:13)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":122:12)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":122:5)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":123:26)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":123:12)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":123:5)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":123:30)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":124:5)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":148:5)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":126:31)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":126:38)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":126:43)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":126:53)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":127:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":127:39)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":127:13)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":127:23)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":127:29)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":127:30)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":127:36)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":127:35)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":129:9)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":132:9)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":129:18)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":129:14)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":129:21)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":129:25)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":129:23)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":130:9)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":131:25)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":131:13)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":131:20)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":131:21)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":129:30)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":129:29)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":134:9)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":146:9)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":134:13)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":134:21)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":134:26)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":134:34)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":134:36)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":135:9)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":142:9)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":144:9)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":136:28)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":136:13)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":136:20)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":136:24)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":138:13)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":141:13)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":138:21)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":138:17)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":138:24)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":138:28)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":138:26)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":139:13)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":140:30)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":140:37)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":140:38)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":140:17)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":138:33)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":138:32)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":145:13)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":147:14)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":147:9)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":68:1)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":74:1)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":69:1)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":72:12)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":72:5)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":73:12)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":73:5)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":76:1)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":108:1)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":83:9)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":83:13)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":84:9)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":84:54)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":78:5)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":78:9)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":80:13)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":80:12)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":80:5)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":81:26)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":81:12)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":81:5)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":81:30)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":82:5)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":107:5)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":84:31)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":84:38)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":84:43)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":84:53)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":85:9)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":85:39)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":85:13)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":85:23)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":85:29)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":85:30)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":85:36)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":85:35)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":87:9)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":90:9)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":87:18)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":87:14)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":87:21)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":87:25)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":87:23)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":88:9)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":89:25)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":89:13)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":89:20)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":89:21)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":87:30)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":87:29)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":93:9)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":105:9)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":93:13)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":93:21)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":94:9)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":101:9)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":103:9)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":95:28)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":95:13)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":95:20)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":95:24)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":97:13)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":100:13)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":97:21)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":97:17)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":97:24)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":97:28)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":97:26)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":98:13)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":99:30)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":99:37)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":99:38)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":99:17)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":97:33)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":97:32)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":104:23)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":104:13)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":106:14)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c":106:9)
#loc294 = loc(fused[#loc1, #loc2])
#loc295 = loc(fused[#loc3, #loc4])
#loc297 = loc(fused[#loc9, #loc8])
#loc298 = loc(fused[#loc11, #loc10])
#loc299 = loc(fused[#loc12, #loc13])
#loc300 = loc(fused[#loc14, #loc15])
#loc301 = loc(fused[#loc16, #loc17])
#loc302 = loc(fused[#loc18, #loc19])
#loc303 = loc(fused[#loc21, #loc22])
#loc304 = loc(fused[#loc23, #loc24])
#loc305 = loc(fused[#loc25, #loc26])
#loc306 = loc(fused[#loc27, #loc28])
#loc307 = loc(fused[#loc29, #loc30])
#loc308 = loc(fused[#loc33, #loc31])
#loc309 = loc(fused[#loc36, #loc37])
#loc310 = loc(fused[#loc38, #loc39])
#loc311 = loc(fused[#loc42, #loc43])
#loc312 = loc(fused[#loc41, #loc43])
#loc313 = loc(fused[#loc40, #loc28])
#loc314 = loc(fused[#loc44, #loc45])
#loc315 = loc(fused[#loc46, #loc47])
#loc316 = loc(fused[#loc48, #loc45])
#loc317 = loc(fused[#loc52, #loc53])
#loc318 = loc(fused[#loc55, #loc54])
#loc319 = loc(fused[#loc56, #loc57])
#loc320 = loc(fused[#loc59, #loc53])
#loc321 = loc(fused[#loc61, #loc60])
#loc322 = loc(fused[#loc65, #loc64])
#loc323 = loc(fused[#loc66, #loc67])
#loc324 = loc(fused[#loc68, #loc69])
#loc325 = loc(fused[#loc70, #loc71, #loc72, #loc67])
#loc326 = loc(fused[#loc74, #loc73])
#loc327 = loc(fused[#loc77, #loc78])
#loc328 = loc(fused[#loc80, #loc79])
#loc329 = loc(fused[#loc81, #loc82])
#loc330 = loc(fused[#loc84, #loc78])
#loc331 = loc(fused[#loc90, #loc89])
#loc332 = loc(fused[#loc94, #loc95])
#loc333 = loc(fused[#loc96, #loc97])
#loc334 = loc(fused[#loc98, #loc99])
#loc335 = loc(fused[#loc100, #loc101])
#loc336 = loc(fused[#loc102, #loc103])
#loc337 = loc(fused[#loc108, #loc109])
#loc340 = loc(fused[#loc119, #loc120])
#loc341 = loc(fused[#loc123, #loc124])
#loc342 = loc(fused[#loc127, #loc126])
#loc343 = loc(fused[#loc128, #loc129])
#loc345 = loc(fused[#loc134, #loc133])
#loc346 = loc(fused[#loc136, #loc135])
#loc347 = loc(fused[#loc138, #loc139])
#loc348 = loc(fused[#loc140, #loc141])
#loc349 = loc(fused[#loc142, #loc143])
#loc350 = loc(fused[#loc144, #loc145])
#loc351 = loc(fused[#loc148, #loc146])
#loc352 = loc(fused[#loc151, #loc152])
#loc353 = loc(fused[#loc153, #loc154])
#loc354 = loc(fused[#loc157, #loc158])
#loc355 = loc(fused[#loc156, #loc158])
#loc356 = loc(fused[#loc155, #loc143])
#loc357 = loc(fused[#loc159, #loc160])
#loc358 = loc(fused[#loc161, #loc162])
#loc359 = loc(fused[#loc163, #loc160])
#loc360 = loc(fused[#loc167, #loc168])
#loc361 = loc(fused[#loc170, #loc169])
#loc362 = loc(fused[#loc171, #loc172])
#loc363 = loc(fused[#loc174, #loc168])
#loc364 = loc(fused[#loc176, #loc175])
#loc365 = loc(fused[#loc180, #loc179])
#loc366 = loc(fused[#loc181, #loc182])
#loc367 = loc(fused[#loc183, #loc184])
#loc368 = loc(fused[#loc186, #loc188])
#loc369 = loc(fused[#loc189, #loc190, #loc191, #loc182])
#loc370 = loc(fused[#loc193, #loc192])
#loc371 = loc(fused[#loc196, #loc197])
#loc372 = loc(fused[#loc199, #loc198])
#loc373 = loc(fused[#loc200, #loc201])
#loc374 = loc(fused[#loc203, #loc197])
#loc375 = loc(fused[#loc209, #loc208])
#loc376 = loc(fused[#loc213, #loc214])
#loc378 = loc(fused[#loc219, #loc218])
#loc379 = loc(fused[#loc221, #loc220])
#loc380 = loc(fused[#loc222, #loc223])
#loc381 = loc(fused[#loc224, #loc225])
#loc382 = loc(fused[#loc226, #loc227])
#loc383 = loc(fused[#loc228, #loc229])
#loc384 = loc(fused[#loc232, #loc230])
#loc385 = loc(fused[#loc235, #loc236])
#loc386 = loc(fused[#loc237, #loc238])
#loc387 = loc(fused[#loc241, #loc242])
#loc388 = loc(fused[#loc240, #loc242])
#loc389 = loc(fused[#loc239, #loc227])
#loc390 = loc(fused[#loc243, #loc244])
#loc391 = loc(fused[#loc245, #loc246])
#loc392 = loc(fused[#loc247, #loc244])
#loc393 = loc(fused[#loc251, #loc252])
#loc394 = loc(fused[#loc254, #loc253])
#loc395 = loc(fused[#loc255, #loc256])
#loc396 = loc(fused[#loc258, #loc252])
#loc397 = loc(fused[#loc260, #loc259])
#loc398 = loc(fused[#loc264, #loc263])
#loc399 = loc(fused[#loc265, #loc266])
#loc400 = loc(fused[#loc267, #loc268])
#loc401 = loc(fused[#loc269, #loc270, #loc271, #loc266])
#loc402 = loc(fused[#loc273, #loc272])
#loc403 = loc(fused[#loc276, #loc277])
#loc404 = loc(fused[#loc279, #loc278])
#loc405 = loc(fused[#loc280, #loc281])
#loc406 = loc(fused[#loc283, #loc277])
#loc407 = loc(fused[#loc289, #loc288])
