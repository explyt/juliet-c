!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc297 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":355:10)
#loc298 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":355:14)
#loc299 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":355:20)
#loc300 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":355:32)
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc631 = loc(fused[#loc297, #loc298])
#loc632 = loc(fused[#loc299, #loc300])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__hostname_based_logic_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc514)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc515)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc516)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc517)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc518)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc519)
  cir.func private @getsockname(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc520)
  cir.func private @getnameinfo(!cir.ptr<!ty_sockaddr>, !u32i, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>, !u32i, !s32i) -> !s32i loc(#loc521)
  cir.func private @strcmp(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc522)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"admin.google.com\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc19)
  cir.func private @send(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc523)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Welcome, admin!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc22)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Welcome!\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc23)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc524)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Send failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc26)
  cir.func private @close(!s32i) -> !s32i loc(#loc525)
  cir.func no_proto @CWE510_Trapdoor__hostname_based_logic_12_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc528)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc528)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc33)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc33)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc531)
          %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["acceptService"] {alignment = 4 : i64} loc(#loc532)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptServiceLen", init] {alignment = 4 : i64} loc(#loc533)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc534)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc535)
          %9 = cir.alloca !cir.array<!s8i x 1025>, !cir.ptr<!cir.array<!s8i x 1025>>, ["hostname"] {alignment = 16 : i64} loc(#loc536)
          %10 = cir.alloca !cir.array<!s8i x 32>, !cir.ptr<!cir.array<!s8i x 32>>, ["servInfo"] {alignment = 16 : i64} loc(#loc537)
          %11 = cir.const #cir.int<16> : !u64i loc(#loc538)
          %12 = cir.cast(integral, %11 : !u64i), !s32i loc(#loc538)
          cir.store %12, %6 : !s32i, !cir.ptr<!s32i> loc(#loc533)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc46)
          %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc46)
          cir.store %14, %7 : !s32i, !cir.ptr<!s32i> loc(#loc534)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc48)
          %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc48)
          cir.store %16, %8 : !s32i, !cir.ptr<!s32i> loc(#loc535)
          cir.scope {
            cir.do {
              %17 = cir.const #cir.int<2> : !s32i loc(#loc56)
              %18 = cir.const #cir.int<1> : !s32i loc(#loc57)
              %19 = cir.const #cir.int<6> : !s32i loc(#loc58)
              %20 = cir.call @socket(%17, %18, %19) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc59)
              cir.store %20, %7 : !s32i, !cir.ptr<!s32i> loc(#loc540)
              cir.scope {
                %39 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc64)
                %40 = cir.const #cir.int<1> : !s32i loc(#loc65)
                %41 = cir.unary(minus, %40) : !s32i, !s32i loc(#loc65)
                %42 = cir.cmp(eq, %39, %41) : !s32i, !cir.bool loc(#loc542)
                cir.if %42 {
                  cir.break loc(#loc67)
                } loc(#loc543)
              } loc(#loc541)
              %21 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc544)
              %22 = cir.const #cir.int<0> : !s32i loc(#loc70)
              %23 = cir.const #cir.int<16> : !u64i loc(#loc545)
              cir.libc.memset %23 bytes from %21 set to %22 : !cir.ptr<!void>, !s32i, !u64i loc(#loc546)
              %24 = cir.const #cir.int<2> : !s32i loc(#loc75)
              %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc75)
              %26 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc76)
              cir.store %25, %26 : !u16i, !cir.ptr<!u16i> loc(#loc547)
              %27 = cir.const #cir.int<0> : !s32i loc(#loc78)
              %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc78)
              %29 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc79)
              %30 = cir.get_member %29[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc80)
              cir.store %28, %30 : !u32i, !cir.ptr<!u32i> loc(#loc548)
              %31 = cir.const #cir.int<20000> : !s32i loc(#loc82)
              %32 = cir.cast(integral, %31 : !s32i), !u16i loc(#loc82)
              %33 = cir.call @htons(%32) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc83)
              %34 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc84)
              cir.store %33, %34 : !u16i, !cir.ptr<!u16i> loc(#loc549)
              cir.scope {
                %39 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc89)
                %40 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc551)
                %41 = cir.const #cir.int<16> : !u64i loc(#loc552)
                %42 = cir.cast(integral, %41 : !u64i), !u32i loc(#loc552)
                %43 = cir.call @bind(%39, %40, %42) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc94)
                %44 = cir.const #cir.int<1> : !s32i loc(#loc95)
                %45 = cir.unary(minus, %44) : !s32i, !s32i loc(#loc95)
                %46 = cir.cmp(eq, %43, %45) : !s32i, !cir.bool loc(#loc553)
                cir.if %46 {
                  cir.break loc(#loc97)
                } loc(#loc554)
              } loc(#loc550)
              cir.scope {
                %39 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc100)
                %40 = cir.const #cir.int<5> : !s32i loc(#loc101)
                %41 = cir.call @listen(%39, %40) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc102)
                %42 = cir.const #cir.int<1> : !s32i loc(#loc103)
                %43 = cir.unary(minus, %42) : !s32i, !s32i loc(#loc103)
                %44 = cir.cmp(eq, %41, %43) : !s32i, !cir.bool loc(#loc556)
                cir.if %44 {
                  cir.break loc(#loc105)
                } loc(#loc557)
              } loc(#loc555)
              %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc106)
              %36 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc107)
              %37 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc108)
              %38 = cir.call @accept(%35, %36, %37) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc109)
              cir.store %38, %8 : !s32i, !cir.ptr<!s32i> loc(#loc558)
              cir.scope {
                %39 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc114)
                %40 = cir.const #cir.int<1> : !s32i loc(#loc115)
                %41 = cir.unary(minus, %40) : !s32i, !s32i loc(#loc115)
                %42 = cir.cmp(eq, %39, %41) : !s32i, !cir.bool loc(#loc560)
                cir.if %42 {
                  cir.break loc(#loc117)
                } loc(#loc561)
              } loc(#loc559)
              cir.scope {
                %39 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc120)
                %40 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc563)
                %41 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!u32i> loc(#loc564)
                %42 = cir.call @getsockname(%39, %40, %41) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc125)
                %43 = cir.const #cir.int<1> : !s32i loc(#loc126)
                %44 = cir.unary(minus, %43) : !s32i, !s32i loc(#loc127)
                %45 = cir.cmp(eq, %42, %44) : !s32i, !cir.bool loc(#loc565)
                cir.if %45 {
                  cir.break loc(#loc129)
                } loc(#loc566)
              } loc(#loc562)
              cir.scope {
                %39 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc568)
                %40 = cir.const #cir.int<16> : !u64i loc(#loc569)
                %41 = cir.cast(integral, %40 : !u64i), !u32i loc(#loc569)
                %42 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 1025>>), !cir.ptr<!s8i> loc(#loc136)
                %43 = cir.const #cir.int<1025> : !s32i loc(#loc137)
                %44 = cir.cast(integral, %43 : !s32i), !u32i loc(#loc137)
                %45 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc138)
                %46 = cir.const #cir.int<32> : !s32i loc(#loc139)
                %47 = cir.cast(integral, %46 : !s32i), !u32i loc(#loc139)
                %48 = cir.const #cir.int<2> : !s32i loc(#loc140)
                %49 = cir.call @getnameinfo(%39, %41, %42, %44, %45, %47, %48) : (!cir.ptr<!ty_sockaddr>, !u32i, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>, !u32i, !s32i) -> !s32i loc(#loc141)
                %50 = cir.const #cir.int<0> : !s32i loc(#loc142)
                %51 = cir.cmp(ne, %49, %50) : !s32i, !cir.bool loc(#loc570)
                cir.if %51 {
                  cir.break loc(#loc144)
                } loc(#loc571)
              } loc(#loc567)
              cir.scope {
                %39 = cir.get_global @strcmp : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc147)
                %40 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc19)
                %41 = cir.cast(array_to_ptrdecay, %40 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc19)
                %42 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 1025>>), !cir.ptr<!s8i> loc(#loc148)
                %43 = cir.call @strcmp(%41, %42) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc147)
                %44 = cir.const #cir.int<0> : !s32i loc(#loc149)
                %45 = cir.cmp(eq, %43, %44) : !s32i, !cir.bool loc(#loc573)
                cir.if %45 {
                  cir.scope {
                    %46 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc155)
                    %47 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc22)
                    %48 = cir.cast(array_to_ptrdecay, %47 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc22)
                    %49 = cir.cast(bitcast, %48 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc22)
                    %50 = cir.const #cir.int<15> : !u64i loc(#loc576)
                    %51 = cir.const #cir.int<0> : !s32i loc(#loc158)
                    %52 = cir.call @send(%46, %49, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc159)
                    %53 = cir.const #cir.int<1> : !s32i loc(#loc160)
                    %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc160)
                    %55 = cir.cast(integral, %54 : !s32i), !s64i loc(#loc160)
                    %56 = cir.cmp(eq, %52, %55) : !s64i, !cir.bool loc(#loc577)
                    cir.if %56 {
                      cir.break loc(#loc162)
                    } loc(#loc578)
                  } loc(#loc575)
                } else {
                  cir.scope {
                    %46 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc165)
                    %47 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc23)
                    %48 = cir.cast(array_to_ptrdecay, %47 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc23)
                    %49 = cir.cast(bitcast, %48 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc23)
                    %50 = cir.const #cir.int<8> : !u64i loc(#loc580)
                    %51 = cir.const #cir.int<0> : !s32i loc(#loc168)
                    %52 = cir.call @send(%46, %49, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc169)
                    %53 = cir.const #cir.int<1> : !s32i loc(#loc170)
                    %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc170)
                    %55 = cir.cast(integral, %54 : !s32i), !s64i loc(#loc170)
                    %56 = cir.cmp(eq, %52, %55) : !s64i, !cir.bool loc(#loc581)
                    cir.if %56 {
                      %57 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc26)
                      %58 = cir.cast(array_to_ptrdecay, %57 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc26)
                      cir.call @printLine(%58) : (!cir.ptr<!s8i>) -> () loc(#loc172)
                    } loc(#loc582)
                  } loc(#loc579)
                } loc(#loc574)
              } loc(#loc572)
              cir.yield loc(#loc55)
            } while {
              %17 = cir.const #cir.int<0> : !s32i loc(#loc173)
              %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc173)
              cir.condition(%18) loc(#loc173)
            } loc(#loc539)
          } loc(#loc539)
          cir.scope {
            %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc176)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc177)
            %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc177)
            %20 = cir.cmp(ne, %17, %19) : !s32i, !cir.bool loc(#loc584)
            cir.if %20 {
              %21 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc179)
              %22 = cir.call @close(%21) : (!s32i) -> !s32i loc(#loc180)
            } loc(#loc585)
          } loc(#loc583)
          cir.scope {
            %17 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc183)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc184)
            %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc184)
            %20 = cir.cmp(ne, %17, %19) : !s32i, !cir.bool loc(#loc587)
            cir.if %20 {
              %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc186)
              %22 = cir.call @close(%21) : (!s32i) -> !s32i loc(#loc187)
            } loc(#loc588)
          } loc(#loc586)
        } loc(#loc530)
      } else {
        cir.scope {
          %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc590)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc591)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc592)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc193)
          %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc193)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc591)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc195)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc195)
          cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc592)
          cir.scope {
            cir.do {
              %11 = cir.const #cir.int<2> : !s32i loc(#loc198)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc199)
              %13 = cir.const #cir.int<6> : !s32i loc(#loc200)
              %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc201)
              cir.store %14, %5 : !s32i, !cir.ptr<!s32i> loc(#loc594)
              cir.scope {
                %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc206)
                %34 = cir.const #cir.int<1> : !s32i loc(#loc207)
                %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc207)
                %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc596)
                cir.if %36 {
                  cir.break loc(#loc209)
                } loc(#loc597)
              } loc(#loc595)
              %15 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc598)
              %16 = cir.const #cir.int<0> : !s32i loc(#loc212)
              %17 = cir.const #cir.int<16> : !u64i loc(#loc599)
              cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc600)
              %18 = cir.const #cir.int<2> : !s32i loc(#loc217)
              %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc217)
              %20 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc76)
              cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc601)
              %21 = cir.const #cir.int<0> : !s32i loc(#loc219)
              %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc219)
              %23 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc79)
              %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc80)
              cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc602)
              %25 = cir.const #cir.int<20000> : !s32i loc(#loc221)
              %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc221)
              %27 = cir.call @htons(%26) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc222)
              %28 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc84)
              cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc603)
              cir.scope {
                %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc227)
                %34 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc605)
                %35 = cir.const #cir.int<16> : !u64i loc(#loc606)
                %36 = cir.cast(integral, %35 : !u64i), !u32i loc(#loc606)
                %37 = cir.call @bind(%33, %34, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc232)
                %38 = cir.const #cir.int<1> : !s32i loc(#loc233)
                %39 = cir.unary(minus, %38) : !s32i, !s32i loc(#loc233)
                %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc607)
                cir.if %40 {
                  cir.break loc(#loc235)
                } loc(#loc608)
              } loc(#loc604)
              cir.scope {
                %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc238)
                %34 = cir.const #cir.int<5> : !s32i loc(#loc239)
                %35 = cir.call @listen(%33, %34) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc240)
                %36 = cir.const #cir.int<1> : !s32i loc(#loc241)
                %37 = cir.unary(minus, %36) : !s32i, !s32i loc(#loc241)
                %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc610)
                cir.if %38 {
                  cir.break loc(#loc243)
                } loc(#loc611)
              } loc(#loc609)
              %29 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc244)
              %30 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc245)
              %31 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc246)
              %32 = cir.call @accept(%29, %30, %31) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc247)
              cir.store %32, %6 : !s32i, !cir.ptr<!s32i> loc(#loc612)
              cir.scope {
                %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc252)
                %34 = cir.const #cir.int<1> : !s32i loc(#loc253)
                %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc253)
                %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc614)
                cir.if %36 {
                  cir.break loc(#loc255)
                } loc(#loc615)
              } loc(#loc613)
              cir.scope {
                %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc258)
                %34 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc259)
                %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc259)
                %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc259)
                %37 = cir.const #cir.int<8> : !u64i loc(#loc617)
                %38 = cir.const #cir.int<0> : !s32i loc(#loc262)
                %39 = cir.call @send(%33, %36, %37, %38) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc263)
                %40 = cir.const #cir.int<1> : !s32i loc(#loc264)
                %41 = cir.unary(minus, %40) : !s32i, !s32i loc(#loc264)
                %42 = cir.cast(integral, %41 : !s32i), !s64i loc(#loc264)
                %43 = cir.cmp(eq, %39, %42) : !s64i, !cir.bool loc(#loc618)
                cir.if %43 {
                  %44 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc266)
                  %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc266)
                  cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc267)
                } loc(#loc619)
              } loc(#loc616)
              cir.yield loc(#loc197)
            } while {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc268)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc268)
              cir.condition(%12) loc(#loc268)
            } loc(#loc593)
          } loc(#loc593)
          cir.scope {
            %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc271)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc272)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc272)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc621)
            cir.if %14 {
              %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc274)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc275)
            } loc(#loc622)
          } loc(#loc620)
          cir.scope {
            %11 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc278)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc279)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc279)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc624)
            cir.if %14 {
              %15 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc281)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc282)
            } loc(#loc625)
          } loc(#loc623)
        } loc(#loc589)
      } loc(#loc529)
    } loc(#loc527)
    cir.return loc(#loc30)
  } loc(#loc526)
  cir.func no_proto @CWE510_Trapdoor__hostname_based_logic_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc627)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc285)
    cir.return loc(#loc284)
  } loc(#loc626)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc628)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc629)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc291)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc292)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc293)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc294)
  cir.func @main(%arg0: !s32i loc(fused[#loc297, #loc298]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc299, #loc300])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc631)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc632)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc296)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc301)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc301)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc302)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc303)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc303)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc304)
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc291)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc291)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc305)
    %8 = cir.get_global @CWE510_Trapdoor__hostname_based_logic_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc633)
    cir.call @CWE510_Trapdoor__hostname_based_logic_12_good() : () -> () loc(#loc306)
    %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc292)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc292)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc308)
    %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc293)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc293)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc309)
    %13 = cir.get_global @CWE510_Trapdoor__hostname_based_logic_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc634)
    cir.call @CWE510_Trapdoor__hostname_based_logic_12_bad() : () -> () loc(#loc310)
    %14 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc294)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc294)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc312)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc313)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc635)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc635)
    cir.return %17 : !s32i loc(#loc635)
  } loc(#loc630)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc638)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc638)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc319)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc319)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc641)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc642)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc643)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc329)
          %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc329)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc642)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc331)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc331)
          cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc643)
          cir.scope {
            cir.do {
              %11 = cir.const #cir.int<2> : !s32i loc(#loc334)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc335)
              %13 = cir.const #cir.int<6> : !s32i loc(#loc336)
              %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc337)
              cir.store %14, %5 : !s32i, !cir.ptr<!s32i> loc(#loc645)
              cir.scope {
                %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc342)
                %34 = cir.const #cir.int<1> : !s32i loc(#loc343)
                %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc343)
                %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc647)
                cir.if %36 {
                  cir.break loc(#loc345)
                } loc(#loc648)
              } loc(#loc646)
              %15 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc649)
              %16 = cir.const #cir.int<0> : !s32i loc(#loc348)
              %17 = cir.const #cir.int<16> : !u64i loc(#loc650)
              cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc651)
              %18 = cir.const #cir.int<2> : !s32i loc(#loc353)
              %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc353)
              %20 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc76)
              cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc652)
              %21 = cir.const #cir.int<0> : !s32i loc(#loc355)
              %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc355)
              %23 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc79)
              %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc80)
              cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc653)
              %25 = cir.const #cir.int<20000> : !s32i loc(#loc357)
              %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc357)
              %27 = cir.call @htons(%26) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc358)
              %28 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc84)
              cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc654)
              cir.scope {
                %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc363)
                %34 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc656)
                %35 = cir.const #cir.int<16> : !u64i loc(#loc657)
                %36 = cir.cast(integral, %35 : !u64i), !u32i loc(#loc657)
                %37 = cir.call @bind(%33, %34, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc368)
                %38 = cir.const #cir.int<1> : !s32i loc(#loc369)
                %39 = cir.unary(minus, %38) : !s32i, !s32i loc(#loc369)
                %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc658)
                cir.if %40 {
                  cir.break loc(#loc371)
                } loc(#loc659)
              } loc(#loc655)
              cir.scope {
                %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc374)
                %34 = cir.const #cir.int<5> : !s32i loc(#loc375)
                %35 = cir.call @listen(%33, %34) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc376)
                %36 = cir.const #cir.int<1> : !s32i loc(#loc377)
                %37 = cir.unary(minus, %36) : !s32i, !s32i loc(#loc377)
                %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc661)
                cir.if %38 {
                  cir.break loc(#loc379)
                } loc(#loc662)
              } loc(#loc660)
              %29 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc380)
              %30 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc381)
              %31 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc382)
              %32 = cir.call @accept(%29, %30, %31) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc383)
              cir.store %32, %6 : !s32i, !cir.ptr<!s32i> loc(#loc663)
              cir.scope {
                %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc388)
                %34 = cir.const #cir.int<1> : !s32i loc(#loc389)
                %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc389)
                %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc665)
                cir.if %36 {
                  cir.break loc(#loc391)
                } loc(#loc666)
              } loc(#loc664)
              cir.scope {
                %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc394)
                %34 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc395)
                %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc395)
                %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc395)
                %37 = cir.const #cir.int<8> : !u64i loc(#loc668)
                %38 = cir.const #cir.int<0> : !s32i loc(#loc398)
                %39 = cir.call @send(%33, %36, %37, %38) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc399)
                %40 = cir.const #cir.int<1> : !s32i loc(#loc400)
                %41 = cir.unary(minus, %40) : !s32i, !s32i loc(#loc400)
                %42 = cir.cast(integral, %41 : !s32i), !s64i loc(#loc400)
                %43 = cir.cmp(eq, %39, %42) : !s64i, !cir.bool loc(#loc669)
                cir.if %43 {
                  %44 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc402)
                  %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc402)
                  cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc403)
                } loc(#loc670)
              } loc(#loc667)
              cir.yield loc(#loc333)
            } while {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc404)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc404)
              cir.condition(%12) loc(#loc404)
            } loc(#loc644)
          } loc(#loc644)
          cir.scope {
            %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc407)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc408)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc408)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc672)
            cir.if %14 {
              %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc410)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc411)
            } loc(#loc673)
          } loc(#loc671)
          cir.scope {
            %11 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc414)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc415)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc415)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc675)
            cir.if %14 {
              %15 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc417)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc418)
            } loc(#loc676)
          } loc(#loc674)
        } loc(#loc640)
      } else {
        cir.scope {
          %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc678)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc679)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc680)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc424)
          %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc424)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc679)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc426)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc426)
          cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc680)
          cir.scope {
            cir.do {
              %11 = cir.const #cir.int<2> : !s32i loc(#loc429)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc430)
              %13 = cir.const #cir.int<6> : !s32i loc(#loc431)
              %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc432)
              cir.store %14, %5 : !s32i, !cir.ptr<!s32i> loc(#loc682)
              cir.scope {
                %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc437)
                %34 = cir.const #cir.int<1> : !s32i loc(#loc438)
                %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc438)
                %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc684)
                cir.if %36 {
                  cir.break loc(#loc440)
                } loc(#loc685)
              } loc(#loc683)
              %15 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc686)
              %16 = cir.const #cir.int<0> : !s32i loc(#loc443)
              %17 = cir.const #cir.int<16> : !u64i loc(#loc687)
              cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc688)
              %18 = cir.const #cir.int<2> : !s32i loc(#loc448)
              %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc448)
              %20 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc76)
              cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc689)
              %21 = cir.const #cir.int<0> : !s32i loc(#loc450)
              %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc450)
              %23 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc79)
              %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc80)
              cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc690)
              %25 = cir.const #cir.int<20000> : !s32i loc(#loc452)
              %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc452)
              %27 = cir.call @htons(%26) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc453)
              %28 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc84)
              cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc691)
              cir.scope {
                %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc458)
                %34 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc693)
                %35 = cir.const #cir.int<16> : !u64i loc(#loc694)
                %36 = cir.cast(integral, %35 : !u64i), !u32i loc(#loc694)
                %37 = cir.call @bind(%33, %34, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc463)
                %38 = cir.const #cir.int<1> : !s32i loc(#loc464)
                %39 = cir.unary(minus, %38) : !s32i, !s32i loc(#loc464)
                %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc695)
                cir.if %40 {
                  cir.break loc(#loc466)
                } loc(#loc696)
              } loc(#loc692)
              cir.scope {
                %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc469)
                %34 = cir.const #cir.int<5> : !s32i loc(#loc470)
                %35 = cir.call @listen(%33, %34) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc471)
                %36 = cir.const #cir.int<1> : !s32i loc(#loc472)
                %37 = cir.unary(minus, %36) : !s32i, !s32i loc(#loc472)
                %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc698)
                cir.if %38 {
                  cir.break loc(#loc474)
                } loc(#loc699)
              } loc(#loc697)
              %29 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc475)
              %30 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc476)
              %31 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc477)
              %32 = cir.call @accept(%29, %30, %31) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc478)
              cir.store %32, %6 : !s32i, !cir.ptr<!s32i> loc(#loc700)
              cir.scope {
                %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc483)
                %34 = cir.const #cir.int<1> : !s32i loc(#loc484)
                %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc484)
                %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc702)
                cir.if %36 {
                  cir.break loc(#loc486)
                } loc(#loc703)
              } loc(#loc701)
              cir.scope {
                %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc489)
                %34 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc490)
                %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc490)
                %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc490)
                %37 = cir.const #cir.int<8> : !u64i loc(#loc705)
                %38 = cir.const #cir.int<0> : !s32i loc(#loc493)
                %39 = cir.call @send(%33, %36, %37, %38) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc494)
                %40 = cir.const #cir.int<1> : !s32i loc(#loc495)
                %41 = cir.unary(minus, %40) : !s32i, !s32i loc(#loc495)
                %42 = cir.cast(integral, %41 : !s32i), !s64i loc(#loc495)
                %43 = cir.cmp(eq, %39, %42) : !s64i, !cir.bool loc(#loc706)
                cir.if %43 {
                  %44 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc497)
                  %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc497)
                  cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc498)
                } loc(#loc707)
              } loc(#loc704)
              cir.yield loc(#loc428)
            } while {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc499)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc499)
              cir.condition(%12) loc(#loc499)
            } loc(#loc681)
          } loc(#loc681)
          cir.scope {
            %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc502)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc503)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc503)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc709)
            cir.if %14 {
              %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc505)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc506)
            } loc(#loc710)
          } loc(#loc708)
          cir.scope {
            %11 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc509)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc510)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc510)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc712)
            cir.if %14 {
              %15 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc512)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc513)
            } loc(#loc713)
          } loc(#loc711)
        } loc(#loc677)
      } loc(#loc639)
    } loc(#loc637)
    cir.return loc(#loc316)
  } loc(#loc636)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__hostname_based_logic_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/sys/socket.h":102:1)
#loc4 = loc("/usr/include/sys/socket.h":102:62)
#loc5 = loc("/usr/include/netinet/in.h":404:1)
#loc6 = loc("/usr/include/netinet/in.h":405:40)
#loc7 = loc("/usr/include/sys/socket.h":112:1)
#loc8 = loc("/usr/include/sys/socket.h":113:6)
#loc9 = loc("/usr/include/sys/socket.h":296:1)
#loc10 = loc("/usr/include/sys/socket.h":296:39)
#loc11 = loc("/usr/include/sys/socket.h":306:1)
#loc12 = loc("/usr/include/sys/socket.h":307:38)
#loc13 = loc("/usr/include/sys/socket.h":116:1)
#loc14 = loc("/usr/include/sys/socket.h":117:33)
#loc15 = loc("/usr/include/netdb.h":675:1)
#loc16 = loc("/usr/include/netdb.h":678:36)
#loc17 = loc("/usr/include/string.h":156:1)
#loc18 = loc("/usr/include/string.h":157:33)
#loc19 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":105:28)
#loc20 = loc("/usr/include/sys/socket.h":138:1)
#loc21 = loc("/usr/include/sys/socket.h":138:74)
#loc22 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":107:44)
#loc23 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":115:44)
#loc24 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc25 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc26 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":117:35)
#loc27 = loc("/usr/include/unistd.h":358:1)
#loc28 = loc("/usr/include/unistd.h":358:27)
#loc29 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":47:1)
#loc30 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":202:1)
#loc31 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":49:5)
#loc32 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":201:5)
#loc33 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":49:8)
#loc34 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":49:33)
#loc35 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":50:5)
#loc36 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":137:5)
#loc37 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":139:5)
#loc38 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":51:9)
#loc39 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":136:9)
#loc40 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":56:13)
#loc41 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":56:32)
#loc42 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":56:41)
#loc43 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":57:13)
#loc44 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":57:56)
#loc45 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":58:13)
#loc46 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":58:35)
#loc47 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":59:13)
#loc48 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":59:35)
#loc49 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":60:13)
#loc50 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":60:37)
#loc51 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":61:13)
#loc52 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":61:37)
#loc53 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":57:36)
#loc54 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":62:13)
#loc55 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":121:21)
#loc56 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":71:39)
#loc57 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":71:48)
#loc58 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":71:61)
#loc59 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":71:32)
#loc60 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":71:17)
#loc61 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":71:72)
#loc62 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":72:17)
#loc63 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":75:17)
#loc64 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":72:21)
#loc65 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":72:37)
#loc66 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":73:17)
#loc67 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":74:21)
#loc68 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":76:24)
#loc69 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":76:25)
#loc70 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":76:34)
#loc71 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":76:37)
#loc72 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":76:51)
#loc73 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":76:17)
#loc74 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":76:52)
#loc75 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":77:38)
#loc76 = loc("/usr/include/netinet/in.h":249:5)
#loc77 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":77:17)
#loc78 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":78:43)
#loc79 = loc("/usr/include/netinet/in.h":251:20)
#loc80 = loc("/usr/include/netinet/in.h":33:15)
#loc81 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":78:17)
#loc82 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":79:42)
#loc83 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":79:36)
#loc84 = loc("/usr/include/netinet/in.h":250:15)
#loc85 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":79:17)
#loc86 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":79:47)
#loc87 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":80:17)
#loc88 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":83:17)
#loc89 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":80:26)
#loc90 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":80:58)
#loc91 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":80:59)
#loc92 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":80:68)
#loc93 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":80:82)
#loc94 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":80:21)
#loc95 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":80:88)
#loc96 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":81:17)
#loc97 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":82:21)
#loc98 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":84:17)
#loc99 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":87:17)
#loc100 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":84:28)
#loc101 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":84:42)
#loc102 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":84:21)
#loc103 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":84:48)
#loc104 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":85:17)
#loc105 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":86:21)
#loc106 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":88:39)
#loc107 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":88:53)
#loc108 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":88:59)
#loc109 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":88:32)
#loc110 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":88:17)
#loc111 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":88:63)
#loc112 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":89:17)
#loc113 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":92:17)
#loc114 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":89:21)
#loc115 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":89:37)
#loc116 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":90:17)
#loc117 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":91:21)
#loc118 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":93:17)
#loc119 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":96:17)
#loc120 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":93:33)
#loc121 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":93:66)
#loc122 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":93:67)
#loc123 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":93:82)
#loc124 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":93:83)
#loc125 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":93:21)
#loc126 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":93:105)
#loc127 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":93:104)
#loc128 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":94:17)
#loc129 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":95:21)
#loc130 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":97:17)
#loc131 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":103:17)
#loc132 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":97:52)
#loc133 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":97:53)
#loc134 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":98:33)
#loc135 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":98:55)
#loc136 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":99:33)
#loc137 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":100:33)
#loc138 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":100:45)
#loc139 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":100:55)
#loc140 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":100:67)
#loc141 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":97:21)
#loc142 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":100:86)
#loc143 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":101:17)
#loc144 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":102:21)
#loc145 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":105:17)
#loc146 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":119:17)
#loc147 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":105:21)
#loc148 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":105:48)
#loc149 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":105:61)
#loc150 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":106:17)
#loc151 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":112:17)
#loc152 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":114:17)
#loc153 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":107:21)
#loc154 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":111:21)
#loc155 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":107:30)
#loc156 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":107:59)
#loc157 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":107:79)
#loc158 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":107:82)
#loc159 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":107:25)
#loc160 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":107:89)
#loc161 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":108:21)
#loc162 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":110:25)
#loc163 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":115:21)
#loc164 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":118:21)
#loc165 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":115:30)
#loc166 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":115:61)
#loc167 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":115:83)
#loc168 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":115:86)
#loc169 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":115:25)
#loc170 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":115:92)
#loc171 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":116:21)
#loc172 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":117:25)
#loc173 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":121:20)
#loc174 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":122:13)
#loc175 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":125:13)
#loc176 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":122:17)
#loc177 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":122:33)
#loc178 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":123:13)
#loc179 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":124:30)
#loc180 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":124:17)
#loc181 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":126:13)
#loc182 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":129:13)
#loc183 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":126:17)
#loc184 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":126:33)
#loc185 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":127:13)
#loc186 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":128:30)
#loc187 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":128:17)
#loc188 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":140:9)
#loc189 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":200:9)
#loc190 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":145:13)
#loc191 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":145:32)
#loc192 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":146:13)
#loc193 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":146:35)
#loc194 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":147:13)
#loc195 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":147:35)
#loc196 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":148:13)
#loc197 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":185:21)
#loc198 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":157:39)
#loc199 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":157:48)
#loc200 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":157:61)
#loc201 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":157:32)
#loc202 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":157:17)
#loc203 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":157:72)
#loc204 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":158:17)
#loc205 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":161:17)
#loc206 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":158:21)
#loc207 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":158:37)
#loc208 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":159:17)
#loc209 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":160:21)
#loc210 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":162:24)
#loc211 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":162:25)
#loc212 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":162:34)
#loc213 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":162:37)
#loc214 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":162:51)
#loc215 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":162:17)
#loc216 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":162:52)
#loc217 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":163:38)
#loc218 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":163:17)
#loc219 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":164:43)
#loc220 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":164:17)
#loc221 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":165:42)
#loc222 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":165:36)
#loc223 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":165:17)
#loc224 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":165:47)
#loc225 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":166:17)
#loc226 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":169:17)
#loc227 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":166:26)
#loc228 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":166:58)
#loc229 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":166:59)
#loc230 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":166:68)
#loc231 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":166:82)
#loc232 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":166:21)
#loc233 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":166:88)
#loc234 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":167:17)
#loc235 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":168:21)
#loc236 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":170:17)
#loc237 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":173:17)
#loc238 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":170:28)
#loc239 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":170:42)
#loc240 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":170:21)
#loc241 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":170:48)
#loc242 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":171:17)
#loc243 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":172:21)
#loc244 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":174:39)
#loc245 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":174:53)
#loc246 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":174:59)
#loc247 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":174:32)
#loc248 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":174:17)
#loc249 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":174:63)
#loc250 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":175:17)
#loc251 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":178:17)
#loc252 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":175:21)
#loc253 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":175:37)
#loc254 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":176:17)
#loc255 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":177:21)
#loc256 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":180:17)
#loc257 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":183:17)
#loc258 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":180:26)
#loc259 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":180:40)
#loc260 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":180:57)
#loc261 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":180:79)
#loc262 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":180:82)
#loc263 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":180:21)
#loc264 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":180:88)
#loc265 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":181:17)
#loc266 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":182:31)
#loc267 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":182:21)
#loc268 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":185:20)
#loc269 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":186:13)
#loc270 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":189:13)
#loc271 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":186:17)
#loc272 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":186:33)
#loc273 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":187:13)
#loc274 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":188:30)
#loc275 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":188:17)
#loc276 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":190:13)
#loc277 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":193:13)
#loc278 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":190:17)
#loc279 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":190:33)
#loc280 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":191:13)
#loc281 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":192:30)
#loc282 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":192:17)
#loc283 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":341:1)
#loc284 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":344:1)
#loc285 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":343:5)
#loc286 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":343:11)
#loc287 = loc("/usr/include/stdlib.h":575:1)
#loc288 = loc("/usr/include/stdlib.h":575:41)
#loc289 = loc("/usr/include/time.h":76:1)
#loc290 = loc("/usr/include/time.h":76:38)
#loc291 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":360:15)
#loc292 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":362:15)
#loc293 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":365:15)
#loc294 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":367:15)
#loc295 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":355:1)
#loc296 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":370:1)
#loc301 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":356:1)
#loc302 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":358:27)
#loc303 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":358:22)
#loc304 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":358:5)
#loc305 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":360:5)
#loc306 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":361:5)
#loc307 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":361:51)
#loc308 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":362:5)
#loc309 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":365:5)
#loc310 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":366:5)
#loc311 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":366:50)
#loc312 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":367:5)
#loc313 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":369:12)
#loc314 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":369:5)
#loc315 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":209:1)
#loc316 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":339:1)
#loc317 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":211:5)
#loc318 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":338:5)
#loc319 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":211:8)
#loc320 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":211:33)
#loc321 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":212:5)
#loc322 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":274:5)
#loc323 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":276:5)
#loc324 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":213:9)
#loc325 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":273:9)
#loc326 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":218:13)
#loc327 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":218:32)
#loc328 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":219:13)
#loc329 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":219:35)
#loc330 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":220:13)
#loc331 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":220:35)
#loc332 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":221:13)
#loc333 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":258:21)
#loc334 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":230:39)
#loc335 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":230:48)
#loc336 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":230:61)
#loc337 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":230:32)
#loc338 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":230:17)
#loc339 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":230:72)
#loc340 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":231:17)
#loc341 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":234:17)
#loc342 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":231:21)
#loc343 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":231:37)
#loc344 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":232:17)
#loc345 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":233:21)
#loc346 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":235:24)
#loc347 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":235:25)
#loc348 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":235:34)
#loc349 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":235:37)
#loc350 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":235:51)
#loc351 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":235:17)
#loc352 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":235:52)
#loc353 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":236:38)
#loc354 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":236:17)
#loc355 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":237:43)
#loc356 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":237:17)
#loc357 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":238:42)
#loc358 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":238:36)
#loc359 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":238:17)
#loc360 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":238:47)
#loc361 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":239:17)
#loc362 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":242:17)
#loc363 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":239:26)
#loc364 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":239:58)
#loc365 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":239:59)
#loc366 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":239:68)
#loc367 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":239:82)
#loc368 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":239:21)
#loc369 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":239:88)
#loc370 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":240:17)
#loc371 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":241:21)
#loc372 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":243:17)
#loc373 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":246:17)
#loc374 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":243:28)
#loc375 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":243:42)
#loc376 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":243:21)
#loc377 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":243:48)
#loc378 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":244:17)
#loc379 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":245:21)
#loc380 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":247:39)
#loc381 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":247:53)
#loc382 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":247:59)
#loc383 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":247:32)
#loc384 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":247:17)
#loc385 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":247:63)
#loc386 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":248:17)
#loc387 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":251:17)
#loc388 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":248:21)
#loc389 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":248:37)
#loc390 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":249:17)
#loc391 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":250:21)
#loc392 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":253:17)
#loc393 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":256:17)
#loc394 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":253:26)
#loc395 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":253:40)
#loc396 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":253:57)
#loc397 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":253:79)
#loc398 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":253:82)
#loc399 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":253:21)
#loc400 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":253:88)
#loc401 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":254:17)
#loc402 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":255:31)
#loc403 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":255:21)
#loc404 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":258:20)
#loc405 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":259:13)
#loc406 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":262:13)
#loc407 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":259:17)
#loc408 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":259:33)
#loc409 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":260:13)
#loc410 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":261:30)
#loc411 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":261:17)
#loc412 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":263:13)
#loc413 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":266:13)
#loc414 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":263:17)
#loc415 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":263:33)
#loc416 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":264:13)
#loc417 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":265:30)
#loc418 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":265:17)
#loc419 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":277:9)
#loc420 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":337:9)
#loc421 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":282:13)
#loc422 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":282:32)
#loc423 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":283:13)
#loc424 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":283:35)
#loc425 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":284:13)
#loc426 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":284:35)
#loc427 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":285:13)
#loc428 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":322:21)
#loc429 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":294:39)
#loc430 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":294:48)
#loc431 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":294:61)
#loc432 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":294:32)
#loc433 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":294:17)
#loc434 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":294:72)
#loc435 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":295:17)
#loc436 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":298:17)
#loc437 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":295:21)
#loc438 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":295:37)
#loc439 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":296:17)
#loc440 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":297:21)
#loc441 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":299:24)
#loc442 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":299:25)
#loc443 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":299:34)
#loc444 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":299:37)
#loc445 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":299:51)
#loc446 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":299:17)
#loc447 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":299:52)
#loc448 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":300:38)
#loc449 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":300:17)
#loc450 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":301:43)
#loc451 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":301:17)
#loc452 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":302:42)
#loc453 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":302:36)
#loc454 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":302:17)
#loc455 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":302:47)
#loc456 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":303:17)
#loc457 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":306:17)
#loc458 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":303:26)
#loc459 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":303:58)
#loc460 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":303:59)
#loc461 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":303:68)
#loc462 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":303:82)
#loc463 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":303:21)
#loc464 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":303:88)
#loc465 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":304:17)
#loc466 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":305:21)
#loc467 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":307:17)
#loc468 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":310:17)
#loc469 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":307:28)
#loc470 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":307:42)
#loc471 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":307:21)
#loc472 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":307:48)
#loc473 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":308:17)
#loc474 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":309:21)
#loc475 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":311:39)
#loc476 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":311:53)
#loc477 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":311:59)
#loc478 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":311:32)
#loc479 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":311:17)
#loc480 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":311:63)
#loc481 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":312:17)
#loc482 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":315:17)
#loc483 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":312:21)
#loc484 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":312:37)
#loc485 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":313:17)
#loc486 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":314:21)
#loc487 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":317:17)
#loc488 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":320:17)
#loc489 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":317:26)
#loc490 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":317:40)
#loc491 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":317:57)
#loc492 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":317:79)
#loc493 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":317:82)
#loc494 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":317:21)
#loc495 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":317:88)
#loc496 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":318:17)
#loc497 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":319:31)
#loc498 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":319:21)
#loc499 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":322:20)
#loc500 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":323:13)
#loc501 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":326:13)
#loc502 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":323:17)
#loc503 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":323:33)
#loc504 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":324:13)
#loc505 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":325:30)
#loc506 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":325:17)
#loc507 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":327:13)
#loc508 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":330:13)
#loc509 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":327:17)
#loc510 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":327:33)
#loc511 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":328:13)
#loc512 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":329:30)
#loc513 = loc("CWE510_Trapdoor__hostname_based_logic_12.c":329:17)
#loc514 = loc(fused[#loc1, #loc2])
#loc515 = loc(fused[#loc3, #loc4])
#loc516 = loc(fused[#loc5, #loc6])
#loc517 = loc(fused[#loc7, #loc8])
#loc518 = loc(fused[#loc9, #loc10])
#loc519 = loc(fused[#loc11, #loc12])
#loc520 = loc(fused[#loc13, #loc14])
#loc521 = loc(fused[#loc15, #loc16])
#loc522 = loc(fused[#loc17, #loc18])
#loc523 = loc(fused[#loc20, #loc21])
#loc524 = loc(fused[#loc24, #loc25])
#loc525 = loc(fused[#loc27, #loc28])
#loc526 = loc(fused[#loc29, #loc30])
#loc527 = loc(fused[#loc31, #loc32])
#loc528 = loc(fused[#loc33, #loc34])
#loc529 = loc(fused[#loc35, #loc36, #loc37, #loc32])
#loc530 = loc(fused[#loc38, #loc39])
#loc531 = loc(fused[#loc40, #loc41])
#loc532 = loc(fused[#loc40, #loc42])
#loc533 = loc(fused[#loc43, #loc44])
#loc534 = loc(fused[#loc45, #loc46])
#loc535 = loc(fused[#loc47, #loc48])
#loc536 = loc(fused[#loc49, #loc50])
#loc537 = loc(fused[#loc51, #loc52])
#loc538 = loc(fused[#loc53, #loc44])
#loc539 = loc(fused[#loc54, #loc55])
#loc540 = loc(fused[#loc60, #loc61])
#loc541 = loc(fused[#loc62, #loc63])
#loc542 = loc(fused[#loc64, #loc65])
#loc543 = loc(fused[#loc66, #loc63])
#loc544 = loc(fused[#loc68, #loc69])
#loc545 = loc(fused[#loc71, #loc72])
#loc546 = loc(fused[#loc73, #loc74])
#loc547 = loc(fused[#loc77, #loc75])
#loc548 = loc(fused[#loc81, #loc78])
#loc549 = loc(fused[#loc85, #loc86])
#loc550 = loc(fused[#loc87, #loc88])
#loc551 = loc(fused[#loc90, #loc91])
#loc552 = loc(fused[#loc92, #loc93])
#loc553 = loc(fused[#loc94, #loc95])
#loc554 = loc(fused[#loc96, #loc88])
#loc555 = loc(fused[#loc98, #loc99])
#loc556 = loc(fused[#loc102, #loc103])
#loc557 = loc(fused[#loc104, #loc99])
#loc558 = loc(fused[#loc110, #loc111])
#loc559 = loc(fused[#loc112, #loc113])
#loc560 = loc(fused[#loc114, #loc115])
#loc561 = loc(fused[#loc116, #loc113])
#loc562 = loc(fused[#loc118, #loc119])
#loc563 = loc(fused[#loc121, #loc122])
#loc564 = loc(fused[#loc123, #loc124])
#loc565 = loc(fused[#loc125, #loc126])
#loc566 = loc(fused[#loc128, #loc119])
#loc567 = loc(fused[#loc130, #loc131])
#loc568 = loc(fused[#loc132, #loc133])
#loc569 = loc(fused[#loc134, #loc135])
#loc570 = loc(fused[#loc141, #loc142])
#loc571 = loc(fused[#loc143, #loc131])
#loc572 = loc(fused[#loc145, #loc146])
#loc573 = loc(fused[#loc147, #loc149])
#loc574 = loc(fused[#loc150, #loc151, #loc152, #loc146])
#loc575 = loc(fused[#loc153, #loc154])
#loc576 = loc(fused[#loc156, #loc157])
#loc577 = loc(fused[#loc159, #loc160])
#loc578 = loc(fused[#loc161, #loc154])
#loc579 = loc(fused[#loc163, #loc164])
#loc580 = loc(fused[#loc166, #loc167])
#loc581 = loc(fused[#loc169, #loc170])
#loc582 = loc(fused[#loc171, #loc164])
#loc583 = loc(fused[#loc174, #loc175])
#loc584 = loc(fused[#loc176, #loc177])
#loc585 = loc(fused[#loc178, #loc175])
#loc586 = loc(fused[#loc181, #loc182])
#loc587 = loc(fused[#loc183, #loc184])
#loc588 = loc(fused[#loc185, #loc182])
#loc589 = loc(fused[#loc188, #loc189])
#loc590 = loc(fused[#loc190, #loc191])
#loc591 = loc(fused[#loc192, #loc193])
#loc592 = loc(fused[#loc194, #loc195])
#loc593 = loc(fused[#loc196, #loc197])
#loc594 = loc(fused[#loc202, #loc203])
#loc595 = loc(fused[#loc204, #loc205])
#loc596 = loc(fused[#loc206, #loc207])
#loc597 = loc(fused[#loc208, #loc205])
#loc598 = loc(fused[#loc210, #loc211])
#loc599 = loc(fused[#loc213, #loc214])
#loc600 = loc(fused[#loc215, #loc216])
#loc601 = loc(fused[#loc218, #loc217])
#loc602 = loc(fused[#loc220, #loc219])
#loc603 = loc(fused[#loc223, #loc224])
#loc604 = loc(fused[#loc225, #loc226])
#loc605 = loc(fused[#loc228, #loc229])
#loc606 = loc(fused[#loc230, #loc231])
#loc607 = loc(fused[#loc232, #loc233])
#loc608 = loc(fused[#loc234, #loc226])
#loc609 = loc(fused[#loc236, #loc237])
#loc610 = loc(fused[#loc240, #loc241])
#loc611 = loc(fused[#loc242, #loc237])
#loc612 = loc(fused[#loc248, #loc249])
#loc613 = loc(fused[#loc250, #loc251])
#loc614 = loc(fused[#loc252, #loc253])
#loc615 = loc(fused[#loc254, #loc251])
#loc616 = loc(fused[#loc256, #loc257])
#loc617 = loc(fused[#loc260, #loc261])
#loc618 = loc(fused[#loc263, #loc264])
#loc619 = loc(fused[#loc265, #loc257])
#loc620 = loc(fused[#loc269, #loc270])
#loc621 = loc(fused[#loc271, #loc272])
#loc622 = loc(fused[#loc273, #loc270])
#loc623 = loc(fused[#loc276, #loc277])
#loc624 = loc(fused[#loc278, #loc279])
#loc625 = loc(fused[#loc280, #loc277])
#loc626 = loc(fused[#loc283, #loc284])
#loc627 = loc(fused[#loc285, #loc286])
#loc628 = loc(fused[#loc287, #loc288])
#loc629 = loc(fused[#loc289, #loc290])
#loc630 = loc(fused[#loc295, #loc296])
#loc633 = loc(fused[#loc306, #loc307])
#loc634 = loc(fused[#loc310, #loc311])
#loc635 = loc(fused[#loc314, #loc313])
#loc636 = loc(fused[#loc315, #loc316])
#loc637 = loc(fused[#loc317, #loc318])
#loc638 = loc(fused[#loc319, #loc320])
#loc639 = loc(fused[#loc321, #loc322, #loc323, #loc318])
#loc640 = loc(fused[#loc324, #loc325])
#loc641 = loc(fused[#loc326, #loc327])
#loc642 = loc(fused[#loc328, #loc329])
#loc643 = loc(fused[#loc330, #loc331])
#loc644 = loc(fused[#loc332, #loc333])
#loc645 = loc(fused[#loc338, #loc339])
#loc646 = loc(fused[#loc340, #loc341])
#loc647 = loc(fused[#loc342, #loc343])
#loc648 = loc(fused[#loc344, #loc341])
#loc649 = loc(fused[#loc346, #loc347])
#loc650 = loc(fused[#loc349, #loc350])
#loc651 = loc(fused[#loc351, #loc352])
#loc652 = loc(fused[#loc354, #loc353])
#loc653 = loc(fused[#loc356, #loc355])
#loc654 = loc(fused[#loc359, #loc360])
#loc655 = loc(fused[#loc361, #loc362])
#loc656 = loc(fused[#loc364, #loc365])
#loc657 = loc(fused[#loc366, #loc367])
#loc658 = loc(fused[#loc368, #loc369])
#loc659 = loc(fused[#loc370, #loc362])
#loc660 = loc(fused[#loc372, #loc373])
#loc661 = loc(fused[#loc376, #loc377])
#loc662 = loc(fused[#loc378, #loc373])
#loc663 = loc(fused[#loc384, #loc385])
#loc664 = loc(fused[#loc386, #loc387])
#loc665 = loc(fused[#loc388, #loc389])
#loc666 = loc(fused[#loc390, #loc387])
#loc667 = loc(fused[#loc392, #loc393])
#loc668 = loc(fused[#loc396, #loc397])
#loc669 = loc(fused[#loc399, #loc400])
#loc670 = loc(fused[#loc401, #loc393])
#loc671 = loc(fused[#loc405, #loc406])
#loc672 = loc(fused[#loc407, #loc408])
#loc673 = loc(fused[#loc409, #loc406])
#loc674 = loc(fused[#loc412, #loc413])
#loc675 = loc(fused[#loc414, #loc415])
#loc676 = loc(fused[#loc416, #loc413])
#loc677 = loc(fused[#loc419, #loc420])
#loc678 = loc(fused[#loc421, #loc422])
#loc679 = loc(fused[#loc423, #loc424])
#loc680 = loc(fused[#loc425, #loc426])
#loc681 = loc(fused[#loc427, #loc428])
#loc682 = loc(fused[#loc433, #loc434])
#loc683 = loc(fused[#loc435, #loc436])
#loc684 = loc(fused[#loc437, #loc438])
#loc685 = loc(fused[#loc439, #loc436])
#loc686 = loc(fused[#loc441, #loc442])
#loc687 = loc(fused[#loc444, #loc445])
#loc688 = loc(fused[#loc446, #loc447])
#loc689 = loc(fused[#loc449, #loc448])
#loc690 = loc(fused[#loc451, #loc450])
#loc691 = loc(fused[#loc454, #loc455])
#loc692 = loc(fused[#loc456, #loc457])
#loc693 = loc(fused[#loc459, #loc460])
#loc694 = loc(fused[#loc461, #loc462])
#loc695 = loc(fused[#loc463, #loc464])
#loc696 = loc(fused[#loc465, #loc457])
#loc697 = loc(fused[#loc467, #loc468])
#loc698 = loc(fused[#loc471, #loc472])
#loc699 = loc(fused[#loc473, #loc468])
#loc700 = loc(fused[#loc479, #loc480])
#loc701 = loc(fused[#loc481, #loc482])
#loc702 = loc(fused[#loc483, #loc484])
#loc703 = loc(fused[#loc485, #loc482])
#loc704 = loc(fused[#loc487, #loc488])
#loc705 = loc(fused[#loc491, #loc492])
#loc706 = loc(fused[#loc494, #loc495])
#loc707 = loc(fused[#loc496, #loc488])
#loc708 = loc(fused[#loc500, #loc501])
#loc709 = loc(fused[#loc502, #loc503])
#loc710 = loc(fused[#loc504, #loc501])
#loc711 = loc(fused[#loc507, #loc508])
#loc712 = loc(fused[#loc509, #loc510])
#loc713 = loc(fused[#loc511, #loc508])
