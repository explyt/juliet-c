!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fgets_modulo_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc210)
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc211)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc212)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc213)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc214)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private  @printIntLine(!s32i) loc(#loc215)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_fgets_modulo_05_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc217)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc19)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc218)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc210)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc23)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc23)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc222)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc222)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc222)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc31)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc32)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc32)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc32)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc32)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc32)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc32)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc32)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc32)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc212)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc33)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc34)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc35)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc35)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !s32i loc(#loc224)
            %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc36)
            cir.if %23 {
              %24 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc40)
              %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc41)
              cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc226)
            } else {
              %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc44)
            } loc(#loc225)
          } loc(#loc223)
        } loc(#loc221)
      } loc(#loc220)
    } loc(#loc219)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc210)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc47)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc47)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc49)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc50)
        %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc229)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc51)
      } loc(#loc228)
    } loc(#loc227)
    cir.return loc(#loc15)
  } loc(#loc216)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_fgets_modulo_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc231)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc54)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc232)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc56)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc233)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc234)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc60)
    cir.return loc(#loc53)
  } loc(#loc230)
  cir.global "private"  internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc235)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc64)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc65)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc237)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc70)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc71)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc238)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc210)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc75)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc75)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc242)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc242)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc242)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc83)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc84)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc84)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc84)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc84)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc84)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc84)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc84)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc84)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc212)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc85)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc86)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc87)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc87)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !s32i loc(#loc244)
            %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc88)
            cir.if %23 {
              %24 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc92)
              %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc93)
              cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc246)
            } else {
              %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc96)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc96)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc97)
            } loc(#loc245)
          } loc(#loc243)
        } loc(#loc241)
      } loc(#loc240)
    } loc(#loc239)
    cir.scope {
      %3 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc235)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc100)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc100)
      cir.if %5 {
        %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc64)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc64)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc104)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc107)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc108)
          %8 = cir.cmp(ne, %6, %7) : !s32i, !s32i loc(#loc250)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc109)
          cir.if %9 {
            %10 = cir.const #cir.int<100> : !s32i loc(#loc113)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc114)
            %12 = cir.binop(rem, %10, %11) : !s32i loc(#loc252)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc115)
          } else {
            %10 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc65)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc65)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc116)
          } loc(#loc251)
        } loc(#loc249)
      } loc(#loc248)
    } loc(#loc247)
    cir.return loc(#loc67)
  } loc(#loc236)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc254)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc121)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc122)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc255)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc210)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc126)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc126)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc259)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc259)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc259)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc134)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc135)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc135)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc135)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc135)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc135)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc135)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc135)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc135)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc212)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc136)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc137)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc138)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc138)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !s32i loc(#loc261)
            %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc139)
            cir.if %23 {
              %24 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc143)
              %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc144)
              cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc263)
            } else {
              %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc147)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc147)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc148)
            } loc(#loc262)
          } loc(#loc260)
        } loc(#loc258)
      } loc(#loc257)
    } loc(#loc256)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc210)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc151)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc151)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc155)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc156)
          %8 = cir.cmp(ne, %6, %7) : !s32i, !s32i loc(#loc267)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc157)
          cir.if %9 {
            %10 = cir.const #cir.int<100> : !s32i loc(#loc161)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc162)
            %12 = cir.binop(rem, %10, %11) : !s32i loc(#loc269)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc163)
          } else {
            %10 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc164)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc164)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc165)
          } loc(#loc268)
        } loc(#loc266)
      } loc(#loc265)
    } loc(#loc264)
    cir.return loc(#loc118)
  } loc(#loc253)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc271)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc170)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc171)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc272)
    cir.scope {
      %3 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc235)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc175)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc175)
      cir.if %5 {
        %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc179)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc179)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc180)
      } else {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc181)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc275)
      } loc(#loc274)
    } loc(#loc273)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc210)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc185)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc185)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc187)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc188)
        %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc278)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc189)
      } loc(#loc277)
    } loc(#loc276)
    cir.return loc(#loc167)
  } loc(#loc270)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc280)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc194)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc195)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc281)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc210)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc199)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc199)
      cir.if %5 {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc201)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc284)
      } loc(#loc283)
    } loc(#loc282)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc210)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc205)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc205)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc207)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc208)
        %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc287)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc209)
      } loc(#loc286)
    } loc(#loc285)
    cir.return loc(#loc191)
  } loc(#loc279)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fgets_modulo_05.c":0:0)
#loc1 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":25:1)
#loc2 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":25:25)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":105:1)
#loc8 = loc("/usr/include/stdlib.h":106:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":47:27)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":30:1)
#loc15 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":56:1)
#loc16 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":32:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":32:9)
#loc18 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":34:13)
#loc19 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":34:12)
#loc20 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":34:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":35:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":50:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":35:8)
#loc24 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":36:5)
#loc25 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":37:9)
#loc26 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":49:9)
#loc27 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":38:13)
#loc28 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":38:49)
#loc29 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":40:13)
#loc30 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":48:13)
#loc31 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":40:23)
#loc32 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":40:36)
#loc33 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":40:53)
#loc34 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":40:17)
#loc35 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":40:63)
#loc36 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":40:60)
#loc37 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":41:13)
#loc38 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":44:13)
#loc39 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":46:13)
#loc40 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":43:29)
#loc41 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":43:24)
#loc42 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":43:17)
#loc43 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":43:40)
#loc44 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":47:17)
#loc45 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":51:5)
#loc46 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":55:5)
#loc47 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":51:8)
#loc48 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":52:5)
#loc49 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":54:22)
#loc50 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":54:28)
#loc51 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":54:9)
#loc52 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":180:1)
#loc53 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":186:1)
#loc54 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":182:5)
#loc55 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":182:14)
#loc56 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":183:5)
#loc57 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":183:14)
#loc58 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":184:5)
#loc59 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":184:14)
#loc60 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":185:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":185:14)
#loc62 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":26:1)
#loc63 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":26:26)
#loc64 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":87:19)
#loc65 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":98:23)
#loc66 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":63:1)
#loc67 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":101:1)
#loc68 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":65:5)
#loc69 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":65:9)
#loc70 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":67:13)
#loc71 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":67:12)
#loc72 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":67:5)
#loc73 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":68:5)
#loc74 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":83:5)
#loc75 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":68:8)
#loc76 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":69:5)
#loc77 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":70:9)
#loc78 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":82:9)
#loc79 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":71:13)
#loc80 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":71:49)
#loc81 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":73:13)
#loc82 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":81:13)
#loc83 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":73:23)
#loc84 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":73:36)
#loc85 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":73:53)
#loc86 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":73:17)
#loc87 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":73:63)
#loc88 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":73:60)
#loc89 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":74:13)
#loc90 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":77:13)
#loc91 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":79:13)
#loc92 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":76:29)
#loc93 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":76:24)
#loc94 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":76:17)
#loc95 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":76:40)
#loc96 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":80:27)
#loc97 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":80:17)
#loc98 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":84:5)
#loc99 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":100:5)
#loc100 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":84:8)
#loc101 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":85:5)
#loc102 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":88:5)
#loc103 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":90:5)
#loc104 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":87:9)
#loc105 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":92:9)
#loc106 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":99:9)
#loc107 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":92:13)
#loc108 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":92:21)
#loc109 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":92:18)
#loc110 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":93:9)
#loc111 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":95:9)
#loc112 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":97:9)
#loc113 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":94:26)
#loc114 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":94:32)
#loc115 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":94:13)
#loc116 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":98:13)
#loc117 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":104:1)
#loc118 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":137:1)
#loc119 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":106:5)
#loc120 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":106:9)
#loc121 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":108:13)
#loc122 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":108:12)
#loc123 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":108:5)
#loc124 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":109:5)
#loc125 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":124:5)
#loc126 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":109:8)
#loc127 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":110:5)
#loc128 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":111:9)
#loc129 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":123:9)
#loc130 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":112:13)
#loc131 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":112:49)
#loc132 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":114:13)
#loc133 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":122:13)
#loc134 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":114:23)
#loc135 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":114:36)
#loc136 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":114:53)
#loc137 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":114:17)
#loc138 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":114:63)
#loc139 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":114:60)
#loc140 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":115:13)
#loc141 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":118:13)
#loc142 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":120:13)
#loc143 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":117:29)
#loc144 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":117:24)
#loc145 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":117:17)
#loc146 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":117:40)
#loc147 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":121:27)
#loc148 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":121:17)
#loc149 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":125:5)
#loc150 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":136:5)
#loc151 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":125:8)
#loc152 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":126:5)
#loc153 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":128:9)
#loc154 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":135:9)
#loc155 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":128:13)
#loc156 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":128:21)
#loc157 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":128:18)
#loc158 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":129:9)
#loc159 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":131:9)
#loc160 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":133:9)
#loc161 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":130:26)
#loc162 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":130:32)
#loc163 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":130:13)
#loc164 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":134:23)
#loc165 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":134:13)
#loc166 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":140:1)
#loc167 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":160:1)
#loc168 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":142:5)
#loc169 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":142:9)
#loc170 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":144:13)
#loc171 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":144:12)
#loc172 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":144:5)
#loc173 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":145:5)
#loc174 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":154:5)
#loc175 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":145:8)
#loc176 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":146:5)
#loc177 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":149:5)
#loc178 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":151:5)
#loc179 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":148:19)
#loc180 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":148:9)
#loc181 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":153:16)
#loc182 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":153:9)
#loc183 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":155:5)
#loc184 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":159:5)
#loc185 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":155:8)
#loc186 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":156:5)
#loc187 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":158:22)
#loc188 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":158:28)
#loc189 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":158:9)
#loc190 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":163:1)
#loc191 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":178:1)
#loc192 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":165:5)
#loc193 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":165:9)
#loc194 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":167:13)
#loc195 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":167:12)
#loc196 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":167:5)
#loc197 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":168:5)
#loc198 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":172:5)
#loc199 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":168:8)
#loc200 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":169:5)
#loc201 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":171:16)
#loc202 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":171:9)
#loc203 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":173:5)
#loc204 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":177:5)
#loc205 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":173:8)
#loc206 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":174:5)
#loc207 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":176:22)
#loc208 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":176:28)
#loc209 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_05.c":176:9)
#loc210 = loc(fused[#loc1, #loc2])
#loc211 = loc(fused[#loc3, #loc4])
#loc212 = loc(fused[#loc5, #loc6])
#loc213 = loc(fused[#loc7, #loc8])
#loc214 = loc(fused[#loc9, #loc10])
#loc215 = loc(fused[#loc12, #loc13])
#loc216 = loc(fused[#loc14, #loc15])
#loc217 = loc(fused[#loc16, #loc17])
#loc218 = loc(fused[#loc20, #loc18])
#loc219 = loc(fused[#loc21, #loc22])
#loc220 = loc(fused[#loc24, #loc22])
#loc221 = loc(fused[#loc25, #loc26])
#loc222 = loc(fused[#loc27, #loc28])
#loc223 = loc(fused[#loc29, #loc30])
#loc224 = loc(fused[#loc34, #loc35])
#loc225 = loc(fused[#loc37, #loc38, #loc39, #loc30])
#loc226 = loc(fused[#loc42, #loc43])
#loc227 = loc(fused[#loc45, #loc46])
#loc228 = loc(fused[#loc48, #loc46])
#loc229 = loc(fused[#loc49, #loc50])
#loc230 = loc(fused[#loc52, #loc53])
#loc231 = loc(fused[#loc54, #loc55])
#loc232 = loc(fused[#loc56, #loc57])
#loc233 = loc(fused[#loc58, #loc59])
#loc234 = loc(fused[#loc60, #loc61])
#loc235 = loc(fused[#loc62, #loc63])
#loc236 = loc(fused[#loc66, #loc67])
#loc237 = loc(fused[#loc68, #loc69])
#loc238 = loc(fused[#loc72, #loc70])
#loc239 = loc(fused[#loc73, #loc74])
#loc240 = loc(fused[#loc76, #loc74])
#loc241 = loc(fused[#loc77, #loc78])
#loc242 = loc(fused[#loc79, #loc80])
#loc243 = loc(fused[#loc81, #loc82])
#loc244 = loc(fused[#loc86, #loc87])
#loc245 = loc(fused[#loc89, #loc90, #loc91, #loc82])
#loc246 = loc(fused[#loc94, #loc95])
#loc247 = loc(fused[#loc98, #loc99])
#loc248 = loc(fused[#loc101, #loc102, #loc103, #loc99])
#loc249 = loc(fused[#loc105, #loc106])
#loc250 = loc(fused[#loc107, #loc108])
#loc251 = loc(fused[#loc110, #loc111, #loc112, #loc106])
#loc252 = loc(fused[#loc113, #loc114])
#loc253 = loc(fused[#loc117, #loc118])
#loc254 = loc(fused[#loc119, #loc120])
#loc255 = loc(fused[#loc123, #loc121])
#loc256 = loc(fused[#loc124, #loc125])
#loc257 = loc(fused[#loc127, #loc125])
#loc258 = loc(fused[#loc128, #loc129])
#loc259 = loc(fused[#loc130, #loc131])
#loc260 = loc(fused[#loc132, #loc133])
#loc261 = loc(fused[#loc137, #loc138])
#loc262 = loc(fused[#loc140, #loc141, #loc142, #loc133])
#loc263 = loc(fused[#loc145, #loc146])
#loc264 = loc(fused[#loc149, #loc150])
#loc265 = loc(fused[#loc152, #loc150])
#loc266 = loc(fused[#loc153, #loc154])
#loc267 = loc(fused[#loc155, #loc156])
#loc268 = loc(fused[#loc158, #loc159, #loc160, #loc154])
#loc269 = loc(fused[#loc161, #loc162])
#loc270 = loc(fused[#loc166, #loc167])
#loc271 = loc(fused[#loc168, #loc169])
#loc272 = loc(fused[#loc172, #loc170])
#loc273 = loc(fused[#loc173, #loc174])
#loc274 = loc(fused[#loc176, #loc177, #loc178, #loc174])
#loc275 = loc(fused[#loc182, #loc181])
#loc276 = loc(fused[#loc183, #loc184])
#loc277 = loc(fused[#loc186, #loc184])
#loc278 = loc(fused[#loc187, #loc188])
#loc279 = loc(fused[#loc190, #loc191])
#loc280 = loc(fused[#loc192, #loc193])
#loc281 = loc(fused[#loc196, #loc194])
#loc282 = loc(fused[#loc197, #loc198])
#loc283 = loc(fused[#loc200, #loc198])
#loc284 = loc(fused[#loc202, #loc201])
#loc285 = loc(fused[#loc203, #loc204])
#loc286 = loc(fused[#loc206, #loc204])
#loc287 = loc(fused[#loc207, #loc208])
