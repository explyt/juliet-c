!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc181)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc182)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc183)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc7)
  cir.func private @strncat(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc184)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc185)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc186)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc188)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc189)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc20)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc21)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc21)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc190)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc191)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc20)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc192)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc193)
    cir.br ^bb1 loc(#loc194)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc29)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc29)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc195)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc196)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc31)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc33)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc31)
    cir.br ^bb3 loc(#loc27)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc27)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc197)
  ^bb5:  // pred: ^bb4
    %16 = cir.const #cir.int<6> : !s32i loc(#loc36)
    cir.br ^bb6 loc(#loc34)
  ^bb6:  // pred: ^bb5
    cir.switch.flat %16 : !s32i, ^bb9 [
      6: ^bb8
    ] loc(#loc34)
  ^bb7:  // no predecessors
    cir.br ^bb8 loc(#loc37)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc38)
    %19 = cir.const #cir.int<65> : !s32i loc(#loc39)
    %20 = cir.const #cir.int<100> : !s32i loc(#loc40)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc40)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc40)
    cir.libc.memset %23 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc198)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc44)
    %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc44)
    %26 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc45)
    %27 = cir.const #cir.int<100> : !s32i loc(#loc46)
    %28 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc46)
    %30 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc48)
    cir.store %25, %30 : !s8i, !cir.ptr<!s8i> loc(#loc199)
    cir.br ^bb10 loc(#loc49)
  ^bb9:  // pred: ^bb6
    %31 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc7)
    %32 = cir.cast(array_to_ptrdecay, %31 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc50)
    cir.br ^bb10 loc(#loc51)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc35)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc200)
  ^bb12:  // pred: ^bb11
    %33 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc188)
    cir.store %33, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc188)
    %34 = cir.get_global @strncat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc54)
    %35 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc55)
    %36 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc56)
    %37 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc57)
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc58)
    %39 = cir.call @strlen(%38) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc57)
    %40 = cir.call @strncat(%35, %36, %39) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc54)
    %41 = cir.const #cir.int<0> : !s32i loc(#loc59)
    %42 = cir.cast(integral, %41 : !s32i), !s8i loc(#loc59)
    %43 = cir.const #cir.int<50> : !s32i loc(#loc60)
    %44 = cir.const #cir.int<1> : !s32i loc(#loc61)
    %45 = cir.binop(sub, %43, %44) nsw : !s32i loc(#loc60)
    %46 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc62)
    %47 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %45 : !s32i), !cir.ptr<!s8i> loc(#loc62)
    cir.store %42, %47 : !s8i, !cir.ptr<!s8i> loc(#loc201)
    %48 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%48) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %49 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc65)
    %50 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc66)
    %51 = cir.cast(bitcast, %50 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc66)
    cir.call @free(%51) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc65)
    cir.br ^bb13 loc(#loc53)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc15)
  } loc(#loc187)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc203)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc69)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc204)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc71)
    cir.return loc(#loc68)
  } loc(#loc202)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc206)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc207)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc79)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc80)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc80)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc208)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc209)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc79)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc210)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc211)
    cir.br ^bb1 loc(#loc212)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc87)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc88)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc88)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc213)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc214)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc90)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc91)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc92)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc90)
    cir.br ^bb3 loc(#loc86)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc86)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc215)
  ^bb5:  // pred: ^bb4
    %16 = cir.const #cir.int<5> : !s32i loc(#loc95)
    cir.br ^bb6 loc(#loc93)
  ^bb6:  // pred: ^bb5
    cir.switch.flat %16 : !s32i, ^bb9 [
      6: ^bb8
    ] loc(#loc93)
  ^bb7:  // no predecessors
    cir.br ^bb8 loc(#loc96)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc97)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc97)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc98)
    cir.br ^bb10 loc(#loc99)
  ^bb9:  // pred: ^bb6
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc100)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc100)
    %21 = cir.const #cir.int<65> : !s32i loc(#loc101)
    %22 = cir.const #cir.int<50> : !s32i loc(#loc102)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc103)
    %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc102)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc102)
    cir.libc.memset %25 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc216)
    %26 = cir.const #cir.int<0> : !s32i loc(#loc106)
    %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc106)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc107)
    %29 = cir.const #cir.int<50> : !s32i loc(#loc108)
    %30 = cir.const #cir.int<1> : !s32i loc(#loc109)
    %31 = cir.binop(sub, %29, %30) nsw : !s32i loc(#loc108)
    %32 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %31 : !s32i), !cir.ptr<!s8i> loc(#loc110)
    cir.store %27, %32 : !s8i, !cir.ptr<!s8i> loc(#loc217)
    cir.br ^bb10 loc(#loc111)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc94)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc218)
  ^bb12:  // pred: ^bb11
    %33 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc206)
    cir.store %33, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc206)
    %34 = cir.get_global @strncat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc114)
    %35 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc115)
    %36 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc116)
    %37 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc117)
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc118)
    %39 = cir.call @strlen(%38) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc117)
    %40 = cir.call @strncat(%35, %36, %39) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc114)
    %41 = cir.const #cir.int<0> : !s32i loc(#loc119)
    %42 = cir.cast(integral, %41 : !s32i), !s8i loc(#loc119)
    %43 = cir.const #cir.int<50> : !s32i loc(#loc120)
    %44 = cir.const #cir.int<1> : !s32i loc(#loc121)
    %45 = cir.binop(sub, %43, %44) nsw : !s32i loc(#loc120)
    %46 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc122)
    %47 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %45 : !s32i), !cir.ptr<!s8i> loc(#loc122)
    cir.store %42, %47 : !s8i, !cir.ptr<!s8i> loc(#loc219)
    %48 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
    cir.call @printLine(%48) : (!cir.ptr<!s8i>) -> () loc(#loc124)
    %49 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc125)
    %50 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc126)
    %51 = cir.cast(bitcast, %50 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc126)
    cir.call @free(%51) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc125)
    cir.br ^bb13 loc(#loc113)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc74)
  } loc(#loc205)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc221)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc222)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc133)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc134)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc134)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc223)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc224)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc133)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc225)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc226)
    cir.br ^bb1 loc(#loc227)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc141)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc142)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc142)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc228)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc229)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc144)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc145)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc146)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc144)
    cir.br ^bb3 loc(#loc140)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc140)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc230)
  ^bb5:  // pred: ^bb4
    %16 = cir.const #cir.int<6> : !s32i loc(#loc149)
    cir.br ^bb6 loc(#loc147)
  ^bb6:  // pred: ^bb5
    cir.switch.flat %16 : !s32i, ^bb9 [
      6: ^bb8
    ] loc(#loc147)
  ^bb7:  // no predecessors
    cir.br ^bb8 loc(#loc150)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc151)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc151)
    %19 = cir.const #cir.int<65> : !s32i loc(#loc152)
    %20 = cir.const #cir.int<50> : !s32i loc(#loc153)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc154)
    %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc153)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc153)
    cir.libc.memset %23 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc231)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc157)
    %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc157)
    %26 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc158)
    %27 = cir.const #cir.int<50> : !s32i loc(#loc159)
    %28 = cir.const #cir.int<1> : !s32i loc(#loc160)
    %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc159)
    %30 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc161)
    cir.store %25, %30 : !s8i, !cir.ptr<!s8i> loc(#loc232)
    cir.br ^bb10 loc(#loc162)
  ^bb9:  // pred: ^bb6
    %31 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc163)
    %32 = cir.cast(array_to_ptrdecay, %31 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc163)
    cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc164)
    cir.br ^bb10 loc(#loc165)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc148)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc233)
  ^bb12:  // pred: ^bb11
    %33 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc221)
    cir.store %33, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc221)
    %34 = cir.get_global @strncat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc168)
    %35 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc169)
    %36 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc170)
    %37 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc171)
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc172)
    %39 = cir.call @strlen(%38) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc171)
    %40 = cir.call @strncat(%35, %36, %39) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc168)
    %41 = cir.const #cir.int<0> : !s32i loc(#loc173)
    %42 = cir.cast(integral, %41 : !s32i), !s8i loc(#loc173)
    %43 = cir.const #cir.int<50> : !s32i loc(#loc174)
    %44 = cir.const #cir.int<1> : !s32i loc(#loc175)
    %45 = cir.binop(sub, %43, %44) nsw : !s32i loc(#loc174)
    %46 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc176)
    %47 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %45 : !s32i), !cir.ptr<!s8i> loc(#loc176)
    cir.store %42, %47 : !s8i, !cir.ptr<!s8i> loc(#loc234)
    %48 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc177)
    cir.call @printLine(%48) : (!cir.ptr<!s8i>) -> () loc(#loc178)
    %49 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc179)
    %50 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc180)
    %51 = cir.cast(bitcast, %50 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc180)
    cir.call @free(%51) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc179)
    cir.br ^bb13 loc(#loc167)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc128)
  } loc(#loc220)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":37:19)
#loc8 = loc("/usr/include/string.h":152:1)
#loc9 = loc("/usr/include/string.h":153:29)
#loc10 = loc("/usr/include/string.h":407:1)
#loc11 = loc("/usr/include/string.h":408:33)
#loc12 = loc("/usr/include/stdlib.h":687:1)
#loc13 = loc("/usr/include/stdlib.h":687:32)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":23:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":48:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":41:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":41:25)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":25:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":25:12)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":26:20)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":26:27)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":26:31)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":26:42)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":26:43)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":26:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":27:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":27:33)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":27:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":27:17)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":27:23)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":27:24)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":27:30)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":27:29)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":28:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":39:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":28:12)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":30:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":32:16)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":32:22)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":32:27)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":32:31)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":32:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":32:32)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":33:23)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":33:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":33:14)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":33:18)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":33:19)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":34:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":37:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":38:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":40:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":47:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":43:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":43:17)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":43:23)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":43:29)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":43:36)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":44:22)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":44:14)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":44:17)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":44:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":45:19)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":45:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":46:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":46:14)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":110:1)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":114:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":112:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":112:14)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":113:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":113:14)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":55:1)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":80:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":73:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":73:25)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":57:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":57:12)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":58:20)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":58:27)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":58:31)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":58:42)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":58:43)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":58:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":59:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":59:33)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":59:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":59:17)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":59:23)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":59:24)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":59:30)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":59:29)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":60:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":71:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":60:12)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":62:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":64:19)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":64:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":65:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":68:16)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":68:22)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":68:27)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":68:30)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":68:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":68:31)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":69:22)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":69:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":69:14)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":69:17)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":69:18)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":70:9)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":72:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":79:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":75:9)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":75:17)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":75:23)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":75:29)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":75:36)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":76:22)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":76:14)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":76:17)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":76:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":77:19)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":77:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":78:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":78:14)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":83:1)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":108:1)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":101:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":101:25)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":85:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":85:12)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":86:20)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":86:27)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":86:31)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":86:42)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":86:43)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":86:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":87:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":87:33)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":87:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":87:17)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":87:23)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":87:24)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":87:30)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":87:29)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":88:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":99:5)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":88:12)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":90:5)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":92:16)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":92:22)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":92:27)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":92:30)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":92:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":92:31)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":93:22)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":93:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":93:14)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":93:17)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":93:18)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":94:9)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":97:19)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":97:9)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":98:9)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":100:5)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":107:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":103:9)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":103:17)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":103:23)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":103:29)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":103:36)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":104:22)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":104:14)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":104:17)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":104:9)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":105:19)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":105:9)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":106:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c":106:14)
#loc181 = loc(fused[#loc1, #loc2])
#loc182 = loc(fused[#loc3, #loc4])
#loc183 = loc(fused[#loc5, #loc6])
#loc184 = loc(fused[#loc8, #loc9])
#loc185 = loc(fused[#loc10, #loc11])
#loc186 = loc(fused[#loc12, #loc13])
#loc187 = loc(fused[#loc14, #loc15])
#loc188 = loc(fused[#loc16, #loc17])
#loc189 = loc(fused[#loc18, #loc19])
#loc190 = loc(fused[#loc22, #loc23])
#loc191 = loc(fused[#loc21, #loc23])
#loc192 = loc(fused[#loc20, #loc24])
#loc193 = loc(fused[#loc25, #loc24])
#loc194 = loc(fused[#loc26, #loc27])
#loc195 = loc(fused[#loc28, #loc29])
#loc196 = loc(fused[#loc30, #loc27])
#loc197 = loc(fused[#loc34, #loc35])
#loc198 = loc(fused[#loc42, #loc43])
#loc199 = loc(fused[#loc45, #loc44])
#loc200 = loc(fused[#loc52, #loc53])
#loc201 = loc(fused[#loc62, #loc59])
#loc202 = loc(fused[#loc67, #loc68])
#loc203 = loc(fused[#loc69, #loc70])
#loc204 = loc(fused[#loc71, #loc72])
#loc205 = loc(fused[#loc73, #loc74])
#loc206 = loc(fused[#loc75, #loc76])
#loc207 = loc(fused[#loc77, #loc78])
#loc208 = loc(fused[#loc81, #loc82])
#loc209 = loc(fused[#loc80, #loc82])
#loc210 = loc(fused[#loc79, #loc83])
#loc211 = loc(fused[#loc84, #loc83])
#loc212 = loc(fused[#loc85, #loc86])
#loc213 = loc(fused[#loc87, #loc88])
#loc214 = loc(fused[#loc89, #loc86])
#loc215 = loc(fused[#loc93, #loc94])
#loc216 = loc(fused[#loc104, #loc105])
#loc217 = loc(fused[#loc107, #loc106])
#loc218 = loc(fused[#loc112, #loc113])
#loc219 = loc(fused[#loc122, #loc119])
#loc220 = loc(fused[#loc127, #loc128])
#loc221 = loc(fused[#loc129, #loc130])
#loc222 = loc(fused[#loc131, #loc132])
#loc223 = loc(fused[#loc135, #loc136])
#loc224 = loc(fused[#loc134, #loc136])
#loc225 = loc(fused[#loc133, #loc137])
#loc226 = loc(fused[#loc138, #loc137])
#loc227 = loc(fused[#loc139, #loc140])
#loc228 = loc(fused[#loc141, #loc142])
#loc229 = loc(fused[#loc143, #loc140])
#loc230 = loc(fused[#loc147, #loc148])
#loc231 = loc(fused[#loc155, #loc156])
#loc232 = loc(fused[#loc158, #loc157])
#loc233 = loc(fused[#loc166, #loc167])
#loc234 = loc(fused[#loc176, #loc173])
