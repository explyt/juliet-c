!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc204 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":386:10)
#loc205 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":386:14)
#loc206 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":386:20)
#loc207 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":386:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc619 = loc(fused[#loc204, #loc205])
#loc620 = loc(fused[#loc206, #loc207])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_listen_socket_square_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc542)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc543)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc544)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc545)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc546)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc547)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc548)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc549)
  cir.func private @close(!s32i) -> !s32i loc(#loc550)
  cir.func private @printIntLine(!s32i) loc(#loc551)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc21)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc552)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc24)
  cir.func no_proto @CWE190_Integer_Overflow__int_listen_socket_square_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc554)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc29)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc555)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc557)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc557)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc33)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc33)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc560)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc561)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc562)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc563)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc564)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc45)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc45)
          cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc562)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc47)
          %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc47)
          cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc563)
          cir.scope {
            cir.do {
              %15 = cir.const #cir.int<2> : !s32i loc(#loc52)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc53)
              %17 = cir.const #cir.int<6> : !s32i loc(#loc54)
              %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc55)
              cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc566)
              cir.scope {
                %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc60)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc61)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc61)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc568)
                cir.if %63 {
                  cir.break loc(#loc63)
                } loc(#loc569)
              } loc(#loc567)
              %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc570)
              %20 = cir.const #cir.int<0> : !s32i loc(#loc66)
              %21 = cir.const #cir.int<16> : !u64i loc(#loc571)
              cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc572)
              %22 = cir.const #cir.int<2> : !s32i loc(#loc71)
              %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc71)
              %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
              cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc573)
              %25 = cir.const #cir.int<0> : !s32i loc(#loc74)
              %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc74)
              %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc75)
              %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc76)
              cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc574)
              %29 = cir.const #cir.int<27015> : !s32i loc(#loc78)
              %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc78)
              %31 = cir.call @htons(%30) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc79)
              %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
              cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc575)
              cir.scope {
                %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc85)
                %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc577)
                %62 = cir.const #cir.int<16> : !u64i loc(#loc578)
                %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc578)
                %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc90)
                %65 = cir.const #cir.int<1> : !s32i loc(#loc91)
                %66 = cir.unary(minus, %65) : !s32i, !s32i loc(#loc91)
                %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc579)
                cir.if %67 {
                  cir.break loc(#loc93)
                } loc(#loc580)
              } loc(#loc576)
              cir.scope {
                %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc96)
                %61 = cir.const #cir.int<5> : !s32i loc(#loc97)
                %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc98)
                %63 = cir.const #cir.int<1> : !s32i loc(#loc99)
                %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc99)
                %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc582)
                cir.if %65 {
                  cir.break loc(#loc101)
                } loc(#loc583)
              } loc(#loc581)
              %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc102)
              %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc103)
              %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc104)
              %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc105)
              cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc584)
              cir.scope {
                %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc110)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc111)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc111)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc586)
                cir.if %63 {
                  cir.break loc(#loc113)
                } loc(#loc587)
              } loc(#loc585)
              %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc114)
              %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc115)
              %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc115)
              %40 = cir.const #cir.int<3> : !s32i loc(#loc116)
              %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc116)
              %42 = cir.const #cir.int<4> : !u64i loc(#loc116)
              %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc116)
              %44 = cir.const #cir.int<2> : !s32i loc(#loc116)
              %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc116)
              %46 = cir.binop(add, %43, %45) : !u64i loc(#loc116)
              %47 = cir.const #cir.int<1> : !s32i loc(#loc117)
              %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc117)
              %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc588)
              %50 = cir.const #cir.int<0> : !s32i loc(#loc118)
              %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc119)
              %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc119)
              cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc589)
              cir.scope {
                %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc124)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc125)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc125)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc591)
                %64 = cir.ternary(%63, true {
                  %65 = cir.const #true loc(#loc126)
                  cir.yield %65 : !cir.bool loc(#loc126)
                }, false {
                  %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc127)
                  %66 = cir.const #cir.int<0> : !s32i loc(#loc128)
                  %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc592)
                  %68 = cir.ternary(%67, true {
                    %69 = cir.const #true loc(#loc126)
                    cir.yield %69 : !cir.bool loc(#loc126)
                  }, false {
                    %69 = cir.const #false loc(#loc126)
                    cir.yield %69 : !cir.bool loc(#loc126)
                  }) : (!cir.bool) -> !cir.bool loc(#loc126)
                  cir.yield %68 : !cir.bool loc(#loc126)
                }) : (!cir.bool) -> !cir.bool loc(#loc126)
                cir.if %64 {
                  cir.break loc(#loc130)
                } loc(#loc593)
              } loc(#loc590)
              %53 = cir.const #cir.int<0> : !s32i loc(#loc131)
              %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc131)
              %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc132)
              %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc133)
              %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc133)
              cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc594)
              %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc134)
              %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc135)
              cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc595)
              cir.yield loc(#loc51)
            } while {
              %15 = cir.const #cir.int<0> : !s32i loc(#loc138)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc138)
              cir.condition(%16) loc(#loc138)
            } loc(#loc565)
          } loc(#loc565)
          cir.scope {
            %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc141)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc142)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc142)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc597)
            cir.if %18 {
              %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc144)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc145)
            } loc(#loc598)
          } loc(#loc596)
          cir.scope {
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc148)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc149)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc149)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc600)
            cir.if %18 {
              %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc151)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc152)
            } loc(#loc601)
          } loc(#loc599)
        } loc(#loc559)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc153)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc602)
      } loc(#loc558)
    } loc(#loc556)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc604)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc604)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc157)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc157)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc607)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc166)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc165)
          %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc166)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc607)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc167)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc168)
        } loc(#loc606)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc171)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc172)
          %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc172)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc172)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc172)
          %11 = cir.cmp(gt, %6, %10) : !s32i, !cir.bool loc(#loc609)
          %12 = cir.ternary(%11, true {
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc174)
            %14 = cir.abs %13 poison : !s32i loc(#loc175)
            %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc175)
            %16 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc176)
            %17 = cir.const #cir.int<2147483647> : !s32i loc(#loc177)
            %18 = cir.cast(int_to_float, %17 : !s32i), !cir.double loc(#loc177)
            %19 = cir.call @sqrt(%18) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc176)
            %20 = cir.cast(float_to_int, %19 : !cir.double), !s64i loc(#loc176)
            %21 = cir.cmp(lt, %15, %20) : !s64i, !cir.bool loc(#loc610)
            %22 = cir.ternary(%21, true {
              %23 = cir.const #true loc(#loc173)
              cir.yield %23 : !cir.bool loc(#loc173)
            }, false {
              %23 = cir.const #false loc(#loc173)
              cir.yield %23 : !cir.bool loc(#loc173)
            }) : (!cir.bool) -> !cir.bool loc(#loc173)
            cir.yield %22 : !cir.bool loc(#loc173)
          }, false {
            %13 = cir.const #false loc(#loc173)
            cir.yield %13 : !cir.bool loc(#loc173)
          }) : (!cir.bool) -> !cir.bool loc(#loc173)
          cir.if %12 {
            %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc612)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc184)
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc183)
            %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc184)
            cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc612)
            %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc185)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc186)
          } else {
            %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc24)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc24)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc187)
          } loc(#loc611)
        } loc(#loc608)
      } loc(#loc605)
    } loc(#loc603)
    cir.return loc(#loc26)
  } loc(#loc553)
  cir.func no_proto @CWE190_Integer_Overflow__int_listen_socket_square_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc614)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc190)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc615)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc192)
    cir.return loc(#loc189)
  } loc(#loc613)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc616)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc617)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc198)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc199)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc200)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc201)
  cir.func @main(%arg0: !s32i loc(fused[#loc204, #loc205]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc206, #loc207])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc619)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc620)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc203)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc208)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc208)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc209)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc210)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc210)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc211)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc198)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc198)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc212)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_listen_socket_square_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc621)
    cir.call @CWE190_Integer_Overflow__int_listen_socket_square_12_good() : () -> () loc(#loc213)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc199)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc199)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc215)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc200)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc200)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc216)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_listen_socket_square_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc622)
    cir.call @CWE190_Integer_Overflow__int_listen_socket_square_12_bad() : () -> () loc(#loc217)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc201)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc201)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc219)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc220)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc623)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc623)
    cir.return %17 : !s32i loc(#loc623)
  } loc(#loc618)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc625)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc226)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc626)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc628)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc628)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc230)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc230)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc631)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc632)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc633)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc634)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc635)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc242)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc242)
          cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc633)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc244)
          %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc244)
          cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc634)
          cir.scope {
            cir.do {
              %15 = cir.const #cir.int<2> : !s32i loc(#loc249)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc250)
              %17 = cir.const #cir.int<6> : !s32i loc(#loc251)
              %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc252)
              cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc637)
              cir.scope {
                %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc257)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc258)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc258)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc639)
                cir.if %63 {
                  cir.break loc(#loc260)
                } loc(#loc640)
              } loc(#loc638)
              %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc641)
              %20 = cir.const #cir.int<0> : !s32i loc(#loc263)
              %21 = cir.const #cir.int<16> : !u64i loc(#loc642)
              cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc643)
              %22 = cir.const #cir.int<2> : !s32i loc(#loc268)
              %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc268)
              %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
              cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc644)
              %25 = cir.const #cir.int<0> : !s32i loc(#loc270)
              %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc270)
              %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc75)
              %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc76)
              cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc645)
              %29 = cir.const #cir.int<27015> : !s32i loc(#loc272)
              %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc272)
              %31 = cir.call @htons(%30) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc273)
              %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
              cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc646)
              cir.scope {
                %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc278)
                %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc648)
                %62 = cir.const #cir.int<16> : !u64i loc(#loc649)
                %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc649)
                %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc283)
                %65 = cir.const #cir.int<1> : !s32i loc(#loc284)
                %66 = cir.unary(minus, %65) : !s32i, !s32i loc(#loc284)
                %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc650)
                cir.if %67 {
                  cir.break loc(#loc286)
                } loc(#loc651)
              } loc(#loc647)
              cir.scope {
                %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc289)
                %61 = cir.const #cir.int<5> : !s32i loc(#loc290)
                %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc291)
                %63 = cir.const #cir.int<1> : !s32i loc(#loc292)
                %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc292)
                %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc653)
                cir.if %65 {
                  cir.break loc(#loc294)
                } loc(#loc654)
              } loc(#loc652)
              %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc295)
              %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc296)
              %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc297)
              %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc298)
              cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc655)
              cir.scope {
                %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc303)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc304)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc304)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc657)
                cir.if %63 {
                  cir.break loc(#loc306)
                } loc(#loc658)
              } loc(#loc656)
              %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc307)
              %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc308)
              %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc308)
              %40 = cir.const #cir.int<3> : !s32i loc(#loc309)
              %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc309)
              %42 = cir.const #cir.int<4> : !u64i loc(#loc309)
              %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc309)
              %44 = cir.const #cir.int<2> : !s32i loc(#loc309)
              %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc309)
              %46 = cir.binop(add, %43, %45) : !u64i loc(#loc309)
              %47 = cir.const #cir.int<1> : !s32i loc(#loc310)
              %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc310)
              %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc659)
              %50 = cir.const #cir.int<0> : !s32i loc(#loc311)
              %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc312)
              %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc312)
              cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc660)
              cir.scope {
                %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc317)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc318)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc318)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc662)
                %64 = cir.ternary(%63, true {
                  %65 = cir.const #true loc(#loc319)
                  cir.yield %65 : !cir.bool loc(#loc319)
                }, false {
                  %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc320)
                  %66 = cir.const #cir.int<0> : !s32i loc(#loc321)
                  %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc663)
                  %68 = cir.ternary(%67, true {
                    %69 = cir.const #true loc(#loc319)
                    cir.yield %69 : !cir.bool loc(#loc319)
                  }, false {
                    %69 = cir.const #false loc(#loc319)
                    cir.yield %69 : !cir.bool loc(#loc319)
                  }) : (!cir.bool) -> !cir.bool loc(#loc319)
                  cir.yield %68 : !cir.bool loc(#loc319)
                }) : (!cir.bool) -> !cir.bool loc(#loc319)
                cir.if %64 {
                  cir.break loc(#loc323)
                } loc(#loc664)
              } loc(#loc661)
              %53 = cir.const #cir.int<0> : !s32i loc(#loc324)
              %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc324)
              %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc325)
              %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc326)
              %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc326)
              cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc665)
              %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc327)
              %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc328)
              cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc666)
              cir.yield loc(#loc248)
            } while {
              %15 = cir.const #cir.int<0> : !s32i loc(#loc331)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc331)
              cir.condition(%16) loc(#loc331)
            } loc(#loc636)
          } loc(#loc636)
          cir.scope {
            %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc334)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc335)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc335)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc668)
            cir.if %18 {
              %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc337)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc338)
            } loc(#loc669)
          } loc(#loc667)
          cir.scope {
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc341)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc342)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc342)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc671)
            cir.if %18 {
              %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc344)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc345)
            } loc(#loc672)
          } loc(#loc670)
        } loc(#loc630)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc674)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc675)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc676)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc677)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc678)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc353)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc353)
          cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc676)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc355)
          %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc355)
          cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc677)
          cir.scope {
            cir.do {
              %15 = cir.const #cir.int<2> : !s32i loc(#loc360)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc361)
              %17 = cir.const #cir.int<6> : !s32i loc(#loc362)
              %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc363)
              cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc680)
              cir.scope {
                %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc368)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc369)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc369)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc682)
                cir.if %63 {
                  cir.break loc(#loc371)
                } loc(#loc683)
              } loc(#loc681)
              %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc684)
              %20 = cir.const #cir.int<0> : !s32i loc(#loc374)
              %21 = cir.const #cir.int<16> : !u64i loc(#loc685)
              cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc686)
              %22 = cir.const #cir.int<2> : !s32i loc(#loc379)
              %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc379)
              %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
              cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc687)
              %25 = cir.const #cir.int<0> : !s32i loc(#loc381)
              %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc381)
              %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc75)
              %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc76)
              cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc688)
              %29 = cir.const #cir.int<27015> : !s32i loc(#loc383)
              %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc383)
              %31 = cir.call @htons(%30) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc384)
              %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
              cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc689)
              cir.scope {
                %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc389)
                %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc691)
                %62 = cir.const #cir.int<16> : !u64i loc(#loc692)
                %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc692)
                %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc394)
                %65 = cir.const #cir.int<1> : !s32i loc(#loc395)
                %66 = cir.unary(minus, %65) : !s32i, !s32i loc(#loc395)
                %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc693)
                cir.if %67 {
                  cir.break loc(#loc397)
                } loc(#loc694)
              } loc(#loc690)
              cir.scope {
                %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc400)
                %61 = cir.const #cir.int<5> : !s32i loc(#loc401)
                %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc402)
                %63 = cir.const #cir.int<1> : !s32i loc(#loc403)
                %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc403)
                %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc696)
                cir.if %65 {
                  cir.break loc(#loc405)
                } loc(#loc697)
              } loc(#loc695)
              %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc406)
              %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc407)
              %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc408)
              %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc409)
              cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc698)
              cir.scope {
                %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc414)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc415)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc415)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc700)
                cir.if %63 {
                  cir.break loc(#loc417)
                } loc(#loc701)
              } loc(#loc699)
              %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc418)
              %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc419)
              %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc419)
              %40 = cir.const #cir.int<3> : !s32i loc(#loc420)
              %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc420)
              %42 = cir.const #cir.int<4> : !u64i loc(#loc420)
              %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc420)
              %44 = cir.const #cir.int<2> : !s32i loc(#loc420)
              %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc420)
              %46 = cir.binop(add, %43, %45) : !u64i loc(#loc420)
              %47 = cir.const #cir.int<1> : !s32i loc(#loc421)
              %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc421)
              %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc702)
              %50 = cir.const #cir.int<0> : !s32i loc(#loc422)
              %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc423)
              %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc423)
              cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc703)
              cir.scope {
                %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc428)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc429)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc429)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc705)
                %64 = cir.ternary(%63, true {
                  %65 = cir.const #true loc(#loc430)
                  cir.yield %65 : !cir.bool loc(#loc430)
                }, false {
                  %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc431)
                  %66 = cir.const #cir.int<0> : !s32i loc(#loc432)
                  %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc706)
                  %68 = cir.ternary(%67, true {
                    %69 = cir.const #true loc(#loc430)
                    cir.yield %69 : !cir.bool loc(#loc430)
                  }, false {
                    %69 = cir.const #false loc(#loc430)
                    cir.yield %69 : !cir.bool loc(#loc430)
                  }) : (!cir.bool) -> !cir.bool loc(#loc430)
                  cir.yield %68 : !cir.bool loc(#loc430)
                }) : (!cir.bool) -> !cir.bool loc(#loc430)
                cir.if %64 {
                  cir.break loc(#loc434)
                } loc(#loc707)
              } loc(#loc704)
              %53 = cir.const #cir.int<0> : !s32i loc(#loc435)
              %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc435)
              %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc436)
              %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc437)
              %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc437)
              cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc708)
              %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc438)
              %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc439)
              cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc709)
              cir.yield loc(#loc359)
            } while {
              %15 = cir.const #cir.int<0> : !s32i loc(#loc442)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc442)
              cir.condition(%16) loc(#loc442)
            } loc(#loc679)
          } loc(#loc679)
          cir.scope {
            %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc445)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc446)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc446)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc711)
            cir.if %18 {
              %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc448)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc449)
            } loc(#loc712)
          } loc(#loc710)
          cir.scope {
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc452)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc453)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc453)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc714)
            cir.if %18 {
              %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc455)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc456)
            } loc(#loc715)
          } loc(#loc713)
        } loc(#loc673)
      } loc(#loc629)
    } loc(#loc627)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc717)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc717)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc459)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc459)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc466)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc467)
          %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc467)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc467)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc467)
          %11 = cir.cmp(gt, %6, %10) : !s32i, !cir.bool loc(#loc720)
          %12 = cir.ternary(%11, true {
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc469)
            %14 = cir.abs %13 poison : !s32i loc(#loc470)
            %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc470)
            %16 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc471)
            %17 = cir.const #cir.int<2147483647> : !s32i loc(#loc472)
            %18 = cir.cast(int_to_float, %17 : !s32i), !cir.double loc(#loc472)
            %19 = cir.call @sqrt(%18) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc471)
            %20 = cir.cast(float_to_int, %19 : !cir.double), !s64i loc(#loc471)
            %21 = cir.cmp(lt, %15, %20) : !s64i, !cir.bool loc(#loc721)
            %22 = cir.ternary(%21, true {
              %23 = cir.const #true loc(#loc468)
              cir.yield %23 : !cir.bool loc(#loc468)
            }, false {
              %23 = cir.const #false loc(#loc468)
              cir.yield %23 : !cir.bool loc(#loc468)
            }) : (!cir.bool) -> !cir.bool loc(#loc468)
            cir.yield %22 : !cir.bool loc(#loc468)
          }, false {
            %13 = cir.const #false loc(#loc468)
            cir.yield %13 : !cir.bool loc(#loc468)
          }) : (!cir.bool) -> !cir.bool loc(#loc468)
          cir.if %12 {
            %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc723)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc479)
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc478)
            %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc479)
            cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc723)
            %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc480)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc481)
          } else {
            %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc482)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc482)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc483)
          } loc(#loc722)
        } loc(#loc719)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc486)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc487)
          %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc487)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc487)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc487)
          %11 = cir.cmp(gt, %6, %10) : !s32i, !cir.bool loc(#loc725)
          %12 = cir.ternary(%11, true {
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc489)
            %14 = cir.abs %13 poison : !s32i loc(#loc490)
            %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc490)
            %16 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc491)
            %17 = cir.const #cir.int<2147483647> : !s32i loc(#loc492)
            %18 = cir.cast(int_to_float, %17 : !s32i), !cir.double loc(#loc492)
            %19 = cir.call @sqrt(%18) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc491)
            %20 = cir.cast(float_to_int, %19 : !cir.double), !s64i loc(#loc491)
            %21 = cir.cmp(lt, %15, %20) : !s64i, !cir.bool loc(#loc726)
            %22 = cir.ternary(%21, true {
              %23 = cir.const #true loc(#loc488)
              cir.yield %23 : !cir.bool loc(#loc488)
            }, false {
              %23 = cir.const #false loc(#loc488)
              cir.yield %23 : !cir.bool loc(#loc488)
            }) : (!cir.bool) -> !cir.bool loc(#loc488)
            cir.yield %22 : !cir.bool loc(#loc488)
          }, false {
            %13 = cir.const #false loc(#loc488)
            cir.yield %13 : !cir.bool loc(#loc488)
          }) : (!cir.bool) -> !cir.bool loc(#loc488)
          cir.if %12 {
            %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc728)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc499)
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc498)
            %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc499)
            cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc728)
            %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc500)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc501)
          } else {
            %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc502)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc502)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc503)
          } loc(#loc727)
        } loc(#loc724)
      } loc(#loc718)
    } loc(#loc716)
    cir.return loc(#loc223)
  } loc(#loc624)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc730)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc508)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc731)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc733)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc733)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc512)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc512)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc517)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc735)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc519)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc736)
      } loc(#loc734)
    } loc(#loc732)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc738)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc738)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc523)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc523)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc741)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc532)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc531)
          %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc532)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc741)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc533)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc534)
        } loc(#loc740)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc743)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc539)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc538)
          %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc539)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc743)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc540)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc541)
        } loc(#loc742)
      } loc(#loc739)
    } loc(#loc737)
    cir.return loc(#loc505)
  } loc(#loc729)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_listen_socket_square_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/sys/socket.h":102:1)
#loc4 = loc("/usr/include/sys/socket.h":102:62)
#loc5 = loc("/usr/include/netinet/in.h":404:1)
#loc6 = loc("/usr/include/netinet/in.h":405:40)
#loc7 = loc("/usr/include/sys/socket.h":112:1)
#loc8 = loc("/usr/include/sys/socket.h":113:6)
#loc9 = loc("/usr/include/sys/socket.h":296:1)
#loc10 = loc("/usr/include/sys/socket.h":296:39)
#loc11 = loc("/usr/include/sys/socket.h":306:1)
#loc12 = loc("/usr/include/sys/socket.h":307:38)
#loc13 = loc("/usr/include/sys/socket.h":145:1)
#loc14 = loc("/usr/include/sys/socket.h":145:68)
#loc15 = loc("/usr/include/stdlib.h":105:1)
#loc16 = loc("/usr/include/stdlib.h":106:33)
#loc17 = loc("/usr/include/unistd.h":358:1)
#loc18 = loc("/usr/include/unistd.h":358:27)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc21 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":146:23)
#loc25 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":46:1)
#loc26 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":149:1)
#loc27 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":48:5)
#loc28 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":48:9)
#loc29 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":50:12)
#loc30 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":50:5)
#loc31 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":51:5)
#loc32 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":127:5)
#loc33 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":51:8)
#loc34 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":51:33)
#loc35 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":52:5)
#loc36 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":122:5)
#loc37 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":124:5)
#loc38 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":53:9)
#loc39 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":121:9)
#loc40 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":58:13)
#loc41 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":58:17)
#loc42 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":59:13)
#loc43 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":59:32)
#loc44 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":60:13)
#loc45 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":60:35)
#loc46 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":61:13)
#loc47 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":61:35)
#loc48 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":62:13)
#loc49 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":62:45)
#loc50 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":63:13)
#loc51 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":106:21)
#loc52 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":73:39)
#loc53 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":73:48)
#loc54 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":73:61)
#loc55 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":73:32)
#loc56 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":73:17)
#loc57 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":73:72)
#loc58 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":74:17)
#loc59 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":77:17)
#loc60 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":74:21)
#loc61 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":74:37)
#loc62 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":75:17)
#loc63 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":76:21)
#loc64 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":78:24)
#loc65 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":78:25)
#loc66 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":78:34)
#loc67 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":78:37)
#loc68 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":78:51)
#loc69 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":78:17)
#loc70 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":78:52)
#loc71 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":79:38)
#loc72 = loc("/usr/include/netinet/in.h":249:5)
#loc73 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":79:17)
#loc74 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":80:43)
#loc75 = loc("/usr/include/netinet/in.h":251:20)
#loc76 = loc("/usr/include/netinet/in.h":33:15)
#loc77 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":80:17)
#loc78 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":81:42)
#loc79 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":81:36)
#loc80 = loc("/usr/include/netinet/in.h":250:15)
#loc81 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":81:17)
#loc82 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":81:50)
#loc83 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":82:17)
#loc84 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":85:17)
#loc85 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":82:26)
#loc86 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":82:58)
#loc87 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":82:59)
#loc88 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":82:68)
#loc89 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":82:82)
#loc90 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":82:21)
#loc91 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":82:88)
#loc92 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":83:17)
#loc93 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":84:21)
#loc94 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":86:17)
#loc95 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":89:17)
#loc96 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":86:28)
#loc97 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":86:42)
#loc98 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":86:21)
#loc99 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":86:61)
#loc100 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":87:17)
#loc101 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":88:21)
#loc102 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":90:39)
#loc103 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":90:53)
#loc104 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":90:59)
#loc105 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":90:32)
#loc106 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":90:17)
#loc107 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":90:63)
#loc108 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":91:17)
#loc109 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":94:17)
#loc110 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":91:21)
#loc111 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":91:37)
#loc112 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":92:17)
#loc113 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":93:21)
#loc114 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":96:35)
#loc115 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":96:49)
#loc116 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":96:62)
#loc117 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":96:80)
#loc118 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":96:83)
#loc119 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":96:30)
#loc120 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":96:17)
#loc121 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":96:84)
#loc122 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":97:17)
#loc123 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":100:17)
#loc124 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":97:21)
#loc125 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":97:35)
#loc126 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":97:48)
#loc127 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":97:51)
#loc128 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":97:65)
#loc129 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":98:17)
#loc130 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":99:21)
#loc131 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":102:43)
#loc132 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":102:29)
#loc133 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":102:17)
#loc134 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":104:29)
#loc135 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":104:24)
#loc136 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":104:17)
#loc137 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":104:40)
#loc138 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":106:20)
#loc139 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":107:13)
#loc140 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":110:13)
#loc141 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":107:17)
#loc142 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":107:33)
#loc143 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":108:13)
#loc144 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":109:30)
#loc145 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":109:17)
#loc146 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":111:13)
#loc147 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":114:13)
#loc148 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":111:17)
#loc149 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":111:33)
#loc150 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":112:13)
#loc151 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":113:30)
#loc152 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":113:17)
#loc153 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":126:16)
#loc154 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":126:9)
#loc155 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":128:5)
#loc156 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":148:5)
#loc157 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":128:8)
#loc158 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":128:33)
#loc159 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":129:5)
#loc160 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":135:5)
#loc161 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":137:5)
#loc162 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":130:9)
#loc163 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":134:9)
#loc164 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":132:13)
#loc165 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":132:33)
#loc166 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":132:26)
#loc167 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":133:26)
#loc168 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":133:13)
#loc169 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":139:9)
#loc170 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":147:9)
#loc171 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":139:13)
#loc172 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":139:20)
#loc173 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":139:28)
#loc174 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":139:35)
#loc175 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":139:31)
#loc176 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":139:49)
#loc177 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":139:62)
#loc178 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":139:69)
#loc179 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":140:9)
#loc180 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":143:9)
#loc181 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":145:9)
#loc182 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":141:13)
#loc183 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":141:33)
#loc184 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":141:26)
#loc185 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":142:26)
#loc186 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":142:13)
#loc187 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":146:13)
#loc188 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":371:1)
#loc189 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":375:1)
#loc190 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":373:5)
#loc191 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":373:13)
#loc192 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":374:5)
#loc193 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":374:13)
#loc194 = loc("/usr/include/stdlib.h":575:1)
#loc195 = loc("/usr/include/stdlib.h":575:41)
#loc196 = loc("/usr/include/time.h":76:1)
#loc197 = loc("/usr/include/time.h":76:38)
#loc198 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":391:15)
#loc199 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":393:15)
#loc200 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":396:15)
#loc201 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":398:15)
#loc202 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":386:1)
#loc203 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":401:1)
#loc208 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":387:1)
#loc209 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":389:27)
#loc210 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":389:22)
#loc211 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":389:5)
#loc212 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":391:5)
#loc213 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":392:5)
#loc214 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":392:63)
#loc215 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":393:5)
#loc216 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":396:5)
#loc217 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":397:5)
#loc218 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":397:62)
#loc219 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":398:5)
#loc220 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":400:12)
#loc221 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":400:5)
#loc222 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":158:1)
#loc223 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":333:1)
#loc224 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":160:5)
#loc225 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":160:9)
#loc226 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":162:12)
#loc227 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":162:5)
#loc228 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":163:5)
#loc229 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":306:5)
#loc230 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":163:8)
#loc231 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":163:33)
#loc232 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":164:5)
#loc233 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":234:5)
#loc234 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":236:5)
#loc235 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":165:9)
#loc236 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":233:9)
#loc237 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":170:13)
#loc238 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":170:17)
#loc239 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":171:13)
#loc240 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":171:32)
#loc241 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":172:13)
#loc242 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":172:35)
#loc243 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":173:13)
#loc244 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":173:35)
#loc245 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":174:13)
#loc246 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":174:45)
#loc247 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":175:13)
#loc248 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":218:21)
#loc249 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":185:39)
#loc250 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":185:48)
#loc251 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":185:61)
#loc252 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":185:32)
#loc253 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":185:17)
#loc254 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":185:72)
#loc255 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":186:17)
#loc256 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":189:17)
#loc257 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":186:21)
#loc258 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":186:37)
#loc259 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":187:17)
#loc260 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":188:21)
#loc261 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":190:24)
#loc262 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":190:25)
#loc263 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":190:34)
#loc264 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":190:37)
#loc265 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":190:51)
#loc266 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":190:17)
#loc267 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":190:52)
#loc268 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":191:38)
#loc269 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":191:17)
#loc270 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":192:43)
#loc271 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":192:17)
#loc272 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":193:42)
#loc273 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":193:36)
#loc274 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":193:17)
#loc275 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":193:50)
#loc276 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":194:17)
#loc277 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":197:17)
#loc278 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":194:26)
#loc279 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":194:58)
#loc280 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":194:59)
#loc281 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":194:68)
#loc282 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":194:82)
#loc283 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":194:21)
#loc284 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":194:88)
#loc285 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":195:17)
#loc286 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":196:21)
#loc287 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":198:17)
#loc288 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":201:17)
#loc289 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":198:28)
#loc290 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":198:42)
#loc291 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":198:21)
#loc292 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":198:61)
#loc293 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":199:17)
#loc294 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":200:21)
#loc295 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":202:39)
#loc296 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":202:53)
#loc297 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":202:59)
#loc298 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":202:32)
#loc299 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":202:17)
#loc300 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":202:63)
#loc301 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":203:17)
#loc302 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":206:17)
#loc303 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":203:21)
#loc304 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":203:37)
#loc305 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":204:17)
#loc306 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":205:21)
#loc307 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":208:35)
#loc308 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":208:49)
#loc309 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":208:62)
#loc310 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":208:80)
#loc311 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":208:83)
#loc312 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":208:30)
#loc313 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":208:17)
#loc314 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":208:84)
#loc315 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":209:17)
#loc316 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":212:17)
#loc317 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":209:21)
#loc318 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":209:35)
#loc319 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":209:48)
#loc320 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":209:51)
#loc321 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":209:65)
#loc322 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":210:17)
#loc323 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":211:21)
#loc324 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":214:43)
#loc325 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":214:29)
#loc326 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":214:17)
#loc327 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":216:29)
#loc328 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":216:24)
#loc329 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":216:17)
#loc330 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":216:40)
#loc331 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":218:20)
#loc332 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":219:13)
#loc333 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":222:13)
#loc334 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":219:17)
#loc335 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":219:33)
#loc336 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":220:13)
#loc337 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":221:30)
#loc338 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":221:17)
#loc339 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":223:13)
#loc340 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":226:13)
#loc341 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":223:17)
#loc342 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":223:33)
#loc343 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":224:13)
#loc344 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":225:30)
#loc345 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":225:17)
#loc346 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":237:9)
#loc347 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":305:9)
#loc348 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":242:13)
#loc349 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":242:17)
#loc350 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":243:13)
#loc351 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":243:32)
#loc352 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":244:13)
#loc353 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":244:35)
#loc354 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":245:13)
#loc355 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":245:35)
#loc356 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":246:13)
#loc357 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":246:45)
#loc358 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":247:13)
#loc359 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":290:21)
#loc360 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":257:39)
#loc361 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":257:48)
#loc362 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":257:61)
#loc363 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":257:32)
#loc364 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":257:17)
#loc365 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":257:72)
#loc366 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":258:17)
#loc367 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":261:17)
#loc368 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":258:21)
#loc369 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":258:37)
#loc370 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":259:17)
#loc371 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":260:21)
#loc372 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":262:24)
#loc373 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":262:25)
#loc374 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":262:34)
#loc375 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":262:37)
#loc376 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":262:51)
#loc377 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":262:17)
#loc378 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":262:52)
#loc379 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":263:38)
#loc380 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":263:17)
#loc381 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":264:43)
#loc382 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":264:17)
#loc383 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":265:42)
#loc384 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":265:36)
#loc385 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":265:17)
#loc386 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":265:50)
#loc387 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":266:17)
#loc388 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":269:17)
#loc389 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":266:26)
#loc390 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":266:58)
#loc391 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":266:59)
#loc392 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":266:68)
#loc393 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":266:82)
#loc394 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":266:21)
#loc395 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":266:88)
#loc396 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":267:17)
#loc397 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":268:21)
#loc398 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":270:17)
#loc399 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":273:17)
#loc400 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":270:28)
#loc401 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":270:42)
#loc402 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":270:21)
#loc403 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":270:61)
#loc404 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":271:17)
#loc405 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":272:21)
#loc406 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":274:39)
#loc407 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":274:53)
#loc408 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":274:59)
#loc409 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":274:32)
#loc410 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":274:17)
#loc411 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":274:63)
#loc412 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":275:17)
#loc413 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":278:17)
#loc414 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":275:21)
#loc415 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":275:37)
#loc416 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":276:17)
#loc417 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":277:21)
#loc418 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":280:35)
#loc419 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":280:49)
#loc420 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":280:62)
#loc421 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":280:80)
#loc422 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":280:83)
#loc423 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":280:30)
#loc424 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":280:17)
#loc425 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":280:84)
#loc426 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":281:17)
#loc427 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":284:17)
#loc428 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":281:21)
#loc429 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":281:35)
#loc430 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":281:48)
#loc431 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":281:51)
#loc432 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":281:65)
#loc433 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":282:17)
#loc434 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":283:21)
#loc435 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":286:43)
#loc436 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":286:29)
#loc437 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":286:17)
#loc438 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":288:29)
#loc439 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":288:24)
#loc440 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":288:17)
#loc441 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":288:40)
#loc442 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":290:20)
#loc443 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":291:13)
#loc444 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":294:13)
#loc445 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":291:17)
#loc446 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":291:33)
#loc447 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":292:13)
#loc448 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":293:30)
#loc449 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":293:17)
#loc450 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":295:13)
#loc451 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":298:13)
#loc452 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":295:17)
#loc453 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":295:33)
#loc454 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":296:13)
#loc455 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":297:30)
#loc456 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":297:17)
#loc457 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":307:5)
#loc458 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":332:5)
#loc459 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":307:8)
#loc460 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":307:33)
#loc461 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":308:5)
#loc462 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":319:5)
#loc463 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":321:5)
#loc464 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":310:9)
#loc465 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":318:9)
#loc466 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":310:13)
#loc467 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":310:20)
#loc468 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":310:28)
#loc469 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":310:35)
#loc470 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":310:31)
#loc471 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":310:49)
#loc472 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":310:62)
#loc473 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":310:69)
#loc474 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":311:9)
#loc475 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":314:9)
#loc476 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":316:9)
#loc477 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":312:13)
#loc478 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":312:33)
#loc479 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":312:26)
#loc480 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":313:26)
#loc481 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":313:13)
#loc482 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":317:23)
#loc483 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":317:13)
#loc484 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":323:9)
#loc485 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":331:9)
#loc486 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":323:13)
#loc487 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":323:20)
#loc488 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":323:28)
#loc489 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":323:35)
#loc490 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":323:31)
#loc491 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":323:49)
#loc492 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":323:62)
#loc493 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":323:69)
#loc494 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":324:9)
#loc495 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":327:9)
#loc496 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":329:9)
#loc497 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":325:13)
#loc498 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":325:33)
#loc499 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":325:26)
#loc500 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":326:26)
#loc501 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":326:13)
#loc502 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":330:23)
#loc503 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":330:13)
#loc504 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":338:1)
#loc505 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":369:1)
#loc506 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":340:5)
#loc507 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":340:9)
#loc508 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":342:12)
#loc509 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":342:5)
#loc510 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":343:5)
#loc511 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":352:5)
#loc512 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":343:8)
#loc513 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":343:33)
#loc514 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":344:5)
#loc515 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":347:5)
#loc516 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":349:5)
#loc517 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":346:16)
#loc518 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":346:9)
#loc519 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":351:16)
#loc520 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":351:9)
#loc521 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":353:5)
#loc522 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":368:5)
#loc523 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":353:8)
#loc524 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":353:33)
#loc525 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":354:5)
#loc526 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":360:5)
#loc527 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":362:5)
#loc528 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":355:9)
#loc529 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":359:9)
#loc530 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":357:13)
#loc531 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":357:33)
#loc532 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":357:26)
#loc533 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":358:26)
#loc534 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":358:13)
#loc535 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":363:9)
#loc536 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":367:9)
#loc537 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":365:13)
#loc538 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":365:33)
#loc539 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":365:26)
#loc540 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":366:26)
#loc541 = loc("CWE190_Integer_Overflow__int_listen_socket_square_12.c":366:13)
#loc542 = loc(fused[#loc1, #loc2])
#loc543 = loc(fused[#loc3, #loc4])
#loc544 = loc(fused[#loc5, #loc6])
#loc545 = loc(fused[#loc7, #loc8])
#loc546 = loc(fused[#loc9, #loc10])
#loc547 = loc(fused[#loc11, #loc12])
#loc548 = loc(fused[#loc13, #loc14])
#loc549 = loc(fused[#loc15, #loc16])
#loc550 = loc(fused[#loc17, #loc18])
#loc551 = loc(fused[#loc19, #loc20])
#loc552 = loc(fused[#loc22, #loc23])
#loc553 = loc(fused[#loc25, #loc26])
#loc554 = loc(fused[#loc27, #loc28])
#loc555 = loc(fused[#loc30, #loc29])
#loc556 = loc(fused[#loc31, #loc32])
#loc557 = loc(fused[#loc33, #loc34])
#loc558 = loc(fused[#loc35, #loc36, #loc37, #loc32])
#loc559 = loc(fused[#loc38, #loc39])
#loc560 = loc(fused[#loc40, #loc41])
#loc561 = loc(fused[#loc42, #loc43])
#loc562 = loc(fused[#loc44, #loc45])
#loc563 = loc(fused[#loc46, #loc47])
#loc564 = loc(fused[#loc48, #loc49])
#loc565 = loc(fused[#loc50, #loc51])
#loc566 = loc(fused[#loc56, #loc57])
#loc567 = loc(fused[#loc58, #loc59])
#loc568 = loc(fused[#loc60, #loc61])
#loc569 = loc(fused[#loc62, #loc59])
#loc570 = loc(fused[#loc64, #loc65])
#loc571 = loc(fused[#loc67, #loc68])
#loc572 = loc(fused[#loc69, #loc70])
#loc573 = loc(fused[#loc73, #loc71])
#loc574 = loc(fused[#loc77, #loc74])
#loc575 = loc(fused[#loc81, #loc82])
#loc576 = loc(fused[#loc83, #loc84])
#loc577 = loc(fused[#loc86, #loc87])
#loc578 = loc(fused[#loc88, #loc89])
#loc579 = loc(fused[#loc90, #loc91])
#loc580 = loc(fused[#loc92, #loc84])
#loc581 = loc(fused[#loc94, #loc95])
#loc582 = loc(fused[#loc98, #loc99])
#loc583 = loc(fused[#loc100, #loc95])
#loc584 = loc(fused[#loc106, #loc107])
#loc585 = loc(fused[#loc108, #loc109])
#loc586 = loc(fused[#loc110, #loc111])
#loc587 = loc(fused[#loc112, #loc109])
#loc588 = loc(fused[#loc116, #loc117])
#loc589 = loc(fused[#loc120, #loc121])
#loc590 = loc(fused[#loc122, #loc123])
#loc591 = loc(fused[#loc124, #loc125])
#loc592 = loc(fused[#loc127, #loc128])
#loc593 = loc(fused[#loc129, #loc123])
#loc594 = loc(fused[#loc133, #loc131])
#loc595 = loc(fused[#loc136, #loc137])
#loc596 = loc(fused[#loc139, #loc140])
#loc597 = loc(fused[#loc141, #loc142])
#loc598 = loc(fused[#loc143, #loc140])
#loc599 = loc(fused[#loc146, #loc147])
#loc600 = loc(fused[#loc148, #loc149])
#loc601 = loc(fused[#loc150, #loc147])
#loc602 = loc(fused[#loc154, #loc153])
#loc603 = loc(fused[#loc155, #loc156])
#loc604 = loc(fused[#loc157, #loc158])
#loc605 = loc(fused[#loc159, #loc160, #loc161, #loc156])
#loc606 = loc(fused[#loc162, #loc163])
#loc607 = loc(fused[#loc164, #loc165])
#loc608 = loc(fused[#loc169, #loc170])
#loc609 = loc(fused[#loc171, #loc172])
#loc610 = loc(fused[#loc175, #loc178])
#loc611 = loc(fused[#loc179, #loc180, #loc181, #loc170])
#loc612 = loc(fused[#loc182, #loc183])
#loc613 = loc(fused[#loc188, #loc189])
#loc614 = loc(fused[#loc190, #loc191])
#loc615 = loc(fused[#loc192, #loc193])
#loc616 = loc(fused[#loc194, #loc195])
#loc617 = loc(fused[#loc196, #loc197])
#loc618 = loc(fused[#loc202, #loc203])
#loc621 = loc(fused[#loc213, #loc214])
#loc622 = loc(fused[#loc217, #loc218])
#loc623 = loc(fused[#loc221, #loc220])
#loc624 = loc(fused[#loc222, #loc223])
#loc625 = loc(fused[#loc224, #loc225])
#loc626 = loc(fused[#loc227, #loc226])
#loc627 = loc(fused[#loc228, #loc229])
#loc628 = loc(fused[#loc230, #loc231])
#loc629 = loc(fused[#loc232, #loc233, #loc234, #loc229])
#loc630 = loc(fused[#loc235, #loc236])
#loc631 = loc(fused[#loc237, #loc238])
#loc632 = loc(fused[#loc239, #loc240])
#loc633 = loc(fused[#loc241, #loc242])
#loc634 = loc(fused[#loc243, #loc244])
#loc635 = loc(fused[#loc245, #loc246])
#loc636 = loc(fused[#loc247, #loc248])
#loc637 = loc(fused[#loc253, #loc254])
#loc638 = loc(fused[#loc255, #loc256])
#loc639 = loc(fused[#loc257, #loc258])
#loc640 = loc(fused[#loc259, #loc256])
#loc641 = loc(fused[#loc261, #loc262])
#loc642 = loc(fused[#loc264, #loc265])
#loc643 = loc(fused[#loc266, #loc267])
#loc644 = loc(fused[#loc269, #loc268])
#loc645 = loc(fused[#loc271, #loc270])
#loc646 = loc(fused[#loc274, #loc275])
#loc647 = loc(fused[#loc276, #loc277])
#loc648 = loc(fused[#loc279, #loc280])
#loc649 = loc(fused[#loc281, #loc282])
#loc650 = loc(fused[#loc283, #loc284])
#loc651 = loc(fused[#loc285, #loc277])
#loc652 = loc(fused[#loc287, #loc288])
#loc653 = loc(fused[#loc291, #loc292])
#loc654 = loc(fused[#loc293, #loc288])
#loc655 = loc(fused[#loc299, #loc300])
#loc656 = loc(fused[#loc301, #loc302])
#loc657 = loc(fused[#loc303, #loc304])
#loc658 = loc(fused[#loc305, #loc302])
#loc659 = loc(fused[#loc309, #loc310])
#loc660 = loc(fused[#loc313, #loc314])
#loc661 = loc(fused[#loc315, #loc316])
#loc662 = loc(fused[#loc317, #loc318])
#loc663 = loc(fused[#loc320, #loc321])
#loc664 = loc(fused[#loc322, #loc316])
#loc665 = loc(fused[#loc326, #loc324])
#loc666 = loc(fused[#loc329, #loc330])
#loc667 = loc(fused[#loc332, #loc333])
#loc668 = loc(fused[#loc334, #loc335])
#loc669 = loc(fused[#loc336, #loc333])
#loc670 = loc(fused[#loc339, #loc340])
#loc671 = loc(fused[#loc341, #loc342])
#loc672 = loc(fused[#loc343, #loc340])
#loc673 = loc(fused[#loc346, #loc347])
#loc674 = loc(fused[#loc348, #loc349])
#loc675 = loc(fused[#loc350, #loc351])
#loc676 = loc(fused[#loc352, #loc353])
#loc677 = loc(fused[#loc354, #loc355])
#loc678 = loc(fused[#loc356, #loc357])
#loc679 = loc(fused[#loc358, #loc359])
#loc680 = loc(fused[#loc364, #loc365])
#loc681 = loc(fused[#loc366, #loc367])
#loc682 = loc(fused[#loc368, #loc369])
#loc683 = loc(fused[#loc370, #loc367])
#loc684 = loc(fused[#loc372, #loc373])
#loc685 = loc(fused[#loc375, #loc376])
#loc686 = loc(fused[#loc377, #loc378])
#loc687 = loc(fused[#loc380, #loc379])
#loc688 = loc(fused[#loc382, #loc381])
#loc689 = loc(fused[#loc385, #loc386])
#loc690 = loc(fused[#loc387, #loc388])
#loc691 = loc(fused[#loc390, #loc391])
#loc692 = loc(fused[#loc392, #loc393])
#loc693 = loc(fused[#loc394, #loc395])
#loc694 = loc(fused[#loc396, #loc388])
#loc695 = loc(fused[#loc398, #loc399])
#loc696 = loc(fused[#loc402, #loc403])
#loc697 = loc(fused[#loc404, #loc399])
#loc698 = loc(fused[#loc410, #loc411])
#loc699 = loc(fused[#loc412, #loc413])
#loc700 = loc(fused[#loc414, #loc415])
#loc701 = loc(fused[#loc416, #loc413])
#loc702 = loc(fused[#loc420, #loc421])
#loc703 = loc(fused[#loc424, #loc425])
#loc704 = loc(fused[#loc426, #loc427])
#loc705 = loc(fused[#loc428, #loc429])
#loc706 = loc(fused[#loc431, #loc432])
#loc707 = loc(fused[#loc433, #loc427])
#loc708 = loc(fused[#loc437, #loc435])
#loc709 = loc(fused[#loc440, #loc441])
#loc710 = loc(fused[#loc443, #loc444])
#loc711 = loc(fused[#loc445, #loc446])
#loc712 = loc(fused[#loc447, #loc444])
#loc713 = loc(fused[#loc450, #loc451])
#loc714 = loc(fused[#loc452, #loc453])
#loc715 = loc(fused[#loc454, #loc451])
#loc716 = loc(fused[#loc457, #loc458])
#loc717 = loc(fused[#loc459, #loc460])
#loc718 = loc(fused[#loc461, #loc462, #loc463, #loc458])
#loc719 = loc(fused[#loc464, #loc465])
#loc720 = loc(fused[#loc466, #loc467])
#loc721 = loc(fused[#loc470, #loc473])
#loc722 = loc(fused[#loc474, #loc475, #loc476, #loc465])
#loc723 = loc(fused[#loc477, #loc478])
#loc724 = loc(fused[#loc484, #loc485])
#loc725 = loc(fused[#loc486, #loc487])
#loc726 = loc(fused[#loc490, #loc493])
#loc727 = loc(fused[#loc494, #loc495, #loc496, #loc485])
#loc728 = loc(fused[#loc497, #loc498])
#loc729 = loc(fused[#loc504, #loc505])
#loc730 = loc(fused[#loc506, #loc507])
#loc731 = loc(fused[#loc509, #loc508])
#loc732 = loc(fused[#loc510, #loc511])
#loc733 = loc(fused[#loc512, #loc513])
#loc734 = loc(fused[#loc514, #loc515, #loc516, #loc511])
#loc735 = loc(fused[#loc518, #loc517])
#loc736 = loc(fused[#loc520, #loc519])
#loc737 = loc(fused[#loc521, #loc522])
#loc738 = loc(fused[#loc523, #loc524])
#loc739 = loc(fused[#loc525, #loc526, #loc527, #loc522])
#loc740 = loc(fused[#loc528, #loc529])
#loc741 = loc(fused[#loc530, #loc531])
#loc742 = loc(fused[#loc535, #loc536])
#loc743 = loc(fused[#loc537, #loc538])
