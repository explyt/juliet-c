!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @sprintf(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc3)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc46)
  cir.func no_proto @CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dest"] {alignment = 16 : i64} loc(#loc48)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intFive", init] {alignment = 4 : i64} loc(#loc49)
    cir.br ^bb1 loc(#loc50)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc50)
  ^bb2:  // pred: ^bb1
    %2 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc14)
    cir.brcond %3 ^bb3, ^bb6 loc(#loc14)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc51)
  ^bb4:  // pred: ^bb3
    %4 = cir.const #cir.int<5> : !s32i loc(#loc11)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc49)
    %5 = cir.get_global @sprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...)>> loc(#loc17)
    %6 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc18)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc3)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc3)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    %10 = cir.call @sprintf(%6, %8, %9) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !s32i) -> !s32i extra(#fn_attr) loc(#loc17)
    %11 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc20)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc21)
    cir.br ^bb5 loc(#loc16)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc22)
  ^bb6:  // 2 preds: ^bb2, ^bb5
    cir.br ^bb7 loc(#loc13)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc7)
  } loc(#loc47)
  cir.func no_proto @CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc53)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc25)
    cir.return loc(#loc24)
  } loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc27)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dest"] {alignment = 16 : i64} loc(#loc55)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intFive", init] {alignment = 4 : i64} loc(#loc56)
    cir.br ^bb1 loc(#loc57)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc57)
  ^bb2:  // pred: ^bb1
    %2 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc36)
    cir.brcond %3 ^bb3, ^bb6 loc(#loc36)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc58)
  ^bb4:  // pred: ^bb3
    %4 = cir.const #cir.int<5> : !s32i loc(#loc33)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc56)
    %5 = cir.get_global @sprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...)>> loc(#loc39)
    %6 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc40)
    %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc27)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc27)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc41)
    %10 = cir.call @sprintf(%6, %8, %9) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !s32i) -> !s32i extra(#fn_attr) loc(#loc39)
    %11 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc43)
    cir.br ^bb5 loc(#loc38)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc44)
  ^bb6:  // 2 preds: ^bb2, ^bb5
    cir.br ^bb7 loc(#loc35)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc29)
  } loc(#loc54)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":365:1)
#loc2 = loc("/usr/include/stdio.h":366:45)
#loc3 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":30:27)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc6 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":22:1)
#loc7 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":35:1)
#loc8 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":27:13)
#loc9 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":27:32)
#loc10 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":28:13)
#loc11 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":28:27)
#loc12 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":24:5)
#loc13 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":34:5)
#loc14 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":24:11)
#loc15 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":26:9)
#loc16 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":32:9)
#loc17 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":30:13)
#loc18 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":30:21)
#loc19 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":30:33)
#loc20 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":31:23)
#loc21 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":31:13)
#loc22 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":33:9)
#loc23 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":57:1)
#loc24 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":60:1)
#loc25 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":59:5)
#loc26 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":59:11)
#loc27 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":50:27)
#loc28 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":42:1)
#loc29 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":55:1)
#loc30 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":47:13)
#loc31 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":47:32)
#loc32 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":48:13)
#loc33 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":48:27)
#loc34 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":44:5)
#loc35 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":54:5)
#loc36 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":44:11)
#loc37 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":46:9)
#loc38 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":52:9)
#loc39 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":50:13)
#loc40 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":50:21)
#loc41 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":50:33)
#loc42 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":51:23)
#loc43 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":51:13)
#loc44 = loc("CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c":53:9)
#loc45 = loc(fused[#loc1, #loc2])
#loc46 = loc(fused[#loc4, #loc5])
#loc47 = loc(fused[#loc6, #loc7])
#loc48 = loc(fused[#loc8, #loc9])
#loc49 = loc(fused[#loc10, #loc11])
#loc50 = loc(fused[#loc12, #loc13])
#loc51 = loc(fused[#loc15, #loc16])
#loc52 = loc(fused[#loc23, #loc24])
#loc53 = loc(fused[#loc25, #loc26])
#loc54 = loc(fused[#loc28, #loc29])
#loc55 = loc(fused[#loc30, #loc31])
#loc56 = loc(fused[#loc32, #loc33])
#loc57 = loc(fused[#loc34, #loc35])
#loc58 = loc(fused[#loc37, #loc38])
