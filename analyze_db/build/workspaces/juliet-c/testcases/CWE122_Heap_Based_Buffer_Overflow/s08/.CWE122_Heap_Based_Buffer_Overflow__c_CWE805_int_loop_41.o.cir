!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":21:70)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":21:76)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":52:74)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":52:80)
#loc130 = loc(fused[#loc7, #loc8])
#loc154 = loc(fused[#loc68, #loc69])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc127)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc128)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41_badSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc130)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc9)
    cir.scope {
      %1 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc132)
      %2 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc132)
      cir.store %2, %1 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc132)
      cir.scope {
        %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc134)
        cir.scope {
          %11 = cir.const #cir.int<0> : !s32i loc(#loc20)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc20)
          cir.store %12, %3 : !u64i, !cir.ptr<!u64i> loc(#loc136)
          cir.for : cond {
            %13 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc22)
            %14 = cir.const #cir.int<100> : !s32i loc(#loc23)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc23)
            %16 = cir.cmp(lt, %13, %15) : !u64i, !cir.bool loc(#loc137)
            cir.condition(%16) loc(#loc24)
          } body {
            cir.scope {
              %13 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc26)
              %14 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc27)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !u64i), !cir.ptr<!s32i> loc(#loc27)
              %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc27)
              %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc28)
              %18 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc29)
              %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !u64i), !cir.ptr<!s32i> loc(#loc30)
              cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc139)
            } loc(#loc138)
            cir.yield loc(#loc19)
          } step {
            %13 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc32)
            %14 = cir.unary(inc, %13) : !u64i, !u64i loc(#loc33)
            cir.store %14, %3 : !u64i, !cir.ptr<!u64i> loc(#loc140)
            cir.yield loc(#loc135)
          } loc(#loc135)
        } loc(#loc135)
        %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc34)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc35)
        %6 = cir.ptr_stride(%4 : !cir.ptr<!s32i>, %5 : !s32i), !cir.ptr<!s32i> loc(#loc36)
        %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc34)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc37)
        %8 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc38)
        %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc39)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc39)
        cir.call @free(%10) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc38)
      } loc(#loc133)
    } loc(#loc131)
    cir.return loc(#loc6)
  } loc(#loc129)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc141)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc142)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc144)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc48)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc145)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc50)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc51)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc51)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc146)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc147)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc50)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc148)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc149)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc58)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc59)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc59)
      %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !cir.bool loc(#loc151)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc61)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc62)
        %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc63)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc61)
      } loc(#loc152)
    } loc(#loc150)
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc64)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41_badSink(%9) : (!cir.ptr<!s32i>) -> () loc(#loc65)
    cir.return loc(#loc45)
  } loc(#loc143)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41_goodG2BSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc68, #loc69])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc154)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc70)
    cir.scope {
      %1 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc156)
      %2 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc156)
      cir.store %2, %1 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc156)
      cir.scope {
        %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc158)
        cir.scope {
          %11 = cir.const #cir.int<0> : !s32i loc(#loc81)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc81)
          cir.store %12, %3 : !u64i, !cir.ptr<!u64i> loc(#loc160)
          cir.for : cond {
            %13 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc83)
            %14 = cir.const #cir.int<100> : !s32i loc(#loc84)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc84)
            %16 = cir.cmp(lt, %13, %15) : !u64i, !cir.bool loc(#loc161)
            cir.condition(%16) loc(#loc85)
          } body {
            cir.scope {
              %13 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc87)
              %14 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc88)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !u64i), !cir.ptr<!s32i> loc(#loc88)
              %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc88)
              %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc89)
              %18 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc90)
              %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !u64i), !cir.ptr<!s32i> loc(#loc91)
              cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc163)
            } loc(#loc162)
            cir.yield loc(#loc80)
          } step {
            %13 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc93)
            %14 = cir.unary(inc, %13) : !u64i, !u64i loc(#loc94)
            cir.store %14, %3 : !u64i, !cir.ptr<!u64i> loc(#loc164)
            cir.yield loc(#loc159)
          } loc(#loc159)
        } loc(#loc159)
        %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc95)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc96)
        %6 = cir.ptr_stride(%4 : !cir.ptr<!s32i>, %5 : !s32i), !cir.ptr<!s32i> loc(#loc97)
        %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc95)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc98)
        %8 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc99)
        %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc100)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc100)
        cir.call @free(%10) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc99)
      } loc(#loc157)
    } loc(#loc155)
    cir.return loc(#loc67)
  } loc(#loc153)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc166)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc103)
    cir.return loc(#loc102)
  } loc(#loc165)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc168)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc109)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc169)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc111)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc112)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc112)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc170)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc171)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc111)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc172)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc173)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc119)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc120)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc120)
      %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !cir.bool loc(#loc175)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc122)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc123)
        %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc124)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc122)
      } loc(#loc176)
    } loc(#loc174)
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc125)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41_goodG2BSink(%9) : (!cir.ptr<!s32i>) -> () loc(#loc126)
    cir.return loc(#loc106)
  } loc(#loc167)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":36:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":22:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":23:5)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":35:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":24:9)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":24:29)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":25:9)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":34:9)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":26:13)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":26:20)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":28:13)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":31:13)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":28:22)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":28:18)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":28:25)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":28:29)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":28:27)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":29:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":30:34)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":30:27)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":30:17)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":30:22)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":30:23)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":30:35)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":28:35)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":28:34)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":32:26)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":32:31)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":32:32)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":32:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":33:13)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":33:18)
#loc40 = loc("/usr/include/stdlib.h":672:1)
#loc41 = loc("/usr/include/stdlib.h":672:45)
#loc42 = loc("/usr/include/stdlib.h":756:1)
#loc43 = loc("/usr/include/stdlib.h":756:70)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":38:1)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":46:1)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":40:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":40:11)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":41:12)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":41:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":43:19)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":43:26)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":43:29)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":43:39)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":43:40)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":43:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":44:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":44:33)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":44:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":44:17)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":44:23)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":44:24)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":44:30)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":44:29)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":45:69)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":45:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":52:1)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":67:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":53:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":54:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":66:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":55:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":55:29)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":56:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":65:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":57:13)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":57:20)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":59:13)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":62:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":59:22)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":59:18)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":59:25)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":59:29)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":59:27)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":60:13)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":61:34)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":61:27)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":61:17)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":61:22)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":61:23)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":61:35)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":59:35)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":59:34)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":63:26)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":63:31)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":63:32)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":63:13)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":64:13)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":64:18)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":80:1)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":83:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":82:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":82:13)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":70:1)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":78:1)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":72:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":72:11)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":73:12)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":73:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":75:19)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":75:26)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":75:30)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":75:40)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":75:41)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":75:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":76:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":76:33)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":76:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":76:17)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":76:23)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":76:24)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":76:30)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":76:29)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":77:73)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c":77:5)
#loc127 = loc(fused[#loc1, #loc2])
#loc128 = loc(fused[#loc3, #loc4])
#loc129 = loc(fused[#loc5, #loc6])
#loc131 = loc(fused[#loc10, #loc11])
#loc132 = loc(fused[#loc12, #loc13])
#loc133 = loc(fused[#loc14, #loc15])
#loc134 = loc(fused[#loc16, #loc17])
#loc135 = loc(fused[#loc18, #loc19])
#loc136 = loc(fused[#loc21, #loc20])
#loc137 = loc(fused[#loc22, #loc23])
#loc138 = loc(fused[#loc25, #loc19])
#loc139 = loc(fused[#loc28, #loc31])
#loc140 = loc(fused[#loc33, #loc32])
#loc141 = loc(fused[#loc40, #loc41])
#loc142 = loc(fused[#loc42, #loc43])
#loc143 = loc(fused[#loc44, #loc45])
#loc144 = loc(fused[#loc46, #loc47])
#loc145 = loc(fused[#loc49, #loc48])
#loc146 = loc(fused[#loc52, #loc53])
#loc147 = loc(fused[#loc51, #loc53])
#loc148 = loc(fused[#loc50, #loc54])
#loc149 = loc(fused[#loc55, #loc54])
#loc150 = loc(fused[#loc56, #loc57])
#loc151 = loc(fused[#loc58, #loc59])
#loc152 = loc(fused[#loc60, #loc57])
#loc153 = loc(fused[#loc66, #loc67])
#loc155 = loc(fused[#loc71, #loc72])
#loc156 = loc(fused[#loc73, #loc74])
#loc157 = loc(fused[#loc75, #loc76])
#loc158 = loc(fused[#loc77, #loc78])
#loc159 = loc(fused[#loc79, #loc80])
#loc160 = loc(fused[#loc82, #loc81])
#loc161 = loc(fused[#loc83, #loc84])
#loc162 = loc(fused[#loc86, #loc80])
#loc163 = loc(fused[#loc89, #loc92])
#loc164 = loc(fused[#loc94, #loc93])
#loc165 = loc(fused[#loc101, #loc102])
#loc166 = loc(fused[#loc103, #loc104])
#loc167 = loc(fused[#loc105, #loc106])
#loc168 = loc(fused[#loc107, #loc108])
#loc169 = loc(fused[#loc110, #loc109])
#loc170 = loc(fused[#loc113, #loc114])
#loc171 = loc(fused[#loc112, #loc114])
#loc172 = loc(fused[#loc111, #loc115])
#loc173 = loc(fused[#loc116, #loc115])
#loc174 = loc(fused[#loc117, #loc118])
#loc175 = loc(fused[#loc119, #loc120])
#loc176 = loc(fused[#loc121, #loc118])
