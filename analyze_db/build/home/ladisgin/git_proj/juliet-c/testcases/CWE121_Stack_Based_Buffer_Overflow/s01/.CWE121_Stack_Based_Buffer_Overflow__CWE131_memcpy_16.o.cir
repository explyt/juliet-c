!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc61)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc63)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc64)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc9)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc65)
    cir.br ^bb1 loc(#loc66)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc66)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc13)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<10> : !s32i loc(#loc14)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc14)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc14)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc14)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc14)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc67)
    cir.br ^bb4 loc(#loc16)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc12)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc68)
  ^bb6:  // pred: ^bb5
    %10 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc63)
    cir.store %10, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc63)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc19)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc19)
    %13 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc20)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc20)
    %15 = cir.const #cir.int<10> : !s32i loc(#loc21)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc21)
    %17 = cir.const #cir.int<4> : !u64i loc(#loc69)
    %18 = cir.binop(mul, %16, %17) : !u64i loc(#loc70)
    cir.libc.memcpy %18 bytes from %14 to %12 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc71)
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc27)
    %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc28)
    %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc29)
    cir.br ^bb7 loc(#loc18)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc4)
  } loc(#loc62)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc73)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    cir.return loc(#loc31)
  } loc(#loc72)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc75)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc76)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc40)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc77)
    cir.br ^bb1 loc(#loc78)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc78)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc44)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc44)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc44)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<10> : !s32i loc(#loc45)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc45)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc45)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc45)
    %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc45)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc45)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc45)
    cir.store %11, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc79)
    cir.br ^bb4 loc(#loc47)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc43)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc80)
  ^bb6:  // pred: ^bb5
    %12 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc75)
    cir.store %12, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc75)
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc50)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc50)
    %15 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc51)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc51)
    %17 = cir.const #cir.int<10> : !s32i loc(#loc52)
    %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc52)
    %19 = cir.const #cir.int<4> : !u64i loc(#loc81)
    %20 = cir.binop(mul, %18, %19) : !u64i loc(#loc82)
    cir.libc.memcpy %20 bytes from %16 to %14 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc83)
    %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc57)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc58)
    %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc59)
    %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc57)
    cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc60)
    cir.br ^bb7 loc(#loc49)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc35)
  } loc(#loc74)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":37:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":32:9)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":32:28)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":23:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":23:11)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":24:12)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":24:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":25:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":30:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":25:11)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":28:23)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":28:9)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":29:9)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":31:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":36:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":34:16)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":34:22)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":34:30)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":34:33)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":34:43)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":34:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":34:44)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":35:22)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":35:27)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":35:28)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":35:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":62:1)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":65:1)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":64:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":64:13)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":44:1)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":60:1)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":55:9)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":55:28)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":46:5)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":46:11)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":47:12)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":47:5)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":48:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":53:5)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":48:11)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":51:23)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":51:9)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":52:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":54:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":59:5)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":57:16)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":57:22)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":57:30)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":57:33)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":57:43)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":57:9)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":57:44)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":58:22)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":58:27)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":58:28)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":58:9)
#loc61 = loc(fused[#loc1, #loc2])
#loc62 = loc(fused[#loc3, #loc4])
#loc63 = loc(fused[#loc5, #loc6])
#loc64 = loc(fused[#loc7, #loc8])
#loc65 = loc(fused[#loc10, #loc9])
#loc66 = loc(fused[#loc11, #loc12])
#loc67 = loc(fused[#loc15, #loc14])
#loc68 = loc(fused[#loc17, #loc18])
#loc69 = loc(fused[#loc22, #loc23])
#loc70 = loc(fused[#loc21, #loc23])
#loc71 = loc(fused[#loc24, #loc25])
#loc72 = loc(fused[#loc30, #loc31])
#loc73 = loc(fused[#loc32, #loc33])
#loc74 = loc(fused[#loc34, #loc35])
#loc75 = loc(fused[#loc36, #loc37])
#loc76 = loc(fused[#loc38, #loc39])
#loc77 = loc(fused[#loc41, #loc40])
#loc78 = loc(fused[#loc42, #loc43])
#loc79 = loc(fused[#loc46, #loc45])
#loc80 = loc(fused[#loc48, #loc49])
#loc81 = loc(fused[#loc53, #loc54])
#loc82 = loc(fused[#loc52, #loc54])
#loc83 = loc(fused[#loc55, #loc56])
