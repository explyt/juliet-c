!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":85:10)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":85:14)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":85:20)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":85:32)
#loc171 = loc(fused[#loc74, #loc75])
#loc172 = loc(fused[#loc76, #loc77])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc143)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc144)
  cir.func private @printIntLine(!s32i) loc(#loc145)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc146)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc148)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc149)
    cir.goto "source" loc(#loc150)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc17)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc18)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc19)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc19)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc18)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc151)
    cir.store %6, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc152)
    cir.scope {
      %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc24)
      %8 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc25)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc25)
      %10 = cir.cmp(eq, %7, %9) : !cir.ptr<!s32i>, !cir.bool loc(#loc154)
      cir.if %10 {
        %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc27)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc28)
        %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc29)
        cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc27)
      } loc(#loc155)
    } loc(#loc153)
    cir.scope {
      %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc157)
      %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc158)
      %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc157)
      cir.store %9, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc157)
      cir.scope {
        %17 = cir.const #cir.int<0> : !s32i loc(#loc38)
        %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc38)
        cir.store %18, %8 : !u64i, !cir.ptr<!u64i> loc(#loc160)
        cir.for : cond {
          %19 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc40)
          %20 = cir.const #cir.int<10> : !s32i loc(#loc41)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc41)
          %22 = cir.cmp(lt, %19, %21) : !u64i, !cir.bool loc(#loc161)
          cir.condition(%22) loc(#loc42)
        } body {
          cir.scope {
            %19 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc44)
            %20 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc45)
            %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !u64i), !cir.ptr<!s32i> loc(#loc45)
            %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc45)
            %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc46)
            %24 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc47)
            %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !u64i), !cir.ptr<!s32i> loc(#loc48)
            cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc163)
          } loc(#loc162)
          cir.yield loc(#loc37)
        } step {
          %19 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc50)
          %20 = cir.unary(inc, %19) : !u64i, !u64i loc(#loc51)
          cir.store %20, %8 : !u64i, !cir.ptr<!u64i> loc(#loc164)
          cir.yield loc(#loc159)
        } loc(#loc159)
      } loc(#loc159)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc52)
      %11 = cir.const #cir.int<0> : !s32i loc(#loc53)
      %12 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc54)
      %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc52)
      cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc55)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc56)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc57)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc57)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc56)
    } loc(#loc156)
    cir.return loc(#loc10)
  } loc(#loc147)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc166)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc60)
    cir.return loc(#loc59)
  } loc(#loc165)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc167)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc168)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc169)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc68)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc71)
  cir.func @main(%arg0: !s32i loc(fused[#loc74, #loc75]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc76, #loc77])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc171)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc172)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc73)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc78)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc78)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc79)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc80)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc80)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc81)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc68)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18_good : !cir.ptr<!cir.func<!void ()>> loc(#loc173)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18_good() : () -> () loc(#loc83)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc69)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc70)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc174)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18_bad() : () -> () loc(#loc87)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc71)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc90)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc175)
    cir.return %17 : !s32i loc(#loc175)
  } loc(#loc170)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc177)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc96)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc178)
    cir.goto "source" loc(#loc179)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc100)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc101)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc102)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc102)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc180)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc181)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc101)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc182)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc183)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc109)
      %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc110)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc110)
      %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc185)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc112)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc113)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc114)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc112)
      } loc(#loc186)
    } loc(#loc184)
    cir.scope {
      %9 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc188)
      %10 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc189)
      %11 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc188)
      cir.store %11, %9 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc188)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc123)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc123)
        cir.store %20, %10 : !u64i, !cir.ptr<!u64i> loc(#loc191)
        cir.for : cond {
          %21 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc125)
          %22 = cir.const #cir.int<10> : !s32i loc(#loc126)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc126)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc192)
          cir.condition(%24) loc(#loc127)
        } body {
          cir.scope {
            %21 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc129)
            %22 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc130)
            %23 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %21 : !u64i), !cir.ptr<!s32i> loc(#loc130)
            %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc130)
            %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc131)
            %26 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc132)
            %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !u64i), !cir.ptr<!s32i> loc(#loc133)
            cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc194)
          } loc(#loc193)
          cir.yield loc(#loc122)
        } step {
          %21 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc135)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc136)
          cir.store %22, %10 : !u64i, !cir.ptr<!u64i> loc(#loc195)
          cir.yield loc(#loc190)
        } loc(#loc190)
      } loc(#loc190)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc137)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc138)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc139)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc137)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc140)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc141)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc142)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc142)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc141)
    } loc(#loc187)
    cir.return loc(#loc93)
  } loc(#loc176)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":41:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":23:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":23:11)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":24:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":24:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":25:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":25:10)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":26:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":28:19)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":28:26)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":28:28)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":28:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":29:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":29:33)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":29:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":29:17)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":29:23)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":29:24)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":29:30)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":29:29)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":30:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":40:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":31:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":31:28)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":32:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":32:16)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":34:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":37:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":34:18)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":34:14)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":34:21)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":34:25)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":34:23)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":35:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":36:30)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":36:23)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":36:13)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":36:18)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":36:19)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":36:31)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":34:30)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":34:29)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":38:22)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":38:27)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":38:28)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":38:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":39:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":39:14)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":70:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":73:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":72:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":72:13)
#loc62 = loc("/usr/include/stdlib.h":575:1)
#loc63 = loc("/usr/include/stdlib.h":575:41)
#loc64 = loc("/usr/include/time.h":76:1)
#loc65 = loc("/usr/include/time.h":76:38)
#loc66 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc67 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":90:15)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":92:15)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":95:15)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":97:15)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":85:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":100:1)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":86:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":88:27)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":88:22)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":88:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":90:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":91:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":91:60)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":92:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":95:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":96:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":96:59)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":97:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":99:12)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":99:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":48:1)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":68:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":50:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":50:11)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":51:12)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":51:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":52:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":52:10)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":53:1)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":55:19)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":55:26)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":55:29)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":55:39)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":55:40)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":55:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":56:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":56:33)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":56:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":56:17)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":56:23)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":56:24)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":56:30)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":56:29)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":57:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":67:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":58:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":58:28)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":59:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":59:16)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":61:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":64:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":61:18)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":61:14)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":61:21)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":61:25)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":61:23)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":62:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":63:30)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":63:23)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":63:13)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":63:18)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":63:19)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":63:31)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":61:30)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":61:29)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":65:22)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":65:27)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":65:28)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":65:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":66:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c":66:14)
#loc143 = loc(fused[#loc1, #loc2])
#loc144 = loc(fused[#loc3, #loc4])
#loc145 = loc(fused[#loc5, #loc6])
#loc146 = loc(fused[#loc7, #loc8])
#loc147 = loc(fused[#loc9, #loc10])
#loc148 = loc(fused[#loc11, #loc12])
#loc149 = loc(fused[#loc14, #loc13])
#loc150 = loc(fused[#loc15, #loc16])
#loc151 = loc(fused[#loc18, #loc20])
#loc152 = loc(fused[#loc21, #loc20])
#loc153 = loc(fused[#loc22, #loc23])
#loc154 = loc(fused[#loc24, #loc25])
#loc155 = loc(fused[#loc26, #loc23])
#loc156 = loc(fused[#loc30, #loc31])
#loc157 = loc(fused[#loc32, #loc33])
#loc158 = loc(fused[#loc34, #loc35])
#loc159 = loc(fused[#loc36, #loc37])
#loc160 = loc(fused[#loc39, #loc38])
#loc161 = loc(fused[#loc40, #loc41])
#loc162 = loc(fused[#loc43, #loc37])
#loc163 = loc(fused[#loc46, #loc49])
#loc164 = loc(fused[#loc51, #loc50])
#loc165 = loc(fused[#loc58, #loc59])
#loc166 = loc(fused[#loc60, #loc61])
#loc167 = loc(fused[#loc62, #loc63])
#loc168 = loc(fused[#loc64, #loc65])
#loc169 = loc(fused[#loc66, #loc67])
#loc170 = loc(fused[#loc72, #loc73])
#loc173 = loc(fused[#loc83, #loc84])
#loc174 = loc(fused[#loc87, #loc88])
#loc175 = loc(fused[#loc91, #loc90])
#loc176 = loc(fused[#loc92, #loc93])
#loc177 = loc(fused[#loc94, #loc95])
#loc178 = loc(fused[#loc97, #loc96])
#loc179 = loc(fused[#loc98, #loc99])
#loc180 = loc(fused[#loc103, #loc104])
#loc181 = loc(fused[#loc102, #loc104])
#loc182 = loc(fused[#loc101, #loc105])
#loc183 = loc(fused[#loc106, #loc105])
#loc184 = loc(fused[#loc107, #loc108])
#loc185 = loc(fused[#loc109, #loc110])
#loc186 = loc(fused[#loc111, #loc108])
#loc187 = loc(fused[#loc115, #loc116])
#loc188 = loc(fused[#loc117, #loc118])
#loc189 = loc(fused[#loc119, #loc120])
#loc190 = loc(fused[#loc121, #loc122])
#loc191 = loc(fused[#loc124, #loc123])
#loc192 = loc(fused[#loc125, #loc126])
#loc193 = loc(fused[#loc128, #loc122])
#loc194 = loc(fused[#loc131, #loc134])
#loc195 = loc(fused[#loc136, #loc135])
