!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc216 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":196:10)
#loc217 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":196:14)
#loc218 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":196:20)
#loc219 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":196:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc348 = loc(fused[#loc216, #loc217])
#loc349 = loc(fused[#loc218, #loc219])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s04/CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private @__const.goodG2B.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc263)
  cir.global "private" constant cir_private @__const.CWE78_OS_Command_Injection__char_listen_socket_execlp_17_bad.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc264)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc265)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc266)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc267)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc268)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc269)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc270)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc271)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc272)
  cir.func private @close(!s32i) -> !s32i loc(#loc273)
  cir.func private @execlp(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc274)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"sh\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc25)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"-c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc26)
  cir.func no_proto @CWE78_OS_Command_Injection__char_listen_socket_execlp_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc276)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc277)
    %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc264)
    %3 = cir.get_global @__const.CWE78_OS_Command_Injection__char_listen_socket_execlp_17_bad.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc264)
    cir.copy %3 to %2 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc264)
    %4 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc33)
    cir.store %4, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc278)
    cir.scope {
      %14 = cir.const #cir.int<0> : !s32i loc(#loc37)
      cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc280)
      cir.for : cond {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc39)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc40)
        %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc281)
        cir.condition(%17) loc(#loc41)
      } body {
        cir.scope {
          cir.scope {
            %15 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc284)
            %16 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc285)
            %17 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc286)
            %18 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc287)
            %19 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc288)
            %20 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc289)
            %21 = cir.const #cir.int<1> : !s32i loc(#loc52)
            %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc52)
            cir.store %22, %18 : !s32i, !cir.ptr<!s32i> loc(#loc287)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc54)
            %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc54)
            cir.store %24, %19 : !s32i, !cir.ptr<!s32i> loc(#loc288)
            %25 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc57)
            %26 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc58)
            %27 = cir.call @strlen(%26) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc57)
            cir.store %27, %20 : !u64i, !cir.ptr<!u64i> loc(#loc289)
            cir.scope {
              cir.do {
                %28 = cir.const #cir.int<2> : !s32i loc(#loc61)
                %29 = cir.const #cir.int<1> : !s32i loc(#loc62)
                %30 = cir.const #cir.int<6> : !s32i loc(#loc63)
                %31 = cir.call @socket(%28, %29, %30) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc64)
                cir.store %31, %18 : !s32i, !cir.ptr<!s32i> loc(#loc291)
                cir.scope {
                  %85 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc69)
                  %86 = cir.const #cir.int<1> : !s32i loc(#loc70)
                  %87 = cir.unary(minus, %86) : !s32i, !s32i loc(#loc70)
                  %88 = cir.cmp(eq, %85, %87) : !s32i, !cir.bool loc(#loc293)
                  cir.if %88 {
                    cir.break loc(#loc72)
                  } loc(#loc294)
                } loc(#loc292)
                %32 = cir.cast(bitcast, %16 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc295)
                %33 = cir.const #cir.int<0> : !s32i loc(#loc75)
                %34 = cir.const #cir.int<16> : !u64i loc(#loc296)
                cir.libc.memset %34 bytes from %32 set to %33 : !cir.ptr<!void>, !s32i, !u64i loc(#loc297)
                %35 = cir.const #cir.int<2> : !s32i loc(#loc80)
                %36 = cir.cast(integral, %35 : !s32i), !u16i loc(#loc80)
                %37 = cir.get_member %16[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc81)
                cir.store %36, %37 : !u16i, !cir.ptr<!u16i> loc(#loc298)
                %38 = cir.const #cir.int<0> : !s32i loc(#loc83)
                %39 = cir.cast(integral, %38 : !s32i), !u32i loc(#loc83)
                %40 = cir.get_member %16[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc84)
                %41 = cir.get_member %40[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc85)
                cir.store %39, %41 : !u32i, !cir.ptr<!u32i> loc(#loc299)
                %42 = cir.const #cir.int<27015> : !s32i loc(#loc87)
                %43 = cir.cast(integral, %42 : !s32i), !u16i loc(#loc87)
                %44 = cir.call @htons(%43) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc88)
                %45 = cir.get_member %16[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc89)
                cir.store %44, %45 : !u16i, !cir.ptr<!u16i> loc(#loc300)
                cir.scope {
                  %85 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc94)
                  %86 = cir.cast(bitcast, %16 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc302)
                  %87 = cir.const #cir.int<16> : !u64i loc(#loc303)
                  %88 = cir.cast(integral, %87 : !u64i), !u32i loc(#loc303)
                  %89 = cir.call @bind(%85, %86, %88) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc99)
                  %90 = cir.const #cir.int<1> : !s32i loc(#loc100)
                  %91 = cir.unary(minus, %90) : !s32i, !s32i loc(#loc100)
                  %92 = cir.cmp(eq, %89, %91) : !s32i, !cir.bool loc(#loc304)
                  cir.if %92 {
                    cir.break loc(#loc102)
                  } loc(#loc305)
                } loc(#loc301)
                cir.scope {
                  %85 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc105)
                  %86 = cir.const #cir.int<5> : !s32i loc(#loc106)
                  %87 = cir.call @listen(%85, %86) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc107)
                  %88 = cir.const #cir.int<1> : !s32i loc(#loc108)
                  %89 = cir.unary(minus, %88) : !s32i, !s32i loc(#loc108)
                  %90 = cir.cmp(eq, %87, %89) : !s32i, !cir.bool loc(#loc307)
                  cir.if %90 {
                    cir.break loc(#loc110)
                  } loc(#loc308)
                } loc(#loc306)
                %46 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc111)
                %47 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc112)
                %48 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc113)
                %49 = cir.call @accept(%46, %47, %48) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc114)
                cir.store %49, %19 : !s32i, !cir.ptr<!s32i> loc(#loc309)
                cir.scope {
                  %85 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc119)
                  %86 = cir.const #cir.int<1> : !s32i loc(#loc120)
                  %87 = cir.unary(minus, %86) : !s32i, !s32i loc(#loc120)
                  %88 = cir.cmp(eq, %85, %87) : !s32i, !cir.bool loc(#loc311)
                  cir.if %88 {
                    cir.break loc(#loc122)
                  } loc(#loc312)
                } loc(#loc310)
                %50 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc123)
                %51 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc124)
                %52 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc125)
                %53 = cir.ptr_stride(%51 : !cir.ptr<!s8i>, %52 : !u64i), !cir.ptr<!s8i> loc(#loc126)
                %54 = cir.cast(bitcast, %53 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc313)
                %55 = cir.const #cir.int<1> : !u64i loc(#loc314)
                %56 = cir.const #cir.int<100> : !s32i loc(#loc131)
                %57 = cir.cast(integral, %56 : !s32i), !u64i loc(#loc131)
                %58 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc132)
                %59 = cir.binop(sub, %57, %58) : !u64i loc(#loc315)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc133)
                %61 = cir.cast(integral, %60 : !s32i), !u64i loc(#loc133)
                %62 = cir.binop(sub, %59, %61) : !u64i loc(#loc316)
                %63 = cir.binop(mul, %55, %62) : !u64i loc(#loc317)
                %64 = cir.const #cir.int<0> : !s32i loc(#loc135)
                %65 = cir.call @recv(%50, %54, %63, %64) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc136)
                %66 = cir.cast(integral, %65 : !s64i), !s32i loc(#loc136)
                cir.store %66, %15 : !s32i, !cir.ptr<!s32i> loc(#loc318)
                cir.scope {
                  %85 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc141)
                  %86 = cir.const #cir.int<1> : !s32i loc(#loc142)
                  %87 = cir.unary(minus, %86) : !s32i, !s32i loc(#loc142)
                  %88 = cir.cmp(eq, %85, %87) : !s32i, !cir.bool loc(#loc320)
                  %89 = cir.ternary(%88, true {
                    %90 = cir.const #true loc(#loc143)
                    cir.yield %90 : !cir.bool loc(#loc143)
                  }, false {
                    %90 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc144)
                    %91 = cir.const #cir.int<0> : !s32i loc(#loc145)
                    %92 = cir.cmp(eq, %90, %91) : !s32i, !cir.bool loc(#loc321)
                    %93 = cir.ternary(%92, true {
                      %94 = cir.const #true loc(#loc143)
                      cir.yield %94 : !cir.bool loc(#loc143)
                    }, false {
                      %94 = cir.const #false loc(#loc143)
                      cir.yield %94 : !cir.bool loc(#loc143)
                    }) : (!cir.bool) -> !cir.bool loc(#loc143)
                    cir.yield %93 : !cir.bool loc(#loc143)
                  }) : (!cir.bool) -> !cir.bool loc(#loc143)
                  cir.if %89 {
                    cir.break loc(#loc147)
                  } loc(#loc322)
                } loc(#loc319)
                %67 = cir.const #cir.int<0> : !s32i loc(#loc148)
                %68 = cir.cast(integral, %67 : !s32i), !s8i loc(#loc148)
                %69 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc149)
                %70 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc150)
                %71 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc151)
                %72 = cir.cast(integral, %71 : !s32i), !u64i loc(#loc151)
                %73 = cir.const #cir.int<1> : !u64i loc(#loc323)
                %74 = cir.binop(div, %72, %73) : !u64i loc(#loc324)
                %75 = cir.binop(add, %70, %74) : !u64i loc(#loc325)
                %76 = cir.ptr_stride(%69 : !cir.ptr<!s8i>, %75 : !u64i), !cir.ptr<!s8i> loc(#loc154)
                cir.store %68, %76 : !s8i, !cir.ptr<!s8i> loc(#loc326)
                %77 = cir.get_global @strchr : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !s32i)>> loc(#loc155)
                %78 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc156)
                %79 = cir.const #cir.int<13> : !s32i loc(#loc157)
                %80 = cir.call @strchr(%78, %79) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc155)
                cir.store %80, %17 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc327)
                cir.scope {
                  %85 = cir.load %17 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc162)
                  %86 = cir.cast(ptr_to_bool, %85 : !cir.ptr<!s8i>), !cir.bool loc(#loc162)
                  cir.if %86 {
                    %87 = cir.const #cir.int<0> : !s32i loc(#loc164)
                    %88 = cir.cast(integral, %87 : !s32i), !s8i loc(#loc164)
                    %89 = cir.load deref %17 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc165)
                    cir.store %88, %89 : !s8i, !cir.ptr<!s8i> loc(#loc330)
                  } loc(#loc329)
                } loc(#loc328)
                %81 = cir.get_global @strchr : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !s32i)>> loc(#loc167)
                %82 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc168)
                %83 = cir.const #cir.int<10> : !s32i loc(#loc169)
                %84 = cir.call @strchr(%82, %83) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc167)
                cir.store %84, %17 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc331)
                cir.scope {
                  %85 = cir.load %17 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc174)
                  %86 = cir.cast(ptr_to_bool, %85 : !cir.ptr<!s8i>), !cir.bool loc(#loc174)
                  cir.if %86 {
                    %87 = cir.const #cir.int<0> : !s32i loc(#loc176)
                    %88 = cir.cast(integral, %87 : !s32i), !s8i loc(#loc176)
                    %89 = cir.load deref %17 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc177)
                    cir.store %88, %89 : !s8i, !cir.ptr<!s8i> loc(#loc334)
                  } loc(#loc333)
                } loc(#loc332)
                cir.yield loc(#loc60)
              } while {
                %28 = cir.const #cir.int<0> : !s32i loc(#loc179)
                %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc179)
                cir.condition(%29) loc(#loc179)
              } loc(#loc290)
            } loc(#loc290)
            cir.scope {
              %28 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc182)
              %29 = cir.const #cir.int<1> : !s32i loc(#loc183)
              %30 = cir.unary(minus, %29) : !s32i, !s32i loc(#loc183)
              %31 = cir.cmp(ne, %28, %30) : !s32i, !cir.bool loc(#loc336)
              cir.if %31 {
                %32 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc185)
                %33 = cir.call @close(%32) : (!s32i) -> !s32i loc(#loc186)
              } loc(#loc337)
            } loc(#loc335)
            cir.scope {
              %28 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc189)
              %29 = cir.const #cir.int<1> : !s32i loc(#loc190)
              %30 = cir.unary(minus, %29) : !s32i, !s32i loc(#loc190)
              %31 = cir.cmp(ne, %28, %30) : !s32i, !cir.bool loc(#loc339)
              cir.if %31 {
                %32 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc192)
                %33 = cir.call @close(%32) : (!s32i) -> !s32i loc(#loc193)
              } loc(#loc340)
            } loc(#loc338)
          } loc(#loc283)
        } loc(#loc282)
        cir.yield loc(#loc36)
      } step {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc194)
        %16 = cir.unary(inc, %15) : !s32i, !s32i loc(#loc195)
        cir.store %16, %0 : !s32i, !cir.ptr<!s32i> loc(#loc341)
        cir.yield loc(#loc279)
      } loc(#loc279)
    } loc(#loc279)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc25)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc25)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc196)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc196)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc26)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc26)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc197)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc198)
    %13 = cir.call @execlp(%6, %8, %10, %11, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc199)
    cir.return loc(#loc28)
  } loc(#loc275)
  cir.func no_proto @CWE78_OS_Command_Injection__char_listen_socket_execlp_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc343)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc202)
    cir.return loc(#loc201)
  } loc(#loc342)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc344)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc345)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc346)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc210)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc211)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc212)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc213)
  cir.func @main(%arg0: !s32i loc(fused[#loc216, #loc217]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc218, #loc219])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc348)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc349)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc215)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc220)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc220)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc221)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc222)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc222)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc223)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc210)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc210)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc224)
    %8 = cir.get_global @CWE78_OS_Command_Injection__char_listen_socket_execlp_17_good : !cir.ptr<!cir.func<!void ()>> loc(#loc350)
    cir.call @CWE78_OS_Command_Injection__char_listen_socket_execlp_17_good() : () -> () loc(#loc225)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc211)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc211)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc227)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc212)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc212)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc228)
    %13 = cir.get_global @CWE78_OS_Command_Injection__char_listen_socket_execlp_17_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc351)
    cir.call @CWE78_OS_Command_Injection__char_listen_socket_execlp_17_bad() : () -> () loc(#loc229)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc213)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc213)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc231)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc232)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc352)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc352)
    cir.return %17 : !s32i loc(#loc352)
  } loc(#loc347)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc353)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc236)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc355)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc356)
    %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc263)
    %3 = cir.get_global @__const.goodG2B.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc263)
    cir.copy %3 to %2 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc263)
    %4 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc243)
    cir.store %4, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc357)
    cir.scope {
      %14 = cir.const #cir.int<0> : !s32i loc(#loc247)
      cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc359)
      cir.for : cond {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc249)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc250)
        %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc360)
        cir.condition(%17) loc(#loc251)
      } body {
        cir.scope {
          %15 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc253)
          %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc254)
          %17 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc236)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc236)
          %19 = cir.call @strcat(%16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc253)
        } loc(#loc361)
        cir.yield loc(#loc246)
      } step {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc255)
        %16 = cir.unary(inc, %15) : !s32i, !s32i loc(#loc256)
        cir.store %16, %0 : !s32i, !cir.ptr<!s32i> loc(#loc362)
        cir.yield loc(#loc358)
      } loc(#loc358)
    } loc(#loc358)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc257)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc257)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc258)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc258)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc259)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc259)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc260)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc261)
    %13 = cir.call @execlp(%6, %8, %10, %11, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc262)
    cir.return loc(#loc238)
  } loc(#loc354)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s04/CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":0:0)
#loc1 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":168:5)
#loc2 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":168:28)
#loc3 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":69:5)
#loc4 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":69:28)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("/usr/include/sys/socket.h":102:1)
#loc8 = loc("/usr/include/sys/socket.h":102:62)
#loc9 = loc("/usr/include/netinet/in.h":404:1)
#loc10 = loc("/usr/include/netinet/in.h":405:40)
#loc11 = loc("/usr/include/sys/socket.h":112:1)
#loc12 = loc("/usr/include/sys/socket.h":113:6)
#loc13 = loc("/usr/include/sys/socket.h":296:1)
#loc14 = loc("/usr/include/sys/socket.h":296:39)
#loc15 = loc("/usr/include/sys/socket.h":306:1)
#loc16 = loc("/usr/include/sys/socket.h":307:38)
#loc17 = loc("/usr/include/sys/socket.h":145:1)
#loc18 = loc("/usr/include/sys/socket.h":145:68)
#loc19 = loc("/usr/include/string.h":246:1)
#loc20 = loc("/usr/include/string.h":247:33)
#loc21 = loc("/usr/include/unistd.h":358:1)
#loc22 = loc("/usr/include/unistd.h":358:27)
#loc23 = loc("/usr/include/unistd.h":605:1)
#loc24 = loc("/usr/include/unistd.h":606:14)
#loc25 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":156:12)
#loc26 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":156:38)
#loc27 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":65:1)
#loc28 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":157:1)
#loc29 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":67:5)
#loc30 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":67:9)
#loc31 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":68:5)
#loc32 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":68:12)
#loc33 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":70:12)
#loc34 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":70:5)
#loc35 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":71:5)
#loc36 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":152:5)
#loc37 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":71:13)
#loc38 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":71:9)
#loc39 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":71:16)
#loc40 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":71:20)
#loc41 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":71:18)
#loc42 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":72:5)
#loc43 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":73:9)
#loc44 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":151:9)
#loc45 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":78:13)
#loc46 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":78:17)
#loc47 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":79:13)
#loc48 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":79:32)
#loc49 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":80:13)
#loc50 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":80:19)
#loc51 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":81:13)
#loc52 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":81:35)
#loc53 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":82:13)
#loc54 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":82:35)
#loc55 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":83:13)
#loc56 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":83:41)
#loc57 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":83:30)
#loc58 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":83:37)
#loc59 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":84:13)
#loc60 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":136:21)
#loc61 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":94:39)
#loc62 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":94:48)
#loc63 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":94:61)
#loc64 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":94:32)
#loc65 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":94:17)
#loc66 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":94:72)
#loc67 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":95:17)
#loc68 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":98:17)
#loc69 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":95:21)
#loc70 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":95:37)
#loc71 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":96:17)
#loc72 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":97:21)
#loc73 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":99:24)
#loc74 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":99:25)
#loc75 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":99:34)
#loc76 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":99:37)
#loc77 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":99:51)
#loc78 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":99:17)
#loc79 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":99:52)
#loc80 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":100:38)
#loc81 = loc("/usr/include/netinet/in.h":249:5)
#loc82 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":100:17)
#loc83 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":101:43)
#loc84 = loc("/usr/include/netinet/in.h":251:20)
#loc85 = loc("/usr/include/netinet/in.h":33:15)
#loc86 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":101:17)
#loc87 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":102:42)
#loc88 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":102:36)
#loc89 = loc("/usr/include/netinet/in.h":250:15)
#loc90 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":102:17)
#loc91 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":102:50)
#loc92 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":103:17)
#loc93 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":106:17)
#loc94 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":103:26)
#loc95 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":103:58)
#loc96 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":103:59)
#loc97 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":103:68)
#loc98 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":103:82)
#loc99 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":103:21)
#loc100 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":103:88)
#loc101 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":104:17)
#loc102 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":105:21)
#loc103 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":107:17)
#loc104 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":110:17)
#loc105 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":107:28)
#loc106 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":107:42)
#loc107 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":107:21)
#loc108 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":107:61)
#loc109 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":108:17)
#loc110 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":109:21)
#loc111 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":111:39)
#loc112 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":111:53)
#loc113 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":111:59)
#loc114 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":111:32)
#loc115 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":111:17)
#loc116 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":111:63)
#loc117 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":112:17)
#loc118 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":115:17)
#loc119 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":112:21)
#loc120 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":112:37)
#loc121 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":113:17)
#loc122 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":114:21)
#loc123 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":117:35)
#loc124 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":117:58)
#loc125 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":117:65)
#loc126 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":117:63)
#loc127 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":117:49)
#loc128 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":117:72)
#loc129 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":117:75)
#loc130 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":117:86)
#loc131 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":117:91)
#loc132 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":117:97)
#loc133 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":117:107)
#loc134 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":117:108)
#loc135 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":117:111)
#loc136 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":117:30)
#loc137 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":117:17)
#loc138 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":117:112)
#loc139 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":118:17)
#loc140 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":121:17)
#loc141 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":118:21)
#loc142 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":118:35)
#loc143 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":118:48)
#loc144 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":118:51)
#loc145 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":118:65)
#loc146 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":119:17)
#loc147 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":120:21)
#loc148 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":123:61)
#loc149 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":123:17)
#loc150 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":123:22)
#loc151 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":123:32)
#loc152 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":123:45)
#loc153 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":123:56)
#loc154 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":123:57)
#loc155 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":125:27)
#loc156 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":125:34)
#loc157 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":125:40)
#loc158 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":125:17)
#loc159 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":125:44)
#loc160 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":126:17)
#loc161 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":129:17)
#loc162 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":126:21)
#loc163 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":127:17)
#loc164 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":128:32)
#loc165 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":128:22)
#loc166 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":128:21)
#loc167 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":130:27)
#loc168 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":130:34)
#loc169 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":130:40)
#loc170 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":130:17)
#loc171 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":130:44)
#loc172 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":131:17)
#loc173 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":134:17)
#loc174 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":131:21)
#loc175 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":132:17)
#loc176 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":133:32)
#loc177 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":133:22)
#loc178 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":133:21)
#loc179 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":136:20)
#loc180 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":137:13)
#loc181 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":140:13)
#loc182 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":137:17)
#loc183 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":137:33)
#loc184 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":138:13)
#loc185 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":139:30)
#loc186 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":139:17)
#loc187 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":141:13)
#loc188 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":144:13)
#loc189 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":141:17)
#loc190 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":141:33)
#loc191 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":142:13)
#loc192 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":143:30)
#loc193 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":143:17)
#loc194 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":71:24)
#loc195 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":71:23)
#loc196 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":156:25)
#loc197 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":156:52)
#loc198 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":156:66)
#loc199 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":156:5)
#loc200 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":181:1)
#loc201 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":184:1)
#loc202 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":183:5)
#loc203 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":183:13)
#loc204 = loc("/usr/include/stdlib.h":575:1)
#loc205 = loc("/usr/include/stdlib.h":575:41)
#loc206 = loc("/usr/include/time.h":76:1)
#loc207 = loc("/usr/include/time.h":76:38)
#loc208 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc209 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc210 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":201:15)
#loc211 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":203:15)
#loc212 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":206:15)
#loc213 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":208:15)
#loc214 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":196:1)
#loc215 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":211:1)
#loc220 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":197:1)
#loc221 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":199:27)
#loc222 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":199:22)
#loc223 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":199:5)
#loc224 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":201:5)
#loc225 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":202:5)
#loc226 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":202:67)
#loc227 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":203:5)
#loc228 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":206:5)
#loc229 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":207:5)
#loc230 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":207:66)
#loc231 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":208:5)
#loc232 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":210:12)
#loc233 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":210:5)
#loc234 = loc("/usr/include/string.h":149:1)
#loc235 = loc("/usr/include/string.h":150:14)
#loc236 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":173:22)
#loc237 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":164:1)
#loc238 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":179:1)
#loc239 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":166:5)
#loc240 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":166:9)
#loc241 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":167:5)
#loc242 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":167:12)
#loc243 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":169:12)
#loc244 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":169:5)
#loc245 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":170:5)
#loc246 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":174:5)
#loc247 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":170:13)
#loc248 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":170:9)
#loc249 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":170:16)
#loc250 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":170:20)
#loc251 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":170:18)
#loc252 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":171:5)
#loc253 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":173:9)
#loc254 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":173:16)
#loc255 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":170:24)
#loc256 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":170:23)
#loc257 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":178:12)
#loc258 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":178:25)
#loc259 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":178:38)
#loc260 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":178:52)
#loc261 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":178:66)
#loc262 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_17.c":178:5)
#loc263 = loc(fused[#loc1, #loc2])
#loc264 = loc(fused[#loc3, #loc4])
#loc265 = loc(fused[#loc5, #loc6])
#loc266 = loc(fused[#loc7, #loc8])
#loc267 = loc(fused[#loc9, #loc10])
#loc268 = loc(fused[#loc11, #loc12])
#loc269 = loc(fused[#loc13, #loc14])
#loc270 = loc(fused[#loc15, #loc16])
#loc271 = loc(fused[#loc17, #loc18])
#loc272 = loc(fused[#loc19, #loc20])
#loc273 = loc(fused[#loc21, #loc22])
#loc274 = loc(fused[#loc23, #loc24])
#loc275 = loc(fused[#loc27, #loc28])
#loc276 = loc(fused[#loc29, #loc30])
#loc277 = loc(fused[#loc31, #loc32])
#loc278 = loc(fused[#loc34, #loc33])
#loc279 = loc(fused[#loc35, #loc36])
#loc280 = loc(fused[#loc38, #loc37])
#loc281 = loc(fused[#loc39, #loc40])
#loc282 = loc(fused[#loc42, #loc36])
#loc283 = loc(fused[#loc43, #loc44])
#loc284 = loc(fused[#loc45, #loc46])
#loc285 = loc(fused[#loc47, #loc48])
#loc286 = loc(fused[#loc49, #loc50])
#loc287 = loc(fused[#loc51, #loc52])
#loc288 = loc(fused[#loc53, #loc54])
#loc289 = loc(fused[#loc55, #loc56])
#loc290 = loc(fused[#loc59, #loc60])
#loc291 = loc(fused[#loc65, #loc66])
#loc292 = loc(fused[#loc67, #loc68])
#loc293 = loc(fused[#loc69, #loc70])
#loc294 = loc(fused[#loc71, #loc68])
#loc295 = loc(fused[#loc73, #loc74])
#loc296 = loc(fused[#loc76, #loc77])
#loc297 = loc(fused[#loc78, #loc79])
#loc298 = loc(fused[#loc82, #loc80])
#loc299 = loc(fused[#loc86, #loc83])
#loc300 = loc(fused[#loc90, #loc91])
#loc301 = loc(fused[#loc92, #loc93])
#loc302 = loc(fused[#loc95, #loc96])
#loc303 = loc(fused[#loc97, #loc98])
#loc304 = loc(fused[#loc99, #loc100])
#loc305 = loc(fused[#loc101, #loc93])
#loc306 = loc(fused[#loc103, #loc104])
#loc307 = loc(fused[#loc107, #loc108])
#loc308 = loc(fused[#loc109, #loc104])
#loc309 = loc(fused[#loc115, #loc116])
#loc310 = loc(fused[#loc117, #loc118])
#loc311 = loc(fused[#loc119, #loc120])
#loc312 = loc(fused[#loc121, #loc118])
#loc313 = loc(fused[#loc127, #loc128])
#loc314 = loc(fused[#loc129, #loc130])
#loc315 = loc(fused[#loc131, #loc132])
#loc316 = loc(fused[#loc131, #loc133])
#loc317 = loc(fused[#loc129, #loc134])
#loc318 = loc(fused[#loc137, #loc138])
#loc319 = loc(fused[#loc139, #loc140])
#loc320 = loc(fused[#loc141, #loc142])
#loc321 = loc(fused[#loc144, #loc145])
#loc322 = loc(fused[#loc146, #loc140])
#loc323 = loc(fused[#loc152, #loc153])
#loc324 = loc(fused[#loc151, #loc153])
#loc325 = loc(fused[#loc150, #loc153])
#loc326 = loc(fused[#loc149, #loc148])
#loc327 = loc(fused[#loc158, #loc159])
#loc328 = loc(fused[#loc160, #loc161])
#loc329 = loc(fused[#loc163, #loc161])
#loc330 = loc(fused[#loc166, #loc164])
#loc331 = loc(fused[#loc170, #loc171])
#loc332 = loc(fused[#loc172, #loc173])
#loc333 = loc(fused[#loc175, #loc173])
#loc334 = loc(fused[#loc178, #loc176])
#loc335 = loc(fused[#loc180, #loc181])
#loc336 = loc(fused[#loc182, #loc183])
#loc337 = loc(fused[#loc184, #loc181])
#loc338 = loc(fused[#loc187, #loc188])
#loc339 = loc(fused[#loc189, #loc190])
#loc340 = loc(fused[#loc191, #loc188])
#loc341 = loc(fused[#loc195, #loc194])
#loc342 = loc(fused[#loc200, #loc201])
#loc343 = loc(fused[#loc202, #loc203])
#loc344 = loc(fused[#loc204, #loc205])
#loc345 = loc(fused[#loc206, #loc207])
#loc346 = loc(fused[#loc208, #loc209])
#loc347 = loc(fused[#loc214, #loc215])
#loc350 = loc(fused[#loc225, #loc226])
#loc351 = loc(fused[#loc229, #loc230])
#loc352 = loc(fused[#loc233, #loc232])
#loc353 = loc(fused[#loc234, #loc235])
#loc354 = loc(fused[#loc237, #loc238])
#loc355 = loc(fused[#loc239, #loc240])
#loc356 = loc(fused[#loc241, #loc242])
#loc357 = loc(fused[#loc244, #loc243])
#loc358 = loc(fused[#loc245, #loc246])
#loc359 = loc(fused[#loc248, #loc247])
#loc360 = loc(fused[#loc249, #loc250])
#loc361 = loc(fused[#loc252, #loc246])
#loc362 = loc(fused[#loc256, #loc255])
