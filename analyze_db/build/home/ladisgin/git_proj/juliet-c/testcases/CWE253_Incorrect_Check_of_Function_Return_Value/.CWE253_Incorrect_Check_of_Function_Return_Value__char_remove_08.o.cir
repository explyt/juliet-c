!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @remove(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc68)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"removemebad.txt\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc3)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"remove failed!\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08_bad() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc71)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc72)
    %1 = cir.call %0() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc11)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc11)
    cir.brcond %2 ^bb2, ^bb7 loc(#loc73)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc74)
  ^bb3:  // pred: ^bb2
    %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc3)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc3)
    %5 = cir.call @remove(%4) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc16)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc17)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc75)
    cir.brcond %7 ^bb4, ^bb5 loc(#loc76)
  ^bb4:  // pred: ^bb3
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc6)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc6)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc19)
    cir.br ^bb5 loc(#loc15)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc15)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc10)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc10)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc8)
  } loc(#loc70)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc78)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc22)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc79)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc24)
    cir.return loc(#loc21)
  } loc(#loc77)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc27)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc28)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc81)
    cir.return %2 : !s32i loc(#loc81)
  } loc(#loc80)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc30)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"removemegood.txt\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc31)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc83)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc84)
    %1 = cir.call %0() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc36)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc36)
    cir.brcond %2 ^bb2, ^bb3 loc(#loc85)
  ^bb2:  // pred: ^bb1
    %3 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc30)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc30)
    cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc41)
    cir.br ^bb8 loc(#loc39)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc86)
  ^bb4:  // pred: ^bb3
    %5 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc31)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc31)
    %7 = cir.call @remove(%6) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc44)
    %8 = cir.const #cir.int<0> : !s32i loc(#loc45)
    %9 = cir.cmp(ne, %7, %8) : !s32i, !cir.bool loc(#loc87)
    cir.brcond %9 ^bb5, ^bb6 loc(#loc88)
  ^bb5:  // pred: ^bb4
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc47)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    cir.br ^bb6 loc(#loc43)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc43)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc35)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc35)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc33)
  } loc(#loc82)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc50)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc51)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc90)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc90)
    cir.return %2 : !s32i loc(#loc90)
  } loc(#loc89)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc92)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc93)
    %1 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc57)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc57)
    cir.brcond %2 ^bb2, ^bb7 loc(#loc94)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc95)
  ^bb3:  // pred: ^bb2
    %3 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc62)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc62)
    %5 = cir.call @remove(%4) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc63)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc64)
    %7 = cir.cmp(ne, %5, %6) : !s32i, !cir.bool loc(#loc96)
    cir.brcond %7 ^bb4, ^bb5 loc(#loc97)
  ^bb4:  // pred: ^bb3
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc66)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    cir.br ^bb5 loc(#loc61)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc61)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc56)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc56)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc54)
  } loc(#loc91)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":0:0)
#loc1 = loc("/usr/include/stdio.h":158:1)
#loc2 = loc("/usr/include/stdio.h":158:44)
#loc3 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":49:20)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc6 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":51:23)
#loc7 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":43:1)
#loc8 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":54:1)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":45:5)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":53:5)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":45:8)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":45:26)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":46:5)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":49:9)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":52:9)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":49:13)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":49:42)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":50:9)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":51:13)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":91:1)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":95:1)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":93:5)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":93:11)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":94:5)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":94:11)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":31:1)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":34:1)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":33:12)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":33:5)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":66:19)
#loc31 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":71:20)
#loc32 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":61:1)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":76:1)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":63:5)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":75:5)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":63:8)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":63:27)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":64:5)
#loc39 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":67:5)
#loc40 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":69:5)
#loc41 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":66:9)
#loc42 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":71:9)
#loc43 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":74:9)
#loc44 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":71:13)
#loc45 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":71:43)
#loc46 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":72:9)
#loc47 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":73:23)
#loc48 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":73:13)
#loc49 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":36:1)
#loc50 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":39:1)
#loc51 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":38:12)
#loc52 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":38:5)
#loc53 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":79:1)
#loc54 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":89:1)
#loc55 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":81:5)
#loc56 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":88:5)
#loc57 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":81:8)
#loc58 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":81:26)
#loc59 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":82:5)
#loc60 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":84:9)
#loc61 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":87:9)
#loc62 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":84:20)
#loc63 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":84:13)
#loc64 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":84:43)
#loc65 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":85:9)
#loc66 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":86:23)
#loc67 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_08.c":86:13)
#loc68 = loc(fused[#loc1, #loc2])
#loc69 = loc(fused[#loc4, #loc5])
#loc70 = loc(fused[#loc7, #loc8])
#loc71 = loc(fused[#loc9, #loc10])
#loc72 = loc(fused[#loc11, #loc12])
#loc73 = loc(fused[#loc13, #loc10])
#loc74 = loc(fused[#loc14, #loc15])
#loc75 = loc(fused[#loc16, #loc17])
#loc76 = loc(fused[#loc18, #loc15])
#loc77 = loc(fused[#loc20, #loc21])
#loc78 = loc(fused[#loc22, #loc23])
#loc79 = loc(fused[#loc24, #loc25])
#loc80 = loc(fused[#loc26, #loc27])
#loc81 = loc(fused[#loc29, #loc28])
#loc82 = loc(fused[#loc32, #loc33])
#loc83 = loc(fused[#loc34, #loc35])
#loc84 = loc(fused[#loc36, #loc37])
#loc85 = loc(fused[#loc38, #loc39, #loc40, #loc35])
#loc86 = loc(fused[#loc42, #loc43])
#loc87 = loc(fused[#loc44, #loc45])
#loc88 = loc(fused[#loc46, #loc43])
#loc89 = loc(fused[#loc49, #loc50])
#loc90 = loc(fused[#loc52, #loc51])
#loc91 = loc(fused[#loc53, #loc54])
#loc92 = loc(fused[#loc55, #loc56])
#loc93 = loc(fused[#loc57, #loc58])
#loc94 = loc(fused[#loc59, #loc56])
#loc95 = loc(fused[#loc60, #loc61])
#loc96 = loc(fused[#loc63, #loc64])
#loc97 = loc(fused[#loc65, #loc61])
