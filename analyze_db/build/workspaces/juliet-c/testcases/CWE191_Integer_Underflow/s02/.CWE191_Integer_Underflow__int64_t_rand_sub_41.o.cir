!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":22:21)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":22:29)
#loc38 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":64:25)
#loc39 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":64:33)
#loc66 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":45:25)
#loc67 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":45:33)
#loc90 = loc(fused[#loc7, #loc8])
#loc102 = loc(fused[#loc38, #loc39])
#loc112 = loc(fused[#loc66, #loc67])
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int64_t_rand_sub_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc87)
  cir.func private @printLongLongLine(!s64i) loc(#loc88)
  cir.func internal private @badSink(%arg0: !s64i loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc90)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc9)
    cir.scope {
      %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc92)
      %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc14)
      %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
      %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc13)
      %5 = cir.binop(sub, %2, %4) nsw : !s64i loc(#loc14)
      cir.store %5, %1 : !s64i, !cir.ptr<!s64i> loc(#loc92)
      %6 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc15)
      cir.call @printLongLongLine(%6) : (!s64i) -> () loc(#loc16)
    } loc(#loc91)
    cir.return loc(#loc6)
  } loc(#loc89)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_sub_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc94)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc21)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc95)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc23)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc23)
    %6 = cir.ternary(%5, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc23)
      %11 = cir.const #cir.int<60> : !s32i loc(#loc23)
      %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc23)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc23)
      %15 = cir.const #cir.int<45> : !s32i loc(#loc23)
      %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc23)
      %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc23)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc23)
      %20 = cir.const #cir.int<30> : !s32i loc(#loc23)
      %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc23)
      %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc23)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc23)
      %25 = cir.const #cir.int<15> : !s32i loc(#loc23)
      %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc23)
      %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc23)
      %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
      %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc23)
      %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc23)
      cir.yield %30 : !u64i loc(#loc23)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc23)
      %11 = cir.const #cir.int<60> : !s32i loc(#loc23)
      %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc23)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc23)
      %15 = cir.const #cir.int<45> : !s32i loc(#loc23)
      %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc23)
      %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc23)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc23)
      %20 = cir.const #cir.int<30> : !s32i loc(#loc23)
      %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc23)
      %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc23)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc23)
      %25 = cir.const #cir.int<15> : !s32i loc(#loc23)
      %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc23)
      %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc23)
      %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
      %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc23)
      %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc23)
      %31 = cir.unary(minus, %30) : !u64i, !u64i loc(#loc23)
      %32 = cir.const #cir.int<1> : !s32i loc(#loc23)
      %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc23)
      %34 = cir.binop(sub, %31, %33) : !u64i loc(#loc23)
      cir.yield %34 : !u64i loc(#loc23)
    }) : (!cir.bool) -> !u64i loc(#loc23)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc23)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc96)
    %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc25)
    cir.call @badSink(%8) : (!s64i) -> () loc(#loc26)
    cir.return loc(#loc18)
  } loc(#loc93)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_sub_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc98)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc99)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc97)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc100)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc35)
  cir.func internal private @goodB2GSink(%arg0: !s64i loc(fused[#loc38, #loc39])) extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc102)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc40)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc43)
      %2 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc44)
      %3 = cir.unary(minus, %2) nsw : !s64i, !s64i loc(#loc44)
      %4 = cir.const #cir.int<1> : !s64i loc(#loc44)
      %5 = cir.binop(sub, %3, %4) nsw : !s64i loc(#loc44)
      %6 = cir.cmp(gt, %1, %5) : !s64i, !cir.bool loc(#loc104)
      cir.if %6 {
        %7 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc106)
        %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc50)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc49)
        %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc49)
        %11 = cir.binop(sub, %8, %10) nsw : !s64i loc(#loc50)
        cir.store %11, %7 : !s64i, !cir.ptr<!s64i> loc(#loc106)
        %12 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc51)
        cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc52)
      } else {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc35)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc35)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc53)
      } loc(#loc105)
    } loc(#loc103)
    cir.return loc(#loc37)
  } loc(#loc101)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc108)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc58)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc109)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc60)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc60)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc60)
    %6 = cir.ternary(%5, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc60)
      %11 = cir.const #cir.int<60> : !s32i loc(#loc60)
      %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc60)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc60)
      %15 = cir.const #cir.int<45> : !s32i loc(#loc60)
      %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc60)
      %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc60)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc60)
      %20 = cir.const #cir.int<30> : !s32i loc(#loc60)
      %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc60)
      %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc60)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc60)
      %25 = cir.const #cir.int<15> : !s32i loc(#loc60)
      %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc60)
      %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc60)
      %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
      %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc60)
      %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc60)
      cir.yield %30 : !u64i loc(#loc60)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc60)
      %11 = cir.const #cir.int<60> : !s32i loc(#loc60)
      %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc60)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc60)
      %15 = cir.const #cir.int<45> : !s32i loc(#loc60)
      %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc60)
      %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc60)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc60)
      %20 = cir.const #cir.int<30> : !s32i loc(#loc60)
      %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc60)
      %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc60)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc60)
      %25 = cir.const #cir.int<15> : !s32i loc(#loc60)
      %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc60)
      %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc60)
      %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
      %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc60)
      %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc60)
      %31 = cir.unary(minus, %30) : !u64i, !u64i loc(#loc60)
      %32 = cir.const #cir.int<1> : !s32i loc(#loc60)
      %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc60)
      %34 = cir.binop(sub, %31, %33) : !u64i loc(#loc60)
      cir.yield %34 : !u64i loc(#loc60)
    }) : (!cir.bool) -> !u64i loc(#loc60)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc60)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc110)
    %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc62)
    cir.call @goodB2GSink(%8) : (!s64i) -> () loc(#loc63)
    cir.return loc(#loc55)
  } loc(#loc107)
  cir.func internal private @goodG2BSink(%arg0: !s64i loc(fused[#loc66, #loc67])) extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc112)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc68)
    cir.scope {
      %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc114)
      %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc73)
      %3 = cir.const #cir.int<1> : !s32i loc(#loc72)
      %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc72)
      %5 = cir.binop(sub, %2, %4) nsw : !s64i loc(#loc73)
      cir.store %5, %1 : !s64i, !cir.ptr<!s64i> loc(#loc114)
      %6 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc74)
      cir.call @printLongLongLine(%6) : (!s64i) -> () loc(#loc75)
    } loc(#loc113)
    cir.return loc(#loc65)
  } loc(#loc111)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc116)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc80)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc117)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc82)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc83)
    %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc83)
    cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc118)
    %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc85)
    cir.call @goodG2BSink(%5) : (!s64i) -> () loc(#loc86)
    cir.return loc(#loc77)
  } loc(#loc115)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int64_t_rand_sub_41.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":29:1)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":23:1)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":24:5)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":28:5)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":26:9)
#loc13 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":26:33)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":26:26)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":27:27)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":27:9)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":31:1)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":38:1)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":33:5)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":33:13)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":34:12)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":34:5)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":36:21)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":36:5)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":37:13)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":37:5)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":87:1)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":91:1)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":89:5)
#loc30 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":89:13)
#loc31 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":90:5)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":90:13)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc35 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":74:19)
#loc36 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":64:1)
#loc37 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":76:1)
#loc40 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":65:1)
#loc41 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":67:5)
#loc42 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":75:5)
#loc43 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":67:9)
#loc44 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":67:16)
#loc45 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":68:5)
#loc46 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":71:5)
#loc47 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":73:5)
#loc48 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":69:9)
#loc49 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":69:33)
#loc50 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":69:26)
#loc51 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":70:27)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":70:9)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":74:9)
#loc54 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":78:1)
#loc55 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":85:1)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":80:5)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":80:13)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":81:12)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":81:5)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":83:21)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":83:5)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":84:17)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":84:5)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":45:1)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":52:1)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":46:1)
#loc69 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":47:5)
#loc70 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":51:5)
#loc71 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":49:9)
#loc72 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":49:33)
#loc73 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":49:26)
#loc74 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":50:27)
#loc75 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":50:9)
#loc76 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":54:1)
#loc77 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":61:1)
#loc78 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":56:5)
#loc79 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":56:13)
#loc80 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":57:12)
#loc81 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":57:5)
#loc82 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":59:13)
#loc83 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":59:12)
#loc84 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":59:5)
#loc85 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":60:17)
#loc86 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_41.c":60:5)
#loc87 = loc(fused[#loc1, #loc2])
#loc88 = loc(fused[#loc3, #loc4])
#loc89 = loc(fused[#loc5, #loc6])
#loc91 = loc(fused[#loc10, #loc11])
#loc92 = loc(fused[#loc12, #loc13])
#loc93 = loc(fused[#loc17, #loc18])
#loc94 = loc(fused[#loc19, #loc20])
#loc95 = loc(fused[#loc22, #loc21])
#loc96 = loc(fused[#loc24, #loc23])
#loc97 = loc(fused[#loc27, #loc28])
#loc98 = loc(fused[#loc29, #loc30])
#loc99 = loc(fused[#loc31, #loc32])
#loc100 = loc(fused[#loc33, #loc34])
#loc101 = loc(fused[#loc36, #loc37])
#loc103 = loc(fused[#loc41, #loc42])
#loc104 = loc(fused[#loc43, #loc44])
#loc105 = loc(fused[#loc45, #loc46, #loc47, #loc42])
#loc106 = loc(fused[#loc48, #loc49])
#loc107 = loc(fused[#loc54, #loc55])
#loc108 = loc(fused[#loc56, #loc57])
#loc109 = loc(fused[#loc59, #loc58])
#loc110 = loc(fused[#loc61, #loc60])
#loc111 = loc(fused[#loc64, #loc65])
#loc113 = loc(fused[#loc69, #loc70])
#loc114 = loc(fused[#loc71, #loc72])
#loc115 = loc(fused[#loc76, #loc77])
#loc116 = loc(fused[#loc78, #loc79])
#loc117 = loc(fused[#loc81, #loc80])
#loc118 = loc(fused[#loc84, #loc82])
