!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_square_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc128)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc129)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc130)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc131)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc132)
  cir.func @_ZN44CWE190_Integer_Overflow__int_fgets_square_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc134)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc135)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc17)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc18)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc136)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc138)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc138)
      cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc138)
      cir.scope {
        %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc26)
        %6 = cir.const #cir.int<3> : !s32i loc(#loc27)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc27)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc27)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc27)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc27)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc27)
        %12 = cir.binop(add, %9, %11) : !u64i loc(#loc27)
        %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc27)
        %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc129)
        %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc28)
        %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc29)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc30)
        %18 = cir.cmp(ne, %16, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc140)
        cir.if %18 {
          %19 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc34)
          %20 = cir.call @atoi(%19) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc35)
          cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc142)
        } else {
          %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc38)
        } loc(#loc141)
      } loc(#loc139)
    } loc(#loc137)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc144)
      %4 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc42)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc42)
      cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc144)
      cir.scope {
        %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc146)
        %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc47)
        %8 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc46)
        %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc47)
        cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc146)
        %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc48)
        cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc49)
      } loc(#loc145)
    } loc(#loc143)
    cir.return loc(#loc13)
  } loc(#loc133)
  cir.func internal private @_ZN44CWE190_Integer_Overflow__int_fgets_square_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc148)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc149)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc55)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc56)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc150)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc58)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc151)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc153)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc63)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc63)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc153)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc155)
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc68)
        %9 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc67)
        %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc68)
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc155)
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc69)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc70)
      } loc(#loc154)
    } loc(#loc152)
    cir.return loc(#loc51)
  } loc(#loc147)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc72)
  cir.func internal private @_ZN44CWE190_Integer_Overflow__int_fgets_square_33L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc157)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc158)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc78)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc79)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc159)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc161)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc161)
      cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc161)
      cir.scope {
        %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc87)
        %6 = cir.const #cir.int<3> : !s32i loc(#loc88)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc88)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc88)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc88)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc88)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc88)
        %12 = cir.binop(add, %9, %11) : !u64i loc(#loc88)
        %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc88)
        %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc129)
        %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc89)
        %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc90)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc91)
        %18 = cir.cmp(ne, %16, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc163)
        cir.if %18 {
          %19 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc95)
          %20 = cir.call @atoi(%19) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc96)
          cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc165)
        } else {
          %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc99)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc99)
          cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc100)
        } loc(#loc164)
      } loc(#loc162)
    } loc(#loc160)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc167)
      %4 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc104)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc104)
      cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc167)
      cir.scope {
        %6 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc107)
        %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc108)
        %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc108)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc108)
        %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc108)
        %11 = cir.cmp(gt, %6, %10) : !s32i, !cir.bool loc(#loc169)
        %12 = cir.ternary(%11, true {
          %13 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc110)
          %14 = cir.abs %13 poison : !s32i loc(#loc111)
          %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc111)
          %16 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc112)
          %17 = cir.const #cir.int<2147483647> : !s32i loc(#loc113)
          %18 = cir.cast(int_to_float, %17 : !s32i), !cir.double loc(#loc113)
          %19 = cir.call @sqrt(%18) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc112)
          %20 = cir.cast(float_to_int, %19 : !cir.double), !s64i loc(#loc112)
          %21 = cir.cmp(lt, %15, %20) : !s64i, !cir.bool loc(#loc170)
          %22 = cir.ternary(%21, true {
            %23 = cir.const #true loc(#loc109)
            cir.yield %23 : !cir.bool loc(#loc109)
          }, false {
            %23 = cir.const #false loc(#loc109)
            cir.yield %23 : !cir.bool loc(#loc109)
          }) : (!cir.bool) -> !cir.bool loc(#loc109)
          cir.yield %22 : !cir.bool loc(#loc109)
        }, false {
          %13 = cir.const #false loc(#loc109)
          cir.yield %13 : !cir.bool loc(#loc109)
        }) : (!cir.bool) -> !cir.bool loc(#loc109)
        cir.if %12 {
          %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc172)
          %14 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc120)
          %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc119)
          %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc120)
          cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc172)
          %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc121)
          cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc122)
        } else {
          %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc72)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc72)
          cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc123)
        } loc(#loc171)
      } loc(#loc168)
    } loc(#loc166)
    cir.return loc(#loc74)
  } loc(#loc156)
  cir.func @_ZN44CWE190_Integer_Overflow__int_fgets_square_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN44CWE190_Integer_Overflow__int_fgets_square_33L7goodG2BEv() : () -> () loc(#loc126)
    cir.call @_ZN44CWE190_Integer_Overflow__int_fgets_square_33L7goodB2GEv() : () -> () loc(#loc127)
    cir.return loc(#loc125)
  } loc(#loc173)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_square_33.cpp":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":45:23)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":29:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":56:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":31:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":31:9)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":32:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":32:20)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":34:12)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":34:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":35:5)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":47:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":36:9)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":36:45)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":38:9)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":46:9)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":38:19)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":38:32)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":38:49)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":38:13)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":38:59)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":39:9)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":42:9)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":44:9)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":41:25)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":41:20)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":41:13)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":41:36)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":45:13)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":48:5)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":55:5)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":49:9)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":49:20)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":50:9)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":54:9)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":52:13)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":52:33)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":52:26)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":53:26)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":53:13)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":63:1)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":79:1)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":65:5)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":65:9)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":66:5)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":66:20)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":68:12)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":68:5)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":70:12)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":70:5)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":71:5)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":78:5)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":72:9)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":72:20)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":73:9)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":77:9)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":75:13)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":75:33)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":75:26)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":76:26)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":76:13)
#loc71 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":111:23)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":82:1)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":114:1)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":84:5)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":84:9)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":85:5)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":85:20)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":87:12)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":87:5)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":88:5)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":100:5)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":89:9)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":89:45)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":91:9)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":99:9)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":91:19)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":91:32)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":91:49)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":91:13)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":91:59)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":92:9)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":95:9)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":97:9)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":94:25)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":94:20)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":94:13)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":94:36)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":98:23)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":98:13)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":101:5)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":113:5)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":102:9)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":102:20)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":104:9)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":112:9)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":104:13)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":104:20)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":104:28)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":104:35)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":104:31)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":104:49)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":104:62)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":104:69)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":105:9)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":108:9)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":110:9)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":106:13)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":106:33)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":106:26)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":107:26)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":107:13)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":111:13)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":116:1)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":120:1)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":118:5)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_square_33.cpp":119:5)
#loc128 = loc(fused[#loc1, #loc2])
#loc129 = loc(fused[#loc3, #loc4])
#loc130 = loc(fused[#loc5, #loc6])
#loc131 = loc(fused[#loc7, #loc8])
#loc132 = loc(fused[#loc10, #loc11])
#loc133 = loc(fused[#loc12, #loc13])
#loc134 = loc(fused[#loc14, #loc15])
#loc135 = loc(fused[#loc16, #loc17])
#loc136 = loc(fused[#loc19, #loc18])
#loc137 = loc(fused[#loc20, #loc21])
#loc138 = loc(fused[#loc22, #loc23])
#loc139 = loc(fused[#loc24, #loc25])
#loc140 = loc(fused[#loc29, #loc30])
#loc141 = loc(fused[#loc31, #loc32, #loc33, #loc25])
#loc142 = loc(fused[#loc36, #loc37])
#loc143 = loc(fused[#loc39, #loc40])
#loc144 = loc(fused[#loc41, #loc42])
#loc145 = loc(fused[#loc43, #loc44])
#loc146 = loc(fused[#loc45, #loc46])
#loc147 = loc(fused[#loc50, #loc51])
#loc148 = loc(fused[#loc52, #loc53])
#loc149 = loc(fused[#loc54, #loc55])
#loc150 = loc(fused[#loc57, #loc56])
#loc151 = loc(fused[#loc59, #loc58])
#loc152 = loc(fused[#loc60, #loc61])
#loc153 = loc(fused[#loc62, #loc63])
#loc154 = loc(fused[#loc64, #loc65])
#loc155 = loc(fused[#loc66, #loc67])
#loc156 = loc(fused[#loc73, #loc74])
#loc157 = loc(fused[#loc75, #loc76])
#loc158 = loc(fused[#loc77, #loc78])
#loc159 = loc(fused[#loc80, #loc79])
#loc160 = loc(fused[#loc81, #loc82])
#loc161 = loc(fused[#loc83, #loc84])
#loc162 = loc(fused[#loc85, #loc86])
#loc163 = loc(fused[#loc90, #loc91])
#loc164 = loc(fused[#loc92, #loc93, #loc94, #loc86])
#loc165 = loc(fused[#loc97, #loc98])
#loc166 = loc(fused[#loc101, #loc102])
#loc167 = loc(fused[#loc103, #loc104])
#loc168 = loc(fused[#loc105, #loc106])
#loc169 = loc(fused[#loc107, #loc108])
#loc170 = loc(fused[#loc111, #loc114])
#loc171 = loc(fused[#loc115, #loc116, #loc117, #loc106])
#loc172 = loc(fused[#loc118, #loc119])
#loc173 = loc(fused[#loc124, #loc125])
