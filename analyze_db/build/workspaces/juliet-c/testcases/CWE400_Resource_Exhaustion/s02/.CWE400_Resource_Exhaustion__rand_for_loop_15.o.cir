!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc246)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc247)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Hello\00" : !cir.array<!s8i x 6>> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_for_loop_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc249)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc12)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc250)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc16)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc18)
          %6 = cir.binop(and, %4, %5) : !s32i loc(#loc18)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc18)
          %8 = cir.ternary(%7, true {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc18)
            %12 = cir.const #cir.int<30> : !s32i loc(#loc18)
            %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc18)
            %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc18)
            %16 = cir.const #cir.int<15> : !s32i loc(#loc18)
            %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc18)
            %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc18)
            %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc18)
            %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc18)
            cir.yield %21 : !u32i loc(#loc18)
          }, false {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc18)
            %12 = cir.const #cir.int<30> : !s32i loc(#loc18)
            %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc18)
            %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc18)
            %16 = cir.const #cir.int<15> : !s32i loc(#loc18)
            %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc18)
            %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc18)
            %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc18)
            %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc18)
            %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc18)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc18)
            %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc18)
            %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc18)
            cir.yield %25 : !u32i loc(#loc18)
          }) : (!cir.bool) -> !u32i loc(#loc18)
          %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc18)
          cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc252)
          cir.break loc(#loc20)
        } loc(#loc17)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc5)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc5)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc22)
          cir.break loc(#loc23)
        } loc(#loc21)
        cir.yield loc(#loc14)
      } loc(#loc14)
    } loc(#loc251)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc26)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc255)
            %5 = cir.const #cir.int<0> : !s32i loc(#loc31)
            %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc31)
            cir.store %6, %4 : !u64i, !cir.ptr<!u64i> loc(#loc255)
            cir.scope {
              %7 = cir.const #cir.int<0> : !s32i loc(#loc34)
              %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc34)
              cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc257)
              cir.for : cond {
                %9 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc36)
                %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
                %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc37)
                %12 = cir.cmp(lt, %9, %11) : !u64i, !cir.bool loc(#loc258)
                cir.condition(%12) loc(#loc38)
              } body {
                cir.scope {
                  %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc6)
                  %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc6)
                  cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc40)
                } loc(#loc259)
                cir.yield loc(#loc33)
              } step {
                %9 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc41)
                %10 = cir.unary(inc, %9) : !u64i, !u64i loc(#loc42)
                cir.store %10, %4 : !u64i, !cir.ptr<!u64i> loc(#loc260)
                cir.yield loc(#loc256)
              } loc(#loc256)
            } loc(#loc256)
          } loc(#loc254)
          cir.break loc(#loc43)
        } loc(#loc27)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc45)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc45)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc46)
          cir.break loc(#loc47)
        } loc(#loc44)
        cir.yield loc(#loc24)
      } loc(#loc24)
    } loc(#loc253)
    cir.return loc(#loc8)
  } loc(#loc248)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_for_loop_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc262)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc50)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc263)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc52)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc264)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc54)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc265)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc56)
    cir.return loc(#loc49)
  } loc(#loc261)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc267)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc63)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc268)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc67)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc69)
          %6 = cir.binop(and, %4, %5) : !s32i loc(#loc69)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc69)
          %8 = cir.ternary(%7, true {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc69)
            %12 = cir.const #cir.int<30> : !s32i loc(#loc69)
            %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc69)
            %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
            %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc69)
            %16 = cir.const #cir.int<15> : !s32i loc(#loc69)
            %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc69)
            %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc69)
            %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
            %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc69)
            %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc69)
            cir.yield %21 : !u32i loc(#loc69)
          }, false {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc69)
            %12 = cir.const #cir.int<30> : !s32i loc(#loc69)
            %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc69)
            %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
            %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc69)
            %16 = cir.const #cir.int<15> : !s32i loc(#loc69)
            %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc69)
            %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc69)
            %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
            %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc69)
            %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc69)
            %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc69)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc69)
            %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc69)
            %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc69)
            cir.yield %25 : !u32i loc(#loc69)
          }) : (!cir.bool) -> !u32i loc(#loc69)
          %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc69)
          cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc270)
          cir.break loc(#loc71)
        } loc(#loc68)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc73)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc73)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc74)
          cir.break loc(#loc75)
        } loc(#loc72)
        cir.yield loc(#loc65)
      } loc(#loc65)
    } loc(#loc269)
    cir.scope {
      %3 = cir.const #cir.int<8> : !s32i loc(#loc78)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc80)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc80)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc81)
          cir.break loc(#loc82)
        } loc(#loc79)
        cir.case(default, []) {
          cir.scope {
            %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc273)
            %5 = cir.const #cir.int<0> : !s32i loc(#loc87)
            %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc87)
            cir.store %6, %4 : !u64i, !cir.ptr<!u64i> loc(#loc273)
            cir.scope {
              %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc90)
              %8 = cir.const #cir.int<0> : !s32i loc(#loc91)
              %9 = cir.cmp(gt, %7, %8) : !s32i, !cir.bool loc(#loc275)
              %10 = cir.ternary(%9, true {
                %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc93)
                %12 = cir.const #cir.int<20> : !s32i loc(#loc94)
                %13 = cir.cmp(le, %11, %12) : !s32i, !cir.bool loc(#loc276)
                %14 = cir.ternary(%13, true {
                  %15 = cir.const #true loc(#loc92)
                  cir.yield %15 : !cir.bool loc(#loc92)
                }, false {
                  %15 = cir.const #false loc(#loc92)
                  cir.yield %15 : !cir.bool loc(#loc92)
                }) : (!cir.bool) -> !cir.bool loc(#loc92)
                cir.yield %14 : !cir.bool loc(#loc92)
              }, false {
                %11 = cir.const #false loc(#loc92)
                cir.yield %11 : !cir.bool loc(#loc92)
              }) : (!cir.bool) -> !cir.bool loc(#loc92)
              cir.if %10 {
                cir.scope {
                  %11 = cir.const #cir.int<0> : !s32i loc(#loc98)
                  %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc98)
                  cir.store %12, %4 : !u64i, !cir.ptr<!u64i> loc(#loc279)
                  cir.for : cond {
                    %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc100)
                    %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
                    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc101)
                    %16 = cir.cmp(lt, %13, %15) : !u64i, !cir.bool loc(#loc280)
                    cir.condition(%16) loc(#loc102)
                  } body {
                    cir.scope {
                      %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc104)
                      %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc104)
                      cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc105)
                    } loc(#loc281)
                    cir.yield loc(#loc97)
                  } step {
                    %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc106)
                    %14 = cir.unary(inc, %13) : !u64i, !u64i loc(#loc107)
                    cir.store %14, %4 : !u64i, !cir.ptr<!u64i> loc(#loc282)
                    cir.yield loc(#loc278)
                  } loc(#loc278)
                } loc(#loc278)
              } loc(#loc277)
            } loc(#loc274)
          } loc(#loc272)
          cir.break loc(#loc108)
        } loc(#loc83)
        cir.yield loc(#loc76)
      } loc(#loc76)
    } loc(#loc271)
    cir.return loc(#loc59)
  } loc(#loc266)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc284)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc113)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc114)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc285)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc118)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc120)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc120)
          %6 = cir.binop(and, %4, %5) : !s32i loc(#loc120)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc120)
          %8 = cir.ternary(%7, true {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc120)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc120)
            %12 = cir.const #cir.int<30> : !s32i loc(#loc120)
            %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc120)
            %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc120)
            %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc120)
            %16 = cir.const #cir.int<15> : !s32i loc(#loc120)
            %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc120)
            %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc120)
            %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc120)
            %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc120)
            %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc120)
            cir.yield %21 : !u32i loc(#loc120)
          }, false {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc120)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc120)
            %12 = cir.const #cir.int<30> : !s32i loc(#loc120)
            %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc120)
            %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc120)
            %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc120)
            %16 = cir.const #cir.int<15> : !s32i loc(#loc120)
            %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc120)
            %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc120)
            %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc120)
            %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc120)
            %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc120)
            %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc120)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc120)
            %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc120)
            %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc120)
            cir.yield %25 : !u32i loc(#loc120)
          }) : (!cir.bool) -> !u32i loc(#loc120)
          %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc120)
          cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc287)
          cir.break loc(#loc122)
        } loc(#loc119)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc124)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc124)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc125)
          cir.break loc(#loc126)
        } loc(#loc123)
        cir.yield loc(#loc116)
      } loc(#loc116)
    } loc(#loc286)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc129)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc290)
            %5 = cir.const #cir.int<0> : !s32i loc(#loc134)
            %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc134)
            cir.store %6, %4 : !u64i, !cir.ptr<!u64i> loc(#loc290)
            cir.scope {
              %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc137)
              %8 = cir.const #cir.int<0> : !s32i loc(#loc138)
              %9 = cir.cmp(gt, %7, %8) : !s32i, !cir.bool loc(#loc292)
              %10 = cir.ternary(%9, true {
                %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc140)
                %12 = cir.const #cir.int<20> : !s32i loc(#loc141)
                %13 = cir.cmp(le, %11, %12) : !s32i, !cir.bool loc(#loc293)
                %14 = cir.ternary(%13, true {
                  %15 = cir.const #true loc(#loc139)
                  cir.yield %15 : !cir.bool loc(#loc139)
                }, false {
                  %15 = cir.const #false loc(#loc139)
                  cir.yield %15 : !cir.bool loc(#loc139)
                }) : (!cir.bool) -> !cir.bool loc(#loc139)
                cir.yield %14 : !cir.bool loc(#loc139)
              }, false {
                %11 = cir.const #false loc(#loc139)
                cir.yield %11 : !cir.bool loc(#loc139)
              }) : (!cir.bool) -> !cir.bool loc(#loc139)
              cir.if %10 {
                cir.scope {
                  %11 = cir.const #cir.int<0> : !s32i loc(#loc145)
                  %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc145)
                  cir.store %12, %4 : !u64i, !cir.ptr<!u64i> loc(#loc296)
                  cir.for : cond {
                    %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc147)
                    %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc148)
                    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc148)
                    %16 = cir.cmp(lt, %13, %15) : !u64i, !cir.bool loc(#loc297)
                    cir.condition(%16) loc(#loc149)
                  } body {
                    cir.scope {
                      %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc151)
                      %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc151)
                      cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc152)
                    } loc(#loc298)
                    cir.yield loc(#loc144)
                  } step {
                    %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc153)
                    %14 = cir.unary(inc, %13) : !u64i, !u64i loc(#loc154)
                    cir.store %14, %4 : !u64i, !cir.ptr<!u64i> loc(#loc299)
                    cir.yield loc(#loc295)
                  } loc(#loc295)
                } loc(#loc295)
              } loc(#loc294)
            } loc(#loc291)
          } loc(#loc289)
          cir.break loc(#loc155)
        } loc(#loc130)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc157)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc157)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc158)
          cir.break loc(#loc159)
        } loc(#loc156)
        cir.yield loc(#loc127)
      } loc(#loc127)
    } loc(#loc288)
    cir.return loc(#loc110)
  } loc(#loc283)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc301)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc164)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc165)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc302)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc169)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc171)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc171)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc172)
          cir.break loc(#loc173)
        } loc(#loc170)
        cir.case(default, []) {
          %4 = cir.const #cir.int<20> : !s32i loc(#loc175)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc304)
          cir.break loc(#loc177)
        } loc(#loc174)
        cir.yield loc(#loc167)
      } loc(#loc167)
    } loc(#loc303)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc180)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc307)
            %5 = cir.const #cir.int<0> : !s32i loc(#loc185)
            %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc185)
            cir.store %6, %4 : !u64i, !cir.ptr<!u64i> loc(#loc307)
            cir.scope {
              %7 = cir.const #cir.int<0> : !s32i loc(#loc188)
              %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc188)
              cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc309)
              cir.for : cond {
                %9 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc190)
                %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc191)
                %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc191)
                %12 = cir.cmp(lt, %9, %11) : !u64i, !cir.bool loc(#loc310)
                cir.condition(%12) loc(#loc192)
              } body {
                cir.scope {
                  %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc194)
                  %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc194)
                  cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc195)
                } loc(#loc311)
                cir.yield loc(#loc187)
              } step {
                %9 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc196)
                %10 = cir.unary(inc, %9) : !u64i, !u64i loc(#loc197)
                cir.store %10, %4 : !u64i, !cir.ptr<!u64i> loc(#loc312)
                cir.yield loc(#loc308)
              } loc(#loc308)
            } loc(#loc308)
          } loc(#loc306)
          cir.break loc(#loc198)
        } loc(#loc181)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc200)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc200)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc201)
          cir.break loc(#loc202)
        } loc(#loc199)
        cir.yield loc(#loc178)
      } loc(#loc178)
    } loc(#loc305)
    cir.return loc(#loc161)
  } loc(#loc300)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc314)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc207)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc208)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc315)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc212)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<20> : !s32i loc(#loc214)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc317)
          cir.break loc(#loc216)
        } loc(#loc213)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc218)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc218)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc219)
          cir.break loc(#loc220)
        } loc(#loc217)
        cir.yield loc(#loc210)
      } loc(#loc210)
    } loc(#loc316)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc223)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc320)
            %5 = cir.const #cir.int<0> : !s32i loc(#loc228)
            %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc228)
            cir.store %6, %4 : !u64i, !cir.ptr<!u64i> loc(#loc320)
            cir.scope {
              %7 = cir.const #cir.int<0> : !s32i loc(#loc231)
              %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc231)
              cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc322)
              cir.for : cond {
                %9 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc233)
                %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc234)
                %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc234)
                %12 = cir.cmp(lt, %9, %11) : !u64i, !cir.bool loc(#loc323)
                cir.condition(%12) loc(#loc235)
              } body {
                cir.scope {
                  %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc237)
                  %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc237)
                  cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc238)
                } loc(#loc324)
                cir.yield loc(#loc230)
              } step {
                %9 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc239)
                %10 = cir.unary(inc, %9) : !u64i, !u64i loc(#loc240)
                cir.store %10, %4 : !u64i, !cir.ptr<!u64i> loc(#loc325)
                cir.yield loc(#loc321)
              } loc(#loc321)
            } loc(#loc321)
          } loc(#loc319)
          cir.break loc(#loc241)
        } loc(#loc224)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc243)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc243)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc244)
          cir.break loc(#loc245)
        } loc(#loc242)
        cir.yield loc(#loc221)
      } loc(#loc221)
    } loc(#loc318)
    cir.return loc(#loc204)
  } loc(#loc313)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":35:19)
#loc6 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":46:23)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":22:1)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":55:1)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":24:5)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":24:9)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":26:14)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":26:13)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":26:5)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":27:5)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":37:5)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":27:12)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":29:5)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":31:17)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":31:9)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":32:9)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":33:5)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":35:9)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":36:9)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":38:5)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":54:5)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":38:12)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":40:5)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":41:5)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":48:5)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":42:9)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":42:20)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":44:9)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":47:9)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":44:18)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":44:14)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":44:21)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":44:33)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":44:23)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":45:9)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":46:13)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":44:41)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":44:40)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":49:5)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":50:5)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":52:19)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":52:9)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":53:9)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":211:1)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":217:1)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":213:5)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":213:14)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":214:5)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":214:14)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":215:5)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":215:14)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":216:5)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":216:14)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":62:1)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":98:1)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":64:5)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":64:9)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":66:14)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":66:13)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":66:5)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":67:5)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":77:5)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":67:12)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":69:5)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":71:17)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":71:9)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":72:9)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":73:5)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":75:19)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":75:9)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":76:9)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":78:5)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":97:5)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":78:12)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":80:5)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":82:19)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":82:9)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":83:9)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":84:5)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":85:5)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":95:5)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":86:9)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":86:20)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":88:9)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":94:9)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":88:13)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":88:21)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":88:23)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":88:26)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":88:35)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":89:9)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":90:13)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":93:13)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":90:22)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":90:18)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":90:25)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":90:37)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":90:27)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":91:13)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":92:27)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":92:17)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":90:45)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":90:44)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":96:5)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":101:1)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":137:1)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":103:5)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":103:9)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":105:14)
#loc114 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":105:13)
#loc115 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":105:5)
#loc116 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":106:5)
#loc117 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":116:5)
#loc118 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":106:12)
#loc119 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":108:5)
#loc120 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":110:17)
#loc121 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":110:9)
#loc122 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":111:9)
#loc123 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":112:5)
#loc124 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":114:19)
#loc125 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":114:9)
#loc126 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":115:9)
#loc127 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":117:5)
#loc128 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":136:5)
#loc129 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":117:12)
#loc130 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":119:5)
#loc131 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":120:5)
#loc132 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":130:5)
#loc133 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":121:9)
#loc134 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":121:20)
#loc135 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":123:9)
#loc136 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":129:9)
#loc137 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":123:13)
#loc138 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":123:21)
#loc139 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":123:23)
#loc140 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":123:26)
#loc141 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":123:35)
#loc142 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":124:9)
#loc143 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":125:13)
#loc144 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":128:13)
#loc145 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":125:22)
#loc146 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":125:18)
#loc147 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":125:25)
#loc148 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":125:37)
#loc149 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":125:27)
#loc150 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":126:13)
#loc151 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":127:27)
#loc152 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":127:17)
#loc153 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":125:45)
#loc154 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":125:44)
#loc155 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":131:5)
#loc156 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":132:5)
#loc157 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":134:19)
#loc158 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":134:9)
#loc159 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":135:9)
#loc160 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":140:1)
#loc161 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":173:1)
#loc162 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":142:5)
#loc163 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":142:9)
#loc164 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":144:14)
#loc165 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":144:13)
#loc166 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":144:5)
#loc167 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":145:5)
#loc168 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":155:5)
#loc169 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":145:12)
#loc170 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":147:5)
#loc171 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":149:19)
#loc172 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":149:9)
#loc173 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":150:9)
#loc174 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":151:5)
#loc175 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":153:17)
#loc176 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":153:9)
#loc177 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":154:9)
#loc178 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":156:5)
#loc179 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":172:5)
#loc180 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":156:12)
#loc181 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":158:5)
#loc182 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":159:5)
#loc183 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":166:5)
#loc184 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":160:9)
#loc185 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":160:20)
#loc186 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":162:9)
#loc187 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":165:9)
#loc188 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":162:18)
#loc189 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":162:14)
#loc190 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":162:21)
#loc191 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":162:33)
#loc192 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":162:23)
#loc193 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":163:9)
#loc194 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":164:23)
#loc195 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":164:13)
#loc196 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":162:41)
#loc197 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":162:40)
#loc198 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":167:5)
#loc199 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":168:5)
#loc200 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":170:19)
#loc201 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":170:9)
#loc202 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":171:9)
#loc203 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":176:1)
#loc204 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":209:1)
#loc205 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":178:5)
#loc206 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":178:9)
#loc207 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":180:14)
#loc208 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":180:13)
#loc209 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":180:5)
#loc210 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":181:5)
#loc211 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":191:5)
#loc212 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":181:12)
#loc213 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":183:5)
#loc214 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":185:17)
#loc215 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":185:9)
#loc216 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":186:9)
#loc217 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":187:5)
#loc218 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":189:19)
#loc219 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":189:9)
#loc220 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":190:9)
#loc221 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":192:5)
#loc222 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":208:5)
#loc223 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":192:12)
#loc224 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":194:5)
#loc225 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":195:5)
#loc226 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":202:5)
#loc227 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":196:9)
#loc228 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":196:20)
#loc229 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":198:9)
#loc230 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":201:9)
#loc231 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":198:18)
#loc232 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":198:14)
#loc233 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":198:21)
#loc234 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":198:33)
#loc235 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":198:23)
#loc236 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":199:9)
#loc237 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":200:23)
#loc238 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":200:13)
#loc239 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":198:41)
#loc240 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":198:40)
#loc241 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":203:5)
#loc242 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":204:5)
#loc243 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":206:19)
#loc244 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":206:9)
#loc245 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":207:9)
#loc246 = loc(fused[#loc1, #loc2])
#loc247 = loc(fused[#loc3, #loc4])
#loc248 = loc(fused[#loc7, #loc8])
#loc249 = loc(fused[#loc9, #loc10])
#loc250 = loc(fused[#loc13, #loc11])
#loc251 = loc(fused[#loc14, #loc15])
#loc252 = loc(fused[#loc19, #loc18])
#loc253 = loc(fused[#loc24, #loc25])
#loc254 = loc(fused[#loc28, #loc29])
#loc255 = loc(fused[#loc30, #loc31])
#loc256 = loc(fused[#loc32, #loc33])
#loc257 = loc(fused[#loc35, #loc34])
#loc258 = loc(fused[#loc36, #loc37])
#loc259 = loc(fused[#loc39, #loc33])
#loc260 = loc(fused[#loc42, #loc41])
#loc261 = loc(fused[#loc48, #loc49])
#loc262 = loc(fused[#loc50, #loc51])
#loc263 = loc(fused[#loc52, #loc53])
#loc264 = loc(fused[#loc54, #loc55])
#loc265 = loc(fused[#loc56, #loc57])
#loc266 = loc(fused[#loc58, #loc59])
#loc267 = loc(fused[#loc60, #loc61])
#loc268 = loc(fused[#loc64, #loc62])
#loc269 = loc(fused[#loc65, #loc66])
#loc270 = loc(fused[#loc70, #loc69])
#loc271 = loc(fused[#loc76, #loc77])
#loc272 = loc(fused[#loc84, #loc85])
#loc273 = loc(fused[#loc86, #loc87])
#loc274 = loc(fused[#loc88, #loc89])
#loc275 = loc(fused[#loc90, #loc91])
#loc276 = loc(fused[#loc93, #loc94])
#loc277 = loc(fused[#loc95, #loc89])
#loc278 = loc(fused[#loc96, #loc97])
#loc279 = loc(fused[#loc99, #loc98])
#loc280 = loc(fused[#loc100, #loc101])
#loc281 = loc(fused[#loc103, #loc97])
#loc282 = loc(fused[#loc107, #loc106])
#loc283 = loc(fused[#loc109, #loc110])
#loc284 = loc(fused[#loc111, #loc112])
#loc285 = loc(fused[#loc115, #loc113])
#loc286 = loc(fused[#loc116, #loc117])
#loc287 = loc(fused[#loc121, #loc120])
#loc288 = loc(fused[#loc127, #loc128])
#loc289 = loc(fused[#loc131, #loc132])
#loc290 = loc(fused[#loc133, #loc134])
#loc291 = loc(fused[#loc135, #loc136])
#loc292 = loc(fused[#loc137, #loc138])
#loc293 = loc(fused[#loc140, #loc141])
#loc294 = loc(fused[#loc142, #loc136])
#loc295 = loc(fused[#loc143, #loc144])
#loc296 = loc(fused[#loc146, #loc145])
#loc297 = loc(fused[#loc147, #loc148])
#loc298 = loc(fused[#loc150, #loc144])
#loc299 = loc(fused[#loc154, #loc153])
#loc300 = loc(fused[#loc160, #loc161])
#loc301 = loc(fused[#loc162, #loc163])
#loc302 = loc(fused[#loc166, #loc164])
#loc303 = loc(fused[#loc167, #loc168])
#loc304 = loc(fused[#loc176, #loc175])
#loc305 = loc(fused[#loc178, #loc179])
#loc306 = loc(fused[#loc182, #loc183])
#loc307 = loc(fused[#loc184, #loc185])
#loc308 = loc(fused[#loc186, #loc187])
#loc309 = loc(fused[#loc189, #loc188])
#loc310 = loc(fused[#loc190, #loc191])
#loc311 = loc(fused[#loc193, #loc187])
#loc312 = loc(fused[#loc197, #loc196])
#loc313 = loc(fused[#loc203, #loc204])
#loc314 = loc(fused[#loc205, #loc206])
#loc315 = loc(fused[#loc209, #loc207])
#loc316 = loc(fused[#loc210, #loc211])
#loc317 = loc(fused[#loc215, #loc214])
#loc318 = loc(fused[#loc221, #loc222])
#loc319 = loc(fused[#loc225, #loc226])
#loc320 = loc(fused[#loc227, #loc228])
#loc321 = loc(fused[#loc229, #loc230])
#loc322 = loc(fused[#loc232, #loc231])
#loc323 = loc(fused[#loc233, #loc234])
#loc324 = loc(fused[#loc236, #loc230])
#loc325 = loc(fused[#loc240, #loc239])
