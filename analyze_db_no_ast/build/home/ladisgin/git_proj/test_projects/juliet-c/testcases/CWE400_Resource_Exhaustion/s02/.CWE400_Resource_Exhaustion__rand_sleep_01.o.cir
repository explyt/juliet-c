!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc66)
  cir.func private  @usleep(!u32i) -> !s32i loc(#loc67)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc68)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Sleep time possibly too long\00" : !cir.array<!s8i x 29>> : !cir.array<!s8i x 29> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_sleep_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc70)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc71)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc15)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc15)
    %7 = cir.ternary(%6, true {
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc15)
      %16 = cir.const #cir.int<30> : !s32i loc(#loc15)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc15)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc15)
      %20 = cir.const #cir.int<15> : !s32i loc(#loc15)
      %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc15)
      %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc15)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc15)
      %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc15)
      cir.yield %25 : !u32i loc(#loc15)
    }, false {
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc15)
      %16 = cir.const #cir.int<30> : !s32i loc(#loc15)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc15)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc15)
      %20 = cir.const #cir.int<15> : !s32i loc(#loc15)
      %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc15)
      %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc15)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc15)
      %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc15)
      %26 = cir.unary(minus, %25) : !u32i, !u32i loc(#loc15)
      %27 = cir.const #cir.int<1> : !s32i loc(#loc15)
      %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc15)
      %29 = cir.binop(sub, %26, %28) : !u32i loc(#loc15)
      cir.yield %29 : !u32i loc(#loc15)
    }) : (!cir.bool) -> !u32i loc(#loc15)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc15)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc72)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc17)
    %11 = cir.call @usleep(%10) : (!u32i) -> !s32i loc(#loc18)
    %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc7)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc19)
    cir.return loc(#loc9)
  } loc(#loc69)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_sleep_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc74)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc22)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc75)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc24)
    cir.return loc(#loc21)
  } loc(#loc73)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc77)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc30)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc31)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc78)
    %3 = cir.const #cir.int<20> : !s32i loc(#loc33)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc79)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc35)
    %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc35)
    %6 = cir.call @usleep(%5) : (!u32i) -> !s32i loc(#loc36)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc37)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc38)
    cir.return loc(#loc27)
  } loc(#loc76)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Sleep time OK\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc39)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"Sleep time too long\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc40)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc81)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc46)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc82)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc48)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc48)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc48)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc48)
    %7 = cir.ternary(%6, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc48)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc48)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc48)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc48)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc48)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc48)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc48)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc48)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc48)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc48)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc48)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc48)
      cir.yield %20 : !u32i loc(#loc48)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc48)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc48)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc48)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc48)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc48)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc48)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc48)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc48)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc48)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc48)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc48)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc48)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc48)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc48)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc48)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc48)
      cir.yield %24 : !u32i loc(#loc48)
    }) : (!cir.bool) -> !u32i loc(#loc48)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc48)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc52)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc53)
      %11 = cir.cmp(gt, %9, %10) : !s32i, !s32i loc(#loc85)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc54)
      %13 = cir.ternary(%12, true {
        %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
        %15 = cir.const #cir.int<2000> : !s32i loc(#loc57)
        %16 = cir.cmp(le, %14, %15) : !s32i, !s32i loc(#loc86)
        %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc58)
        %18 = cir.ternary(%17, true {
          %19 = cir.const #true loc(#loc55)
          cir.yield %19 : !cir.bool loc(#loc55)
        }, false {
          %19 = cir.const #false loc(#loc55)
          cir.yield %19 : !cir.bool loc(#loc55)
        }) : (!cir.bool) -> !cir.bool loc(#loc55)
        cir.yield %18 : !cir.bool loc(#loc55)
      }, false {
        %14 = cir.const #false loc(#loc55)
        cir.yield %14 : !cir.bool loc(#loc55)
      }) : (!cir.bool) -> !cir.bool loc(#loc55)
      cir.if %13 {
        %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc62)
        %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc62)
        %16 = cir.call @usleep(%15) : (!u32i) -> !s32i loc(#loc63)
        %17 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc39)
        %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc39)
        cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc64)
      } else {
        %14 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc40)
        %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc40)
        cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc65)
      } loc(#loc87)
    } loc(#loc84)
    cir.return loc(#loc42)
  } loc(#loc80)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/unistd.h":480:1)
#loc4 = loc("/usr/include/unistd.h":480:43)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":39:15)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":30:1)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":40:1)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":32:5)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":32:9)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":34:14)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":34:13)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":34:5)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":36:13)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":36:5)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":38:11)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":38:5)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":39:5)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":79:1)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":83:1)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":81:5)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":81:13)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":82:5)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":82:13)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":47:1)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":57:1)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":49:5)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":49:9)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":51:14)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":51:13)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":51:5)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":53:13)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":53:5)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":55:11)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":55:5)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":56:15)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":56:5)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":71:19)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":75:19)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":60:1)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":77:1)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":62:5)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":62:9)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":64:14)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":64:13)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":64:5)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":66:13)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":66:5)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":68:5)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":76:5)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":68:9)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":68:17)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":68:15)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":68:19)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":68:22)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":68:31)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":68:28)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":69:5)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":72:5)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":74:5)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":70:15)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":70:9)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":71:9)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_sleep_01.c":75:9)
#loc66 = loc(fused[#loc1, #loc2])
#loc67 = loc(fused[#loc3, #loc4])
#loc68 = loc(fused[#loc5, #loc6])
#loc69 = loc(fused[#loc8, #loc9])
#loc70 = loc(fused[#loc10, #loc11])
#loc71 = loc(fused[#loc14, #loc12])
#loc72 = loc(fused[#loc16, #loc15])
#loc73 = loc(fused[#loc20, #loc21])
#loc74 = loc(fused[#loc22, #loc23])
#loc75 = loc(fused[#loc24, #loc25])
#loc76 = loc(fused[#loc26, #loc27])
#loc77 = loc(fused[#loc28, #loc29])
#loc78 = loc(fused[#loc32, #loc30])
#loc79 = loc(fused[#loc34, #loc33])
#loc80 = loc(fused[#loc41, #loc42])
#loc81 = loc(fused[#loc43, #loc44])
#loc82 = loc(fused[#loc47, #loc45])
#loc83 = loc(fused[#loc49, #loc48])
#loc84 = loc(fused[#loc50, #loc51])
#loc85 = loc(fused[#loc52, #loc53])
#loc86 = loc(fused[#loc56, #loc57])
#loc87 = loc(fused[#loc59, #loc60, #loc61, #loc51])
