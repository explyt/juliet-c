!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_multiply_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc151)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc152)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%hd\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc153)
  cir.func no_proto @CWE190_Integer_Overflow__short_fscanf_multiply_17_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc155)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc156)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc157)
    %3 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc158)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc17)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc17)
    cir.store %5, %3 : !s16i, !cir.ptr<!s16i> loc(#loc159)
    cir.br ^bb1 loc(#loc160)
  ^bb1:  // pred: ^bb0
    %6 = cir.const #cir.int<0> : !s32i loc(#loc21)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    cir.br ^bb2 loc(#loc160)
  ^bb2:  // 2 preds: ^bb1, ^bb6
    %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc162)
    cir.brcond %9 ^bb3, ^bb7 loc(#loc25)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc163)
  ^bb4:  // pred: ^bb3
    %10 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc27)
    %11 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc152)
    %12 = cir.load %11 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc28)
    %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc5)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc5)
    %15 = cir.call @__isoc99_fscanf(%12, %14, %3) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc27)
    cir.br ^bb5 loc(#loc20)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc20)
  ^bb6:  // pred: ^bb5
    %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc29)
    %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc30)
    cir.store %17, %1 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    cir.br ^bb2 loc(#loc160)
  ^bb7:  // pred: ^bb2
    cir.br ^bb8 loc(#loc20)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc165)
  ^bb9:  // pred: ^bb8
    %18 = cir.const #cir.int<0> : !s32i loc(#loc33)
    cir.store %18, %2 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    cir.br ^bb10 loc(#loc165)
  ^bb10:  // 2 preds: ^bb9, ^bb18
    %19 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc35)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc167)
    cir.brcond %21 ^bb11, ^bb19 loc(#loc37)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc168)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc169)
  ^bb13:  // pred: ^bb12
    %22 = cir.load %3 : !cir.ptr<!s16i>, !s16i loc(#loc41)
    %23 = cir.cast(integral, %22 : !s16i), !s32i loc(#loc41)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc42)
    %25 = cir.cmp(gt, %23, %24) : !s32i, !cir.bool loc(#loc170)
    cir.brcond %25 ^bb14, ^bb15 loc(#loc171)
  ^bb14:  // pred: ^bb13
    %26 = cir.load %3 : !cir.ptr<!s16i>, !s16i loc(#loc44)
    %27 = cir.cast(integral, %26 : !s16i), !s32i loc(#loc44)
    %28 = cir.const #cir.int<2> : !s32i loc(#loc11)
    %29 = cir.binop(mul, %27, %28) nsw : !s32i loc(#loc44)
    %30 = cir.cast(integral, %29 : !s32i), !s16i loc(#loc44)
    cir.store %30, %0 : !s16i, !cir.ptr<!s16i> loc(#loc155)
    %31 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc45)
    %32 = cir.cast(integral, %31 : !s16i), !s32i loc(#loc45)
    cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc46)
    cir.br ^bb15 loc(#loc40)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc40)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc32)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc32)
  ^bb18:  // pred: ^bb17
    %33 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc47)
    %34 = cir.unary(inc, %33) : !s32i, !s32i loc(#loc48)
    cir.store %34, %2 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    cir.br ^bb10 loc(#loc165)
  ^bb19:  // pred: ^bb10
    cir.br ^bb20 loc(#loc32)
  ^bb20:  // pred: ^bb19
    cir.return loc(#loc9)
  } loc(#loc154)
  cir.func no_proto @CWE190_Integer_Overflow__short_fscanf_multiply_17_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc174)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc53)
    cir.return loc(#loc50)
  } loc(#loc173)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc176)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc57)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc178)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc179)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc180)
    %3 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc181)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc67)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc67)
    cir.store %5, %3 : !s16i, !cir.ptr<!s16i> loc(#loc182)
    cir.br ^bb1 loc(#loc183)
  ^bb1:  // pred: ^bb0
    %6 = cir.const #cir.int<0> : !s32i loc(#loc71)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc184)
    cir.br ^bb2 loc(#loc183)
  ^bb2:  // 2 preds: ^bb1, ^bb6
    %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc73)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc74)
    %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc185)
    cir.brcond %9 ^bb3, ^bb7 loc(#loc75)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc186)
  ^bb4:  // pred: ^bb3
    %10 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc77)
    %11 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc152)
    %12 = cir.load %11 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc78)
    %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc79)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc79)
    %15 = cir.call @__isoc99_fscanf(%12, %14, %3) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc77)
    cir.br ^bb5 loc(#loc70)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc70)
  ^bb6:  // pred: ^bb5
    %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc80)
    %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc81)
    cir.store %17, %1 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    cir.br ^bb2 loc(#loc183)
  ^bb7:  // pred: ^bb2
    cir.br ^bb8 loc(#loc70)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc188)
  ^bb9:  // pred: ^bb8
    %18 = cir.const #cir.int<0> : !s32i loc(#loc84)
    cir.store %18, %2 : !s32i, !cir.ptr<!s32i> loc(#loc189)
    cir.br ^bb10 loc(#loc188)
  ^bb10:  // 2 preds: ^bb9, ^bb23
    %19 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc87)
    %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc190)
    cir.brcond %21 ^bb11, ^bb24 loc(#loc88)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc191)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc192)
  ^bb13:  // pred: ^bb12
    %22 = cir.load %3 : !cir.ptr<!s16i>, !s16i loc(#loc92)
    %23 = cir.cast(integral, %22 : !s16i), !s32i loc(#loc92)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc93)
    %25 = cir.cmp(gt, %23, %24) : !s32i, !cir.bool loc(#loc193)
    cir.brcond %25 ^bb14, ^bb20 loc(#loc194)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc195)
  ^bb15:  // pred: ^bb14
    %26 = cir.load %3 : !cir.ptr<!s16i>, !s16i loc(#loc97)
    %27 = cir.cast(integral, %26 : !s16i), !s32i loc(#loc97)
    %28 = cir.const #cir.int<32767> : !s32i loc(#loc98)
    %29 = cir.const #cir.int<2> : !s32i loc(#loc99)
    %30 = cir.binop(div, %28, %29) : !s32i loc(#loc196)
    %31 = cir.cmp(lt, %27, %30) : !s32i, !cir.bool loc(#loc197)
    cir.brcond %31 ^bb16, ^bb17 loc(#loc198)
  ^bb16:  // pred: ^bb15
    %32 = cir.load %3 : !cir.ptr<!s16i>, !s16i loc(#loc104)
    %33 = cir.cast(integral, %32 : !s16i), !s32i loc(#loc104)
    %34 = cir.const #cir.int<2> : !s32i loc(#loc61)
    %35 = cir.binop(mul, %33, %34) nsw : !s32i loc(#loc104)
    %36 = cir.cast(integral, %35 : !s32i), !s16i loc(#loc104)
    cir.store %36, %0 : !s16i, !cir.ptr<!s16i> loc(#loc178)
    %37 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc105)
    %38 = cir.cast(integral, %37 : !s16i), !s32i loc(#loc105)
    cir.call @printIntLine(%38) : (!s32i) -> () loc(#loc106)
    cir.br ^bb18 loc(#loc102)
  ^bb17:  // pred: ^bb15
    %39 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc57)
    %40 = cir.cast(array_to_ptrdecay, %39 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc107)
    cir.br ^bb18 loc(#loc96)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc96)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc91)
  ^bb20:  // 2 preds: ^bb13, ^bb19
    cir.br ^bb21 loc(#loc91)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc83)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc83)
  ^bb23:  // pred: ^bb22
    %41 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc108)
    %42 = cir.unary(inc, %41) : !s32i, !s32i loc(#loc109)
    cir.store %42, %2 : !s32i, !cir.ptr<!s32i> loc(#loc199)
    cir.br ^bb10 loc(#loc188)
  ^bb24:  // pred: ^bb10
    cir.br ^bb25 loc(#loc83)
  ^bb25:  // pred: ^bb24
    cir.return loc(#loc59)
  } loc(#loc177)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc201)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc202)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc203)
    %3 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc204)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc119)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc119)
    cir.store %5, %3 : !s16i, !cir.ptr<!s16i> loc(#loc205)
    cir.br ^bb1 loc(#loc206)
  ^bb1:  // pred: ^bb0
    %6 = cir.const #cir.int<0> : !s32i loc(#loc123)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    cir.br ^bb2 loc(#loc206)
  ^bb2:  // 2 preds: ^bb1, ^bb6
    %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc125)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc126)
    %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc208)
    cir.brcond %9 ^bb3, ^bb7 loc(#loc127)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc209)
  ^bb4:  // pred: ^bb3
    %10 = cir.const #cir.int<2> : !s32i loc(#loc129)
    %11 = cir.cast(integral, %10 : !s32i), !s16i loc(#loc129)
    cir.store %11, %3 : !s16i, !cir.ptr<!s16i> loc(#loc210)
    cir.br ^bb5 loc(#loc122)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc122)
  ^bb6:  // pred: ^bb5
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc131)
    %13 = cir.unary(inc, %12) : !s32i, !s32i loc(#loc132)
    cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    cir.br ^bb2 loc(#loc206)
  ^bb7:  // pred: ^bb2
    cir.br ^bb8 loc(#loc122)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc212)
  ^bb9:  // pred: ^bb8
    %14 = cir.const #cir.int<0> : !s32i loc(#loc135)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc213)
    cir.br ^bb10 loc(#loc212)
  ^bb10:  // 2 preds: ^bb9, ^bb18
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc137)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc138)
    %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc214)
    cir.brcond %17 ^bb11, ^bb19 loc(#loc139)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc215)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc216)
  ^bb13:  // pred: ^bb12
    %18 = cir.load %3 : !cir.ptr<!s16i>, !s16i loc(#loc143)
    %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc143)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc144)
    %21 = cir.cmp(gt, %19, %20) : !s32i, !cir.bool loc(#loc217)
    cir.brcond %21 ^bb14, ^bb15 loc(#loc218)
  ^bb14:  // pred: ^bb13
    %22 = cir.load %3 : !cir.ptr<!s16i>, !s16i loc(#loc146)
    %23 = cir.cast(integral, %22 : !s16i), !s32i loc(#loc146)
    %24 = cir.const #cir.int<2> : !s32i loc(#loc113)
    %25 = cir.binop(mul, %23, %24) nsw : !s32i loc(#loc146)
    %26 = cir.cast(integral, %25 : !s32i), !s16i loc(#loc146)
    cir.store %26, %0 : !s16i, !cir.ptr<!s16i> loc(#loc201)
    %27 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc147)
    %28 = cir.cast(integral, %27 : !s16i), !s32i loc(#loc147)
    cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc148)
    cir.br ^bb15 loc(#loc142)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc142)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc134)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc134)
  ^bb18:  // pred: ^bb17
    %29 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    %30 = cir.unary(inc, %29) : !s32i, !s32i loc(#loc150)
    cir.store %30, %2 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    cir.br ^bb10 loc(#loc212)
  ^bb19:  // pred: ^bb10
    cir.br ^bb20 loc(#loc134)
  ^bb20:  // pred: ^bb19
    cir.return loc(#loc111)
  } loc(#loc200)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_multiply_17.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":30:24)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":22:1)
#loc9 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":41:1)
#loc10 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":37:13)
#loc11 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":37:35)
#loc12 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":24:5)
#loc13 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":24:9)
#loc14 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":24:11)
#loc15 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":25:5)
#loc16 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":25:11)
#loc17 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":26:12)
#loc18 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":26:5)
#loc19 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":27:5)
#loc20 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":31:5)
#loc21 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":27:13)
#loc22 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":27:9)
#loc23 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":27:16)
#loc24 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":27:20)
#loc25 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":27:18)
#loc26 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":28:5)
#loc27 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":30:9)
#loc28 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":30:17)
#loc29 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":27:24)
#loc30 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":27:23)
#loc31 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":32:5)
#loc32 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":40:5)
#loc33 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":32:13)
#loc34 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":32:9)
#loc35 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":32:16)
#loc36 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":32:20)
#loc37 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":32:18)
#loc38 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":33:5)
#loc39 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":34:9)
#loc40 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":39:9)
#loc41 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":34:12)
#loc42 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":34:19)
#loc43 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":35:9)
#loc44 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":37:28)
#loc45 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":38:26)
#loc46 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":38:13)
#loc47 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":32:24)
#loc48 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":32:23)
#loc49 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":98:1)
#loc50 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":102:1)
#loc51 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":100:5)
#loc52 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":100:13)
#loc53 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":101:5)
#loc54 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":101:13)
#loc55 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc56 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc57 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":70:27)
#loc58 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":48:1)
#loc59 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":74:1)
#loc60 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":65:17)
#loc61 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":65:39)
#loc62 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":50:5)
#loc63 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":50:9)
#loc64 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":50:11)
#loc65 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":51:5)
#loc66 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":51:11)
#loc67 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":52:12)
#loc68 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":52:5)
#loc69 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":53:5)
#loc70 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":57:5)
#loc71 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":53:13)
#loc72 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":53:9)
#loc73 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":53:16)
#loc74 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":53:20)
#loc75 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":53:18)
#loc76 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":54:5)
#loc77 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":56:9)
#loc78 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":56:17)
#loc79 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":56:24)
#loc80 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":53:24)
#loc81 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":53:23)
#loc82 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":58:5)
#loc83 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":73:5)
#loc84 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":58:13)
#loc85 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":58:9)
#loc86 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":58:16)
#loc87 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":58:20)
#loc88 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":58:18)
#loc89 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":59:5)
#loc90 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":60:9)
#loc91 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":72:9)
#loc92 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":60:12)
#loc93 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":60:19)
#loc94 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":61:9)
#loc95 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":63:13)
#loc96 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":71:13)
#loc97 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":63:17)
#loc98 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":63:25)
#loc99 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":63:34)
#loc100 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":63:35)
#loc101 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":64:13)
#loc102 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":67:13)
#loc103 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":69:13)
#loc104 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":65:32)
#loc105 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":66:30)
#loc106 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":66:17)
#loc107 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":70:17)
#loc108 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":58:24)
#loc109 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":58:23)
#loc110 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":77:1)
#loc111 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":96:1)
#loc112 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":92:13)
#loc113 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":92:35)
#loc114 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":79:5)
#loc115 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":79:9)
#loc116 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":79:11)
#loc117 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":80:5)
#loc118 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":80:11)
#loc119 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":81:12)
#loc120 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":81:5)
#loc121 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":82:5)
#loc122 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":86:5)
#loc123 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":82:13)
#loc124 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":82:9)
#loc125 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":82:16)
#loc126 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":82:20)
#loc127 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":82:18)
#loc128 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":83:5)
#loc129 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":85:16)
#loc130 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":85:9)
#loc131 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":82:24)
#loc132 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":82:23)
#loc133 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":87:5)
#loc134 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":95:5)
#loc135 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":87:13)
#loc136 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":87:9)
#loc137 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":87:16)
#loc138 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":87:20)
#loc139 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":87:18)
#loc140 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":88:5)
#loc141 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":89:9)
#loc142 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":94:9)
#loc143 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":89:12)
#loc144 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":89:19)
#loc145 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":90:9)
#loc146 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":92:28)
#loc147 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":93:26)
#loc148 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":93:13)
#loc149 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":87:24)
#loc150 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_17.c":87:23)
#loc151 = loc(fused[#loc1, #loc2])
#loc152 = loc(fused[#loc3, #loc4])
#loc153 = loc(fused[#loc6, #loc7])
#loc154 = loc(fused[#loc8, #loc9])
#loc155 = loc(fused[#loc10, #loc11])
#loc156 = loc(fused[#loc12, #loc13])
#loc157 = loc(fused[#loc12, #loc14])
#loc158 = loc(fused[#loc15, #loc16])
#loc159 = loc(fused[#loc18, #loc17])
#loc160 = loc(fused[#loc19, #loc20])
#loc161 = loc(fused[#loc22, #loc21])
#loc162 = loc(fused[#loc23, #loc24])
#loc163 = loc(fused[#loc26, #loc20])
#loc164 = loc(fused[#loc30, #loc29])
#loc165 = loc(fused[#loc31, #loc32])
#loc166 = loc(fused[#loc34, #loc33])
#loc167 = loc(fused[#loc35, #loc36])
#loc168 = loc(fused[#loc38, #loc32])
#loc169 = loc(fused[#loc39, #loc40])
#loc170 = loc(fused[#loc41, #loc42])
#loc171 = loc(fused[#loc43, #loc40])
#loc172 = loc(fused[#loc48, #loc47])
#loc173 = loc(fused[#loc49, #loc50])
#loc174 = loc(fused[#loc51, #loc52])
#loc175 = loc(fused[#loc53, #loc54])
#loc176 = loc(fused[#loc55, #loc56])
#loc177 = loc(fused[#loc58, #loc59])
#loc178 = loc(fused[#loc60, #loc61])
#loc179 = loc(fused[#loc62, #loc63])
#loc180 = loc(fused[#loc62, #loc64])
#loc181 = loc(fused[#loc65, #loc66])
#loc182 = loc(fused[#loc68, #loc67])
#loc183 = loc(fused[#loc69, #loc70])
#loc184 = loc(fused[#loc72, #loc71])
#loc185 = loc(fused[#loc73, #loc74])
#loc186 = loc(fused[#loc76, #loc70])
#loc187 = loc(fused[#loc81, #loc80])
#loc188 = loc(fused[#loc82, #loc83])
#loc189 = loc(fused[#loc85, #loc84])
#loc190 = loc(fused[#loc86, #loc87])
#loc191 = loc(fused[#loc89, #loc83])
#loc192 = loc(fused[#loc90, #loc91])
#loc193 = loc(fused[#loc92, #loc93])
#loc194 = loc(fused[#loc94, #loc91])
#loc195 = loc(fused[#loc95, #loc96])
#loc196 = loc(fused[#loc98, #loc99])
#loc197 = loc(fused[#loc97, #loc100])
#loc198 = loc(fused[#loc101, #loc102, #loc103, #loc96])
#loc199 = loc(fused[#loc109, #loc108])
#loc200 = loc(fused[#loc110, #loc111])
#loc201 = loc(fused[#loc112, #loc113])
#loc202 = loc(fused[#loc114, #loc115])
#loc203 = loc(fused[#loc114, #loc116])
#loc204 = loc(fused[#loc117, #loc118])
#loc205 = loc(fused[#loc120, #loc119])
#loc206 = loc(fused[#loc121, #loc122])
#loc207 = loc(fused[#loc124, #loc123])
#loc208 = loc(fused[#loc125, #loc126])
#loc209 = loc(fused[#loc128, #loc122])
#loc210 = loc(fused[#loc130, #loc129])
#loc211 = loc(fused[#loc132, #loc131])
#loc212 = loc(fused[#loc133, #loc134])
#loc213 = loc(fused[#loc136, #loc135])
#loc214 = loc(fused[#loc137, #loc138])
#loc215 = loc(fused[#loc140, #loc134])
#loc216 = loc(fused[#loc141, #loc142])
#loc217 = loc(fused[#loc143, #loc144])
#loc218 = loc(fused[#loc145, #loc142])
#loc219 = loc(fused[#loc150, #loc149])
