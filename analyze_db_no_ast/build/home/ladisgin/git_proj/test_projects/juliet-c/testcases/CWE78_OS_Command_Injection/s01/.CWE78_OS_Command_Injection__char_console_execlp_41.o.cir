!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":45:65)
#loc8 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":45:72)
#loc89 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":90:69)
#loc90 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":90:76)
#true = #cir.bool<true> : !cir.bool
#loc119 = loc(fused[#loc7, #loc8])
#loc148 = loc(fused[#loc89, #loc90])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_console_execlp_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @execlp(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc117)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"sh\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc3)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"-c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc4)
  cir.func  @CWE78_OS_Command_Injection__char_console_execlp_41_badSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc119)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc9)
    %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc3)
    %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc3)
    %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc10)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc10)
    %5 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc4)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc4)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc11)
    %8 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc12)
    %9 = cir.call @execlp(%2, %4, %6, %7, %8) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc13)
    cir.return loc(#loc6)
  } loc(#loc118)
  cir.func private  @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc120)
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc121)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc122)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc123)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"fgets() failed\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc22)
  cir.func no_proto  @CWE78_OS_Command_Injection__char_console_execlp_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc125)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc126)
    %2 = cir.const #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc126)
    cir.store %2, %1 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc126)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc29)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc127)
    cir.scope {
      %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc129)
      %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc35)
      %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
      %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc35)
      cir.store %8, %5 : !u64i, !cir.ptr<!u64i> loc(#loc129)
      cir.scope {
        %9 = cir.const #cir.int<100> : !s32i loc(#loc39)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc39)
        %11 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc40)
        %12 = cir.binop(sub, %10, %11) : !u64i loc(#loc131)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc41)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc41)
        %15 = cir.cmp(gt, %12, %14) : !u64i, !s32i loc(#loc132)
        %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc42)
        cir.if %16 {
          cir.scope {
            %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc46)
            %18 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc47)
            %19 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %18 : !u64i), !cir.ptr<!s8i> loc(#loc48)
            %20 = cir.const #cir.int<100> : !s32i loc(#loc49)
            %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc49)
            %22 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc50)
            %23 = cir.binop(sub, %21, %22) : !u64i loc(#loc135)
            %24 = cir.cast(integral, %23 : !u64i), !s32i loc(#loc135)
            %25 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc122)
            %26 = cir.load %25 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc51)
            %27 = cir.call @fgets(%19, %24, %26) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc52)
            %28 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc53)
            %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc53)
            %30 = cir.cmp(ne, %27, %29) : !cir.ptr<!s8i>, !s32i loc(#loc136)
            %31 = cir.cast(int_to_bool, %30 : !s32i), !cir.bool loc(#loc54)
            cir.if %31 {
              %32 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc58)
              %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
              %34 = cir.call @strlen(%33) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc58)
              cir.store %34, %5 : !u64i, !cir.ptr<!u64i> loc(#loc138)
              cir.scope {
                %35 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc64)
                %36 = cir.const #cir.int<0> : !s32i loc(#loc65)
                %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc65)
                %38 = cir.cmp(gt, %35, %37) : !u64i, !s32i loc(#loc140)
                %39 = cir.cast(int_to_bool, %38 : !s32i), !cir.bool loc(#loc66)
                %40 = cir.ternary(%39, true {
                  %41 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc68)
                  %42 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc69)
                  %43 = cir.const #cir.int<1> : !s32i loc(#loc70)
                  %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc70)
                  %45 = cir.binop(sub, %42, %44) : !u64i loc(#loc141)
                  %46 = cir.ptr_stride(%41 : !cir.ptr<!s8i>, %45 : !u64i), !cir.ptr<!s8i> loc(#loc71)
                  %47 = cir.load %46 : !cir.ptr<!s8i>, !s8i loc(#loc68)
                  %48 = cir.cast(integral, %47 : !s8i), !s32i loc(#loc68)
                  %49 = cir.const #cir.int<10> : !s32i loc(#loc72)
                  %50 = cir.cmp(eq, %48, %49) : !s32i, !s32i loc(#loc142)
                  %51 = cir.cast(int_to_bool, %50 : !s32i), !cir.bool loc(#loc73)
                  %52 = cir.ternary(%51, true {
                    %53 = cir.const #true loc(#loc67)
                    cir.yield %53 : !cir.bool loc(#loc67)
                  }, false {
                    %53 = cir.const #false loc(#loc67)
                    cir.yield %53 : !cir.bool loc(#loc67)
                  }) : (!cir.bool) -> !cir.bool loc(#loc67)
                  cir.yield %52 : !cir.bool loc(#loc67)
                }, false {
                  %41 = cir.const #false loc(#loc67)
                  cir.yield %41 : !cir.bool loc(#loc67)
                }) : (!cir.bool) -> !cir.bool loc(#loc67)
                cir.if %40 {
                  %41 = cir.const #cir.int<0> : !s32i loc(#loc75)
                  %42 = cir.cast(integral, %41 : !s32i), !s8i loc(#loc75)
                  %43 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc76)
                  %44 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc77)
                  %45 = cir.const #cir.int<1> : !s32i loc(#loc78)
                  %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc78)
                  %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc144)
                  %48 = cir.ptr_stride(%43 : !cir.ptr<!s8i>, %47 : !u64i), !cir.ptr<!s8i> loc(#loc79)
                  cir.store %42, %48 : !s8i, !cir.ptr<!s8i> loc(#loc145)
                } loc(#loc143)
              } loc(#loc139)
            } else {
              %32 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc22)
              %33 = cir.cast(array_to_ptrdecay, %32 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc22)
              cir.call @printLine(%33) : (!cir.ptr<!s8i>) -> () loc(#loc80)
              %34 = cir.const #cir.int<0> : !s32i loc(#loc81)
              %35 = cir.cast(integral, %34 : !s32i), !s8i loc(#loc81)
              %36 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc82)
              %37 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc83)
              %38 = cir.ptr_stride(%36 : !cir.ptr<!s8i>, %37 : !u64i), !cir.ptr<!s8i> loc(#loc84)
              cir.store %35, %38 : !s8i, !cir.ptr<!s8i> loc(#loc146)
            } loc(#loc137)
          } loc(#loc134)
        } loc(#loc133)
      } loc(#loc130)
    } loc(#loc128)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc85)
    cir.call @CWE78_OS_Command_Injection__char_console_execlp_41_badSink(%4) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    cir.return loc(#loc24)
  } loc(#loc124)
  cir.func  @CWE78_OS_Command_Injection__char_console_execlp_41_goodG2BSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc89, #loc90])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc148)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc91)
    %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc92)
    %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc92)
    %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc93)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc93)
    %5 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc94)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc94)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc95)
    %8 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc96)
    %9 = cir.call @execlp(%2, %4, %6, %7, %8) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc97)
    cir.return loc(#loc88)
  } loc(#loc147)
  cir.func no_proto  @CWE78_OS_Command_Injection__char_console_execlp_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc150)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc100)
    cir.return loc(#loc99)
  } loc(#loc149)
  cir.func private  @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc151)
  cir.global "private"  constant internal dsolocal @".str3" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc104)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc153)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc154)
    %2 = cir.const #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc154)
    cir.store %2, %1 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc154)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc111)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc155)
    %4 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc113)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc114)
    %6 = cir.get_global @".str3" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc104)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc104)
    %8 = cir.call @strcat(%5, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc113)
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc115)
    cir.call @CWE78_OS_Command_Injection__char_console_execlp_41_goodG2BSink(%9) : (!cir.ptr<!s8i>) -> () loc(#loc116)
    cir.return loc(#loc106)
  } loc(#loc152)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_console_execlp_41.c":0:0)
#loc1 = loc("/usr/include/unistd.h":605:1)
#loc2 = loc("/usr/include/unistd.h":606:14)
#loc3 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":50:12)
#loc4 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":50:38)
#loc5 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":45:1)
#loc6 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":51:1)
#loc9 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":46:1)
#loc10 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":50:25)
#loc11 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":50:52)
#loc12 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":50:66)
#loc13 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":50:5)
#loc14 = loc("/usr/include/string.h":407:1)
#loc15 = loc("/usr/include/string.h":408:33)
#loc16 = loc("/usr/include/stdio.h":654:1)
#loc17 = loc("/usr/include/stdio.h":655:59)
#loc18 = loc("/usr/include/stdio.h":149:1)
#loc19 = loc("/usr/include/stdio.h":149:14)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc22 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":77:27)
#loc23 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":53:1)
#loc24 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":84:1)
#loc25 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":55:5)
#loc26 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":55:12)
#loc27 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":56:5)
#loc28 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":56:28)
#loc29 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":57:12)
#loc30 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":57:5)
#loc31 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":58:5)
#loc32 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":82:5)
#loc33 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":60:9)
#loc34 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":60:37)
#loc35 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":60:26)
#loc36 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":60:33)
#loc37 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":62:9)
#loc38 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":81:9)
#loc39 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":62:13)
#loc40 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":62:17)
#loc41 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":62:27)
#loc42 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":62:25)
#loc43 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":63:9)
#loc44 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":65:13)
#loc45 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":80:13)
#loc46 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":65:23)
#loc47 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":65:28)
#loc48 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":65:27)
#loc49 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":65:43)
#loc50 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":65:47)
#loc51 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":65:57)
#loc52 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":65:17)
#loc53 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":65:67)
#loc54 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":65:64)
#loc55 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":66:13)
#loc56 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":74:13)
#loc57 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":76:13)
#loc58 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":69:27)
#loc59 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":69:34)
#loc60 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":69:17)
#loc61 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":69:38)
#loc62 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":70:17)
#loc63 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":73:17)
#loc64 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":70:21)
#loc65 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":70:31)
#loc66 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":70:29)
#loc67 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":70:33)
#loc68 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":70:36)
#loc69 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":70:41)
#loc70 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":70:49)
#loc71 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":70:50)
#loc72 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":70:55)
#loc73 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":70:52)
#loc74 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":71:17)
#loc75 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":72:39)
#loc76 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":72:21)
#loc77 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":72:26)
#loc78 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":72:34)
#loc79 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":72:35)
#loc80 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":77:17)
#loc81 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":79:33)
#loc82 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":79:17)
#loc83 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":79:22)
#loc84 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":79:29)
#loc85 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":83:64)
#loc86 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":83:5)
#loc87 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":90:1)
#loc88 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":96:1)
#loc91 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":91:1)
#loc92 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":95:12)
#loc93 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":95:25)
#loc94 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":95:38)
#loc95 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":95:52)
#loc96 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":95:66)
#loc97 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":95:5)
#loc98 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":109:1)
#loc99 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":112:1)
#loc100 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":111:5)
#loc101 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":111:13)
#loc102 = loc("/usr/include/string.h":149:1)
#loc103 = loc("/usr/include/string.h":150:14)
#loc104 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":105:18)
#loc105 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":99:1)
#loc106 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":107:1)
#loc107 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":101:5)
#loc108 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":101:12)
#loc109 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":102:5)
#loc110 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":102:28)
#loc111 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":103:12)
#loc112 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":103:5)
#loc113 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":105:5)
#loc114 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":105:12)
#loc115 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":106:68)
#loc116 = loc("CWE78_OS_Command_Injection__char_console_execlp_41.c":106:5)
#loc117 = loc(fused[#loc1, #loc2])
#loc118 = loc(fused[#loc5, #loc6])
#loc120 = loc(fused[#loc14, #loc15])
#loc121 = loc(fused[#loc16, #loc17])
#loc122 = loc(fused[#loc18, #loc19])
#loc123 = loc(fused[#loc20, #loc21])
#loc124 = loc(fused[#loc23, #loc24])
#loc125 = loc(fused[#loc25, #loc26])
#loc126 = loc(fused[#loc27, #loc28])
#loc127 = loc(fused[#loc30, #loc29])
#loc128 = loc(fused[#loc31, #loc32])
#loc129 = loc(fused[#loc33, #loc34])
#loc130 = loc(fused[#loc37, #loc38])
#loc131 = loc(fused[#loc39, #loc40])
#loc132 = loc(fused[#loc39, #loc41])
#loc133 = loc(fused[#loc43, #loc38])
#loc134 = loc(fused[#loc44, #loc45])
#loc135 = loc(fused[#loc49, #loc50])
#loc136 = loc(fused[#loc52, #loc53])
#loc137 = loc(fused[#loc55, #loc56, #loc57, #loc45])
#loc138 = loc(fused[#loc60, #loc61])
#loc139 = loc(fused[#loc62, #loc63])
#loc140 = loc(fused[#loc64, #loc65])
#loc141 = loc(fused[#loc69, #loc70])
#loc142 = loc(fused[#loc68, #loc72])
#loc143 = loc(fused[#loc74, #loc63])
#loc144 = loc(fused[#loc77, #loc78])
#loc145 = loc(fused[#loc76, #loc75])
#loc146 = loc(fused[#loc82, #loc81])
#loc147 = loc(fused[#loc87, #loc88])
#loc149 = loc(fused[#loc98, #loc99])
#loc150 = loc(fused[#loc100, #loc101])
#loc151 = loc(fused[#loc102, #loc103])
#loc152 = loc(fused[#loc105, #loc106])
#loc153 = loc(fused[#loc107, #loc108])
#loc154 = loc(fused[#loc109, #loc110])
#loc155 = loc(fused[#loc112, #loc111])
