!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_multiply_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc106)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc107)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc108)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_multiply_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc110)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc111)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc14)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    cir.br ^bb1 loc(#loc113)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc113)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc18)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc18)
  ^bb3:  // pred: ^bb2
    %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc19)
    %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc107)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc20)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %10 = cir.call @__isoc99_fscanf(%7, %9, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc19)
    cir.br ^bb4 loc(#loc21)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc17)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc114)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc114)
  ^bb7:  // pred: ^bb6
    %11 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc24)
    cir.brcond %12 ^bb8, ^bb13 loc(#loc24)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc115)
  ^bb9:  // pred: ^bb8
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc28)
    %15 = cir.cmp(gt, %13, %14) : !s32i, !cir.bool loc(#loc116)
    cir.brcond %15 ^bb10, ^bb11 loc(#loc117)
  ^bb10:  // pred: ^bb9
    %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc30)
    %17 = cir.const #cir.int<2> : !s32i loc(#loc11)
    %18 = cir.binop(mul, %16, %17) nsw : !s32i loc(#loc30)
    cir.store %18, %0 : !s32i, !cir.ptr<!s32i> loc(#loc110)
    %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc32)
    cir.br ^bb11 loc(#loc26)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc26)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc33)
  ^bb13:  // 2 preds: ^bb7, ^bb12
    cir.br ^bb14 loc(#loc23)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc9)
  } loc(#loc109)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_multiply_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc119)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc120)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc35)
  } loc(#loc118)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc121)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc42)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc123)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc124)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc49)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    cir.br ^bb1 loc(#loc126)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc126)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc53)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc53)
  ^bb3:  // pred: ^bb2
    %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc54)
    %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc107)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc55)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc56)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc56)
    %10 = cir.call @__isoc99_fscanf(%7, %9, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc54)
    cir.br ^bb4 loc(#loc57)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc52)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc127)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc127)
  ^bb7:  // pred: ^bb6
    %11 = cir.const #cir.int<1> : !s32i loc(#loc60)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc60)
    cir.brcond %12 ^bb8, ^bb18 loc(#loc60)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc128)
  ^bb9:  // pred: ^bb8
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc63)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc64)
    %15 = cir.cmp(gt, %13, %14) : !s32i, !cir.bool loc(#loc129)
    cir.brcond %15 ^bb10, ^bb16 loc(#loc130)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc131)
  ^bb11:  // pred: ^bb10
    %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc68)
    %17 = cir.const #cir.int<2147483647> : !s32i loc(#loc69)
    %18 = cir.const #cir.int<2> : !s32i loc(#loc70)
    %19 = cir.binop(div, %17, %18) : !s32i loc(#loc132)
    %20 = cir.cmp(lt, %16, %19) : !s32i, !cir.bool loc(#loc133)
    cir.brcond %20 ^bb12, ^bb13 loc(#loc134)
  ^bb12:  // pred: ^bb11
    %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc75)
    %22 = cir.const #cir.int<2> : !s32i loc(#loc46)
    %23 = cir.binop(mul, %21, %22) nsw : !s32i loc(#loc75)
    cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc123)
    %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc76)
    cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc77)
    cir.br ^bb14 loc(#loc73)
  ^bb13:  // pred: ^bb11
    %25 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc42)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    cir.br ^bb14 loc(#loc67)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc67)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc62)
  ^bb16:  // 2 preds: ^bb9, ^bb15
    cir.br ^bb17 loc(#loc62)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc79)
  ^bb18:  // 2 preds: ^bb7, ^bb17
    cir.br ^bb19 loc(#loc59)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc44)
  } loc(#loc122)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc136)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc137)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc86)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc138)
    cir.br ^bb1 loc(#loc139)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc139)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc90)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc90)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<2> : !s32i loc(#loc91)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc140)
    cir.br ^bb4 loc(#loc93)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc89)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc141)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc141)
  ^bb7:  // pred: ^bb6
    %6 = cir.const #cir.int<1> : !s32i loc(#loc96)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc96)
    cir.brcond %7 ^bb8, ^bb13 loc(#loc96)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc142)
  ^bb9:  // pred: ^bb8
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc99)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc100)
    %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc143)
    cir.brcond %10 ^bb10, ^bb11 loc(#loc144)
  ^bb10:  // pred: ^bb9
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc102)
    %12 = cir.const #cir.int<2> : !s32i loc(#loc83)
    %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc102)
    cir.store %13, %0 : !s32i, !cir.ptr<!s32i> loc(#loc136)
    %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc104)
    cir.br ^bb11 loc(#loc98)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc98)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc105)
  ^bb13:  // 2 preds: ^bb7, ^bb12
    cir.br ^bb14 loc(#loc95)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc81)
  } loc(#loc135)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_multiply_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":30:23)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":22:1)
#loc9 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":43:1)
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":38:13)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":38:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":24:5)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":24:9)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":26:12)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":26:5)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":27:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":32:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":27:11)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":30:9)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":30:16)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":31:9)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":33:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":42:5)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":33:11)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":35:9)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":40:9)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":35:12)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":35:19)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":36:9)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":38:26)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":39:26)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":39:13)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":41:9)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":104:1)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":108:1)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":106:5)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":106:13)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":107:5)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":107:13)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":73:27)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":50:1)
#loc44 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":78:1)
#loc45 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":68:17)
#loc46 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":68:37)
#loc47 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":52:5)
#loc48 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":52:9)
#loc49 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":54:12)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":54:5)
#loc51 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":55:5)
#loc52 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":60:5)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":55:11)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":58:9)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":58:16)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":58:23)
#loc57 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":59:9)
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":61:5)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":77:5)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":61:11)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":63:9)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":75:9)
#loc63 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":63:12)
#loc64 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":63:19)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":64:9)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":66:13)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":74:13)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":66:17)
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":66:25)
#loc70 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":66:33)
#loc71 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":66:34)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":67:13)
#loc73 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":70:13)
#loc74 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":72:13)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":68:30)
#loc76 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":69:30)
#loc77 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":69:17)
#loc78 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":73:17)
#loc79 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":76:9)
#loc80 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":81:1)
#loc81 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":102:1)
#loc82 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":97:13)
#loc83 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":97:33)
#loc84 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":83:5)
#loc85 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":83:9)
#loc86 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":85:12)
#loc87 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":85:5)
#loc88 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":86:5)
#loc89 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":91:5)
#loc90 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":86:11)
#loc91 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":89:16)
#loc92 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":89:9)
#loc93 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":90:9)
#loc94 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":92:5)
#loc95 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":101:5)
#loc96 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":92:11)
#loc97 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":94:9)
#loc98 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":99:9)
#loc99 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":94:12)
#loc100 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":94:19)
#loc101 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":95:9)
#loc102 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":97:26)
#loc103 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":98:26)
#loc104 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":98:13)
#loc105 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_16.c":100:9)
#loc106 = loc(fused[#loc1, #loc2])
#loc107 = loc(fused[#loc3, #loc4])
#loc108 = loc(fused[#loc6, #loc7])
#loc109 = loc(fused[#loc8, #loc9])
#loc110 = loc(fused[#loc10, #loc11])
#loc111 = loc(fused[#loc12, #loc13])
#loc112 = loc(fused[#loc15, #loc14])
#loc113 = loc(fused[#loc16, #loc17])
#loc114 = loc(fused[#loc22, #loc23])
#loc115 = loc(fused[#loc25, #loc26])
#loc116 = loc(fused[#loc27, #loc28])
#loc117 = loc(fused[#loc29, #loc26])
#loc118 = loc(fused[#loc34, #loc35])
#loc119 = loc(fused[#loc36, #loc37])
#loc120 = loc(fused[#loc38, #loc39])
#loc121 = loc(fused[#loc40, #loc41])
#loc122 = loc(fused[#loc43, #loc44])
#loc123 = loc(fused[#loc45, #loc46])
#loc124 = loc(fused[#loc47, #loc48])
#loc125 = loc(fused[#loc50, #loc49])
#loc126 = loc(fused[#loc51, #loc52])
#loc127 = loc(fused[#loc58, #loc59])
#loc128 = loc(fused[#loc61, #loc62])
#loc129 = loc(fused[#loc63, #loc64])
#loc130 = loc(fused[#loc65, #loc62])
#loc131 = loc(fused[#loc66, #loc67])
#loc132 = loc(fused[#loc69, #loc70])
#loc133 = loc(fused[#loc68, #loc71])
#loc134 = loc(fused[#loc72, #loc73, #loc74, #loc67])
#loc135 = loc(fused[#loc80, #loc81])
#loc136 = loc(fused[#loc82, #loc83])
#loc137 = loc(fused[#loc84, #loc85])
#loc138 = loc(fused[#loc87, #loc86])
#loc139 = loc(fused[#loc88, #loc89])
#loc140 = loc(fused[#loc92, #loc91])
#loc141 = loc(fused[#loc94, #loc95])
#loc142 = loc(fused[#loc97, #loc98])
#loc143 = loc(fused[#loc99, #loc100])
#loc144 = loc(fused[#loc101, #loc98])
