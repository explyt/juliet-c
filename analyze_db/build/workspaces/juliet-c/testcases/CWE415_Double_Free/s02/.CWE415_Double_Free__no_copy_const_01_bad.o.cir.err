clang: warning: argument unused during compilation: '-c' [-Wunused-command-line-argument]
warning: unknown warning option '-Wno-terminate' [-Wunknown-warning-option]
clang: /workspaces/clangir/clang/lib/CIR/CodeGen/CIRGenException.cpp:291: mlir::Block *clang::CIRGen::CIRGenFunction::getEHResumeBlock(bool, cir::TryOp): Assertion `tryOp && "expected available cir.try"' failed.
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /workspaces/clangir/install/bin/clang -S -Xclang -emit-cir-flat -std=c++11 -Wno-terminate -std=c++11 -I ../../../testcasesupport -c CWE415_Double_Free__no_copy_const_01_bad.cpp -o /workspaces/juliet-c/testcases/CWE415_Double_Free/s02/.CWE415_Double_Free__no_copy_const_01_bad.o.cir
1.	<eof> parser at end of file
2.	CWE415_Double_Free__no_copy_const_01_bad.cpp:8:11: LLVM IR generation of declaration 'CWE415_Double_Free__no_copy_const_01'
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  clang     0x000055aa266dcb68 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 40
1  clang     0x000055aa266da73e llvm::sys::RunSignalHandlers() + 238
2  clang     0x000055aa2664b946
3  libc.so.6 0x00007fd66fe45330
4  libc.so.6 0x00007fd66fe9eb2c pthread_kill + 284
5  libc.so.6 0x00007fd66fe4527e gsignal + 30
6  libc.so.6 0x00007fd66fe288ff abort + 223
7  libc.so.6 0x00007fd66fe2881b
8  libc.so.6 0x00007fd66fe3b517
9  clang     0x000055aa27adff5c clang::CIRGen::CIRGenFunction::getEHDispatchBlock(clang::CIRGen::EHScopeStack::stable_iterator, cir::TryOp) + 1900
10 clang     0x000055aa27ace949 clang::CIRGen::CIRGenFunction::PopCleanupBlock(bool) + 2041
11 clang     0x000055aa27acf82e clang::CIRGen::CIRGenFunction::PopCleanupBlocks(clang::CIRGen::EHScopeStack::stable_iterator, std::initializer_list<mlir::Value*>) + 78
12 clang     0x000055aa27b4594f clang::CIRGen::CIRGenFunction::generateCode(clang::GlobalDecl, cir::FuncOp, clang::CIRGen::CIRGenFunctionInfo const&) + 1823
13 clang     0x000055aa27a98839 clang::CIRGen::CIRGenModule::emitGlobalFunctionDefinition(clang::GlobalDecl, mlir::Operation*) + 393
14 clang     0x000055aa27a96968 clang::CIRGen::CIRGenModule::emitGlobal(clang::GlobalDecl) + 1656
15 clang     0x000055aa27aa128c clang::CIRGen::CIRGenModule::emitTopLevelDecl(clang::Decl*) + 236
16 clang     0x000055aa27aa116a clang::CIRGen::CIRGenModule::emitDeclContext(clang::DeclContext const*) + 58
17 clang     0x000055aa27a934af cir::CIRGenerator::HandleTopLevelDecl(clang::DeclGroupRef) + 159
18 clang     0x000055aa279859e1
19 clang     0x000055aa29a87ada clang::ParseAST(clang::Sema&, bool, bool) + 826
20 clang     0x000055aa271a2d36 clang::FrontendAction::Execute() + 38
21 clang     0x000055aa2710e3ad clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 1149
22 clang     0x000055aa2728bedf clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 815
23 clang     0x000055aa254aea7a cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 6074
24 clang     0x000055aa254ab06d
25 clang     0x000055aa26f55339
26 clang     0x000055aa2664b686 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 150
27 clang     0x000055aa26f54892 clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const + 242
28 clang     0x000055aa26f10c27 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 455
29 clang     0x000055aa26f10f17 clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&, bool) const + 135
30 clang     0x000055aa26f30928 clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) + 904
31 clang     0x000055aa254aa6ba clang_main(int, char**, llvm::ToolContext const&) + 6090
32 clang     0x000055aa254ba147 main + 87
33 libc.so.6 0x00007fd66fe2a1ca
34 libc.so.6 0x00007fd66fe2a28b __libc_start_main + 139
35 clang     0x000055aa254a8aa5 _start + 37
clang: error: clang frontend command failed with exit code 134 (use -v to see invocation)
clang version 21.0.0git (git@github.com:llvm/clangir.git 4e7a2236d38507e994cbe5b79c888cf86427e7db)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /workspaces/clangir/install/bin
Build config: +assertions
clang: error: unable to execute command: Aborted (core dumped)
clang: note: diagnostic msg: Error generating preprocessed source(s).
