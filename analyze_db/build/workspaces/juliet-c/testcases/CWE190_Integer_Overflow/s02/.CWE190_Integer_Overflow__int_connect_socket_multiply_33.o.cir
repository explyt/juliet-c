!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc278)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc279)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc280)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc281)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc282)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc283)
  cir.func private @close(!s32i) -> !s32i loc(#loc284)
  cir.func private @printIntLine(!s32i) loc(#loc285)
  cir.func @_ZN55CWE190_Integer_Overflow__int_connect_socket_multiply_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc287)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc288)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc23)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc24)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc289)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc291)
      %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc292)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc293)
      %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc294)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc33)
      %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc33)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc293)
      cir.scope {
        cir.do {
          cir.scope {
            %9 = cir.const #cir.int<2> : !s32i loc(#loc40)
            %10 = cir.const #cir.int<1> : !u32i loc(#loc41)
            %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc41)
            %12 = cir.const #cir.int<6> : !u32i loc(#loc42)
            %13 = cir.cast(integral, %12 : !u32i), !s32i loc(#loc42)
            %14 = cir.call @socket(%9, %11, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc43)
            cir.store %14, %5 : !s32i, !cir.ptr<!s32i> loc(#loc297)
            cir.scope {
              %52 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc48)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc49)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc49)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc299)
              cir.if %55 {
                cir.break loc(#loc51)
              } loc(#loc300)
            } loc(#loc298)
            %15 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc301)
            %16 = cir.const #cir.int<0> : !s32i loc(#loc54)
            %17 = cir.const #cir.int<16> : !u64i loc(#loc302)
            cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc303)
            %18 = cir.const #cir.int<2> : !s32i loc(#loc59)
            %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc59)
            %20 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc60)
            cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc304)
            %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
            %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
            %23 = cir.call @inet_addr(%22) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc62)
            %24 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc63)
            %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc64)
            cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc305)
            %26 = cir.const #cir.int<27015> : !s32i loc(#loc67)
            %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc67)
            %28 = cir.call @htons(%27) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc68)
            %29 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
            cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc306)
            cir.scope {
              %52 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc74)
              %53 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc308)
              %54 = cir.const #cir.int<16> : !u64i loc(#loc309)
              %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc309)
              %56 = cir.call @connect(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc79)
              %57 = cir.const #cir.int<1> : !s32i loc(#loc80)
              %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc80)
              %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc310)
              cir.if %59 {
                cir.break loc(#loc82)
              } loc(#loc311)
            } loc(#loc307)
            %30 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc83)
            %31 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc84)
            %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc84)
            %33 = cir.const #cir.int<3> : !s32i loc(#loc85)
            %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc85)
            %35 = cir.const #cir.int<4> : !u64i loc(#loc85)
            %36 = cir.binop(mul, %34, %35) : !u64i loc(#loc85)
            %37 = cir.const #cir.int<2> : !s32i loc(#loc85)
            %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc85)
            %39 = cir.binop(add, %36, %38) : !u64i loc(#loc85)
            %40 = cir.const #cir.int<1> : !s32i loc(#loc86)
            %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc86)
            %42 = cir.binop(sub, %39, %41) : !u64i loc(#loc312)
            %43 = cir.const #cir.int<0> : !s32i loc(#loc87)
            %44 = cir.call @recv(%30, %32, %42, %43) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc88)
            %45 = cir.cast(integral, %44 : !s64i), !s32i loc(#loc88)
            cir.store %45, %3 : !s32i, !cir.ptr<!s32i> loc(#loc313)
            cir.scope {
              %52 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc93)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc94)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc94)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc315)
              %56 = cir.ternary(%55, true {
                %57 = cir.const #true loc(#loc95)
                cir.yield %57 : !cir.bool loc(#loc95)
              }, false {
                %57 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc96)
                %58 = cir.const #cir.int<0> : !s32i loc(#loc97)
                %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc316)
                %60 = cir.ternary(%59, true {
                  %61 = cir.const #true loc(#loc95)
                  cir.yield %61 : !cir.bool loc(#loc95)
                }, false {
                  %61 = cir.const #false loc(#loc95)
                  cir.yield %61 : !cir.bool loc(#loc95)
                }) : (!cir.bool) -> !cir.bool loc(#loc95)
                cir.yield %60 : !cir.bool loc(#loc95)
              }) : (!cir.bool) -> !cir.bool loc(#loc95)
              cir.if %56 {
                cir.break loc(#loc99)
              } loc(#loc317)
            } loc(#loc314)
            %46 = cir.const #cir.int<0> : !s8i loc(#loc100)
            %47 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc101)
            %48 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc102)
            %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc102)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc318)
            %50 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc103)
            %51 = cir.call @atoi(%50) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc104)
            cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc319)
          } loc(#loc296)
          cir.yield loc(#loc37)
        } while {
          %9 = cir.const #cir.int<0> : !s32i loc(#loc107)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc107)
          cir.condition(%10) loc(#loc107)
        } loc(#loc295)
      } loc(#loc295)
      cir.scope {
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc110)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc111)
        %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc111)
        %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc321)
        cir.if %12 {
          %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc113)
          %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc114)
        } loc(#loc322)
      } loc(#loc320)
    } loc(#loc290)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc324)
      %4 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc118)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc118)
      cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc324)
      cir.scope {
        %6 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc121)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc122)
        %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc326)
        cir.if %8 {
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc328)
          %10 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc126)
          %11 = cir.const #cir.int<2> : !s32i loc(#loc125)
          %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc126)
          cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc328)
          %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc127)
          cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc128)
        } loc(#loc327)
      } loc(#loc325)
    } loc(#loc323)
    cir.return loc(#loc19)
  } loc(#loc286)
  cir.func internal private @_ZN55CWE190_Integer_Overflow__int_connect_socket_multiply_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc330)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc331)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc134)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc135)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc332)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc137)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc333)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc335)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc142)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc142)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc335)
      cir.scope {
        %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc145)
        %8 = cir.const #cir.int<0> : !s32i loc(#loc146)
        %9 = cir.cmp(gt, %7, %8) : !s32i, !cir.bool loc(#loc337)
        cir.if %9 {
          %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc339)
          %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc150)
          %12 = cir.const #cir.int<2> : !s32i loc(#loc149)
          %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc150)
          cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc339)
          %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc151)
          cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc152)
        } loc(#loc338)
      } loc(#loc336)
    } loc(#loc334)
    cir.return loc(#loc130)
  } loc(#loc329)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc340)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc155)
  cir.func internal private @_ZN55CWE190_Integer_Overflow__int_connect_socket_multiply_33L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc342)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc343)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc161)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc162)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc344)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc346)
      %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc347)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc348)
      %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc349)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc171)
      %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc171)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc348)
      cir.scope {
        cir.do {
          cir.scope {
            %9 = cir.const #cir.int<2> : !s32i loc(#loc178)
            %10 = cir.const #cir.int<1> : !u32i loc(#loc179)
            %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc179)
            %12 = cir.const #cir.int<6> : !u32i loc(#loc180)
            %13 = cir.cast(integral, %12 : !u32i), !s32i loc(#loc180)
            %14 = cir.call @socket(%9, %11, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc181)
            cir.store %14, %5 : !s32i, !cir.ptr<!s32i> loc(#loc352)
            cir.scope {
              %52 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc186)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc187)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc187)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc354)
              cir.if %55 {
                cir.break loc(#loc189)
              } loc(#loc355)
            } loc(#loc353)
            %15 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc356)
            %16 = cir.const #cir.int<0> : !s32i loc(#loc192)
            %17 = cir.const #cir.int<16> : !u64i loc(#loc357)
            cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc358)
            %18 = cir.const #cir.int<2> : !s32i loc(#loc197)
            %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc197)
            %20 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc60)
            cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc359)
            %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc199)
            %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc199)
            %23 = cir.call @inet_addr(%22) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc200)
            %24 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc63)
            %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc64)
            cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc360)
            %26 = cir.const #cir.int<27015> : !s32i loc(#loc203)
            %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc203)
            %28 = cir.call @htons(%27) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc204)
            %29 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
            cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc361)
            cir.scope {
              %52 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc209)
              %53 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc363)
              %54 = cir.const #cir.int<16> : !u64i loc(#loc364)
              %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc364)
              %56 = cir.call @connect(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc214)
              %57 = cir.const #cir.int<1> : !s32i loc(#loc215)
              %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc215)
              %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc365)
              cir.if %59 {
                cir.break loc(#loc217)
              } loc(#loc366)
            } loc(#loc362)
            %30 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc218)
            %31 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc219)
            %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc219)
            %33 = cir.const #cir.int<3> : !s32i loc(#loc220)
            %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc220)
            %35 = cir.const #cir.int<4> : !u64i loc(#loc220)
            %36 = cir.binop(mul, %34, %35) : !u64i loc(#loc220)
            %37 = cir.const #cir.int<2> : !s32i loc(#loc220)
            %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc220)
            %39 = cir.binop(add, %36, %38) : !u64i loc(#loc220)
            %40 = cir.const #cir.int<1> : !s32i loc(#loc221)
            %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc221)
            %42 = cir.binop(sub, %39, %41) : !u64i loc(#loc367)
            %43 = cir.const #cir.int<0> : !s32i loc(#loc222)
            %44 = cir.call @recv(%30, %32, %42, %43) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc223)
            %45 = cir.cast(integral, %44 : !s64i), !s32i loc(#loc223)
            cir.store %45, %3 : !s32i, !cir.ptr<!s32i> loc(#loc368)
            cir.scope {
              %52 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc228)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc229)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc229)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc370)
              %56 = cir.ternary(%55, true {
                %57 = cir.const #true loc(#loc230)
                cir.yield %57 : !cir.bool loc(#loc230)
              }, false {
                %57 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc231)
                %58 = cir.const #cir.int<0> : !s32i loc(#loc232)
                %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc371)
                %60 = cir.ternary(%59, true {
                  %61 = cir.const #true loc(#loc230)
                  cir.yield %61 : !cir.bool loc(#loc230)
                }, false {
                  %61 = cir.const #false loc(#loc230)
                  cir.yield %61 : !cir.bool loc(#loc230)
                }) : (!cir.bool) -> !cir.bool loc(#loc230)
                cir.yield %60 : !cir.bool loc(#loc230)
              }) : (!cir.bool) -> !cir.bool loc(#loc230)
              cir.if %56 {
                cir.break loc(#loc234)
              } loc(#loc372)
            } loc(#loc369)
            %46 = cir.const #cir.int<0> : !s8i loc(#loc235)
            %47 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc236)
            %48 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc237)
            %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc237)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc373)
            %50 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc238)
            %51 = cir.call @atoi(%50) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc239)
            cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc374)
          } loc(#loc351)
          cir.yield loc(#loc175)
        } while {
          %9 = cir.const #cir.int<0> : !s32i loc(#loc242)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc242)
          cir.condition(%10) loc(#loc242)
        } loc(#loc350)
      } loc(#loc350)
      cir.scope {
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc245)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc246)
        %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc246)
        %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc376)
        cir.if %12 {
          %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc248)
          %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc249)
        } loc(#loc377)
      } loc(#loc375)
    } loc(#loc345)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc379)
      %4 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc253)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc253)
      cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc379)
      cir.scope {
        %6 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc256)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc257)
        %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc381)
        cir.if %8 {
          cir.scope {
            %9 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc261)
            %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc262)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc263)
            %12 = cir.binop(div, %10, %11) : !s32i loc(#loc384)
            %13 = cir.cmp(lt, %9, %12) : !s32i, !cir.bool loc(#loc385)
            cir.if %13 {
              %14 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc387)
              %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc270)
              %16 = cir.const #cir.int<2> : !s32i loc(#loc269)
              %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc270)
              cir.store %17, %14 : !s32i, !cir.ptr<!s32i> loc(#loc387)
              %18 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc271)
              cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc272)
            } else {
              %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc155)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc155)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc273)
            } loc(#loc386)
          } loc(#loc383)
        } loc(#loc382)
      } loc(#loc380)
    } loc(#loc378)
    cir.return loc(#loc157)
  } loc(#loc341)
  cir.func @_ZN55CWE190_Integer_Overflow__int_connect_socket_multiply_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN55CWE190_Integer_Overflow__int_connect_socket_multiply_33L7goodG2BEv() : () -> () loc(#loc276)
    cir.call @_ZN55CWE190_Integer_Overflow__int_connect_socket_multiply_33L7goodB2GEv() : () -> () loc(#loc277)
    cir.return loc(#loc275)
  } loc(#loc388)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":79:49)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":47:1)
#loc19 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":118:1)
#loc20 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":49:5)
#loc21 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":49:9)
#loc22 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":50:5)
#loc23 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":50:20)
#loc24 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":52:12)
#loc25 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":52:5)
#loc26 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":53:5)
#loc27 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":108:5)
#loc28 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":58:9)
#loc29 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":58:13)
#loc30 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":59:9)
#loc31 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":59:28)
#loc32 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":60:9)
#loc33 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":60:32)
#loc34 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":61:9)
#loc35 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":61:41)
#loc36 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":62:9)
#loc37 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":97:17)
#loc38 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":63:9)
#loc39 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":96:9)
#loc40 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":72:36)
#loc41 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":72:45)
#loc42 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":72:58)
#loc43 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":72:29)
#loc44 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":72:13)
#loc45 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":72:69)
#loc46 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":73:13)
#loc47 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":76:13)
#loc48 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":73:17)
#loc49 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":73:34)
#loc50 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":74:13)
#loc51 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":75:17)
#loc52 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":77:20)
#loc53 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":77:21)
#loc54 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":77:30)
#loc55 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":77:33)
#loc56 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":77:47)
#loc57 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":77:13)
#loc58 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":77:48)
#loc59 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":78:34)
#loc60 = loc("/usr/include/netinet/in.h":249:5)
#loc61 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":78:13)
#loc62 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":79:39)
#loc63 = loc("/usr/include/netinet/in.h":251:20)
#loc64 = loc("/usr/include/netinet/in.h":33:15)
#loc65 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":79:13)
#loc66 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":79:59)
#loc67 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":80:38)
#loc68 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":80:32)
#loc69 = loc("/usr/include/netinet/in.h":250:15)
#loc70 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":80:13)
#loc71 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":80:46)
#loc72 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":81:13)
#loc73 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":84:13)
#loc74 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":81:25)
#loc75 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":81:58)
#loc76 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":81:59)
#loc77 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":81:68)
#loc78 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":81:82)
#loc79 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":81:17)
#loc80 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":81:88)
#loc81 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":82:13)
#loc82 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":83:17)
#loc83 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":87:31)
#loc84 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":87:46)
#loc85 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":87:59)
#loc86 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":87:77)
#loc87 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":87:80)
#loc88 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":87:26)
#loc89 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":87:13)
#loc90 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":87:81)
#loc91 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":88:13)
#loc92 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":91:13)
#loc93 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":88:17)
#loc94 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":88:31)
#loc95 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":88:44)
#loc96 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":88:47)
#loc97 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":88:61)
#loc98 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":89:13)
#loc99 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":90:17)
#loc100 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":93:39)
#loc101 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":93:25)
#loc102 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":93:13)
#loc103 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":95:25)
#loc104 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":95:20)
#loc105 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":95:13)
#loc106 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":95:36)
#loc107 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":97:16)
#loc108 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":98:9)
#loc109 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":101:9)
#loc110 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":98:13)
#loc111 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":98:30)
#loc112 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":99:9)
#loc113 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":100:26)
#loc114 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":100:13)
#loc115 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":109:5)
#loc116 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":117:5)
#loc117 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":110:9)
#loc118 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":110:20)
#loc119 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":111:9)
#loc120 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":116:9)
#loc121 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":111:12)
#loc122 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":111:19)
#loc123 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":112:9)
#loc124 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":114:13)
#loc125 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":114:33)
#loc126 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":114:26)
#loc127 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":115:26)
#loc128 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":115:13)
#loc129 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":125:1)
#loc130 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":142:1)
#loc131 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":127:5)
#loc132 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":127:9)
#loc133 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":128:5)
#loc134 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":128:20)
#loc135 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":130:12)
#loc136 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":130:5)
#loc137 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":132:12)
#loc138 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":132:5)
#loc139 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":133:5)
#loc140 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":141:5)
#loc141 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":134:9)
#loc142 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":134:20)
#loc143 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":135:9)
#loc144 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":140:9)
#loc145 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":135:12)
#loc146 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":135:19)
#loc147 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":136:9)
#loc148 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":138:13)
#loc149 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":138:33)
#loc150 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":138:26)
#loc151 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":139:26)
#loc152 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":139:13)
#loc153 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc154 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc155 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":219:27)
#loc156 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":145:1)
#loc157 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":223:1)
#loc158 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":147:5)
#loc159 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":147:9)
#loc160 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":148:5)
#loc161 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":148:20)
#loc162 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":150:12)
#loc163 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":150:5)
#loc164 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":151:5)
#loc165 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":206:5)
#loc166 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":156:9)
#loc167 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":156:13)
#loc168 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":157:9)
#loc169 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":157:28)
#loc170 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":158:9)
#loc171 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":158:32)
#loc172 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":159:9)
#loc173 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":159:41)
#loc174 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":160:9)
#loc175 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":195:17)
#loc176 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":161:9)
#loc177 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":194:9)
#loc178 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":170:36)
#loc179 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":170:45)
#loc180 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":170:58)
#loc181 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":170:29)
#loc182 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":170:13)
#loc183 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":170:69)
#loc184 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":171:13)
#loc185 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":174:13)
#loc186 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":171:17)
#loc187 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":171:34)
#loc188 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":172:13)
#loc189 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":173:17)
#loc190 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":175:20)
#loc191 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":175:21)
#loc192 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":175:30)
#loc193 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":175:33)
#loc194 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":175:47)
#loc195 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":175:13)
#loc196 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":175:48)
#loc197 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":176:34)
#loc198 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":176:13)
#loc199 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":177:49)
#loc200 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":177:39)
#loc201 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":177:13)
#loc202 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":177:59)
#loc203 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":178:38)
#loc204 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":178:32)
#loc205 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":178:13)
#loc206 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":178:46)
#loc207 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":179:13)
#loc208 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":182:13)
#loc209 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":179:25)
#loc210 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":179:58)
#loc211 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":179:59)
#loc212 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":179:68)
#loc213 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":179:82)
#loc214 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":179:17)
#loc215 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":179:88)
#loc216 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":180:13)
#loc217 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":181:17)
#loc218 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":185:31)
#loc219 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":185:46)
#loc220 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":185:59)
#loc221 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":185:77)
#loc222 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":185:80)
#loc223 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":185:26)
#loc224 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":185:13)
#loc225 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":185:81)
#loc226 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":186:13)
#loc227 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":189:13)
#loc228 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":186:17)
#loc229 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":186:31)
#loc230 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":186:44)
#loc231 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":186:47)
#loc232 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":186:61)
#loc233 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":187:13)
#loc234 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":188:17)
#loc235 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":191:39)
#loc236 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":191:25)
#loc237 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":191:13)
#loc238 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":193:25)
#loc239 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":193:20)
#loc240 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":193:13)
#loc241 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":193:36)
#loc242 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":195:16)
#loc243 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":196:9)
#loc244 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":199:9)
#loc245 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":196:13)
#loc246 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":196:30)
#loc247 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":197:9)
#loc248 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":198:26)
#loc249 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":198:13)
#loc250 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":207:5)
#loc251 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":222:5)
#loc252 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":208:9)
#loc253 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":208:20)
#loc254 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":209:9)
#loc255 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":221:9)
#loc256 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":209:12)
#loc257 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":209:19)
#loc258 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":210:9)
#loc259 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":212:13)
#loc260 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":220:13)
#loc261 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":212:17)
#loc262 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":212:25)
#loc263 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":212:33)
#loc264 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":212:34)
#loc265 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":213:13)
#loc266 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":216:13)
#loc267 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":218:13)
#loc268 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":214:17)
#loc269 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":214:37)
#loc270 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":214:30)
#loc271 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":215:30)
#loc272 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":215:17)
#loc273 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":219:17)
#loc274 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":225:1)
#loc275 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":229:1)
#loc276 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":227:5)
#loc277 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_33.cpp":228:5)
#loc278 = loc(fused[#loc1, #loc2])
#loc279 = loc(fused[#loc3, #loc4])
#loc280 = loc(fused[#loc6, #loc7])
#loc281 = loc(fused[#loc8, #loc9])
#loc282 = loc(fused[#loc10, #loc11])
#loc283 = loc(fused[#loc12, #loc13])
#loc284 = loc(fused[#loc14, #loc15])
#loc285 = loc(fused[#loc16, #loc17])
#loc286 = loc(fused[#loc18, #loc19])
#loc287 = loc(fused[#loc20, #loc21])
#loc288 = loc(fused[#loc22, #loc23])
#loc289 = loc(fused[#loc25, #loc24])
#loc290 = loc(fused[#loc26, #loc27])
#loc291 = loc(fused[#loc28, #loc29])
#loc292 = loc(fused[#loc30, #loc31])
#loc293 = loc(fused[#loc32, #loc33])
#loc294 = loc(fused[#loc34, #loc35])
#loc295 = loc(fused[#loc36, #loc37])
#loc296 = loc(fused[#loc38, #loc39])
#loc297 = loc(fused[#loc44, #loc45])
#loc298 = loc(fused[#loc46, #loc47])
#loc299 = loc(fused[#loc48, #loc49])
#loc300 = loc(fused[#loc50, #loc47])
#loc301 = loc(fused[#loc52, #loc53])
#loc302 = loc(fused[#loc55, #loc56])
#loc303 = loc(fused[#loc57, #loc58])
#loc304 = loc(fused[#loc61, #loc59])
#loc305 = loc(fused[#loc65, #loc66])
#loc306 = loc(fused[#loc70, #loc71])
#loc307 = loc(fused[#loc72, #loc73])
#loc308 = loc(fused[#loc75, #loc76])
#loc309 = loc(fused[#loc77, #loc78])
#loc310 = loc(fused[#loc79, #loc80])
#loc311 = loc(fused[#loc81, #loc73])
#loc312 = loc(fused[#loc85, #loc86])
#loc313 = loc(fused[#loc89, #loc90])
#loc314 = loc(fused[#loc91, #loc92])
#loc315 = loc(fused[#loc93, #loc94])
#loc316 = loc(fused[#loc96, #loc97])
#loc317 = loc(fused[#loc98, #loc92])
#loc318 = loc(fused[#loc102, #loc100])
#loc319 = loc(fused[#loc105, #loc106])
#loc320 = loc(fused[#loc108, #loc109])
#loc321 = loc(fused[#loc110, #loc111])
#loc322 = loc(fused[#loc112, #loc109])
#loc323 = loc(fused[#loc115, #loc116])
#loc324 = loc(fused[#loc117, #loc118])
#loc325 = loc(fused[#loc119, #loc120])
#loc326 = loc(fused[#loc121, #loc122])
#loc327 = loc(fused[#loc123, #loc120])
#loc328 = loc(fused[#loc124, #loc125])
#loc329 = loc(fused[#loc129, #loc130])
#loc330 = loc(fused[#loc131, #loc132])
#loc331 = loc(fused[#loc133, #loc134])
#loc332 = loc(fused[#loc136, #loc135])
#loc333 = loc(fused[#loc138, #loc137])
#loc334 = loc(fused[#loc139, #loc140])
#loc335 = loc(fused[#loc141, #loc142])
#loc336 = loc(fused[#loc143, #loc144])
#loc337 = loc(fused[#loc145, #loc146])
#loc338 = loc(fused[#loc147, #loc144])
#loc339 = loc(fused[#loc148, #loc149])
#loc340 = loc(fused[#loc153, #loc154])
#loc341 = loc(fused[#loc156, #loc157])
#loc342 = loc(fused[#loc158, #loc159])
#loc343 = loc(fused[#loc160, #loc161])
#loc344 = loc(fused[#loc163, #loc162])
#loc345 = loc(fused[#loc164, #loc165])
#loc346 = loc(fused[#loc166, #loc167])
#loc347 = loc(fused[#loc168, #loc169])
#loc348 = loc(fused[#loc170, #loc171])
#loc349 = loc(fused[#loc172, #loc173])
#loc350 = loc(fused[#loc174, #loc175])
#loc351 = loc(fused[#loc176, #loc177])
#loc352 = loc(fused[#loc182, #loc183])
#loc353 = loc(fused[#loc184, #loc185])
#loc354 = loc(fused[#loc186, #loc187])
#loc355 = loc(fused[#loc188, #loc185])
#loc356 = loc(fused[#loc190, #loc191])
#loc357 = loc(fused[#loc193, #loc194])
#loc358 = loc(fused[#loc195, #loc196])
#loc359 = loc(fused[#loc198, #loc197])
#loc360 = loc(fused[#loc201, #loc202])
#loc361 = loc(fused[#loc205, #loc206])
#loc362 = loc(fused[#loc207, #loc208])
#loc363 = loc(fused[#loc210, #loc211])
#loc364 = loc(fused[#loc212, #loc213])
#loc365 = loc(fused[#loc214, #loc215])
#loc366 = loc(fused[#loc216, #loc208])
#loc367 = loc(fused[#loc220, #loc221])
#loc368 = loc(fused[#loc224, #loc225])
#loc369 = loc(fused[#loc226, #loc227])
#loc370 = loc(fused[#loc228, #loc229])
#loc371 = loc(fused[#loc231, #loc232])
#loc372 = loc(fused[#loc233, #loc227])
#loc373 = loc(fused[#loc237, #loc235])
#loc374 = loc(fused[#loc240, #loc241])
#loc375 = loc(fused[#loc243, #loc244])
#loc376 = loc(fused[#loc245, #loc246])
#loc377 = loc(fused[#loc247, #loc244])
#loc378 = loc(fused[#loc250, #loc251])
#loc379 = loc(fused[#loc252, #loc253])
#loc380 = loc(fused[#loc254, #loc255])
#loc381 = loc(fused[#loc256, #loc257])
#loc382 = loc(fused[#loc258, #loc255])
#loc383 = loc(fused[#loc259, #loc260])
#loc384 = loc(fused[#loc262, #loc263])
#loc385 = loc(fused[#loc261, #loc264])
#loc386 = loc(fused[#loc265, #loc266, #loc267, #loc260])
#loc387 = loc(fused[#loc268, #loc269])
#loc388 = loc(fused[#loc274, #loc275])
