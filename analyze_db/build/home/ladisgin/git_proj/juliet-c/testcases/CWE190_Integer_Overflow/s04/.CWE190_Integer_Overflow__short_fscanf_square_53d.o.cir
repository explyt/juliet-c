!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":24:63)
#loc6 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":24:69)
#loc17 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":38:67)
#loc18 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":38:73)
#loc33 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":48:67)
#loc34 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":48:73)
#loc54 = loc(fused[#loc5, #loc6])
#loc58 = loc(fused[#loc17, #loc18])
#loc63 = loc(fused[#loc33, #loc34])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_53d.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc52)
  cir.func @CWE190_Integer_Overflow__short_fscanf_square_53d_badSink(%arg0: !s16i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc55)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc54)
    cir.store %arg0, %1 : !s16i, !cir.ptr<!s16i> loc(#loc9)
    cir.br ^bb1 loc(#loc56)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc12)
    %3 = cir.cast(integral, %2 : !s16i), !s32i loc(#loc12)
    %4 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc8)
    %5 = cir.cast(integral, %4 : !s16i), !s32i loc(#loc8)
    %6 = cir.binop(mul, %3, %5) nsw : !s32i loc(#loc12)
    %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc12)
    cir.store %7, %0 : !s16i, !cir.ptr<!s16i> loc(#loc55)
    %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc13)
    %9 = cir.cast(integral, %8 : !s16i), !s32i loc(#loc13)
    cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc14)
    cir.br ^bb2 loc(#loc11)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc4)
  } loc(#loc53)
  cir.func @CWE190_Integer_Overflow__short_fscanf_square_53d_goodG2BSink(%arg0: !s16i loc(fused[#loc17, #loc18])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc59)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc58)
    cir.store %arg0, %1 : !s16i, !cir.ptr<!s16i> loc(#loc21)
    cir.br ^bb1 loc(#loc60)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc24)
    %3 = cir.cast(integral, %2 : !s16i), !s32i loc(#loc24)
    %4 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc20)
    %5 = cir.cast(integral, %4 : !s16i), !s32i loc(#loc20)
    %6 = cir.binop(mul, %3, %5) nsw : !s32i loc(#loc24)
    %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc24)
    cir.store %7, %0 : !s16i, !cir.ptr<!s16i> loc(#loc59)
    %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc25)
    %9 = cir.cast(integral, %8 : !s16i), !s32i loc(#loc25)
    cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc26)
    cir.br ^bb2 loc(#loc23)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc16)
  } loc(#loc57)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc27)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc30)
  cir.func @CWE190_Integer_Overflow__short_fscanf_square_53d_goodB2GSink(%arg0: !s16i loc(fused[#loc33, #loc34])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc64)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc63)
    cir.store %arg0, %1 : !s16i, !cir.ptr<!s16i> loc(#loc37)
    cir.br ^bb1 loc(#loc65)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc40)
    %3 = cir.cast(integral, %2 : !s16i), !s64i loc(#loc40)
    %4 = cir.cast(integral, %3 : !s64i), !s32i loc(#loc40)
    %5 = cir.abs %4 poison : !s32i loc(#loc41)
    %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc41)
    %7 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc42)
    %8 = cir.const #cir.int<32767> : !s32i loc(#loc43)
    %9 = cir.cast(int_to_float, %8 : !s32i), !cir.double loc(#loc43)
    %10 = cir.call @sqrt(%9) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc42)
    %11 = cir.cast(float_to_int, %10 : !cir.double), !s64i loc(#loc42)
    %12 = cir.cmp(le, %6, %11) : !s64i, !cir.bool loc(#loc66)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc67)
  ^bb2:  // pred: ^bb1
    %13 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc48)
    %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc48)
    %15 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc36)
    %16 = cir.cast(integral, %15 : !s16i), !s32i loc(#loc36)
    %17 = cir.binop(mul, %14, %16) nsw : !s32i loc(#loc48)
    %18 = cir.cast(integral, %17 : !s32i), !s16i loc(#loc48)
    cir.store %18, %0 : !s16i, !cir.ptr<!s16i> loc(#loc64)
    %19 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc49)
    %20 = cir.cast(integral, %19 : !s16i), !s32i loc(#loc49)
    cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc50)
    cir.br ^bb4 loc(#loc46)
  ^bb3:  // pred: ^bb1
    %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc30)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc30)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    cir.br ^bb4 loc(#loc39)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc39)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc32)
  } loc(#loc62)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_53d.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":31:1)
#loc7 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":28:9)
#loc8 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":28:31)
#loc9 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":25:1)
#loc10 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":26:5)
#loc11 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":30:5)
#loc12 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":28:24)
#loc13 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":29:22)
#loc14 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":29:9)
#loc15 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":38:1)
#loc16 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":45:1)
#loc19 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":42:9)
#loc20 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":42:31)
#loc21 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":39:1)
#loc22 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":40:5)
#loc23 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":44:5)
#loc24 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":42:24)
#loc25 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":43:22)
#loc26 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":43:9)
#loc27 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc28 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc29 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc30 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":58:19)
#loc31 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":48:1)
#loc32 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":60:1)
#loc35 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":53:9)
#loc36 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":53:31)
#loc37 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":49:1)
#loc38 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":51:5)
#loc39 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":59:5)
#loc40 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":51:19)
#loc41 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":51:9)
#loc42 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":51:34)
#loc43 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":51:47)
#loc44 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":51:55)
#loc45 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":52:5)
#loc46 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":55:5)
#loc47 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":57:5)
#loc48 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":53:24)
#loc49 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":54:22)
#loc50 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":54:9)
#loc51 = loc("CWE190_Integer_Overflow__short_fscanf_square_53d.c":58:9)
#loc52 = loc(fused[#loc1, #loc2])
#loc53 = loc(fused[#loc3, #loc4])
#loc55 = loc(fused[#loc7, #loc8])
#loc56 = loc(fused[#loc10, #loc11])
#loc57 = loc(fused[#loc15, #loc16])
#loc59 = loc(fused[#loc19, #loc20])
#loc60 = loc(fused[#loc22, #loc23])
#loc61 = loc(fused[#loc28, #loc29])
#loc62 = loc(fused[#loc31, #loc32])
#loc64 = loc(fused[#loc35, #loc36])
#loc65 = loc(fused[#loc38, #loc39])
#loc66 = loc(fused[#loc41, #loc44])
#loc67 = loc(fused[#loc45, #loc46, #loc47, #loc39])
