!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc42 = loc("CWE617_Reachable_Assertion__fixed_12.c":84:10)
#loc43 = loc("CWE617_Reachable_Assertion__fixed_12.c":84:14)
#loc44 = loc("CWE617_Reachable_Assertion__fixed_12.c":84:20)
#loc45 = loc("CWE617_Reachable_Assertion__fixed_12.c":84:32)
#loc97 = loc(fused[#loc42, #loc43])
#loc98 = loc(fused[#loc44, #loc45])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc81)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__fixed_12.c\00" : !cir.array<!s8i x 39>> : !cir.array<!s8i x 39> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__fixed_12_bad()\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc84)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    cir.scope {
      %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc87)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc87)
      %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc15)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc15)
      cir.if %7 {
        %8 = cir.const #cir.int<5> : !s32i loc(#loc20)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc21)
        %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc20)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc89)
      } else {
        %8 = cir.const #cir.int<5> : !s32i loc(#loc23)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc24)
        %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc23)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc90)
      } loc(#loc88)
    } loc(#loc86)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc5)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc5)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc5)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc5)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc5)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc5)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc5)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc5)
          %11 = cir.const #cir.int<41> : !s32i loc(#loc5)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc5)
          %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc5)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc5)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc5)
        } loc(#loc5)
      } loc(#loc5)
    } loc(#loc5)
    cir.return loc(#loc7)
  } loc(#loc83)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc92)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    cir.return loc(#loc27)
  } loc(#loc91)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc93)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc94)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc95)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc36)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc39)
  cir.func @main(%arg0: !s32i loc(fused[#loc42, #loc43]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc44, #loc45])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc97)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc98)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc41)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc46)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc46)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc47)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc48)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc48)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc49)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc36)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc50)
    %8 = cir.get_global @CWE617_Reachable_Assertion__fixed_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc99)
    cir.call @CWE617_Reachable_Assertion__fixed_12_good() : () -> () loc(#loc51)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc37)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc38)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %13 = cir.get_global @CWE617_Reachable_Assertion__fixed_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc100)
    cir.call @CWE617_Reachable_Assertion__fixed_12_bad() : () -> () loc(#loc55)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc39)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc58)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc101)
    cir.return %17 : !s32i loc(#loc101)
  } loc(#loc96)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc60)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc103)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc65)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc66)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc104)
    cir.scope {
      %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc106)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc106)
      %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc70)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc70)
      cir.if %7 {
        %8 = cir.const #cir.int<5> : !s32i loc(#loc75)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc76)
        %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc75)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc108)
      } else {
        %8 = cir.const #cir.int<5> : !s32i loc(#loc78)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc79)
        %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc78)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc109)
      } loc(#loc107)
    } loc(#loc105)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc60)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc60)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc60)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc60)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc60)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc60)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc60)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc60)
          %11 = cir.const #cir.int<66> : !s32i loc(#loc60)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc60)
          %13 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc60)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc60)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc60)
        } loc(#loc60)
      } loc(#loc60)
    } loc(#loc60)
    cir.return loc(#loc62)
  } loc(#loc102)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/assert.h":67:1)
#loc4 = loc("/usr/include/assert.h":69:43)
#loc5 = loc("CWE617_Reachable_Assertion__fixed_12.c":41:5)
#loc6 = loc("CWE617_Reachable_Assertion__fixed_12.c":25:1)
#loc7 = loc("CWE617_Reachable_Assertion__fixed_12.c":42:1)
#loc8 = loc("CWE617_Reachable_Assertion__fixed_12.c":27:5)
#loc9 = loc("CWE617_Reachable_Assertion__fixed_12.c":27:9)
#loc10 = loc("CWE617_Reachable_Assertion__fixed_12.c":29:13)
#loc11 = loc("CWE617_Reachable_Assertion__fixed_12.c":29:12)
#loc12 = loc("CWE617_Reachable_Assertion__fixed_12.c":29:5)
#loc13 = loc("CWE617_Reachable_Assertion__fixed_12.c":30:5)
#loc14 = loc("CWE617_Reachable_Assertion__fixed_12.c":39:5)
#loc15 = loc("CWE617_Reachable_Assertion__fixed_12.c":30:8)
#loc16 = loc("CWE617_Reachable_Assertion__fixed_12.c":30:33)
#loc17 = loc("CWE617_Reachable_Assertion__fixed_12.c":31:5)
#loc18 = loc("CWE617_Reachable_Assertion__fixed_12.c":34:5)
#loc19 = loc("CWE617_Reachable_Assertion__fixed_12.c":36:5)
#loc20 = loc("CWE617_Reachable_Assertion__fixed_12.c":33:16)
#loc21 = loc("CWE617_Reachable_Assertion__fixed_12.c":33:29)
#loc22 = loc("CWE617_Reachable_Assertion__fixed_12.c":33:9)
#loc23 = loc("CWE617_Reachable_Assertion__fixed_12.c":38:16)
#loc24 = loc("CWE617_Reachable_Assertion__fixed_12.c":38:29)
#loc25 = loc("CWE617_Reachable_Assertion__fixed_12.c":38:9)
#loc26 = loc("CWE617_Reachable_Assertion__fixed_12.c":69:1)
#loc27 = loc("CWE617_Reachable_Assertion__fixed_12.c":72:1)
#loc28 = loc("CWE617_Reachable_Assertion__fixed_12.c":71:5)
#loc29 = loc("CWE617_Reachable_Assertion__fixed_12.c":71:13)
#loc30 = loc("/usr/include/stdlib.h":575:1)
#loc31 = loc("/usr/include/stdlib.h":575:41)
#loc32 = loc("/usr/include/time.h":76:1)
#loc33 = loc("/usr/include/time.h":76:38)
#loc34 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc35 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc36 = loc("CWE617_Reachable_Assertion__fixed_12.c":89:15)
#loc37 = loc("CWE617_Reachable_Assertion__fixed_12.c":91:15)
#loc38 = loc("CWE617_Reachable_Assertion__fixed_12.c":94:15)
#loc39 = loc("CWE617_Reachable_Assertion__fixed_12.c":96:15)
#loc40 = loc("CWE617_Reachable_Assertion__fixed_12.c":84:1)
#loc41 = loc("CWE617_Reachable_Assertion__fixed_12.c":99:1)
#loc46 = loc("CWE617_Reachable_Assertion__fixed_12.c":85:1)
#loc47 = loc("CWE617_Reachable_Assertion__fixed_12.c":87:27)
#loc48 = loc("CWE617_Reachable_Assertion__fixed_12.c":87:22)
#loc49 = loc("CWE617_Reachable_Assertion__fixed_12.c":87:5)
#loc50 = loc("CWE617_Reachable_Assertion__fixed_12.c":89:5)
#loc51 = loc("CWE617_Reachable_Assertion__fixed_12.c":90:5)
#loc52 = loc("CWE617_Reachable_Assertion__fixed_12.c":90:47)
#loc53 = loc("CWE617_Reachable_Assertion__fixed_12.c":91:5)
#loc54 = loc("CWE617_Reachable_Assertion__fixed_12.c":94:5)
#loc55 = loc("CWE617_Reachable_Assertion__fixed_12.c":95:5)
#loc56 = loc("CWE617_Reachable_Assertion__fixed_12.c":95:46)
#loc57 = loc("CWE617_Reachable_Assertion__fixed_12.c":96:5)
#loc58 = loc("CWE617_Reachable_Assertion__fixed_12.c":98:12)
#loc59 = loc("CWE617_Reachable_Assertion__fixed_12.c":98:5)
#loc60 = loc("CWE617_Reachable_Assertion__fixed_12.c":66:5)
#loc61 = loc("CWE617_Reachable_Assertion__fixed_12.c":50:1)
#loc62 = loc("CWE617_Reachable_Assertion__fixed_12.c":67:1)
#loc63 = loc("CWE617_Reachable_Assertion__fixed_12.c":52:5)
#loc64 = loc("CWE617_Reachable_Assertion__fixed_12.c":52:9)
#loc65 = loc("CWE617_Reachable_Assertion__fixed_12.c":54:13)
#loc66 = loc("CWE617_Reachable_Assertion__fixed_12.c":54:12)
#loc67 = loc("CWE617_Reachable_Assertion__fixed_12.c":54:5)
#loc68 = loc("CWE617_Reachable_Assertion__fixed_12.c":55:5)
#loc69 = loc("CWE617_Reachable_Assertion__fixed_12.c":64:5)
#loc70 = loc("CWE617_Reachable_Assertion__fixed_12.c":55:8)
#loc71 = loc("CWE617_Reachable_Assertion__fixed_12.c":55:33)
#loc72 = loc("CWE617_Reachable_Assertion__fixed_12.c":56:5)
#loc73 = loc("CWE617_Reachable_Assertion__fixed_12.c":59:5)
#loc74 = loc("CWE617_Reachable_Assertion__fixed_12.c":61:5)
#loc75 = loc("CWE617_Reachable_Assertion__fixed_12.c":58:16)
#loc76 = loc("CWE617_Reachable_Assertion__fixed_12.c":58:29)
#loc77 = loc("CWE617_Reachable_Assertion__fixed_12.c":58:9)
#loc78 = loc("CWE617_Reachable_Assertion__fixed_12.c":63:16)
#loc79 = loc("CWE617_Reachable_Assertion__fixed_12.c":63:29)
#loc80 = loc("CWE617_Reachable_Assertion__fixed_12.c":63:9)
#loc81 = loc(fused[#loc1, #loc2])
#loc82 = loc(fused[#loc3, #loc4])
#loc83 = loc(fused[#loc6, #loc7])
#loc84 = loc(fused[#loc8, #loc9])
#loc85 = loc(fused[#loc12, #loc10])
#loc86 = loc(fused[#loc13, #loc14])
#loc87 = loc(fused[#loc15, #loc16])
#loc88 = loc(fused[#loc17, #loc18, #loc19, #loc14])
#loc89 = loc(fused[#loc22, #loc21])
#loc90 = loc(fused[#loc25, #loc24])
#loc91 = loc(fused[#loc26, #loc27])
#loc92 = loc(fused[#loc28, #loc29])
#loc93 = loc(fused[#loc30, #loc31])
#loc94 = loc(fused[#loc32, #loc33])
#loc95 = loc(fused[#loc34, #loc35])
#loc96 = loc(fused[#loc40, #loc41])
#loc99 = loc(fused[#loc51, #loc52])
#loc100 = loc(fused[#loc55, #loc56])
#loc101 = loc(fused[#loc59, #loc58])
#loc102 = loc(fused[#loc61, #loc62])
#loc103 = loc(fused[#loc63, #loc64])
#loc104 = loc(fused[#loc67, #loc65])
#loc105 = loc(fused[#loc68, #loc69])
#loc106 = loc(fused[#loc70, #loc71])
#loc107 = loc(fused[#loc72, #loc73, #loc74, #loc69])
#loc108 = loc(fused[#loc77, #loc76])
#loc109 = loc(fused[#loc80, #loc79])
