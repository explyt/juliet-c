!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc59 = loc("CWE190_Integer_Overflow__int_max_square_17.c":113:10)
#loc60 = loc("CWE190_Integer_Overflow__int_max_square_17.c":113:14)
#loc61 = loc("CWE190_Integer_Overflow__int_max_square_17.c":113:20)
#loc62 = loc("CWE190_Integer_Overflow__int_max_square_17.c":113:32)
#true = #cir.bool<true> : !cir.bool
#loc193 = loc(fused[#loc59, #loc60])
#loc194 = loc(fused[#loc61, #loc62])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc167)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_17_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc169)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc170)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc171)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc10)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc14)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc174)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc175)
        cir.condition(%7) loc(#loc18)
      } body {
        cir.scope {
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc20)
          cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc177)
        } loc(#loc176)
        cir.yield loc(#loc13)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc23)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc178)
        cir.yield loc(#loc173)
      } loc(#loc173)
    } loc(#loc173)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc26)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc180)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc28)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc181)
        cir.condition(%7) loc(#loc30)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc184)
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc36)
            %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc35)
            %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc36)
            cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc184)
            %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc37)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc38)
          } loc(#loc183)
        } loc(#loc182)
        cir.yield loc(#loc25)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc39)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc40)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc185)
        cir.yield loc(#loc179)
      } loc(#loc179)
    } loc(#loc179)
    cir.return loc(#loc4)
  } loc(#loc168)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_17_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc187)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc188)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    cir.return loc(#loc42)
  } loc(#loc186)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc189)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc190)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc191)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc56)
  cir.func @main(%arg0: !s32i loc(fused[#loc59, #loc60]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc61, #loc62])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc193)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc194)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc58)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc63)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc63)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc64)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc65)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc65)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc66)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc53)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_max_square_17_good : !cir.ptr<!cir.func<!void ()>> loc(#loc195)
    cir.call @CWE190_Integer_Overflow__int_max_square_17_good() : () -> () loc(#loc68)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc54)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc55)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_max_square_17_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc196)
    cir.call @CWE190_Integer_Overflow__int_max_square_17_bad() : () -> () loc(#loc72)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc56)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc75)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc197)
    cir.return %17 : !s32i loc(#loc197)
  } loc(#loc192)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc78)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc199)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc200)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc201)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc86)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc90)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc92)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc93)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc205)
        cir.condition(%7) loc(#loc94)
      } body {
        cir.scope {
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc96)
          cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc207)
        } loc(#loc206)
        cir.yield loc(#loc89)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc98)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc99)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc208)
        cir.yield loc(#loc203)
      } loc(#loc203)
    } loc(#loc203)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc102)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc210)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc104)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc105)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc211)
        cir.condition(%7) loc(#loc106)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc110)
            %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc111)
            %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc111)
            %8 = cir.const #cir.int<1> : !s32i loc(#loc111)
            %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc111)
            %10 = cir.cmp(gt, %5, %9) : !s32i, !cir.bool loc(#loc214)
            %11 = cir.ternary(%10, true {
              %12 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc113)
              %13 = cir.abs %12 poison : !s32i loc(#loc114)
              %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc114)
              %15 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc115)
              %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc116)
              %17 = cir.cast(int_to_float, %16 : !s32i), !cir.double loc(#loc116)
              %18 = cir.call @sqrt(%17) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc115)
              %19 = cir.cast(float_to_int, %18 : !cir.double), !s64i loc(#loc115)
              %20 = cir.cmp(lt, %14, %19) : !s64i, !cir.bool loc(#loc215)
              %21 = cir.ternary(%20, true {
                %22 = cir.const #true loc(#loc112)
                cir.yield %22 : !cir.bool loc(#loc112)
              }, false {
                %22 = cir.const #false loc(#loc112)
                cir.yield %22 : !cir.bool loc(#loc112)
              }) : (!cir.bool) -> !cir.bool loc(#loc112)
              cir.yield %21 : !cir.bool loc(#loc112)
            }, false {
              %12 = cir.const #false loc(#loc112)
              cir.yield %12 : !cir.bool loc(#loc112)
            }) : (!cir.bool) -> !cir.bool loc(#loc112)
            cir.if %11 {
              %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc217)
              %13 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc123)
              %14 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc122)
              %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc123)
              cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc217)
              %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc124)
              cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc125)
            } else {
              %12 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc78)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc78)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc126)
            } loc(#loc216)
          } loc(#loc213)
        } loc(#loc212)
        cir.yield loc(#loc101)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc127)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc128)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc218)
        cir.yield loc(#loc209)
      } loc(#loc209)
    } loc(#loc209)
    cir.return loc(#loc80)
  } loc(#loc198)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc220)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc221)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc222)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc136)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc223)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc140)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc225)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc142)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc143)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc226)
        cir.condition(%7) loc(#loc144)
      } body {
        cir.scope {
          %5 = cir.const #cir.int<2> : !s32i loc(#loc146)
          cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc228)
        } loc(#loc227)
        cir.yield loc(#loc139)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc148)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc149)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc229)
        cir.yield loc(#loc224)
      } loc(#loc224)
    } loc(#loc224)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc152)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc231)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc154)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc155)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc232)
        cir.condition(%7) loc(#loc156)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc235)
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc162)
            %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc161)
            %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc162)
            cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc235)
            %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc163)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc164)
          } loc(#loc234)
        } loc(#loc233)
        cir.yield loc(#loc151)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc165)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc166)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc236)
        cir.yield loc(#loc230)
      } loc(#loc230)
    } loc(#loc230)
    cir.return loc(#loc130)
  } loc(#loc219)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_17.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_square_17.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__int_max_square_17.c":43:1)
#loc5 = loc("CWE190_Integer_Overflow__int_max_square_17.c":26:5)
#loc6 = loc("CWE190_Integer_Overflow__int_max_square_17.c":26:9)
#loc7 = loc("CWE190_Integer_Overflow__int_max_square_17.c":26:11)
#loc8 = loc("CWE190_Integer_Overflow__int_max_square_17.c":27:5)
#loc9 = loc("CWE190_Integer_Overflow__int_max_square_17.c":27:9)
#loc10 = loc("CWE190_Integer_Overflow__int_max_square_17.c":29:12)
#loc11 = loc("CWE190_Integer_Overflow__int_max_square_17.c":29:5)
#loc12 = loc("CWE190_Integer_Overflow__int_max_square_17.c":30:5)
#loc13 = loc("CWE190_Integer_Overflow__int_max_square_17.c":34:5)
#loc14 = loc("CWE190_Integer_Overflow__int_max_square_17.c":30:13)
#loc15 = loc("CWE190_Integer_Overflow__int_max_square_17.c":30:9)
#loc16 = loc("CWE190_Integer_Overflow__int_max_square_17.c":30:16)
#loc17 = loc("CWE190_Integer_Overflow__int_max_square_17.c":30:20)
#loc18 = loc("CWE190_Integer_Overflow__int_max_square_17.c":30:18)
#loc19 = loc("CWE190_Integer_Overflow__int_max_square_17.c":31:5)
#loc20 = loc("CWE190_Integer_Overflow__int_max_square_17.c":33:16)
#loc21 = loc("CWE190_Integer_Overflow__int_max_square_17.c":33:9)
#loc22 = loc("CWE190_Integer_Overflow__int_max_square_17.c":30:24)
#loc23 = loc("CWE190_Integer_Overflow__int_max_square_17.c":30:23)
#loc24 = loc("CWE190_Integer_Overflow__int_max_square_17.c":35:5)
#loc25 = loc("CWE190_Integer_Overflow__int_max_square_17.c":42:5)
#loc26 = loc("CWE190_Integer_Overflow__int_max_square_17.c":35:13)
#loc27 = loc("CWE190_Integer_Overflow__int_max_square_17.c":35:9)
#loc28 = loc("CWE190_Integer_Overflow__int_max_square_17.c":35:16)
#loc29 = loc("CWE190_Integer_Overflow__int_max_square_17.c":35:20)
#loc30 = loc("CWE190_Integer_Overflow__int_max_square_17.c":35:18)
#loc31 = loc("CWE190_Integer_Overflow__int_max_square_17.c":36:5)
#loc32 = loc("CWE190_Integer_Overflow__int_max_square_17.c":37:9)
#loc33 = loc("CWE190_Integer_Overflow__int_max_square_17.c":41:9)
#loc34 = loc("CWE190_Integer_Overflow__int_max_square_17.c":39:13)
#loc35 = loc("CWE190_Integer_Overflow__int_max_square_17.c":39:33)
#loc36 = loc("CWE190_Integer_Overflow__int_max_square_17.c":39:26)
#loc37 = loc("CWE190_Integer_Overflow__int_max_square_17.c":40:26)
#loc38 = loc("CWE190_Integer_Overflow__int_max_square_17.c":40:13)
#loc39 = loc("CWE190_Integer_Overflow__int_max_square_17.c":35:24)
#loc40 = loc("CWE190_Integer_Overflow__int_max_square_17.c":35:23)
#loc41 = loc("CWE190_Integer_Overflow__int_max_square_17.c":98:1)
#loc42 = loc("CWE190_Integer_Overflow__int_max_square_17.c":102:1)
#loc43 = loc("CWE190_Integer_Overflow__int_max_square_17.c":100:5)
#loc44 = loc("CWE190_Integer_Overflow__int_max_square_17.c":100:13)
#loc45 = loc("CWE190_Integer_Overflow__int_max_square_17.c":101:5)
#loc46 = loc("CWE190_Integer_Overflow__int_max_square_17.c":101:13)
#loc47 = loc("/usr/include/stdlib.h":575:1)
#loc48 = loc("/usr/include/stdlib.h":575:41)
#loc49 = loc("/usr/include/time.h":76:1)
#loc50 = loc("/usr/include/time.h":76:38)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc53 = loc("CWE190_Integer_Overflow__int_max_square_17.c":118:15)
#loc54 = loc("CWE190_Integer_Overflow__int_max_square_17.c":120:15)
#loc55 = loc("CWE190_Integer_Overflow__int_max_square_17.c":123:15)
#loc56 = loc("CWE190_Integer_Overflow__int_max_square_17.c":125:15)
#loc57 = loc("CWE190_Integer_Overflow__int_max_square_17.c":113:1)
#loc58 = loc("CWE190_Integer_Overflow__int_max_square_17.c":128:1)
#loc63 = loc("CWE190_Integer_Overflow__int_max_square_17.c":114:1)
#loc64 = loc("CWE190_Integer_Overflow__int_max_square_17.c":116:27)
#loc65 = loc("CWE190_Integer_Overflow__int_max_square_17.c":116:22)
#loc66 = loc("CWE190_Integer_Overflow__int_max_square_17.c":116:5)
#loc67 = loc("CWE190_Integer_Overflow__int_max_square_17.c":118:5)
#loc68 = loc("CWE190_Integer_Overflow__int_max_square_17.c":119:5)
#loc69 = loc("CWE190_Integer_Overflow__int_max_square_17.c":119:53)
#loc70 = loc("CWE190_Integer_Overflow__int_max_square_17.c":120:5)
#loc71 = loc("CWE190_Integer_Overflow__int_max_square_17.c":123:5)
#loc72 = loc("CWE190_Integer_Overflow__int_max_square_17.c":124:5)
#loc73 = loc("CWE190_Integer_Overflow__int_max_square_17.c":124:52)
#loc74 = loc("CWE190_Integer_Overflow__int_max_square_17.c":125:5)
#loc75 = loc("CWE190_Integer_Overflow__int_max_square_17.c":127:12)
#loc76 = loc("CWE190_Integer_Overflow__int_max_square_17.c":127:5)
#loc77 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc78 = loc("CWE190_Integer_Overflow__int_max_square_17.c":71:23)
#loc79 = loc("CWE190_Integer_Overflow__int_max_square_17.c":50:1)
#loc80 = loc("CWE190_Integer_Overflow__int_max_square_17.c":74:1)
#loc81 = loc("CWE190_Integer_Overflow__int_max_square_17.c":52:5)
#loc82 = loc("CWE190_Integer_Overflow__int_max_square_17.c":52:9)
#loc83 = loc("CWE190_Integer_Overflow__int_max_square_17.c":52:11)
#loc84 = loc("CWE190_Integer_Overflow__int_max_square_17.c":53:5)
#loc85 = loc("CWE190_Integer_Overflow__int_max_square_17.c":53:9)
#loc86 = loc("CWE190_Integer_Overflow__int_max_square_17.c":55:12)
#loc87 = loc("CWE190_Integer_Overflow__int_max_square_17.c":55:5)
#loc88 = loc("CWE190_Integer_Overflow__int_max_square_17.c":56:5)
#loc89 = loc("CWE190_Integer_Overflow__int_max_square_17.c":60:5)
#loc90 = loc("CWE190_Integer_Overflow__int_max_square_17.c":56:13)
#loc91 = loc("CWE190_Integer_Overflow__int_max_square_17.c":56:9)
#loc92 = loc("CWE190_Integer_Overflow__int_max_square_17.c":56:16)
#loc93 = loc("CWE190_Integer_Overflow__int_max_square_17.c":56:20)
#loc94 = loc("CWE190_Integer_Overflow__int_max_square_17.c":56:18)
#loc95 = loc("CWE190_Integer_Overflow__int_max_square_17.c":57:5)
#loc96 = loc("CWE190_Integer_Overflow__int_max_square_17.c":59:16)
#loc97 = loc("CWE190_Integer_Overflow__int_max_square_17.c":59:9)
#loc98 = loc("CWE190_Integer_Overflow__int_max_square_17.c":56:24)
#loc99 = loc("CWE190_Integer_Overflow__int_max_square_17.c":56:23)
#loc100 = loc("CWE190_Integer_Overflow__int_max_square_17.c":61:5)
#loc101 = loc("CWE190_Integer_Overflow__int_max_square_17.c":73:5)
#loc102 = loc("CWE190_Integer_Overflow__int_max_square_17.c":61:13)
#loc103 = loc("CWE190_Integer_Overflow__int_max_square_17.c":61:9)
#loc104 = loc("CWE190_Integer_Overflow__int_max_square_17.c":61:16)
#loc105 = loc("CWE190_Integer_Overflow__int_max_square_17.c":61:20)
#loc106 = loc("CWE190_Integer_Overflow__int_max_square_17.c":61:18)
#loc107 = loc("CWE190_Integer_Overflow__int_max_square_17.c":62:5)
#loc108 = loc("CWE190_Integer_Overflow__int_max_square_17.c":64:9)
#loc109 = loc("CWE190_Integer_Overflow__int_max_square_17.c":72:9)
#loc110 = loc("CWE190_Integer_Overflow__int_max_square_17.c":64:13)
#loc111 = loc("CWE190_Integer_Overflow__int_max_square_17.c":64:20)
#loc112 = loc("CWE190_Integer_Overflow__int_max_square_17.c":64:28)
#loc113 = loc("CWE190_Integer_Overflow__int_max_square_17.c":64:35)
#loc114 = loc("CWE190_Integer_Overflow__int_max_square_17.c":64:31)
#loc115 = loc("CWE190_Integer_Overflow__int_max_square_17.c":64:49)
#loc116 = loc("CWE190_Integer_Overflow__int_max_square_17.c":64:62)
#loc117 = loc("CWE190_Integer_Overflow__int_max_square_17.c":64:69)
#loc118 = loc("CWE190_Integer_Overflow__int_max_square_17.c":65:9)
#loc119 = loc("CWE190_Integer_Overflow__int_max_square_17.c":68:9)
#loc120 = loc("CWE190_Integer_Overflow__int_max_square_17.c":70:9)
#loc121 = loc("CWE190_Integer_Overflow__int_max_square_17.c":66:13)
#loc122 = loc("CWE190_Integer_Overflow__int_max_square_17.c":66:33)
#loc123 = loc("CWE190_Integer_Overflow__int_max_square_17.c":66:26)
#loc124 = loc("CWE190_Integer_Overflow__int_max_square_17.c":67:26)
#loc125 = loc("CWE190_Integer_Overflow__int_max_square_17.c":67:13)
#loc126 = loc("CWE190_Integer_Overflow__int_max_square_17.c":71:13)
#loc127 = loc("CWE190_Integer_Overflow__int_max_square_17.c":61:24)
#loc128 = loc("CWE190_Integer_Overflow__int_max_square_17.c":61:23)
#loc129 = loc("CWE190_Integer_Overflow__int_max_square_17.c":77:1)
#loc130 = loc("CWE190_Integer_Overflow__int_max_square_17.c":96:1)
#loc131 = loc("CWE190_Integer_Overflow__int_max_square_17.c":79:5)
#loc132 = loc("CWE190_Integer_Overflow__int_max_square_17.c":79:9)
#loc133 = loc("CWE190_Integer_Overflow__int_max_square_17.c":79:11)
#loc134 = loc("CWE190_Integer_Overflow__int_max_square_17.c":80:5)
#loc135 = loc("CWE190_Integer_Overflow__int_max_square_17.c":80:9)
#loc136 = loc("CWE190_Integer_Overflow__int_max_square_17.c":82:12)
#loc137 = loc("CWE190_Integer_Overflow__int_max_square_17.c":82:5)
#loc138 = loc("CWE190_Integer_Overflow__int_max_square_17.c":83:5)
#loc139 = loc("CWE190_Integer_Overflow__int_max_square_17.c":87:5)
#loc140 = loc("CWE190_Integer_Overflow__int_max_square_17.c":83:13)
#loc141 = loc("CWE190_Integer_Overflow__int_max_square_17.c":83:9)
#loc142 = loc("CWE190_Integer_Overflow__int_max_square_17.c":83:16)
#loc143 = loc("CWE190_Integer_Overflow__int_max_square_17.c":83:20)
#loc144 = loc("CWE190_Integer_Overflow__int_max_square_17.c":83:18)
#loc145 = loc("CWE190_Integer_Overflow__int_max_square_17.c":84:5)
#loc146 = loc("CWE190_Integer_Overflow__int_max_square_17.c":86:16)
#loc147 = loc("CWE190_Integer_Overflow__int_max_square_17.c":86:9)
#loc148 = loc("CWE190_Integer_Overflow__int_max_square_17.c":83:24)
#loc149 = loc("CWE190_Integer_Overflow__int_max_square_17.c":83:23)
#loc150 = loc("CWE190_Integer_Overflow__int_max_square_17.c":88:5)
#loc151 = loc("CWE190_Integer_Overflow__int_max_square_17.c":95:5)
#loc152 = loc("CWE190_Integer_Overflow__int_max_square_17.c":88:13)
#loc153 = loc("CWE190_Integer_Overflow__int_max_square_17.c":88:9)
#loc154 = loc("CWE190_Integer_Overflow__int_max_square_17.c":88:16)
#loc155 = loc("CWE190_Integer_Overflow__int_max_square_17.c":88:20)
#loc156 = loc("CWE190_Integer_Overflow__int_max_square_17.c":88:18)
#loc157 = loc("CWE190_Integer_Overflow__int_max_square_17.c":89:5)
#loc158 = loc("CWE190_Integer_Overflow__int_max_square_17.c":90:9)
#loc159 = loc("CWE190_Integer_Overflow__int_max_square_17.c":94:9)
#loc160 = loc("CWE190_Integer_Overflow__int_max_square_17.c":92:13)
#loc161 = loc("CWE190_Integer_Overflow__int_max_square_17.c":92:33)
#loc162 = loc("CWE190_Integer_Overflow__int_max_square_17.c":92:26)
#loc163 = loc("CWE190_Integer_Overflow__int_max_square_17.c":93:26)
#loc164 = loc("CWE190_Integer_Overflow__int_max_square_17.c":93:13)
#loc165 = loc("CWE190_Integer_Overflow__int_max_square_17.c":88:24)
#loc166 = loc("CWE190_Integer_Overflow__int_max_square_17.c":88:23)
#loc167 = loc(fused[#loc1, #loc2])
#loc168 = loc(fused[#loc3, #loc4])
#loc169 = loc(fused[#loc5, #loc6])
#loc170 = loc(fused[#loc5, #loc7])
#loc171 = loc(fused[#loc8, #loc9])
#loc172 = loc(fused[#loc11, #loc10])
#loc173 = loc(fused[#loc12, #loc13])
#loc174 = loc(fused[#loc15, #loc14])
#loc175 = loc(fused[#loc16, #loc17])
#loc176 = loc(fused[#loc19, #loc13])
#loc177 = loc(fused[#loc21, #loc20])
#loc178 = loc(fused[#loc23, #loc22])
#loc179 = loc(fused[#loc24, #loc25])
#loc180 = loc(fused[#loc27, #loc26])
#loc181 = loc(fused[#loc28, #loc29])
#loc182 = loc(fused[#loc31, #loc25])
#loc183 = loc(fused[#loc32, #loc33])
#loc184 = loc(fused[#loc34, #loc35])
#loc185 = loc(fused[#loc40, #loc39])
#loc186 = loc(fused[#loc41, #loc42])
#loc187 = loc(fused[#loc43, #loc44])
#loc188 = loc(fused[#loc45, #loc46])
#loc189 = loc(fused[#loc47, #loc48])
#loc190 = loc(fused[#loc49, #loc50])
#loc191 = loc(fused[#loc51, #loc52])
#loc192 = loc(fused[#loc57, #loc58])
#loc195 = loc(fused[#loc68, #loc69])
#loc196 = loc(fused[#loc72, #loc73])
#loc197 = loc(fused[#loc76, #loc75])
#loc198 = loc(fused[#loc79, #loc80])
#loc199 = loc(fused[#loc81, #loc82])
#loc200 = loc(fused[#loc81, #loc83])
#loc201 = loc(fused[#loc84, #loc85])
#loc202 = loc(fused[#loc87, #loc86])
#loc203 = loc(fused[#loc88, #loc89])
#loc204 = loc(fused[#loc91, #loc90])
#loc205 = loc(fused[#loc92, #loc93])
#loc206 = loc(fused[#loc95, #loc89])
#loc207 = loc(fused[#loc97, #loc96])
#loc208 = loc(fused[#loc99, #loc98])
#loc209 = loc(fused[#loc100, #loc101])
#loc210 = loc(fused[#loc103, #loc102])
#loc211 = loc(fused[#loc104, #loc105])
#loc212 = loc(fused[#loc107, #loc101])
#loc213 = loc(fused[#loc108, #loc109])
#loc214 = loc(fused[#loc110, #loc111])
#loc215 = loc(fused[#loc114, #loc117])
#loc216 = loc(fused[#loc118, #loc119, #loc120, #loc109])
#loc217 = loc(fused[#loc121, #loc122])
#loc218 = loc(fused[#loc128, #loc127])
#loc219 = loc(fused[#loc129, #loc130])
#loc220 = loc(fused[#loc131, #loc132])
#loc221 = loc(fused[#loc131, #loc133])
#loc222 = loc(fused[#loc134, #loc135])
#loc223 = loc(fused[#loc137, #loc136])
#loc224 = loc(fused[#loc138, #loc139])
#loc225 = loc(fused[#loc141, #loc140])
#loc226 = loc(fused[#loc142, #loc143])
#loc227 = loc(fused[#loc145, #loc139])
#loc228 = loc(fused[#loc147, #loc146])
#loc229 = loc(fused[#loc149, #loc148])
#loc230 = loc(fused[#loc150, #loc151])
#loc231 = loc(fused[#loc153, #loc152])
#loc232 = loc(fused[#loc154, #loc155])
#loc233 = loc(fused[#loc157, #loc151])
#loc234 = loc(fused[#loc158, #loc159])
#loc235 = loc(fused[#loc160, #loc161])
#loc236 = loc(fused[#loc166, #loc165])
