!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc261)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc262)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc263)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc264)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc265)
  cir.func private @getsockname(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc266)
  cir.func private @strcmp(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc267)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"192.168.30.123\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc15)
  cir.func private @inet_ntoa(!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc268)
  cir.func private @send(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc269)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Welcome, admin!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc20)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Welcome!\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc21)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc270)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Send failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc24)
  cir.func private @close(!s32i) -> !s32i loc(#loc271)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc273)
    %1 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["acceptService"] {alignment = 4 : i64} loc(#loc274)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptServiceLen", init] {alignment = 4 : i64} loc(#loc275)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc276)
    %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc277)
    cir.br ^bb1 loc(#loc278)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<16> : !u64i loc(#loc279)
    %6 = cir.cast(integral, %5 : !u64i), !s32i loc(#loc279)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc275)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc35)
    %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc35)
    cir.store %8, %3 : !s32i, !cir.ptr<!s32i> loc(#loc276)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc37)
    cir.store %10, %4 : !s32i, !cir.ptr<!s32i> loc(#loc277)
    cir.br ^bb2 loc(#loc280)
  ^bb2:  // pred: ^bb1
    cir.br ^bb4 loc(#loc280)
  ^bb3:  // pred: ^bb37
    %11 = cir.const #cir.int<0> : !s32i loc(#loc43)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc43)
    cir.brcond %12 ^bb4, ^bb38 loc(#loc43)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %13 = cir.const #cir.int<2> : !s32i loc(#loc44)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %15 = cir.const #cir.int<6> : !s32i loc(#loc46)
    %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc47)
    cir.store %16, %3 : !s32i, !cir.ptr<!s32i> loc(#loc281)
    cir.br ^bb5 loc(#loc282)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc52)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc53)
    %20 = cir.cmp(eq, %17, %19) : !s32i, !cir.bool loc(#loc283)
    cir.brcond %20 ^bb6, ^bb7 loc(#loc284)
  ^bb6:  // pred: ^bb5
    cir.br ^bb38 loc(#loc55)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc51)
  ^bb8:  // pred: ^bb7
    %21 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc285)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc58)
    %23 = cir.const #cir.int<16> : !u64i loc(#loc286)
    cir.libc.memset %23 bytes from %21 set to %22 : !cir.ptr<!void>, !s32i, !u64i loc(#loc287)
    %24 = cir.const #cir.int<2> : !s32i loc(#loc63)
    %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc63)
    %26 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc64)
    cir.store %25, %26 : !u16i, !cir.ptr<!u16i> loc(#loc288)
    %27 = cir.const #cir.int<0> : !s32i loc(#loc66)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc66)
    %29 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc67)
    %30 = cir.get_member %29[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc68)
    cir.store %28, %30 : !u32i, !cir.ptr<!u32i> loc(#loc289)
    %31 = cir.const #cir.int<20000> : !s32i loc(#loc70)
    %32 = cir.cast(integral, %31 : !s32i), !u16i loc(#loc70)
    %33 = cir.call @htons(%32) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc71)
    %34 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
    cir.store %33, %34 : !u16i, !cir.ptr<!u16i> loc(#loc290)
    cir.br ^bb9 loc(#loc291)
  ^bb9:  // pred: ^bb8
    %35 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc77)
    %36 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc292)
    %37 = cir.const #cir.int<16> : !u64i loc(#loc293)
    %38 = cir.cast(integral, %37 : !u64i), !u32i loc(#loc293)
    %39 = cir.call @bind(%35, %36, %38) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc82)
    %40 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %41 = cir.unary(minus, %40) : !s32i, !s32i loc(#loc83)
    %42 = cir.cmp(eq, %39, %41) : !s32i, !cir.bool loc(#loc294)
    cir.brcond %42 ^bb10, ^bb11 loc(#loc295)
  ^bb10:  // pred: ^bb9
    cir.br ^bb38 loc(#loc85)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc76)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc296)
  ^bb13:  // pred: ^bb12
    %43 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc88)
    %44 = cir.const #cir.int<5> : !s32i loc(#loc89)
    %45 = cir.call @listen(%43, %44) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc90)
    %46 = cir.const #cir.int<1> : !s32i loc(#loc91)
    %47 = cir.unary(minus, %46) : !s32i, !s32i loc(#loc91)
    %48 = cir.cmp(eq, %45, %47) : !s32i, !cir.bool loc(#loc297)
    cir.brcond %48 ^bb14, ^bb15 loc(#loc298)
  ^bb14:  // pred: ^bb13
    cir.br ^bb38 loc(#loc93)
  ^bb15:  // pred: ^bb13
    cir.br ^bb16 loc(#loc87)
  ^bb16:  // pred: ^bb15
    %49 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc94)
    %50 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc95)
    %51 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc96)
    %52 = cir.call @accept(%49, %50, %51) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc97)
    cir.store %52, %4 : !s32i, !cir.ptr<!s32i> loc(#loc299)
    cir.br ^bb17 loc(#loc300)
  ^bb17:  // pred: ^bb16
    %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc102)
    %54 = cir.const #cir.int<1> : !s32i loc(#loc103)
    %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc103)
    %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc301)
    cir.brcond %56 ^bb18, ^bb19 loc(#loc302)
  ^bb18:  // pred: ^bb17
    cir.br ^bb38 loc(#loc105)
  ^bb19:  // pred: ^bb17
    cir.br ^bb20 loc(#loc101)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc303)
  ^bb21:  // pred: ^bb20
    %57 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc108)
    %58 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc304)
    %59 = cir.cast(bitcast, %2 : !cir.ptr<!s32i>), !cir.ptr<!u32i> loc(#loc305)
    %60 = cir.call @getsockname(%57, %58, %59) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc113)
    %61 = cir.const #cir.int<1> : !s32i loc(#loc114)
    %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc115)
    %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc306)
    cir.brcond %63 ^bb22, ^bb23 loc(#loc307)
  ^bb22:  // pred: ^bb21
    cir.br ^bb38 loc(#loc117)
  ^bb23:  // pred: ^bb21
    cir.br ^bb24 loc(#loc107)
  ^bb24:  // pred: ^bb23
    cir.br ^bb25 loc(#loc308)
  ^bb25:  // pred: ^bb24
    %64 = cir.get_global @strcmp : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc120)
    %65 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc15)
    %66 = cir.cast(array_to_ptrdecay, %65 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc15)
    %67 = cir.get_member %1[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc67)
    %68 = cir.load %67 : !cir.ptr<!ty_in_addr>, !ty_in_addr loc(#loc121)
    %69 = cir.call @inet_ntoa(%68) : (!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc121)
    %70 = cir.call @strcmp(%66, %69) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc120)
    %71 = cir.const #cir.int<0> : !s32i loc(#loc122)
    %72 = cir.cmp(eq, %70, %71) : !s32i, !cir.bool loc(#loc309)
    cir.brcond %72 ^bb26, ^bb31 loc(#loc310)
  ^bb26:  // pred: ^bb25
    cir.br ^bb27 loc(#loc311)
  ^bb27:  // pred: ^bb26
    %73 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc128)
    %74 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc20)
    %75 = cir.cast(array_to_ptrdecay, %74 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc20)
    %76 = cir.cast(bitcast, %75 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc20)
    %77 = cir.const #cir.int<15> : !u64i loc(#loc312)
    %78 = cir.const #cir.int<0> : !s32i loc(#loc131)
    %79 = cir.call @send(%73, %76, %77, %78) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc132)
    %80 = cir.const #cir.int<1> : !s32i loc(#loc133)
    %81 = cir.unary(minus, %80) : !s32i, !s32i loc(#loc133)
    %82 = cir.cast(integral, %81 : !s32i), !s64i loc(#loc133)
    %83 = cir.cmp(eq, %79, %82) : !s64i, !cir.bool loc(#loc313)
    cir.brcond %83 ^bb28, ^bb29 loc(#loc314)
  ^bb28:  // pred: ^bb27
    cir.br ^bb38 loc(#loc135)
  ^bb29:  // pred: ^bb27
    cir.br ^bb30 loc(#loc127)
  ^bb30:  // pred: ^bb29
    cir.br ^bb36 loc(#loc124)
  ^bb31:  // pred: ^bb25
    cir.br ^bb32 loc(#loc315)
  ^bb32:  // pred: ^bb31
    %84 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc138)
    %85 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc21)
    %86 = cir.cast(array_to_ptrdecay, %85 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc21)
    %87 = cir.cast(bitcast, %86 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc21)
    %88 = cir.const #cir.int<8> : !u64i loc(#loc316)
    %89 = cir.const #cir.int<0> : !s32i loc(#loc141)
    %90 = cir.call @send(%84, %87, %88, %89) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc142)
    %91 = cir.const #cir.int<1> : !s32i loc(#loc143)
    %92 = cir.unary(minus, %91) : !s32i, !s32i loc(#loc143)
    %93 = cir.cast(integral, %92 : !s32i), !s64i loc(#loc143)
    %94 = cir.cmp(eq, %90, %93) : !s64i, !cir.bool loc(#loc317)
    cir.brcond %94 ^bb33, ^bb34 loc(#loc318)
  ^bb33:  // pred: ^bb32
    %95 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc24)
    %96 = cir.cast(array_to_ptrdecay, %95 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc24)
    cir.call @printLine(%96) : (!cir.ptr<!s8i>) -> () loc(#loc145)
    cir.br ^bb34 loc(#loc137)
  ^bb34:  // 2 preds: ^bb32, ^bb33
    cir.br ^bb35 loc(#loc137)
  ^bb35:  // pred: ^bb34
    cir.br ^bb36 loc(#loc119)
  ^bb36:  // 2 preds: ^bb30, ^bb35
    cir.br ^bb37 loc(#loc119)
  ^bb37:  // pred: ^bb36
    cir.br ^bb3 loc(#loc42)
  ^bb38:  // 7 preds: ^bb3, ^bb6, ^bb10, ^bb14, ^bb18, ^bb22, ^bb28
    cir.br ^bb39 loc(#loc42)
  ^bb39:  // pred: ^bb38
    cir.br ^bb40 loc(#loc319)
  ^bb40:  // pred: ^bb39
    %97 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc148)
    %98 = cir.const #cir.int<1> : !s32i loc(#loc149)
    %99 = cir.unary(minus, %98) : !s32i, !s32i loc(#loc149)
    %100 = cir.cmp(ne, %97, %99) : !s32i, !cir.bool loc(#loc320)
    cir.brcond %100 ^bb41, ^bb42 loc(#loc321)
  ^bb41:  // pred: ^bb40
    %101 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    %102 = cir.call @close(%101) : (!s32i) -> !s32i loc(#loc152)
    cir.br ^bb42 loc(#loc147)
  ^bb42:  // 2 preds: ^bb40, ^bb41
    cir.br ^bb43 loc(#loc147)
  ^bb43:  // pred: ^bb42
    cir.br ^bb44 loc(#loc322)
  ^bb44:  // pred: ^bb43
    %103 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc155)
    %104 = cir.const #cir.int<1> : !s32i loc(#loc156)
    %105 = cir.unary(minus, %104) : !s32i, !s32i loc(#loc156)
    %106 = cir.cmp(ne, %103, %105) : !s32i, !cir.bool loc(#loc323)
    cir.brcond %106 ^bb45, ^bb46 loc(#loc324)
  ^bb45:  // pred: ^bb44
    %107 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc158)
    %108 = cir.call @close(%107) : (!s32i) -> !s32i loc(#loc159)
    cir.br ^bb46 loc(#loc154)
  ^bb46:  // 2 preds: ^bb44, ^bb45
    cir.br ^bb47 loc(#loc154)
  ^bb47:  // pred: ^bb46
    cir.br ^bb48 loc(#loc39)
  ^bb48:  // pred: ^bb47
    cir.return loc(#loc28)
  } loc(#loc272)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc326)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc162)
    cir.return loc(#loc161)
  } loc(#loc325)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc328)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc329)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc330)
    cir.br ^bb1 loc(#loc331)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc169)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc169)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc329)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc171)
    %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc171)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc330)
    cir.br ^bb2 loc(#loc332)
  ^bb2:  // pred: ^bb1
    cir.br ^bb4 loc(#loc332)
  ^bb3:  // pred: ^bb24
    %7 = cir.const #cir.int<0> : !s32i loc(#loc176)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc176)
    cir.brcond %8 ^bb4, ^bb25 loc(#loc176)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %9 = cir.const #cir.int<2> : !s32i loc(#loc177)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc178)
    %11 = cir.const #cir.int<6> : !s32i loc(#loc179)
    %12 = cir.call @socket(%9, %10, %11) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc180)
    cir.store %12, %1 : !s32i, !cir.ptr<!s32i> loc(#loc333)
    cir.br ^bb5 loc(#loc334)
  ^bb5:  // pred: ^bb4
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc185)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc186)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc186)
    %16 = cir.cmp(eq, %13, %15) : !s32i, !cir.bool loc(#loc335)
    cir.brcond %16 ^bb6, ^bb7 loc(#loc336)
  ^bb6:  // pred: ^bb5
    cir.br ^bb25 loc(#loc188)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc184)
  ^bb8:  // pred: ^bb7
    %17 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc337)
    %18 = cir.const #cir.int<0> : !s32i loc(#loc191)
    %19 = cir.const #cir.int<16> : !u64i loc(#loc338)
    cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc339)
    %20 = cir.const #cir.int<2> : !s32i loc(#loc196)
    %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc196)
    %22 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc64)
    cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc340)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc198)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc198)
    %25 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc67)
    %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc68)
    cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc341)
    %27 = cir.const #cir.int<20000> : !s32i loc(#loc200)
    %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc200)
    %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc201)
    %30 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
    cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc342)
    cir.br ^bb9 loc(#loc343)
  ^bb9:  // pred: ^bb8
    %31 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc206)
    %32 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc344)
    %33 = cir.const #cir.int<16> : !u64i loc(#loc345)
    %34 = cir.cast(integral, %33 : !u64i), !u32i loc(#loc345)
    %35 = cir.call @bind(%31, %32, %34) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc211)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc212)
    %37 = cir.unary(minus, %36) : !s32i, !s32i loc(#loc212)
    %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc346)
    cir.brcond %38 ^bb10, ^bb11 loc(#loc347)
  ^bb10:  // pred: ^bb9
    cir.br ^bb25 loc(#loc214)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc205)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc348)
  ^bb13:  // pred: ^bb12
    %39 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc217)
    %40 = cir.const #cir.int<5> : !s32i loc(#loc218)
    %41 = cir.call @listen(%39, %40) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc219)
    %42 = cir.const #cir.int<1> : !s32i loc(#loc220)
    %43 = cir.unary(minus, %42) : !s32i, !s32i loc(#loc220)
    %44 = cir.cmp(eq, %41, %43) : !s32i, !cir.bool loc(#loc349)
    cir.brcond %44 ^bb14, ^bb15 loc(#loc350)
  ^bb14:  // pred: ^bb13
    cir.br ^bb25 loc(#loc222)
  ^bb15:  // pred: ^bb13
    cir.br ^bb16 loc(#loc216)
  ^bb16:  // pred: ^bb15
    %45 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc223)
    %46 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc224)
    %47 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc225)
    %48 = cir.call @accept(%45, %46, %47) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc226)
    cir.store %48, %2 : !s32i, !cir.ptr<!s32i> loc(#loc351)
    cir.br ^bb17 loc(#loc352)
  ^bb17:  // pred: ^bb16
    %49 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc231)
    %50 = cir.const #cir.int<1> : !s32i loc(#loc232)
    %51 = cir.unary(minus, %50) : !s32i, !s32i loc(#loc232)
    %52 = cir.cmp(eq, %49, %51) : !s32i, !cir.bool loc(#loc353)
    cir.brcond %52 ^bb18, ^bb19 loc(#loc354)
  ^bb18:  // pred: ^bb17
    cir.br ^bb25 loc(#loc234)
  ^bb19:  // pred: ^bb17
    cir.br ^bb20 loc(#loc230)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc355)
  ^bb21:  // pred: ^bb20
    %53 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc237)
    %54 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc238)
    %55 = cir.cast(array_to_ptrdecay, %54 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc238)
    %56 = cir.cast(bitcast, %55 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc238)
    %57 = cir.const #cir.int<8> : !u64i loc(#loc356)
    %58 = cir.const #cir.int<0> : !s32i loc(#loc241)
    %59 = cir.call @send(%53, %56, %57, %58) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc242)
    %60 = cir.const #cir.int<1> : !s32i loc(#loc243)
    %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc243)
    %62 = cir.cast(integral, %61 : !s32i), !s64i loc(#loc243)
    %63 = cir.cmp(eq, %59, %62) : !s64i, !cir.bool loc(#loc357)
    cir.brcond %63 ^bb22, ^bb23 loc(#loc358)
  ^bb22:  // pred: ^bb21
    %64 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc245)
    %65 = cir.cast(array_to_ptrdecay, %64 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc245)
    cir.call @printLine(%65) : (!cir.ptr<!s8i>) -> () loc(#loc246)
    cir.br ^bb23 loc(#loc236)
  ^bb23:  // 2 preds: ^bb21, ^bb22
    cir.br ^bb24 loc(#loc236)
  ^bb24:  // pred: ^bb23
    cir.br ^bb3 loc(#loc175)
  ^bb25:  // 5 preds: ^bb3, ^bb6, ^bb10, ^bb14, ^bb18
    cir.br ^bb26 loc(#loc175)
  ^bb26:  // pred: ^bb25
    cir.br ^bb27 loc(#loc359)
  ^bb27:  // pred: ^bb26
    %66 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc249)
    %67 = cir.const #cir.int<1> : !s32i loc(#loc250)
    %68 = cir.unary(minus, %67) : !s32i, !s32i loc(#loc250)
    %69 = cir.cmp(ne, %66, %68) : !s32i, !cir.bool loc(#loc360)
    cir.brcond %69 ^bb28, ^bb29 loc(#loc361)
  ^bb28:  // pred: ^bb27
    %70 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc252)
    %71 = cir.call @close(%70) : (!s32i) -> !s32i loc(#loc253)
    cir.br ^bb29 loc(#loc248)
  ^bb29:  // 2 preds: ^bb27, ^bb28
    cir.br ^bb30 loc(#loc248)
  ^bb30:  // pred: ^bb29
    cir.br ^bb31 loc(#loc362)
  ^bb31:  // pred: ^bb30
    %72 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc256)
    %73 = cir.const #cir.int<1> : !s32i loc(#loc257)
    %74 = cir.unary(minus, %73) : !s32i, !s32i loc(#loc257)
    %75 = cir.cmp(ne, %72, %74) : !s32i, !cir.bool loc(#loc363)
    cir.brcond %75 ^bb32, ^bb33 loc(#loc364)
  ^bb32:  // pred: ^bb31
    %76 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc259)
    %77 = cir.call @close(%76) : (!s32i) -> !s32i loc(#loc260)
    cir.br ^bb33 loc(#loc255)
  ^bb33:  // 2 preds: ^bb31, ^bb32
    cir.br ^bb34 loc(#loc255)
  ^bb34:  // pred: ^bb33
    cir.br ^bb35 loc(#loc173)
  ^bb35:  // pred: ^bb34
    cir.return loc(#loc165)
  } loc(#loc327)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_01.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":116:1)
#loc12 = loc("/usr/include/sys/socket.h":117:33)
#loc13 = loc("/usr/include/string.h":156:1)
#loc14 = loc("/usr/include/string.h":157:33)
#loc15 = loc("CWE510_Trapdoor__ip_based_logic_01.c":88:24)
#loc16 = loc("/usr/include/arpa/inet.h":53:1)
#loc17 = loc("/usr/include/arpa/inet.h":53:46)
#loc18 = loc("/usr/include/sys/socket.h":138:1)
#loc19 = loc("/usr/include/sys/socket.h":138:74)
#loc20 = loc("CWE510_Trapdoor__ip_based_logic_01.c":90:40)
#loc21 = loc("CWE510_Trapdoor__ip_based_logic_01.c":98:40)
#loc22 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE510_Trapdoor__ip_based_logic_01.c":100:31)
#loc25 = loc("/usr/include/unistd.h":358:1)
#loc26 = loc("/usr/include/unistd.h":358:27)
#loc27 = loc("CWE510_Trapdoor__ip_based_logic_01.c":41:1)
#loc28 = loc("CWE510_Trapdoor__ip_based_logic_01.c":120:1)
#loc29 = loc("CWE510_Trapdoor__ip_based_logic_01.c":48:9)
#loc30 = loc("CWE510_Trapdoor__ip_based_logic_01.c":48:28)
#loc31 = loc("CWE510_Trapdoor__ip_based_logic_01.c":48:37)
#loc32 = loc("CWE510_Trapdoor__ip_based_logic_01.c":49:9)
#loc33 = loc("CWE510_Trapdoor__ip_based_logic_01.c":49:52)
#loc34 = loc("CWE510_Trapdoor__ip_based_logic_01.c":50:9)
#loc35 = loc("CWE510_Trapdoor__ip_based_logic_01.c":50:31)
#loc36 = loc("CWE510_Trapdoor__ip_based_logic_01.c":51:9)
#loc37 = loc("CWE510_Trapdoor__ip_based_logic_01.c":51:31)
#loc38 = loc("CWE510_Trapdoor__ip_based_logic_01.c":43:5)
#loc39 = loc("CWE510_Trapdoor__ip_based_logic_01.c":119:5)
#loc40 = loc("CWE510_Trapdoor__ip_based_logic_01.c":49:32)
#loc41 = loc("CWE510_Trapdoor__ip_based_logic_01.c":52:9)
#loc42 = loc("CWE510_Trapdoor__ip_based_logic_01.c":104:17)
#loc43 = loc("CWE510_Trapdoor__ip_based_logic_01.c":104:16)
#loc44 = loc("CWE510_Trapdoor__ip_based_logic_01.c":61:35)
#loc45 = loc("CWE510_Trapdoor__ip_based_logic_01.c":61:44)
#loc46 = loc("CWE510_Trapdoor__ip_based_logic_01.c":61:57)
#loc47 = loc("CWE510_Trapdoor__ip_based_logic_01.c":61:28)
#loc48 = loc("CWE510_Trapdoor__ip_based_logic_01.c":61:13)
#loc49 = loc("CWE510_Trapdoor__ip_based_logic_01.c":61:68)
#loc50 = loc("CWE510_Trapdoor__ip_based_logic_01.c":62:13)
#loc51 = loc("CWE510_Trapdoor__ip_based_logic_01.c":65:13)
#loc52 = loc("CWE510_Trapdoor__ip_based_logic_01.c":62:17)
#loc53 = loc("CWE510_Trapdoor__ip_based_logic_01.c":62:33)
#loc54 = loc("CWE510_Trapdoor__ip_based_logic_01.c":63:13)
#loc55 = loc("CWE510_Trapdoor__ip_based_logic_01.c":64:17)
#loc56 = loc("CWE510_Trapdoor__ip_based_logic_01.c":66:20)
#loc57 = loc("CWE510_Trapdoor__ip_based_logic_01.c":66:21)
#loc58 = loc("CWE510_Trapdoor__ip_based_logic_01.c":66:30)
#loc59 = loc("CWE510_Trapdoor__ip_based_logic_01.c":66:33)
#loc60 = loc("CWE510_Trapdoor__ip_based_logic_01.c":66:47)
#loc61 = loc("CWE510_Trapdoor__ip_based_logic_01.c":66:13)
#loc62 = loc("CWE510_Trapdoor__ip_based_logic_01.c":66:48)
#loc63 = loc("CWE510_Trapdoor__ip_based_logic_01.c":67:34)
#loc64 = loc("/usr/include/netinet/in.h":249:5)
#loc65 = loc("CWE510_Trapdoor__ip_based_logic_01.c":67:13)
#loc66 = loc("CWE510_Trapdoor__ip_based_logic_01.c":68:39)
#loc67 = loc("/usr/include/netinet/in.h":251:20)
#loc68 = loc("/usr/include/netinet/in.h":33:15)
#loc69 = loc("CWE510_Trapdoor__ip_based_logic_01.c":68:13)
#loc70 = loc("CWE510_Trapdoor__ip_based_logic_01.c":69:38)
#loc71 = loc("CWE510_Trapdoor__ip_based_logic_01.c":69:32)
#loc72 = loc("/usr/include/netinet/in.h":250:15)
#loc73 = loc("CWE510_Trapdoor__ip_based_logic_01.c":69:13)
#loc74 = loc("CWE510_Trapdoor__ip_based_logic_01.c":69:43)
#loc75 = loc("CWE510_Trapdoor__ip_based_logic_01.c":70:13)
#loc76 = loc("CWE510_Trapdoor__ip_based_logic_01.c":73:13)
#loc77 = loc("CWE510_Trapdoor__ip_based_logic_01.c":70:22)
#loc78 = loc("CWE510_Trapdoor__ip_based_logic_01.c":70:54)
#loc79 = loc("CWE510_Trapdoor__ip_based_logic_01.c":70:55)
#loc80 = loc("CWE510_Trapdoor__ip_based_logic_01.c":70:64)
#loc81 = loc("CWE510_Trapdoor__ip_based_logic_01.c":70:78)
#loc82 = loc("CWE510_Trapdoor__ip_based_logic_01.c":70:17)
#loc83 = loc("CWE510_Trapdoor__ip_based_logic_01.c":70:84)
#loc84 = loc("CWE510_Trapdoor__ip_based_logic_01.c":71:13)
#loc85 = loc("CWE510_Trapdoor__ip_based_logic_01.c":72:17)
#loc86 = loc("CWE510_Trapdoor__ip_based_logic_01.c":74:13)
#loc87 = loc("CWE510_Trapdoor__ip_based_logic_01.c":77:13)
#loc88 = loc("CWE510_Trapdoor__ip_based_logic_01.c":74:24)
#loc89 = loc("CWE510_Trapdoor__ip_based_logic_01.c":74:38)
#loc90 = loc("CWE510_Trapdoor__ip_based_logic_01.c":74:17)
#loc91 = loc("CWE510_Trapdoor__ip_based_logic_01.c":74:44)
#loc92 = loc("CWE510_Trapdoor__ip_based_logic_01.c":75:13)
#loc93 = loc("CWE510_Trapdoor__ip_based_logic_01.c":76:17)
#loc94 = loc("CWE510_Trapdoor__ip_based_logic_01.c":78:35)
#loc95 = loc("CWE510_Trapdoor__ip_based_logic_01.c":78:49)
#loc96 = loc("CWE510_Trapdoor__ip_based_logic_01.c":78:55)
#loc97 = loc("CWE510_Trapdoor__ip_based_logic_01.c":78:28)
#loc98 = loc("CWE510_Trapdoor__ip_based_logic_01.c":78:13)
#loc99 = loc("CWE510_Trapdoor__ip_based_logic_01.c":78:59)
#loc100 = loc("CWE510_Trapdoor__ip_based_logic_01.c":79:13)
#loc101 = loc("CWE510_Trapdoor__ip_based_logic_01.c":82:13)
#loc102 = loc("CWE510_Trapdoor__ip_based_logic_01.c":79:17)
#loc103 = loc("CWE510_Trapdoor__ip_based_logic_01.c":79:33)
#loc104 = loc("CWE510_Trapdoor__ip_based_logic_01.c":80:13)
#loc105 = loc("CWE510_Trapdoor__ip_based_logic_01.c":81:17)
#loc106 = loc("CWE510_Trapdoor__ip_based_logic_01.c":83:13)
#loc107 = loc("CWE510_Trapdoor__ip_based_logic_01.c":86:13)
#loc108 = loc("CWE510_Trapdoor__ip_based_logic_01.c":83:29)
#loc109 = loc("CWE510_Trapdoor__ip_based_logic_01.c":83:62)
#loc110 = loc("CWE510_Trapdoor__ip_based_logic_01.c":83:63)
#loc111 = loc("CWE510_Trapdoor__ip_based_logic_01.c":83:78)
#loc112 = loc("CWE510_Trapdoor__ip_based_logic_01.c":83:79)
#loc113 = loc("CWE510_Trapdoor__ip_based_logic_01.c":83:17)
#loc114 = loc("CWE510_Trapdoor__ip_based_logic_01.c":83:101)
#loc115 = loc("CWE510_Trapdoor__ip_based_logic_01.c":83:100)
#loc116 = loc("CWE510_Trapdoor__ip_based_logic_01.c":84:13)
#loc117 = loc("CWE510_Trapdoor__ip_based_logic_01.c":85:17)
#loc118 = loc("CWE510_Trapdoor__ip_based_logic_01.c":88:13)
#loc119 = loc("CWE510_Trapdoor__ip_based_logic_01.c":102:13)
#loc120 = loc("CWE510_Trapdoor__ip_based_logic_01.c":88:17)
#loc121 = loc("CWE510_Trapdoor__ip_based_logic_01.c":88:42)
#loc122 = loc("CWE510_Trapdoor__ip_based_logic_01.c":88:80)
#loc123 = loc("CWE510_Trapdoor__ip_based_logic_01.c":89:13)
#loc124 = loc("CWE510_Trapdoor__ip_based_logic_01.c":95:13)
#loc125 = loc("CWE510_Trapdoor__ip_based_logic_01.c":97:13)
#loc126 = loc("CWE510_Trapdoor__ip_based_logic_01.c":90:17)
#loc127 = loc("CWE510_Trapdoor__ip_based_logic_01.c":94:17)
#loc128 = loc("CWE510_Trapdoor__ip_based_logic_01.c":90:26)
#loc129 = loc("CWE510_Trapdoor__ip_based_logic_01.c":90:55)
#loc130 = loc("CWE510_Trapdoor__ip_based_logic_01.c":90:75)
#loc131 = loc("CWE510_Trapdoor__ip_based_logic_01.c":90:78)
#loc132 = loc("CWE510_Trapdoor__ip_based_logic_01.c":90:21)
#loc133 = loc("CWE510_Trapdoor__ip_based_logic_01.c":90:85)
#loc134 = loc("CWE510_Trapdoor__ip_based_logic_01.c":91:17)
#loc135 = loc("CWE510_Trapdoor__ip_based_logic_01.c":93:21)
#loc136 = loc("CWE510_Trapdoor__ip_based_logic_01.c":98:17)
#loc137 = loc("CWE510_Trapdoor__ip_based_logic_01.c":101:17)
#loc138 = loc("CWE510_Trapdoor__ip_based_logic_01.c":98:26)
#loc139 = loc("CWE510_Trapdoor__ip_based_logic_01.c":98:57)
#loc140 = loc("CWE510_Trapdoor__ip_based_logic_01.c":98:79)
#loc141 = loc("CWE510_Trapdoor__ip_based_logic_01.c":98:82)
#loc142 = loc("CWE510_Trapdoor__ip_based_logic_01.c":98:21)
#loc143 = loc("CWE510_Trapdoor__ip_based_logic_01.c":98:88)
#loc144 = loc("CWE510_Trapdoor__ip_based_logic_01.c":99:17)
#loc145 = loc("CWE510_Trapdoor__ip_based_logic_01.c":100:21)
#loc146 = loc("CWE510_Trapdoor__ip_based_logic_01.c":105:9)
#loc147 = loc("CWE510_Trapdoor__ip_based_logic_01.c":108:9)
#loc148 = loc("CWE510_Trapdoor__ip_based_logic_01.c":105:13)
#loc149 = loc("CWE510_Trapdoor__ip_based_logic_01.c":105:29)
#loc150 = loc("CWE510_Trapdoor__ip_based_logic_01.c":106:9)
#loc151 = loc("CWE510_Trapdoor__ip_based_logic_01.c":107:26)
#loc152 = loc("CWE510_Trapdoor__ip_based_logic_01.c":107:13)
#loc153 = loc("CWE510_Trapdoor__ip_based_logic_01.c":109:9)
#loc154 = loc("CWE510_Trapdoor__ip_based_logic_01.c":112:9)
#loc155 = loc("CWE510_Trapdoor__ip_based_logic_01.c":109:13)
#loc156 = loc("CWE510_Trapdoor__ip_based_logic_01.c":109:29)
#loc157 = loc("CWE510_Trapdoor__ip_based_logic_01.c":110:9)
#loc158 = loc("CWE510_Trapdoor__ip_based_logic_01.c":111:26)
#loc159 = loc("CWE510_Trapdoor__ip_based_logic_01.c":111:13)
#loc160 = loc("CWE510_Trapdoor__ip_based_logic_01.c":191:1)
#loc161 = loc("CWE510_Trapdoor__ip_based_logic_01.c":194:1)
#loc162 = loc("CWE510_Trapdoor__ip_based_logic_01.c":193:5)
#loc163 = loc("CWE510_Trapdoor__ip_based_logic_01.c":193:11)
#loc164 = loc("CWE510_Trapdoor__ip_based_logic_01.c":126:1)
#loc165 = loc("CWE510_Trapdoor__ip_based_logic_01.c":189:1)
#loc166 = loc("CWE510_Trapdoor__ip_based_logic_01.c":133:9)
#loc167 = loc("CWE510_Trapdoor__ip_based_logic_01.c":133:28)
#loc168 = loc("CWE510_Trapdoor__ip_based_logic_01.c":134:9)
#loc169 = loc("CWE510_Trapdoor__ip_based_logic_01.c":134:31)
#loc170 = loc("CWE510_Trapdoor__ip_based_logic_01.c":135:9)
#loc171 = loc("CWE510_Trapdoor__ip_based_logic_01.c":135:31)
#loc172 = loc("CWE510_Trapdoor__ip_based_logic_01.c":128:5)
#loc173 = loc("CWE510_Trapdoor__ip_based_logic_01.c":188:5)
#loc174 = loc("CWE510_Trapdoor__ip_based_logic_01.c":136:9)
#loc175 = loc("CWE510_Trapdoor__ip_based_logic_01.c":173:17)
#loc176 = loc("CWE510_Trapdoor__ip_based_logic_01.c":173:16)
#loc177 = loc("CWE510_Trapdoor__ip_based_logic_01.c":145:35)
#loc178 = loc("CWE510_Trapdoor__ip_based_logic_01.c":145:44)
#loc179 = loc("CWE510_Trapdoor__ip_based_logic_01.c":145:57)
#loc180 = loc("CWE510_Trapdoor__ip_based_logic_01.c":145:28)
#loc181 = loc("CWE510_Trapdoor__ip_based_logic_01.c":145:13)
#loc182 = loc("CWE510_Trapdoor__ip_based_logic_01.c":145:68)
#loc183 = loc("CWE510_Trapdoor__ip_based_logic_01.c":146:13)
#loc184 = loc("CWE510_Trapdoor__ip_based_logic_01.c":149:13)
#loc185 = loc("CWE510_Trapdoor__ip_based_logic_01.c":146:17)
#loc186 = loc("CWE510_Trapdoor__ip_based_logic_01.c":146:33)
#loc187 = loc("CWE510_Trapdoor__ip_based_logic_01.c":147:13)
#loc188 = loc("CWE510_Trapdoor__ip_based_logic_01.c":148:17)
#loc189 = loc("CWE510_Trapdoor__ip_based_logic_01.c":150:20)
#loc190 = loc("CWE510_Trapdoor__ip_based_logic_01.c":150:21)
#loc191 = loc("CWE510_Trapdoor__ip_based_logic_01.c":150:30)
#loc192 = loc("CWE510_Trapdoor__ip_based_logic_01.c":150:33)
#loc193 = loc("CWE510_Trapdoor__ip_based_logic_01.c":150:47)
#loc194 = loc("CWE510_Trapdoor__ip_based_logic_01.c":150:13)
#loc195 = loc("CWE510_Trapdoor__ip_based_logic_01.c":150:48)
#loc196 = loc("CWE510_Trapdoor__ip_based_logic_01.c":151:34)
#loc197 = loc("CWE510_Trapdoor__ip_based_logic_01.c":151:13)
#loc198 = loc("CWE510_Trapdoor__ip_based_logic_01.c":152:39)
#loc199 = loc("CWE510_Trapdoor__ip_based_logic_01.c":152:13)
#loc200 = loc("CWE510_Trapdoor__ip_based_logic_01.c":153:38)
#loc201 = loc("CWE510_Trapdoor__ip_based_logic_01.c":153:32)
#loc202 = loc("CWE510_Trapdoor__ip_based_logic_01.c":153:13)
#loc203 = loc("CWE510_Trapdoor__ip_based_logic_01.c":153:43)
#loc204 = loc("CWE510_Trapdoor__ip_based_logic_01.c":154:13)
#loc205 = loc("CWE510_Trapdoor__ip_based_logic_01.c":157:13)
#loc206 = loc("CWE510_Trapdoor__ip_based_logic_01.c":154:22)
#loc207 = loc("CWE510_Trapdoor__ip_based_logic_01.c":154:54)
#loc208 = loc("CWE510_Trapdoor__ip_based_logic_01.c":154:55)
#loc209 = loc("CWE510_Trapdoor__ip_based_logic_01.c":154:64)
#loc210 = loc("CWE510_Trapdoor__ip_based_logic_01.c":154:78)
#loc211 = loc("CWE510_Trapdoor__ip_based_logic_01.c":154:17)
#loc212 = loc("CWE510_Trapdoor__ip_based_logic_01.c":154:84)
#loc213 = loc("CWE510_Trapdoor__ip_based_logic_01.c":155:13)
#loc214 = loc("CWE510_Trapdoor__ip_based_logic_01.c":156:17)
#loc215 = loc("CWE510_Trapdoor__ip_based_logic_01.c":158:13)
#loc216 = loc("CWE510_Trapdoor__ip_based_logic_01.c":161:13)
#loc217 = loc("CWE510_Trapdoor__ip_based_logic_01.c":158:24)
#loc218 = loc("CWE510_Trapdoor__ip_based_logic_01.c":158:38)
#loc219 = loc("CWE510_Trapdoor__ip_based_logic_01.c":158:17)
#loc220 = loc("CWE510_Trapdoor__ip_based_logic_01.c":158:44)
#loc221 = loc("CWE510_Trapdoor__ip_based_logic_01.c":159:13)
#loc222 = loc("CWE510_Trapdoor__ip_based_logic_01.c":160:17)
#loc223 = loc("CWE510_Trapdoor__ip_based_logic_01.c":162:35)
#loc224 = loc("CWE510_Trapdoor__ip_based_logic_01.c":162:49)
#loc225 = loc("CWE510_Trapdoor__ip_based_logic_01.c":162:55)
#loc226 = loc("CWE510_Trapdoor__ip_based_logic_01.c":162:28)
#loc227 = loc("CWE510_Trapdoor__ip_based_logic_01.c":162:13)
#loc228 = loc("CWE510_Trapdoor__ip_based_logic_01.c":162:59)
#loc229 = loc("CWE510_Trapdoor__ip_based_logic_01.c":163:13)
#loc230 = loc("CWE510_Trapdoor__ip_based_logic_01.c":166:13)
#loc231 = loc("CWE510_Trapdoor__ip_based_logic_01.c":163:17)
#loc232 = loc("CWE510_Trapdoor__ip_based_logic_01.c":163:33)
#loc233 = loc("CWE510_Trapdoor__ip_based_logic_01.c":164:13)
#loc234 = loc("CWE510_Trapdoor__ip_based_logic_01.c":165:17)
#loc235 = loc("CWE510_Trapdoor__ip_based_logic_01.c":168:13)
#loc236 = loc("CWE510_Trapdoor__ip_based_logic_01.c":171:13)
#loc237 = loc("CWE510_Trapdoor__ip_based_logic_01.c":168:22)
#loc238 = loc("CWE510_Trapdoor__ip_based_logic_01.c":168:36)
#loc239 = loc("CWE510_Trapdoor__ip_based_logic_01.c":168:53)
#loc240 = loc("CWE510_Trapdoor__ip_based_logic_01.c":168:75)
#loc241 = loc("CWE510_Trapdoor__ip_based_logic_01.c":168:78)
#loc242 = loc("CWE510_Trapdoor__ip_based_logic_01.c":168:17)
#loc243 = loc("CWE510_Trapdoor__ip_based_logic_01.c":168:84)
#loc244 = loc("CWE510_Trapdoor__ip_based_logic_01.c":169:13)
#loc245 = loc("CWE510_Trapdoor__ip_based_logic_01.c":170:27)
#loc246 = loc("CWE510_Trapdoor__ip_based_logic_01.c":170:17)
#loc247 = loc("CWE510_Trapdoor__ip_based_logic_01.c":174:9)
#loc248 = loc("CWE510_Trapdoor__ip_based_logic_01.c":177:9)
#loc249 = loc("CWE510_Trapdoor__ip_based_logic_01.c":174:13)
#loc250 = loc("CWE510_Trapdoor__ip_based_logic_01.c":174:29)
#loc251 = loc("CWE510_Trapdoor__ip_based_logic_01.c":175:9)
#loc252 = loc("CWE510_Trapdoor__ip_based_logic_01.c":176:26)
#loc253 = loc("CWE510_Trapdoor__ip_based_logic_01.c":176:13)
#loc254 = loc("CWE510_Trapdoor__ip_based_logic_01.c":178:9)
#loc255 = loc("CWE510_Trapdoor__ip_based_logic_01.c":181:9)
#loc256 = loc("CWE510_Trapdoor__ip_based_logic_01.c":178:13)
#loc257 = loc("CWE510_Trapdoor__ip_based_logic_01.c":178:29)
#loc258 = loc("CWE510_Trapdoor__ip_based_logic_01.c":179:9)
#loc259 = loc("CWE510_Trapdoor__ip_based_logic_01.c":180:26)
#loc260 = loc("CWE510_Trapdoor__ip_based_logic_01.c":180:13)
#loc261 = loc(fused[#loc1, #loc2])
#loc262 = loc(fused[#loc3, #loc4])
#loc263 = loc(fused[#loc5, #loc6])
#loc264 = loc(fused[#loc7, #loc8])
#loc265 = loc(fused[#loc9, #loc10])
#loc266 = loc(fused[#loc11, #loc12])
#loc267 = loc(fused[#loc13, #loc14])
#loc268 = loc(fused[#loc16, #loc17])
#loc269 = loc(fused[#loc18, #loc19])
#loc270 = loc(fused[#loc22, #loc23])
#loc271 = loc(fused[#loc25, #loc26])
#loc272 = loc(fused[#loc27, #loc28])
#loc273 = loc(fused[#loc29, #loc30])
#loc274 = loc(fused[#loc29, #loc31])
#loc275 = loc(fused[#loc32, #loc33])
#loc276 = loc(fused[#loc34, #loc35])
#loc277 = loc(fused[#loc36, #loc37])
#loc278 = loc(fused[#loc38, #loc39])
#loc279 = loc(fused[#loc40, #loc33])
#loc280 = loc(fused[#loc41, #loc42])
#loc281 = loc(fused[#loc48, #loc49])
#loc282 = loc(fused[#loc50, #loc51])
#loc283 = loc(fused[#loc52, #loc53])
#loc284 = loc(fused[#loc54, #loc51])
#loc285 = loc(fused[#loc56, #loc57])
#loc286 = loc(fused[#loc59, #loc60])
#loc287 = loc(fused[#loc61, #loc62])
#loc288 = loc(fused[#loc65, #loc63])
#loc289 = loc(fused[#loc69, #loc66])
#loc290 = loc(fused[#loc73, #loc74])
#loc291 = loc(fused[#loc75, #loc76])
#loc292 = loc(fused[#loc78, #loc79])
#loc293 = loc(fused[#loc80, #loc81])
#loc294 = loc(fused[#loc82, #loc83])
#loc295 = loc(fused[#loc84, #loc76])
#loc296 = loc(fused[#loc86, #loc87])
#loc297 = loc(fused[#loc90, #loc91])
#loc298 = loc(fused[#loc92, #loc87])
#loc299 = loc(fused[#loc98, #loc99])
#loc300 = loc(fused[#loc100, #loc101])
#loc301 = loc(fused[#loc102, #loc103])
#loc302 = loc(fused[#loc104, #loc101])
#loc303 = loc(fused[#loc106, #loc107])
#loc304 = loc(fused[#loc109, #loc110])
#loc305 = loc(fused[#loc111, #loc112])
#loc306 = loc(fused[#loc113, #loc114])
#loc307 = loc(fused[#loc116, #loc107])
#loc308 = loc(fused[#loc118, #loc119])
#loc309 = loc(fused[#loc120, #loc122])
#loc310 = loc(fused[#loc123, #loc124, #loc125, #loc119])
#loc311 = loc(fused[#loc126, #loc127])
#loc312 = loc(fused[#loc129, #loc130])
#loc313 = loc(fused[#loc132, #loc133])
#loc314 = loc(fused[#loc134, #loc127])
#loc315 = loc(fused[#loc136, #loc137])
#loc316 = loc(fused[#loc139, #loc140])
#loc317 = loc(fused[#loc142, #loc143])
#loc318 = loc(fused[#loc144, #loc137])
#loc319 = loc(fused[#loc146, #loc147])
#loc320 = loc(fused[#loc148, #loc149])
#loc321 = loc(fused[#loc150, #loc147])
#loc322 = loc(fused[#loc153, #loc154])
#loc323 = loc(fused[#loc155, #loc156])
#loc324 = loc(fused[#loc157, #loc154])
#loc325 = loc(fused[#loc160, #loc161])
#loc326 = loc(fused[#loc162, #loc163])
#loc327 = loc(fused[#loc164, #loc165])
#loc328 = loc(fused[#loc166, #loc167])
#loc329 = loc(fused[#loc168, #loc169])
#loc330 = loc(fused[#loc170, #loc171])
#loc331 = loc(fused[#loc172, #loc173])
#loc332 = loc(fused[#loc174, #loc175])
#loc333 = loc(fused[#loc181, #loc182])
#loc334 = loc(fused[#loc183, #loc184])
#loc335 = loc(fused[#loc185, #loc186])
#loc336 = loc(fused[#loc187, #loc184])
#loc337 = loc(fused[#loc189, #loc190])
#loc338 = loc(fused[#loc192, #loc193])
#loc339 = loc(fused[#loc194, #loc195])
#loc340 = loc(fused[#loc197, #loc196])
#loc341 = loc(fused[#loc199, #loc198])
#loc342 = loc(fused[#loc202, #loc203])
#loc343 = loc(fused[#loc204, #loc205])
#loc344 = loc(fused[#loc207, #loc208])
#loc345 = loc(fused[#loc209, #loc210])
#loc346 = loc(fused[#loc211, #loc212])
#loc347 = loc(fused[#loc213, #loc205])
#loc348 = loc(fused[#loc215, #loc216])
#loc349 = loc(fused[#loc219, #loc220])
#loc350 = loc(fused[#loc221, #loc216])
#loc351 = loc(fused[#loc227, #loc228])
#loc352 = loc(fused[#loc229, #loc230])
#loc353 = loc(fused[#loc231, #loc232])
#loc354 = loc(fused[#loc233, #loc230])
#loc355 = loc(fused[#loc235, #loc236])
#loc356 = loc(fused[#loc239, #loc240])
#loc357 = loc(fused[#loc242, #loc243])
#loc358 = loc(fused[#loc244, #loc236])
#loc359 = loc(fused[#loc247, #loc248])
#loc360 = loc(fused[#loc249, #loc250])
#loc361 = loc(fused[#loc251, #loc248])
#loc362 = loc(fused[#loc254, #loc255])
#loc363 = loc(fused[#loc256, #loc257])
#loc364 = loc(fused[#loc258, #loc255])
